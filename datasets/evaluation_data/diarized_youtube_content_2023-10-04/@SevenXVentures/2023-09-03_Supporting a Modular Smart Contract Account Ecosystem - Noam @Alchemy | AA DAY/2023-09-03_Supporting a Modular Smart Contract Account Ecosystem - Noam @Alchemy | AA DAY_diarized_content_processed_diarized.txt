00:00:02.890 - 00:00:06.190, Speaker A: Sorry, guys. We're about to start. Okay, cool.
00:00:06.190 - 00:00:10.046, Speaker A: Take three. Fingers crossed. Thank you.
00:00:10.046 - 00:00:22.366, Speaker A: Thank you, thank you. Who here was at Bass on Sunday, by the way? Okay, these might look a little familiar, but I did tweak some, so there's some differences. Cool.
00:00:22.366 - 00:00:30.706, Speaker A: So a little bit about me. I'm on the engineering team at Alchemy. I've been there a little bit over three years now, and for the past about three quarters, I've been thinking a little bit about Web Three UX.
00:00:30.706 - 00:01:08.180, Speaker A: We talked to tens of thousands of development teams, and a common theme is, hey, it's really hard for me to onboard new users. The limited market that I can address is not sufficient to run my business in how do I make this easier to onboard more people over time? And a little bit about Alchemy is we're a Web Three developer platform, so we try to provide tools and services that developers might need in order to build DApps and other tools on top of Web Three. So in the same way that kind of operating system let developers build on top of hardware and cloud computing, build on top of cloud infrastructure, we try to build on top of Web Three infrastructure to provide a seamless platform and user developer experience.
00:01:08.180 - 00:01:26.034, Speaker A: Okay, so quickly, why are we here? Quick show of hands. Who's read Vitalik's Three Transitions blog post or is familiar with it? Cool. Seems like good familiarity, but he argues, essentially there's three main transitions that need to occur to enable onboarding more people to the blockchain.
00:01:26.034 - 00:01:39.142, Speaker A: The first is moving to L Two, so the L two scaling transition. The second is the Wallet security transition, and that is moving users from EOAS to contract accounts. We'll go into what that means a little bit later, and then the third is the privacy transition.
00:01:39.142 - 00:01:59.646, Speaker A: And so we're kind of focusing right here on the second piece of how do we migrate more users to contract accounts over time. And the reason that that's important is, as we mentioned earlier, wallet UX needs to improve to onboard a billion people, and at the same time, self custody matters. And as Antoine pointed out earlier, there's generally a direct trade off between UX and self sovereignty.
00:01:59.646 - 00:02:09.666, Speaker A: And how do we provide a solution that checks both boxes? So today's agenda ya. What AA. How AA? How AA.
00:02:09.666 - 00:02:33.130, Speaker A: But slightly more technical, and then we can tie it all a little bit together like it so first, let's rewind to the 90s. This might probably honestly, I'm like aging myself being in this room, but we'll look familiar to some of you guys as, like, an Internet UX that was around back when you use dial up modems, and everything was super slow, and you opened and you got, like, 30 viruses from pages that look like this. So UX was poor.
00:02:33.130 - 00:02:43.546, Speaker A: End users kept getting compromised on the Internet. There were not many security rails. It was kind of the wild west and also in the 90s, like a Nobel laureate.
00:02:43.546 - 00:02:46.682, Speaker A: I don't know. Again, who's familiar with this is Paul Krugerman. He's an economics Nobel laureate.
00:02:46.682 - 00:02:57.990, Speaker A: He kind of called the top on the Internet in the early mid 90s. He's like, there's not really anywhere to go from here. And also in the 90s, there was this concept of Internet companies as directly opposed from real companies.
00:02:57.990 - 00:03:13.094, Speaker A: So Internet companies had unorthodox business models. As exciting as they were, they were unappealing to the biggest consumer spending markets, which tended to skew older, like new technology provided more friction there. The UX was difficult and foreign scale and infrastructure was limited.
00:03:13.094 - 00:03:19.334, Speaker A: And there were unclear legal frameworks. And compare this to the real companies like GMs. They sold cars.
00:03:19.334 - 00:03:28.030, Speaker A: There were tried and true business models. Generations grew up kind of familiar with these products. There were years of legal precedence and they were able to create products that served entire countries.
00:03:28.030 - 00:03:45.042, Speaker A: But still, there was a little kernel in the Internet that got people very excited. And today I would argue that every company is an Internet company. And specifically what I mean by that is that all companies provide value to their users via the Internet in some capacity.
00:03:45.042 - 00:03:50.022, Speaker A: So even on the list before was Saudi Aramco. And you're like, that's not an Internet company. But you can go to Saudi Aramco.com,
00:03:50.022 - 00:04:05.446, Speaker A: learn about Saudi Aramco, learn about their business, see where as a vendor you might be able to distribute their products, et cetera. And so they're able to provide some value to their customers and to their user base across the Internet. So Internet UX has come a long way in three decades.
00:04:05.446 - 00:04:11.926, Speaker A: From the screenshot I showed on the left to some that you guys are familiar with on the right, which is Amazon. Like, you open it without thinking. You can purchase products, they show up at your door.
00:04:11.926 - 00:04:21.280, Speaker A: It's incredible. So how do we get from A to B? Also today, UX interfacing with blockchains is very limited. So I think all of you guys are probably familiar with this page.
00:04:21.280 - 00:04:42.390, Speaker A: It's like the problem that we're all kind of trying to solve is like, there's no way my mom is ever getting on crypto if she has to do this when she gets set up. So how do we improve this UX? Also today, the same noble Paul Krugman called the top on cryptocurrencies because it goes exactly in the opposite of long term trends. O for Tupal.
00:04:42.390 - 00:05:05.822, Speaker A: And like today, there are distinction of crypto companies versus real companies, where again, crypto companies, difficult legal frameworks, difficult scale and infrastructure, exciting but unorthodox business models, and unappealing to the biggest consumer spending models. And the real companies, which were like the Internet companies of the past, have evolved not to just like country scale, but like global scale. Still.
00:05:05.822 - 00:05:19.330, Speaker A: There's a kernel that people are very excited about, about blockchains. So how do we get to a future in which every company is also a crypto company. And again, that doesn't mean they have to be crypto for, but how do they provide value to their users via their applications? And that can be predicated on crypto Rails.
00:05:19.330 - 00:05:49.018, Speaker A: So how do we get away from this page to the types of UX flows that developers and end users are more familiar with? So going from like, a secret recovery phase to this recover with Google or this MetaMask checkout flow to something like Apple Pay that millions and millions of users are all familiar with. So I argue, and if there's one thing you guys take away from this, is that we can solve a lot of these UX problems with smart contract accounts, and that account abstraction enables smart contract accounts. Account abstraction is a little bit of a terrible name.
00:05:49.018 - 00:06:01.850, Speaker A: We'll dig in specifically into what that definition is later. But if you take away two things, let it be these two things. Smart contract accounts enable better UX, and account abstraction is the infrastructure that enables smart contract whoops.
00:06:01.850 - 00:06:17.746, Speaker A: So, quickly, we'll dive into the technical underpinnings of account abstraction. We'll dive a little bit later into what Alchemy is doing in this space, and then we'll start tying it together back into some of the high level ideas that we think are really promising here. So there are two kinds of accounts, as we learned a few times now.
00:06:17.746 - 00:06:26.854, Speaker A: There are EOAS and there are smart contract accounts. EOAS are fully controlled by a single key that can never change. If you lose the key, you lose the account.
00:06:26.854 - 00:06:36.042, Speaker A: It has very hard coded validation rules. So on Ethereum, that validates a signature valid along what's called K one elliptic curve. It validates the user's account.
00:06:36.042 - 00:06:43.306, Speaker A: It validates their balance, and that's about it. And you can never change that, ever. And contract accounts can have whatever access rules they want.
00:06:43.306 - 00:06:52.190, Speaker A: So you can use different elliptic curves. You can use other cryptographic schemes. You can impose other types of constructs into what defines a user's account, such as things like account recovery.
00:06:52.190 - 00:07:06.094, Speaker A: So, in general, it'd be really good if you could have contract accounts instead of EOAS. However, on Ethereum, all blockchain activity today must be initiated by an EOA. This is a reason that Argent moved to StarkNet.
00:07:06.094 - 00:07:12.546, Speaker A: So StarkNet has native account abstraction. It's not a limitation there. But if you want to address the biggest developer ecosystem, you're limited by the EVM.
00:07:12.546 - 00:07:26.890, Speaker A: And the EVM requires all transactions initiate via an EOA. So maybe as an alternative, let's introduce a new actor we'll call an executor. And instead of you using your EOA, the executor can use their EOA to abstract you away from your smart contract wallet.
00:07:26.890 - 00:07:37.374, Speaker A: Cool. So it could work as the follows a user says, hey, Executor, please send this message to my smart contract account. The executor says okay, and then sends the message to the account executing the account.
00:07:37.374 - 00:07:52.030, Speaker A: Like happy ending, right? Not quite because in this model the executor is stuck paying for gas. So in the Ethereum model with an EOA, there's always a gas fee associated with every transaction. And in this model that we proposed earlier, the executor is stuck paying this gas fee for the users.
00:07:52.030 - 00:08:05.362, Speaker A: That doesn't quite seem right. How do we improve that? So what if we just say, hey, I promise that I'll pay gas, I'll pay you back for gas message we're in web three. Like it's all about trust but verify.
00:08:05.362 - 00:08:23.710, Speaker A: We want to rely on cryptographic primitives and not hey, I trust that you do this. So how do we enforce this on chain? In other words, the executor quoting Rihanna wants its money back and we don't want to just rely on the trust from the user. We want some concrete primitive in the protocol to enforce this interaction.
00:08:23.710 - 00:08:45.890, Speaker A: So to that point we can introduce the entry point and the new flow now is the user sends a message to the executor. The executor sends this message to the entry point which executes the message on the user's wallet and then also makes sure there's enough gas left over to pay the executor back for using a COA. So atomically it'll make sure that the message executes on the wallet and pay the executor back for these gas fees.
00:08:45.890 - 00:09:08.620, Speaker A: Cool. So now we have a slightly better flow and as we're moving we realize, hey, this executor could probably do this flow for more than one user. Why is it doing it for just one user? So why don't we rename it to a bundler? And now it can do a lot of these flows for a lot of users and kind of aggregate a lot of these account abstraction transactions into a single transaction and post later.
00:09:08.620 - 00:09:26.218, Speaker A: So the new flow is like, this user is like, hey bundler, here are all my messages. The bundler takes all the user's messages and sends them to the entry point. The entry point then federates them out across to the user's wallets and makes sure that for each user it has enough gas to then pay the bundler back for executing this transaction.
00:09:26.218 - 00:09:42.146, Speaker A: So now you have kind of a working flow of how do you send funds to a user's wallet and get the bundler reimbursed for these actions. It doesn't address a core issue of US and blockchains, which is gas. So like in this model, someone, namely the user's wallet still has to pay for gas on every transaction.
00:09:42.146 - 00:09:59.366, Speaker A: Like what if they don't have gas? How do they get started? So we're building some of these bundlers, we'll talk a little bit about the specifics of that in a little bit. But as mentioned, this gas problem is still a huge problem. New users get started, they can create an account, but then they can't send a transaction until they have gas.
00:09:59.366 - 00:10:15.374, Speaker A: And they get gas. You go to Coinbase, you KYC, you wait three days you figure out how to bridge, you get the network wrong, you get super pissed and you never use crypto again. So what if we can abstract this away entirely? So, in the 14 Two seven spec, there's an actor called The Paymaster, and that's exactly what The Paymaster does.
00:10:15.374 - 00:10:26.180, Speaker A: So The Paymaster can cover the gas fees instead of the user's wallet. So we're writing some of these as well. We can go into a little bit about that in more detail, but honestly, these are less interesting.
00:10:26.180 - 00:10:35.798, Speaker A: And now we have this, like, full flow as defined in ERC, four three seven. So users send all their messages to the bundler. The bundler sends them all to the entry point.
00:10:35.798 - 00:10:53.580, Speaker A: The entry point executes them on users wallets, and then instead of collecting the gas from the user's wallet, collects from The Paymaster, providing the logic all works out and everyone's happy. Users can get started with no gas, bundler gets reimbursed for its actions. And we have kind of a coherent system that works for all users here.
00:10:53.580 - 00:11:02.026, Speaker A: So that's kind of like a high level of the 4237 flows. A couple of things to call out. So I think this was a question that Antoine Field earlier.
00:11:02.026 - 00:11:18.674, Speaker A: Sorry that the text is a little bit small here, but I think there's a couple of different parts of this process that need to be distinguished. So one is the actual smart account. That's the user's account on chain, and that has a bunch of rules around like, what do I execute? How do I execute it? Who has this permission to do that? And then at the top level, there's the key management.
00:11:18.674 - 00:11:28.054, Speaker A: And in Blockchains, every single transaction still needs to originate with a signed message. So there are still keys living somewhere. Account abstraction alone does not solve the key management problem.
00:11:28.054 - 00:11:54.554, Speaker A: It can help make keys more redundant by giving you multiple keys and giving them scope permissions and even letting them use other signing schemes. So, as I mentioned, Ethereum uses the K one elliptic curve. It was barred from bitcoin and bitcoin picked that because they're, like tinfoil hat government, has a backdoor, can't use anything popularly supported, but there's a lot of really good popularly supported curves, so anything NIST supported will have support from the hardware on your device.
00:11:54.554 - 00:12:12.950, Speaker A: And so what you can do with that is if you validate a different curve, like the R one curve, you can use your phone as a hardware wallet and sign transactions with things like Face ID instead of relying on an EOA that is hard to secure because you can't use the secure enclave. You can also use things like post quantum signers if that comes necessary. You can use things like BLS signature aggregation to push costs on an L two.
00:12:12.950 - 00:12:20.166, Speaker A: Won't get too much into that now, but I'll have to answer questions about later. Cool. And then I guess this is like intense day.
00:12:20.166 - 00:12:33.190, Speaker A: So back to dan. If you guys were here the other day, dan gave a good talk on why Intents are Psyops, so bringing that meme back. But there's like a very light user Intent model here where the user just wants to execute a transaction.
00:12:33.190 - 00:12:53.646, Speaker A: They don't care about gas. So how do we abstract gas away from the end user and give them this transaction object where some other actors incentivize to cover gas on their behalf? And that's kind of this Paymaster entity that we covered earlier. So the Paymaster can enable a gas abstraction for end users, enable them to either get like, free transactions so they're entirely sponsored, or sponsorships in other, ERC, 20 tokens.
00:12:53.646 - 00:13:04.386, Speaker A: So if you're a game, you can pay for gas with the token from my game, or you can pay for gas with USDC or something else. Cool. So I mentioned earlier that we're building a bundler.
00:13:04.386 - 00:13:20.714, Speaker A: We called it Rundler because we suck at naming it's a Rust bundler. I know, super clever naming card. So all my slides up to now were pretty nice after now, no, don't judge me for this, but here we go.
00:13:20.714 - 00:13:38.610, Speaker A: So what is runler? Rundler is a Rust four two seven user operation bundler. We are drawing a lot of the design principles from Ref, which is Paradigm's new Rust Ethereum client. It's designed to be highly modular in leveraging, the latest and greatest in the Rust Ethereum ecosystem, which in general has been designed from the ground up for performance.
00:13:38.610 - 00:13:51.750, Speaker A: So as to that point, there's three core components. There is the user operation mempool it's stateful, and then there are two stateless components that can scale horizontally. On top of that, there is the RPC server and the bundle builder.
00:13:51.750 - 00:14:08.490, Speaker A: And you can run this all in an integrated mode on a single machine with zero copy, so it just passes around references. You can also run this on different machines for horizontal scaling and using grpcs interface, we've been making heavy use of Ether's Rs. We're going to switch to Alloy, which are like some of the newer projects coming out of the Rust East ecosystem.
00:14:08.490 - 00:14:30.190, Speaker A: And we have some pretty novel gas estimation techniques for user operations. So we actually implement binary search and solidity to kind of account for what's called the 164th rule. And then last thing, we've spent a lot of time around bundle building to reduce the gas overhead, make it easier for things like BLS and contegration moving forward and handle all the denial service rules defined in four three seven to protect the bundler.
00:14:30.190 - 00:14:46.262, Speaker A: So we're going to be open sourcing this pretty soon, a little bit more than a second when Rundler. So we're actually currently live for Alchemy's managed services. So if you guys want to get started building on the bundler, you can do so via our Endpoints it's across Ethereum Arbitram polygon optimism based.
00:14:46.262 - 00:15:13.434, Speaker A: Right now we powered Cyber Connects AirDrop last week, which I know is a seven x portco so awesome to see that. And we have a long checklist that I promise you has more check marks at this point of us getting ready to open source it and just making sure that it's like clean and ready for developers to onboard to whereundler so it's on all the non native AA EVM chains like StarkNet, as mentioned earlier, is awesome. You don't actually need a bundler.
00:15:13.434 - 00:15:18.846, Speaker A: There's actually a lot of things that are bad about the bundler. We talk about that in a second. So StarkNet makes like, we don't even want to bother with that.
00:15:18.846 - 00:15:27.826, Speaker A: We're already not EVM compatible. Let's just build it right from the get go. For the EVM chains, you'll need a bundler if you want account abstraction, or you can use like, legacy systems like Gelato.
00:15:27.826 - 00:15:51.162, Speaker A: But the thing with the bundler is it's, one, standardized, so you get some kind of like, ecosystem compounding benefits, and two, once it has a mempool, will be more censorship resistant than anything that is out there today. How and who runler? So we're still benchmarks pending, but we handle this AirDrop pretty well. We've been load testing over 1000 reads per second, and the live use cases were about 25 writes per second.
00:15:51.162 - 00:16:10.420, Speaker A: But honestly, all of this is kind of constrained by the underlying network. So reads mainly fan out to the nodes that power the bundler and writes are going to be limited by the amount of gas per block in the underlying network. So we actually had a bug last week, two weeks ago, where we were creating bundles that use more gas and optimism allowed per block, so we had to go and hot fix that real quick.
00:16:10.420 - 00:16:23.400, Speaker A: It's currently a core Alchemy team of four engineers and we're hoping to get some more open source contributors on soon. We've already talked to a few early interested parties to get early exposure before we full open source. If that could be you come talk to me after.
00:16:23.400 - 00:16:54.830, Speaker A: There's a few limitations of bundling in 43 seven, so it's like a bit idiosyncratic that the block builder is separate from the bundler. A lot of the 4237 rules exist in place to protect the bundler, and those wouldn't have to exist if the bundler can guarantee that transactions won't revert on chain, which is a power the block builder has. So over time, we see this moving towards native AA, where hopefully some of the optimistic L two S can start thinking about what this looks like before we decide to enshrine it in Ethereum in probably like a five year timeline.
00:16:54.830 - 00:17:00.734, Speaker A: Cool. Looking forward. So we're cutting the public beta release early mid September.
00:17:00.734 - 00:17:22.118, Speaker A: This is like the open source cut we've been working on P to P specs with folks like Biconomy as well as other folks writing bundlers and the Ethereum Foundation to make sure that it's designed thoughtfully and scalably and can handle this ecosystem load. Moving forward again, kind of leveraging all the latest and greatest from Rust Ethereum. So we want to add some custom simulation tracers straight into the ref binary.
00:17:22.118 - 00:17:46.766, Speaker A: We want to experiment with things like AA ref. We can support both non AA and AA and have like a top of block user operation bundle transaction as well as a bunch of regular transactions after it, and various improvements to the node client itself to better support account abstraction infrastructure we also not on here. We've been working a lot with the Chain Foundation, so, like Arbitrum optimism, polygon, et cetera, to better support AA in their ecosystem.
00:17:46.766 - 00:17:59.234, Speaker A: So we passed AIP two. It's an Arbitram improvement proposal to support conditional transactions on their sequencer, which is like another way to better protect these bundlers moving forward. Cool.
00:17:59.234 - 00:18:06.322, Speaker A: Using runler. So as I mentioned earlier, you can get started on it with Alchemy today. It's the same API endpoint that you use for any other request on Alchemy.
00:18:06.322 - 00:18:17.430, Speaker A: We're going to be open sourcing it soon, so if you want to run it yourself or you want to run on chains that we don't support, that's totally going to be an option. We're very excited to get this in the hands. It'll be a copy left license, so feel free to fork and modify it as you want.
00:18:17.430 - 00:18:34.666, Speaker A: Any commercial use cases will have to remain open source. It's the only requirement. It and there's generally a lot of complexities with all these flows around fee estimation and constructing accounts and knowing how to there's a concept called a counterfactual, so you don't want to deploy account until its first transaction.
00:18:34.666 - 00:18:48.626, Speaker A: To safer gas, the SDK will abstract all this stuff away from you and just make it a very simple developer experience. Okay, cool. So that was like a bit of a technical deep dive, quick lift up and back into the tech and then out of the tech for reals.
00:18:48.626 - 00:19:04.540, Speaker A: So what does this enable argument is? This starts to enable these types of use cases that users are familiar with today. And so oh, is there a missing slide? Oh, no, I'm missing a GIF. Oh, it's here.
00:19:04.540 - 00:19:12.422, Speaker A: It's not even that good of a gift. I hyped it up anyway. So we can enable this with what we're calling modular smart contract accounts.
00:19:12.422 - 00:19:18.026, Speaker A: This is being worked on by a lot of folks, not just Amazon. We're really excited about this. So powering.
00:19:18.026 - 00:19:23.662, Speaker A: This is an ERC. So it's ERC 6900. We've been working on it for about two quarters now.
00:19:23.662 - 00:19:32.082, Speaker A: We recently added YOV from the Ethereum Foundation as a co author. He's the one behind. We're working to start expanding the author set to other teams too.
00:19:32.082 - 00:19:40.870, Speaker A: And the whole idea here is creating a modular smart contract account. And the reason that you'd want that is because Vitalik said so. No, just kidding.
00:19:40.870 - 00:20:02.986, Speaker A: But he did say that. And the reason that we want to do that is to maximize flexibility for DApp developers while optimizing for extensibility composability and security. So ideally, instead of everyone rolling their own account limitation, as a developer, you can kind of mix and match which plugins you want to provide the best application experience in the context of your account by defining this user stack on chain.
00:20:02.986 - 00:20:20.626, Speaker A: And so you both provide developers this secure composable building block parameters, and you also reduce developer lock in to specific account limitations. So any plugin can work with any account. Okay? And so, like, defining a modular account is this is a lot of text.
00:20:20.626 - 00:20:33.414, Speaker A: There's validation functions, there's execution functions, and there's hooks. Validation functions validate authenticity so you can validate a new signature like the R one curve. Execution functions execute any custom logic allowed by the account.
00:20:33.414 - 00:20:49.420, Speaker A: So this might be something like a cross chain transfer, and hooks execute custom logic before and after execution functions. So an example might be, hey, I never want this NFT to leave my account. If it ever leaves my account, revert the transaction, and you can use that to safeguard your $100,000 NFT on your account.
00:20:49.420 - 00:21:12.366, Speaker A: The overall architecture here is loosely based on Android's permissioning system, where this ERC defines a way for the account to know how to install and uninstall plugins. There's, like, an iteration coming out in about two weeks together reference implementations that also define some of the security concerns around the plugin and how to properly permission this interface. Buzzword bingo.
00:21:12.366 - 00:21:21.480, Speaker A: I guess we already mentioned Intent, so it's like, not that climactic, but there's a lot of buzwords in crypto. I think we're as a community very bad at naming things. So this is just kind of an example of that.
00:21:21.480 - 00:21:48.602, Speaker A: But I think long term, how I see ERC 6900 kicking out is that it facilitates kind of a marketplace for Intents, where right now, for a user to do something in crypto, it's very imperative, like, oh, I want to swap one ETH for 1800 USDC on uniswap on Arbitrum with this slippage parameter. And the whole concept of Intent is like, hey, I just want to swap my one ETH for as much USDC as possible. I don't care about the slippage, I don't care about the chain, I don't care about the protocol.
00:21:48.602 - 00:22:11.346, Speaker A: Just give me the most USDC, and you can start packaging a lot of these Intents into hardened plugins on chain. So with the example I gave earlier with the, hey, I want virtual cold storage on my NFT, under no circumstance should it ever leave my account. Instead of figuring out how to do that yourself, you just go install this virtual cold storage plugin to your account, specify the NFT, and any transaction that tries to trade that NFT will revert.
00:22:11.346 - 00:22:19.494, Speaker A: You don't really have to care how that works or why that works. You just have that guarantee. So we start moving towards this more declarative, intent based usage of the system.
00:22:19.494 - 00:22:37.462, Speaker A: Is it an intent? Is anything an intent? I don't know, but it's moving higher up the stack in terms of the abstractions provided. Cool. So in this way, you can start also having DAP developers define the application experience based off of the plugins they provision their users.
00:22:37.462 - 00:22:47.962, Speaker A: So if a user onboards via an NFT marketplace, they might want to provision a stack for their signer. You might even have a signer per DAP. And that signer has permissions to do account recovery.
00:22:47.962 - 00:23:01.330, Speaker A: It might enable social login higher up the stack at the key management layer. It might have roll scoped signing. So this one key only has permission to interact with NFT contracts and trade NFTs, but it can't go sell everything I have on Uniswap.
00:23:01.330 - 00:23:17.782, Speaker A: And similarly, a payment company might provide a stack for their signer. That's like cross chain stablecoin payments, so you can abstract away the network. It might require a precondition hook that every transaction checks for a KYC Credential on the account.
00:23:17.782 - 00:23:37.182, Speaker A: And it enables things like paymasters for USDC, so it creates a closed ecosystem around USDC and they pay for gas with USDC. And gaming companies might want to create a sign up for their stack that enables them to pay for gas with their in game token and also provides session key so they don't have to sign transactions on every single in game action. Cool.
00:23:37.182 - 00:23:51.486, Speaker A: So now taking a step back, tying it all together. So what is account abstraction? Really? Terrible word. Again, what happens is, from the protocol perspective, we're abstracting away support for EOAS and smart contract accounts like Ethereum.
00:23:51.486 - 00:24:09.078, Speaker A: Natively only supports EOAS. This abstraction is in place to make it from the protocol's perspective, it can now support both without really caring or changing the core protocol mechanism. So, looking forward over time, we want to wind it up in a world like StarkNet today where every account is a contract account.
00:24:09.078 - 00:24:18.998, Speaker A: There's been a lot of exciting updates on that. So the EF actually published an EIP for what's I think they call like, the upgrade transaction. It's like a one time transaction that in place upgrades EOAS to contract accounts.
00:24:18.998 - 00:24:31.150, Speaker A: There's been, like, a stalled out EIP for native AA on ethereum. I think realistically, that's a few years out. But I'm excited to start working with L two S in governance to iterate on some of these concepts on those ecosystems.
00:24:31.150 - 00:24:46.370, Speaker A: And so, taking a step back, account abstraction enables developers to provide values to their end users while also abstracting away the underlying crypto rails. So account abstraction is from a protocol level. Protocol is getting account abstracted, and then the users are also getting abstracted from the account.
00:24:46.370 - 00:25:05.606, Speaker A: So just account abstraction all the way down. And that kind of gets us to this feature where, like we saw with the internet three decades ago, hopefully on a sooner timeline with crypto, we'll get to a point where all companies could provide value to their users via crypto as in some capacity, even if it's not a super crypto forward experience. If you.
00:25:05.606 - 00:25:11.530, Speaker A: Guys want to learn more, check out our website@alchemy.com slash account abstraction. I think that QR code will link to it.
00:25:11.530 - 00:25:20.142, Speaker A: I'm probably knowam on Twitter and telegram. I'm happy to chat about these things anytime. If you guys are building on like, and you're here, message me, tell me you're here.
00:25:20.142 - 00:25:27.300, Speaker A: We'll get you set up with support teams and credits and stuff. Like, we'd love everyone's feedback, but yeah, happy to take questions if there's anything else.
00:25:33.030 - 00:25:44.070, Speaker B: Usually, like, in practice, if I want to be a smart contract wallet. So who can deploy bundler? So it's going to be me as a smart contract developer.
00:25:44.730 - 00:25:54.166, Speaker A: Smart wallet up to you. It's kind of like the ethereum node ecosystem today where you can do we encourage people to do it. It's supposed to be distributed and decentralized, and if you want to do it, great.
00:25:54.166 - 00:25:57.846, Speaker A: We'll also provide managed services if you want to get started with less hassle.
00:25:57.878 - 00:26:10.080, Speaker B: Yeah, I'm asking because there is like a legal problem here since Bundling, from financial perspective, this means batching transaction, which requires money service, business license, and the whole thing creates like, kind of issues.
00:26:10.450 - 00:26:25.566, Speaker A: So it's actually not a money I'm not a lawyer. Don't quote me on this, but it's not a money service business. In the same way that layer two is not a money service business, essentially, because all transactions are still signed by the user's coin side, there's no way for any bundler to do anything to impact execution of that transaction.
00:26:25.566 - 00:26:28.146, Speaker A: It's more of a pipeline than it is like a money service. Yeah.
00:26:28.168 - 00:26:31.742, Speaker B: It's like kind of helping to facilitate. Yeah. Basically.
00:26:31.742 - 00:26:35.254, Speaker B: Do you have legal opinion of somebody who can do this in the US.
00:26:35.292 - 00:26:39.526, Speaker A: I don't have a legal opinion. Our lawyer has a legal opinion because.
00:26:39.548 - 00:26:42.658, Speaker B: It'S clients needed because I cannot do this in the US. Without legal opinion.
00:26:42.754 - 00:26:48.810, Speaker A: Yeah. So we're running these services in the US. As well, say, and our lawyer feels comfortable enough about that, but I don't want to put him on blast.
00:26:48.810 - 00:26:56.538, Speaker A: Yeah. Everything in crypto is a little bit of a regulatory gray area right now. So there's no hard yes, hard no.
00:26:56.538 - 00:27:04.670, Speaker A: We're kind of predicating this a lot of the Lt's operating model, too, where they also accept transactions, post transactions, and they're more of a pipeline, and so are we.
00:27:04.740 - 00:27:15.266, Speaker B: It's the same with pain, Master. How do you see the mev being extracted from the bundler? Did you see the system on it?
00:27:15.368 - 00:27:34.780, Speaker A: Asking the big question with a block builder? Yeah. So our core business is like RPC node infrastructure, so we have a good amount of order flow, and our stance is we don't touch order flow. If you send it to us, you either tell us to send it to the Flashbots and we'll send it to Flashbots, or you tell us to send to the mempool and we'll send it to the MEMP pool, but we don't have an opinion on it.
00:27:34.780 - 00:27:46.278, Speaker A: That's how we're going to run our AA infrastructure. There's obviously interesting problems with AA and mev. The bundler is essentially a mini block builder and there are things you can do around extracting value from that.
00:27:46.278 - 00:27:54.686, Speaker A: We're not entering that space, but if anyone starts setting up searchers on the Mem pool in the bundler space, that's like a totally viable thing to do.
00:27:54.868 - 00:28:00.498, Speaker B: You mentioned something specific like cyber with their AirDrop. What? Exactly.
00:28:00.664 - 00:28:11.910, Speaker A: Yeah. So they had their token AirDrop. Part of it was they deployed everyone a contract account, let them claim cyber, and then there was often also a transaction to sell cyber on move cyber to finance.
00:28:11.910 - 00:28:20.230, Speaker A: And so we saw like a huge spike of activity and a couple of hundred thousand new accounts deployed for 43. Seven on optimism.
00:28:20.970 - 00:28:21.574, Speaker B: Sorry.
00:28:21.692 - 00:28:22.118, Speaker A: Yeah.
00:28:22.204 - 00:28:24.886, Speaker B: So was their experience. They had like they had the one.
00:28:24.908 - 00:28:38.506, Speaker A: Clicked in and with everything down, I believe they let you use your EOA as a signer. So they use their MetaMask, but they got a contract account behind the scenes. Okay, so it wasn't like a fully embedded flow.
00:28:38.506 - 00:28:40.314, Speaker A: They still used MetaMask it's fully embedded.
00:28:40.362 - 00:28:42.158, Speaker B: To connect it with the finance site.
00:28:42.244 - 00:28:49.950, Speaker A: It was not fully embedded, no. So they used like MetaMask as the intermediary here. I'm happy to dive more into that if you want chat.
00:28:51.970 - 00:28:55.846, Speaker B: You mentioned like conditional transactions on sequencer site and other slides.
00:28:55.898 - 00:29:06.642, Speaker A: Can you explain that a bit? I mentioned what, sorry, conditional transactions on sequencers. Oh, yeah. So as you guys are familiar with, one of the issues is the bundler is super sensitive.
00:29:06.642 - 00:29:26.630, Speaker A: It's like a fragile old lady of a software piece. And essentially there's a lot of ways to attack the bundler where if you get a transaction in before the bundler and then it submits its transaction and the transaction then reverts on chain, the bundler has to pay for gas fees. And because the transaction reverted, it's not getting reimbursed for those gas fees.
00:29:26.630 - 00:29:41.090, Speaker A: So there's a way to attack the bundler by front running it, essentially. And all the simulation rules in 47 are designed to protect the bundler, but you can still front run those things. And so the conditional transaction endpoint on Arbitrum and we're pushing on polygon and optimism too.
00:29:41.090 - 00:29:50.226, Speaker A: And it's essentially what you get with Flashbots is like, if this memory state is what I expect it to be. So it's like a precondition check. If this storage hasn't changed, execute it.
00:29:50.226 - 00:29:57.106, Speaker A: If it has changed, don't do anything. And this way it gives you an atomic way to not try the transaction. If it's going to revert on chain.
00:29:57.298 - 00:29:59.906, Speaker B: How would it work for any L one? Like avalanche?
00:30:00.098 - 00:30:19.470, Speaker A: How would it work for any L one, for example? It only works on sequencers. Right now, Polygon is running into a lot of weird issues because they're proof of stake and there's some weird dos issues if you expose it in the public mempool, there's a thread on the polygon equivalent of ETH Magicians to discuss it's. Pip.
00:30:19.470 - 00:30:32.450, Speaker A: If you look up, like, Polygon preview proposal conditional transactions, you'll find it, but, yeah, there's like, folks calling out the Dos conditions, and then there's like, in parallel. How do we do this? Sustainably. They're landing it using private mempools, which is kind of similar to Flashbots.
00:30:34.470 - 00:30:37.730, Speaker B: What has been your biggest challenge while building the bundle?
00:30:38.310 - 00:30:49.222, Speaker A: About yeah, that, like, by a mile has been the biggest challenge. Gas Estimation for 47 is a huge pain ass. Still.
00:30:49.222 - 00:30:59.850, Speaker A: Is he's referencing a piece that one of the tech leads on the team wrote? It's 15 pages about gas estimation. 47. The fact that you can write 15 pages on Gas Estimation is, like, kind of sad.
00:30:59.850 - 00:31:06.406, Speaker A: So there's a lot of problems there. Big one is like all the L two S do. Gas fee market slightly differently.
00:31:06.406 - 00:31:17.166, Speaker A: So there's a lot of weird nuances the bundle has to account for. Another one is faster moving blockchains, like L Two S move the fee market very quick. So if you estimate gas at 0.1
00:31:17.166 - 00:31:28.030, Speaker A: and then submit the transaction at 0.2, it's very possible that the gas market's risen and the transaction will be just stuck forever in the mempool or for a long time in the mempool. And then there's just, like, a lot of weight.
00:31:28.030 - 00:31:44.540, Speaker A: Essentially, the bundler has to predict how much gas a yo will spend in order to know how much to charge. And there's a lot of weird things that L Two S do in terms of accounting for there's, like, the L Two priority fee, the L Two base fee, and that's derived from the L One data availability costs, and those are kind of hard to measure from L Two.
00:31:48.170 - 00:31:50.390, Speaker B: How do you protect against repair attacks?
00:31:50.730 - 00:31:52.630, Speaker A: Uses a nonce. Okay.
00:31:52.780 - 00:31:55.078, Speaker B: You have to write an option.
00:31:55.164 - 00:31:59.560, Speaker A: It's in the entry point now. Right. Entry point at this point, yeah.
00:32:00.430 - 00:32:02.714, Speaker B: Have you taken any measures against front.
00:32:02.752 - 00:32:08.730, Speaker A: Running of your bundles? No. I don't know why. I don't know what stopped.
00:32:08.730 - 00:32:23.128, Speaker A: It's like, a minor problem on Polygon, but, like, on Lt's, it's very hard because there's no public len pool on Ethereum. We use flashbots. Sweet.
00:32:23.128 - 00:32:25.116, Speaker A: One more question. Sure. Question.
00:32:25.218 - 00:32:28.148, Speaker B: What is the intensity to run the lander?
00:32:28.344 - 00:32:39.956, Speaker A: So the bundler accepts user operations at gas price one, and that posts user operations at gas price two. And then it gets the spread of the gas. So it gets, like, a little bit of gas in exchange for the work.
00:32:39.956 - 00:32:49.104, Speaker A: It's pretty hard to optimize this, honestly. We try to run it near zero, but it has a big spread. We as alchemy one, we view this as a way to ten x the ecosystem.
00:32:49.104 - 00:33:07.420, Speaker A: So we're just, like, trying to get people on because we think this new UX will get more people in crypto and that's just good for business. But then we have our core cu based model where certain requests, depending on how computationally expensive they are reflect in charges for developers. We have a pretty big free tier, so most every application on AA now can probably just fit in our free tier.
00:33:07.420 - 00:33:11.970, Speaker A: Thanks, y'all.
