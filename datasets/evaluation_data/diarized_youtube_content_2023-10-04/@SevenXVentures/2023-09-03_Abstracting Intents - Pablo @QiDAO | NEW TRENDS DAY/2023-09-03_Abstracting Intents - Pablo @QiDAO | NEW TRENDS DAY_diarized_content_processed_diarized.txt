00:00:00.250 - 00:00:12.362, Speaker A: Everybody. I'm Pablo, and yeah, this is a quick presentation on abstracting intents, so it's cool and all that. We have intents and we have all these systems and infrastructure.
00:00:12.362 - 00:00:25.938, Speaker A: But what happens when, you know, Rubber hits a DAP? I'm Pablo the Penguin online, and I'm a coder at Qidao. My Finance. We're a stable coin protocol.
00:00:25.938 - 00:00:36.242, Speaker A: We are available in a bunch of different chains. We use the ERC 721 standard, so NFTs for lending, for CDP Lending. So users deposit collateral.
00:00:36.242 - 00:00:46.610, Speaker A: They mint my It's available in a bunch of different chains. You can trade it, you can swap it, you can bridge it. We use a lot of different partners like Layer Zero, Squid and Axelr.
00:00:46.610 - 00:01:04.058, Speaker A: And it's very MultiChain, as you might have seen. So basically with that comes a lot of responsibility for users. Lending can get very complex, especially when you get a bunch of different collaterals and a bunch of different chains.
00:01:04.058 - 00:01:49.338, Speaker A: A user comes in and says, I want to do this, but what is this? Is it that you can borrow from one collateral and another? You can access extra yield in Curve or Beefy or Aave, but all of that gets very complex for the end user. And all sorts of protocols have tried many different things, whether it's MakerDAO building automations or curve, trying to do automated liquidations or Sapping. Sapping has been the first thing that we as a protocol have taken over, which takes on the idea of depositing SDE, which is liquidity pool within curve.
00:01:49.338 - 00:02:00.446, Speaker A: And, well, the user has to go then on beefy to take that asset and compound it. But then they go on beefy. And instead of depositing, they have to add liquidity.
00:02:00.446 - 00:02:23.414, Speaker A: And then to add liquidity, they got to go on curve, and then they have to approve, as you can see, then deposit, then they go back here and then they borrow. That's very complex for many users, even though we have a few million dollars for this specific vault, which is very popular in optimism. Our solution was to introduce Sappers to the equation.
00:02:23.414 - 00:02:39.920, Speaker A: Instead of having many approves and many transactions, we have one approve. And that approve takes those transactions and merges it into one. Now, that's currently the most popular option given the EOAS and the account abstractions you guys might have seen and heard throughout the week.
00:02:39.920 - 00:02:51.380, Speaker A: And that's kind of the backbone of it. You just automate a lot of features and kind of let the user do a thing. But there's always a but.
00:02:51.380 - 00:03:21.786, Speaker A: And the but comes in whenever regulators step in, especially in things like Oasis, which hit them so bad they had to rebrand to summerfi, where this system enabled people to use maker in a quick way, creating your vault, doing the borrowing and automating all those strategies. Suddenly those strategies could be updated by a multisig, which could be compelled by a court, and suddenly the assets were lost within a hacker. But at the end of the day a user.
00:03:21.786 - 00:03:38.174, Speaker A: So if somebody didn't like you, they could potentially take your assets. So those are the current shortcomings for implementations that happen today. Many solutions you've seen? Well, manually, step by step, going to different websites.
00:03:38.174 - 00:04:01.740, Speaker A: You can aggregate them on one site, as you saw, with the sappers that we've used, and then you have all sorts of other things, but they're dependent on what chain you're on, whether you're on Cksync and you can potentially do those account abstractions or you have to use an extra wallet and suddenly you have your EOA on your ledger. You have an Avocado instance on Instadap or something else. There's just many, many options.
00:04:01.740 - 00:04:31.490, Speaker A: So initially what we're looking at to improve UX is outline the steps required for a user and bring it into one place that makes it easier for the end user, so they don't have to know do I go to Beefy, do I go to Curve? Do I go to Axler to swap? Never mind, Axelr took down the page, now I have to go to Squid router. So there's so many options, let's reduce that and give it to the user on a single page. That makes it a little easier.
00:04:31.490 - 00:05:04.974, Speaker A: Now with intents, you bring in an extra level of option. So these options can be where do I lend or where do I swap? I don't necessarily care as an end user that I go to Quickswap in Polygon or that I go to Aerodrome on base chain, I just want to swap. So you can build intents around certain routes that the user takes, as well as add on the idea of invariants, where protocols have a specific in and out.
00:05:04.974 - 00:05:25.582, Speaker A: So when you interact with BFI or Ave, you know you're going to deposit, you're going to withdraw, you don't necessarily need to know anything else, and the searcher doesn't need to figure out how to deposit and how to withdraw. So you can handle that on your own and so you can declare different ideas. So for example, this is defalama.
00:05:25.582 - 00:05:47.174, Speaker A: You have a ton of different solutions or yield opportunities and you can define the way that you interact with those yield opportunities. Now pair that up with an intent and you can say I need to get from Matic to SDE to go here. And so the easy way to do that would be writing some sort of configuration.
00:05:47.174 - 00:06:18.110, Speaker A: And so what we're looking at is just a YAML file markup language, looking at the in and the out for a specific contract. So now we can standardize these interactions so that users, well, users and websites can access them without needing to build a custom contract and then rely on another custom contract and approve it and another wallet. So that allows us to then have little tools for the user, where how do I interact with beefy, how do I interact with maker, et cetera, et cetera.
00:06:18.110 - 00:06:33.370, Speaker A: And you can daisy chain those strategies. So now you can know how to get from point A to point B, which is kind of important. If I want to play on frantic and I'm a matic, what do I do? Well, I can use a searcher to figure out, let me get some tokens.
00:06:33.370 - 00:06:45.822, Speaker A: There are certain ways to interact with bridges. They're standard and they're one way technically, to bridge into base chain. You can just use the main bridge and then you can transfer to the account.
00:06:45.822 - 00:06:58.850, Speaker A: Those are basic things that are set in stone. So you can kind of rely on them and just interact high level. This was a relatively quick presentation.
00:06:58.850 - 00:07:14.678, Speaker A: We want to scale beyond having to know all these different websites. You don't need to know which website you're going to swap on, which website you're going to bridge on. You just want to get to the product, whether it be Frentech or it would be some other NFT game.
00:07:14.678 - 00:07:37.704, Speaker A: You want to be able to access it directly. And that's what we're building out on the background for Cheetah and creating a mechanism that everyone can integrate with and collaborate on. Oh yeah.
00:07:37.704 - 00:07:41.870, Speaker A: Questions? Question?
00:07:42.480 - 00:07:57.148, Speaker B: Yeah, he talked about a lot of chains and you're interacting with multiple chains and intense. You want to define this correctly. You want to make this kind of routing experience more streamlined.
00:07:57.148 - 00:08:03.190, Speaker B: Users, they don't really have to think about it. They express what they want to do to you in a certain way.
00:08:05.160 - 00:08:05.524, Speaker C: But.
00:08:05.562 - 00:08:09.700, Speaker B: Then you execute that right, right. On behalf of the user.
00:08:10.140 - 00:08:16.744, Speaker A: In our case, initially, we let the user execute on their own right.
00:08:16.942 - 00:08:19.880, Speaker B: How much a user has to figure out.
00:08:20.030 - 00:08:37.600, Speaker A: So from the user perspective, they just go to the page and they say, I want to access this vault or this specific lending. Right. So you have a flow and so then you can define you get the user's balances and you can figure out where in that flow they are.
00:08:37.600 - 00:08:40.156, Speaker A: And so you can skip steps, have predefined index.
00:08:40.188 - 00:08:43.584, Speaker B: It's not generalized. They cannot just say anything that you want to.
00:08:43.702 - 00:08:50.932, Speaker A: Right, right. So you would define Aave, you would define beefy. And with those definitions you can trust that.
00:08:50.986 - 00:08:54.164, Speaker B: And who serves on the other side on the off chain part?
00:08:54.282 - 00:09:04.152, Speaker A: On the off chain part would be each partner. So every protocol would have their own configuration for the way that you interact with the protocol and they would maintain that.
00:09:04.206 - 00:09:19.276, Speaker B: So some sort of a searcher or a builder will make sure that gets through an approach to get that intent together under the chain. So you don't really care about the protocols. Need to have that partnership for you to do this part, right, right.
00:09:19.378 - 00:09:20.030, Speaker C: Okay.
00:09:21.040 - 00:09:28.424, Speaker A: So a protocol will tell you like here, this is how you enter, this is how you exit. But it reduces the overhead for all these protocols of creating.
00:09:28.472 - 00:09:33.920, Speaker B: You're just a layer about the intents, what they want to do? You just make it much more amplified.
00:09:35.060 - 00:09:45.636, Speaker A: Right. Because then you can figure out, well, now we know which lending protocols are there, how do we interact with them? They're all slightly different. So are you sort of building a.
00:09:45.658 - 00:09:50.420, Speaker B: Set of UI components for purposes of DeFi?
00:09:50.760 - 00:10:11.800, Speaker A: So, for us, yeah, we're going to be building a few UI components, whether it be like, let's figure out what the user has, let's streamline it, but initially it's simpler and it's going to be outlining. What addresses does a user hold and which ones are available within our protocol. So we have like 60 plus different addresses on different chains.
00:10:11.800 - 00:10:29.780, Speaker A: So you get the address of the user, get their balance and filter out the UI, similar to what we have right now on BF Finance, where you can look at what's available for you, whether it's something that you have because you deposited or something that you could have because it's available in your balance.
00:10:30.280 - 00:10:32.500, Speaker C: Thank you.
