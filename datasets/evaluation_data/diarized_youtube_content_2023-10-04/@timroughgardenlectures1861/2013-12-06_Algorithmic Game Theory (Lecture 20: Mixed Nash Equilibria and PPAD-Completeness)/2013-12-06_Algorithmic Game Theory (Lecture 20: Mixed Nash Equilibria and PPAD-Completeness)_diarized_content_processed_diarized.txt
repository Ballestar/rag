00:00:00.410 - 00:00:33.410, Speaker A: So for the final lecture of the course, what I want to do is continue our study of the limitations of what is possible in equilibrium computation, both in the sense of what we can expect from quickly converging learning dynamics and also what we might be able to expect just with any centralized polynomial time algorithm. So again, just to remind you of sort of the big picture, a couple of weeks ago we had these totally sweeping results for course correlated equilibrium. And for correlated equilibrium any game at all, you can compute them in polynomial time and people can learn them in a distributed way using no external or no swap or get algorithms respectively.
00:00:33.410 - 00:00:54.778, Speaker A: For pure Nash equilibria, we've been studying those, we studied those for routing and congestion games, we had very limited positive results. And on Monday we developed theory of pls completeness to explain the limitations of our positive results for pure Nash equilibria. Now for mixed Nash equilibria, where players can also randomize, at the moment we only have again pretty limited positive results.
00:00:54.778 - 00:01:17.966, Speaker A: We showed that for two player zero sum games, mixed Nash equilibria are tractable. So two players, and where one player's payoff is the opposite of the other, that can be solved with linear programming or what we did in class was solve it using no external regret algorithms. And so the obvious question is what about mixed Nash equilibria? In more general cases, for starters, let's just say still two players but not necessarily zero sum.
00:01:17.966 - 00:01:32.300, Speaker A: So so called bi matrix games. And so the plan for today is to develop again the relevant complexity theory explaining why we don't have stronger positive results than what we already know. So formally we're thinking about the following computational problem.
00:01:32.300 - 00:01:43.260, Speaker A: So again it's a two player game but just not necessarily zero sum. So rather than just one payoff matrix we need two payoff matrices. So two M by n matrices A and B.
00:01:43.260 - 00:02:02.034, Speaker A: So there's a row player and a column player with m and n strategies, a is the payoffs of the row player and B is the payoffs of the column player. So zero sum would be the special case where B equals minus a and the goal is to compute a mixed strategy Nash equilibrium. Al will discuss later today.
00:02:02.034 - 00:02:14.280, Speaker A: There's going to be at least one for sure, there may be many. And I just want to give you the easiest equilibrium computation problem of them all, which is give me any one, I don't care which one. Any other problem about natural equilibrium is only going to be harder than that one.
00:02:14.280 - 00:02:39.882, Speaker A: So compute mixed strategies x hat for the row player, y hat for the column player, so that the row player can't do any better given what the column player is doing. So for any other mixed strategy it might consider keeping y hat fixed. It can only do worse.
00:02:39.882 - 00:03:10.060, Speaker A: This is for all mixed row strategies X, and similarly for the column player sorry, B, the column player's payoff should be at least as high under Y hat as it would be under any other mixed column strategy, Y. So that's the goal. This is the input, this is the desired output, and that's the computational problem we're going to study today.
00:03:10.060 - 00:03:43.700, Speaker A: So here's a fact. Fact is we don't know how to solve this problem efficiently in polynomial time. So to date, there is no known polynomial time algorithm, okay? And a lot of very smart people have thought pretty hard about this problem.
00:03:43.700 - 00:04:10.090, Speaker A: So, as usual, once you're stuck in the algorithm design for days or weeks or years or decades, you start wondering if one of these algorithms doesn't exist, and you wonder how you might argue it. And again, we're not going to hope to prove an unconditional result, just proving flat out that there is no polynomial time algorithm that would separate P from NP. But perhaps we're going to have some notion of completeness saying that this problem is as hard as every other problem in a large class.
00:04:10.090 - 00:04:33.220, Speaker A: So that's going to be the plan for today. We're going to develop the relevant complexity theory, again, a suitable analog of MP completeness to amass evidence why this is actually an intrinsically hard problem and there will never be a polynomial time algorithm one. I guess, quick aside, if you're starting from the special case of two players in zero sum, which we know is tractable, what I did is I said, let's keep the two player and let's make this general.
00:04:33.220 - 00:05:03.600, Speaker A: A different sort of baby step you could try to do is you could keep the zero sum and you could bump up the number of players to three. But actually I claim that three player zero sum games are going to be at least as hard, at least as general as two player general games. Does anyone see why that's right? So basically any two player game you can embed in a three player zero sum game, just add a third dummy player with just one action whose payoff is the negative of the sum of the other two.
00:05:03.600 - 00:05:58.862, Speaker A: So we're actually really looking at, in some sense, the next baby step for Nash equilibrium computation, keeping with two players, but looking at general sum. And that problem already is hard in a sense we'll discuss today. All right, so the really tricky question with this very simple computational problem, or simple to state computational problem, is if we think this is a hard problem and we have some training and complexity theory, so we know that probably means complete in some sense, what would be the right complexity class for which this problem is completed? And this is tricky to answer.
00:05:58.862 - 00:06:15.250, Speaker A: I'll give you the answer today, but it's going to take most of the lecture. And it took really the leading thinkers in the field a number of years to figure out the right answer to this question. So I'm going to develop it sort of slowly.
00:06:15.250 - 00:06:31.958, Speaker A: So what I want to do first is I want to explain in a formal way why NP completeness is not the right notion for computing mixed strategy Nash equilibrium. Why? That's too strong a statement to try to prove. And that argument will hold equally well for the Pls complete problems we discussed on Monday.
00:06:31.958 - 00:06:50.094, Speaker A: So it's also going to justify our development of this analog, this weaker analog of NP completeness, pls completeness from Monday. So let's think about what it would mean to try to prove that the problem of computing a mixed Nash equilibrium is NP complete. So first, just sort of a type checking issue.
00:06:50.094 - 00:07:00.850, Speaker A: So when you normally study NP problems, you study decision problems. The answer is either yes or no. For equilibrium computation, the way I phrase the problem, I really want the equilibrium itself.
00:07:00.850 - 00:07:11.362, Speaker A: I want the answer. So let me first define, rather than NP, the class FNP, which is just a very simple variation. So the F stands for functional.
00:07:11.362 - 00:07:23.734, Speaker A: So this just means instead of a yes, no. If it's a yes instance, I actually want an answer. Okay? So for Sat, I don't just want to know is it or is it not Satisfiable? If it is Satisfiable, show me a truth assignment, hamiltonian cycle.
00:07:23.734 - 00:07:47.700, Speaker A: If there is a Hamiltonian cycle, show it to me. So that's FNP So all NP search problems is what they're called. So in the abstract and NP search problem, you're just given an instance X of an NP problem.
00:07:47.700 - 00:08:23.790, Speaker A: And again, just an NP problem you can think of is there is an efficient verifier to recognize alleged solutions, sat, Hamiltonian cycle, what have you, and the output. So if there is a solution and solutions should have polynomial length in the instance length. So if there is a solution, a polynomial solution, in this context, solutions are also called witnesses.
00:08:23.790 - 00:08:48.260, Speaker A: Or obviously, if it's an unsatisfiable assignment, you can't show me a satisfying truth assignment. So you should just correctly report no, okay, no if, no solutions. So it's just the analog of decision problems where if there is a solution, I want it.
00:08:48.260 - 00:09:11.606, Speaker A: All right? And so, again, this is to sort of type check with equilibrium computation problems, where I'm not asking you something like does there or does there not exist in equilibrium? I'm saying give me one. All right. So, for example, the functional version of Satisfiability is complete for this class FNP.
00:09:11.606 - 00:09:37.758, Speaker A: Cook's theorem, if you look at it, actually establishes a bijection between satisfying assignments of the three set formula that's the output of the reduction and witnesses to the NP problem that you started with. So that's just a complete problem. Let me also point out, just to relate this to yes Monday's lecture, that pls.
00:09:37.758 - 00:09:51.538, Speaker A: So the local search problems that we discussed on Monday are naturally thought of as a subset of FNP. So remember, a pls problem. I give you these three algorithms that are the minimal ingredients necessary to run local search.
00:09:51.538 - 00:10:04.266, Speaker A: And the definition of the computational problem for Pls is give me a locally optimal solution. So again, the output is supposed to be a solution itself. Now for FNP, sort of, you're asking very little of the Verifier.
00:10:04.266 - 00:10:36.200, Speaker A: So in an NP problem, all you have is a subroutine at your disposal, which given alleged solution, either says yes, that's satisfying, or no, that's not satisfying Pls, it's in some sense easier in that a Pls problem has extra functionality in the Verifier. So if I'm looking at, say, a cut and maximum cut and it's not locally optimal, not merely does the verifier say no, this is not a locally optimal cut, it also suggests a better cut for me. But if we just ignore that extra functionality in the Pls problem, we just see it's a FNP problem.
00:10:36.200 - 00:11:09.570, Speaker A: So the correspondence here is witnesses in the NP sense correspond to local optima of the Pls problem and the NP Verifier, which is only responsible for saying yes or no, it is or is not a solution, is or is not a witness. This is already done by our third algorithm of the Pls description. The third algorithm was the one that either said locally optimal, that's equivalent to verifying that it's a witness, or it gives you a better solution.
00:11:09.570 - 00:11:35.850, Speaker A: So local search problems can be thought of as members of this search class FNP, also the problem we're talking about today. So I'll just write MNE for the computational problem of computing a mixed Nash equilibrium of a given by matrix game. This is also in FNP.
00:11:35.850 - 00:12:00.738, Speaker A: And so proving that really just boils down to proving that if I showed you a Nash equilibrium, you could verify that it was one. So if I give you a strategy for the row player, a distribution similarly for the column player, you can in polynomial time either say yes, this is a mixed Nash equilibrium, or no, this is not a mixed Nash equilibrium. That's what this statement really means.
00:12:00.738 - 00:12:23.046, Speaker A: Okay, so why is that true? So suppose I handed you these two probability distributions. Well, you would first adopt the row player's perspective and you'd say, well, is the row player doing the best thing it can do given what the column player is doing? So how would you do that? Well, you just look at each of the rows. You computed expected payoff of each of the rows, given what the column player is doing.
00:12:23.046 - 00:12:35.354, Speaker A: And a best response to the row player has to be mixing over all of the pure best responses. So maybe you have three rows and their expected payoffs are 1717 and twelve. Then as long as you're mixing only over the first two rows, that's the best response.
00:12:35.354 - 00:12:51.022, Speaker A: That verifies the equilibrium condition for the row player and similarly for the column player. So that's not hard to do. So, reason XY.
00:12:51.022 - 00:13:30.510, Speaker A: So notice the reason I did that argument is because sort of naively, if you look at the equilibrium conditions you might get a little nervous, right? Because we have a for all overall probability distributions, which is an infinite set. But the point is it just suffices to check all pure strategies, the finite number of pure strategies available to each player. Okay? So XY is a mixed match equilibrium if and only if each player uses or let's say randomizes only over its pure best responses.
00:13:30.510 - 00:13:58.406, Speaker A: The point is, given an alleged mixed Nash equilibrium of a bi matrix game, you can efficiently check whether it is one or not. That means this is an FNP problem. So when you're trying to prove something's intractable, you want to prove it's at least as hard as as many problems as possible.
00:13:58.406 - 00:14:13.142, Speaker A: So the more problems, it's at least as hard as the stronger evidence of intractability. So this problem is inside of FNP. So the hardest imaginable result we could think about is it's as hard as every single problem in FNP.
00:14:13.142 - 00:14:39.880, Speaker A: It's not going to be harder than that because it lies inside this class. So if we're feeling ambitious on the negative results side, and we don't believe there's an algorithm for mixed nash equilibria, we could argue that, well, if there's a polynomial time algorithm for this, there's a polynomial time algorithm for everything in FNP, for example, for the functional version of Sat. So that would be a way, that would be sort of the first cut way we might try to establish intractability for this mixed nash equilibrium problem.
00:14:39.880 - 00:15:07.920, Speaker A: So question, could it be FMP complete? Could it be that every single problem in FMP, like for example, Sat, reduces to the problem of computing a mixed Nash equilibrium? That'd be the first thing to try. And the answer is no. Or at least there's strong evidence that the answer is no in the following sense.
00:15:07.920 - 00:15:39.398, Speaker A: So in this form, this theorem is due to Megido and Papadomitrio, so they don't give an unconditional answer. It might be, it might not be. But if computing mixed nash equilibria is FMP complete, there are some extremely surprising consequences.
00:15:39.398 - 00:16:07.558, Speaker A: So only if NP equals comp, so only if problems whose yes instances can be efficiently verified also admit efficient witnesses for their no instances. So this is not as strong a collapse as P equals NP. But again, this is something that just would surprise everybody.
00:16:07.558 - 00:16:34.330, Speaker A: So just to get a handle on this, so instead of Satisfiability, think about unsatisfiability. So basically I give you a three set formula and I'm asking you, is it unsatisfiable? So that's a comp complete problem because Sat is NP complete. So if NB equals comp, that means you can efficiently verify there exists some short proof of unsatisfiability which can be efficiently verified.
00:16:34.330 - 00:16:51.922, Speaker A: So if a Sat formula is Satisfiable, you can certainly convince me very quickly, just show me the satisfying formula. I don't know where you got it from, but if you found it, I can verify it. What if you wanted to convince me that there wasn't a satisfying truth assignment and there's two to the N possibilities? Of course.
00:16:51.922 - 00:17:17.770, Speaker A: So how would you convince me that none of those two to the n work for this formula? Could there be some sort of way to compress that two to the n amount of information into something that's polynomial length that I can quickly verify? Well, we don't know. I mean, that's tantamount to asking is NP equal co NP or not? So we don't know, but we don't think so. So NP equals CONP would mean in particular there's short certificates for unsatisfiable formula, which we don't believe.
00:17:17.770 - 00:17:32.910, Speaker A: So the claim here is that if so, remember we're trying to prove intractability for X national equilibrium. And we're starting out, we're sort of asking what's the strongest statement that might be true? So we said, well, it's an FNP problem. So the strongest statement that might be true is that it's FNP complete.
00:17:32.910 - 00:17:47.910, Speaker A: And this is asserting that's probably a little too much to shoot for if you successfully prove it's FMP complete. You've actually shown that MP equals comp. So the moral of this theorem is you should set your sites lower than proving FMP completeness of mixed Nash equilibrium.
00:17:47.910 - 00:18:00.380, Speaker A: That's the role this plays in the current narrative. All right? So the proof is not hard. It's a bit of a mindbender, but it's not hard.
00:18:00.380 - 00:18:13.270, Speaker A: So let's assume we did prove that mixed national equilibrium was FMP complete. Suppose it were true. So assume there's a polynomial time reduction.
00:18:13.270 - 00:18:38.870, Speaker A: And so these are search problems. So reduction, I mean, in the same sense as for the Pls problems, you have an algorithm that maps instances to instances, and then a second algorithm that maps solutions back to solutions. So suppose we have a reduction from FMP complete problem like Satisfiability to computing mixed Nash equilibrium.
00:18:38.870 - 00:19:28.168, Speaker A: So what would that mean? So that is, so we have the first polynomial time algorithm that maps instances to instances. It takes as input some Sat formula and it outputs a game, Bi matrix game. And two, the second part of the reduction, just like on Monday, is a polynomial time algorithm B that maps solutions here, back to solutions here.
00:19:28.168 - 00:19:44.960, Speaker A: Okay? So a solution on this side is going to be a mixed Nash equilibrium, right? That's our target problem. What's a solution here? Well, if this is Satisfiable, then obviously the solution should be a satisfying assignment. If there's no satisfying assignment, then just the string no is going to constitute a solution.
00:19:44.960 - 00:20:53.388, Speaker A: So basically, given a correct answer of the bimatrix schema mixed Nash equilibrium, we get a correct answer to the FSAT problem. So, again, this is just we assumed, we're assuming that there exists a reduction from Satisfiability to computing mixed national equilibria. This is just what that means, okay, reduces means that these algorithms A and B exist, run in polynomial time and satisfy those parameters.
00:20:53.388 - 00:21:02.840, Speaker A: That's the definition of a reduction. So let's assume that those algorithms actually exist. And now let's conclude that MP equals co MP from that assumption.
00:21:02.840 - 00:21:52.280, Speaker A: Well, think about the case where phi actually is unsatisfiable. So in the latter case, meaning case b, I claim that this mixed Nash equilibrium, yash equilibrium y of the game A of phi, constitutes a short meaning polynomial length and efficiently verifiable proof of unsatisfiability. So in the latter case, any mixed Nash equilibrium y of the game A of phi.
00:21:52.280 - 00:22:32.608, Speaker A: Okay, so why is that true? Okay, so suppose we have this formula phi, and you want to convince me that it's unsatisfiable. And again, remember, we're assuming that this reduction exists, so these polynomial time and correct algorithms a and B exist, okay? They're out there for my use. So then you want to convince me phi is unsatisfiable.
00:22:32.608 - 00:22:44.420, Speaker A: So what do you do? How do you prove it to me? You say, here's a mixed Nash equilibrium y, or here's a pair of probability distributions. So I add my formula phi. You give me a pair of probability distributions.
00:22:44.420 - 00:22:50.360, Speaker A: So here's how I check. So first I run the algorithm A on my formula phi. It spits out a game.
00:22:50.360 - 00:23:11.760, Speaker A: I can verify that the distributions you gave me are a mixed Nash equilibrium of that game A of phi. And then I can just run this algorithm B on this mixed Nash equilibrium and check that the output is no. If both of those two things check out by the correctness of algorithms A and B, this is a proof that phi is unsatisfiable and it's shortened efficiently verifiable.
00:23:11.760 - 00:23:32.680, Speaker A: So that gives us the NP certificate of a co MP complete problem. Now, again, don't forget why I did this. What was the moral? The moral is we set our sites too high in thinking about proving mixed national equilibrium as FMP complete.
00:23:32.680 - 00:23:42.812, Speaker A: Okay, it's actually not that hard. It's not as hard as all FMP problems under the assumption that MP and co MP are different. So if you want to prove it's as hard as some complexity class FMP is the wrong one.
00:23:42.812 - 00:23:51.520, Speaker A: It's too big. We need something that's smaller. So, quick comment.
00:23:51.520 - 00:24:12.180, Speaker A: This exact same proof. If you look at what we used about the mixed Nash equilibrium problem, this proof is not very specialized to computing mixed Nash equilibria. The only property of the problem of computing mixed Nash equilibria that it used was that a solution was guaranteed to exist.
00:24:12.180 - 00:24:18.600, Speaker A: So there was no way. The answer was no to the bimatrix game problem. And we'll talk about the proof of that later.
00:24:18.600 - 00:24:29.996, Speaker A: But Nash's theorem says you always have Nash equilibria. So there always exists at least one witness to the computational problem of finding a mixed Nash equilibrium. And given such a solution, you can efficiently verify it.
00:24:29.996 - 00:24:46.060, Speaker A: Given just those two properties, this proof works. So in particular, for these pls problems, where witnesses correspond to local optima that means we know for a Pls problem there's always a witness, there's always a locally optimal solution. You can just run local search till it stops.
00:24:46.060 - 00:24:58.916, Speaker A: So again, for any problem in Pls, there's no way that problem is NP complete either, unless NP equals co NP. So I didn't say this Monday, I wanted to give you a warm up first, but we really needed Pls completeness on Monday. For local search.
00:24:58.916 - 00:25:31.120, Speaker A: NP completeness was just too big a class. It was not well suited for the local search problems. So same proof applies to every FMP problem guaranteed to have witnesses, including, for example, not just mixed Nashi GLYA, but also all of Pls.
00:25:31.120 - 00:25:44.316, Speaker A: And so this subclass event, and again, contrast this with Satisfiability. Right? A Sat formula does not always have a witness. There's not always a satisfying assignment.
00:25:44.316 - 00:25:49.524, Speaker A: There's this other possibility, the answer is no. For pls problem. There's no possibility, the answer is no.
00:25:49.524 - 00:25:54.628, Speaker A: There's definitely local optima for mixed national equilibrium. There's no possibility, the answer is no. There's definitely an ash equilibrium.
00:25:54.628 - 00:26:19.090, Speaker A: So there's really a difference. So this subset of FMP problems, where you always have at least one solution, is sometimes called Tfmp for total FMP. So I apologize for the increasingly long acronyms, it's not my fault, so I was born too late for any of this stuff.
00:26:19.090 - 00:26:53.556, Speaker A: Good. So the picture then, the complexity class landscape. So we have these local search problems, and we observed that local search problems, of course, always have at least one witness.
00:26:53.556 - 00:27:06.264, Speaker A: There's always one locally optimal solution. There's other problems like the one we currently care about, computing a mixed strategy Nash Equilibria. This sure doesn't feel like a local search problem, so I'm not going to put it in Pls.
00:27:06.264 - 00:27:19.920, Speaker A: That seems sort of weird, but it does always have witnesses. I'm going to put it in Tfnp, and then FMP is strictly bigger. So again, Sat would be something that'd be an FMP but non Tfnp.
00:27:19.920 - 00:27:47.192, Speaker A: And so we argued that by virtue of computing mixed national Equilibria being inside Tfmp, there's no way it's MP complete unless MP equals comp. So this set, this outermost set is too big a class to prove that mixed Nash equilibrium is as hard as everything in there. So the next obvious thing to try, well, maybe mixed Nash equilibrium is as hard as everything in Tfmp.
00:27:47.192 - 00:28:28.676, Speaker A: Maybe it's as hard as any other NP search problem, which is always guaranteed to have at least one witness. So shooting our sites a little bit lower, or fine goal, we should try to prove that MNE is Tfmp completes. Okay, so as hard as any other problem, which is an NP search problem guaranteed to have witnesses.
00:28:28.676 - 00:29:00.256, Speaker A: Yeah. How would you prove it's in Pls? Well, for all we know, everything's equal to P, so I can't unequivocally say it's not in Pls, but it sure doesn't. I certainly have no idea how to find a mixed national equilibrium using local search yeah, okay, so this seems totally reasonable then.
00:29:00.256 - 00:29:09.270, Speaker A: So the reason we can't prove it to MP complete is because it always has witnesses. So let's just prove it's as hard as any problem that always has witnesses. So this is not what we're going to do.
00:29:09.270 - 00:29:24.836, Speaker A: We don't know how to do this. And here the obstacle. It's a little more wishy washy, but still it's a real obstacle, which is we actually don't know any complete problems whatsoever for this class, Tfmp.
00:29:24.836 - 00:29:50.850, Speaker A: So we have no Cook's theorem for Tfmp, and we don't really expect one. So let me try to explain, although the only argument there is for this obstacle is conceptual, it's not mathematical. So think about the complexity classes, which do have complete problems.
00:29:50.850 - 00:30:14.424, Speaker A: So obviously there's MP completeness, but there's other ones you've probably heard of. You can be P complete, you can be P space complete, for example. So what do these classes like PMP and P space, what property do they share that something like Tfmp does not? Well, so how do you know that a problem is a member of P or NP or P space? It's sort of a very simple reason.
00:30:14.424 - 00:30:45.892, Speaker A: It's because it's accepted in some kind of particular machine model, turing machine that runs in polynomial time, a non deterministic Turing machine that runs in polynomial time, polynomial space, whatever. Okay, so there's this really kind of simple generic reason for membership at the complexity class, which is just being accepted by some very specific computational machine model. Now, membership in Tfmp is not, I mean, we don't know of any proofs putting problems in Tfmp that go via acceptance in some kind of machine model.
00:30:45.892 - 00:31:01.224, Speaker A: So let me give you an example. So the claim here and again, this is not really mathematical, but just there doesn't seem to be a generic reason for membership in Tfmp. So concretely, if there's time, we'll discuss it.
00:31:01.224 - 00:31:12.792, Speaker A: But the reason why mixed Nash Equilibria is in Tfmp is because there's always going to be a mixed Nash equilibrium. That's Nash's theorem from a long time ago. The way Nash proves that theorem is basically using topology.
00:31:12.792 - 00:31:20.050, Speaker A: It boils down to a fixed point theorem. So that's one branch of mathematics. That's the reason that the MNE problem is a member over here.
00:31:20.050 - 00:31:34.080, Speaker A: Let me tell you another problem that's in Tfmp. So factoring. So I give you an integer, and the output is supposed to be the unique factorization of that integer.
00:31:34.080 - 00:31:49.140, Speaker A: So it's not hard to prove that every integer has a unique factorization, but it's not a fixed point argument. It's sort of algebra number theoretic, this different branch of mathematics. So different problems computing mixed Nash Equilibria or factoring.
