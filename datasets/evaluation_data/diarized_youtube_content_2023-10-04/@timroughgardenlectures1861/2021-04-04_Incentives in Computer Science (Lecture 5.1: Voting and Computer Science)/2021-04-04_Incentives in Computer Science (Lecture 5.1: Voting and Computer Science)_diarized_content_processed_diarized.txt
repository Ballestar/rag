00:00:00.650 - 00:00:46.602, Speaker A: Hi everyone and welcome back to this online short course on the topic of incentives in computer science. In this video we're going to be starting module number five. So the second to last module of the course, it's a relatively short module but it's on a quite fun topic, participatory budgeting. So in the last module, module number four, we talked at length about auctions. One way can think about an auction is it's really a way of eliciting information from auction participants, specifically how much they want the items for sale, what is their willingness to pay. Now in this module we're again going to be thinking about eliciting information from participants but it's not going to be kind of in a for profit setting. We're not going to be selling them things for various amounts of money.
00:00:46.602 - 00:01:21.186, Speaker A: Rather we want to make decisions that reflect the preferences of a community. So this is going to be solidly in the realm of voting. So voting is a very big topic. We're only going to have time to say a little bit about it actually. I mean just in the spirit of this course, you're thinking about incentives. Voting systems are actually a very cool real world system that we're all familiar with, which are quite interesting from an incentive standpoint. Like even if you just think about say like a political election with more than two candidates, I mean with two candidates you can sort of take a majority vote and that's a pretty simple solution.
00:01:21.186 - 00:02:10.738, Speaker A: But if you have more than two candidates, actually things get pretty tricky. And actually there's a famous result called arrows and possibility theorem which says things always get tricky when you have three or more candidates. And so you might want to do things like compare plurality voting, which is the dominant paradigm in most elections in the United States, versus more modern proposals like instant runoff voting. So which is better and why? All of those very cool topics in the on campus version of this class where we have 30 hours, I say a little bit about that in the short course. We're actually not going to talk about that at all, but I do want you to know it's out there and explore. I encourage you to explore if that interests you. So here sort of in keeping with the themes of this short course, I want to focus on connections between voting and incentives and technology so ways that voting comes up in computer science contexts.
00:02:10.738 - 00:02:59.606, Speaker A: And in fact there are several, let me just mention three on this slide and the third of these three will start doing a deep dive on the next slide. But the first thing let me mention is something called rank aggregation. So in a rank aggregation problem, the voters actually correspond to different competing ranking algorithms. So imagine you're trying to solve some prediction task and you're trying to produce a ranked list of alternatives. So for example, maybe you've gotten a query in a search engine and you want to produce a ranking of the pages ranked from most to least relevant. Now, one thing you might imagine is that you might have internally under the hood, different heuristics. So maybe you have one internal ranking algorithm which ranks pages on the basis of the page content.
00:02:59.606 - 00:03:57.858, Speaker A: You have another heuristic internally that ranks pages based on properties of the link structure, which pages link to, which maybe you have another one based on anchor text and so on. So all these different internal heuristics come up with their own predictions about the best rank list, and then you somehow want to aggregate all of those predictions, those sort of competing ranked lists. You want to aggregate them into a consensus ranked list with the hopes that the consensus list is sort of better or more robust than any of the individual ones that make it up. So, for example, maybe you're trying to make sure you don't display any spam pages, and maybe sort of highly relevant pages always show up highly on all of the lists. Whereas a spam page, maybe it fools some of the heuristics, it's sort of high on some of the lists, but then it's low on the other lists, and maybe that's enough to filter out the spam pages. Or maybe it's not that you're designing a search engine and you have these internal heuristics. Maybe you literally just type the same search query into three different search engines.
00:03:57.858 - 00:04:33.742, Speaker A: So Google and Microsoft, bing and yahoo. And you see what you get back. And actually, it's funny, I encourage you to experiment. If you type in the same search query, you get surprisingly different results sometimes from the different search engines. So maybe you just even want some sort of meta search engine that kind of gets the best of all worlds by submitting a query to all of the standard search engines. Anyways, that's an example of a rank aggregation problem, which is really a form of voting, right? So each of the internal heuristics or each of the search engines is voting with their own suggestion of a ranked list. And then what does voting really mean? It means you take everybody's opinions and then you make a single decision.
00:04:33.742 - 00:05:41.054, Speaker A: And so this action of outputting a consensus ranked list, that's the analog of making a decision. The second example I want to mention is crowdsourcing familiar, perhaps if you've ever used Amazon's Mechanical Turk in a crowdsourcing context, the voters correspond to workers, as they're called in crowdsourcing. So the worker or the voter, that could be someone who's doing work for you through Mechanical Turk. It could be sort of peer graders in the context of a massive online open course, something like that. So, for example, maybe you recruited a bunch of people through Mechanical Turk. Maybe you're sort of designing a new website and you have three different kind of layouts you have in mind, and you want to get people's opinions about which layout they like best, which one they like least. Well, if all of these people tell you their opinions about how they feel about your UIs, then again, having a consensus ranking, which is the best? That again is exactly a voting problem.
00:05:41.054 - 00:06:34.460, Speaker A: Or peer graders, maybe an assignment is graded by two or more different peer graders for robustness and again, if they give it different grades, you need some kind of consensus grade. That again is effectively a voting problem. And the final example I want to mention, and in fact, what's really going to sort of set the stage for the rest of this module, is participatory democracy. In participatory democracy, the goal is to get more people involved in government decisions, especially at the local levels. You might want to think about like a district or like city planning. And you could imagine involving lots of citizens in various decisions. So far, people have focused primarily on budgeting decisions like where to spend a budget across different public projects.
00:06:34.460 - 00:07:11.648, Speaker A: And that's exactly what we'll be drilling down into in the next few slides. And this idea is becoming more and more popular. So for example, last time I checked here in New York City, over half of the 51 districts were using some type of participatory budgeting process to help make decisions. Now, technology helps enable participatory democracy in at least a couple of different ways. Kind of the most obvious one is just it potentially makes voting a lot easier. So for example, it allows you to just vote on your smartphone rather than have to physically go to some polling place and maybe wait in a long line. So that's important.
00:07:11.648 - 00:07:47.080, Speaker A: But even more interesting for our purposes is that once you're doing things by computer algorithmically, it actually enables types of voting which you really couldn't imagine pulling off with paper ballots. And we'll see a great example of that in a couple of slides on the Napstack voting mechanism for participatory budgeting. These are just a few of the reasons that computer scientists have been thinking seriously about issues related to voting over the past couple of decades. Let's use the rest of this module to talk in more specificity about that last example and specifically participatory budgeting.
