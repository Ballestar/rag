00:00:00.330 - 00:00:13.694, Speaker A: You. To this point, we've been operating under our four temporary and simplifying assumptions, the first of which frankly, is pretty ridiculous, right? The idea that every single station that remains on the air has to be on this one channel on channel 14. That wasn't the case.
00:00:13.694 - 00:00:25.960, Speaker A: There were lots of different channels that you could use to put television stations on the air. So let's now drop that assumption. Let's allow there to be an arbitrary number k of possible channels for television stations that remain it on the air.
00:00:25.960 - 00:00:44.966, Speaker A: So for the real application, I encourage you to think of k as 23, corresponding to the 23 lowest UHF channels, channels 14 through 36 inclusive. In the real FCC incentive auction stations were also allowed to drop down to the VHF bands. That was channels two through 13.
00:00:44.966 - 00:00:53.082, Speaker A: But most of the action concerned the UHF band. So that's what we're going to be focusing on here. So previously we had k equal one, we had one channel.
00:00:53.082 - 00:01:09.982, Speaker A: Now we have k equal to say, 23, 23 channels. So what happens to our general greedy algorithm? Well, actually, you stare at the pseudocode and you're like, why can't we just copy down that exact same pseudocode? For this more general problem with multiple available channels? Here's what it would look like. Let's call it FCC.
00:01:09.982 - 00:01:46.934, Speaker A: Greedy. This FCC greedy algorithm, it looks like all of our other greedy algorithms, right? In particular, it looks almost identical to that general greedy algorithm that we discussed for weighted independence set. But let's drill down on an iteration of the main loop which is responsible for testing if the current station V can be added to the solution.
00:01:46.934 - 00:02:02.170, Speaker A: So far, capital S without destroying feasibility. Now, what does it mean for a subset of stations to be feasible? Feasibility means that the stations can all be on the air at the same time without interference. Now we have K available channels.
00:02:02.170 - 00:02:36.754, Speaker A: So being on the air at the same time without interference what that means is there should be an assignment of the stations both in S and the new station V. There should be? A channel assignment of those stations to the K available channels like the 23 available channels so that no pair of stations with overlapping broadcast areas are assigned to the same channel. Do you recognize this computational problem? This is pretty much exactly the graph coloring problem that we last spoke about when we were discussing satisfiability solvers.
00:02:36.754 - 00:02:53.322, Speaker A: Remember, in the graph coloring problem, the input is an undirected graph along with a parameter k. And your job is to check if the graph is k colorable. Meaning, is it possible to assign each of the vertices one of the k available colors so that each edge so that no edge is monochromatic.
00:02:53.322 - 00:03:17.938, Speaker A: Every edge has endpoints with different colors. What's the correspondence with feasibility checking in the FCC greedy algorithm? Well, the vertices are going to correspond to the stations edges in the graph are going to correspond to stations that would conflict if they're assigned the same channel. So stations with overlapping broadcast areas and then the colors in the coloring problem are just going to correspond to the k available channels.
00:03:17.938 - 00:03:41.550, Speaker A: So that graph is k colorable if and only if the stations that we have can all be assigned to these k channels without interference. Consider, for example, that same example with five stations corresponding to a graph of five vertices on the left. The five circles represent the broadcasting areas of five different stations.
00:03:41.550 - 00:04:11.880, Speaker A: And I claim that we really need three distinct channels if we want to have all five of these stations on the air at the same time. And that's actually pretty easy to see, right? Like if you just look at the middle three, each of those overlaps the other two, which means each of those three stations in the middle has to be given a different channel. So maybe one gets the green channel, one gets the orange channel, and the last one gets the yellow channel.
00:04:11.880 - 00:04:26.880, Speaker A: So those three channels suffice to put those three middle stations on the air and then it's easy to pack the other two stations on the air as well. We just have to give the left station some color other than green, the right station some color other than orange. For example, we could assign both of them to the yellow channel.
00:04:26.880 - 00:05:00.890, Speaker A: The five stations on the left would be feasible if you have three available channels and it would not be feasible if you only had two available channels and in the corresponding graph on the right that just corresponds to this graph being three colorable but not being too colorable. It's easy to see that it can't be too colorable because it has the triangle and all of the vertices of the triangle have to get distinct colors. And then this same coloring just is a feasible three coloring of this magenta graph.
00:05:00.890 - 00:05:31.570, Speaker A: So once again, we took a computational problem that naturally arose in this application in the FCC incentive auction. And before thinking about algorithms, we asked the question do we recognize this as a problem that we're already familiar with? And once again, here the answer is yes. The feasibility checking that you do in each iteration, checking whether a new station can be accommodated on the air along with all the other stations you've already committed to, that feasibility checking question is exactly a graph coloring problem.
00:05:31.570 - 00:05:52.282, Speaker A: And just like when we recognize the optimization problem with one channel as weighted independent set, recognizing feasibility checking with k channels as graph coloring is not necessarily good news. As we saw in the videos on NP hardness, the graph coloring problem is in fact NP hard. It's NP hard already when k equals three.
00:05:52.282 - 00:06:04.826, Speaker A: Even just checking three colorability of a graph is an NP hard problem. Graph coloring is not hard if k equals one or k equals two k equal one it's kind of trivial. So basically a graph is one colorable if and only if it has no edges.
00:06:04.826 - 00:06:17.620, Speaker A: And that's why this feasibility checking obstacle didn't come up when we were only thinking about the single channel case. We're only thinking about k equals one. It's as soon as you have three or more channels that graph coloring rears its ugly head.
00:06:17.620 - 00:06:33.266, Speaker A: That's kind of intimidating, right, that we have to sort of tackle this empty hard graph coloring problem. Especially given that the graphs, they're the same sizes that we were talking about before, thousands of vertices, tens of thousands of edges. So not even particularly small instances of graph coloring.
00:06:33.266 - 00:07:10.830, Speaker A: But then you stare at the pseudocode a little bit and you realize things are actually even worse than that. So back when we were just talking about the optimization question of how do you maximize the total value of the stations on the air which boiled down to weighted independent set in the single channel case, that optimization problem, we asked the question, okay, could we solve this exactly if we had a week? And why were we willing to wait a week? Well, because you're only going to solve that optimization problem once, decide once and for all which stations are going to stay on the air. Whereas you look at this and actually now the NP hard problem that we need to solve, the graph coloring problem, we have to solve that in every single one of the iterations of this for loop.
00:07:10.830 - 00:07:25.400, Speaker A: And there's one iteration of the for loop for each of the stations in the auction, which as we've discussed is thousands of stations. So we don't just have to solve one nontrivial size graph coloring instance, we have to solve thousands of them. Pretty scary stuff.
00:07:25.400 - 00:07:49.466, Speaker A: The next video is going to be all about sort of throwing the kitchen sink at this feasibility checking problem, this graph coloring problem. And one of the things we're going to exploit when we do that is the related nature of the different instances of graph coloring. So the graph coloring instance you have to solve in one iteration of this for loop looks an awful lot like what you had to solve in the previous iteration.
00:07:49.466 - 00:08:20.520, Speaker A: So let's think through the details of that relationship in this quiz. So only one of these four statements is correct and that is the last statement. So answer D is correct, the other three are incorrect.
00:08:20.520 - 00:08:36.280, Speaker A: Let's talk through the solution beginning with the answer A. Actually, answer A doesn't make a lot of sense if you think about it right, so that's asserting that, you know, as soon as you hit an iteration of the for loop which is feasible, then all of them are going to be feasible. But you know, for example, the first iteration is definitely feasible.
00:08:36.280 - 00:09:00.436, Speaker A: One station you can always accommodate on the air and in general toward the end of the algorithm, you expect to see some infeasible instances. So A doesn't make a lot of sense, b is a more reasonable guess that as soon as you come to an infeasible instance, as soon as there's some station which is not compatible with the stations you've already committed to putting on the air, you might think that the following problems are going to be even worse. But if you think about it that's not going to be true.
00:09:00.436 - 00:09:25.180, Speaker A: So maybe in some iteration you're looking at some station that conflicts with everybody so there's no room for it on the know and that's all happening in the northeast of the United States. But then in the next iteration you consider some station that's like in Wyoming and of course it doesn't fear with the stations you've already chosen and so there's no problem accommodating it. So definitely you're going to have toggling between feasible and infeasible instances of graph coloring as you proceed through this main for loop.
00:09:25.180 - 00:09:45.956, Speaker A: Now let's consider answers C and D. How does the instance in one iteration compare to the feasibility checking instance you had in the previous iteration? So C here is too simplistic. It's not the case that you just pick up one new station with each iteration but D is correct, you do pick up one new station with each iteration that you successfully find a channel assignment for.
00:09:45.956 - 00:09:56.504, Speaker A: And probably the easiest way to see this is just through an example. So let me just sort of draw one at the top of the slide. So for simplicity, suppose we just have two available channels, k equals two.
00:09:56.504 - 00:10:09.480, Speaker A: So we're just trying to check the two colorability of a graph. And suppose right now we're in an iteration where s has four stations and their interference constraints form a path. So a path of four vertices and three edges.
00:10:09.480 - 00:10:26.316, Speaker A: Now let's proceed to the next iteration and suppose it's a station that overlaps with the broadcasting regions of both of the two middle stations in this path. In that case in the graph we get a triangle. This is the same running example we were using in previous slides.
00:10:26.316 - 00:10:42.200, Speaker A: And as we've discussed this is not a two colorable graph because just the triangle alone you'd need three different colors to avoid conflicts. So this iteration will be infeasible and so this vertex v one will not be added to the set capital S. Capital S will be exactly the same in the next iteration.
00:10:42.200 - 00:11:01.656, Speaker A: So in the next iteration we're going to consider another station, call it v two. And let's suppose this time v two happens to overlap with both of the stations corresponding to the endpoints of this path, the set capital s together with this new vertex v two that now forms a five cycle. And if you think about it, a five cycle indeed.
00:11:01.656 - 00:11:17.412, Speaker A: Any OD cycle is not too colorable. You need three colors to color an OD cycle. That means the algorithm is not going to add v two to the set capital S because that wouldn't be feasible, that wouldn't give us a two colorable graph and it's going to proceed to the next vertex which is some other station of v three.
00:11:17.412 - 00:11:32.912, Speaker A: And now let's suppose that station overlaps only with the first and third stations in this path. In this case, the graph remains two colorable even after we throw in this additional station, v three. V three creates an even cycle.
00:11:32.912 - 00:11:46.136, Speaker A: So we can two color that just by alternating colors, say red and green around the cycle and then we need to color that rightmost vertex. So we just give it the color that its neighbor does not have red or green as appropriate. So that is a two colorable graph.
00:11:46.136 - 00:11:57.324, Speaker A: So that means it passes the feasibility check. V three is compatible with the station's capital S we've already committed to putting on the Air. So this greedy algorithm will add this station v three to the solution.
00:11:57.324 - 00:12:14.816, Speaker A: So far capital S. And what are the sizes of these various graph coloring instances? Well, we started with four vertices and that was two colorable. So then the next instance had one more vertex, one more station, so that's five total, but that was not too colorable.
00:12:14.816 - 00:12:34.520, Speaker A: So the next iteration doesn't have six stations, six vertices. You have to sort of roll back v one, go back to four vertices or four stations and then add in v two. So notice that's the second graph coloring instance in a row that dealt with only five vertices because v two also could not be feasibly packed along with the stations in capital X, it wasn't added either.
00:12:34.520 - 00:12:59.920, Speaker A: So the final graph coloring instance we discussed here again has that same size, again has five vertices or five stations. Now, because this last graph coloring instance, v three, was feasible, the size of s is going to grow by one station and the next graph coloring instance will have six stations. So it's not true that it just goes up deterministically by one station every iteration, but every time you have a feasible iteration, then indeed that increases the size of all future graph coloring instances.
00:12:59.920 - 00:13:23.496, Speaker A: That's all I wanted to say about this quiz. Now maybe you're wondering, did I give this quiz to you just to distract you from the case that we seem to be doomed, right? So we have this greedy algorithm we'd love to use to sort of pick which stations remain on the air, but unfortunately in each iteration of that algorithm's main loop, which unfortunately has thousands of iterations. And in each of those thousands of iterations we're going to need to do a feasibility check.
00:13:23.496 - 00:13:36.984, Speaker A: And the feasibility check as we've seen, is exactly graph coloring. And graph coloring as we know is NP hard as soon as you have three or more colors. And as discussed there's more like 23 colors in the regime where the FCC incentive option had to operate.
00:13:36.984 - 00:14:05.368, Speaker A: So what does this mean? Is this NP hardness a death sentence? Does it mean there's sort of no way we can use this approach of greedy heuristic algorithms to approximately maximize the total value of the stations that remain on the air? No, NP hardness is not a death sentence. But it does indicate that we're going to need to throw a lot of resources and algorithmic sophistication at this hard feasibility checking problem. Exactly which resources? Exactly what? Sophistication that's what we'll discuss in the next video.
00:14:05.368 - 00:14:07.300, Speaker A: I'll see you there. Bye.
