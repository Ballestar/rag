00:00:00.410 - 00:00:09.950, Speaker A: So let's see how the two opt heuristic might work in an example. And let's use the same example that we had in a previous quiz. I'll draw it again here on the slide to jog your memory.
00:00:09.950 - 00:00:27.666, Speaker A: Let me also remind you that if we run the nearest neighbor heuristic starting from the vertex A, what the heuristic winds up doing is output the tor that traverses the perimeter. So that'll be the starting point for our two hop heuristic. So let the initial eyes, the two opturistic with this light blue tour.
00:00:27.666 - 00:00:44.694, Speaker A: It has total cost 29. We want to know, can we make it better with a two change? And so one way we can check that is by just enumerating all of the two changes and seeing what each of them do. How many two change are there? Well, it turns out that there are five two changes we can mix to this tour.
00:00:44.694 - 00:00:57.182, Speaker A: It turns out, in general, if you have n vertices, the right number is N times n minus three divided by two. So when n equals five, that's five times two divided by two, also known as five. So let's go ahead and check.
00:00:57.182 - 00:01:23.714, Speaker A: What are the five different tours that we can get from one two change from this initial tour that just goes around the perimeter? You'll notice that each of these green tours shares exactly three out of the five edges of the light blue tour. Each of them has three edges along the perimeter and then the two remaining cross edges to connect those three edges into a tour. So those are the five options if we want to make a two change to our current tour.
00:01:23.714 - 00:01:41.686, Speaker A: And so now the question is, are any of those improving two changes? Do any of those two changes result in a tour that has strictly less total cost? Well, let's just look at the five cases and let's just see what the total cost is of all the tours we could get. So, for example, if you look at the first of the two changes, we wind up with a tour with cost 31. So that's even worse.
00:01:41.686 - 00:02:00.062, Speaker A: So that's not an improving two change. On the other hand, the second example, we wind up with a tour with cost 27, and that is an improvement over the 29 that we started with. So that's an option to take in the two opt heuristic.
00:02:00.062 - 00:02:10.902, Speaker A: Are there any others? Well, in the third tour, the sum of the edge costs is 34. So that's no good. That's a worse tour, sorry, 32.
00:02:10.902 - 00:02:22.874, Speaker A: Excuse me, but still a worse tour. The fourth option looks really good, right? So with that two change, we get the total cost all the way down to 24. And the fifth and final two change is also an improving two change.
00:02:22.874 - 00:02:40.926, Speaker A: It would decrease the cost from 29 to 25. So in other words, the two opt heuristic has three different options about how to make the tor better the second, the fourth or the fifth of the two changes. The pseudocode we wrote down was agnostic as to which improving two change you pick when there are many.
00:02:40.926 - 00:02:52.130, Speaker A: So we're going to have to make some decision. We'll discuss this again in the next pair of videos. But one natural heuristic is just start enumerating the two changes one by one and as soon as you find an improving two change, go ahead and execute it.
00:02:52.130 - 00:03:17.094, Speaker A: So if we followed that approach in this example, we would make the first two change that improves the second two change and we would move to this tour that has cost 27. So now we go to the next iteration of the While Loop and we repeat the whole process again, starting from our new cost 27 tour. So we want to examine the five possible two changes from this tour and again see if any of them are improving and then if so, improve the tour accordingly.
00:03:17.094 - 00:03:30.400, Speaker A: Now there are five two changes from this tour, but one of them actually just undoes the one we just did. One of them just goes straight back to the five cycle. So let me just show the four other new tours that we could get to from this one using a single two change.
00:03:30.400 - 00:03:50.422, Speaker A: So those are the four two changes worth looking at, the four two changes that will give us new tours. And the question now is, is any of those four tours still better than the cost 27 tour we're currently working with? Again, let's just add up the cost for each of them and see what we've got. Already, the first tour we can see has cost 24.
00:03:50.422 - 00:04:06.726, Speaker A: So that actually is an improving two change right there. That's less than 27. The second two change would give us something with still better cost than that 23, which if you remember back from the quiz, that's actually the cost of an optimal tour.
00:04:06.726 - 00:04:28.660, Speaker A: That's the best tour of them all, cost 23. The third of the two changes that gives us a tour which has total cost 29. So that would not be better, not an improving two change, excuse me, 31 while meanwhile, the fourth of the two changes would give us a tour with cost 30.
00:04:28.660 - 00:04:46.466, Speaker A: So once again, the two opt, heuristic has two possible options, two different improving two changes. Either of the first two, if we're again using this approach where as soon as you find one, you go ahead and execute it, then we would move next to this cost 24 tour. And now we go to the third iteration of the While Loop.
00:04:46.466 - 00:05:00.140, Speaker A: So we again ask, can we make this tour even better through a two change? There's again, five two changes we could look at. And again, one of those five is going to take us straight back to the tour we just came from. So let me just show you the results of the four other two changes.
00:05:00.140 - 00:05:13.870, Speaker A: So let's again check the cost of each of these four tours, see if any of them are better, if any of them are less costly than 24, our current tour. So the first of those tours has total cost 32. So that's definitely not an improvement.
00:05:13.870 - 00:05:29.558, Speaker A: The second one is actually a tie with the one we've currently got. So this is a different tour that also has total cost 24. But remember, to qualify as an improving two change, you need to strictly decrease the objective function, the total cost.
00:05:29.558 - 00:05:42.540, Speaker A: So this would not actually count as an improving two change. Meanwhile, the other two tours are strictly worse. So the third of them has total cost 25, and the fourth of them has total cost 26.
00:05:42.540 - 00:05:57.498, Speaker A: And so that means this is where the two opt heuristic stops when there's no improving two changes to be made. Whatever your current tour is, you return that as your final tour. So for this particular example, this cost 24 tor would be the algorithm's final output.
00:05:57.498 - 00:06:08.542, Speaker A: As I'm sure many of you will have noticed, this cost 24 tour is not the best possible one. It's close, certainly improvement over the cost 29. That was the output of the nearest neighbor heuristic.
00:06:08.542 - 00:06:27.782, Speaker A: But this algorithm did get stuck at a tour with cost only 24. When a different tour not reachable by one two change from this one, a different tour actually has the smaller cost of 23. So as always with algorithms, you want to discuss what is the running time and to what extent is the algorithm correct.
00:06:27.782 - 00:06:47.402, Speaker A: So let's start with the running time of the two opturistic. First question you might ask is, is this even going to terminate in finite time, or could this while loop just run forever? Well, remember, there's a lot of traveling salesman tours. As we saw in a quiz a few videos ago, it's one half times quantity n minus one factorial.
00:06:47.402 - 00:07:07.090, Speaker A: So it's an exponential number of tours, but there's only a finite number of tours. Moreover, by definition, each iteration of the two opt heuristics while loop will strictly decrease the total cost of the current tour. Remember, we went from 29 down to 27 down to 24.
00:07:07.090 - 00:07:23.900, Speaker A: So that means you're never going to see a tour more than once, because each tour is strictly better than all the previous ones that you've seen. So if nothing else, even in the doomsday scenario where this algorithm iterates through every single tour, it will still terminate in a finite amount of time. Exponential amount of time.
00:07:23.900 - 00:07:33.962, Speaker A: Of course, we've never been satisfied with exponential running time bounds. So we have to wonder, hopefully the two opturistic is faster than that. Hopefully even it runs in polynomial time.
00:07:33.962 - 00:07:53.342, Speaker A: Well, whatever the running time is, it's going to be the number of iterations of its main, while loop times the amount of time you need to execute one of those iterations. Now, in one of those iterations, basically what you do is you search through all of the possible two changes looking for an improving one. And that's going to take quadratic time if you implement it appropriately.
00:07:53.342 - 00:08:03.798, Speaker A: Remember, the exact number of two changes is n times quantity n minus three divided by two. So that's o of n squared possibilities. And that'll be the per iteration running time.
00:08:03.798 - 00:08:13.514, Speaker A: So the question then is the number of iterations because they're always guaranteed to be a polynomial number of iterations. Here I've got some good news and some bad news for you. Let me start with the bad news.
00:08:13.514 - 00:08:29.882, Speaker A: The bad news is that there are in fact very cleverly constructed pathological examples in which the two opt heuristic will actually execute an exponential number of iterations of its main while loop. Those instances really do exist. So that sounds like a disaster.
00:08:29.882 - 00:08:38.594, Speaker A: That the worst case running time of the two opt heuristic is exponential. Sounds like it's a useless algorithm. But actually this is one of those cases where you shouldn't really worry about this at all.
00:08:38.594 - 00:08:57.510, Speaker A: So let me tell you the two pieces of good news. The first piece of good news is that you pretty much never see these pathological examples in actual applications. On realistic inputs, the two opturistic almost always converges reasonably quickly, say in a sub quadratic in n number of iterations.
00:08:57.510 - 00:09:22.478, Speaker A: So the second piece of good news is, who said we had to run the two opturistic all the way to completion? If you look at the pseudocode, you realize actually you can interrupt this algorithm whenever you want, right? It's maintaining a feasible tour throughout execution. So for example, maybe you initialized it with the output of the nearest neighbor heuristic, it's always going to have a tour in hand and that tor will only be getting better. It'll always be better than the one that you started with.
00:09:22.478 - 00:09:37.378, Speaker A: So you can just pick how long you're willing to wait for this algorithm to run. Maybe it's ten minutes, maybe it's an hour, maybe it's a day, whatever. You set a timer and when the timer goes off, if the algorithm hasn't already halted it'll, just say, oh well, I didn't converge.
00:09:37.378 - 00:09:46.790, Speaker A: But let me tell you about the most recent and best tour that I found. Here's your final output. Sometimes you hear algorithms of this type called anytime algorithms.
00:09:46.790 - 00:10:10.350, Speaker A: Finally, let's talk about the quality of the solution returned by the two opt heuristic. Now it's definitely only going to improve over whatever tour you initialize it with. So that's good news though we also know from that example that it's not necessarily going to compute the best possible tour, right? In our example, it output a tour with cost 24, but there was a different tour that had cost 23.
00:10:10.350 - 00:10:27.954, Speaker A: So once again, on solution quality, I've got some bad news and then some good news. Let me again start with the bad news. The bad news is that unlike for the makespan minimization problem, maximum coverage and influence maximization, where we had fast heuristic algorithms with provable approximate correctness guarantees.
00:10:27.954 - 00:10:50.502, Speaker A: Two opturistic does not have any approximate correctness guarantee of that form. There are, in fact, somewhat complicated and contrived examples where the output of the two opt algorithm is going to be an arbitrarily worse Tour than the one that is the best possible. So the good news is that once again, empirically, the performance of the two opt heuristic algorithm is pretty impressive.
00:10:50.502 - 00:11:06.046, Speaker A: So its performance depends a little bit on the application and the types of instances that you're dealing with. But it's very, very common that it will return tours that are within, say, ten to 20% of the minimum cost Tour. And in many applications, actually, it gets within a few percent, quite reliably.
00:11:06.046 - 00:11:26.120, Speaker A: So that's very encouraging. Obviously, it would be nice if we had one of these insurance policies like we had for our greedy heuristic algorithms. But at least empirically, on the types of instances that show up in real world applications, the two opturistic reliably does quite well, outputs tours with total cost not much more than the minimum possible.
00:11:26.120 - 00:11:55.534, Speaker A: And indeed, when someone from industry asks me for help on a problem that looks more or less like the TSB, I'll usually recommend to them that they start with the two opturistic augmented with some of the bells and whistles that we'll talk about in the next video. So if you find yourself having to tackle a Tsp type problem in one of your own projects, this is an excellent starting point in the next video. Let's move on to zooming out, and I'll show you how this two opturistic exemplifies the principles of local search.
00:11:55.534 - 00:11:56.060, Speaker A: See you then.
