00:00:00.250 - 00:00:17.354, Speaker A: So let's get started talking about proof of stake civil resistance. Now, the main purpose of Proof of Stake is a tool to achieve permissionless consensus. So remember, permissionless consensus, that's when you want a consensus protocol that has provable, guarantees, consistency, liveness, etc.
00:00:17.354 - 00:00:45.110, Speaker A: And you want that to be true even though at the time of the protocol's deployment, you have literally no idea who's going to be running the protocol either now or far into the future. And just in case that sounds kind of crazy, let's notice that the most famous Blockchain protocols out there, for example, Bitcoin and Ethereum, they are permissionless consensus protocols. In this sense, you right now could pause this video and go start up, spin up a new node running either the Bitcoin or the Ethereum protocol.
00:00:45.110 - 00:01:20.040, Speaker A: You would literally just download some software, wait for your computer to sort of sync up with the Blockchain as it exists thus far and then boom, your computer would be joining the party as one of the nodes running that consensus protocol. Now, these days, speaking at the beginning of 2023, we kind of take permissionless consensus for granted a little bit, right? We've had the Bitcoin protocol, for example, for 14 plus years or so. But again, I want to emphasize that if those protocols didn't exist and I just said we want a consensus protocol with provable consistency and liveness, and we want it to work no matter what set of nodes is running the protocol at any time in the future.
00:01:20.040 - 00:01:42.550, Speaker A: Without these protocols existing, it's not a priori clear that that should even be possible. So it's kind of amazing that there are in fact permissionless consensus protocols. So given that the point of Proof of Stake civil resistance is to enable permissionless consensus, it makes sense to make sure that we have sort of freshly loaded in our mind all of the key challenges that arise in permissionless consensus.
00:01:42.550 - 00:01:58.114, Speaker A: So you have two options. One option is you can go back and rewatch the first video of lecture number nine where we talk about permissionless consensus and its challenges in some detail. Alternatively, you can watch the rest of this video where we'll do a very brief review of that video from lecture number nine.
00:01:58.114 - 00:02:16.546, Speaker A: And I'll just use the same slides to page all of that context back in. So here then for your review is the first slide from lecture number nine. And remember, up until that point, so through lecture number eight, we were focusing entirely on permissioned consensus protocols.
00:02:16.546 - 00:02:38.670, Speaker A: By permissioned, I mean that the set of nodes running the protocol were all known at the time of the protocol's deployment. The protocol is kind of born knowing the public keys of all of the nodes that are going to be running that protocol within those safe confines of the permissioned setting. We focus on two different styles of consensus protocols that are pretty different from each other.
00:02:38.670 - 00:02:55.202, Speaker A: One of those being BFT type consensus protocols. That's exemplified by the tendermint protocol, which was of course the main focus of lecture number seven. So those BFT type protocols, remember, they are the notes kind of just stay in constant coordination with each other.
00:02:55.202 - 00:03:11.210, Speaker A: Blocks are finalized kind of one at a time. To finalize a block, you need a lot of agreement among the nodes. Remember, we had sort of two stages of voting and you needed a supermajority of nodes to agree on each of those sort of stages, where by supermajority I mean more than two thirds of the nodes running the protocol.
00:03:11.210 - 00:03:40.690, Speaker A: And because those BFT type protocols are so conservative in finalizing blocks, as a result, you never have any forks. So you never have sort of two blocks at the same block height claiming the same predecessor block, or at least under the standard assumption that more than two thirds of the nodes are running the protocol honestly and correctly, you will never in fact have any forks. And that's true even in the partially synchronous model, even under sort of network outages and network attacks.
00:03:40.690 - 00:04:08.662, Speaker A: Meanwhile, in lecture number eight, we studied a very different style of consensus, namely longest chain consensus. And so here, actually, there's very little coordination among the nodes, right? So any node that's a leader of around can just unilaterally propose whatever block it wants and name as that block's predecessor whatever it wants. And so, given that the nodes have such sort of unilateral freedom to propose whatever blocks and predecessors they want, you have to be ready to deal with forks in protocol.
00:04:08.662 - 00:04:30.850, Speaker A: You have to be ready to deal with two different nodes proposing blocks that have a common predecessor. And so, of course, in longest chain consensus, the way those forks are resolved in protocol is that only the longest chain counts. So the blocks that are considered finalized in longest chain consensus are the blocks on the longest chain, or more specifically, blocks on the longest chain, except for the last K blocks, where K is some security parameter.
00:04:30.850 - 00:04:48.834, Speaker A: And so there are different trade offs between those two styles of consensus. But for both of them, we proved a lot of sort of really cool consistency and liveness properties sort of under various assumptions on the communication network and how many of the nodes are running the protocol honestly. So for the permission setting, we were really sort of quite happy with those solutions.
00:04:48.834 - 00:05:33.186, Speaker A: So in thinking about permissionless consensus, the first thing you should ask yourself is like, well, why don't our tried and true solutions for the permission case carry over immediately? Why don't they just immediately solve permissionless consensus? But if you think about a little bit, you run into problems kind of right away once you start trying to think about running tendermint from lecture number seven or permission longest chain consensus from lecture number eight, if you try to think about running those protocols in a permissionless setting, BFT type protocols, an immediate challenge is. All right, so you're supposed to proceed by collecting supermajorities of votes. Like if you have 100 nodes, then you want 67 votes before you sort of proceed to the next stage in the permissionless setting.
00:05:33.186 - 00:05:52.262, Speaker A: Like you don't know what N is, you don't know how many nodes you're going to be running the protocol, which means you don't know how many votes you should be counting before you consider some block to be agreed upon. So that's the immediate challenge there. Without N, how do you do vote counting, which appears to be fundamental to those BFT type protocols in longest chain consensus.
00:05:52.262 - 00:06:03.290, Speaker A: Meanwhile, the immediate problem that comes up is trying to figure out how to define the leader sequence. Remember the way longest chain consensus works? It operates in rounds. Each round has a unique leader.
00:06:03.290 - 00:06:25.378, Speaker A: That's one of the nodes running the protocol, and that is the node that gets to propose a block and a predecessor for that block unilaterally in that round. So how should those leaders be chosen? Well, in lecture number eight, we talked about two different strategies, both of which seem just not really implementable in the permissionless setting. Strategy number one was just to have nodes take turns.
00:06:25.378 - 00:06:40.246, Speaker A: So just literally a round robin order deterministic sort of repeating itself over and over again. That would seem to require knowing who the nodes are running the protocol. So it's not clear what round robin taking turns means in a permissionless setting.
00:06:40.246 - 00:06:56.894, Speaker A: The other thing we studied at length in lecture number eight was random leader selection. Meaning if there are 100 nodes running the protocol each round, each node is equally likely 1% chance of being elected the leader of a given round. But again, that 1%.
00:06:56.894 - 00:07:35.786, Speaker A: You know, the probability that a node is supposed to be selected is 1% because you know there's 100 nodes. And again, if you don't know how many nodes there are, how do you do uniformly random selection from the nodes when you don't even know what the denominator of your probability is supposed to be? So those are the immediate obstacles that come up if you try to adapt our permissioned protocols to the permissionless setting. But we have seen at least one solution to those challenges back in lecture number nine, when we talked about proof of work and Nakamoto Consensus, the key insight we had at the beginning of lecture number nine is that we were missing one and really only one ingredient from turning our permissioned protocols into permissionless protocols.
00:07:35.786 - 00:08:09.394, Speaker A: And that was some way of doing civil resistant random sampling. Okay, so what does that mean? Let's unpack that a little bit. So first of all, what do I mean by random sampling? I mean some black box, some procedure by which you randomly select one of the nodes running the protocol and we sort of know why we want that, right? So it's especially obvious and longest chain consensus, each round has a leader where does that leader come from? Well, if you had a black box that just sort of gave you random samples of nodes, you could just invoke that box once each round to get the leaders of various rounds.
00:08:09.394 - 00:08:29.002, Speaker A: BFT type consensus is similar, right? So if you remember how Tendermint works, each round does actually have a leader there as well. That's the node that makes the initial block proposal that other nodes are then going to be voting upon. So you'd want to use this random sampling procedure in exactly the same way there to select one node among those running the protocol to propose the block at the beginning of the round.
00:08:29.002 - 00:08:53.910, Speaker A: There's also the nodes that are voting on the block. And so maybe you just have all nodes vote on the block or something like that, but probably you want to have a little more understanding of how many nodes are running the protocol. So you might want a committee of, let's say 100 nodes and then you could just invoke your random sampling box 100 times and interpret the 100 results you get back as some sort of randomly selected committee of nodes that are going to be voting on the block proposal.
00:08:53.910 - 00:09:28.046, Speaker A: So that's why we really want a random sampling procedure that basically gives us a way of reducing permissionless consensus to permissioned consensus using the random sampling procedure to output the specific nodes that we're going to task with various responsibilities in the protocol. But what about this civil resistance property? And a related question is, when I say sample a node, like from what probability distribution are we going to be sampling from? Because maybe the most obvious answer, right, which would be the uniform distribution, each node equally likely to be selected. As we've discussed.
00:09:28.046 - 00:09:58.006, Speaker A: It's not clear how you would implement that in the permissionless setting when you have no idea how many nodes are running the protocol. Now you could try to run an end around like you do something like, I don't know, ask nodes that are interested in participating to register in some way, like they submit their public key to the protocol, saying like, hey, give me a chance, choose me once in a while as the output of your random sampling procedure. The issue there of course, is it's very easy to then manipulate that procedure through civils.
00:09:58.006 - 00:10:13.982, Speaker A: So remember, a Sibyl attack is when one node masquerades as many. So it uses multiple identities, meaning it uses multiple public keys that all correspond to the same node to the same entity. And the thing to remember in the permissionless setting, it's basically free to carry out attacks of that form.
00:10:13.982 - 00:10:22.670, Speaker A: Anybody can generate an unbounded number of public key, private key pairs very easily. So it's a real problem. You really need robustness to sybil attacks.
00:10:22.670 - 00:10:44.630, Speaker A: And if you just choose a registered public key uniformly at random, well then an adversary could just register under a billion different public keys and guarantee that it basically gets selected at every single round. That would be a big problem. So for example, it means that you could have an adversary that controls only one node, right? So maybe there's 99 honest nodes and one byzantine node.
00:10:44.630 - 00:11:15.730, Speaker A: But just by generating lots of identities, if you're just sampling uniformly at random from the identities you know about, even with just one node out of 100 an adversary might be able to totally screw up your consensus protocol. This of course is much more challenging than the permission setting where we had the trusted setup, the PKI assumption, where there we just took it on faith, right? We left unjustified and just assumed that any two different public keys known to the protocol did in fact belong to two different nodes in the permissionless setting. Quite obviously we cannot make that assumption.
00:11:15.730 - 00:11:48.778, Speaker A: So that's why we really need a random sampling procedure which is civil resistant, meaning that the probability that a node gets selected is independent of the number of IDs that it might be using. Actually more generally we just want it to be impossible for a node to costlessly manipulate either through the generation of a bunch of public keys or through any other method to costlessly manipulate the probability with which it gets selected. Now to be honest, we'd like a property that's even stronger than that, which is we'd like it to just literally be impossible.
00:11:48.778 - 00:12:04.718, Speaker A: It doesn't cost less costly whatever. We'd like it to just be impossible for nodes to manipulate the probability with which they're selected, which is a property that our assumptions allowed us to have in the permissions plus PKI setting. Unfortunately that seems like too much to ask for in the permissionless setting.
00:12:04.718 - 00:12:23.658, Speaker A: So we'll settle on at least saying that the only way a node can manipulate the probability of selection is through incurring economic costs. That's what we're going to mean by silver resistant. Again, a priori not clear there should exist silver resistant mechanisms for random sampling of this type.
00:12:23.658 - 00:12:40.606, Speaker A: But those of you that have watched lecture number nine, as you know there is in fact a solution. We've already seen one which was proof of work. So the idea of proof of work, remember, is to sample a node with probability proportional to its computational power.
00:12:40.606 - 00:13:04.390, Speaker A: Okay, but how would a protocol do that? It has no idea what the computational power is of the different nodes. And so the clever solution there is to not do the random sampling like top down, like the protocol doesn't directly do the sampling itself, but rather the random sampling is carried out bottom up by the nodes themselves. So nodes are just going to be trying to solve these hard crypto puzzles under the random oracle assumption we talked about back in lecture number nine.
00:13:04.390 - 00:13:49.490, Speaker A: Basically all they can do is just sort of repeatedly guess nonsense, hoping to get something that hashes to a number that's sufficiently close to zero. And what that means is that the likelihood that any given node is going to be the first one to solve a crypto puzzle and therefore the leader of the next round, that's just going to be proportional to their hash rate, to the number of guesses that they're able to attempt in producing a solution to one of these hard crypto puzzles. So this particular random sampling procedure where the output of the procedure is just whatever node is the first one to solve the current crypto puzzle, that procedure is civil resistance, right? And that's because the probability a node gets selected depends only on its hash rate, independent of how many IDs that hash rate might be spread over.
00:13:49.490 - 00:14:16.602, Speaker A: So that's why it gives us the desired civil resistance property. And in lecture number nine, we saw how to pair proof of work random sampling with longest chain consensus to extend all of the guarantees we proved for permissioned longest chain consensus in lecture number eight to the permissionless setting. And remember this particular pairing of longest chain consensus with proof of work civil resistance, that's often called Nakamoto Consensus.
00:14:16.602 - 00:14:34.610, Speaker A: And in fact, you generally only see for the most part proof of work coupled with longest chain consensus protocols. You don't usually see it paired with a BFT type protocol. And we had a video on lecture nine that explained why basically, if you try to do that, you inevitably run into pretty serious liveness issues with your protocol.
00:14:34.610 - 00:14:52.746, Speaker A: So that's what we saw in lecture number nine. That's sort of the first permissionless consensus protocol that we saw, nakamoto Consensus based on proof of work. And the point of this lecture, lecture twelve, is to talk about an alternative to proof of work, which has some advantages over proof of work and some disadvantages, as we'll discuss at length later.
00:14:52.746 - 00:15:21.438, Speaker A: But this alternative is known as proof of stake. At a high level, the idea of proof of stake is to randomly sample nodes with probability proportional not to their computational power, but rather to their economic commitment to the protocol. What do I mean economic commitment? For example, maybe nodes have put in escrow some amount of native cryptocurrency so currency native to the blockchain protocol.
00:15:21.438 - 00:15:35.314, Speaker A: Maybe they've put some of that in escrow into a designated smart contract. That would be an economic commitment. And you would like to sample then a node with property proportional to the size of their economic commitment.
00:15:35.314 - 00:15:58.666, Speaker A: That's what proof of stake is all about. Now, in contrast to proof of work, which we saw kind of works really elegantly in conjunction with longest chain consensus and really doesn't work very well with BFT type protocols, proof of stake civil resistance can actually be used with either type of consensus protocol. As the years have gone by, it's become more and more common to see proof of stake coupled with BFT type protocols.
00:15:58.666 - 00:16:09.620, Speaker A: And we'll talk some about them, but you can also pair it with longest chain protocols. And that's been done successfully in major Blockchain protocols. And we'll talk about that as well toward the end of lecture twelve.
00:16:09.620 - 00:16:22.386, Speaker A: Now, let me remind you, proof of work and proof of stake are not the only approaches to civil resistance possible. There are others. They are the two by far most dominant approaches in deployed protocols.
00:16:22.386 - 00:16:58.074, Speaker A: And those are the two, accordingly, that we're focusing on in this lecture series. So while proof of work is really kind of the original approach to civil resistant random sampling, right, that's sort of introduced as part of the Bitcoin protocol in recent years, to be honest, proof of stake has really occupied a more and more dominant position as far as how major Blockchain protocols approach civil resistance. Perhaps most vividly exemplified by Ethereum's switch from proof of work to proof of stake, and I believe it was August of 2022 and beyond.
00:16:58.074 - 00:17:23.720, Speaker A: Ethereum, if you look at just like the last four years, so like the years like 2019 to 2022 or so, few if any major new proof of work Blockchain protocols were launched during that period. Whereas several major proof of stake blockchain protocols have launched over that time period. Some have been more successful than others, but multiple quite serious and some quite successful proof of stake projects have come in out over the last few years.
00:17:23.720 - 00:17:40.750, Speaker A: So I hope that sounds pretty exciting. Proof of stake, the currently central approach to the crucial problem of civil resistance that really any permissionless, consensus protocol must somehow solve. So how does it work? We'll start talking about that in the next video.
00:17:40.750 - 00:17:42.250, Speaker A: I'll see you there. Bye.
