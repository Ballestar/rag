00:00:00.570 - 00:00:44.774, Speaker A: Okay? And so in this video, we will formally define the Asynchronous model, which is the setting in which the FLP impossibility result holds. So the basic idea is just to set things up sort of diametrically opposite from the synchronous model that we were discussing in the last couple lectures. So remember, the first assumption in the synchronous model is a shared global clock. So in the Asynchronous model, we will assume no time at all, no notion of time, no shared clock. It now obviously, as a node, if you want locally, no one can stop you from pretending like you have a notion of time. But in the Asynchronous model, you cannot guarantee on there being any relationship between your own local notion of time and any of the other nodes and what their clocks may say. The second assumption in the synchronous model was guaranteed message delivery.
00:00:44.774 - 00:01:08.882, Speaker A: So guaranteed to arrive one time step later, or as we saw last video, more generously. You can say there's an operator in known bound delta and every message sent is received at most delta time steps later. So here we want to again be the total opposite. So we're going to make literally no assumptions about message delays. They can be arbitrarily large. All right? So it's not going to be quite that. We assume absolutely nothing.
00:01:08.882 - 00:01:56.930, Speaker A: Sort of the minimal assumption we're going to need to make for the model to be interesting is that a message, whenever it's sent, is eventually going to be delivered. So the delay is finite, but just no operating or rebound on how big a finite number that delay is. Because if we didn't make this assumption, then messages might never arrive at all. And then impossibility becomes sort of obvious, right? If you're trying to do state machine replication, you can't have liveness if you never receive any transactions from clients. Okay? So in the future, when you think about the Asynchronous model, what you should store in your mind is probably just these nine or so words that I've written down here. But remember, what we're about to do is prove a formal impossibility result that no consensus protocol can satisfy certain properties. And to have a formal mathematical proof, we need a formal mathematical model of the Asynchronous model.
00:01:56.930 - 00:02:25.706, Speaker A: So let me give you that formal model now. So first of all, at all times there will be a message pool, capital M. So this is the set of messages that have been sent by a node but have not yet arrived at the intended recipient. So messages are sort of hanging out in the pool, sort of idling out there in the ether. And now we want to talk about messages getting delivered one by one. So the model is going to be purely event driven. There's not going to be any notion of time.
00:02:25.706 - 00:02:53.282, Speaker A: Messages will be sent only in response to a message that's received. So let me write that down in just sort of this sort of infinite while loop each loop iterations is sort of playing the role of a time step. But again, remember, there's no sort of shared notion of time amongst the nodes running this protocol. So in each of these loop iterations, exactly one message will be delivered. And of course it'll be a message that's hanging out in the message pool. By message, I'm going to write r comma m here. R is the recipient of the message.
00:02:53.282 - 00:03:30.638, Speaker A: M here denotes sort of the payload, the data of the message. Sometimes I'll probably be sloppy and I'll use message to refer either to little m or the pair recipient comma little m. Now, the message pool may hold like a billion outstanding messages and I haven't said here which of those billion messages is the one that gets chosen to be delivered next. I haven't, for example, said that it's going to be first in, first out. So the whole point of the Asynchronous model is really to make basically no assumptions about message delays. So in particular, there's no promises about ordering. So just because one message was sent prior to another, there's no guarantee that will also be received prior to another.
00:03:30.638 - 00:04:23.320, Speaker A: And actually, if you think about it, I mean, this is also true in the Internet. You do not get ordering guarantees from communicating over the internet either for lots of different reasons. Now, because our next goal will be proving an impossibility result that no consensus protocol has all the properties we want in every possible scenario, it's going to be useful to think about this message being chosen from the pool by an adversary, meaning some entity whose only goal in life is to make the protocol fail. That's kind of how we'll be using this power in the proof of the FLP impossibility. Now, like I said, the model is event driven. So upon receipt of a particular message, its recipient, little R, can respond if it wants by doing some local computation, et cetera. But ultimately what matters is the messages that it sends back out into the world, which get deposited back into the message pool.
00:04:23.320 - 00:05:32.426, Speaker A: And that's the Asynchronous model, right? Just in each loop iteration, a single message is delivered and the recipient of that message can then respond by sending any number of messages. Now, this can't quite be like the whole story because if action only happens when a message is delivered, that means we can't start out with the empty message pool, right? Because then nothing would ever be delivered, nothing would ever be sent. So just to kind of initialize sort of the model to make sure that everybody gets a chance to speak, let's assume that the pool begins with kind of a dummy message with no payload to each of the end nodes participating. All right, so we start the pool with a set of end messages, one for each of the nodes and the message for a given node. I just has, again, sort of an empty payload, which I'm denoting by the symbol bottom. Now, perhaps you're going to object that this assumption does sort of ensure that each of the nodes will have at least one chance to speak. So when it receives this dummy message to itself, it can respond with new messages sent to the message pool.
00:05:32.426 - 00:06:21.450, Speaker A: But you're probably thinking, you know what, it's not like a node should only get one shot to send messages to speak, like they should get to speak many times if the protocol runs for a long time. But if you think about it, it's actually quite easy to just sort of fix this inside the protocol code itself. So again, let's just sort of assume for convenience that any protocol, whenever a node that hasn't halted yet receives a message, it always injects at least one dummy message back to itself into the message pool, which, when that dummy message is delivered later, will give that node yet another chance to speak. So every time a node speaks, it includes a dummy message to make sure that it will also get some future opportunity to speak. And again, that can just be done generically inside the protocol code. So we're not going to worry about that any further. Secondly, as discussed, we will be making the minimal assumption that every message is delivered eventually.
00:06:21.450 - 00:07:33.730, Speaker A: It could be an arbitrarily large but finite amount of time. So as we mentioned, this is sort of a minimal assumption for the model to be interesting, right? If you didn't have this assumption, then for example, a bunch of honest nodes could just be starved till the end of time, never hear about anything, and there's obviously no way you can sort of maintain things like consistency and liveness when you literally never hear about anything. Now, one way to see that this Asynchronous model, it's going to be challenging to design consensus protocols that work in this model is we now really have sort of two different types of adversaries. We have the same adversary we had before, where up to a little f of the nodes might be Byzantine and act in an arbitrary way trying to mess up our protocol. But the Asynchronous model really adds a second pretty just totally different adversary, which is whoever it is who's in control of message delivery. So it's totally possible that the Byzantine nodes are acting in some super weird way, trying to mess everybody up and that their shenanigans are enabled by the person controlled, the entity controlling message delivery, sort of playing along and enabling their bad behavior. Now, one reaction you might have to this Asynchronous model is that it doesn't seem very realistic and that's a totally fair reaction.
00:07:33.730 - 00:08:33.234, Speaker A: But I do want to emphasize that the point of the Asynchronous model is not at all to faithfully model how communication actually works in the internet. Now, here's what we really don't want to do, okay? We don't want to design a protocol which is a good consensus protocol in one person's model of communication over the Internet and is a bad protocol in some other model of communication at the Internet. One, because how do we know which one of these models to believe today? And then secondly, how do we know that model, even if it is valid today, how do we know if it's going to be valid tomorrow? Much safer and much more useful would be to design a protocol that works only under very weak assumptions, that does not subscribe to any particular specific model of communication over the Internet. That's what we would like to seek out. And the Asynchronous model is a way of articulating these sort of weakest possible assumptions. So if you're designing a consensus protocol, this would be the dream. You would love to have a consensus protocol that has nice properties even under these completely minimal assumptions.
00:08:33.234 - 00:09:29.830, Speaker A: Such a consensus protocol would automatically be interesting because even with just a barely functioning network, you'd still be getting the functionality you want. Now, alas, we're going to see that the main result in this sort of extreme asynchrony model is going to be the FLP, impossibility result, saying that we can't have good consensus protocols, but that will nevertheless guide us in. The right way to sort of scale back our ambitions a little bit so that we can retain realism while creating possibility results while allowing for there to be good consensus protocols. For those of you that have studied at least a little bit of algorithms, there's a good analogy to be made with what in algorithms is called worst case analysis. So when you're first starting out with algorithms, you're studying merge sort, maybe you study, you know, bellman, Ford, whatever. You always take pains to make no assumptions about what the input looks like. You're always trying to find an algorithm which works well, meaning, runs really quickly without any assumptions at all about the input.
00:09:29.830 - 00:09:56.706, Speaker A: So that's sort of our current Aspiration here. Also with the Asynchronous model, we want to make minimal, minimal assumptions about the environment, but still get a good solution. So that's the asynchronous model. Now, before we state the FLP Impossibility result, I need to tell you sort of what problem it is exactly that's impossible. And it's actually going to be a third notion of consensus, another very famous one called Byzantine Agreements. So I'll explain what that is in the next video. See you there.
00:09:56.706 - 00:09:57.150, Speaker A: Bye.
