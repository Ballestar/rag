00:00:00.730 - 00:00:23.594, Speaker A: So with this video, we'll embark on the proof of the FLP impossibility results. Remember the statement of theorem we're trying to prove in the Asynchronous model, even if you have only one faulty node, no deterministic protocol for Byzantine agreement satisfies all three of the properties we want, meaning the termination agreement and validity. So we're going to prove this by contradiction.
00:00:23.594 - 00:00:36.370, Speaker A: We're going to assume that an alleged protocol with all these properties actually exists. We're going to call it Pi and then we're going to proceed to derive a contradiction. And that contradiction will imply that actually Pi cannot exist, which will prove the theorem.
00:00:36.370 - 00:01:11.294, Speaker A: And more specifically, our plan is going to be we're going to sort of use the fact that Pi satisfies agreement and validity against it and we're going to actually show that it doesn't terminate. So really what we're going to show is that any protocol that's guaranteed to satisfy both agreement and validity upon termination, it must necessarily be the case that there are situations in which it runs forever, which is of course a violation of termination. So with that plan in mind, basically you hand me a pie satisfying agreement and validity on termination, I'm going to hand you back sort of an infinite sequence of things that can happen without the protocol ever terminating.
00:01:11.294 - 00:01:30.518, Speaker A: We're going to need some vocabulary and notation to talk about sort of a snapshot of the protocol because we want to say that the protocol runs forever, so we need to talk about the progress that it might be making. So that brings me to the definition of a configuration. So a configuration is just kind of a snapshot of what's happening in the protocol at a given moment in time.
00:01:30.518 - 00:01:44.074, Speaker A: It's sufficient information so that you could restart the protocol from that point if you wanted. And so what are all the things we need to keep track of? Well, we need to keep track of the state of each of the nodes. So what does a node know at the moment? And it always knows two things.
00:01:44.074 - 00:01:58.750, Speaker A: It knows what its private input is and it knows the sequence of messages it has received thus far. So configuration will encode that information for each of the end nodes. And then the other part of the sort of snapshot of the protocol is which messages have been sent but not yet delivered.
00:01:58.750 - 00:02:20.706, Speaker A: What's the contents of the message pool? Capital M. So for those of you that have ever sort of come across state machines, deterministic, finite automata, that kind of thing, you can definitely think about the sort of execution of a protocol in that way. So you can think of it as taking a walk through a really, really big, possibly infinite graph, directed graph.
00:02:20.706 - 00:02:33.600, Speaker A: The vertices of this directed graph are going to be the configurations, so the possible current state of the protocol. And then a directed edge will indicate sort of a state transitions. So a message is delivery, which takes you from one configuration to another.
00:02:33.600 - 00:02:51.896, Speaker A: So in a little more detail. So when a message gets delivered to its intended recipient, little R, so the configuration changes in three different ways. So first of all, that message that was just delivered, it's taken out of the message pool.
00:02:51.896 - 00:03:06.892, Speaker A: So the message pool drops by one message. Secondly, that message gets added at the end of the sequence of messages that node has received thus far, right? It's local state changes. And then finally, that node may respond by adding one or more messages to the message pool.
00:03:06.892 - 00:03:19.136, Speaker A: So the message pool changes a second time with the addition of the messages that this node wants to send. But whatever you have, those three changes, they all happen. All that means is you're in some new configuration and it's a deterministic protocol.
00:03:19.136 - 00:03:40.616, Speaker A: So these are deterministic state transitions. So the point being is every single message delivery is a transition from one configuration to another. So you can think about a sequence of message deliveries as a path in a directed graph graph where the vertices of the configurations and the directed edges correspond to message deliveries or equivalently state transitions.
00:03:40.616 - 00:04:02.560, Speaker A: Now don't forget, message deliveries are in effect controlled by an adversary. So from a given configuration, there may be many transitions possible because each different message that could be delivered could lead to a different transition between configurations. And so because an adversary can pick which message gets delivered, it basically gets to pick which of the possible transitions occurs.
00:04:02.560 - 00:04:33.228, Speaker A: So when we say that our plan is to show that this allegedly correct protocol, pi actually might never terminate, really what we're looking to do is exhibit an infinite path in this directed graph, okay? So the adversary will be able to deliver messages forever without ever halting. Now, for the next definition, I want to classify configurations into one of three categories. So first of all, we're going to be thinking about Byzantine agreement in the special case in which the only valid values are zero or one.
00:04:33.228 - 00:04:42.604, Speaker A: So the input of every node is a zero or a one. And that's also going to be the only possible outputs. Now remember, we're proving an impossibility result, so it's only that much more impressive.
00:04:42.604 - 00:04:54.512, Speaker A: We can get away with proving it even when there's only two available values. Okay? So we're fine making that assumption. Now secondly, remember that Pi is assumed to satisfy agreement.
00:04:54.512 - 00:05:15.956, Speaker A: And so that means upon termination, it must be the case that all of the honest nodes output the same value. So either they all output the value zero or all the honest nodes output the value one. Those are literally the only two possibilities for the final output of the protocol because the protocol is assumed to satisfy agreement.
00:05:15.956 - 00:05:41.388, Speaker A: Now, the three types of configurations we're going to look at are the ones that inevitably lead to all honest nodes outputting zero. The ones that inevitably lead to all honest nodes outputting one or the remaining configurations where we don't know where it's going to depend on what the adversary does, whether all the honest nodes output zero or alternatively, whether they all output one. So more formally, a configuration is going to be called a zero configuration.
00:05:41.388 - 00:06:11.932, Speaker A: If no matter what happens from this point on in the protocol, meaning no matter how the Byzantine nodes behave, no matter how messages are delivered, it is a foregone conclusion that when the protocol halts, the common output of all the honest nodes will be zero. In other words, at a zero configuration, the adversary, and again by the adversary I mean both the Byzantine nodes and the message delivery, the adversary no longer has any ability to force the all ones as the output. It's stuck with the all zeros as output one.
00:06:11.932 - 00:06:22.450, Speaker A: Configurations, of course, are defined in the same way. I mean those are configurations where the adversary has no ability to force the all zero output no matter what the adversary does. The honest nodes are going to all output one.
00:06:22.450 - 00:06:43.236, Speaker A: The remaining configurations we're going to call ambiguous configurations. So here by virtue of not being a zero configuration, there exists an adversary strategy that causes all the honest nodes to output one. By virtue of not being a one configuration, there exists an adversary strategy that forces all of the honest nodes to output zero.
00:06:43.236 - 00:06:57.736, Speaker A: That is, the adversary can force either all zeros or all ones, either one at once. It can choose the final output of the honest nodes. And again, by virtue of Pi satisfying agreement, every one of the configurations can be classified in this way.
00:06:57.736 - 00:07:14.588, Speaker A: Okay, so if there's no adversary strategy that forces one, it's a zero configuration. If there's no adversary strategy that forces zeros, it's a one configuration. And if the adversary still can hedge its bets and sort of put off to the future whether or not the output is going to be all zeros or all ones, then it's an ambiguous configuration.
00:07:14.588 - 00:07:40.564, Speaker A: No other possibilities because all the honest nodes always output the same thing by agreement. So now I can tell you about the High Level proof plan which again, sort of visually think of it as we're going to be hunting for an infinite path through that big directed graph with configurations as vertices and transitions as directed edges. Specifically, the plan is to exhibit an infinite sequence of ambiguous configurations.
00:07:40.564 - 00:07:55.736, Speaker A: So in other words, you give me an allegedly correct deterministic protocol pi. Notice that a configuration, it may be ambiguous for one protocol pi, but not ambiguous for a different protocol pi prime. So we're going to have to exhibit a different sequence depending on the protocol.
00:07:55.736 - 00:08:11.440, Speaker A: But you give me the protocol pi and I will show you an infinite sequence of ambiguous configurations. In other words, I'm going to demonstrate to you that this protocol might run forever. So in fact, it doesn't satisfy termination after all.
00:08:11.440 - 00:08:25.908, Speaker A: Okay, so the way we're going to prove that there exists this infinite sequence is we're going to have a lemma one and a lemma two. So remember, a lemma is to a theorem like what a subroutine is to a program. They're sort of helper statements to get us to our eventual goal of proving the FLP, impossibility result.
00:08:25.908 - 00:08:35.192, Speaker A: And this lemma one and lemma two, they're going to act. It's kind of analogous to, like, a base case and an inductive step in a proof by induction. So lemma one is going to get us started.
00:08:35.192 - 00:08:57.600, Speaker A: So we'll use lemma one to show that there exists an initial choice for this sequence. We can choose a configuration, C zero, that is ambiguous with respect to the given protocol pi lema two then is going to show how to exhibit one new ambiguous configuration from an old one. So you can apply lema two once to get C One from C zero, then apply it again to get C Two from C one, and so on.
00:08:57.600 - 00:09:10.236, Speaker A: So by applying lemma two over and over and over again, that's going to allow you to generate an Arbitrarily long sequence of ambiguous configurations. So neither of these lemmas is at all obvious. We'll start with lemma one, which is a little bit easier.
00:09:10.236 - 00:09:19.770, Speaker A: So we'll do that in the next video, sort of to wrap up lecture four. Lemma two is a bit tricky. Okay? So that's what we're going to focus on in lecture five.
00:09:19.770 - 00:09:25.850, Speaker A: But next, the formal statement of lemma one and its proof. That'll be in the next video. And I'll see you there.
00:09:25.850 - 00:09:26.500, Speaker A: Bye.
