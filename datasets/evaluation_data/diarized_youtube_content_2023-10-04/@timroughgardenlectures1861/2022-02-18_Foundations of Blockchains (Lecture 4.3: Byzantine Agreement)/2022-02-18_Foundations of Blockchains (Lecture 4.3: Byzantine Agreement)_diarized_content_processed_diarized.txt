00:00:00.650 - 00:00:25.090, Speaker A: So now we know the formal definition of the Asynchronous model. We want to move on and prove an impossibility result in the Asynchronous model, stating that there's no sort of good protocol for a certain consensus problem. So to state that impossibility result formally, I'm going to need to remind you first of all, what is it I mean, by a protocol, what is it exactly that's not going to exist? And then what is the consensus problem we're going to focus on, which is going to be a new one for us called Byzantine Agreement.
00:00:25.090 - 00:00:39.366, Speaker A: So first of all, what's a protocol? Remember, protocol is just a piece of code that honest nodes by definition execute faithfully without any deviations. Now, this code is event driven. So basically something will happen at a node and then it will respond in some way.
00:00:39.366 - 00:00:56.274, Speaker A: And in the Asynchronous model, all we're really going to worry about is messages. So an event at a node is the receipt of a new message and the protocol just says what messages the node should send back out. And the choice of the messages to send out can depend on everything that the node knows.
00:00:56.274 - 00:01:06.430, Speaker A: What does the node know? Well, it knows, first of all, it might have a private input. So it knows that at the beginning of the protocol. And then secondly, it may have received a sequence of messages thus far.
00:01:06.430 - 00:01:34.570, Speaker A: So the protocol specifies at a given node as a function of its private input and as a function of the messages that it's seen so far, including the most recent one. What messages should it deposit into the message pool? So it's worth emphasizing that the actions of a node, the messages sent out cannot depend on information the node does not know. So it cannot depend on anything other than the information that it has access to, namely its private input and the messages destined to it that it has already seen.
00:01:34.570 - 00:02:02.366, Speaker A: In particular, a node does not know directly what messages were sent between other pairs of nodes and cannot condition its behavior on that. So, for example, if under one run of the protocol, a node has a particular private input and sees a particular sequence of messages and outputs a zero and in a different run of the protocol where other messages are, communicated between other pairs of nodes. But the node in question starts with exactly the same private input and sees exactly the same sequence of incoming messages.
00:02:02.366 - 00:02:19.814, Speaker A: That node will also output zero. So in two parallel worlds where the node's knowledge is always the same, the behavior will also always be the same because it's specified by the protocol. Now, the FLP impossibility result is normally stated for what's called the Byzantine agreement problem.
00:02:19.814 - 00:02:31.318, Speaker A: So this is going to be the third notion of consensus that we've seen. We started with State Machine Replication, or SMR, which is multi shot consensus. We talked a lot about Byzantine broadcast, which is a single shot consensus problem.
00:02:31.318 - 00:02:43.934, Speaker A: Byzantine agreement is going to be another slightly different single shot consensus problem. So let me tell you about what it is. So in Byzantine Broadcast, remember one distinguished node was a sender and that was known up front.
00:02:43.934 - 00:03:02.930, Speaker A: Everybody knew node number seven was the sender and only the sender had a private input. The rest of the nodes started the protocol knowing absolutely nothing in Byzantine agreement, the big difference is now there will be no distinguished sender. All the nodes play exactly the same role and all of the nodes will have their own private input.
00:03:02.930 - 00:03:20.826, Speaker A: So we're going to denote by V star I the private input. That node I begins the protocol with, as usual, that's drawn from some set capital V of possible private inputs. If you're thinking about sort of blockchain protocols, capital V would probably be like ordered lists of transactions that the node might know about.
00:03:20.826 - 00:03:39.586, Speaker A: Here we're actually going to be able to make capital V as simple as you could possibly imagine, literally just the numbers zero and one. The FLP impossibility result is already true even with just two possible values. And as usual, what I mean by a private input is that it's information possessed only by that one node i.
00:03:39.586 - 00:03:56.578, Speaker A: The other N minus one nodes have literally no idea what Vstar I is. Now, under what conditions are we going to say that a protocol solves the Byzantine agreement problem? Well, very much like Byzantine Broadcast, we're going to have three properties. We'll actually give them exactly the same names termination, agreement and validity.
00:03:56.578 - 00:04:07.942, Speaker A: Validity will look a little different because we don't just have one sender with a private input. All of the nodes have private inputs. So first of all, termination honest nodes should never run forever.
00:04:07.942 - 00:04:17.434, Speaker A: They should always eventually halt. And when they halt, they halt with some output. Similarly, agreement is defined exactly as it was in Byzantine Broadcast.
00:04:17.434 - 00:04:31.774, Speaker A: Again, this is going to be a safety property, so something bad never happens. The bad thing is disagreement amongst honest nodes. In other words, agreement says no matter what, no matter which of the nodes are Byzantine, the honest nodes should all have a common output.
00:04:31.774 - 00:04:53.910, Speaker A: So finally we have the liveness property validity. Now remember in Byzantine Broadcast where we had a sender, just one private input possessed by a sender, their validity meant in the happy event that the sender happens to be honest rather than Byzantine. In that case, the sender's private value should get communicated to all of the other honest nodes.
00:04:53.910 - 00:05:09.210, Speaker A: Now here we don't have a sender, we have everybody with a private input. So we'll say that in the happy case where there's no initial disagreement amongst the honest nodes. That is, if it just so happens that all the honest nodes begin with exactly the same private input.
00:05:09.210 - 00:05:22.050, Speaker A: Well, in that lucky case, we'd like their common output to also be their common private input. For example, if all the nodes begin with the input zero, they should all output zero. If all the honest nodes begin with the input one, they should all output one.
00:05:22.050 - 00:05:42.594, Speaker A: And as usual, it's really the conjunction of safety and liveness that makes the problem hard. If all you want to do is terminate and agree, everybody can just always output the same canonical value hard coded into the protocol. If all you care about is termination and validity then if you think about it each honest node can just output its own private input and you're actually going to satisfy validity.
00:05:42.594 - 00:05:54.462, Speaker A: So that's the Byzantine agreement problem. That's what the FLP Impossibility result is usually stated for. And so now we have all of the vocabulary we need need to finally state and discuss this famous impossibility result.
00:05:54.462 - 00:05:56.620, Speaker A: So we'll start the next video with that. I'll see you there.
