00:00:00.730 - 00:00:30.070, Speaker A: Hi everyone, and welcome to lecture eight in this lecture series on foundations of blockchains. The topic for this lecture is going to be longest chain consensus. In the last lecture, lecture seven, we studied the Tendermint protocol, improved its basic consistency and liveness properties, and that lecture was really the culmination of a six lecture sequence in which we mastered the fundamentals of distributed computing as laid out by the brilliant computer scientists that preceded us back in the 1980s.
00:00:30.070 - 00:00:46.678, Speaker A: And personally, I think it's really cool that these classic ideas from several decades ago manifest in modern blockchain protocols. Tendermint, as we discussed, is the driving force behind some projects you may have heard of, like, say, Cosmos or Terra. And it's actually not just Tendermint.
00:00:46.678 - 00:01:05.714, Speaker A: There's other blockchain protocols out there you might have heard of that also have a similar flavor. So Algorand would be another example. I mean, it differs in lots of details, but still from a high level it has the flavor of iterated Byzantine agreement, much in the spirit of Tendermint hot stuff, which is the proposed consensus protocol for Facebook's cryptocurrency once that's rolled out.
00:01:05.714 - 00:01:20.214, Speaker A: That also sort of has the flavor of a pipelined version of Tendermints. And finally, some parts of the proposed consensus protocol for Ethereum 2.0, once they switch to proof of stake, also resemble some of the ideas we've been discussing here.
00:01:20.214 - 00:01:46.106, Speaker A: So all of these protocols involve sort of rounds of voting and nodes only committing to a block once they've seen some number of successful votes for it. All of these protocols also share the same trade offs that Tendermint made as far as what to do when under attack, like a network partition or denial of service attack or in the asynchronous phase of the partially synchronous model. Namely, all of these protocols favor consistency, potentially at the expense of liveness during a network partition.
00:01:46.106 - 00:02:08.454, Speaker A: So that's great. We've both mastered this sort of classical area of computer science and also seen how it manifests in lots of today's blockchain protocols. But as you probably know, at least the most famous blockchains out there in the world, Bitcoin and Ethereum, the way it works today, they actually use consensus protocols that kind of do not at all resemble what we've been talking about thus far.
00:02:08.454 - 00:02:24.838, Speaker A: So there are really two different dominant paradigms for the design of consensus protocols in the blockchain world. One of those paradigms is the one we've been discussing thus far, exemplified by Tendermint. You often hear these types of protocols referred to as BFT protocols or BFT type protocols.
00:02:24.838 - 00:02:47.314, Speaker A: Here, BFT stands for Byzantine fault tolerant, which of course is what we've been studying for the last large number of lectures. Now, the first shared property of these protocols is they all look sort of similar, at least from sort of 30,000ft. So in particular, you typically see multiple stages of voting to ensure that a node will only commit to a block when it knows that all the other nodes will commit to that same block as well.
00:02:47.314 - 00:03:09.154, Speaker A: So these protocols are designed so that as long as you don't have too many Byzantine nodes, there's no situation under which you'll break consistency. So really they favor consistency even in the face of an attack, even in the asynchronous phase of the partially synchronous model. So these protocols are designed so that they never have forks, they never have two different confirmed blocks at the same block height.
00:03:09.154 - 00:03:49.000, Speaker A: On the other hand, if they do ever encounter a fork, either because the software is buggy or because more than a third of the nodes are Byzantine or whatever, it's actually very difficult for these types of protocols to resolve that ambiguity and resolve the fork. So, for example, if you look at the documentation for Tendermint Core, I mean, they literally say that if you wind up having a fork in your blockchain, you should sort of resort to human coordination via Internet media, right? Which you should think to mean something like a discord server or all the people running the protocol maybe go and kind of figure out what they should all do. So with these BFT type protocols, forks and the ambiguity they introduce, they're extremely difficult to resolve inside the protocol itself.
00:03:49.000 - 00:04:07.542, Speaker A: And for that reason, they're designed with the idea that forks will literally never happen. So that's a short summary of both what BFT protocols tend to look like and also what properties they tend to have. One thing I meant to add when I was talking about ensuring consistency, always assuming less than 33% Byzantine nodes.
00:04:07.542 - 00:04:41.254, Speaker A: Sort of a consequence of this is that the failure mode for a BFT type protocol like, say, Tendermint is to stall. So whenever you kind of see like a popular article about some issue with some BFT type protocol, whether it was a bug or whether it was an attack, generally what you'll read about is that the blockchain just kind of did nothing, that no transactions were executed for some long period of time, 20 hours or whatever. You do not with these protocols, for example, usually hear about transactions getting rolled back, double spend attacks, that sort of thing.
00:04:41.254 - 00:04:55.414, Speaker A: All right, so that's category number one. I mean, if you've even sort of watched a 20 minutes video on Bitcoin at some point in your life, you kind of already know there's a category number two. The other main type are longest chain protocols.
00:04:55.414 - 00:05:08.718, Speaker A: Again with the canonical example here being bitcoin ethereum, at least right now, also is a longest chain protocol. So we'll talk in detail about how these work starting on the next slide. But just as a quick intro.
00:05:08.718 - 00:05:21.790, Speaker A: In longest chain protocols, actually the philosophy is to embrace forks. So as a result, you're not going to need these sort of explicit stages of voting. Rather you're going to let forks happen as part of normal operation.
00:05:21.790 - 00:05:40.086, Speaker A: But then of course, you don't want to spin up a discord server every time that happens. So you want to have an in protocol method for resolving the ambiguities posed by forks, and that's going to be a longest chain rule. So this idea of just allowing forks and resolving them within the protocol, this is actually a quite radical idea.
00:05:40.086 - 00:06:07.918, Speaker A: I'm not aware of any consensus protocol that took this approach prior to the release of the Bitcoin White paper at the end of 2008. Now, by virtue of sort of allowing forks and resolving them within the protocol, longest chain protocols also make a different trade off as far as what properties they retain while under attack, for example, when there's a network partition. Specifically, unlike classical 20th century protocols, longest chain protocols actually favor liveness over consistency.
00:06:07.918 - 00:06:44.606, Speaker A: And because of this, they have sort of a different failure mode under attack. So when you hear about problems with the longest chain protocol, you usually don't hear that no transactions were processed for 24 hours, which you usually hear are about big reorganizations of the chain, which means that transactions which everybody thought were confirmed actually wind up getting rolled back once the attack concludes. If you want to read about some sort of real world examples of exactly these types of attacks, of these sort of large scale reorganizations of a longest chain protocol, I encourage you to go search about Ethereum Classic, which has been attacked in this way several times.
00:06:44.606 - 00:07:11.558, Speaker A: So one bummer about these big chain reorganizations is that they can enable what are called double spend attacks. Whenever there's a big chain reorganization in effect, a lot of transactions that people thought were finalized or confirmed get rolled back and invalidated. So that know if there is some transaction that purchased a physical good, like maybe an expensive one like a Tesla, and the person has already driven off with the Tesla, and then that payment gets rolled back.
00:07:11.558 - 00:07:39.690, Speaker A: But that's a pretty big bummer for the car dealer. And so because longest chain protocols are the ones that suffer these big sort of chain reorganizations or the ones that actually wind up rolling back transactions after an attack, those are the blockchains that you tend to hear about double spend attacks, not so much the BFT type protocols. Now, before we wrap up this video, let me emphasize it's not the case that literally 100% of the consensus protocols out there in the blockchain world fall into one of these two categories.
00:07:39.690 - 00:07:45.166, Speaker A: A lot of them do. I didn't do an exact count. I would guess like 70%, 80%, something like that.
00:07:45.166 - 00:08:08.066, Speaker A: There are a few exceptions, and we may cover one or two of those in a future lecture, but certainly these two categories will allow you to classify most of the major blockchain protocols that are out there. I'm mostly done with what I want to tell you about BFT type protocols. We've obviously already had a number of lectures on them, so now it's time to look at this 21st century century invention longest chain protocols.
00:08:08.066 - 00:08:12.690, Speaker A: So I'll tell you exactly how those work, starting in the next video. I'll see you there. Bye.
