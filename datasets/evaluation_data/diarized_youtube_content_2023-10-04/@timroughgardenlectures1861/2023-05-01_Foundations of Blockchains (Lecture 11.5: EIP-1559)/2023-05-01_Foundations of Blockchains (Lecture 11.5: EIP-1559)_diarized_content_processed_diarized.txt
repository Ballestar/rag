00:00:00.490 - 00:00:29.442, Speaker A: So to this point, we've learned about first price auctions, which are a totally reasonable way to have user specified transaction fees in a blockchain protocol. That's how transaction fees have always been set for Bitcoin for its entire lifetime of the protocol, and it's how transaction fees were assigned in Ethereum until very recently. So first price auctions are natural enough, but we also learned about a key drawback that they have, which is actually pretty hard to figure out how to bid intelligently in a first price auction.
00:00:29.442 - 00:00:43.126, Speaker A: Doing so requires reasoning about the bids of your competition. So you need to make educated guesses about others bids. And there's always the risk that you bid too high and overpay for transaction inclusion or that you underbid.
00:00:43.126 - 00:01:01.760, Speaker A: You shade your bid too aggressively, you wind up not getting included, even though you would have been willing to pay the going price for inclusion. This is all a big contrast to, say, shopping on Amazon. You go to a product page, you just decide whether this product is worth $20 to you or not and choose accordingly and never think about it again.
00:01:01.760 - 00:01:31.130, Speaker A: So could there be a transaction fee mechanism different from first price auctions, where the user experience is much closer to shopping on Amazon, where really there's kind of a take it or leave it offer which is known in advance, and all you have to do is decide whether you're willing to pay it or not. And that question is exactly what led to the development of the transaction fee mechanism that was proposed in EIP 1559. Here, EIP stands for Ethereum Improvement Proposal.
00:01:31.130 - 00:01:55.494, Speaker A: This new transaction fee mechanism was developed by Vitalik Butyrin, who's also the founder of Ethereum. He had been writing about some of the key ideas in this transaction fee mechanism for some time. In my estimation, certainly by, say, late 2018, I think all of those ideas had solidified.
00:01:55.494 - 00:02:10.146, Speaker A: So I think this design was basically done by the end of 2018 and it took a few years, but eventually it was in fact incorporated into the Ethereum blockchain. So I always forget if it's August 4 or August 5. I think it was August 4, 2021.
00:02:10.146 - 00:02:43.820, Speaker A: Through a hard fork, the Ethereum blockchain switched from using a first price auction to using this new transaction fee mechanism that I'm about to tell you about. And I should say that while I'll discuss this transaction fee mechanism in the context of Ethereum, which is natural because that's the context in which it was developed, really, the key ideas in this design are not overly Ethereum specific. That's the reason why I'm covering this kind of in our four lecture economic sequence as opposed to in the Ethereum deep dive that we're going to do a few lectures later.
00:02:43.820 - 00:02:59.310, Speaker A: So in principle, the Bitcoin protocol could also switch from using first price auctions to using the transaction fee mechanism in EIP 1559. It's probably unlikely to happen. The Bitcoin community does not like to make major changes to the Bitcoin protocols.
00:02:59.310 - 00:03:18.290, Speaker A: I wouldn't count on that, but they could in principle. And variants of this mechanism have also been implemented in a couple smaller blockchains, including near and filecoin. All right, so the first key idea in this new transaction fee mechanism is to have what's going to be called as a base fee.
00:03:18.290 - 00:03:40.986, Speaker A: And this will be playing the role of a reserve price or an opening bid of an auction, namely, it sets a floor. It's the minimum bid a transaction can submit to be eligible for inclusion in the block. So in other words, if you have a transaction and its bid is actually less than the base fee of the current block, then that transaction simply cannot be included in the block.
00:03:40.986 - 00:03:52.122, Speaker A: If it is included in the block, it will be regarded as an invalid transaction. So, a couple of comments. The base fee is, naturally enough, denominated in units of the native currency.
00:03:52.122 - 00:04:14.978, Speaker A: After all, you've got the native currency, why not use it? And secondly, users can bid higher than this base fee if they want. So the base fee is the minimum bid necessary for inclusion, but any higher bid is also eligible for inclusion as well. Now, I'm sure you're wondering, where does this base fee come from? How is it computed? We'll talk about that at length in the next slide.
00:04:14.978 - 00:04:29.946, Speaker A: For now, let me just say that this base fee is going to be purely protocol computed, okay? So this is not suggested by users. The way, in First Price auctions, all of the transaction fees are actually suggested by the users themselves. The base fee will be computed by the protocol.
00:04:29.946 - 00:04:50.610, Speaker A: It will be a deterministic function of everything that has happened leading up to this block. So it'll be independent of the contents of the current block and uniquely determined by what happened in the past. And as we'll see, this base fee can vary with the block, so the base fee can go up or down from block to block.
00:04:50.610 - 00:05:28.830, Speaker A: So next, and again, before we get to the question of how is R computed, let me ask the question to whom should these payments be directed? Where do the base fee revenues go? And your reaction is probably like, well, why would the answer to this question be any different than it was in first price auctions? Right? So what did we say back then? We said that, well, it's really up to the block producer, like, for example, the miner, whether or not a transaction gets included. So if your transaction is included, it's really because of that miner's decisions. So it makes sense that your bid would be transferred to the miner that saw fit to include your transaction in their block.
00:05:28.830 - 00:05:51.148, Speaker A: So I agree that's kind of the obvious answer. The issue is that totally doesn't work. And when I say it doesn't work, what I mean is that if you pass the base fee revenues onto the miner, then it's as if the base fee was zero.
00:05:51.148 - 00:06:17.652, Speaker A: It really has no effect. So that may seem counterintuitive, but the reason is because a miner, along with the creators of transactions, along with users, they can actually collude to avoid the base fee. Now interestingly, this is not the kind of thing you worry about in traditional non blockchain applications of auctions.
00:06:17.652 - 00:06:38.252, Speaker A: You're not generally concerned about a seller and buyers sort of colluding in order to manipulate each other. It's not clear how that type of collusion would be helpful to anybody in a blockchain like Ethereum. However, you've got the users, they're acting in their own self interest.
00:06:38.252 - 00:06:48.208, Speaker A: So they would like to have transactions included at a low price. You've got the miner, they're acting in their own self interest. Presumably they would like to maximize the revenue that we're trying to get.
00:06:48.208 - 00:07:09.060, Speaker A: But then you've also got the protocol, right, which in particular is trying to sort of enforce this base fee. And so now it is conceivable that the users and the miner by colluding together could somehow rip off the protocol in effect and evade that base fee that it's trying to implement. Now, this point is definitely easiest to appreciate via an example.
00:07:09.060 - 00:07:24.270, Speaker A: So what I want you to think about is like, so imagine we have some block and it has some base fees. You have the base fees like 100. And imagine we have a bunch of pending transactions, but actually all of those pending transactions are not willing to pay 100, okay? They're willing to pay up to at most 50.
00:07:24.270 - 00:07:46.982, Speaker A: So in that case, if everybody's honest, meaning that the transactions bid actually what they're willing to pay or something less than it, they're going to be biding at most R over two. And that of course completely handicaps the block producer. None of the pending transactions are actually eligible for inclusion in this block.
00:07:46.982 - 00:07:59.470, Speaker A: So the miner literally has no choice but to produce an empty block. They'll still collect the block reward, but they're not going to collect any transaction fees. They're forced to produce an empty block because there's no eligible transactions.
00:07:59.470 - 00:08:24.620, Speaker A: Now you can kind of sort of see why users and miners might be incentivized to collude, right? Because this all honest outcome, it's kind of bad for everybody, right? I mean the users, they'd really rather be included and they are willing to pay to be included, not R, but they're willing to pay R over two. Meanwhile, in this honest outcome, the miner is making no transaction fee revenue at all. So they would be happy to make any transaction fee revenue bigger than zero.
00:08:24.620 - 00:08:43.150, Speaker A: So here's how they could do that. Here's a strategy for the miner of a block and creators of transactions in which both of them will be better off. So everyone is creating a transaction, right? So they know they need to bid R to be eligible for inclusion and so that's what they're going to do.
00:08:43.150 - 00:09:06.372, Speaker A: So all the users will actually attach this base fee R as their bid. On the other hand, they're going to tell the Miner via a side channel what they'd actually be willing to pay. So in our example, all of these transactions are going to be biding 100 on chain because that's the base fee, that's the minimum bid for eligibility.
00:09:06.372 - 00:09:21.180, Speaker A: They're only willing to pay up to up to 50. So off chain, they're going to tell the Miner maybe they bid 50, maybe they bid 45, depending on how much they want to shade their bid. But they're going to tell the Miner an actual sort of offer of what they are really willing to pay off chain.
00:09:21.180 - 00:09:37.474, Speaker A: So in response, what the Miner is going to do is it's going to create a block that includes all of these transactions. Remember, these transactions actually did bid R on chain, so they are eligible for inclusion. So the Miner is going to include all of these transactions.
00:09:37.474 - 00:09:55.066, Speaker A: It's going to collect this base fee of R, like of 100 from each of these included transactions. And then the Miner is going to refund the users the difference off chain. So if the base fee is 100 and sort of a user privately communicated to the Miner, they're actually only willing to pay 45.
00:09:55.066 - 00:10:13.374, Speaker A: Well, then there'll be a transfer of 100 from the user to the minor because of the on chain bid of 100. And then the Miner will off chain, refund the remaining 55 back to the user. Now, I don't want to get into the details here of how a minor and users might actually implement this type of collusion.
00:10:13.374 - 00:10:28.978, Speaker A: You could imagine doing it just really through private messaging. You could imagine trying to sort of enforce a contract programmatically on chain. The one thing I want you to know is that this is not a hard thing to do in a permissionless sort of general smart contracts platform like Ethereum.
00:10:28.978 - 00:10:52.954, Speaker A: Indeed, I encourage you to go to a Block Explorer, something like Etherscan, check out some blocks on the Ethereum blockchain. You're going to see some transactions that actually have zero transaction fee attached to them. And so you should then ask yourself like, why would a minor include a transaction with a zero transaction fee when there's these other competing transactions with a positive transaction offered transaction fee? And the answer is because there's some off chain agreement.
00:10:52.954 - 00:11:19.282, Speaker A: So there's some way in which that Miner is getting compensated by the creators of those transactions off chain. So just know that this is not hypothetical, right? So any transaction fee mechanism you're really going to deploy in a general smart contracts platform, you need to sort of be ready for this type of collusion to occur. So in this example, if in fact such collusion happens in this way, then it renders the base fee completely pointless.
00:11:19.282 - 00:11:45.514, Speaker A: It does not serve its purpose of trying to exclude from eligibility certain transactions. All transactions sort of remain eligible just with the difference between their willingness to pay and the base fee made up for by this off chain refund by the miner. So in other words, this attempt to have a base fee and transfer those revenues onto the minor of the block fails utterly in the sense that you don't get anything actually different than a first price auction.
00:11:45.514 - 00:12:11.318, Speaker A: It's as if the base fee R was equal to zero. All right, so one reaction to this sort of example would be to just give up on the idea of a base fee that's just clearly hopeless to try to try to sort of regulate which transactions are eligible for a given block. But actually the smarter question would be to ask well, is there something else we could do with the base fee revenues that might lead to a better outcome? And the answer to that question is yes.
00:12:11.318 - 00:12:36.766, Speaker A: So actually, literally, if you do anything with the base fee revenues other than pass it on to the miner of that block, then you're going to have good game theoretic property. Sort of the unique bad thing you can do game theoretically is pay those base fee revenues to the minor of the block. Now, specifically in EIP 1559, the version that got deployed, they do kind of the simplest imaginable thing perhaps with the base C revenues which is they simply burn them.
00:12:36.766 - 00:13:05.670, Speaker A: So if you like to think about it as they're just sent to a null address, in any case the coins used to pay for those transaction fees are removed from circulation forever. So again, for the mechanism to have good game theoretic properties, it's not essential that the base fee revenues get burned, they just need to be directed somewhere other than the blocks minor, for example, to a foundation, for example, you could pay them forward to the miners of future blocks. All of that would give you the same game theoretic properties.
00:13:05.670 - 00:13:47.378, Speaker A: But EIP 1559 does burn the base fee revenues. And even though this sort of fee burning kind of arose naturally as a game, as sort of game theoretically necessary to have a meaningful base fee, the way things sort of unfolded, this fee burning wound up being maybe the number one reason why so much of the Ethereum community wound up supporting the switch of the transaction fee mechanism wound up supporting the deployment of EIP 1559. So why is that true? Why did the ethereum community get so excited about this fee burning idea? Well, one thing to remember about blockchains with block rewards is the block reward is generally newly minted coins.
00:13:47.378 - 00:14:13.200, Speaker A: So every 13 seconds when a new block is sort of added to the ethereum blockchain, two new ethers are minted to be given to that block's minor. And so that's inflation, that's increasing the circulating supply of Ethers. And in fact, prior to EIP 1559 with the sort of old first price auctions with all of the revenue going to the miners, the inflation rate in ethereum was sort of roughly 4%.
00:14:13.200 - 00:14:40.774, Speaker A: And if you're burning some of the transaction fees, however, at the same time you're putting new coins into circulation through the block reward, you're also taking other coins out of circulation through the fee burning. So this fee burning at least partially offsets the inflation that is caused by block rewards. And empirically thus far there's been enough fee burning that the effective inflation rate of ethereum has dropped from 4% to 2%.
00:14:40.774 - 00:15:04.812, Speaker A: So that means ethers in circulation are being devalued by inflation less quickly than they were before. You can sort of think of this as the analog of a stock buyback which then increases the price, at least in principle, of the remaining shares. So this obviously was a big hit.
00:15:04.812 - 00:15:28.396, Speaker A: I mean, in some sense this should be a financial windfall to all holders of the ethereum native currency. And so that's one of the big reasons that there wound up being sufficient support to actually make this really major change to the ethereum blockchain. So this fee burning aspect of EIP 1559, it wound up being sort of one of the most discussed and sort of most controversial aspects of the proposal.
00:15:28.396 - 00:15:43.716, Speaker A: So that's worth a longer discussion. Now's not the time to do it, but we'll circle back on this point in the very last video of this lecture of Lecture eleven. Now let me remind you that transaction creators can, if they wish, bid more than the base fee.
00:15:43.716 - 00:16:18.000, Speaker A: And in fact, in EIP 1559 any excess in the transaction fee above and beyond the base fee actually does get transferred to that block's minor. Okay? So I mean, let's revisit the example of collusion that we had previously when we weren't burning the base fee and let's observe that that type of collusion between a minor and users is no longer helpful. So basically because the base fee r was not transferred to the miner, the miner is in no position to pay out any refunds to the users, or rather any refund the miner would pay out would be an out of pocket expense.
00:16:18.000 - 00:16:32.584, Speaker A: So that shows that this particular type of collusion isn't helpful to the miner and the users. It doesn't help them somehow defeat the protocol in any way. And you can in fact prove a general theorem which says no matter what a minor and the users try to do, it's not going to be worth it.
00:16:32.584 - 00:17:06.850, Speaker A: They can't make themselves better off than they would have been had they just participated normally on chain in the transaction fee mechanism. So if you're interested in reading the formal statement of this result, which is phrased in terms of an OCA proof property here OCA stands for off chain agreement. So if you want to see that formal statement or if you want to see the proof, you can check out, for example, the report I wrote back in December 2020 an economic analysis of EIP 1559 that includes, among other things, the formal statement and proof of this result.
00:17:06.850 - 00:17:22.680, Speaker A: I should say that First Price Auctions are also OCA proof. They also have this property. It's actually kind of obvious for First Price Auctions, anything a user and users in a miner would do off chain, they can perfectly well simulate on chain through the First Price Auction mechanism.
00:17:22.680 - 00:17:43.304, Speaker A: And so the point here is that with the EIP 1559 mechanism, it's not necessarily obvious that it satisfies this OCA proofness property that collusion doesn't help, but it is in fact true. It's for more delicate reasons. So as we've seen, it is indeed important the base fee revenues are burned or otherwise redirected away from the block's minor.
00:17:43.304 - 00:18:02.464, Speaker A: It's also important that this base fee is a deterministic function only of the preceding blocks and is independent of the contents of the current block. But given that both of those two properties do hold in this mechanism, it is indeed for those reasons, OCA proof collusion does not help. Great.
00:18:02.464 - 00:18:18.576, Speaker A: So now we know what to do with the base fee revenues. We know to burn them or otherwise withhold them from a block's minor. But there's still this burning question of like, what is R exactly? I promise it's going to be some deterministic function that depends only on what happened in the preceding blocks.
00:18:18.576 - 00:18:59.500, Speaker A: But what function exactly? Well, before we think about how to compute R, let's think about what is it that we'd want to compute in the first place. So what would be the ideal base fee? Like if one magically fell from the sky? What would be the best case scenario? Well, the best base fee, at least from the point of view of economic efficiency, would be what's known as a market clearing price. And what I mean by that is that the subset of pending transactions that would be willing to pay this base fee R would just exactly fill up a block, nothing more, nothing less.
00:18:59.500 - 00:19:26.334, Speaker A: So why is this a good thing? Why is it good that the transactions willing to pay this base fee would be exactly the same as the size of a block? Well, first of all, we have 100% utilization, which is certainly something we want. We want full usage of the scarce resource that is the blockchain. And secondly, the block is utilized only by the most valuable transactions, right? If you're willing to pay the base fee R, you're included.
00:19:26.334 - 00:19:35.030, Speaker A: If you're not willing to pay the base fee R, you're excluded. So the transactions that get included are precisely the ones that are at least R. So those are the most valuable transactions.
00:19:35.030 - 00:19:55.194, Speaker A: And so this is exactly what we mean by economic efficiency. The scarce resource is used to its fullest and moreover, it's only the highest value transactions that consume that scarce resource. If you had a base fee that was higher than the market clearing price, that would be inefficient because the block would not be completely full.
00:19:55.194 - 00:20:20.100, Speaker A: If the price is too high, the number of transactions willing to pay it is not going to fully fill up the block. On the other hand, if you use a base fee that's too low, lower than the market clearing price, that will also lead to inefficiencies because you can't guarantee that it's only the highest value transactions that get included. So basically, low value transactions and high value transactions are going to be on equal footing if you set the base fee too low.
00:20:20.100 - 00:20:28.422, Speaker A: All right, so that's great. If a magical base fee fell from the sky, we've now convinced ourselves what we'd want it to be. We'd want it to be the market clearing price.
00:20:28.422 - 00:20:41.306, Speaker A: But of course the base fee is not falling from the sky. Somehow we've got to compute it in protocol. So how are we going to do that? And in particular, notice the market clearing price is going to be different at different points in time.
00:20:41.306 - 00:21:00.030, Speaker A: When there's a lot of demand for the ethereum blockchain, the market clearing price is going to be high. In slow periods where there isn't a lot of demand, the market clearing price is going to be low. So we need the protocol to somehow automatically adjust the base fee in a way that's sensitive to increasing or decreasing demand for the blockchain.
00:21:00.030 - 00:21:27.878, Speaker A: So, for example, you have trends on the longer, you know, the demand for ethereum blockchain before and after the advent of decentralized finance of DeFi was quite different. Demand was quite higher once DeFi got big. And similarly, you have very volatile demand also on the short time scale, right? So when you have an NFT drop, you have a very sudden short term spike in the demand for space on the blockchain.
00:21:27.878 - 00:21:49.402, Speaker A: So we need the in protocol computed base fee r to somehow respond to those kinds of trends and spikes. So in EIP 1559, we're going to take a very natural approach to sort of adjusting the base fee, which is we're just going to use local search. So if it looks like the base fee is currently too low, we're going to increase it a little bit.
00:21:49.402 - 00:22:19.980, Speaker A: If it looks like the base fee is currently too high, we're going to decrease it a little bit and we'll just keep doing those adjustments in perpetuity. So in other words, if at the current base fee, the set of eligible transactions is too big to fit in a block, if it's bigger than a block, that tells us our base fee is too low and we need to increase it. And conversely, if at the current base fee the set of eligible transactions doesn't even wind up filling up a block, well, then the base fee appears to be too high and we should decrease it.
00:22:19.980 - 00:22:30.320, Speaker A: So that's a very natural idea. But there is an issue, however. Namely, suppose you see a long sequence of blocks in a row and they're all totally full.
00:22:30.320 - 00:22:53.350, Speaker A: How do you, based purely on onchain information, know whether or not you've seen a bunch of full blocks? Because you got the base fee exactly right. You got it equal to a market clearing price versus the scenario in which your base fee is way too low. And the reason the blocks are full is because there's actually even lots of other excess demand which didn't make it into the block.
00:22:53.350 - 00:23:24.534, Speaker A: So, in other words, how can we know just from on chain information whether or not we're, in this first case, whether or not the set of eligible transactions at that block's base fee was in fact too big to fit in the block? Now, notice if you're actually sort of observing this happen in real time, you're a miner or you're running a full node or whatever, you may notice that there's a lot of pending transactions that didn't make it into a block. But the point is that does not get recorded on chain. So that is not recorded for posterity.
00:23:24.534 - 00:23:57.350, Speaker A: So a node that sort of spins up five years from now, it has no idea what transactions weren't included in a block because none of that off chain information gets recorded for posterity. So how do we solve this problem? It seems that we need some kind of on chain signal that we're, in this first case, an onchain signal that the demand at the current base fee exceeds what we could fit in a single block. So that naturally leads us to the next big idea in the transaction fee mechanism in EIP 1559, which is the idea of variable size blocks.
00:23:57.350 - 00:24:34.264, Speaker A: So this idea in EIP 1559, it's not discussed as much as most of the others, but it's still quite clever and quite interesting. So before EIP 1559, the way Ethereum worked, and frankly, pretty much the way all other blockchains continue to work, is that there's a hard cap on the size of a block. Right now, in Ethereum, size is measured in terms of gas, which is the sort of proxy which is meant to measure the computational and storage requirements of executing a transaction.
00:24:34.264 - 00:25:01.824, Speaker A: But whatever in these units of gas blocks had a hard cap, for example, 15 million gas, every single block had to be at most that size, otherwise it would automatically be invalid. So at the very beginning of this lecture, we discussed why it is that blockchains typically have a hard cap on block size. And remember, it's because you need basically all the nodes to be able to sort of keep up with the transactions that are being processed.
00:25:01.824 - 00:25:27.420, Speaker A: So remember, in the designs we're looking at, all of the nodes redundantly execute all of the transactions. And also, at least the original vision of kind of permissionless, consensus and open blockchains was that there should be kind of minimal computational and storage requirements if you want to spin up a node and start running the protocol. So you combine those two things and that naturally limits on how rapidly you can be creating and processing new transactions.
00:25:27.420 - 00:26:05.160, Speaker A: But a key insight here is that it's kind of overkill to actually enforce a per block hard cap that every 13 seconds the block can only be so big. Really, again, what matters, what matters is nodes being able to keep up. And so it should be good enough as long as sort of on average blocks only have a certain size, right? So rather than insisting that every single block is 15 million gas or less, just that on average, over time blocks average size is 15 million or less, that should be roughly the same computational burden on the nodes running the protocol.
00:26:05.160 - 00:26:18.704, Speaker A: So a little more precisely, here's how this idea gets implemented in EIP 1559. So first of all, there's going to be a target block size. So this is what you'd like the average size to be bounded by.
00:26:18.704 - 00:26:37.220, Speaker A: So for example, in Ethereum, the target block size is going to be 15 million units of gas. There will, however, be allowed violations of this target block size. Now, in EIP 1559 there's still a hard cap on the size of each block which is double the target.
00:26:37.220 - 00:26:57.528, Speaker A: So for example, in Ethereum, what's allowed is 30 million blocks with up to 30 million units of gas because that's double the target of 15 million. There's nothing particularly special about the parameter two here. You could imagine using, for example, a bigger number, three or four.
00:26:57.528 - 00:27:12.272, Speaker A: And I think that's a possibility that Ethereum or other blockchains may wind up using sort of numbers bigger than two. But this is the current implementation in Ethereum's, EIP. 1559 and what I hope is intuitively clear.
00:27:12.272 - 00:27:30.036, Speaker A: I mean, we're really just granting now the blockchain additional flexibility which hopefully it can use for beneficial purposes. We're really allowing it to borrow capacity from the near future to bring it into the present if you happen to be in a period of unusually high demand. All right.
00:27:30.036 - 00:27:47.624, Speaker A: So that, I think is already actually quite interesting in its own right. So this realization that the reason we had sort of a cap on block sizes were such that actually we should be able to get away with giving the blockchain more flexibility and allowing to borrow space from the future to bring it into the present already. Quite interesting idea.
00:27:47.624 - 00:28:03.650, Speaker A: But to tie this into what we were talking about last slide, I mean, now actually we're in a great position to implement the local search idea. We now actually will have on chain information about whether the base fee is too high or too low. Namely, we can just look at how big the last block was.
00:28:03.650 - 00:28:22.834, Speaker A: For example, if the most recent block has size less than the target less than C, that indicates that the base fee is too high, that there weren't enough. Eligible transactions to actually fill a block up to the target size. Now this we could do.
00:28:22.834 - 00:28:49.100, Speaker A: Before this we could implement even when we had a fixed block size, we could notice if a block was not completely full and use that as a signal we should decrease the base fee. What's interesting with variable size blocks is now we can handle the other case as well. Whenever we see a block which is bigger than the target block size of capital C, that tells us there's excess demand at the current base fee and so we really should increase it to get back to the target block size.
00:28:49.100 - 00:29:07.086, Speaker A: Perhaps some of you are kind of hungry for even more details than this. Maybe you're wondering exactly how much the base fee goes up or goes down, depending on how big or how small the block was. And the details there, they're not so important for any of the main points in this lecture.
00:29:07.086 - 00:29:41.558, Speaker A: They're also details you could easily imagine getting tweaked over the years through sort of hard forks and parameter adjustments. But at least at the time of this recording, the way it works is whenever you have an empty block, whenever you have the most extreme signal that your base fee is too high, then you decrease the base fee by twelve and a half percent for the next block. Conversely, whenever you see a double full block, so one that's twice the target, the most extreme signal that your base fee is too low, then you increase the base fee by twelve and a half percent for the next block.
00:29:41.558 - 00:30:01.934, Speaker A: And then anywhere in between you just interpolate linearly. So for example, if you ever produce a block whose size is exactly the target, then as you might expect, the base fee remains unchanged. So you now know in a fair amount of detail exactly how Ethereum's new transaction fee mechanism works, how this mechanism from EIP 1559 actually operates.
00:30:01.934 - 00:30:16.798, Speaker A: And it's a very, very cool mechanism. So it's a fun thing to learn about. There is still an unfulfilled promise, however, which is like why did we do all this in the first place? It's because we were complaining about first price auctions being sort of difficult to figure out how to bid.
00:30:16.798 - 00:30:31.350, Speaker A: And so the question we need to ask is does this transaction fee mechanism, cool as it is? Does it actually solve the problem? Is it in fact easier for the users to figure out an appropriate bid? So we'll take that up in the next video. I'll see you there. Bye.
