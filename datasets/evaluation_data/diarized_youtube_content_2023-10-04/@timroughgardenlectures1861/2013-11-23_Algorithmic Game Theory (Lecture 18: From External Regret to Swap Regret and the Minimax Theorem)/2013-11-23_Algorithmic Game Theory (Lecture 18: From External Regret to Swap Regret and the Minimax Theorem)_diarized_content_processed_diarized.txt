00:00:00.410 - 00:00:27.762, Speaker A: Um, so as far as the lecture, let me remind you what we did last time. So we're in the middle of learning dynamics and we had this really cool result last lecture, which is that course correlated equilibria are tractable. And they are tractable in a very satisfying sense, in the sense that there are simple, certainly computationally efficient learning algorithms.
00:00:27.762 - 00:00:58.478, Speaker A: Specifically, we looked at multiplicative weights on Monday, and if all players use a no regret algorithm like multiplicative weights, then the history of joint play will converge to this set. Of course, correlated equilibria, the biggest of the four sets in the equilibrium hierarchy that we've been discussing. Okay so last time we proved in here that's easy now the bigger an equilibrium concept the more things there are to find the easier it is to find one.
00:00:58.478 - 00:01:24.818, Speaker A: So if any of these four sets of equilibrium were going to be computationally tractable it was going to be the course correlated equilibrium that's a necessary condition for anything else to be tractable. So today I want to look inward a little bit I want to get greedy and ask are any of these more refined equilibrium concepts also tractable? And so I want to cover two results today. The first result is we're going to get an analogous tractability result for correlated equilibria.
00:01:24.818 - 00:01:37.194, Speaker A: So the next smallest set, and I'll remind you what these are in a second. So the first main result is correlated equilibrium are attractable. Again the sense will be similar.
00:01:37.194 - 00:01:44.334, Speaker A: So there are again going to be learning algorithms. They're not going to be quite as simple. We're going to have to work a little bit harder, but they'll still be not too bad.
00:01:44.334 - 00:02:01.134, Speaker A: They'll certainly be polynomial time. And the convergence will be in the same sense. If all players use these sort of more refined what are called no swap regret algorithms, then the history of joint play will in fact converge not just to coarse code equilibria, but to the smaller set of correlated equilibria.
00:02:01.134 - 00:02:12.818, Speaker A: So that's the first result I want to talk about. One quick aside. If you wanted to just establish polynomial time tractability, you don't actually need to resort to learning algorithms for course correlated equilibrium or correlated equilibria.
00:02:12.818 - 00:02:23.926, Speaker A: You can formulate them as linear programs which we can solve in polynomial time. So that has the benefit. You even get an exact equilibrium, which you might recall from Monday, we only got approximate course correlated equilibrium.
00:02:23.926 - 00:02:38.506, Speaker A: It'll be similar today. But the drawback is solving a linear program doesn't really bear any resemblance to actual behavior of players and games. Whereas the learning dynamics we're discussing, while not maybe exactly how people act, they at least bear some resemblance to actual behavior.
00:02:38.506 - 00:03:01.750, Speaker A: So that's sort of the trade off between the linear programming approach and the learning dynamics approach we're talking about this week. So looking ahead a little bit we will talk some about a special case of Nash equilibria today but next week we're actually going to talk about intractability of mixed Nash Equilibria and pure Nash Equilibria. So that's just to give you a little appreciation for it's really cool we can get tractability results for these slightly bigger sets or nontrivially bigger sets.
00:03:01.750 - 00:03:15.980, Speaker A: Okay. So let me remind you what a correlated equilibrium is and I'm not going to give you the definition I gave you in lecture. Rather I'm going to cite a definition that you proved as equivalent in an exercise a couple of weeks ago.
00:03:15.980 - 00:03:35.700, Speaker A: So this was exercise 59. So the original definition was in terms you think of a player sort of conditioning on its recommendation from a mediator and then switching and can it do better condition on its recommendation. This is the definition in terms of a switching function.
00:03:35.700 - 00:04:06.310, Speaker A: So a distribution sigma over the outcomes of a game I'll again use the notation for cost minimization games. So as a correlated equilibria or just a ce if for all players I and for all switching functions. So I'm going to use delta for that notation.
00:04:06.310 - 00:04:15.386, Speaker A: This maps actions or strategies of player I. Back to strategies of player I. It need not be a bijection it just maps actions to actions.
00:04:15.386 - 00:04:59.046, Speaker A: So if for all switching functions player I is no better off switching than it is just following the distribution sigma. So on the one hand we look at I's expected cost according to the distribution sigma and that should be no more than I's expected cost if every time it's supposed to be playing some strategy si it instead plays the strategy delta of si. So this is the definition of correlated equilibria that maps most naturally to learning algorithms.
00:04:59.046 - 00:05:20.734, Speaker A: Another thing just to remember about correlated equilibria. So if you just want a concrete example this was the traffic light example where we had the stop go game and it had two pure Nash equilibria and we observed that you could implement a 50 50 mixture of the stop go and the go stop outcomes using a traffic light. That was essentially the mediator which would recommend strategies via a green light or a red light whether to go or stop respectively.
00:05:20.734 - 00:05:33.442, Speaker A: Okay so that's the equilibrium concept we're going to talk about in the first part of this lecture. All right. So last time we were talking about course quality equilibrium we made this connection to these no regret algorithms.
00:05:33.442 - 00:05:46.166, Speaker A: So let me just remind you sort of what was the online learning setting we were talking about on Monday. So remember this is where we have this known time horizon capital T and then on every day little T from one up to capital T. First you have to pick a distribution.
00:05:46.166 - 00:06:09.342, Speaker A: Again we're just thinking about a single player at the moment. The single player has to pick a distribution over its actions and then after deciding on the distribution an adversary reveals a cost vector c sub t and then the goal is to minimize your cost relative to some benchmark. And the benchmark we used on Monday was external regret, meaning you want to do at least as well as the best fixed action.
00:06:09.342 - 00:06:31.766, Speaker A: In hindsight, there's a connection between competing with the best fixed action and coarse correlated equilibria. So the motivating question for this first result is, all right, we have this refined equilibrium concept, correlated equilibrium. Is there an analogous notion of regret, analogous to external regret so that we again get this connection between the static equilibrium concept and a no regret notion.
00:06:31.766 - 00:06:57.330, Speaker A: And there is that's the next definition, it's called swap regret. And again, the point of this is so that minimizing this regret notion via dynamics will lead us to this equilibrium concept. So definition, so an algorithm, and here when I say an algorithm, I'm talking about in this online decision making setup that we talked about on Monday.
00:06:57.330 - 00:07:33.550, Speaker A: So an algorithm has no swap regret if for all cost vectors that the adversary might throw at us and for all switching functions. So here A is the set of actions of this fixed player, this one player that we're thinking about the expected value of how well you do. So again, we're going to look at a time average.
00:07:33.550 - 00:07:58.658, Speaker A: So how well you do is just the cost vector on time T evaluated the action you play at day T, which is drawn according to this distribution that you chose at the beginning of day T. Now, previously what we did is we looked at the best performance of any fixed action. Here we're going to look at the best performance under any fixed switching function delta.
00:07:58.658 - 00:08:13.340, Speaker A: So we have a delta fixed and we think about how well we would have done if every time on some day we played a given action, a sub T, we instead play the alternative action delta of a sub T.
00:08:16.590 - 00:08:17.340, Speaker B: Okay?
00:08:22.030 - 00:08:38.286, Speaker A: So this is a random variable because our actions are chosen at random from the distributions that we pick each day. Remember, our algorithms are randomized, but it has some expected value. And it should be the case that the expected value of this quantity is going to zero for every switching function delta.
00:08:38.286 - 00:09:13.658, Speaker A: I forgot to say that goes to zero as T goes to infinity. So this is only more stringent than the notion of external regret that we discussed Monday. External regret corresponds to needing to worry only about a subset of the switching functions delta, namely which ones the constant functions, okay? The function's delta that no matter what the input is, always outputs a fixed action.
00:09:13.658 - 00:09:24.734, Speaker A: So if delta is a constant function, this is always the same action. So this is just saying your cost should be competitive with that of every fixed action as the time horizon goes to infinity.
00:09:24.862 - 00:09:25.700, Speaker B: All right?
00:09:26.310 - 00:09:47.110, Speaker A: So note, if you have an algorithm with no swap regret, meaning it vanishes, the time average vanishes in the limit, then it also has no external regret. In the same sense, no swap regret means no external regret.
00:09:50.030 - 00:09:50.780, Speaker B: Okay?
00:09:54.110 - 00:10:13.358, Speaker A: And basically this definition is engineered to make the following theorem true. So last time external regret was about competing with all fixed actions. Coarse coil equilibria is just about not having any unilateral deviations that help you.
00:10:13.358 - 00:10:22.450, Speaker A: Here we're talking about competing with all switching functions. Correlated equilibria is just talking about no switching function can help you. So the same theorem connecting the two holds today.
00:10:22.450 - 00:10:40.790, Speaker A: So I'm not going to prove it again, but I'll state it informally because it is important, but the argument is exactly the same. So theorem. So what's not at all obvious is whether any algorithms of this type exist in the world, okay? For all you know, there could be an impossibility result saying this is impossible.
00:10:40.790 - 00:11:06.538, Speaker A: But suppose for the moment that there did exist such algorithms and all players of now a multiplayer game used them. So if all players use no swap regret algorithms, then the history of joint play is indeed converging to a core lit equilibrium.
00:11:06.634 - 00:11:07.280, Speaker B: Okay?
00:11:07.750 - 00:11:44.540, Speaker A: So then sigma. So again, this is the same as on Monday. We just pick it as a uniform distribution over the T outcomes is an approximate correlated equilibrium, okay? And the regret which is going to zero as T is going to infinity, the regret with respect to a given switching function in the learning algorithm just corresponds exactly to the error in the corresponding equilibrium condition for the exact same switching function.
00:11:44.540 - 00:12:04.050, Speaker A: So as the regret is going to zero, the extent to which the error with respect to the correlate equilibrium conditions is also going to zero. Okay, good. So they do exist no swap regret algorithms.
00:12:04.050 - 00:12:17.590, Speaker A: And what's great is we're going to be able to piggyback on the work that we already did on Monday. So I'm not going to show you the first ever no swap regret algorithm. There's some cool ones, but I'm going to show you a more recent meaning, last decade reduction.
00:12:17.590 - 00:13:03.510, Speaker A: And so we're just going to prove that if there exists no external regret algorithms, and I gave you one Monday multiplicative weights, if there exists a no regret external regret algorithm, then there exists a no swap regret algorithm. So it's going to be a black box reduction from minimizing external regret to minimizing swap regret. So this is by Blum and Mansour five box reduction on from no swap regrets to no external regrets.
00:13:03.510 - 00:13:10.726, Speaker A: Okay, so a problem we don't currently know how to solve to a problem that we do currently know how to solve.
00:13:10.838 - 00:13:11.500, Speaker B: Okay.
00:13:15.230 - 00:13:26.446, Speaker A: All right, so in particular, there exists no regret algorithm, no swap regret algorithms. This reduction will be polynomial time. Multiplicative weights is polynomial time.
00:13:26.446 - 00:13:49.378, Speaker A: So there's even computationally efficient such algorithms. So corollary there exists polytime no swap regret algorithms. And combining this corollary with this theorem, we conclude that corolla equilibria are also tractable in the same sense as coarse correlated equilibria.
00:13:49.474 - 00:13:49.734, Speaker B: Okay?
00:13:49.772 - 00:14:03.290, Speaker A: There exist computationally efficient learning algorithms. So basically those that are output by this theorem. And if all players use these computationally efficient no swap regret algorithms, then we converge the history of play converges to the set of correlated equilibria.
00:14:03.290 - 00:14:19.258, Speaker A: So this is the big picture. So there's a few moving parts here, but you should know all the details for everything except for the proof of this main theorem.
00:14:19.354 - 00:14:19.854, Speaker B: Okay?
00:14:19.972 - 00:14:42.386, Speaker A: So I'm asking you to remember from Monday that we know that there exists no external regret algorithm, specifically multiplicative weights. I showed you the full description, the full proof, and then you should understand the connection. You should understand that no swap regret, if players use them as learning algorithms, lead to correlated equilibria in this sense and with the same proof as on Monday.
00:14:42.386 - 00:14:49.706, Speaker A: So that's why we get this conclusion. If we can prove this main theorem, then we get tractability of correlated equilibria. Okay, so that's where we are now.
00:14:49.706 - 00:14:51.020, Speaker A: Questions about that.
00:14:55.470 - 00:14:56.220, Speaker C: Change.
00:14:57.310 - 00:15:04.198, Speaker A: No, it's a fixed game. Yeah. So it's the same story with the number of actions.
00:15:04.198 - 00:15:25.426, Speaker A: So we think of the number of players and the number of actions of each player, meaning the game, that's a fixed thing and it's being played over and over again. So like you might recall from multiplicative weights, we asked how long does it take to get down to regret epsilon? And the answer was log of the number of actions n over epsilon squared. But we think of n as fixed and then t growing large.
00:15:25.426 - 00:15:41.350, Speaker A: And then the question is how large does t have to be as a function of the other parameters before you get a target regret? Okay, then let's do the reduction. It's a cool reduction. It's something that you would hope would work.
00:15:41.350 - 00:15:50.214, Speaker A: And so it's really cool that it does work. It does need one kind of great trick at the very end. But the high level idea I think is very natural.
00:15:50.214 - 00:16:01.790, Speaker A: It's sort of what you would want, it's the proof that you would wish would work. So here's how it goes. So like last time, n is the number of actions.
00:16:01.790 - 00:16:16.930, Speaker A: And so remember, a hypothesis is that no external regret algorithms exist. Just think multiplicative weights, I'm going to need n copies of them. N totally separate instantiations of a no regret algorithm.
00:16:16.930 - 00:16:28.380, Speaker A: So m one to m, n are different instantiations of if you like multiplicative weights, but it doesn't matter which one.
00:16:29.150 - 00:16:29.900, Speaker B: Okay.
00:16:32.830 - 00:17:00.942, Speaker A: Intuitively, the jth no regret algorithm MJ, you can think of it as being responsible for protecting against deviations from action j to other actions. Remember, a switching function specifies so what do we need to do to minimize swap regret? We need to say that our cost is at least as good as it would be if you applied any switching function to the actions that we took. And so a switching function takes as input and action and it outputs an action.
00:17:00.942 - 00:17:14.280, Speaker A: So there's sort of n squared things going on. And the Jth no regard algorithm is in some sense responsible for paying attention to the switches from the Jth action. That's sort of an intuition to keep in mind.
00:17:14.280 - 00:17:41.034, Speaker A: All right, so let me describe this reduction. Now, remember how a neurograd algorithm works, what its input and what its output is. So something like multiplicative weights, it spits out a distribution over actions.
00:17:41.034 - 00:17:50.594, Speaker A: Then you feed it in a new cost vector, it changes its internal state. Like, for example, it modifies the weights, it spits out a new distribution. You feed it a cost vector, it spits out a distribution, and so on.
00:17:50.594 - 00:18:09.370, Speaker A: So that's how we're going to be interacting with these M one through MN black boxes. All right, so these are subroutines at our disposal and one up to MN. So they minimize, they have no external regret.
00:18:09.370 - 00:18:42.706, Speaker A: Now, at the same time, we're designing this master no swap regret algorithm, which is responsible for outputting distributions over actions and receiving cost vectors. So at the beginning of a time step, we ask all of our no regret algorithms, the external ones, for their opinion. What do you think we should do right now? Tell us.
00:18:42.706 - 00:18:54.626, Speaker A: A distribution over actions. So we're going to get, at a given time step, t an opinion from the first no regret algorithm. This is a distribution over the actions.
00:18:54.626 - 00:19:05.318, Speaker A: This is what M one thinks we should do. M two will give us its opinion and so on. Okay, so Q one, T through Qnt.
00:19:05.318 - 00:19:31.730, Speaker A: Each of these is a distribution over the N actions. We have N distributions over the N actions. So we receive distributions QT one to QTN from M one up to MN.
00:19:31.730 - 00:19:50.066, Speaker A: The next step I am going to, until the end of the proof, leave under specified, under determined. So the problem is, all these NeuroGate algorithms have their own opinion about what we should do about the distribution from which we should pick an action. And in general, these are not going to be the same distribution.
00:19:50.066 - 00:19:58.902, Speaker A: They'll have different opinions. But we're designing this master no swap or good algorithm, hopefully. And so we're responsible for outputting a single distribution over actions.
00:19:58.902 - 00:20:14.180, Speaker A: So we have to somehow take these N distributions that are different and compile them into some consensus distribution over actions, which we then report back. Okay, so it's not clear how to do that. I mean, you could think about various ways, but it's not clear what the right way is.
00:20:14.180 - 00:20:27.270, Speaker A: But that's the key trick, is the right compilation procedure. So for now, there's going to be some method by which we take these N distributions and compute a consensus distribution PT.
00:20:32.010 - 00:20:32.760, Speaker B: Okay.
00:20:35.370 - 00:20:59.578, Speaker A: So in our master algorithm, this is the central processing unit. If you like, it takes as input the N distributions and it will somehow figure out the distribution from which an action eventually gets chosen. So this pink box is the actual no swap or good algorithm.
00:20:59.578 - 00:21:13.250, Speaker A: So its job is to spit out distributions and accept cost vectors. Okay? So at time one, it's just going to do something like pick an action totally at random. So then we find out a cost vector.
00:21:13.250 - 00:21:29.874, Speaker A: And now, of course, each of our subroutine no regret algorithms M one through MN, they're also expecting a cost vector, right? That's how these guys work. So M sub J, it's unaware of anything else in the world. It doesn't know it's part of this big machine.
00:21:29.874 - 00:21:47.258, Speaker A: It just is expecting to get a cost vector, spit out a distribution, it's QT, get a new cost vector, and so on. So the next step in our reduction is to take the real cost vector from nature, from the adversary, and apportion it amongst these no regret algorithms, m one through MN.
00:21:47.354 - 00:21:48.000, Speaker B: Okay.
00:21:52.530 - 00:22:08.442, Speaker A: So after we say what our distribution of reactions is, PT, we receive a cost vector CT. And to the outside world, this is all that the outside world sees. We're outputting a distribution of reactions PT, and then it gives us a cost vector CT.
00:22:08.442 - 00:22:21.666, Speaker A: Everything else is internal to the guts of our algorithm and how we're interacting with our subroutines. Okay, so what do we do now? We're going to take this cost vector CT, and we're going to feed this into all of the neural regret algorithms.
00:22:21.778 - 00:22:22.006, Speaker B: Okay?
00:22:22.028 - 00:22:28.934, Speaker A: Well, not quite. We're going to split this. We're going to portion it according to the probabilities that we chose our different actions.
00:22:28.934 - 00:22:39.870, Speaker A: So if we picked a given action with 10% probability, then the corresponding no regret algorithm gets 10% of the cost vector. So give the cost vector.
00:22:44.690 - 00:22:45.018, Speaker B: Press.
00:22:45.044 - 00:22:59.750, Speaker A: Remember, PT is a distribution of reactions. Our consensus distribution maybe action J, we pick with 10%. So we just multiply the real cost vector by 10%, and we give that to the Jth no regret algorithm.
00:23:01.210 - 00:23:01.622, Speaker B: Okay?
00:23:01.676 - 00:23:29.710, Speaker A: So in this picture, the overall algorithm gets CT as a cost vector, and now it's going to feed in. So this is going to be PT one times CT that's going to feed in PT two times CT. PTN times CT.
00:23:30.610 - 00:23:31.214, Speaker B: Okay.
00:23:31.332 - 00:23:43.934, Speaker A: And that's the entire reduction. So you have these N no regret algorithms, each sort of responsible for switches from a corresponding action. The master algorithm is responsible for outputting a distribution and inputting a cost vector.
00:23:43.934 - 00:24:09.050, Speaker A: So what's missing is to specify the interaction. So how do you connect the outside world to your n no regret algorithms? Internally and going outward, there's this magical box which has a consensus distribution PT from QT one through QN and then going backward. I've told you exactly how we split up the cost vector to go back just according to the probabilities that we play the different actions, question distribution over action.
00:24:09.050 - 00:24:12.300, Speaker A: Right?
00:24:14.610 - 00:24:27.318, Speaker C: So when you're feeding back boxes, is it like each black box is kind of assigned to a single action?
00:24:27.514 - 00:24:31.170, Speaker A: Roughly. Roughly. That's the rough intuition.
00:24:31.170 - 00:24:47.270, Speaker A: So you could think about MJ as sort of paying attention or sort of guarding against switching functions that do really well by switching action J to any other action, which is one of the things we need to worry about for swap regret.
00:24:54.010 - 00:25:00.460, Speaker C: Boxes operating under the assumption that the distribution they give you is the one to be used.
00:25:00.990 - 00:25:25.358, Speaker A: Well, they don't really know, frankly, right? I mean, if you really think about just the I O behavior of one of these neural grid algorithms, they literally just spit out a distribution and give you a cost vector and it just goes back and forth. And as a function of the cost vectors that you tell it, it's going to modify what it tells you to do accordingly. You're correct in saying that this is fictitious.
00:25:25.358 - 00:25:34.120, Speaker A: So these are not the actual costs. We're, in effect, lying to each no regret algorithm about what the actual costs were. And it's not clear that's a good idea right now.
00:25:34.120 - 00:25:56.606, Speaker A: But I guess one thing that does seem sort of natural, perhaps another thing you could try is just feeding in this entire cost vector to each of the neurograd algorithms. But it also seems natural to kind of have the overall cost that you face to be reflected kind of in the superposition of the neurograd algorithms, to split up the cost vector between them. And then the probabilities that you were playing the various actions is a reasonable way to split that up.
00:25:56.606 - 00:26:16.690, Speaker A: I'm not saying that's the only way you could do it, but I think it's reasonably natural as well. Okay, so let's just take stock of what we've got, and once we've actually figured out what we've got, we'll realize we just need one key trick and we'll be done. So this reduction works for a suitable implementation of how to compute PT from the QTS.
00:26:16.690 - 00:26:55.738, Speaker A: All right? So let's take stock. All right, so first of all, what is the expected cost of our algorithm always going to do? Time average costs, as usual. Okay, well, we incur cost every single day, days from T of one up to capital T, and then write expected cost.
00:26:55.738 - 00:27:09.430, Speaker A: So there's a probability we play the various outcomes and the probability that we play the various outcomes on a given day T is by definition, this distribution PT. That's what our algorithm decides to do. So we look over all of the actions.
00:27:09.430 - 00:27:29.754, Speaker A: We look at the probability that we play a given action, and if we play that action, we just look at what cost we get. So that's what our algorithm that's just its expected cost. Now, we want to say this is good.
00:27:29.754 - 00:27:40.634, Speaker A: We want to say this is small. We want to say it's small, though, remember, relative to some benchmark. Okay, so relative to the expected cost under some switching function delta, that's our competition.
00:27:40.634 - 00:28:04.150, Speaker A: So let's try to understand what those are. So what would our expected cost have been with some particular switching function delta? Okay, well, it's almost the same thing. Let me call this expression two dot delta, because it's with respect to a particular delta.
00:28:04.150 - 00:28:23.246, Speaker A: So if every time we were supposed to play an action K, we instead play delta of K, we just do the same sum. We just say, well, for any what was the you know, look at the probability there are action sorry. That our algorithm played action I.
00:28:23.246 - 00:28:36.700, Speaker A: We're doing the counterfactual where instead of playing I, what if we had played delta of i? So over here, we just look at the cost if instead of playing I, we played delta of i. So that's the.
