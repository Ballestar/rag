00:00:00.250 - 00:00:11.326, Speaker A: So let's kick off this video actually with a brief review of the last thing that we said in video, the first video of this lecture of lecture number nine. So I'm showing you the slide right here. This is the same one as from the first video.
00:00:11.326 - 00:00:35.234, Speaker A: And you might recall that, you know, at that point I was trying to really hammer home that on the one hand, the choice of the consensus protocol and on the other hand, the choice of the mechanism for civil resistance, those are really independent decisions and they should not be conflated. And so to really belabor that point, we drew this two by two matrix. So with the rows labeled by possible civil resistance mechanism.
00:00:35.234 - 00:00:49.770, Speaker A: So proof of work in the top row, proof of stake, something we'll talk about in lecture number twelve, proof of stake on the bottom row. And then the columns are labeled with a choice of the consensus protocol, right? So longest chain in the first column, BFT type consensus. In the spirit of tendermint in the second column.
00:00:49.770 - 00:00:59.438, Speaker A: Now, I'm not saying that either of these axes is exhaustive. It's not. There's definitely consensus protocols out there that aren't really properly classified as either longest chain or BFT type.
00:00:59.438 - 00:01:18.602, Speaker A: There are approaches to civil resistance other than proof of work and proof of stake. But still, a majority of the so called layer one blockchain protocols, you can generally fit into one of these four boxes. So, for example, Bitcoin famously uses Nakamoto Consensus, by which I mean longest chain consensus along with proof of work, civil resistance.
00:01:18.602 - 00:01:35.660, Speaker A: Solana is a well known blockchain, which is a proof of stake blockchain, which is more or less a BFT type of consensus protocol. You don't see that many proof of stake, longest chain protocols, but you do see some. And like Cardano would be a well known example of something that occupies the lower left cell.
00:01:35.660 - 00:02:03.342, Speaker A: And I'm actually unaware of any blockchain protocol in production which occupies the upper right cell, which couples proof of work, civil resistance with BFT type consensus. So in this video, in the 6th video, I want to actually state for you a kind of formal impossibility result, which explains why it's probably not a good idea to try to mix and match proof of work with BFT type consensus. So that's the first question we want to address.
00:02:03.342 - 00:02:22.470, Speaker A: Could it ever be sensible to mix proof of work and BFT type consensus? The impossibility result we'll talk about in this video actually sheds light also on a second question, which is basically, can we improve longest chain consensus? So we get nontrivial consistency guarantees even in the partially synchronous setting.
00:02:23.530 - 00:02:25.158, Speaker B: So just a brief reminder at the.
00:02:25.164 - 00:02:50.346, Speaker A: Partially synchronous setting, that was that sweet spot model that we talked about in lecture number six, where basically you do allow attacks like denial of service attacks or network outages of unbounded but finite duration. So that's the model where we have the Global Stabilization time before GST, all bets are off about message delivery. After GST, it behaves like the synchronous model with all messages arriving within capital delta time units.
00:02:50.378 - 00:02:53.646, Speaker B: For some known parameter capital delta, the.
00:02:53.668 - 00:03:05.570, Speaker A: Parameter GST is unknown. That should be interpreted as the length of the attack or the outage. And again, we're not going to assume any operi bound on how long the attack goes on, but we do assume that it ends eventually.
00:03:06.390 - 00:03:08.366, Speaker B: Now the tenderman protocol, which we discovered.
00:03:08.398 - 00:03:20.226, Speaker A: And talked about in lecture number seven, one of its claims to fame is that it actually retains consistency. So nodes keep staying in sync even when you're under attack. So even in the partially synchronous setting.
00:03:20.258 - 00:03:23.606, Speaker B: Even before the Global Stabilization time, you.
00:03:23.628 - 00:03:47.466, Speaker A: Might recall that's why we were sort of bothering with sort of two stages of voting and sort of quorum certificates with a supermajority of agreeing votes from each of the two stages. That's what gave us that consistency property even when we're under attack for the tendermint protocol in lecture number seven. Now, for longest chain consensus, on the other hand, you might remember we wrapped up lecture number eight by pointing out that longest chain consensus does not enjoy consistency in the partially synchronous setting.
00:03:47.466 - 00:03:57.038, Speaker A: Attacks and network outages can really mess up consistency for longest chain consensus. So remember, the intuition for this was actually quite simple. You just think about a network partition.
00:03:57.038 - 00:04:12.898, Speaker A: So in our minds we just imagine separate the nodes running the protocol into one group A and one group B. And then we assume that the network just delays messages between A and B for some unknown period of time. So messages amongst the nodes of A, they all sort of arrive promptly.
00:04:12.898 - 00:04:36.014, Speaker A: Same thing with the messages within the nodes in B, but anything across the groups that's delayed for a long period of time. And so if you have a network partition like that, if you're running longest chain consensus, basically the nodes in A will just grow their own longest chain, the nodes of B will grow their own longest chain. And if that happens for a long enough period, those chains will even exceed in length the security parameter k.
00:04:36.014 - 00:04:44.130, Speaker A: And at that point the nodes in A and the nodes in B will have different opinions about which are bidden blocks that have been finalized so far. And that's a violation of consistency.
00:04:44.950 - 00:04:46.354, Speaker B: So we've proven a lot of nice.
00:04:46.392 - 00:05:04.870, Speaker A: Guarantees about longest chain consensus by this point. But let me remind you all of those guarantees are for the synchronous model, they are not for the partially synchronous model. And we saw sort of by a concrete example that actually longest chain consensus, at least as we've studied it thus far, does not have nice properties in the partially synchronous model.
00:05:04.870 - 00:05:35.390, Speaker A: Now, as a researcher or an engineer, you always want to keep doing better, right? So it's like great, we have longest chain consensus it's great we have these guarantees in the synchronous model. But you got to wonder, maybe we could tweak the protocol, right? Maybe add just like a little bit of extra complexity so that in addition to all of the nice guarantees we get in the synchronous model, maybe we can also get, for example, consistency in the partially synchronous model. So the impossibility result, which I'll state next, basically answers both of these questions in the negative.
00:05:35.390 - 00:05:50.680, Speaker A: It is generally not sensible to combine proof of work with DfT type consensus. And there's no sort of obvious way to modify Nakamoto Consensus. So proof of work civil resistance along with longest chain consensus in order to get nontrivial guarantees in the partially synchronous model.
00:05:50.680 - 00:06:36.144, Speaker A: All right, so the formal statement, and maybe this was to some extent folklore, but as far as stating and proving it formally, you can find that in a paper of mine along with Andrew Lewis Pi from 2020 called Resource Pools and the Cap Theorem. And the formal statement says that if you're talking about a proof of work blockchain, so if you're using proof of work civil resistance, then you have to choose between either having liveness in the synchronous setting or consistency in the partially synchronous setting. You cannot have both.
00:06:36.144 - 00:07:08.196, Speaker A: And in fact, this impossibility result holds even in the event that none of the nodes are Byzantine, that all of the nodes are honest. So it's constructive to interpret those two cells from that two by two matrix, the two proof of work cells in the context of this theorem. So if we think about Nakamoto Consensus as we've studied it, so longest chain consensus plus proof of work sybil resistance, that does satisfy one that satisfies one kind of even in the synchronous setting, even with up to 49% of the hash rate being Byzantine.
00:07:08.196 - 00:07:29.116, Speaker A: So it certainly satisfies liveness when delta equals zero and you have no Byzantine hash rate. And so this theorem then says it is then a foregone conclusion that Nakamoto Consensus will not satisfy consistency in the partially synchronous setting. Now, it's very easy to observe directly that longest chain consensus and proof of work simple resistance wasn't consistent in the partially synchronous setting.
00:07:29.116 - 00:07:50.180, Speaker A: We sort of didn't need this theorem to observe that. But this theorem really says it's something fundamental that is driving that weakness of Bitcoin and other protocols that use Nakamoto Consensus. It is an inevitable byproduct of having sort of liveness guarantees in the synchronous setting and being proof of work that inevitably forces you to give up on consistency in the partially synchronous setting.
00:07:50.180 - 00:08:12.016, Speaker A: Suppose, on the other hand, we tried to couple proof of work civil resistance with BFT type consensus. I'm not going to sort of go into a lot of detail about what this might mean, but intuitively. So for longest chain consensus, we needed to choose one leader in each round.
00:08:12.016 - 00:08:34.744, Speaker A: And so we used this sort of proof of work lottery to do that if we want to run BFT type consensus, we might want to choose a committee of nodes. So maybe one leader to propose the block and then another, I don't know, 100 nodes to contribute the voting. But you can imagine using these same hard puzzles, using these same lotteries to choose not just on average one node per round, but on average say 100 nodes per round.
00:08:34.744 - 00:08:45.420, Speaker A: And then whoever the 100 nodes that happen to solve a hard puzzle in a given period of time, they are the ones tasked with carrying out something like the tendermint protocol.
00:08:46.160 - 00:08:48.176, Speaker B: Now, it's totally possible in principle to.
00:08:48.198 - 00:09:08.512, Speaker A: Build a blockchain protocol that works exactly like that. In fact, in lecture number twelve we'll talk about blockchain protocols that do work exactly like that, except with the proof of work kind of method of selecting a random committee replaced by a proof of stake based method. And if you did build a blockchain protocol like that, if you did it properly, you would wind up getting the second of these guarantees.
00:09:08.512 - 00:09:22.780, Speaker A: So you would inherit Tendermint's guarantee that you have consistency in the partially synchronous setting. You can think of this almost as sort of like a reduction from permissionless consensus to permissioned consensus and extending Tendermint's guarantees to the permissionless setting.
00:09:23.440 - 00:09:25.116, Speaker B: But so if you do that, or.
00:09:25.138 - 00:09:40.800, Speaker A: For that matter, if you build any other proof of work blockchain that for any reason happens to satisfy consistency in the partially synchronous setting, this theorem tells you you must necessarily be giving up on liveness even in the synchronous setting.
00:09:41.860 - 00:09:43.312, Speaker B: And if you think about it, that.
00:09:43.366 - 00:10:02.440, Speaker A: Seems like kind of a deal breaker, right? Like why would you ever deploy a blockchain protocol where you can't even guarantee liveness even when the communication network is operating well? So I would speculate that's why I've never seen a blockchain protocol that combines proof of work along with BFT type consensus.
00:10:03.500 - 00:10:04.904, Speaker B: I do want to emphasize that this.
00:10:04.942 - 00:10:22.012, Speaker A: Theorem is specifically for proof of work blockchains. And in lecture number twelve, when we talk about proof of stake blockchains, we will see examples of where you can get these properties one and two simultaneously. Arguably those proof of stake blockchains are a little less permissionless than the proof of work blockchains we're talking about right now.
00:10:22.012 - 00:10:29.680, Speaker A: But in exchange for sort of needing to some degree some amount of registration by nodes, you are able to get sort of both of these properties.
00:10:30.500 - 00:10:32.384, Speaker B: So let's talk about why this theorem is true.
00:10:32.422 - 00:10:54.840, Speaker A: And in particular you might be sort of surprised that this could be true even when you have nodes no Byzantine hash rate at all. That seems kind of crazy, but we are going to use the fact that the amount of hash rate in the system may vary over time. So the one sentence summary of why this theorem is true is that in a proof of work blockchain you cannot distinguish between waning hash power and delayed messages.
00:10:54.840 - 00:11:09.864, Speaker A: And notice both of these two obstacles are present. Even if all of the hash rate is honest, right, hash rate may sort of go up and go down whether or not you have any Byzantine hash rate or not. And messages may get delayed, right, if you just have sort of a trouble with your communication network.
00:11:09.864 - 00:11:12.620, Speaker A: Again, whether or not any of the nodes are Byzantine.
00:11:13.520 - 00:11:14.776, Speaker B: To be a little bit more precise.
00:11:14.808 - 00:11:45.208, Speaker A: About this, zoom in on some honest Node I and imagine at some period of time it just literally stops hearing about any new blocks from any of the other nodes in the system. One possible explanation for why Node I is no longer hearing about new blocks is maybe all of the other hash rate disappeared, maybe all of the other nodes just sort of turned off their machines. On the other hand, maybe there's tons of other nodes sort of happily humming along, but maybe we happen to be in the partially synchronous model prior to Global Stabilization Time.
00:11:45.208 - 00:12:04.880, Speaker A: And just all of those other honest nodes have been trying to inform Node I about the blocks they've created, but those messages just haven't arrived yet. And now you really got to pity poor Node I, because Node I is really in a Catch 22. Damned if it does, damned if it doesn't.
00:12:04.880 - 00:12:26.930, Speaker A: Node I has to decide whether or not it's going to keep finalizing new blocks or not. Either it just stops or it keeps going. So suppose Node I is a little bit aggressive and it's like, well, for all I know, I'm the only person capable of producing blocks, so I guess I better keep producing and finalizing blocks.
00:12:30.470 - 00:12:32.306, Speaker B: The problem, of course, maybe Node I.
00:12:32.328 - 00:12:46.390, Speaker A: Guessed wrong and actually the reason it hadn't heard anything is because other honest nodes messages are delayed. And so those other honest nodes are also sort of finalizing their own blocks. And that means we're getting a consistency violation in the partially synchronous setting.
00:12:46.390 - 00:12:57.580, Speaker A: And you have to concede the only other option for Node I is to really never finalize any blocks, to just keep waiting, you know, hoping for some sort of future Global Stabilization Time.
00:12:58.270 - 00:12:59.914, Speaker B: The problem, of course, is, you know.
00:12:59.952 - 00:13:13.870, Speaker A: Maybe we're not in the partially synchronous setting, maybe we're even in the synchronous setting, even with delta equals zero, but all of the other nodes turned off their computers. So Node I is actually literally the only one capable of finalizing any new blocks. So if it's not doing it, nobody's doing it.
00:13:13.870 - 00:13:17.620, Speaker A: And so that's a loss of liveness, that's a violation of property one.
00:13:18.630 - 00:13:19.058, Speaker B: All right?
00:13:19.064 - 00:13:49.366, Speaker A: So that completes the proof. And again, just sort of the one sentence to remember is why fundamentally with proof of work blockchains, do you have to make this kind of stark choice between sort of a very basic liveness condition and consistency in the partially synchronous model? It's because in a proof of work setting, nodes cannot distinguish between the scenario where the hash rate is waning versus the scenario where messages are being delayed by long periods of time. So this theorem, I hope it strikes you as sort of rather basic.
00:13:49.366 - 00:14:18.654, Speaker A: And so you're probably wondering, why wouldn't this just hold generally for permissionless consensus? Like, why is this specifically about proof of work blockchains? And in fact, proof of stake blockchains that we'll talk about in lecture number twelve can evade this impossibility result. We'll get more into it kind of when we get to lecture twelve. But just in case you're wondering, right now, fundamentally, with a proof of stake blockchain, it's no longer true that honest nodes can't differentiate between sort of waning power by other nodes and delayed messages.
00:14:18.654 - 00:14:35.814, Speaker A: And the reason is that sort of the amount of stake everybody has is just recorded on the blockchain itself. So by virtue of nodes sort of keeping track of the blockchain, they are also keeping track of exactly how much power the other nodes have. So if all of the other nodes suddenly have no power, an honest node is going to be able to see that just from the record on the blockchain.
00:14:35.814 - 00:14:45.462, Speaker A: Whereas in a proof of work setting, if other nodes turn off their machines, you have no idea. So the blockchain state remains exactly the same. Other nodes have sort of disappeared.
00:14:45.462 - 00:15:03.920, Speaker A: You have no way of knowing whether or not that has in fact happened, whereas with proof of stake blockchains, you can immediately tell whether or not that has in fact happened. So that's why this proof as is does not hold for the proof of stake case. And as we'll see in lecture number twelve, actually, there do exist proof of stake blockchains that get both of these properties one and two.
00:15:03.920 - 00:15:17.922, Speaker A: All right, so we're almost done with lecture number nine. The one remaining order of business is a very short video where we're just going to sort of give you an orientation over the next four of what the next four lectures are going to be about, lectures ten through 13.
00:15:17.986 - 00:15:19.730, Speaker B: So I'll see you there. Bye.
