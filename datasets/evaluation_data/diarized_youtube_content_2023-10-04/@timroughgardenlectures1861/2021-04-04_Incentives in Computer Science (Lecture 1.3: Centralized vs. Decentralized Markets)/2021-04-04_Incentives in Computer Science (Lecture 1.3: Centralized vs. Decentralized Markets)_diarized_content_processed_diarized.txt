00:00:00.570 - 00:00:50.152, Speaker A: Now that we have a bunch of examples of markets enabled by technology in our mind, let's spend a little time comparing and contrasting them. And there's a number of different dimensions along which we could do this. In the interest of brevity, I'm just going to pick one which is going to look at which markets are more decentralized and which ones are more centralized. So what do I mean by that? By a centralized market, I mean one in which the trans actions are dictated to the participants by either a third party or by the owner of that market itself. So some of the markets in the former Soviet Union would be extreme examples of this idea. In a decentralized market, on the other hand, the participants are free to transact directly. So one probably familiar example would be college admissions.
00:00:50.152 - 00:01:21.524, Speaker A: In the United States, that's completely decentralized, right? As an applicant, you can apply to whatever colleges you want. No one's telling you which colleges you can and can't apply to. Similarly, from the perspective of the colleges, they can accept any students that they want. They're also free to decide. It's worth noting that actually in a lot of countries other than the United States, college admissions is not decentralized. It's not like college admissions is somehow fundamentally a decentralized activity. That's merely how the United States has chosen to implement college admissions.
00:01:21.524 - 00:02:07.348, Speaker A: In many countries there's a national entrance exam and based on that, maybe some preferences that have been submitted by students and or colleges. A centralized algorithm will in a single shot figure out who gets to go where. You do not have this direct transactions between applicants and colleges. Incidentally, I'm using the word decentralized here. In these days, at least among computer scientists, when you use the word decentralized, people are often talking about blockchain, which we will talk about in the last module, but that's not what we're talking about now. So when I'm using the term decentralization here, I mean it in the older economic sense of the word as the antithesis of a centralized economy. So for example, one would call a capitalist economy like that of the US.
00:02:07.348 - 00:03:10.700, Speaker A: A primarily decentralized market. So how about all of the examples that we went through in the previous video? Which of those markets are centralized and which are decentralized? And let me give you a few seconds to think about that. Well, so for example, Amazon, that's decentralized, right? So sellers can show up and sort of pick whatever it is they want to sell and the buyers can show up and just buy whatever it is they want to buy. Amazon doesn't tell, you know, you must buy this thing from this particular seller. Similarly for most of the other examples, one actually big and interesting exception, which are the ridesharing platform. So Uber and Lyft, if you think about it, those are centralized markets, right? Both Uber and Lyft, I mean, they manage a market with drivers on one side of the market and riders on the other side of the market. But every single match of a rider with a driver, that is centrally dictated by the platform.
00:03:10.700 - 00:04:14.576, Speaker A: I mean, drivers can to some extent pick which ride assignments to accept, but as a rider, you have to accept the driver assigned to you, or else you face a cancellation penalty. And in fact, once you sort of think about these markets, you compare and contrast Uber and Lyft with Amazon. On Amazon, of course, you need a reputation system because you're trying to pick which seller to buy from, and you want a seller that doesn't have a history of ripping other people off. And so of course, in a decentralized market like Amazon, you want to have a reputation system. But if Uber and Lyft are centralized, why do they even bother with reputation system? So why does Uber show you the rating of your driver? It's not like you're allowed to use it in choosing whom to transact with, the way you could in an Amazon or an Airbnb or know, okay, so presumably what's going on is that Uber is collecting the driver ratings anyways for the very important goal of identifying poor drivers so that they can fire them. So they're already collecting ratings on how good the drivers are. And then at that point, they probably figured, why not just pass them on to the riders? Maybe when you find out your driver is a 4.9,
00:04:14.576 - 00:05:07.780, Speaker A: you feel a little bit better about being forced to accept them as your driver for that trip. So I've been talking about centralized and decentralized markets as if there's some very clean dichotomy between the two. But reality is often somewhere in between. Even a seemingly highly decentralized market like Amazon, the platform still influences the transactions you engage in via its centralized search functionality and user interface. And more generally, an off huge middle ground between the two extremes is for a third party like the platform to recommend several transactions to participants, perhaps based on the data it has about them. But the participants remain free to pick any of the recommended transactions or none of them. So Uber and Lyft, that would be the extreme case where exactly one transaction is recommended, and moreover, you're not allowed to engage in any other transaction.
00:05:07.780 - 00:06:10.436, Speaker A: So recommendations are one way to take what's really a decentralized system and add some centralized interventions and centralized recommendations for possible transactions. I want to talk more about a second way you can interpolate between the extreme points of decentralization and centralization, which is to batch in a decentralized market to batch subsets of transactions for centralized processing. So let's look at a couple different examples of that. So for the first example, let's talk about Uber yet again, and let's talk about the algorithm that they're using under the hood to match riders with drivers. So there's a bunch of drivers who are empty there's a bunch of riders who aren't rides. How do you choose which rider gets which driver? Well, up until 2017, Uber kind of did it in the obvious way, which is if there were, say, a new rider shows up, you would just look at the empty drivers nearby and you would just match that new rider with whichever of the drivers was closest to that rider. That would be a match.
00:06:10.436 - 00:06:41.884, Speaker A: That rider would go away. A new rider shows up, they get matched to the remaining free driver that's closest to them, and so on. So you just keep matching riders with the nearest drivers over and over again. Now, that should sound like a totally reasonable way to do it. And indeed, when you're first getting the system off the ground, as Uber was early last decade, that was a natural place to get started. But as they grew and they got more mature, they wondered if they could do something smarter. And indeed, there is something smarter you can do, which is to do some batching.
00:06:41.884 - 00:07:22.248, Speaker A: So this is easiest to understand through an example. So in the upper left part of this slide, let me show you why you might want to batch driver rider matches rather than do them in a greedy fashion, one by one. So suppose the first thing that happens is a driver D One shows up in the southeastern part of the city, and then the next thing that happens is a rider who wants a ride shows up in the northwest corner of the same neighborhood. Now, there's only one driver and one rider. So there's only one way to match that rider to that driver. So that's what's going to happen. R One will be picked up by driver D One and taken to their destination.
00:07:22.248 - 00:08:06.236, Speaker A: But now imagine that immediately after that match has been made, imagine a second driver D Two shows up in the southwestern part of the neighborhood. And then immediately after that, a rider, a second rider in the northeastern part of the neighborhood shows up. At this point, because R One and D One have already matched, right? Driver D One is already on its way to pick up R One. There's no choice but to match D two and R two. So driver D Two is going to be responsible for going and picking up rider R Two. So that would be the matching that you would get under the original greedy matching algorithm used prior to 2017. D one would go with R.
00:08:06.236 - 00:09:00.268, Speaker A: One and D Two would go with R Two. But if you take this figure literally as drawn to scale, you'll notice that actually there's sort of a better matching in the sense that it would have been less waiting time overall, which is we'd like to match R One with D Two. So the rider and driver on the west side of the neighborhood and then similarly R Two with D One. That would be a superior matching of the two riders with the two drivers. So the idea of matching is that when a request comes in, so say like, say R One and D One both show up, you don't immediately match them. You wait 10 seconds, you see what other requests come in, what other riders, and whatever other drivers show up. And then in that ten second period, whatever riders and drivers you have, you figure out the best way of matching riders to drivers, where best means presumably something like you minimize the average waiting time to be picked up.
00:09:00.268 - 00:09:38.360, Speaker A: So in this example, greedy routing would have given the two diagonals, the two dotted light blue diagonals. That would have been the matching. Whereas if you had waited for R two and D two to show up, at that point in the centralized batch transaction, you could have matched R One with D two and R two with D one. That's the green matching, and that would have been better. So I should say this batch processing that I've been discussing with this ten second window, that's for Uber X. So that's when it's just one rider per driver, there's also Uber pool, where multiple riders are assigned to the same driver. And that's obviously a more complicated matching problem.
00:09:38.360 - 00:10:16.132, Speaker A: You have to figure out which passengers are sort of compatible and where they're coming from and where they're going. So to reflect the difficulty of finding kind of a good match in Uber pool, you have to wait quite a bit longer than 10 seconds. It's more like 90 to 120 seconds. You're going to wait. And then in that longer window, again, there's going to be some batched processing which tries to find the best match of passengers to riders in the various carpools. So that's a concrete example of what I mean by processing transactions in batches as opposed to one by one in a way that gives you a better outcome. And it's a very real world example.
00:10:16.132 - 00:11:05.680, Speaker A: If you bring up Uber on your phone right now and request a ride, you literally will be matched to a driver using this matching algorithm. And in mean, for those of you that go on to sort of a reasonably deep study of algorithms, at some point you'll learn about a problem called bipartite matching, which is a problem in graphs or in networks, and you'll learn efficient algorithms for computing bipartite matchings. And those are exactly the algorithms that are being used in this application. It's a really nice real world application of one of the classic algorithms that those of you that study computer science or operations research will learn about. I do want to talk about a second example of batch transactions. This time it'll be something which is just proposal. It's not something that's literally implemented, at least not yet, but it's in a very different, very intriguing application domain, namely the New York Stock Exchange.
00:11:05.680 - 00:11:06.530, Speaker A: That's coming up next.
