00:00:00.570 - 00:00:24.950, Speaker A: So what have we learned so far in this module? Well, we learned about the Prisoner's Dilemma, which starkly illustrates the tension between, on the one hand, incentives facing individuals and the collective good. And we've argued that the prisoner's dilemma is really out there in the real world. It's easy to spot examples of it and indeed, if two players do not have repeated interactions, if it's a one shot interaction, the incentives to defect are really quite strong.
00:00:24.950 - 00:00:36.134, Speaker A: Wrong. And you really do see this in real applications. On the other hand, things change some when you have a repeated prisoner's dilemma type situation, when two parties are going to interact many times over a period of time.
00:00:36.134 - 00:01:15.558, Speaker A: Because in the repeated setting a player has the opportunity to reward the other to sort of condition its behavior on the past, actions by the other player, rewarding that player if they've cooperated in the past, retaliating against that player if they've defected in the past. And so for that reason, very natural strategies like tit for tat show that cooperation naturally emerges in the repeated prisoner's dilemma. So to conclude the module, I want to ask the question does this help us with any kind of engineering goals? So are there any kind of systems where the lessons we've learned from studying the Prisoner's Dilemma apply? And of course, I wouldn't have told you all this stuff in this module unless the answer was yes.
00:01:15.558 - 00:01:38.326, Speaker A: So let's see how these lessons learned are part of a peer to peer file distribution system known as BitTorrent. The problem solved by BitTorrent is that of the distribution of very large files. Now, of course, sometimes to get a really large file, you just go to some big company with some big centralized server and you just download it from the server.
00:01:38.326 - 00:01:55.054, Speaker A: BitTorrent is a peer to peer based solution for file distribution. So there's not going to be some centralized server that everybody downloads from, rather just commodity machines will be helping each other acquire this file. BitTorrent is the dominant paradigm in peer to peer file distribution.
00:01:55.054 - 00:02:16.582, Speaker A: So just to give you a sort of outdated number, in 2013, roughly 80% of peer to peer file sharing traffic happened via the BitTorrent client. And so for example, if you downloaded one of the recent versions of Linux, you might well have used BitTorrent to do that. In the interests of Brevity, I'm not going to tell you all the details about how BitTorrent works.
00:02:16.582 - 00:02:43.722, Speaker A: If you want to know more, you can see the lecture notes available from my homepage. But I want to tell you about sort of the key design decision in BitTorrent, which really sort of takes inspiration from the tit for tat strategy for the repeated Prisoners dilemma. So the most important design decision in BitTorrent for our purposes was the decision to think not about this big file by itself like this ten gigabit file, but rather to think of it at a finer level of granularity.
00:02:43.722 - 00:03:09.106, Speaker A: So to take something like a ten gigabit file and break it into a bunch of pieces, let's say like 1000 pieces, each of which is only ten megabyte megabytes. And so rather than users transacting with each other, passing around the whole ten gigabyte file, they're only going to be exchanging ten megabyte pieces. So there's multiple reasons you might want to do this break a big file into small pieces, like the more efficient use of the network capacity.
00:03:09.106 - 00:03:46.642, Speaker A: But what's interesting for us is that it really changes the incentives. So if you thought about things just at the level of a file itself, then we basically have that single shot Prisoners Dilemma set up from the very beginning of this module with its very strong incentives to defect. Whereas if you break the file into lots of pieces and you need to get lots of pieces from your other peers, now all of a sudden it more resembles a repeated Prisoner's Dilemma like situation, right? Because to get the file you're going to have to get these thousand pieces, which is going to happen over the course of minutes or maybe even an hour or two, giving you the opportunity to monitor what your peers are doing.
00:03:46.642 - 00:04:16.902, Speaker A: Are they being helpful in letting you download pieces of the file from them and then allowing you to respond in kind, either rewarding or punishing them, depending on whether they've been helpful or not in the past. So that's the design decision that gives file transfer in BitTorrent a repeated Prisoner's Dilemma like character. To tell you how tit for tat shows up, let me tell you a little bit about the reference client.
00:04:16.902 - 00:04:37.250, Speaker A: So you can write your own BitTorrent client if you want, but if you just sort of download the standard one, this is how it works. So there is a bootstrapping process which you need to get right, which I'm not going to explain here, but it is covered in the lecture notes. So instead I want you to think about fast forwarding to kind of midway through this process of a bunch of different peers exchanging these pieces of one big file with each other.
00:04:37.250 - 00:05:00.138, Speaker A: So at this point, imagine that you and each of your peers, you've got some, but not all of the pieces. So of the thousand pieces, you have maybe 170 of them, your peer over here has 273 of them and maybe partially overlapping, partially different set of pieces and so on. And again, if people are using sort of the default client or other sort of typical clients, the peers are broadcasting which pieces of the file they have.
00:05:00.138 - 00:05:11.086, Speaker A: So you know what you've got and you know who has what you need. And now the client is responsible for doing two things. So first of all, it should be trying to get pieces of the file it doesn't have yet.
00:05:11.086 - 00:05:29.502, Speaker A: So downloading pieces from other peers who have them and on the other hand also uploading. So when it's getting requests for pieces that this peer already has, those should be getting uploaded to peers who ask for it as much as possible for the downloading in the reference client. It's quite aggressive.
00:05:29.502 - 00:05:43.238, Speaker A: So again, everybody's sort of broadcasting which file pieces they have. So you know who has pieces that you need and you just ask everybody with pieces that you want to give them to you. They may or may not give them to you, depending on their available bandwidth and other things.
00:05:43.238 - 00:06:05.950, Speaker A: But you're going to say, hey, it would be great if you could give me piece number 875. I'd really appreciate it. On the other hand, what about uploading? And so this is really so you maybe are getting download requests from all kinds of peers of yours, and you only have a limited amount of upload capacity, so you need to figure out how to spend that upload capacity.
00:06:05.950 - 00:06:15.414, Speaker A: So in the reference client, what you do is out of all of the peers that are sort of requesting file pieces from you, you choose a small number. So it's a configurable parameter. I'm going to call it s.
00:06:15.414 - 00:06:50.580, Speaker A: You might want to think of s as four being a typical example. So there still remains the question, if 20 of your peers are requesting file pieces from you, and you're only going to pick four that you're actually going to bother to upload to, how do you pick those four out of the 20? And this is where BitTorrent relies directly on the inspiration for Tip for Tat. So you choose the four of those 20 peers who have been nicest to you in the recent past, who have uploaded, who have let you download the most amount of file pieces.
00:06:50.580 - 00:07:21.244, Speaker A: So that's how the repeated prisoners dilemma and specifically the tit for tat strategy, show up in peer to peer file distribution, specifically in BitTorrent. And just to be clear, tit for tat? I'm not using it merely as a metaphor. If you look at what the creator of BitTorrent, computer scientist named Bram Cohen, and he also wrote this default client, if you read his research paper about the creation of BitTorrent, he literally says he was inspired by the prisoner's dilemma and the tit for tat strategy.
00:07:21.244 - 00:07:35.468, Speaker A: So this game theory from sort of the mid 20th century really did directly inform this sort of really impactful peer to peer file distribution system. Very cool. So that concludes what I wanted to say about the prisoner's dilemma.
00:07:35.468 - 00:07:46.820, Speaker A: Next, I want to move on to module number three, where we'll talk about the challenges of asymmetric information and specifically adverse selection and moral hazard. I'll see you there. Bye.
