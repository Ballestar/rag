00:00:00.490 - 00:00:49.626, Speaker A: On the last slide, we learned how bitcoin mining works. And so the mental model you should have in mind is you have all these different miners and they're constantly trying these different nonces, trying to construct a block which is eligible in the sense that when you apply a cryptographic hash function to it. Shot 256, you get a bunch of zeros in a row, say, roughly 80 zeros in a row at the beginning. So miners just keep trying nonces over and over and over again until eventually somebody gets lucky, has an eligible block, and that's what gets added to the blockchain. We also saw, where does that number 80 come from? That's calibrated as a function of the current amount of computational power that miners collectively have. And that's automatically tuned so that you expect to see a new block roughly every ten minutes on average. Now, it's random, right? Sometimes it'll be more than ten minutes, and sometimes it'll be less than ten minutes.
00:00:49.626 - 00:01:43.440, Speaker A: And in fact, sometimes it'll just so happen that two different miners wind up coming up with an eligible block and possibly different eligible blocks, possibly blocks containing, say, different sets of transactions. Two different miners will basically have a tie. So they'll each come up with an eligible block just a few seconds apart, which means that they'll both broadcast it out to the peer to peer network, and then miners will hear about these two conflicting blocks. So that's something that is known as a fork. So, for example, imagine the end of the blockchain concludes with, say, there's a block, b one, and then there's a block b two at the very end of the blockchain. And maybe two different miners come up with different eligible blocks, a B three and a B four, that come up with them at roughly the same time. And so both of those miners then put in their block, they reference the previous block that they both knew about, b two.
00:01:43.440 - 00:02:15.222, Speaker A: This is a problem, right? This is now, there's ambiguity in the blockchain. It's not clear what the end of the blockchain is. Now it's not clear whether it's b three or whether it's b four. It's not clear which of these transactions should be viewed as authorized. Whether we view b three as authorized or b four as authorized. Notice it's good chance that we can't just authorize everything in b three and b four because there might be conflicting transactions. So, for example, coins might get spent one way in b three, and those same coins might get spent a different way in b four.
00:02:15.222 - 00:03:13.250, Speaker A: So that would be an incompatibility that really forces us to choose only one of b three or b four as the transactions to be authorized. And then, of course, another reason we have to resolve this ambiguity is because later miners need to figure out what they should be extending. So if I'm a minor and I'm trying to come up with a new eligible block b five. Remember, part of my block, I have to reference a previous block, and there's ambiguity about whether I should be referencing block B three or B four. So when there's a fork like this, two different blocks that point to the same preceding block, the protocol needs to specify a way to break this tie to figure out which one you should regard as the correct extension, the correct blockchain. Satoshi Nakamoto anticipated that there would be forks, and it's written in the Bitcoin protocol how you're supposed to deal with them. Namely that you're supposed to regard the longest chain of blocks as the valid transactions, as the authorized transactions.
00:03:13.250 - 00:03:52.406, Speaker A: Now, if there's a know like we have at the moment in this figure, then you're supposed to break ties according to whichever block you heard about first. So if you heard about b three over the peer to peer network before b four, you as a miner would then try to extend b three. Totally possible that some other minor heard about b four before b three, and then that minor would be trying to extend B four. So that means there is temporarily still ambiguity about where the end of the blockchain is. Some miners are trying to extend B three. Some miners are trying to extend B four depending on which one they heard about first. But at some point, some minor will succeed in finding an eligible block, some b five.
00:03:52.406 - 00:05:12.898, Speaker A: And that particular minor will have made a choice whether to extend b three or b four. In the picture, let's say that they choose to extend B three, and then once that extension happens, the ambiguity is resolved because now there's a unique longest chain and all miners know that they should now be trying to extend block B five. It is of course possible that one minor finds a block B five extending b three at roughly the same time that some other minor finds a block b six extending b four, which would perpetuate the tie. But that's pretty unlikely, right? So very quickly, some minor will find a block extending one of the two equally long chains, well separated from anyone else finding any blocks. And at that point the tie is broken, the ambiguity is resolved, and all of the miners are supposed to just try to extend the longest chain. One thing to notice is that when a fork gets resolved in this way so, for example, if a minor extends B three before any minor extends B four, it's certainly a bummer for anyone with an investment in block. B four.
00:05:12.898 - 00:05:42.966, Speaker A: Because once b three is extended by b five and b four is no longer on the longest chain. At that point, b four is what is called orphaned. And so in fact, none of those transactions count. None of those transactions count as authorized. Of course, they can be authorized later in another block, or maybe some of them are already authorized in b five. But in addition, the creator of the block does not reap any of the rewards that we discussed. So it doesn't get the transaction fees from these transactions because the transactions aren't actually authorized.
00:05:42.966 - 00:06:19.722, Speaker A: And it also does not get that 6.25 bitcoins. It doesn't get the block reward either, because the block wound up not on the longest chain. Now, one little difference between bitcoin and ethereum, which is the sort of second most well known blockchain, is that ethereum actually does give some rewards for orphans. But in bitcoin, you don't. So if your block is orphaned, you get nothing, no reward for all of the work you put in to putting it together. If you think about it this way, that bitcoin works, where you have these forks sort of show up and then they get resolved and blocks get orphaned and the transactions and orphan blocks don't count.
00:06:19.722 - 00:06:56.158, Speaker A: That does have implications for how you should use bitcoin, right? So suppose you're selling something, maybe even something expensive. You're selling like a car to somebody and they're paying you with a bitcoin transaction, right? So they say, okay, look, here's the bitcoin transaction. There it is in the peer to peer network. Oh, look, it got added to the blockchain. It's in some block like block before. So we're good, you've received the payment, now you can ship me the car. Well, actually, if you're the seller, you don't want to ship the car the very second that the bitcoin transaction gets added to the blockchain.
00:06:56.158 - 00:07:52.466, Speaker A: Because if that transaction is in one of these blocks before, that then winds up getting orphaned, well, then all of a sudden you've shipped the car and the transfer of funds from your customer to you is no longer valid. And so it could be the case that the customer gets both the car and gets to keep all of their bitcoin. So that would not be a good thing. So what one does is one waits. So a transaction is considered sort of safe. The funds are considered safely transferred once the transaction is not only added to the blockchain as part of an eligible block, but also after some number of additional blocks have been added on top of that. So, for example, a transaction in b three in this cartoon, if you're feeling very kind of aggressive about it, you could say, oh, well, as soon as b five is on it and b three is definitely on the longest chain, at that point, I'll regard the transaction as finalized and I definitely have those funds.
00:07:52.466 - 00:08:56.976, Speaker A: A more conservative approach would be to wait not just for b five, but also wait for b six to extend b five and then a b seven to extend b six and so on. And in fact, the usual recommendation is to regard a transfer as more or less finalized once it's been extended by six additional blocks. So that's going to take roughly an hour. Because remember, blocks are created on average once every ten minutes. So there's going to be some moment where the transaction gets added to the blockchain, and then assuming there's no funny stuff with forks and orphans, an hour later, it'll be clearly kind of deep into the longest chain. And at that point, you can safely assume that the funds are permanently transferred to you. The point of this slide is that even when all of the miners are following the rules, even when everybody's executing the Bitcoin protocol exactly the way they're intended to be executing it, you will just by chance have these forks and you have to deal with forks.
00:08:56.976 - 00:09:24.750, Speaker A: And then Bitcoin has this longest chain rule for figuring out how to resolve forks. And so that's even assuming that all miners are being honest, namely they're really sort of following the intended behavior prescribed by the Bitcoin protocol. But what we're going to see on the next slide is actually there's also potentially opportunities miners to game the system, so to deviate from what they're supposed to be doing and to create forks on purpose for their own individual game. So we'll talk about that next.
