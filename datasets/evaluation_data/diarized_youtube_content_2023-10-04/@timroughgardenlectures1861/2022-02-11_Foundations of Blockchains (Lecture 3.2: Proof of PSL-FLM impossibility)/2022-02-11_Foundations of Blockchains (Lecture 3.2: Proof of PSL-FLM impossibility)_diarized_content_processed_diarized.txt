00:00:00.330 - 00:00:28.370, Speaker A: Alright, so in this video we'll walk through the proof that Fisher, lynch and Merritt came up with for the impossibility result that we stated in the previous video. So just to remind you briefly we're thinking about the Byzantine broadcast problem, we're thinking about the synchronous model for simplicity we're focusing on deterministic protocols and the proof is going to say that if a third of the nodes are Byzantine tough you can't solve the problem. You can't have a protocol satisfies both validity and agreement.
00:00:28.370 - 00:00:52.106, Speaker A: Now this may bother some of you because it would seem to contradict the guarantees that we proved for the dole of strong protocol for Byzantine broadcast that we proved back in lecture two. And the resolution of this apparent contradiction is that the two theorems operate with slightly different sets of assumptions and that's going to be interesting to understand carefully. We'll talk about it in detail in the next video, the third video of part of lecture three.
00:00:52.106 - 00:01:17.694, Speaker A: But as we go through this proof I encourage you to try to spot a step of the proof that perhaps doesn't apply to the dull of strong protocol. Perhaps because there's some missing assumption and if you want a stronger clue, in fact you don't really have to look any further than the title of lecture three. Now, I need to warn you before we start this proof, the proof is quite slick and so it's probably not an accident that this is not the first proof of this results.
00:01:17.694 - 00:01:34.538, Speaker A: Remember there was this earlier 1980 paper by P. Shashuk and Lamport which had the initial proof which was less slick. And so this is a proof where it feels like it really helps that you know the result is true if you're going to try to back out the slickest possible proof that proves it.
00:01:34.538 - 00:01:51.854, Speaker A: So I don't know that anyone sees this proof and thinks to themselves oh, I could have easily come up with this myself. I don't think people tend to have that reaction and if it seems mysterious as we go through it, that's totally normal. I'm not sure anybody really fully groks this proof the first time that they see it.
00:01:51.854 - 00:02:28.234, Speaker A: So what that means is in this video you should basically just sort of verify the argument line by line. You should just sort of convince yourself that this is indeed a correct proof of that theorem and then really it's going to take, if you're interested to internalize it, sort of understand in a deeper way like why is it true? What is this proof really doing? I encourage you to do that offline, take some time, sort of ruminate on it, internalize it, but in real time as we go through the video, the point is just to sort of check that it is in fact a correct proof of the theorem. So let me remind you that we're going to go through the proof for the case of N equals three and f equals one.
00:02:28.234 - 00:02:40.938, Speaker A: So three nodes at most, one of which is Byzantine. This may seem like a trivial special case to focus on, but actually the general case reduces to this argument. This really is the core reason why the impossibility result holds.
00:02:40.938 - 00:02:56.446, Speaker A: And again, if you're interested, I encourage you as a homework problem to think about what that reduction might look like offline. How do you take this and from it deduce the same impossibility result for any N and F, where F is at least a third as big as N. All right, so the proof, it's basically by contradiction.
00:02:56.446 - 00:03:13.526, Speaker A: So we're going to assume theorem is false, which means we're going to assume that there actually is a deterministic protocol that solves Byzantine broadcast, even in the case of N equals three and F equals one. And then we're going to, starting from that assumption, derive a contradiction. From that, we have to conclude that our initial assumption was false.
00:03:13.526 - 00:03:28.640, Speaker A: And so in fact, theorem is true. In fact, because the existence of such a protocol leads to a contradiction, there must not exist such a protocol. And let's use pi to denote an assumed solution to Byzantine broadcast with N equals three and F equals one.
00:03:28.640 - 00:04:02.860, Speaker A: So generally speaking, what's super challenging about impossibility results like this in computer science is just the richness of the design space and all of the crazy different potential solutions that you have to rule out. And this is true for all of the most famous sort of impossibility results in computer science. Just to go off on a little tangent, just to put this in sort of a broader context, turing in his 1936 paper, when he proved the unsolvability of the Halting problem, he had to show that literally no algorithm worked.
00:04:02.860 - 00:04:17.264, Speaker A: Like, no algorithm, no matter how crazy, ever works. Similarly NP completeness as developed by Cook and Levin. That's a theory that tries to say that you can't do much better than exhaustive search for a range of sort of combinatorial problems.
00:04:17.264 - 00:04:50.908, Speaker A: But actually, we haven't even actually proved that, right? There's this P versus NP conjecture which we think P is not equal to NP, but we've actually never been able to prove that. And the reason we haven't yet proved P not equal to NP is because the space of algorithms is so rich and it's just very difficult to have some argument that works simultaneously all of the possible solutions. So here again, in distributed computing, it's exactly the same issue, right? We're trying to prove that no protocol pi could possibly be a solution, could possibly satisfy validity and agreement, but pi could be like anything, it could be some arbitrary crazy piece of event driven code.
00:04:50.908 - 00:05:16.208, Speaker A: And so how do we have just, like, one argument that we just write down on a few slides which somehow works simultaneously for all possible PiS? That should sound like a fairly intimidating thing to try to do. I guess one sort of trivial thing we can say about Pi is it is designed to work in the N equals three case and we're in the permissioned setting. So that means if you're a node running Pi, basically you're going to know about two IP addresses different than yours.
00:05:16.208 - 00:05:26.328, Speaker A: And these are the two nodes you should be expecting to hear messages from. You're not expecting to hear messages from anyone other than these two IP addresses. And you should also feel free to send messages to those nodes if you want.
00:05:26.328 - 00:05:45.132, Speaker A: So it's kind of a trivial thing we can say about Pi now in the proof. So given that we can't reason about what Pi looks like, what can we do? Well, the one thing we can do in the proof, just generically, no matter what the protocol is, is we can run it. We can say, imagine we deployed this on a node, let's see what happens.
00:05:45.132 - 00:06:01.140, Speaker A: And this is often sort of how arguments how proofs work in computer science, right? You're given an algorithm or a program, it's basically a black box to you. You have sort of no idea how it's implemented, but at least you can sort of run it and see what happens. And that's basically how we'll be using Pi in this proof.
00:06:01.140 - 00:06:15.924, Speaker A: So the idea of simulation sort of taking an arbitrary protocol and just sort of running it and seeing what happens, that's one theme to look out for in this proof. You'll start seeing it really explicitly on the next slide. That's a recurring theme in Impossibility Proofs in distributed computing.
00:06:15.924 - 00:06:31.944, Speaker A: Another recurring theme is the idea of indistinguishability. And so the idea in indistinguishability is we really want to formalize the intuition we had last video when we just talked about the little triangle and why Byzantine broadcast might be difficult. So if you remember we had Alice, Bob and Carol.
00:06:31.944 - 00:06:42.930, Speaker A: We were thinking of Alice as the sender. We were sort of playing the role of Bob, an honest non sender. And we talked about know on the one hand, Alice might be Byzantine, send out conflicting information.
00:06:42.930 - 00:07:16.924, Speaker A: On the other hand, Carol might be the Byzantine one and might try to frame Alice and convince Bob that Alice is Byzantine when in fact it's Carol that's the Byzantine one. So what this is trying to say is that Bob is now in this sort of Catch 22 sort of impossible situation, right? It really sort of based on what it's seen, based on the messages received, can't distinguish between whether Alice is the Byzantine one or whether it's Carol. And conceivably bob's appropriate behavior with respect to validity and agreement is going to depend on which of those two situations is the case.
00:07:16.924 - 00:07:34.732, Speaker A: And this is what makes consensus hard honest nodes find themselves in this Catch 22. They might be in world A, they might be in world B, they can't distinguish which one they're in. And if the sort of requirements demand different behavior of that node in the two different settings, the node stuck, right? It can only do one thing.
00:07:34.732 - 00:07:52.560, Speaker A: So going to be right in one of the worlds, it's going to be wrong in the other world. All right? So that's reasonable intuition, but it still seems tricky to formalize. Like, how do we sort of encode the fact that a node has to sort of behave in the same way in two different worlds that it can't distinguish well, so here's going to be the really clever idea by Fisher, lynch and Merritt.
00:07:52.560 - 00:08:21.970, Speaker A: So it's really sort of this slide is kind of the real creative insight in this proof. Once we've sort of understood what's going on in this slide, the next three slides will finish the proof, but it'll be a little bit more straightforward. So this is really where the cleverness is, is here in the definition of a particular thought experiment, where intuitively, we're actually going to, in effect, make two copies of each of Alice, Bob and Carol as a sort of way of forcing them to participate simultaneously in two worlds that demand different things of them.
00:08:21.970 - 00:08:38.164, Speaker A: So let me tell you about this thought experiment. This thought experiment is going to involve buying a bunch of computers and deploying this protocol Pi on each computer, right? We don't know anything about Pi, but we know it's a protocol that allegedly saws Byzantine Broadcast with three nodes. So we can deploy it on a machine and run it and see what happens.
00:08:38.164 - 00:08:55.960, Speaker A: So that's exactly what we're going to do. So the first thing we do is we buy three computers, A, B and C, alice, Bob and Carol, and we're going to run Pi on each of these three machines and Alice is going to be the sender. So when we set up Pi on the Alice machine, we say you're the sender.
00:08:55.960 - 00:09:01.112, Speaker A: And by the way, your private input is zero. Remember, Byzantine broadcast is a sender. They have a private input.
00:09:01.112 - 00:09:24.832, Speaker A: They're trying to communicate that to the other honest nodes. Now, remember, a node running Pi, so it needs to be told whether it's the sender or not. It needs to be told if it's the sender, what is their private input and also needs to be told, like, what are the other two nodes they're supposed to be talking to? Right? So remember, it includes a list of IP addresses of two other nodes that the node running the protocol Pi should expect to hear from, shouldn't expect to hear from anyone else, just from the two IP addresses baked into the protocol.
00:09:24.832 - 00:09:47.836, Speaker A: And it should also feel free to send messages to both of those machines. So, as you'd expect, right? So when we deploy Pi on A on machine A, we're going to tell Alice about the IP addresses of Bob and Carol. The copy of Pi running on machine A is thinking that it's in sort of a Byzantine Broadcast problem along with the nodes B and C.
00:09:47.836 - 00:10:07.600, Speaker A: Now, the edges I've drawn between these vertices, right? So the edge between the nodes A and B, that just means A nodes, B's, IP address, and vice versa. Same thing, A and C, a nos C's IP address and vice versa. Now, if I was going to honor sort of the intents of Pi, what it's meant to do, I would be drawing another blue line connecting B and C.
00:10:07.600 - 00:10:21.828, Speaker A: So I would tell also B about C's IP address and C about B's IP address. And then we'd really be in the setting which Pi is meant to solve, right? Sort of three nodes all talking to each other, sort of running this protocol Pi. However, that's actually not what I'm going to do.
00:10:21.828 - 00:10:37.724, Speaker A: I'm going to do something very devious. But notice I literally could do this in the real world if you handed me, if you just gave me a URL to download Pi, I literally could do what I'm about to do now, which is I'm going to buy another machine, a fourth machine. Let's call it.
00:10:37.724 - 00:10:39.660, Speaker A: Carol. Prime. C prime.
00:10:39.660 - 00:11:04.534, Speaker A: And rather than telling the copy of Pi on machine B or Bob's machine, rather than telling that copy the IP address of C, I'm going to tell it the IP address of C Prime. From B's perspective, it sees exactly what it's expecting, right? So it has a copy of Pi. There's a list of two IP addresses that it's talking to.
00:11:04.534 - 00:11:12.870, Speaker A: They happen to be the IP addresses of A and C Prime rather than of A. And machine B is none the wiser. It's just running Pi with these two given IP addresses.
00:11:12.870 - 00:11:30.446, Speaker A: And then we're going to play the same trick. We're going to buy a fifth machine, call it B Prime again. We're going to download the protocol Pi, install it on B Prime, and then we're going to tell machine C in addition to ASA IP address, we're going to tell Carol about Bob Prime's IP address.
00:11:30.446 - 00:11:45.730, Speaker A: So machine b prime. Now, a node running Pi is expecting to know about three machines counting itself, and it's expecting exactly one of those three machines to be the sender. Now, I already said that machine A that's going to be running Pi as a sender.
00:11:45.730 - 00:11:58.866, Speaker A: So that means that the two machines A is talking to better be non senders. Otherwise the copy of Pi running on A would be like, this is a bad setup. There's only supposed to be one sender, and you're telling me I'm a sender and this other person's a sender.
00:11:58.866 - 00:12:14.554, Speaker A: So for this to make sense, for Pi to be kind of happy, to be satisfied running on machine A, b and C better both be non senders. And so similarly, we can talk about the copy of Pi running on Bob's machine running on machine B. So here.
00:12:14.554 - 00:12:30.098, Speaker A: Now this copy of Pi knows that it itself is not the sender, right? B is not a sender. It knows that a is a sender, and there's only supposed to be one sender of the three. So the other machine that B can talk to, which the way I've set it up is C prime, that better be a non sender as well.
00:12:30.098 - 00:12:41.634, Speaker A: So otherwise the copy of Pi running at B will be like, this doesn't make sense. There's only supposed to be one sender. So C prime is also going to run protocol Pi honestly as a non sender.
00:12:41.634 - 00:13:08.618, Speaker A: And by the same sort of rationale, B prime better be a non sender, otherwise the copy of P running at machine C would be like, this doesn't work. So now we're going to purchase our 6th and final machine, A prime, and we're going to tell I prime about the IP addresses of B prime and C prime, and conversely, C prime and B prime, we're going to tell them about the IP address of A prime. This proof is sometimes referred to as the hexagon proof for the hexagon argument.
00:13:08.618 - 00:13:19.262, Speaker A: So you can see why. Here's your hexagon. Now, the copies of Pi running at B prime and C prime, right? Again, they're expecting exactly one of the three nodes that they're aware of to be the sender.
00:13:19.262 - 00:13:31.386, Speaker A: C prime and B prime themselves are not senders. The other nodes that they're talking to, B and C, are also not senders. So the third node they're talking to, which for both of them is node A prime, that better be a sender.
00:13:31.386 - 00:13:50.300, Speaker A: And to complete the thought experiment, we're going to run Pi at A prime like it's an honest sender with the input one. Remember, A is running Pi honestly as a sender with input zero. A prime will be running the protocol honestly with the opposite input one.
00:13:50.300 - 00:14:02.138, Speaker A: So that concludes the description of the thought experiment. And really, the only thing I want you to agree with me on this slide is that this thought experiment is well defined. Literally.
00:14:02.138 - 00:14:25.206, Speaker A: Given a URL from which to download Pi, you could simply in the physical world run this experiment, right? So certainly we could buy six machines and we could download Pi six times. But you might be thinking, but the protocol Pi is meant to work with N equals three. Well, true, but let's actually think about exactly what the protocol Pi is expecting before it starts running.
00:14:25.206 - 00:14:56.046, Speaker A: It's expecting to be told whether to run as a sender or not. It's expecting to be told if it's a sender, what is its private input, and it's expecting to be told a set of three IP addresses, the one of the node, the local node that's running the protocol, as well as two other IP addresses, which are nodes that you might get messages from and that you might want to send messages to. Once you've specified those three things, whether or not you're ascender if you're ascender what your private input is and exactly what is the set of two other nodes that you're supposed to be communicating with.
00:14:56.046 - 00:15:06.994, Speaker A: With those three ingredients set, you can now just press play on the protocol Pi, and it's just going to run. It's going to receive messages from the two nodes that it knows about. It's going to send messages back to the two nodes it knows about.
00:15:06.994 - 00:15:23.730, Speaker A: It's going to do some local computation, and at some point it's going to stop and it's going to output a final answer. Now, you'd be right to object that we're sort of running Pi in a way which was not at all what its designers intended. Okay? So Pi is designed to solve Byzantine Broadcast in the permission setting with three nodes.
00:15:23.730 - 00:15:36.320, Speaker A: That's what it's designed to do. We are deploying it not with N equals three, but with N equals six. And we are deploying it not in a permission setting, but rather in a setting where each of the six nodes only knows about three nodes total, including itself.
00:15:36.320 - 00:16:01.318, Speaker A: All that is true, but it's still the case that you literally could run this experiment in the physical world if you wanted. The reason being that the copy of Pi running on machine A, for example, it doesn't know that nodes A prime, B prime, and C prime exist. Okay? From a's perspective, it looks consistent with a reality in which the only other two nodes in the world are B and C, right? Those are the only nodes that A ever hears messages from.
00:16:01.318 - 00:16:10.950, Speaker A: Those are the only nodes that it ever sends messages to. So A does not know it's in a hexagon. All it knows is that there are these two other machines with which it communicates.
00:16:10.950 - 00:16:30.174, Speaker A: So this is what I mean by the thought experiment being well defined, okay? Given such a Pi, you really could buy these six machines and run the protocol in this way and see what happens. Again, it may feel like there's some kind of type checking error that Pi shouldn't work in this way because Pi is expecting N equals three and really N equals six. Pi is expecting it to be a permissioned world.
00:16:30.174 - 00:16:43.330, Speaker A: This is not a permissioned world. But the point is that it does actually type check. If you really think about the copy of Pi running on any one of these six machines, that protocol has exactly the information it's expecting and nothing more.
00:16:43.330 - 00:17:01.420, Speaker A: It knows whether or not the node is a sender. It knows what the private input is if it is a sender, and it knows about a set of three IP addresses. And so that means each of the machines cannot distinguish between it being on a hexagon like this and actually being in a bona fide instance of Byzantine broadcast with N equals three.
00:17:01.420 - 00:17:12.526, Speaker A: So everything type checks. The thought experiment is well defined. And because Pi satisfies termination, remember, that's one of the three properties we want of the Byzantine Broadcast protocol, which Pi supposedly is.
00:17:12.526 - 00:17:40.468, Speaker A: So by termination, eventually each of these six nodes will halt with some output. Let's assume that the only possible outputs here are zero or one. So while it is important to recognize that it type checks to run Pi in this way on these six different machines, it's certainly not accurate to say that sort of agreement and validity carries over to the thought experiment.
00:17:40.468 - 00:17:49.544, Speaker A: In fact, if you think about it, it's not even clear, like, what that means. Like validity says if there's an honest sender, then everyone outputs that sender's value. Here we have like two senders.
00:17:49.544 - 00:18:06.444, Speaker A: They're both honest, but they have different private inputs. So what would it even mean to talk about this thought experiment satisfying validity? We don't even have a definition for that. And I say this because it has important consequences for our proof strategy, right? So remember, we're trying to derive a contradiction from the assumed existence of this protocol Pi.
00:18:06.444 - 00:18:43.932, Speaker A: In deriving that contradiction, surely we are going to have to use the fact that the protocol Pi satisfies both validity and agreement, right? Because actually we know if you drop either of those two properties, the Byzantine broadcast problem becomes basically trivial and there's not going to be any impossibility results. So if there's an impossibility result to be proved, the proof better use the fact that Pi is one satisfies validity and two satisfies agreement. So how are we going to use that assumption that it satisfies these properties in the proof? We are not going to use those assumptions directly on the hexagon on the 6th cycle because they don't make sense.
00:18:43.932 - 00:18:58.208, Speaker A: We don't even know what validity and agreement mean on the 6th cycle. So we need to somehow come up with some bona fide instances of Byzantine broadcast with only three nodes. Then we can talk about Pi satisfying validity and agreement.
00:18:58.208 - 00:19:47.420, Speaker A: So the way we're going to build a bridge between this well defined but semantically unclear thought experiment on the hexagon and the assumed property of pi on instances with three nodes, we're going to show over the next three slides that this hexagon actually basically encodes three different sort of three node instances that pi has to deal with. So three different three node instances, different situations for which Pi has to still operate correctly, are simultaneously embedded in this six cycle. And then we're going to show that the constraints imposed on the protocol's behavior by needing to satisfy agreement and validity in all three of these three node examples, they are going to be mutually contradictory and that will contradict the well definedness of this thought experiment.
00:19:47.420 - 00:20:00.416, Speaker A: Okay? So that's the reason. As you'll see, we defined this hexagon in the way that we did so that we could embed these three different three node examples effectively into it. All right? So those are a bunch of comments about the high level proof strategy.
00:20:00.416 - 00:20:10.964, Speaker A: In the next slide, we're going to actually delve into the details of the proof. And if this proof strategy kind of didn't make a lot of sense. Right? Now I encourage you to revisit it after we go through the details in the upcoming slides.
00:20:10.964 - 00:20:39.380, Speaker A: Okay, so can first absorb the details, come back to this slide, revisit the discussion, and that'll give you a bird's eye view of what we did in the proof. All right, so moving on from the thought experiment on the hexagon to an actual bona fide instance of Byzantine broadcast with three nodes where we know Pi satisfies agreement and validity, by assumption we will be referring to the hexagons. And let me just redraw the hexagon in the upper right part of the slide.
00:20:39.380 - 00:20:58.600, Speaker A: All right? So scenario number one, I'm going to show you three nodes, one of which is Byzantine. And this scenario is going to be set up to take advantage of the fact that the protocol Pi has to satisfy agreement whether or not the sender is Byzantine. All of the honest nodes have to output the same thing.
00:20:58.600 - 00:21:12.824, Speaker A: So we're going to look at three nodes. The Byzantine node is going to be the node X, it's going to be the sender. Okay, so nodes B and C prime, they are honest non senders, they're just happily running Pi.
00:21:12.824 - 00:21:29.280, Speaker A: Whereas X is the Byzantine sender. It can do absolutely whatever it wants. So what might be a devious thing for the Byzantine node X to do? Well, as we've said, the canonical ploy for a Byzantine node is to send the honest nodes inconsistent information to try to get them confused.
00:21:29.280 - 00:21:47.690, Speaker A: Now, what does it mean to send inconsistent information? Well, the concrete protocols we were talking about in lecture two was sort of intuitively clear what that meant, right? So if in step one sort of the leader sends a bunch of stuff to sort of all the other nodes, maybe it sends one value to some of them and a different value to the rest of them. That's sort of what inconsistent information meant. Then.
00:21:47.690 - 00:22:05.452, Speaker A: Here however, we don't have a concrete protocol in front of us. We can't stare at some protocol code and say, oh, this is what inconsistency would mean. So we have to have an adversarial strategy which basically communicates inconsistent information to B and C prime no matter what the protocol Pi is.
00:22:05.452 - 00:22:22.580, Speaker A: And again, we really know nothing about Pi. So this here we again find ourselves where kind of the one option we have, the one generic way we can use a protocol Pi is by running it, that is by simulation. So this is where this will be the first appearance of the simulation idea.
00:22:22.580 - 00:22:47.144, Speaker A: In this proof, the adversary is going to simulate the protocol Pi. Actually it's going to simulate four copies of the protocol Pi. So why four copies? Well, it's going to be the four machines in the thought experiment, the four machines in the cycle, six cycle other than B and C prime.
00:22:47.144 - 00:23:08.204, Speaker A: So that's going to be the chain starting with machine a running as a sender with input zero. It's going to include the non senders C and B prime and then the sender with input one. So a little more concretely, what do I mean by the adversary runs? Kind of four copies of Pi simulates this chain of four nodes.
00:23:08.204 - 00:23:35.992, Speaker A: Well, imagine the adversary, just like is a single computer. But on that computer, it spins up four different copies of Pi, each one in a different virtual machine two of them running as non senders corresponding to machines B, prime and C and two of the virtual machines running as senders with input zero and one corresponding to the machines in the hexagon A and A, Prime. So the adversary X has these four virtual machines running locally on its computer.
00:23:35.992 - 00:24:10.432, Speaker A: And then it has to interact with B and C prime, the actual other nodes running the protocol Pi. And so it's just going to interact with C prime as if it were A prime, C prime's neighbor on the hexagon, and it's going to interact with B as if it was the node A, which is B's neighbor on the hexagon. So whenever a message comes in from the node C prime, from outside, the adversary is just going to feed that message to the virtual machine running as a prime.
00:24:10.432 - 00:24:26.536, Speaker A: Similarly, whenever a message comes in from the outside from the node B, the adversary is just going to feed that message into the virtual machine that's running as A. Whenever the virtual machine running as A wants to send a message to B, then of course the adversary just does. It just sends that message to B.
00:24:26.536 - 00:24:51.756, Speaker A: If the virtual machine running as A wants to send a message to its other neighbor, to the machine C, well, then the adversary, just locally on its own computer, sort of sends the message from the one virtual machine to the other. So messages between A and C, between C and B prime and between A prime and B prime, they don't actually hit the communication network. The adversary can just sort of handle those directly as communication between its different copies of Pi that it's running locally.
00:24:51.756 - 00:25:12.422, Speaker A: So that, in a nutshell, is what the adversary is doing. It's communicating with C prime as if it were A prime in the hexagon, communicating with B as if it were A in the hexagon, while at the same time keeping track of what C and B prime would be doing in the hexagon. Okay, fine.
00:25:12.422 - 00:25:41.726, Speaker A: But still, why single out this one particular weird strategy for the Byzantine node, capital X? Of all the various weird things that it could do, why would it do this? Well, in one word, indistinguishability. The whole point of this particular strategy for the Byzantine node, capital X is that it keeps the honest nonsenders B and C prime in the dark. They cannot distinguish whether they are, in fact, in a Byzantine broadcast instance with N equals three interacting.
00:25:41.726 - 00:26:13.446, Speaker A: With this Byzantine node capital X, running a simulation strategy, they can't distinguish between that reality and an alternative reality in which they're in the thought experiment on the 6th cycle with four other nodes. So that is the point of this particular choice of strategy for the Byzantine node X. It effectively is always saying what would be in C Prime? What messages would they be receiving right now in the thought experiment from Ana Prime? Now, the protocol Pi is assumed to satisfy agreement.
00:26:13.446 - 00:26:43.122, Speaker A: And what that means is that even if the sender is Byzantine, and even if the sender is using some crazy strategy like, say, this kind of weird simulation strategy, it is still the case that the honest nodes, at the end of the day, when Pi terminates, the honest nodes must output the same thing. So in particular in this case, because Pi satisfies agreement B and C Prime, the honest nonsenders conclude with identical outputs. And note that we haven't cheated.
00:26:43.122 - 00:26:54.110, Speaker A: We did not sort of make an appeal to Pi satisfying agreement when reasoning directly about the thought experiment. We just said, look, this is a bona fide instance of Byzantine broadcast. It's a bona fide strategy for the Byzantine node.
00:26:54.110 - 00:27:04.506, Speaker A: By agreement, the honest non senders must output the same bit. So that's very important for takeaway from this case one. All right, but that would have been true no matter what this strategy of the Byzantine node was.
00:27:04.506 - 00:27:34.454, Speaker A: So why should we single out this weird one where it sort of makes up four fictitious nodes and sort of simulates four copies of Pi? What's up with that? This particular strategy for the Byzantine node X ensures that B and C Prime are kept in the dark. Okay? Either way, they're going to see exactly the same sequence of messages coming in. They're going to be doing exactly the same local computations, and therefore they will be concluding with exactly the same final output the adversary hides, makes it indistinguishable which of these two realities, B and C Prime, actually live in.
00:27:34.454 - 00:28:09.006, Speaker A: So therefore, by virtue of outputting the same bit in the three node Byzantine broadcast instance, because they do exactly the same thing in the six node thought experiment, also in the thought experiment, whatever happens, we can conclude that at the very least, we know B and C Prime output the same bit. All right, so good news if you're still with me. If you've understood the argument on this slide, we're basically going to be done with a proof.
00:28:09.006 - 00:28:30.166, Speaker A: We do need two more scenarios which we're going to invoke the fact that Pi satisfies validity, but the style of argument will literally be the same as the one we used on this slide. So we just had to repeat this same pattern two more times. We'll get two more sort of constraints that we'll put in green boxes, and then the three boxed constraints together will give us our contradiction.
00:28:30.166 - 00:28:46.090, Speaker A: So let's move on to the second scenario, which is going to be another three node Byzantine broadcast instance. So this scenario will make use of the assumption that the protocol Pi satisfies validity. Remember, validity requires nothing if the sender happens to be Byzantine.
00:28:46.090 - 00:29:11.350, Speaker A: So presumably in this scenario, the sender will be honest and it's one of the non senders that will be Byzantine. So in this scenario, the two honest nodes A and B will be playing the roles of the nodes A and B in the 6th cycle thought experiment. So in particular, the honest sender node A will have a private input of zero.
00:29:11.350 - 00:29:30.296, Speaker A: All right? So what's going to be the strategy for capital X we're going to look at well, it's going to be the same as before, right? So we're going to look at the four nodes on the 6th cycle other than the two that are present. So in this case, it's going to be the chain of nodes between C and C prime. And the adversary is just going to simulate four copies of the protocol Pi.
00:29:30.296 - 00:29:37.680, Speaker A: Again, it has its computer, it has its four virtual machines. One of those is running as C. One is B prime, one is A prime, one is C prime.
00:29:37.680 - 00:30:23.482, Speaker A: So the Byzantine node, capital X, will interact with the honest sender A as if it was the node C in the thought experiment, and it will interact with the honest non sender B as if it was the node C prime in the thought experiment. And then the adversary, the Byzantine node, capital X, will also be simulating the other nodes of the 6th cycle, a prime and B prime to ensure that it's faithfully replicating all of the computation and communication that would be happening in the thought experiment. Now, once again, it doesn't make sense to appeal to the fact that Pi satisfies validity and agreement if we're arguing directly about the six node thought experiment, because that's not the situation where Pi has these properties.
00:30:23.482 - 00:30:42.754, Speaker A: However, this green triangle, this is a bona fide instance of Byzantine broadcast, right? There's three nodes. One of them is Byzantine capital X. Yes, X is using some crazy strategy, but Pi is assumed to satisfy in particular validity no matter what crazy strategy a Byzantine node uses.
00:30:42.754 - 00:31:07.120, Speaker A: So what does that tell us? Well, what does validity say? It says if there's an honest sender, then all of the honest nodes should conclude with the honest sender's private value. In the screen triangle we have an honest sender, the machine A, its private input is zero. So by virtue of satisfying validity, we can conclude that when you run Pi in this green triangle, a and B will both conclude with the final output zero.
00:31:07.120 - 00:31:21.220, Speaker A: And so there's our second green box. Okay, so in scenario number two, this different instance of Byzantine broadcast, the two honest nodes, not only do they output the same bit, but that bit has to be zero. And in fact, all that's going to matter for us is that B has to output zero.
00:31:21.220 - 00:31:56.558, Speaker A: And now again, the point of this clever choice of a strategy for capital X is it allows us to transfer constraints on the honest nodes output in the Byzantine broadcast instance over to their outputs in the thought experiment. So again, by construction of the strategy for capital X, it makes sure that nodes A and B operate identically, no matter whether they're in the three node Byzantine broadcast instance with this particular adversary X or in the six node thought experiment. The adversary makes sure they cannot distinguish which of those two realities is the correct one.
00:31:56.558 - 00:32:22.374, Speaker A: So by virtue of both outputting zero in the Byzantine broadcast instance, they must also both output zero in the six node thought experiment. So that's the second scenario. That's our second constraint that we can say about the thought experiment.
00:32:22.374 - 00:32:33.442, Speaker A: We already showed that B and C prime have to output the same bit. Now we know that A and B have to both output zero in the thought experiment. We need one more scenario to finally arrive at our conclusion.
00:32:33.442 - 00:32:44.580, Speaker A: It's going to be very, very similar to scenario two. It's again going to be appealing to the fact that Pi satisfies validity. This time we'll be using an honest sender with the opposite private input of one.
00:32:44.580 - 00:33:05.776, Speaker A: So as usual, X will represent the Byzantine node in this scenario three, like in the last scenario, it's going to be a non sender. So we have an honest sender that's going to be A prime playing the role of the A prime in the thought experiment. And then our honest non sender is going to be C prime.
00:33:05.776 - 00:33:24.350, Speaker A: And like in the thought experiment, a prime's private input will be equal to one. So pattern matching, you probably can guess now what strategy we're going to look at for the Byzantine node capital X, right? So A prime and C prime are two consecutive nodes on the 6th cycle in the thought experiment. And so the adversary is just going to simulate the other four.
00:33:24.350 - 00:34:06.540, Speaker A: So again, what does this mean? This means that the Byzantine node will interact with the honest non sender C prime as if it was the node B in the thought experiment. And it will interact with the honest sender A Prime as if it was the node B prime in the thought experiment. And then the Byzantine node X will also simulate what ANC would be doing in the thought experiment so that it can faithfully replicate all of the messages that would be sent in the thought experiment over in the bona fide instance of Byzantine broadcast.
00:34:06.540 - 00:34:17.612, Speaker A: So once again we will appeal to the fact that Pi satisfies validity. We're going to do that in the Byzantine broadcast instance. The green triangle X is using a crazy strategy.
00:34:17.612 - 00:34:23.364, Speaker A: Doesn't matter. Pi is still supposed to satisfy validity. There's an honest sender, A prime, its private input is one.
00:34:23.364 - 00:34:54.696, Speaker A: So validity insists that both of the honest nodes, A prime and C Prime will both output that private input will both output the bit one. And now again, we use X's clever simulation strategy as a bridge to transfer this constraint from the Byzantine broadcast instance back to our six cycle thought experiment. So by construction of X's strategy, a prime and C Prime operate identically in the two realities, whether they're in the three node Byzantine broadcast instance or whether they're in the six node thought experiment.
00:34:54.696 - 00:35:19.672, Speaker A: So by virtue of both outputting one at the conclusion of the protocol pi in the green triangle, they must also both output one in the thought experiment. And now, at last, we are done. In our three green boxes.
00:35:19.672 - 00:35:33.692, Speaker A: We have derived three constraints about the output of the thought experiment. And let's now observe that those three constraints cannot all be satisfied from scenario number one. This is where we were considering a Byzantine sender and appealing to agreements.
00:35:33.692 - 00:35:46.324, Speaker A: We deduced the constraints both in this green triangle, but then also we sort of extended that to hold. Also in the thought experiment, the nodes B and C prime must output the same bit. Either they both output zero or they both output one.
00:35:46.324 - 00:35:57.712, Speaker A: B and C Prime output the same bit. On the other hand, our first appeal to validity showed that B has to output a zero. And our second appeal to validity showed that C Prime has to output one.
00:35:57.712 - 00:36:05.460, Speaker A: So they must output different things. But the first constraint said they must output the same thing. So what we conclude is that the thought experiment is not well defined.
00:36:05.460 - 00:36:15.624, Speaker A: Or at least that's what the existence of the protocol pi would imply. It would imply that this thought experiment can't possibly exist. But as we talked about at some length, the thought experiment does indeed exist.
00:36:15.624 - 00:36:27.760, Speaker A: You could totally buy these six machines, download the protocol, install it six times, run it and see what happens. And you would get some well defined output. So that is our contradiction, okay? You would get some well defined output from the thought experiment.
00:36:27.760 - 00:36:43.204, Speaker A: And that means you can't simultaneously have the three constraints imposed by scenarios one through three. And that means we have no option but to concede that this protocol pi could not possibly exist. And that's the end of the proof.
00:36:43.204 - 00:37:02.684, Speaker A: So this shows the impossibility result that there's actually no deterministic Byzantine broadcast protocol that satisfies validity and agreements. If a third of the nodes can be Byzantine, the proof is definitely tricky. I don't think anyone feels like they really understand this proof the first time that they see it.
00:37:02.684 - 00:37:13.244, Speaker A: So if you feel like it's mysterious or confusing, that's totally normal. Again, sort of like at a first exposure the first time you see this. I think the thing to do is just convince yourself it's actually a valid proof, really.
00:37:13.244 - 00:37:26.710, Speaker A: Like check out line by line that every sort of step checks out. Indeed. That's sort of the power of mathematics for you, right, is you can be convinced of the truth of a statement without necessarily having a good understanding of why it's true, but the proof at least convinces you that it is true.
00:37:26.710 - 00:37:44.420, Speaker A: And if you're interested, I would encourage you to keep thinking about the proof, keep sort of running over it in your mind. Think about the proof in different ways. And the more time you spend with it, the more you'll internalize it, and the more you'll kind of realize the forces that are really driving this contradiction.
00:37:44.420 - 00:37:58.504, Speaker A: And all right, so we still have one more thing we need to do to wrap up lecture three. That'll be in the next video. We need to resolve the apparent contradiction between our possibility result in lecture two for the dill of strong protocol and the impossibility result we just showed.
00:37:58.504 - 00:38:05.610, Speaker A: Okay, so why don't those contradict each other? Because they're slightly different sets of assumptions. See the next video for a discussion of that. See you there.
