00:00:08.170 - 00:00:31.512, Speaker A: Hi, I'm debbie and I lead developer relations at lit. Today I'm going to go over programmatic signing and how you can utilize LIT's core features. Ideally, you'll get an overview of lit protocol as well as some ideas of what to lit.
00:00:31.512 - 00:00:59.580, Speaker A: So Lit Protocol lets you create and manage distributed cryptographic key pairs for condition based encryption and programmatic signing. Lit is a decentralized key management network, so lit can be used in a place of centralized key custodians and other key management solutions. How does lit work? Lit decentralizes public key cryptography through Threshold Cryptography.
00:00:59.580 - 00:01:32.110, Speaker A: Threshold Cryptography is used to generate shares of a public private key pair in a process called Distributed Key Generation through Distributed Key Generation or DKG. Private keys of this key pair never exist in its entirety, ever. So the lit nodes hold a private key share and these key shares can be used to both sign and decrypt data, just like any old private key.
00:01:32.110 - 00:02:14.660, Speaker A: Two core products with lit are encryption and signing. Encryption is being able to encrypt information so that it can only be accessed by authorized parties. And you can encrypt and decrypt using on chain conditions and credentials, such as someone is a member of a Dow, such as developer Dow, or someone holds an NFT in the Doodles collection or Nouns collection.
00:02:14.660 - 00:02:29.210, Speaker A: Someone holds a certain amount of ETH. So you could say they have minimum point one amount of ETH and they can unlock viewing something. Someone holds a specific Wallet address.
00:02:29.210 - 00:03:10.208, Speaker A: And we support most EVM chains, the Cosmos ecosystem and Solana. On the signing side, It's programmatically being able to write data to blockchains databases, storage networks and other state machines through digital signatures. So some examples on the programmatic signing side might be so there are DeFi use cases where you can build conditional transaction execution, reoccurring payments, liquid Staking solutions, and then on the infra side, cross chain bridges.
00:03:10.208 - 00:03:32.380, Speaker A: We actually had a grant project create a bridge to swap tokens. And one thing is they also built a way to do Bitcoin transactions. So being able to swap to Bitcoin using programmable key pairs and lit actions.
00:03:32.380 - 00:03:58.900, Speaker A: And then there are Oracles for off chain data privacy preserving transactions as well as AA Wallet signers. So we're going to dive into the AA Wallet signers a little bit later in this talk. So how is the signing possible with lit? It's possible through two concepts.
00:03:58.900 - 00:04:16.820, Speaker A: One which is deployable key pairs or PKPS. They are private public key pairs generated by the lit network. They're minted in the form of an ERC 721 NFT and the owner of the NFT becomes the sole.
00:04:16.820 - 00:04:45.484, Speaker A: Not the sole, but the A controller and delegator of who can sign with the PKB. So initially at Mint they are the sole controller and then they can delegate who else can sign with it. So in order to get a programmable key pair, you'll need to use LIT's Network Chronicle and you can go get some testnet tokens from the Faucet and then be able to mint Apkp and then for Lit Actions.
00:04:45.484 - 00:05:05.160, Speaker A: Lit actions are immutable JavaScript functions stored on IPFS. They're smart contracts with superpowers, they have network access and the ability to make arbitrary Http requests. Think of it like a cloud function that is able to be run across the lit nodes and you'll write them in JavaScript.
00:05:05.160 - 00:05:44.500, Speaker A: So when these components work together, Lit Actions and PKPS, they have the power to facilitate complex condition based automation. What if you could tell your Wallet to execute a certain trade when your token fell below a specified price? Or to automatically list your NFT when the collection hits a certain floor price? Or let's say you want to use an off chain or cross chain data as a trigger to execute functionality within your decentralized application? With lit, these use cases become possible. A common question we get asked is, do I need a PKP to run a lit action? No.
00:05:44.500 - 00:06:13.964, Speaker A: But without it, Lit Actions lose their magic capabilities of signing and decryption. An action without a PKP is essentially just a serverless function that can't sign or decrypt arbitrary data. Before we go deeper in about Lit, I want you all to know, how do you find more information about lit as well as how do you build with us? Well, you can go to our Developer Docs, which are at Developer Litpotocall.com,
00:06:13.964 - 00:06:31.072, Speaker A: and the most recent version is our V two. We still have V three in the works, so stay tuned. But on V two, you can check out more of an overview of how to build with lit, as well as how to load in the SDK.
00:06:31.072 - 00:06:56.830, Speaker A: So we have a JavaScript SDK that you'll utilize in order to talk to the lit nodes. And we have a lot more information around the different concepts around Lit Actions, PKPS and Access Control. From there, you can find many different examples as well and then be able to find out what you want to build.
00:06:56.830 - 00:07:22.196, Speaker A: So in this next part, I'm going to go over Auth Sigs and Session Sigs, because that's a core component of how to work with a lit network. And so a little bit of vocabulary. An Authsig is a Wallet signature obtained from a user.
00:07:22.196 - 00:07:44.204, Speaker A: So Wallet signatures are required to communicate with the lit nodes and authorize requests. So Authsigs is a signature that proves you own a particular public key. So EVM based DApps rely on cryptographic signatures to prove ownership of address through the ECDSA curve or algorithm.
00:07:44.204 - 00:08:15.610, Speaker A: So elliptic curve digital signature algorithm, which allows external parties to verify signatures without knowing the private key. And so we'll take a look at opsig format and then go into session signatures. So take a quick peek, take it in.
00:08:15.610 - 00:09:04.142, Speaker A: This is the format of an Opsig. And then we're going to go into session signatures, which the first step to producing a session signature is to obtain an opsig through an authentication method like Google OAuth, which you can do through lit. We have different ways to try different authentication methods like SMS, Google OAuth through a Wallet address by specifying the session's key pair public key, the signature payload of the Auth SIG, which is the Uri field of a CWAY format.
00:09:04.142 - 00:09:23.942, Speaker A: Or sign in with ethereum. Users can choose which specific actions to delegate to session key pairs for operating certain resources. So session key pairs are used to sign requests for lit nodes and the user's off SIG is set along with the request attached as a capability to the session signature.
00:09:23.942 - 00:10:09.546, Speaker A: So each node in LIT's network receives a unique signature for each request and can verify that the user owns the Wallet address that signed the capability. So that might mean you might be able to specify only keep my data on the browser for X amount of time, or Clear my data for this session. Let's say we're on Lens or we're on a different platform and you're like, I want to sign all transactions just in this session before my browser is closed, so I don't want to keep resigning every time.
00:10:09.546 - 00:10:38.798, Speaker A: And then once your browser is closed, that's kind of the stopping point. And then when you reopen and you go back to Lens, you would have to resign in to keep signing for posting or for other ways of utilizing signing. Moving on, we're going to go to how to use Account abstraction and lit.
00:10:38.798 - 00:11:03.302, Speaker A: So account abstraction refers to the EIP 4337, where AA shifts the validation of transactions from the Ethereum protocol to the Spark contract level. So unbundling signing with transactions. So here you can use lit with account obstruction by setting conditional gas payments.
00:11:03.302 - 00:11:21.310, Speaker A: So a PKP wallet pays for gas fees when certain conditions are met. User onboarding creating a smart contract account for someone new to Web Three. The signer can start as an MPC key authorized through a Web Two account and then AA Wallet authorization for PKP.
00:11:21.310 - 00:11:46.090, Speaker A: So smart contract accounts with signing capabilities through PKPS. Or you can do non ECDSA account abstraction wallets with the PKP, which allowing the freedom of signature verification schemes. And then lastly adding a PKP as a signer to an AA Wallet, where the PKP is the spending account and the A wallet is a treasury for a Dao.
00:11:46.090 - 00:12:28.838, Speaker A: A example you can see in action is the Pimlico tutorial here. So going through it you'll be able to integrate Pimlico with lit protocol for OTP or One Time password Authentication, where this guide will walk you through the steps to integrate LIT's OTP sign in with email, SMS and WhatsApp with a smart account whose user operations are related and sponsored by Pimlico. So this is one way where you can use account abstraction with lit.
00:12:28.838 - 00:12:57.550, Speaker A: So make sure to follow along in this guide. Closing out, I want to go over the prizes for ETH Global New York. So first prize is best use of programmatic signing, where we're going to give out 3500 USDC for the best project using PKPS and Lit Actions.
00:12:57.550 - 00:13:18.410, Speaker A: So that might be onboarding with lit social onboarding verified Credential systems using PKPS and Lit Actions. A cut of abstraction using lit as a signer or as a paymaster. We'd like to see people be really creative and ideally some bonus points around people being able to use this or extend this.
00:13:18.410 - 00:13:50.994, Speaker A: So having a library or SDK and then our next prize is a wild card where we really like to see more creative uses of lit protocol that might be onboarding and educating people that might be a campaign that might be tooling. No idea is too small as long as it has impact on developers and creates clear use cases for lit. So we want to be able to see people just push forward the ecosystem and community.
00:13:50.994 - 00:14:05.946, Speaker A: So please, please use lit. Have fun using lit and we're excited to see what you build. You can check out lit on Twitter at Lit Protocol.
00:14:05.946 - 00:14:15.518, Speaker A: You could also check out the Lit SDK. And if you have any questions about implementing, please go to our discord. We're pretty available there.
00:14:15.518 - 00:14:23.480, Speaker A: And feel free to DM me on Twitter. I would love to answer your questions. Happy building.
00:14:23.480 - 00:14:24.450, Speaker A: Bye.
