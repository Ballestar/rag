00:00:06.330 - 00:00:22.590, Speaker A: So, without further ado, would love to welcome Carl onto the stage. So, Carl, whenever you're ready, feel free to unmute and share your screen. Carl is listed on this chat as Carl with many Op with many exclamation points.
00:00:22.590 - 00:00:24.606, Speaker A: So, you know, he's excited. There you go.
00:00:24.628 - 00:00:32.870, Speaker B: Welcome to you already know. How could I not be? Oh, my goodness. Let me make sure that okay, I got all the things.
00:00:33.020 - 00:00:34.214, Speaker A: You're all set?
00:00:34.412 - 00:00:36.870, Speaker B: I'm all set. We did it. Reddit.
00:00:37.850 - 00:00:38.502, Speaker A: There you go.
00:00:38.556 - 00:00:39.506, Speaker B: Everything looks all right.
00:00:39.548 - 00:00:42.810, Speaker A: Well, I'll get out of the way and excited to hear more about the Op stack.
00:00:43.550 - 00:00:54.602, Speaker B: Okie dokie. So welcome, everybody. Going to talk about the Op stack bedrock and the rise of the super chain.
00:00:54.602 - 00:01:04.402, Speaker B: And we actually got a solid amount of time. I didn't realize we had so much time, but I got to fill up all the time. So without further ado, I'm Carl, of course.
00:01:04.402 - 00:01:21.826, Speaker B: I work at Op Labs doing this optimism or whenever I talk about these things, right, these words pop up on the screen. There is one word that everyone sees. They don't see the rest of the words, they see super chain.
00:01:21.826 - 00:01:34.602, Speaker B: That is what they see realistically. So I'm not going to start off by talking about the super chain. I'm not going to talk about how it is all these chains kind of combined into one super duper fantastic thing.
00:01:34.602 - 00:01:48.878, Speaker B: I'm not going to talk about that to begin with. Instead, what I'm going to talk about is the problem ethereum congestion back in 2016, 2015. This has been a problem for way too long.
00:01:48.878 - 00:01:57.614, Speaker B: Oh, my God. It's been a long, many years. But we've had too much demand for Ethereum.
00:01:57.614 - 00:02:13.270, Speaker B: Ethereum is too good. And so what happened? How did we solve Ethereum congestion, realistically speaking? Well, we copy and pasted it into more chains, all these various chains generated by dolly two. That is what we did.
00:02:13.270 - 00:02:29.530, Speaker B: That is what we did. And then what did we do? Well, we connected these chains with largely insecure bridges, these largely insecure chains, realistically speaking. And we kind of hacked some together to address this horrible problem of congestion.
00:02:29.530 - 00:02:52.930, Speaker B: And in some sense, optimism is kind of one of these things, right? It is a layer two, but from a user experience perspective, it still has a bridge. It still feels a little bit distinct, but it does have the nice quality of being rooted in Ethereum and sharing some of that security. And so this is kind of the state of affairs in some sense.
00:02:52.930 - 00:03:06.870, Speaker B: And if I'm a user, this cute little gerbil also generated. Most of these photos are generated, actually. Then you're going from one chain to another, trying to deposit, withdraw.
00:03:06.870 - 00:03:24.266, Speaker B: It's just kind of chaos, to be honest with you. And you can kind of visualize this as a crazy market, right? It's like a marketplace. And you're going from these different sellers, and maybe you go to this person, you're transacting on this chain using this vendor.
00:03:24.266 - 00:03:39.282, Speaker B: And behind you there's a bridge that just exploded and another one that just exploded. And then you went to this other chain and now it's actually a rug pull. It is true and utter chaos right now.
00:03:39.282 - 00:03:54.402, Speaker B: This is not good. This is not a user experience worth bragging about, right? This is just honestly very sad. But it's better than no one being able to transact, which is the alternative because Ethereum was just way too congested.
00:03:54.402 - 00:04:09.900, Speaker B: But we can do better. We can do better. And what if I told you what if I told you that there was a solution to this problem? There was a solution where instead of going from one place to another, everything is all in one place.
00:04:09.900 - 00:04:25.460, Speaker B: And you don't have to transact with all these different vendors. You can instead transact with one trusted seller. One trusted seller and you've got seamless atomic checkout in this market.
00:04:25.460 - 00:04:32.590, Speaker B: Well, it's the supermarket. Whoa. Oh my gosh.
00:04:32.590 - 00:04:55.366, Speaker B: Okay, this is a joke, right? We're not here for supermarket technology, but it's just supermarket super chain anyway. Really, though? Really, though, I can't help myself. Our chain should have these properties, right? We demand these properties that everything in one place is single trusted seller.
00:04:55.366 - 00:05:04.000, Speaker B: So you're not getting hacked all the time, right? We shouldn't have to bridge from one chain to another. We shouldn't have to get hacked. I mean, my goodness, that's a low bar.
00:05:04.000 - 00:05:16.500, Speaker B: And also transaction fees should be cheap and sometimes pretty much free. Like, that is legitimately. There is no technical blocker and so there is no reason why we should not achieve this.
00:05:16.500 - 00:05:21.490, Speaker B: Don't fear, though. Don't fear. The op stack is here.
00:05:21.490 - 00:05:29.906, Speaker B: All right? We finally got to the actual meat of the talk to an extent. Well, state of affairs. Kind of crazy, absolute madness.
00:05:29.906 - 00:05:43.286, Speaker B: But we can fix this. How do we fix this? Well, we can build standardized open source libraries that provide shared security so things are actually secured rooted in Ethereum. There are fallback mechanisms.
00:05:43.286 - 00:05:57.290, Speaker B: There are things that prevent terrible hacks. Also, just the fact that it's standardized makes it way more secure because now there are way more eyes on it. It's not just a one off solution because that's how you get hacks.
00:05:57.290 - 00:06:09.390, Speaker B: Additionally, composable, right? We need these systems to all work together. You can swap out one module, they're compatible with one another. And additionally, finally, coordinated sequencing.
00:06:09.390 - 00:06:47.002, Speaker B: I won't talk about how incredibly that important that is, but it is actually incredibly important for creating an experience. Now, what is this experience? That the user, at the end of the day, all of this technology is in service of building something that we can all use, right? I want to use a better product than we have today. And so what is the user experience of this system? Well, with the compatibility that the shared technology enables, we can actually create a virtualized single super chain.
00:06:47.002 - 00:07:13.698, Speaker B: Right? We can actually interact with the system in a way where you're not having a bunch of user facing bridging. All that kind of stuff can be handled in the background, right? We can have robust modules that ensure security and additionally, it should be hella scalable, horizontally scalable. Some call it, quote, infinitely scalable, but I feel like that's just like a savage marketing term, horizontally scalable.
00:07:13.698 - 00:07:32.546, Speaker B: So we can have near free transactions, transactions that essentially cost the amount of money that it costs to run that transaction on a computer. So it's like renting from AWS as opposed to paying surge pricing on Uber. So we can realize this super chain.
00:07:32.546 - 00:07:55.938, Speaker B: We can realize it with open source technology, shared standards and working together. And we can make that happy experience for our happy gerbil. Now, if we want to talk about how exactly the kind of like combination the virtualization of the superchain works, you can kind of take a look at endgame that has a bit of a hint at it and then there's even more talks that we can go into.
00:07:55.938 - 00:08:06.550, Speaker B: But I won't do it right now because we don't have enough time, or at least so I thought. But you can ask questions at the end of the presentation. So now we are past the intro.
00:08:06.550 - 00:08:18.730, Speaker B: Maybe I needed all the time that we have. Let's talk about the core of the Op stack. So this is not necessarily everything, but this is the kind of bread and butter.
00:08:18.730 - 00:08:31.534, Speaker B: Okay, what is the Op stack again? Standardized open source modules for layer two chains. We are using it for, of course, optimism mainnet. But it is open source, therefore anyone can mess around.
00:08:31.534 - 00:08:46.370, Speaker B: Now, there are three key layers to this, right? Any stack has some layers the consensus layer, the execution layer, and the settlement layer. Consensus. That's how the chain gets constructed.
00:08:46.370 - 00:08:56.390, Speaker B: The execution, that's the virtual machine that is actually being executed over this chain of inputs. And finally the settlement layer. That's how withdrawals occur.
00:08:56.390 - 00:09:22.486, Speaker B: So if you look into layer one, if you look closely with a magnifying glass, you will see that layer one is actually made up of its own consensus layer and execution layer. So this is a recent change that we've modularized layer one in the very same way that we're trying to modularize the layer two technology. And the way that that works is that we have Prism.
00:09:22.486 - 00:09:43.350, Speaker B: These consensus layer clients, not just Prism, don't just use Prism y'all, we need diversity. Additionally, we have execution layer clients like Geth and we have that same structure playing out in layer two as well. Now, let's get into the nitty gritty of the consensus layer, execution layer and settlement layer.
00:09:43.350 - 00:10:02.234, Speaker B: What are these different things? So first, for the consensus layer, we have two key modules, two options that we can choose from. We can either choose roll up, which basically means that all the transaction data is fully available on chain or plasma. Now, plasma got a bad rap back in the day.
00:10:02.234 - 00:10:13.390, Speaker B: It's just too early. And now there's a million different terms for plasma, like Valadium validium all of these things, the various things. Basically, at the end of the day, we should just call them data availability challenges.
00:10:13.390 - 00:10:27.406, Speaker B: We have a consensus layer client that has off chain data with data availability challenges on chain. So those are our two kind of like broad categories of consensus layer type deals. Additionally, we've got execution layers.
00:10:27.406 - 00:10:51.674, Speaker B: So that is the EVM, the classic one, right? We've also got extra fancy ones like this weird one in the middle that I'm kind of just like hinting at but not saying because I don't know if I should talk about it yet. But anyway, we've got other execution clients that are special purpose, maybe for some games, maybe not, whatever. And then finally we have the settlement layer.
00:10:51.674 - 00:11:03.598, Speaker B: This is how things actually get withdrawn from the system. This is how you kind of prove the withdrawal. Now, notably, I have here multisig fault and ZK proof.
00:11:03.598 - 00:11:27.846, Speaker B: I am writing this as though the settlement layer, if you have a fault proof or a ZK proof that is kind of working, but you still have a fallback to a multisig, then because of the weakest link security, at the end of the day, you're still multisig. And so that's why multisig is here. Obviously, no one wants multisig to persist into the future.
00:11:27.846 - 00:11:58.498, Speaker B: But the reality of layer two right now is that things are being secured, withdrawals are being secured by the multisigs, which is better than it being secured by an insecure proof system. So let's be thankful. Anyway, consensus layer, execution layer, and settlement layer, right? You can choose each one of these and if you choose this configuration, then you'll end up with an EVM equivalent optimistic roll up, right? This is the perfect flagship for an L two, but it's not necessarily the only configuration you might ever want.
00:11:58.498 - 00:12:18.714, Speaker B: And it does have different security trade offs or withdrawal trade offs, right? All of these things are trade offs. Now, additionally, eventually you'd want to plug in potentially a ZK roll up, a ZK proof system, a ZK settlement layer. And so what that means is that we can have an EVM equivalent ZK roll up.
00:12:18.714 - 00:12:48.222, Speaker B: And additionally, because it is modular, we can swap it in and swap it out. So the same chain that was running a fault proof can, without changing anything about developer experience, without changing anything about the nodes that people are running, you can actually swap in a different proof system for withdrawals. And so that means that we can get these seamless upgrades and write compatible software.
00:12:48.222 - 00:13:15.370, Speaker B: Actually, in fact, the key to scaling up the production of software is defining really good abstraction layers. And so this is actually more important than you might imagine because it allows people to work on different things in silos and still be compatible once they have done the incredible amount of work. And ZKPs are a great example of something that's going to take a lot of work to make extremely inexpensive.
00:13:15.370 - 00:13:34.566, Speaker B: And let's continue. So we've got the consensus layer, right? We can do things like layer three by layering in plasma with the EVM and fall proofs, right? All of these things are options and even swap out the execution layer. All of these configurations are valid.
00:13:34.566 - 00:14:06.582, Speaker B: But the key is that we should make sure that the way that they communicate, the way that these layers communicate with one another is standardized so that we can all benefit from each other's innovations and build out the blockchain stack candidly in an open source and permissionless way. So that is the core of the opizzle stack ISL so the bedrock release. We are finally at that section.
00:14:06.582 - 00:14:19.294, Speaker B: Okay, what is bedrock? Right, bedrock is a major step forward across two primary dimensions. So first off, obviously it is the next upgrade to optimism mainnet. That is, we are upgrading our main net.
00:14:19.294 - 00:14:34.706, Speaker B: If you deposit into optimism, then that thing is going to be using bedrock very soon. And that's going to make it literally like the most secure, the most scalable roll up that is out there. Let's go.
00:14:34.706 - 00:15:01.920, Speaker B: So, bedrock is actually legitimately, extremely, extremely dope. The second thing is that it supplies the foundational op stack modules, right? We built it out in this modular way already. And in fact, in the later talks with Josh, et cetera, we'll go into the details of how these things actually fit together and what components we built.
00:15:01.920 - 00:15:22.302, Speaker B: So, we have a configuration of the op stack and we have all of these different packages which it is using, right? We have this op node, which is the consensus layer kind of equivalent. We have op geth. We even have op aragon, right? This is literally two ethereum clients that are compatible.
00:15:22.302 - 00:15:32.614, Speaker B: Additionally, we've got all of these other batcher proposer contracts. We have Canon for fault proofs. All of these things are built in this modular way.
00:15:32.614 - 00:15:53.914, Speaker B: And so here I'll go over into more specific details of where the major steps forward in modularity are. So, first off, modular execution with the engine API. So, first, I started this talk by saying how the consensus layer and the execution layer are actually being built out and were created for layer one development.
00:15:53.914 - 00:16:09.700, Speaker B: Well, what did we do? Well, we swapped out the consensus layer and replaced it with the op node. So now we're coming to consensus by using l one consensus that's literally like the definition of layer two. Additionally, we have the execution layer, so we have guess.
00:16:09.700 - 00:16:36.806, Speaker B: But we can also swap in things like aragon. And it takes very little code to modify these execution layer clients to support layer twos. And that is critical, right? Code reuse is a key factor of security and these systems need to be more secure than any other system you've used, let me tell you, these security requirements are insane.
00:16:36.806 - 00:17:03.790, Speaker B: And so this also enables us to have a multi client ecosystem. We would never have made the Merge upgrade we would never have done the Merge upgrade without multiple clients because multiple clients catch divergences between them, making the entire system more secure. That's why the merge went through without any critical bug reports, right? That is literally the technology that the security technology they used was a MultiClient ecosystem.
00:17:03.790 - 00:17:13.320, Speaker B: And so we need that very same thing for layer two. And that is absolutely critical if we want to enable fault proofs, for instance. And I'll talk about that a little bit more later.
00:17:13.320 - 00:17:29.706, Speaker B: So, yes, additionally, we can even have more fun. And maybe it's not going to have a multi client ecosystem, but we can input this weird mystery VM and boom. Now we've got even more execution engines that we can use.
00:17:29.706 - 00:17:36.490, Speaker B: So that is the first step, right? It's the engine API. The second thing is modular derivation. So first execution.
00:17:36.490 - 00:17:58.242, Speaker B: The second one is derivation or the consensus layer. So back in the good old days, a year and something ago when we were writing our roll ups, we thought that we needed a bunch of smart contracts on layer one to actually derive the roll up. So essentially, you take in L one.
00:17:58.242 - 00:18:12.106, Speaker B: This function is like the roll up function. It produces the layer two blocks. And what we were doing is we were saying, okay, you need layer one and you need some smart contracts on layer one to do some management for you and whatever.
00:18:12.106 - 00:18:29.834, Speaker B: But this meant that the system was actually really brittle. It was really hard to upgrade because you always needed to maintain these layer one contracts. But now what we're doing is we're consuming raw layer one blocks raw layer one block data to produce the layer two chain.
00:18:29.834 - 00:18:55.254, Speaker B: So what does that actually mean? It means that we can swap in because it's just like a raw stream of data. We can swap in new data sources like EIP 4844 or even plasma, right? Things like off chain sources of data. So this allows us to both a scale up, be ready for when we're improving layer one, because we're pushing forward EIP 4844, which is a major improvement to layer one.
00:18:55.254 - 00:19:18.734, Speaker B: But we're also able to support things like layer three. And finally, modular proofs with Canon. Canon, it generates the execution trace over the client and it allows us to prove that execution trace, but we can prove an execution trace with either fault proofs or ZK proofs, right? These two things totally work.
00:19:18.734 - 00:19:50.114, Speaker B: The ZK proofs might be too expensive right now, but that's something that we can work on over time. And importantly, right, importantly, bedrock again supports multiple clients. And multiple clients is incredibly important to support production, high security chains, and specifically to support fault proofs and ZK proofs without big bad upgrade keys, right? We need our upgrade keys to be upgrade and then you wait like two months because you can actually withdraw.
00:19:50.114 - 00:20:07.262, Speaker B: And we need them to make sure that the mechanism that allows people to withdraw from layer two in case there's a malicious upgrade, we need to make sure that that mechanism will never break. And the only way to make sure that mechanism will never break is with multi client support. So there we go.
00:20:07.262 - 00:20:18.900, Speaker B: More information on that in our Pragmatic path to decentralization because we need to get rid of those upgrade keys. We need to not be multi SIG roll ups anyway. Great.
00:20:18.900 - 00:20:37.774, Speaker B: This evolution, right? The state of affairs, this madness with these bridges going crazy and these different chains and this terrible user experience. We're already making progress there, right? Bedrock release is fast approaching. We're about to take a massive step forward in the op stack.
00:20:37.774 - 00:20:47.734, Speaker B: Additionally, we already have multiple op based chains, so this is not even like an X. We need more op chains. Literally.
00:20:47.734 - 00:21:02.606, Speaker B: We accidentally had people deploying op chains just because we were writing our software out in the open. And additionally, we've got teams experimenting with bedrock, pushing the boundaries of what was possible on chain. Right.
00:21:02.606 - 00:21:21.266, Speaker B: We're going to break through. Even the scalability that we have today is not even close to what we're going to have tomorrow. It's like you don't think about the resource constraints on AWS unless you're a massive crazy team, but you don't really think about the scalability constraints on AWS.
00:21:21.266 - 00:21:49.994, Speaker B: As an average individual, you should not be thinking about the scalability constraints as you're transacting or deploying DApps to a blockchain. This is just the beginning, right? We are about to take over with the zombie horde of gerbils generated by artificial intelligence. We will take over the game and soon we will realize the final evolution of blockchain walmart.
00:21:49.994 - 00:22:06.542, Speaker B: No, I'm just kidding. We will finally realize the super chain thanks to the op stack because we're working together to solve the problems in a secure and scalable way. Hallelujah.
00:22:06.542 - 00:22:19.450, Speaker B: We're going to provide that good user experience to us because we're the users too, you know? And the rise of the superchain. That's it. And by the way, this is also a super chain image, but including a gerbil.
00:22:19.450 - 00:22:34.560, Speaker B: I just love the way that these AIS, or like Dolly specifically cannot spell it's so good. Anyway, thanks everybody. I guess we don't have that much time for questions, but happy to answer them.
00:22:34.560 - 00:22:41.326, Speaker B: Let's go. All right, that's it. I mean, I don't know.
00:22:41.326 - 00:22:55.970, Speaker B: I'm now in my room. I still feel like I'm in my room. Is there a place I should be looking for for questions? Do we have a couple? I don't know.
00:22:55.970 - 00:23:03.202, Speaker B: I don't even know. I don't know where I am. Well, I feel so alone.
00:23:03.202 - 00:23:07.800, Speaker B: Wait, am I oh, it's because I turned off my mic. Because I can't hear. Maybe.
00:23:07.800 - 00:23:13.030, Speaker B: Hello? Okay, fine. I'll just talk then.
00:23:13.100 - 00:23:14.118, Speaker C: Hey, Carl. Sorry.
00:23:14.204 - 00:23:14.662, Speaker B: Oh, great.
00:23:14.716 - 00:23:23.598, Speaker C: No, I think hi, it's me. No, I think I don't see any questions. I think we're good.
00:23:23.764 - 00:23:35.630, Speaker B: How did you find such a cute dog photo? Well, that would be my question. Dog on Google. All right, let's move to Josh.
00:23:36.370 - 00:23:39.150, Speaker C: Okay. Awesome. Carl, thank you so much.
00:23:39.150 - 00:23:42.106, Speaker C: I love your presentations. You're so enthusiastic.
00:23:42.298 - 00:23:43.420, Speaker B: Thank you. You're awesome.
