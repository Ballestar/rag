00:00:07.690 - 00:00:56.206, Speaker A: Hello, I'm Leo, I'm the CTO of Sysmo and today we are going to do a workshop and it's I think a pretty exciting one because we are going to live code and deploy a CB resistant AirDrop from privately aggregate data are. And so this might seem somewhat easy, but in fact not that easy because we are going to use to give on this AirDrop some amount of token that depends on the data you are able to share. And this data can be on different accounts and using zero knowledge proof we are able to only disclose the data we want without revealing the account.
00:00:56.206 - 00:01:28.810, Speaker A: So in its core it will have civil resistance, privacy preserving data aggregation, so aggregation from data from your very private wallet, your public ENS from GitHub account, Twitter account and stuff like that, without linking these accounts. And at the end you will have a double spending protection also to avoid to be able to mint this token a lot of different time. So I propose to answer directly in the demo so you understand what happens directly.
00:01:28.810 - 00:01:45.138, Speaker A: And so let's go. So all of this has it's called isrope all is open source. You have a case study with it which is very detailed.
00:01:45.138 - 00:02:00.754, Speaker A: So you can later I will send the QR code and the link at the end of the workshop, but you can dig into it and more understand the concept. So we will see different important ones. So when we launch the app, we see that we have a claim token page.
00:02:00.754 - 00:02:18.790, Speaker A: This claim token depends on action you made, for instance here inside the Sysmo community. So to have your token you need at least to be part of the CISMO community member group. I will explain you what are groups later.
00:02:18.790 - 00:02:37.594, Speaker A: You need also to have the Gitkin passport holder with more than 15 for CB resistance. And then you have also optionals data you can share that will increase your amount of token. For instance, you can show that you were early committee members on CISMO, that you used a factory which is a product of Sysmo.
00:02:37.594 - 00:02:54.820, Speaker A: I will show you later. And then you put just Grace where you want to receive this and you are going to prove that you have this different data using sign in with Sysmo and Sysmo Connect. That again, I will explain you later how it works.
00:02:54.820 - 00:03:13.374, Speaker A: Yeah, just here we need a WiFi. Okay, so here I arrive on my Sysmo data vault. I am redirected it's like a password manager where I have all my accounts that I imported once when I created my Sysmo data vault.
00:03:13.374 - 00:03:43.506, Speaker A: I can import other accounts whenever I want, like a password manager. And then here Sysmo Connect show me that safedrop wants me to share some information and this different data, different information will be taken from what we call data gems. These data gems are just data you are going to share and with anonymization around the owner of this data.
00:03:43.506 - 00:04:01.986, Speaker A: Typically here, this data, I have it from one account, but the other one, the factory users it's from another account. And by sharing all of that, I won't make any link using zero proof. So I can aggregate data from my very private wallet and some other from public wallets.
00:04:01.986 - 00:04:31.960, Speaker A: So I do generate the capproof. So here it belongs because it download all the groups of data of all the holders of the different data gem in the browser. And what happens here is that you generate ZK proof or you prove who you are inside this group without revealing this account.
00:04:31.960 - 00:04:42.396, Speaker A: So if the WiFi is slow, it takes a long time to download all the groups, basically. And these groups are maker tree. I will explain you later.
00:04:42.396 - 00:05:18.730, Speaker A: But this is how the zero niche performs. Okay, so here I share all the information. So we see that we have so I'm connecting my token, sorry, I need to change my network.
00:05:18.730 - 00:05:37.966, Speaker A: But here we see that I'm available for 400 R token. I will redo the flow and hide some information and you will see that it decreases. For instance, here I won't show that I am a Sysmoral user and that I am a factory users.
00:05:37.966 - 00:05:52.770, Speaker A: And I can do again ZK proof. Hope it will be faster this time. So now I have less token to claim.
00:05:52.770 - 00:06:24.970, Speaker A: Let's claim it. The contract was deployed on Polygon and so what we're going to do during the workshop is to code the Sysmo community group and the KitcoIn passport groups and live deploy these contracts and test it at the end. Okay? So just a bit of theory to explain what happened.
00:06:24.970 - 00:06:51.148, Speaker A: So in CISMO, you have this CISMO data vault where you can import all your accounts. Here we can see that I imported my Leonet 21 east address where I have my ENS, my GitHub passport, because my GitHub passport all the different very public account I have my Twitter, my GitHub, I have also proof of humanity, which is inside. So all of that are already docked.
00:06:51.148 - 00:07:09.968, Speaker A: But on Sysmo, I'm doing stuff with my very private wallet, so I don't want anyone to know it. When I import this, what we call data sources into the CISMO data vault, I can then share this granular piece of data. So this is called the data gem.
00:07:09.968 - 00:07:29.272, Speaker A: The data gen is just a granular surrendering data. Here it will be okay. On the Gitcoin passports groups of all the holders of a Gitcoin passport, I have a 42 as a score inside it on my new using Sysmo Connect, which we call a crypto native SSO.
00:07:29.272 - 00:07:39.836, Speaker A: It's like a communication protocol. Between my very personal data and application, I am able to granularly reveal this data. So here we see again the flow.
00:07:39.836 - 00:08:14.908, Speaker A: I sign in with Sysmo from an app I'm redirected to my Sysmodata vault. I agree to share different data and then I'm redirected to the application that so what I can do exactly from this system data vault it's having a request of an authentication. For instance here I can prove that I own the Leo 21 east address but I can prove also that I own a GitHub account, a twitter account and something else that is called a vault vault ID.
00:08:14.908 - 00:08:44.960, Speaker A: I will explain you later how it works and you can share some data gems. So just disclose that I am part of the Gitcon passport groups with a score that is more than 15 but the application won't know that I have 42 in fact and that I am also CISMO community members but the application won't know from which accounts I am a CISMO community member. And finally I have the message signature which is at the end and it serves to embed user intents.
00:08:44.960 - 00:09:18.160, Speaker A: For instance you can say for example for voting you could say I agree or I disagree. So it's really to embed user sentence. Here I will put my Leo 21 east address because I'm claiming my token on this address and it's used for avoiding front running of my proof because otherwise my proof could be front run by other address and claim for myself the token.
00:09:18.160 - 00:09:36.020, Speaker A: Okay, so in Sysmo connect what you are doing is just selectively disclose some data. It was using zero mesh proof. So you have a prover in the Sysmo data vault and the application adds a verifier and verifies this proof.
00:09:36.020 - 00:09:44.728, Speaker A: So here if I take back my data gem, I show you later. Sorry, my data gem. I showed you before.
00:09:44.728 - 00:10:05.404, Speaker A: I had a Gitcoin passport on my Leo 21 with a value of 42. Using zero knowledge proof, I can granularly selectively disclose that I have a score that is more than 15, and it's an and we don't know which account. Basically all of this works using snapshoted on core groups.
00:10:05.404 - 00:10:35.400, Speaker A: So in Sysmo you need to generate the groups, the Sysmo data groups, with all the order of a Gitcoin passport and with the different values that it has, the different score that it has in the same way in the small contributor. You have a different level to have, different amount of token in the safe results I show you before and you can disclose which value you have. All these groups has a group ID.
00:10:35.400 - 00:11:05.884, Speaker A: I will show you later when we will code how to retrieve a group ID and how to create these groups using our factory or directly using our repository which is an open source repository. So finally this Sysmo connect the flow I already show you but it's very simple. You have a button in your front end, you do a Sysmo connect request where you request the data you want the user generated in his Sysmo data vault it generates a CK proof.
00:11:05.884 - 00:11:18.520, Speaker A: The response which is in fact the ZK proof is sent back to the application that can verify it. It works on chain. We are deployed on eleven chains so Mainet, Polygon Usage, Arbitram, et cetera.
00:11:18.520 - 00:11:45.804, Speaker A: And it also works off chain. So you have a TypeScript package that can install into your application to verify zero proof so systemo connect response. So now we are going to do these slides and to start this project we are following a tutorial that we have made, which is an hour documentation.
00:11:45.804 - 00:11:55.592, Speaker A: I'm going to show you. So in build with CISMO connect. Here we have all our tutorial.
00:11:55.592 - 00:12:31.444, Speaker A: The unchained one which is build a civil resistant AirDrop from privately aggregated data is basically what we are going to do. So I already set up I already set up some the repository so we don't have to do it with the time we have. So when you launch it, you are redirected to this page.
00:12:31.444 - 00:12:38.160, Speaker A: It's the main page. So it's a bit different from this one. It's a bit different from the savezot.
00:12:38.160 - 00:12:54.040, Speaker A: It's a very easy template to start with. You have only the Sysno connect button inside it, which is here. And we are going to create this request that allows us to have the data we want for the save drop.
00:12:54.040 - 00:13:10.864, Speaker A: So here we first want to generate this type of request. So we want to have the proof of a vault ID. I will explain you later.
00:13:10.864 - 00:13:27.120, Speaker A: What is it? Share data that you are a CISMO community member and that you have a GitHub passport, more than 15. So let's come back to our repository. So when we do claim with CISMO.
00:13:27.120 - 00:13:39.128, Speaker A: So here I've just launched it. I'm redirected to this page so I can see that I have only connect to saved drop. So it's not the good application.
00:13:39.128 - 00:13:47.900, Speaker A: I need to create an application using the factory. We are going to do it just right now. And here I'm only sharing the user ID.
00:13:47.900 - 00:14:04.300, Speaker A: But we are going to add also the different proofs that you want to send back. So here let's go to start by beaming the right application. So for that we need to go to the factory.
00:14:04.300 - 00:14:24.772, Speaker A: The factory is a UI tool for developers to use CISMO and to have access to different tools. So the first one is to create Sysmo connect apps or to retrieve your existing one. And then we have the sysmo data groups I showed you before and we are going to dig more into this after.
00:14:24.772 - 00:14:34.330, Speaker A: So let's start from the application. Here you can see I've already created it. So I have an application ID I will be able to embed into my project.
00:14:34.330 - 00:14:41.948, Speaker A: You can update it. It's very easy to do. You just have to enter the name, description, a logo and you create it.
00:14:41.948 - 00:14:54.528, Speaker A: It's done right away. So here I'm taking the app ID. So in the Sysmo connect on chain tutorial, I'm going to the main page here.
00:14:54.528 - 00:15:11.008, Speaker A: So inside it you have this directory structure. It's basically a react app, a next JS react app with foundry. So here you have CRC AirDrop.
00:15:11.008 - 00:15:20.676, Speaker A: The contract I will show you later. And here you have the front end with the main page. So at the beginning so all of this is explained in the tutorial.
00:15:20.676 - 00:15:36.844, Speaker A: If you want to do it after, you will have all the steps that is very detailed. To begin with we need to so let's try to find the system collect button which is here and we have the config to define. We start by defining the app ID.
00:15:36.844 - 00:16:02.510, Speaker A: So this app ID here is the one with for the tutorial. We are going to replace it with our new app ID. Let's come back again to our repository, our page doing claim with Seismo and now we see that we have connect to safedrop is global Waterloo.
00:16:02.510 - 00:16:26.278, Speaker A: So let's go back here for what we want. So we want to prove ownership of a vault ID, share data from Sysmo community and Gitcoin passport more than 15. So what is exactly this vault ID? So this vault ID, so I have defined it here.
00:16:26.278 - 00:16:59.470, Speaker A: Basically inside your CISMO data vault, you all have a vault secret that was generated when you created your Seismo data vault cell. We just show you that you have an app ID for each app that do a Seismo connect exchange. When you do this and you request a vote, we are hashing in zero knowledge pools inside the proof, the vault secrets and this app ID and also a derivation key is not very important for here it's zero by default.
00:16:59.470 - 00:17:35.506, Speaker A: But by hashing a vault secrets and this app ID, I will have a unique vault ID that is a bit like a user ID that is available for the application and that you can use as a user. So it's really like a unique number deterministic unique number that I generated using my Sysmo data vault. So in the case of the save drop, we are going to use this vault ID as a nullifier for the AirDrop.
00:17:35.506 - 00:18:05.390, Speaker A: What it means is that thanks to this you will be able each time you do the Sysmo connect flow, you will have always the same voltage. So by saving this vault ID, we know that you are already claiming your AirDrop and we are even going to so instead of creating a mapping for that, we are even going to use it as the token ID inside the ERC 20 airdot token. So my token ID will be sorry, it will be just nullified in a mapping.
00:18:05.390 - 00:18:17.366, Speaker A: We will show you, we will get it later. So here that means we already have the beginning. That means we already have our vault ID.
00:18:17.366 - 00:18:37.370, Speaker A: Now we need to add the claims. So let's add our claims and our claims are group membership. So here what it means is that I need to find my groups.
00:18:37.370 - 00:19:00.226, Speaker A: For that I'm going to the factory and going here you have the Sysmo data groups inside CISMO. So you can look here. So, here are all the groups that was created and we can search for the Sysmo community and we find it here.
00:19:00.226 - 00:19:13.842, Speaker A: So we have the group ID here. So these groups, you can take a look at what is inside. So inside you have all the data gems of all the users of the small communities.
00:19:13.842 - 00:19:43.146, Speaker A: I did some things I will show you later, what is it and the value you can see when it was generated, when will be the next generation and how it has been generated. So for this you can click on the data group generator. It's a bit like an infra as a service where you can just code the way you are going to generate these groups and that will run at a specific frequency.
00:19:43.146 - 00:19:57.086, Speaker A: For instance, here, this group generator will run at a daily frequency and execute this code and send back the groups. All of this is open source. You can take a look at all the groups.
00:19:57.086 - 00:20:14.490, Speaker A: So some groups has been generated using the factory, others has been directly coded and did a pull request into the CISMO hub. So I will show you how you can create a new data group. So, to create a new data group, you need to add the name.
00:20:14.490 - 00:20:31.130, Speaker A: For instance, here I can say leo, France. And you can add how you are going to have these group members. So you can add eligible accounts.
00:20:31.130 - 00:20:51.000, Speaker A: To add eligible accounts, it can be very easy, like putting your lists of the different accounts. These groups can be also hybrid. So for instance, I could put my GitHub account, I could put some Twitter account, and you have also a Telegram account.
00:20:51.000 - 00:21:09.468, Speaker A: You can also add a value level for each account. For instance, I will say one for this one, three for this one, et cetera. So this is a way to add data.
00:21:09.468 - 00:21:27.004, Speaker A: So here it's just static data, so it can't be really interesting. But you have data providers inside these data groups that will help you to fetch data from the outside world. So here you have a full list of data providers.
00:21:27.004 - 00:21:47.050, Speaker A: For instance, we can say, okay, we are going to use the GitHub data providers to get all the contributors of a repository. So for instance, we can take more. It will find 66 eligible accounts and put them inside the group.
00:21:47.050 - 00:22:04.140, Speaker A: And here you have some descriptions, bit like metadata around the groups. And then you can just deploy it. When you do this, it will automatically generate a pull request on this repository which is open source.
00:22:04.140 - 00:22:22.550, Speaker A: And this pull request contains all the Sysmo data group and how the data are generated. So, let me show you. Here we can see that this group was generated with a factory.
00:22:22.550 - 00:22:43.210, Speaker A: It used in all groups and sends this as a data. So we can dive into all of this after. So, okay, let's now go to add our seismo community members and Gitcoin holders.
00:22:43.210 - 00:23:18.890, Speaker A: So we take the group ID here, put it just here and now we want our Gitcoin passport holders. Let's search for Gitcoin passport holders here we can show how it is generated the same. So we see that we are querying a Gitcoin passport API to generate the group and we put it here.
00:23:18.890 - 00:24:16.010, Speaker A: Okay, let's go again. Now we are pretty happy because we have so our Volta ID, user ID, our system community and the GitHub passport here we are only sharing that we have more than one. So we want to request only more than 15 for CB resistance so we can just in our request add claim type okay, so GitHub copy do it for me, it's height greater than or equal 15 okay, I get back do it again and now we are good.
00:24:16.010 - 00:24:41.244, Speaker A: If you are not inside the groups and you want to test and develop the full flow, we have a feature in the configuration that allow you to impersonate some accounts. So I will show you. Here you can put the list of addresses you want to impersonate, and the Sysmo DataBot will contain all of these accounts.
00:24:41.244 - 00:24:56.036, Speaker A: So let's do it again. And I do claim with Sysmo, I am now in impersonation mode, so it's a very specific mode. And in my system data vault, I see all this account.
00:24:56.036 - 00:25:16.890, Speaker A: So if you want to, I don't know, do, for instance, nouns their holders as information you want to share. You can go to the group, search for a user inside that is eligible and impersonate this account. You could, for instance, take this one and impersonate it.
00:25:16.890 - 00:25:58.040, Speaker A: So I will remove this. So now that we have done our request, let's go here we want to verify inside our contract this request and to give the mint so we go to our Erdora contract and what we need to do is to have exactly the same request that is coding into the contract. So why that if someone gives you a proof, this proof in itself doesn't mean anything.
00:25:58.040 - 00:26:33.412, Speaker A: This proof means something in the regard of a request. So inside the Sysmoconnect library that we implement for the contract we will verify that this Sysmo Connect proof is valid, verifying the ZK proof but also that it's zero knowledge proof that was made for these groups, same for the App ID. So here I need to take the same App ID that I put in the front end so this is very important otherwise it won't works because it won't correspond both front end and back end.
00:26:33.412 - 00:26:55.880, Speaker A: The contract need to be equal. Here you see our address, that is ERC 20 and you implement the CISMO Connect library here and by implementing the Smoke Connect library you have also the constructor where you use the App ID. This is how the App ID is passed to the library.
00:26:55.880 - 00:28:00.850, Speaker A: Okay, so now we need to do the request so the same thing that we have done but here so we are going to add the claim request. Okay so we have claims zero, that is a group ID or we will put our group ID here so we have public okay he's doing for me nice sysmo community members group we know that I did it a lot of time, let's verify it's exactly the same. So CISMO community members groups here it's okay and the Gitcoin passport here is a good one so I'm pretty happy I will change like that.
00:28:00.850 - 00:28:31.326, Speaker A: Okay so here I will put directly the CISMO community members and for the claims one. Okay nice. So we have the group ID bitcoin passport holders value 15 and greater than or equal here we will verify the response, the system connect response which is passed here as an argument to be sure that it's valid.
00:28:31.326 - 00:29:02.394, Speaker A: So we need to add also the claims which we have just declared before. And so if the result is valid, we continue here, we extract the vault ID, we nullify the vault ID as already claim, so it's made here and we verify that the vault ID was not used before. And we mint to the standard the amount.
00:29:02.394 - 00:29:37.160, Speaker A: Here we can see also the signature which contain inside my address. And it's used to avoid the font running I told you about. So here I just need also so as I have multiple claims, I also need to put an array here so the OD request k okay so now we are pretty good for the contracts, I'm just checking that this is good.
00:29:37.160 - 00:29:53.770, Speaker A: So we have the app ID and we have the same OD and claim so I think we are pretty good. Okay now let's deploy. So in the tutorial we have all the step for you to deploy.
00:29:53.770 - 00:30:20.206, Speaker A: I have already set up a mnemonic here to gain some time. We are using foundry so we just have to do A forscript deploy abroad. We have our RPC already set up, we are going to send it and to verify so let's go once during the time it's deploying I will change here the address.
00:30:20.206 - 00:30:39.290, Speaker A: So here we were using a Mumbai fork in local so I will put the ID of the chain. So this is a Webme configuration you may already know and I need to change to use polygon. So all of this is explained in the tutorial.
00:30:39.290 - 00:31:08.280, Speaker A: So it seems to have been deployed and now it's verifying the contract. So let's go checking. So 18 seconds ago it's here, now it's deployed and we can see that we have our app ID community and we have all our code.
00:31:08.280 - 00:31:46.200, Speaker A: So let's go back now to our front end, switch to polygon and claim with Seismo. So here we are not in impersonation mode so you can see here my accounts generate the proof and claim the AirDrop. So it's working.
00:31:46.200 - 00:32:18.160, Speaker A: Let's send this going again to the transactions and we can see it here. So ETOs can polygons can claim with CSMO and we see our I think I need to go here. And it's not well indexed for now, but yeah, we can see that.
00:32:18.160 - 00:32:47.954, Speaker A: We had our adult token of 100 here, so the full case study is available here, as I show you at the beginning, you can deep dive more on when we add different level, when we add different groups, ID how we compute the final amount of token here. It was only 100 and yeah, thank you for your time. Enjoy your hacks.
00:32:47.954 - 00:32:57.880, Speaker A: And maybe we have any questions available or I don't know if we have the time. No, we don't have the time. Okay.
