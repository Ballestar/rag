00:00:07.930 - 00:00:11.070, Speaker A: My name is Jess. I am the Devral at Arbe.
00:00:12.930 - 00:00:16.126, Speaker B: Hey, guys. I'm Miguel Martinez. Thanks for coming.
00:00:16.126 - 00:00:25.638, Speaker B: I'm contract developer at Ave Companies. We have been involved in the development of goal and yeah, we are here for that.
00:00:25.724 - 00:00:38.600, Speaker A: Yeah. So today we're going to be talking about Go, a decentralized multi collateral stablecoin native to the RA protocol. We're going to be looking at an overview, how it works and then Miguel's going to go into some live.
00:00:42.490 - 00:00:45.110, Speaker C: Sorry, it's hashtag.
00:00:49.700 - 00:01:04.972, Speaker A: So, yeah, firstly, to look at why we built Go, we should touch on stablecoins. So, stablecoins are so important to the DeFi ecosystem. They offer a fast, efficient and borderless way to transfer stable value on the blockchain.
00:01:04.972 - 00:01:21.464, Speaker A: So currently, despite the demand, there is still a lack of decentralized stablecoins. So this moves us on to what is Go? So, Go is a decentralized multi collateral stablecoin transferred and native to the ARV protocol. It's very wordy.
00:01:21.464 - 00:01:39.436, Speaker A: So what does this mean? Go does not have a single point of control. So Go is controlled by the RV governance and the protocol community. So Go leverages the existing RV governance framework to provide transparency and verifiability.
00:01:39.436 - 00:01:47.590, Speaker A: So it means that everything is on chain. You can see the changes that happen. So this can be with interest rates and Facilitators and more.
00:01:47.590 - 00:02:13.176, Speaker A: So the multicolateral side of things, typically assets can be sorry, minting stablecoins can buy a single asset backed vault. So Go instead is backed by various types of supplied collateral assets. So this creates flexibility for a user.
00:02:13.176 - 00:02:33.168, Speaker A: So it means that a user can just mint based on their entire portfolio. And Go is native to the Ari protocol. When building, it was clear that there was a lot of functionality in the existing system, so things like liquidations and supplying.
00:02:33.168 - 00:02:57.766, Speaker A: So it kind of works very well, like just fitting natively as a new asset. Um, so how does Go work? Go is an ERC 20 token designed to maintain a stable rate pegged to the US dollar. So you can still supply collateral, you can borrow Go and then repay Go debt.
00:02:57.766 - 00:03:20.070, Speaker A: So yeah, as you can see from the diagram, this is what happens in the protocol. So some of the stability mechanisms that happen with Go, the RV protocol will always value the one Go at the equivalent value of one USD.
00:03:23.450 - 00:03:26.966, Speaker C: Sorry, is it better?
00:03:27.068 - 00:04:04.638, Speaker A: Prove me and then flash minting? This provides the same functionality as the current flash zone mechanism in the Arrow protocol and is very important as it helps facilitate Arbitrage, which is a very important stability mechanism. So Go also introduces the concept of Facilitators. So a Facilitator is a protocol or an entity that can trustlessly Mint and burn Go tokens RBI governance and the community must approve Facilitators.
00:04:04.638 - 00:04:27.894, Speaker A: So this is linked to the decentralization, as I mentioned before, and they set the limits, for example, the upward limit of Go that can be minted. And it has been proposed to the Ave community that when Go is launched on the Ethereum main net that the Ave V, three ethereum pool and a flash mint facilitator will be the first facilitator.
00:04:27.942 - 00:04:28.780, Speaker C: So guys.
00:04:34.110 - 00:04:45.998, Speaker B: So regarding integrations, so the question is how do you integrate or how do you interact with the average protocol and Go? Well, there is plenty of things, plenty.
00:04:46.014 - 00:04:48.466, Speaker C: Of ways sorry to interact with that.
00:04:48.648 - 00:04:54.340, Speaker B: If you are a smart contract developer, you can make use of all the NPM packets available.
00:04:55.830 - 00:04:57.794, Speaker C: There are two or three for the.
00:04:57.832 - 00:05:13.980, Speaker B: Avid protocol itself, but there is also one for Go. You can install it in your repository. It doesn't matter if you are using Hardhat or foundry, you can install it and you will get benefit of all the contracts there.
00:05:13.980 - 00:05:18.806, Speaker B: In case you are building a front end, you can use all the NPM.
00:05:18.838 - 00:05:20.170, Speaker C: Packets available as well.
00:05:20.240 - 00:05:58.210, Speaker B: There is a JavaScript SDK that is very useful and it comes with very handy functions to interact with the protocol. Also with Go you can submit transactions, also make use of functions to fetch data and it's also very useful when you need to transform or manage units of the assets. And in case of the data analytics you want to fetch all the data, not only live data but you are also interested on historical data.
00:05:58.210 - 00:06:07.210, Speaker B: You can use subgraph, there is one for Abe and also one for Go. So yeah, there is also very useful.
00:06:10.110 - 00:06:14.810, Speaker C: So here we have some simple examples.
00:06:14.890 - 00:06:46.790, Speaker B: Of how you can use the JavaScript SDK to interact with Go and also with the Ave protocol. So as Jess mentioned, the Ave protocol works as a facilitator within the Go token which means that the Ave facilitator will be able to mint Go and in order to do that, users needs to provide some collateral to the protocol and after that they will be able to mint Go from there.
00:06:46.940 - 00:06:52.134, Speaker C: So they will effectively borrowing Go against their collateral.
00:06:52.262 - 00:07:06.666, Speaker B: So the first thing that they need to do is first supply some collateral to his position. So their position, sorry. So in this case we are making use of the deposit function of the JavaScript SDK.
00:07:06.666 - 00:07:10.446, Speaker B: We need to pass all the parameters needed, like for example the address of.
00:07:10.468 - 00:07:13.434, Speaker C: The user, the address of the reserve.
00:07:13.482 - 00:07:30.454, Speaker B: That we want to deposit into the protocol. In this case we can say that we are supplying dai also the amount and also the on behalf of the on behalf of is a particular let's say a special variable that allowed us.
00:07:30.492 - 00:07:31.880, Speaker C: To set.
00:07:33.930 - 00:07:40.138, Speaker B: The user that is going to be benefit from the action. So in case you are interacting in.
00:07:40.144 - 00:07:41.722, Speaker C: Your own behalf, you need to pass.
00:07:41.776 - 00:07:43.740, Speaker B: There your own address.
00:07:44.350 - 00:07:45.100, Speaker C: So.
00:07:46.830 - 00:07:50.794, Speaker B: Once we deposit some assets, we.
00:07:50.832 - 00:07:53.838, Speaker C: Can just borrow some Go and in.
00:07:53.844 - 00:08:04.722, Speaker B: A similar way we just need to pass the appropriate parameters there like the address of the user, the on behalf of, also the address of the Go reserve. And it's important to note as well.
00:08:04.776 - 00:08:13.506, Speaker C: That the interest rate mode should be variable. Also the interest rate of Go is.
00:08:13.528 - 00:08:22.818, Speaker B: Going to be fixed and controlled by the Abe governance. Implementation wise. The Go reserve is using a variable depth token.
00:08:22.818 - 00:08:32.220, Speaker B: So we need to set there the variable red mode. And yeah, in case you need to.
00:08:32.590 - 00:08:35.082, Speaker C: Repay some of the debt, you always.
00:08:35.136 - 00:08:47.498, Speaker B: Can call the repay function that allows you to increase your health factor by paying back your debt in a similar way. You just need to pass the appropriate.
00:08:47.514 - 00:08:55.106, Speaker C: Parameters there and it will work. So this is very useful if you.
00:08:55.128 - 00:09:12.118, Speaker B: Need to integrate Go and you are building your front end for that. But in case you want to make it work from the contract side, you will need to write solidity of code. So that's what I'm going to do now.
00:09:12.118 - 00:09:20.186, Speaker B: I'm going to try to do a little live demonstration of how you can build little code to interact with the.
00:09:20.208 - 00:09:30.460, Speaker C: Other protocol and Go. So, yeah, let's try it out. Can we switch? Nice.
00:09:30.460 - 00:09:35.502, Speaker C: Take it. Thank you. Hey.
00:09:35.636 - 00:09:50.242, Speaker B: Okay, so yeah, I created this repository which is called Gostable Can Gorsop. I will post the link in the discord channel so you guys can have access to it. In this workshop, we are going through.
00:09:50.296 - 00:09:55.220, Speaker C: All the steps to learn how to.
00:09:55.750 - 00:10:08.614, Speaker B: Gripe our smart contract. Sorry, the smart contract to interact with the Go stablecoin and also the Abe protocol. So we are going to use a foundry project.
00:10:08.614 - 00:10:27.166, Speaker B: So if we run this first command, we will scaffold the project where we are going to set up all the configuration needed. And also we will have also the project directories there. What I'm going to do here is.
00:10:27.188 - 00:10:30.510, Speaker C: Just I'm going to create a test file.
00:10:31.410 - 00:10:44.878, Speaker B: I'm going to create a test per use case. We are going through two use cases here. The first one is going to be minting Go based on the collateral that the user deposited in the Abbey protocol.
00:10:44.878 - 00:10:50.374, Speaker B: And the second one will be becoming a facilitator. So you can mint Go to a.
00:10:50.412 - 00:10:52.280, Speaker C: Friend or someone else.
00:10:54.970 - 00:11:16.430, Speaker B: Yeah, I took the liberty to set up the project already so we can save a little bit of time. So if you'll follow the steps here that are explained the getting started, you will get reached to a point where you will have this solidity contract with two functions.
00:11:16.930 - 00:11:17.680, Speaker C: Sorry.
00:11:19.890 - 00:11:26.322, Speaker B: So as I said, there is going to be two test cases. One for becoming a facilitator and another.
00:11:26.376 - 00:11:33.698, Speaker C: One for minting Go. So before the test cases, I made.
00:11:33.784 - 00:11:46.166, Speaker B: Some configurations and some initializations here in the contract. First I initialized some contracts that we will need. The Dai token, the Go token, and.
00:11:46.188 - 00:11:47.698, Speaker C: Also the pool contract.
00:11:47.874 - 00:11:50.226, Speaker B: For those that don't know, the pool.
00:11:50.258 - 00:11:52.754, Speaker C: Contract is the main point of interaction.
00:11:52.802 - 00:12:06.560, Speaker B: In the Ave protocol. So, yeah, this contract contains all the core logic and user facing functions. So if you need to perform any kind of action in the protocol, you will need to directly call.
00:12:08.450 - 00:12:09.710, Speaker C: To this contract.
00:12:10.130 - 00:12:16.946, Speaker B: I also initialized an EOA account. I call it we.
00:12:17.048 - 00:12:17.700, Speaker C: Right.
00:12:18.150 - 00:12:21.886, Speaker B: And I also top up that account with some die.
00:12:21.918 - 00:12:23.460, Speaker C: I'm doing that here.
00:12:24.630 - 00:12:32.150, Speaker B: We will run this test in a fork network. So we are going to use the.
00:12:32.220 - 00:12:35.218, Speaker C: Deployment of Go in the Godly network.
00:12:35.314 - 00:12:41.130, Speaker B: So we are here specifying that we are using that network and also specifying the block height.
00:12:41.710 - 00:12:44.650, Speaker C: And there is one only last thing.
00:12:44.720 - 00:12:52.910, Speaker B: That we are going to do before the test. We are taking the control of the Go token. So more on this later.
00:12:52.910 - 00:13:03.070, Speaker B: But this will allow us to allow us to perform some special entities that are usually controlled by the other governments.
00:13:04.230 - 00:13:08.562, Speaker C: So yeah, first we are going to mint some Go.
00:13:08.616 - 00:13:18.846, Speaker B: So as I said before, the user needs to provide some collateral in order to mint Go and effectively borrowing Go.
00:13:18.968 - 00:13:22.742, Speaker C: From the Ave pool. So what we need to do here.
00:13:22.796 - 00:13:29.974, Speaker B: Is call this apply function of the pool. I'm going to check the function in.
00:13:30.012 - 00:13:33.834, Speaker C: The pool interface so we can see.
00:13:33.952 - 00:13:36.710, Speaker B: What are the parameters that are needed to be passed.
00:13:36.790 - 00:13:54.930, Speaker C: So we need to pass the asset, the amount, the on behalf of and the referral code. Let's do that. So, pool supply, we are supplying die, right? Let's supply 100 tokens with 18 decimals.
00:13:54.930 - 00:14:00.290, Speaker C: We are acting on our own behalf.
00:14:00.710 - 00:14:02.530, Speaker B: And the referral code will be zero.
00:14:02.600 - 00:14:04.020, Speaker C: It doesn't matter at all.
00:14:04.630 - 00:14:12.742, Speaker B: Before supplying, we always need to approve the transaction, approve the funds. So the Abapool is able to pull.
00:14:12.796 - 00:14:14.358, Speaker C: Funds from our account. Right.
00:14:14.444 - 00:14:16.006, Speaker B: So let's do that as well.
00:14:16.108 - 00:14:27.786, Speaker C: Die approve, approve. We are approving the address of the pool and we are approving 100 die tokens. Nice.
00:14:27.786 - 00:14:35.242, Speaker C: And now it's time to mint and Go. Yeah, let's go. So we will borrow from the pool.
00:14:35.242 - 00:14:48.258, Speaker C: Let's find that function. So we need to provide the asset the amount and the interest rate mode. The asset is going to be Go, the amount.
00:14:48.258 - 00:14:52.526, Speaker C: Let's borrow or mint ten go tokens.
00:14:52.638 - 00:14:54.622, Speaker B: The interest rate mode is going to be variable.
00:14:54.686 - 00:15:08.146, Speaker C: So two in this case, the referral code zero. And we are acting on our own behalf again. And at this point we will hold ten gold tokens.
00:15:08.258 - 00:15:11.350, Speaker B: And yeah, we can just send these.
00:15:11.420 - 00:15:21.486, Speaker C: Gold tokens to our friend. So the address of our friend can be this one. For example, since Go is just a.
00:15:21.508 - 00:15:23.502, Speaker B: Regular ESC 20, we can make use.
00:15:23.556 - 00:15:28.654, Speaker C: Of the regular functions of ESC 20.
00:15:28.692 - 00:15:39.250, Speaker B: Tokens that we all know. So let's transfer one to our friend. Yes.
00:15:39.400 - 00:15:46.040, Speaker C: Ten go tokens. Nice. Let's try it out.
00:15:46.040 - 00:16:02.048, Speaker C: So we are going to run this test. Boom. It's working.
00:16:02.048 - 00:16:08.932, Speaker C: It passed. Nice. Let's do the other one.
00:16:09.066 - 00:16:29.312, Speaker B: So this is just a way to highlight how easy is to interact with the token and the other protocol. It's as easy as checking the contracts, the functions, the parameters that needs to be passed. There is plenty of documentation in the contracts as well and also in the developer docs.
00:16:29.312 - 00:16:33.710, Speaker B: So yeah, it's just a matter to.
00:16:34.480 - 00:16:38.860, Speaker C: Carefully review the parameters and how you are interacting.
00:16:39.280 - 00:16:50.560, Speaker B: The second use case is a little bit different. In this case we are not maybe interacting as a user, we are more like some kind of entity.
00:16:50.900 - 00:16:53.136, Speaker C: So we are becoming a facilitator and.
00:16:53.158 - 00:17:08.596, Speaker B: We are going to mint Go. As I said before, we took control of the Go Token to add a new facilitator into the system. But is usually the Abe Dao in.
00:17:08.618 - 00:17:10.420, Speaker C: Charge of these kind of actions.
00:17:10.500 - 00:17:30.556, Speaker B: So the Abe governance is going to decide in the future who is going to become a facilitator. The first facilitators are the Abe Protocol and also there is going to be a Flask intermodul. But yeah, I'm sure that more facilitators will arise in the near future and there is actually some discussions in the.
00:17:30.578 - 00:17:32.284, Speaker C: Governance forum around that.
00:17:32.482 - 00:17:47.104, Speaker B: So we are becoming a facilitator ourselves. So let's call the facilitator function here. So we need to pass here the address of the facilitator.
00:17:47.104 - 00:17:51.636, Speaker B: So the address that is going to be allowed to mint Go.
00:17:51.818 - 00:18:10.424, Speaker C: And here we need to pass the facilitator struct config facilitator. Here we need to pass the bucket capacity, which is the credit line that.
00:18:10.622 - 00:18:13.230, Speaker B: This facilitator will have.
00:18:13.600 - 00:18:19.070, Speaker C: Let's say that we want to be able to mint 1 million Go Tokens. Why not?
00:18:21.280 - 00:18:29.280, Speaker B: The bucket level at the moment is going to be zero. The level represents the amount of gold tokens that have been minted already and.
00:18:29.350 - 00:18:37.492, Speaker C: We need to provide also a label. East Tokyo. Yeah.
00:18:37.546 - 00:18:46.772, Speaker B: So at this point we are already a facilitator in the system and we will be able to go to our friend again.
00:18:46.906 - 00:18:59.510, Speaker C: So our friend can be this one. So Go Mint friend.
00:19:02.200 - 00:19:03.028, Speaker B: I don't mind.
00:19:03.114 - 00:19:20.890, Speaker C: Can be ten Go tokens or whatever. Let's try it out. It's working.
00:19:20.890 - 00:19:21.864, Speaker C: Nice.
00:19:21.982 - 00:19:58.070, Speaker B: So as you can see, it's very easy to start out with with just a simple foundry scaffold and some setups, some initializations in the project and so on. So hopefully you guys can find this helpful so you can quickly create your own applications, tools, dashboards and projects in general for this hackathon and also in the future. So that's pretty much all guys.
00:19:58.070 - 00:20:08.136, Speaker B: We are looking forward to see what you guys are building during this hackathon. What ideas you come up with. We are around.
00:20:08.318 - 00:20:11.160, Speaker C: There is a booth for Ave and Lens.
00:20:11.980 - 00:20:25.188, Speaker B: Feel free to come to talk with us to see what is going on on the Ave Protocol, the Abe companies or just to chat about the recent news of the crypto ecosystem.
00:20:25.364 - 00:20:26.536, Speaker C: Thanks for coming.
00:20:26.718 - 00:20:40.192, Speaker A: We also have every a lot of ideas on the ETHGlobal page so have a look at there. We're really interested in payments and account abstraction but yeah. Thank you very much for coming and yeah.
00:20:40.192 - 00:20:42.080, Speaker A: Please, come and get some swag.
00:20:42.660 - 00:20:43.550, Speaker B: Yeah, let's go.
