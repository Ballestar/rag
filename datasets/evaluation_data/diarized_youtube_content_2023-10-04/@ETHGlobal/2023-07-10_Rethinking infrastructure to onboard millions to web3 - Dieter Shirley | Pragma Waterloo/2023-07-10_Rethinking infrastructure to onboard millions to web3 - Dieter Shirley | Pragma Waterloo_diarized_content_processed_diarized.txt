00:00:07.610 - 00:00:23.230, Speaker A: All right, well, welcome back to the second half of Pragma. We got the next two and a half hours jam packed with a lot of things that have to do with how the rest of the ecosystem and infrastructure is evolving. So next up is our Fireside chat with theater.
00:00:23.230 - 00:00:35.862, Speaker A: You've all kind of seen a lot of things around ethereum here. We've seen a lot of things around what we need to to help more people get into this space. Scaling is a massive topic, but it's not just about ethereum being the center of all these things.
00:00:35.862 - 00:00:59.226, Speaker A: There's a lot of other attempts, there's a lot of other ways to think about designing infrastructure that scales. And a big part of somebody that's pushing this forward is Dapper Labs. I want to bring on dieter here to kind of explore how we should think about infrastructure that actually helps millions of people come in, especially as we want more consumer, more social applications, want to explore how some of these decisions were made for the flow blockchain.
00:00:59.226 - 00:01:20.446, Speaker A: And how do we think about a world where different blockchains are compatible with each other and are actually adjacent and complementary? So to do all of that, I want to bring on Dieter, who's the co founder and CTO of Dapper Labs. Please welcome Dieter on stage. Good afternoon.
00:01:20.638 - 00:01:22.890, Speaker B: Hello. Hello. Thank you for having me, carton.
00:01:22.990 - 00:01:27.720, Speaker A: I am excited to have a CryptoKitties Dapper Labs reunion here.
00:01:28.490 - 00:01:45.580, Speaker B: Yeah, it was great to see the team members up here. It's nice to see that folks have it's great when folks stay, but sometimes it's even more gratifying when you see your friends and team members go off and do amazing things on their own. So it's great to see you have some of them here today.
00:01:46.270 - 00:02:01.282, Speaker A: I think it's just this community that really wants to kind of come in and give back and honestly just tell others about all the cool things that they can do. I think that's to me, the key thing that actually makes this ecosystem really work really well. It's not just, in a way, just taking and not giving.
00:02:01.282 - 00:02:28.140, Speaker A: It's the fact that because there's only a few of us, they want to hang out with each other more. And when you see opportunities like these more and more in different parts of the world, everybody does come in and interacts with each other and wants everybody else to succeed. My kind of first question to you is, I know we've heard a version of this question from some speakers in the past already, but tell us about your background and how did actually dapper Labs came to be.
00:02:29.870 - 00:02:45.620, Speaker B: There'S a long version and a short version of that. I'll try and not use the longest version of that. So I joined a company called Axiom Zen in 2013, and everyone was sort of gaga over bitcoin at that point in time.
00:02:45.620 - 00:03:21.494, Speaker B: The team there sort of we talked a lot about bitcoin we engaged in some bitcoin hackathons and it was really interesting, but it didn't seem sort of ripe for productizing at that time. So when 2017 came along and we sort of saw what was happening in Ethereum, we decided that we really wanted to build something interesting in that space. And so we actually had like a month long ideation process, right, where a bunch of us would both synchronously getting together in meeting rooms, but also asynchronously just like exchanging messages.
00:03:21.494 - 00:03:34.910, Speaker B: On Slack. We came up with just like, I don't know, like over a dozen ideas of cool applications we could build on blockchain. But one of the weirdest was my good friend Max said, let's put cats on the blockchain.
00:03:34.910 - 00:03:49.314, Speaker B: And that seemed insane to me. And so I literally said to him, what do you mean? He's like, I don't know, but I'm pretty sure we can figure it out. And so that ultimately became CryptoKitties.
00:03:49.314 - 00:04:07.740, Speaker B: And so we built CryptoKitties and we did a bunch of testing. Of course we launched it here at ETH Waterloo. But what's funny about CryptoKitties is that we never expected any kind of success.
00:04:07.740 - 00:04:24.442, Speaker B: And I actually was just talking to some students at lunchtime and they said, what advice do you have for us? Right? Literally meaning students. And I'm like, as long as you do stuff with the intent of learning, you'll never fail. Because it didn't matter whether CryptoKitty succeeded or failed.
00:04:24.442 - 00:04:48.822, Speaker B: We would have learned so much from how Ethereum works, but also how people think about this technology and what appeals to them or doesn't appeal to them about this technology. And of course, building CryptoKitties did teach us a lot. I think it taught us that people want to engage with digital assets that they truly own, rather than existing on somebody else's infrastructure.
00:04:48.822 - 00:05:17.422, Speaker B: They found things like MetaMask and onboarding into crypto, like completely nonsensical and confusing, right? We had millions of people. If we had decent conversion rates and our onboarding funnel didn't include installing a Chrome extension and going through KYC with Coinbase, we would have had a lot more users. But of course, even with the number of users we had, which was probably 100,000 Ish, we ended up overwhelming the Ethereum network.
00:05:17.422 - 00:05:44.860, Speaker B: And so I don't think it was a surprise to anyone that Ethereum had scaling issues, but it really put an asterisk on that. And so both us and I think the whole community really focused on scaling at that point. Our answer, similar to Ilya's answer I just saw Ilia sitting there waiting for his turn, was that we needed to build something fundamentally different.
00:05:44.860 - 00:06:04.674, Speaker B: We built something that we call Flow, and it is a blockchain. And I dare say it's the only blockchain built by somebody who built applications before they built blockchains. And so we were trying to solve the problem of us as DAP developers in terms of what was the platform that we want to build on.
00:06:04.674 - 00:06:21.160, Speaker B: And so every decision point in deciding exactly how our blockchain should be structured was thought of through that lens, both as like, what do we want as developers, but what do we want for our users who are coming to this technology perhaps for the first time.
00:06:21.850 - 00:06:38.694, Speaker A: I think that's great. And actually one thing I want to highlight here is that you're kind of just understating it. But even in 2019, the most popular second best app on terms of usage was like a DFI app compound with like 8000 users.
00:06:38.694 - 00:07:03.570, Speaker A: So in 2018, January, getting 100,000 people to try it out is no small thing because that was a pretty hefty double digits percentage of all of crypto audience. And it was in a way a good moment because for people in the audience that also kind of led to the standardization of ERC 721, which you're one of the co authors of this is now what you know as NFTs. You kind of saw what the limitations are of ethereum.
00:07:03.570 - 00:07:22.134, Speaker A: Everybody understood what gas is set up. We didn't always educate people what gas is and how do you price transactions whether they wanted to know or not. And we kind of figured out what the limitations are if we want blockchains to be the de facto infrastructure back end of everything we want to do and we want to move everything on chain.
00:07:22.134 - 00:07:41.098, Speaker A: Five years ago was crazy, four years ago was slightly less crazy. And we're kind of asymptotically getting to a point where it's actually in a way interchangeable from any other database or any infrastructure. And I want to kind of set the stage for how we want to structure the rest of the conversation, which is effectively cryptokitty's launch.
00:07:41.098 - 00:08:02.150, Speaker A: We saw all the articles around we have clogged the Ethereum pipes, which was a very interesting analogy, but it made sense and that sort of sparked that this clearly isn't working. So what were the things that you really needed to address and walk us through the inception for the features you wanted to guarantee with flow?
00:08:03.930 - 00:08:23.806, Speaker B: Yeah, when we started it, we were mostly just trying to solve that scalability problem. Right. And the solution we ended up coming up with in 2018 actually is not that dissimilar from a blockchain with sort of an intrinsic l two built into it.
00:08:23.806 - 00:09:03.510, Speaker B: Right? So we have a separation between the nodes that are forming consensus and the nodes that are doing the state transition. And so you can think of it a little bit like optimism or Arbitrum, where there's like this one chain that's building the blocks and doing the data availability, and then there's another set of nodes that don't have to engage in consensus, but their job is to do the state transition from hey, here's the input. What's the output? And by doing this, as we all know from optimism and Arbitrum, by doing this, we end up with a system that has much better scaling properties, where we can have thousands of nodes participating in the consensus.
00:09:03.510 - 00:09:36.062, Speaker B: But the fact that those nodes are relatively slow and couldn't possibly have a giant state space, couldn't possibly process tens of thousands or hundreds of thousands of transactions in a second isn't a problem because they're just doing data availability and consensus. And then so long as we have this deterministic state transition function, then we can have a much smaller set of nodes actually executing that without degrading security in any way, shape or form. That was pretty exciting in and of itself to sort of have that insight.
00:09:36.062 - 00:10:04.922, Speaker B: But as we were building it, there were a bunch of other things that we really wanted to address as well. So one of the things that we talk a lot about in Ethereum world these days is account abstraction. Vitalik was mentioning that this morning, and that's something that we sort of also wanted to build into Flow in the early days because it really is bonkers that we're supposed to have this one key for one account and we're supposed to hold on to that indefinitely.
00:10:04.922 - 00:10:39.850, Speaker B: And in a weird way, it's almost a regression from, know, like even of the Use case. I think that Satoshi imagined for it was that, yeah, we would get tokens coming in on a particular address, but every time we spent them, we would use a new address, right? And many bitcoin clients sort of encourage that, moving to new addresses and new keys as you sort of naturally transition along. But in an account based model like Ethereum or Flow, having that one key associated with all of your assets indefinitely is really quite fraught.
00:10:39.850 - 00:11:02.462, Speaker B: I think the biggest thing that we need to see in Web Three is not just the infrastructure, right? So this has been built on Flow for a while now. It's obviously come to Ethereum, but we need the usability, right? Like, we need the apps to appreciate this and support it. We need the wallets to understand it and support it.
00:11:02.462 - 00:11:34.700, Speaker B: We need the users to understand that actually we don't want to live in a world where you have twelve magic words that are copied off of your device into a safe deposit box, but actually each of your devices should be generating its own key that never leaves that device. And then your account has multiple keys associated with it. And when one of your devices gets lost or you add a new device, you use key cycling to add devices to that thing instead of copying this most critical piece of information from one device to another.
00:11:36.350 - 00:12:10.360, Speaker A: But of course, a lot of it was not just a you can break this down into, okay, we got to come up with some better patterns, which is account abstraction, making it one stop shop for them to get access to crypto initially instead of the two step and MetaMask KYC flow. But also a lot of these were not just immediately and default supported on the way we did smart contracts. So you kind of talked about how you set up different sort of validator systems, but what kind of led to the creation of a brand new programming language to now solve a lot of this?
00:12:10.810 - 00:12:24.342, Speaker B: Yeah, one of the scariest steps we took in the development of Flow was to come up with a new smart contract programming language called Cadence. And it was funny. We were talking to one of our investors, and we're like, man, we really don't like EVM.
00:12:24.342 - 00:12:42.586, Speaker B: It seems like Solidity is really quite a terrible language. But the reality is that EVM was designed when people had no idea what blockchains were going to be used for. And so the first draft of anything is never going to be perfect, and we could do so much better.
00:12:42.586 - 00:13:10.230, Speaker B: And it felt like people going to WASM, it was going the wrong direction. It was adopting a programming model that was even less appropriate for smart contracts. Right? Like, WASM is designed to run in your web browser, has a completely different security model than a smart contract environment, and it has to deal with things like network access and file access and memory access, all of which aren't really a thing in Blockchains.
00:13:10.230 - 00:13:24.446, Speaker B: And so one of our investors is like, well, you should just write your own language. I was like, well, you can't just write your own language. He's like, It might be worth it, right? You should just think about it.
00:13:24.446 - 00:13:44.014, Speaker B: And so I grabbed one of our engineers who actually we hired to do iOS development, originally at a Hexium Zen, but he happened to have a master's degree in programming languages. And I was like, hey, do you want to build a programming language? He's like, well, yes, that's my live stream. And I said, okay, well, let's build a better smart contract programming language.
00:13:44.014 - 00:14:08.986, Speaker B: And so he went off and he did a bunch of amazing research, or he uncovered a bunch of amazing research that Carnegie Mellon and some others had done around using linear types in the context of smart contracts. And I'll admit I didn't really get it at so this guy Bastion kept coming to me, and he'd show me these academic papers, and I'd read them, and I'd be brother, like, I've written a bunch of smart contracts. None of this makes sense to me.
00:14:08.986 - 00:14:34.446, Speaker B: And then finally one day it clicked, and I was like, holy crap. This just turns our security model on its head. And the essence of what Cadence does, this resource oriented programming model is it says, look, if you have an asset of value, a data structure that represents value, let's tell the programming language that this data structure is special, is protected.
00:14:34.446 - 00:14:53.786, Speaker B: We call that data structure a resource. And that data structure is I mean, it's very similar to object oriented programming, right, where it owns all of its internal data, its internal data, and then exposes functions that let you interact with it. But because that data structure is understood by the language to represent value, you can move that around.
00:14:53.786 - 00:15:01.082, Speaker B: Right. One of the things that blew my mind when I started programming Ethereum was when I realized that your, ERC, 20s weren't in your account. Right.
00:15:01.136 - 00:15:02.154, Speaker A: Global state.
00:15:02.352 - 00:15:03.100, Speaker B: Yeah.
00:15:03.790 - 00:15:07.262, Speaker A: Most people don't know this, so maybe we should shock a few people here.
00:15:07.396 - 00:15:19.730, Speaker B: Yeah, there we go. So when you think about, ERC 20 or even ERC 721, you have these tokens that are defined by programmers. They've uploaded these smart contracts and you think of those assets as being in your account.
00:15:19.730 - 00:15:27.166, Speaker B: Right. Like my CryptoKitties are in my account, except they're not. My CryptoKitties are actually in the CryptoKitty smart contract.
00:15:27.166 - 00:15:50.060, Speaker B: And what the CryptoKitty smart contract is a list of all the kitties and then it has owners next to it, right. The name of who owns that thing. And what this means, just to make it more concrete, what this means is that if you want to know what NFTs you own, you have to go to every single smart contract where you could own NFTs and ask it, Do I own any NFTs? Right.
00:15:50.060 - 00:16:06.258, Speaker B: And whereas this resource model, because the programming language is like protecting the sanctity of these assets, you can store that in your account. So on my Flow account, if I want to see what top shots I own, I go into my account and I look in my account and I see all of them. Right.
00:16:06.258 - 00:16:24.520, Speaker B: But it doesn't matter how many different NFTs are defined or fungible tokens are defined, all of the things that I own are in my account. And of course, this is amazing because it lets you do things like objects, owning objects and locking objects behind.
00:16:25.450 - 00:16:27.560, Speaker A: Saves a lot of RPC calls, too.
00:16:28.170 - 00:16:50.206, Speaker B: It potentially saves a ton of RPC calls and it makes certain kinds of patterns. Interestingly enough, though, because so many people are used to this ledger model, it actually screws up people coming from Ethereum because they're like, oh, I've built this NFT project, I need to know who is owned translant all of the NFTs. And now it's the opposite problem, right? If I want to know the NFTs I own, I just go to my account.
00:16:50.206 - 00:16:58.446, Speaker B: They're all right there on Flow, if I want to know who owns all of the top shots, I have to go to everybody's account and find the top shots. So it's kind of an ironic switch.
00:16:58.478 - 00:17:17.266, Speaker A: Around there that's kind of funny but that sort of unlocked effectively, you having a better way to think about making things more ready for the individual consumer. Because otherwise this is a nonlinear problem to scale. As the more users you get, the tougher it gets to kind of make the same experience consistent.
00:17:17.266 - 00:17:34.910, Speaker A: And I think you kind of said a really interesting comment, which is you were kind of one of the first companies who made a product and a consumer product first, and then the blockchain came after. And I'm kind of curious to understand what was that experience like. So the first thing that sort of most people may know is NBA TOPSHOT.
00:17:34.910 - 00:17:50.500, Speaker A: Tell us about sort of the motivation around having TOPSHOT beat the flow, be the language and the contract behind TOPSHOT. And how did you kind of notice anyone from performance to the ease of kind of deploying that and getting millions of people to play with it?
00:17:51.590 - 00:18:03.670, Speaker B: Yeah, top shot was like, in a weird way, TOPSHOT was the point, right. We didn't build TOPSHOT to show off flow. We built flow to power TOPSHOT.
00:18:03.670 - 00:18:54.626, Speaker B: Now, of course, the whole point of our company, of every product that we ever wanted to build, was to build on a truly public, decentralized blockchain that anyone could access and anyone could extend. Composability is something that is incredibly important to us and a touch point and a word that we use all the time in our team. But as soon as we realized that we could build TOPSHOT on top of flow, we realized it was also the best possible thing for flow, because what are you going to do? Who's going to come and build on a platform that doesn't have any users? Now, we did make a big mistake with TOPSHOT, or more particularly, we made a big mistake with how we built dapper wallet.
00:18:54.626 - 00:19:11.878, Speaker B: So in order to really appeal to a non crypto user base, we built dapper wallet as a custodial wallet. So very similar to how coinbase holds your tokens on your behalf. Dapper sort of holds your top shots, your NFTs on your behalf.
00:19:11.878 - 00:19:26.586, Speaker B: Now, it's not exactly like coinbase because everybody has their own account, right? So dapper holds your keys, they don't hold your assets. I don't know if that makes sense, but everybody has their own account. And so you can go on chain and you can see which accounts have all the assets.
00:19:26.586 - 00:19:35.490, Speaker B: And as they move around, you can see that all happen on chain. And our vision was, hey, we can start this way. And then as time goes on, people can move to self custody.
00:19:35.490 - 00:20:12.894, Speaker B: But that move to self custody. Every time we talk to the regulators and we talked to anybody having anything to do with financial regulations, they were like, they need a thick, black line between you're doing a money services business where you're taking credit cards, you're letting people move money in and out with ACH and free trade, where anybody can do whatever they want. And it just became increasingly apparent to us that this idea that we could have a gradual entry from those cool pools where it's almost like a beach, you go in, right? Yeah.
00:20:12.894 - 00:20:26.582, Speaker B: You just start as gradual, but eventually you get to the deep end. And the regulators more or less told us that that's not going to happen. And so we're right now in the middle of Deprecating Dapper wallets, right? So it's not going away for anyone who wants to keep using it.
00:20:26.582 - 00:20:46.490, Speaker B: But we're encouraging application developers now to use account abstraction. And when people come and sign up for applications, then maybe they just give their email address and the application creates an account for them. But by using account abstraction, when the user is ready to take ownership of that account, they can create a new account.
00:20:46.490 - 00:20:59.774, Speaker B: And using account abstraction, they can take control of the account that the application developer created for them. So it really does give the best of both worlds. I think it's a really powerful technique that we should developers use way better.
00:20:59.812 - 00:21:26.230, Speaker A: Than you having to keep track of your private key and making sure that you get to either rotate or it doesn't get stolen. That's actually super interesting in this model. I guess I'm curious, are we using account abstraction as just the general concept of making it easy for people to use in a way non EOA accounts? Or is this the same definition as what account abstraction would look like on Ethereum? Two, in terms of standards.
00:21:28.430 - 00:21:49.626, Speaker B: The short version of account abstraction on Ethereum is that it's letting a smart contract control access to your account. And so that by itself, there's no functionality there, right? Like that's a means to an end that's not the end itself, but the two critical things that you can do with account abstraction. One is that you can have multiple different keys.
00:21:49.626 - 00:22:10.934, Speaker B: And as I said, having a key per device is just a much better security posture than copying your keys between devices. But it also allows you to do things where the code can decide access wants something other than A. And of know, we had Benny up earlier talking about how account abstraction enables NFTs to control access to an account.
00:22:10.934 - 00:22:30.726, Speaker B: And so we have a very similar mechanism on Flow where one account can control another account. You can do it through NFTs, but it doesn't have to be through an NFT. And so that's more or less what happens here, is that you go and you sign up for an account with, let's say, Crypto Llamas, and you don't have a wallet.
00:22:30.726 - 00:23:07.202, Speaker B: So Crypto Llamas, instead of saying, hey, you need to go download this other software in order to use our product, they say, great, just log in with your email address or use Twitter login and we'll create an account for you. But Crypto Llamas can actually create an onchain account, and they're welcome to sell you NFTs for credit cards and whatnot, right, so long as they're just selling a product for money. When we don't end up in this weird regulatory middle ground, and then when that person is like, hey, I want to go to Marketplace and I want to trade with other users with my Crypto llamas, the Crypto Llamas team says, great, now you go get a wallet.
00:23:07.202 - 00:23:16.442, Speaker B: Right now that you understand the value of true ownership, right? Go get a wallet, and then we'll link those two accounts. Your wallet will create an account that you have full sovereignty over. You can do whatever you want with that.
00:23:16.442 - 00:23:39.860, Speaker B: You can put any fungible tokens in there. You can do all of your DeFi stuff in there. But if you link that account to your Crypto Llamas account now, when you go to your marketplace, say, Floaty, which is one of the NFT marketplaces on Flow, you'll be able to see all of your Crypto Llamas as though they were in your main account, even though they've never left this account that you started with.
00:23:39.860 - 00:24:09.882, Speaker B: And we call it hybrid custody or shared custody, because there's a lot of cases where you don't want to kick the application developer out of control of that thing, especially when you start thinking about gaming, right? So the use cases in mobile are really cool because you can imagine a world where you go to the App Store, you download an app, it creates a key for you. It creates an account for you. You're using inapp purchase to buy all your stuff in your game.
00:24:09.882 - 00:24:21.978, Speaker B: And whenever you're playing the game, because the game has the key, it doesn't need to constantly pop up your wallet and ask you for permission. But then you go and you get your mobile wallet. You can link those accounts.
00:24:21.978 - 00:24:33.998, Speaker B: You can trade all that stuff, anything that you're worried. Like, if you don't trust the game developer, perhaps you can pull some stuff out of that account, but you don't have to. And you can go and trade on any marketplace.
00:24:33.998 - 00:24:45.830, Speaker B: You would use your wallet as normal, right. Approving those transactions. But then when you went back in your game, anything you bought would just automatically be there, and anything you hadn't sold would still be there.
00:24:45.830 - 00:24:50.380, Speaker B: You don't have to move things in and out. And so it creates just a really smooth user experience.
00:24:50.830 - 00:25:05.838, Speaker A: Yeah, in a way, it's super powerful to be able to actually compartmentalize different ways to access the same resources, which you don't really understand if you're on other blockchains or just even with regular money. So I think it's a really good phrasing. So thanks for kind of explaining that.
00:25:05.838 - 00:25:13.546, Speaker A: Even I'm like, oh yeah, this is cool. I didn't know this before. Kind of on that same theme.
00:25:13.546 - 00:25:29.062, Speaker A: I think the really cool thing here is that it's not just TOPSHOT. Obviously, that was one of the reasons to kind of, in a way, test this in prod. But you have UFC, Strike, NFL Day, and a couple other things that are in the works.
00:25:29.062 - 00:25:46.540, Speaker A: And collectively, you've kind of brought this to millions of people who have transacted, I would assume close to 100 million, if not more. What kind of has been the learnings from all those incredible hits? And how do you think about the future of gaming on blockchains? Moving forward.
00:25:48.670 - 00:26:26.262, Speaker B: Yeah, I'll start with the last part first. One of the things that and we did this ourselves, right? So I don't want anybody to feel like we're disappointed in the whole industry because it happened naturally to us. But I kind of feel like we regressed from CryptoKitties, right? Like CryptoKitties did something, right? Now maybe you don't think the breeding game in CryptoKitties is that fun or after that first year when we unlocked all of the various genetic mutations that it sort of hit its end date and that's fine, but I'm really disappointed that no one, including us, right.
00:26:26.262 - 00:26:34.086, Speaker B: NBA TOPSHOT. There is no functionality built into TOPSHOT moments, right. So people can build stuff on top of TOPSHOT.
00:26:34.086 - 00:26:57.278, Speaker B: And we've seen some amazing stuff built where people are doing what I would call sort of off chain composability, right, where they're taking oh, if you own a certain number of jets moments, I don't know, I assume jets is a team. I have no idea. If you own a certain number of jets moments, then you can join this jets discord and you know that it's only going to be true fans.
00:26:57.278 - 00:27:30.780, Speaker B: That's amazing, right? Like what a great way to leverage that thing. But wouldn't it be even more interesting if we were doing stuff on chain where maybe as the player progressed through their career, maybe we could even update those NFTs to a certain extent. Or maybe those NFTs could I mean, we actually have the stats on chain and so we could do more, but also other people could do more of creating I think there's some teams creating fantasy games and whatnot that are using that on chain data, which is really interesting.
00:27:30.780 - 00:27:46.266, Speaker B: But I just think this idea of NFTs that update themselves, right? I think people typically call them dynamic NFTs. I feel like that's just something that we're not tapping enough of. And it's kind of ironic, right? That the first sort of thing that anybody called an NFT.
00:27:46.266 - 00:27:49.426, Speaker B: The CryptoKitties did that and almost nobody else does it.
00:27:49.528 - 00:28:03.986, Speaker A: Is this like a creativity argument or tech? Like we just don't have easy enough way of doing this thing or it's just expensive to kind of mass update all the contracts? Or is it pure? Like we need more creative people here to think about crazier things they can do with onchain assets?
00:28:04.178 - 00:28:33.680, Speaker B: I think it's a little bit of both, right. I think there's a third thing, right? So I think there's a little bit of creativity, but I also think it's just like users can only absorb so much, right? Like if you go to somebody I always think about this analogy, like imagine if you went to somebody who had a Model T and you told them how great it was that your Tesla had a touchscreen, right. They would be like, well, what do you need a touch screen for? Even if they understood assume they understand what a touchscreen is for.
00:28:33.680 - 00:28:38.622, Speaker B: You say, oh, well, it controls the air conditioning. What's air conditioning? Right. Like, oh, it controls the wipers.
00:28:38.622 - 00:28:56.422, Speaker B: What are the wipers? Right. There's so many things that until the user has sort of experienced the problem, presenting them with solution actually is just confusing. And so I think NFTs that you own that don't change are actually easier to understand.
00:28:56.556 - 00:28:57.714, Speaker A: People collect baseball cards.
00:28:57.762 - 00:28:58.118, Speaker B: Exactly.
00:28:58.204 - 00:29:01.362, Speaker A: They don't have to learn something new. It's been going on for 100 years.
00:29:01.436 - 00:29:19.018, Speaker B: Exactly. But just to give you an example of an idea that we've been working on so one of the engineers and I actually built a prototype recently where we created this NFT that represents a farm and then that can hold NFTs that are fields. And then the fields you can put fungible tokens in that are seeds.
00:29:19.018 - 00:29:30.114, Speaker B: Like, we started with strawberry seeds and then the strawberry seeds have metadata associated with them, which is how long it takes for them to grow and how many strawberries they produce. Right. And then the strawberries come out.
00:29:30.114 - 00:29:43.126, Speaker B: They're also fungible tokens. And then you need to have a farmer who goes and spends energy in the field to get the strawberries out. And we were talking to a game designer, a game design team about this, and we're like, hey, wouldn't that be cool? And they're like, yeah, this is pretty cool.
00:29:43.126 - 00:30:00.826, Speaker B: I like that idea. And imagine somebody else, not your team, somebody else could come along and create a Blueberry smart contract and suddenly now your game has blueberries in it. And what's interesting to me, and again, this is about how quickly it is for people to absorb stuff in that moment, right.
00:30:00.826 - 00:30:16.058, Speaker B: We had just presented them with this idea that they could have this autonomous code managing farms in their game and they wouldn't have to run the server. But when I said that somebody else could do it, their reaction wasn't, oh, that's super cool. Their reaction was, yeah, but our economy isn't balanced for Blueberries.
00:30:16.058 - 00:30:35.574, Speaker B: Right. Why would anyone want to grow a blueberry? Blueberries aren't input into any our recipes. Right? And I think most of the people in this room, if they've been in crypto for long enough, they know that that's actually surface area for somebody else to build something rather than thinking of it as like, oh, this is a loose end that needs tying up.
00:30:35.574 - 00:30:46.540, Speaker B: And it actually reminds me a lot of ecology, right. Like in ecology, when there's waste, right. When there's waste in natural systems, that's input for some other system.
00:30:46.540 - 00:31:05.140, Speaker B: And when we're used to building closed systems, we always think about we want to minimize waste or we want to minimize outputs, right. Whereas I think in open systems, you want to maximize outputs because then they can become inputs for other things. And that's a mindset change that I think people need to make.
00:31:07.270 - 00:31:24.150, Speaker A: I mean, that is an incredible premise because we kind of see well, in a sense that doing this on chain. To me, the most impressive part of this is that effectively seems like this is where we want to be. You kind of play games like Eve Online or a handful of other big worlds, like they are part of the shared world.
00:31:24.150 - 00:31:35.820, Speaker A: Things age with the same thing. Some of them even have constraints on this is how you can travel and it'll stay constant and obey laws of universe. But doing this thing on chain is almost infinite complexity over time.
00:31:35.820 - 00:31:59.234, Speaker A: How do we think about managing that effectively and efficiently? Again, is this now a coding and optimization problem or is this now, hey, let's just imagine this world, but we kind of have a natural constraint on, well, looks like this farm can never be more than two acres long or wide or something and this is the compute that can manage this. Do we run into those types of issues in this world?
00:31:59.432 - 00:32:36.750, Speaker B: So I think that there are likely to be sort of two. We often use the phrase real time in computer science to refer to things that happen quickly, but that phrase actually means relative to the clock that we all experience, right? So I think slow real time things like things that take place over hours, days, weeks, months, I think it makes sense for those sorts of things to happen on chain and I think that it can be done efficiently. And you could even imagine like a very large scale game that had things like weather and growing and things like that happening on a blockchain.
00:32:36.750 - 00:33:05.670, Speaker B: I think that when you talk about shorter time scales though, then that becomes a different problem. And I don't know if Liam's still here, but Liam, who was one of the co founders of ETH Global and I think probably best known for working on, you know, the project of his that I think is coolest was the state channel stuff that he did. And I think state channels are like a really underappreciated solution to this problem.
00:33:05.740 - 00:33:08.066, Speaker A: Move a lot of it off chain, manage the state transitions.
00:33:08.098 - 00:33:08.726, Speaker B: Exactly.
00:33:08.908 - 00:33:30.734, Speaker A: Actually interestingly, it's a good point because if you've looked at or others in the audience have looked at Op Craft, they kind of ported Minecraft primitives to optimism just so you can actually have almost the same interface. And if you get to mix and match on chain and off chain, that actually is possible. Looks like we finally get a Web Three Native Farmville back in the early 2000s.
00:33:30.734 - 00:34:05.686, Speaker A: But that's pretty amazing, right? Because you effectively introduce more of a compared to collecting cars or trading, which has been essential around a lot of gaming on chain, not just in your ecosystem, but overall even in Ethereum, we've kind of introduced a more interactive world, whether autonomous or not. But effectively we're still in a way catching up to how games have been since late 90s because we've had player versus player autonomous players just players versus robots. All these things happen and we're slowly moving towards just not being able to differentiate.
00:34:05.686 - 00:34:17.338, Speaker A: And I feel like that world is very soon, maybe a year away. We're talking again and you can just play that game because somebody else is going to make it. So that seems to me very exciting.
00:34:17.514 - 00:34:33.602, Speaker B: Well, if they want to build it on Flow, they should come talk to me because I will happily talk to them about design ideas. Honestly, I feel like this is one of those things where if someone just built Dark Forest, right. Is a great example.
00:34:33.602 - 00:34:41.510, Speaker B: Right? Like perfect. Did Dark Forest have an awesome UI? No. Did Dark Forest have compelling premise and interesting technology under it? Absolutely right.
00:34:41.510 - 00:35:04.986, Speaker B: And I feel like whether it's a farming game or some other kind of thing where it naturally makes sense for it to be slow real time so that it can run on a blockchain, we can create some really interesting games and not everybody wants to just go and shoot things in a first person shooter. And if you do that's great. But I love games where there's a longer strategy to it.
00:35:04.986 - 00:35:10.682, Speaker B: I used to play a game called Diplomacy, which would take place over a course of weeks when you played it on Internet.
00:35:10.746 - 00:35:31.410, Speaker A: Who's ever played Grand Theft Auto to complete the missions? Come on. And actually another perfect example, dark Forest of actually obeying the same laws of physics. If you are attacking somebody, you're following the same law of gravitation to send your shot from one star to another and you really got to wait 20 minutes sometimes to reach the other end of the screen because that's the mechanism.
00:35:31.410 - 00:35:54.830, Speaker A: But it is highly addictive and like a wonderful premise. Well, even if you're not choosing to build this on Flow, it still sets up a stage for us talking about what the next years look like on how we think about infrastructure in general. I think the kind of topic here is in a way, kind of shared consensus and social consensus.
00:35:54.830 - 00:36:07.134, Speaker A: Clearly Flow exists, nier exists, ethereum exists. These are blockchains that are getting new people. They're going to stay for a while and people have to don't have to actually make a decision between one or the other.
00:36:07.134 - 00:36:17.650, Speaker A: We're going to be in a multi chain world. How do you think about what it means for people to interact with different blockchains in that world and what is kind of considered from your end kind of social consensus?
00:36:19.210 - 00:36:52.990, Speaker B: When we were designing Flow, what kept coming up was that there are certain failure states where you can't expect the software to recover, but that's kind of okay because then the people will recover. And so in particular, when we're talking about bicenteed fault tolerant systems, there's sort of two failure modes, right? Liveness and safety. Right? And liveness failure is when the blockchain stops making progress and a safety failure is when the blockchain finalizes an invalid state transition.
00:36:52.990 - 00:37:21.126, Speaker B: I e. Someone stole someone else's money without their signature, or somebody minted money into their own account against the rules of the smart contract and the blockchain. And what I advocated early on in the team was that liveness failures are actually much less dangerous because a safety failure, somebody might not notice it, right? If I steal your tokens, it might take you a few days to notice.
00:37:21.126 - 00:37:36.926, Speaker B: But if I mint tokens into my account, people might never notice, right? Because who's watching what's going on in my account? Whereas a liveness failure, everyone notices that immediately. Like as soon as a liveness failure happens, everyone freaks out, thing is down.
00:37:37.028 - 00:37:40.746, Speaker A: Whereas you're talking about suddenly a lot of lot more blueberries.
00:37:40.858 - 00:38:23.482, Speaker B: Yeah. And so and so the the and so, thinking through this lens, one of the reasons why aliveness failure is, quote unquote, safer is because it engages what I call the social consensus layer, right? And the best example of social consensus is whenever we do a hard fork in ethereum, or theoretically, there are two blockchains at that point in time, right? Except in one very notable case back in 2016, there only ends up being one after the hard fork. But theoretically, that other one can continue on.
00:38:23.482 - 00:38:34.318, Speaker B: And the reason why we end up on the new chain and not the old chain is because of social consensus. There's nothing in the code that solves that problem. It's entirely us, as people all agree.
00:38:34.318 - 00:39:08.460, Speaker B: Oh, yeah, no, we all know that the network is upgraded now and that the old rules are the old rules and we want to follow the new rules, so we're all going to pay attention to this blockchain. And I think that there's a lot of fundamental problems when it comes to things like bridges. When we start talking about eigen layer, where this social consensus, rather than being sort of a safety net, it actually ends up almost being like rather it's a safety net that we can't count on.
00:39:08.460 - 00:39:43.974, Speaker B: The term that Vitalik uses, which I really like, is zones of sovereignty. And basically, if you just think about ethereum by itself, just base layer ethereum or ethereum as it was in 2017, if ethereum has some problem, right? We can reboot ethereum with that problem fixed, and everyone knows to use the new version of it, and everything is hunky dory as soon as we start adding things on top of that, right? And that could be an L two. That could be something like USDC that has actual money in bank accounts somewhere else.
00:39:43.974 - 00:39:53.130, Speaker B: That can be a bridge that bridges between blockchains. Suddenly that social consensus. It's a much more fraught scenario.
00:39:53.130 - 00:40:36.070, Speaker B: Imagine a scenario where there was a hard fork of ethereum and Tether decided that they were going to redeem tokens on one fork and Circle decided that they were center rather decided that they were going to redeem USDC on the other one yeah USDC on the other fork, what would we do then? What would the social consensus be? I don't know. Right. And when Eigen layer came along and said hey, we can actually leverage the staking that people are doing on Ethereum and theoretically other blockchains as well to secure other systems, vitalik responded with a blog post about like hey, be careful, right.
00:40:36.070 - 00:41:03.538, Speaker B: You can kind of sort of leverage our technical consensus. But if you try and leverage our social consensus you could be very and I can't remember if he used the example of optimism in his blog post, but sriram the replied yeah of Eigen layer basically was pointing out that if you depend on ethereum is not going to hard fork to save your project. Right.
00:41:03.538 - 00:41:11.406, Speaker B: That's more or less what's happening. That's a tough problem because now there's.
00:41:11.438 - 00:41:16.114, Speaker A: No deterministic correct answer and it's not how computers work in this situation.
00:41:16.312 - 00:41:54.026, Speaker B: And so we think about it. One of the questions we're constantly asking ourselves with flow is how can we connect better to Ethereum? Right? And we've explored everything from becoming like a full L two, right, maybe building off the optimism stack all the way to just maintaining our sovereignty and using a bridge. But that Bridging problem is hella hard and it either has to be its own zone of sovereignty, the connecting those two zones, or inevitably one of those two sides of the bridge is going to be beholden to the other.
00:41:54.148 - 00:42:10.014, Speaker A: Right? In this case, if it's like an Op stack equivalent answer, then you're fully leveraging. But if it's like a ZK approved transfer, then you are still in your own zone. But you are relying on both social and secure consensus on Ethereum.
00:42:10.014 - 00:42:20.460, Speaker A: So that's an interesting problem. Is that something that you would like to do or is this more of a it'll be nice to have but you don't have to in a way effectively make this the case?
00:42:21.310 - 00:42:38.154, Speaker B: Well, I mean, right now I think the answer is something like layer zero where we don't depend on any sort of one bridge to try and solve the problem. I remember when I first saw the layer zero pitch, I actually talked to the guys and they were telling it to me. They're actually based in Vancouver.
00:42:38.154 - 00:42:48.698, Speaker B: Based in Vancouver. So they stopped by the office and we were talking about layer zero. And when I understood that, they were basically saying hey, they don't like it when I talk about it this way.
00:42:48.698 - 00:42:57.454, Speaker B: So I apologize if no one else don't listen to the way I talk about. But this is how I think about it. It's a two of two multi SIG, right? And the one multi SIG is the Oracle.
00:42:57.502 - 00:42:59.220, Speaker A: I can imagine why they don't like it.
00:43:00.410 - 00:43:15.260, Speaker B: One side of that is the Oracle, right? The Oracle has to say that this thing happened on Ethereum, but the relayer also has to say that thing happened on Ethereum. Right. And if they don't both agree, then the action on the target chain doesn't happen.
00:43:15.260 - 00:43:30.426, Speaker B: And that's really powerful because it means that if you break the Oracle, you break nothing. Right. You can go to a lot of trouble to try and break an Oracle and then you basically have no value unless you can also break the relayer and vice versa.
00:43:30.426 - 00:43:47.026, Speaker B: If you break a relayer, it doesn't do you any good unless you also break the Oracle. And if those two things are sufficiently independent, it dramatically increases the security posture. Now, interestingly enough, it also increases your liveness issues because if either the relayer.
00:43:47.058 - 00:43:48.774, Speaker A: Or the Oracle go down, slow down.
00:43:48.812 - 00:44:10.602, Speaker B: Yeah, but that idea of saying, hey, let's not build one bridge, let's multiplex messaging, and you could even extend that. Right? And the reason I like to think of it as a two of two multi SIG is because you can extend that idea to say, look, there are five different ways to find out what's happening on that other chain. I'm only going to do something when I see three of five or four of five.
00:44:10.602 - 00:44:12.522, Speaker B: Right. Or even five of five. Right.
00:44:12.522 - 00:44:27.300, Speaker B: You can have that liveness versus safety trade off where you're like, well, look, if two of these things go down, I still want to be able to get the message across. Right. Or you could say, look, this is so secure that it's better that we don't do anything unless all five agree.
00:44:27.300 - 00:44:50.214, Speaker B: And I think extending that idea is really powerful. And so I've been encouraging teams to try not to depend on any one bridge and to look at using multiple bridges. And certainly we've been working with so sellers already live going to flow, and we've been working with layer zero and AxLR and making sure that there's lots of options there.
00:44:50.252 - 00:44:59.906, Speaker A: Oh, that's great. So we are effectively making it easy for people to go from one change to another and talk with more consumer apps. One last question on this theme of kind of better infrastructure.
00:44:59.906 - 00:45:21.300, Speaker A: We kind of talked about better programming languages, better consensus, better account management, better access control. As somebody who's primarily dealing with a lot of images, media files, audio, video, what's kind of annoying still on the storage side for being on chain and what can we do better on that?
00:45:22.150 - 00:45:44.550, Speaker B: Yeah, the thing that I find frustrating is that people think there's only two answers to this question, and I think the correct answer is actually a third thing. Right. So what we did with CryptoKitties, what we did with TOPSHOT is the easy thing, which is that we just store stuff in Google GCP storage buckets and everybody knows how that works.
00:45:44.550 - 00:45:54.766, Speaker B: Right. It's easy to get cloudflare to put that into their CDN so that it's fast access for everybody who's using it. All of the web devs know how to interact with that.
00:45:54.766 - 00:46:04.814, Speaker B: It's great. Problem with that, of course, is that it's centralized the other thing that everyone knows how to do is, hey, just put the data on chain, right? Could make sense. In the case of like an SVG.
00:46:04.862 - 00:46:06.750, Speaker A: Kind of thing, blockchains are not databases.
00:46:06.830 - 00:46:32.038, Speaker B: But blockchains are not actually databases. What drives me crazy is that Flow is designed to have a much larger state space, and so state storage on Flow is actually a little cheaper, actually quite a bit cheaper than on other blockchains. And unfortunately, I feel like some people are maybe abusing that a little bit, and they're like putting full PNGs and JPEGs in the blockchain.
00:46:32.038 - 00:47:14.278, Speaker B: And I think there's got to be a middle ground where we figure out how to leverage IPFS and Filecoin and AR weave to make sure that that data is available. But it doesn't actually need to be on chain because a smart contract never needs to look at it, right? We put what player is associated with an NBA TOPSHOT on chain, because that's interesting. A smart contract might care what player or what play type is associated with it, but no smart contract is ever going to go and analyze the bytes of the MPEG file to figure out what the video file looks like, right? And so I think that storing that data in a decentralized way is the correct thing to do.
00:47:14.278 - 00:47:47.282, Speaker B: But what we're missing is tools for users, for Dows, for people like the Internet Archive to easily go and mirror that data, right? So there's no reason why there shouldn't be a tool that you go onto your phone, onto your laptop, and you double click that tool, and it goes and it looks at every one of your accounts, and it figures out all the IPFS hashes that are referenced by the assets that you own and makes sure that there's a backup of those things. That would be so easy. Easiest thing in the world.
00:47:47.282 - 00:47:50.162, Speaker B: There's no hack for this weekend. Provide that.
00:47:50.296 - 00:47:51.970, Speaker A: That's a good hack for this weekend for people.
00:47:52.040 - 00:47:53.700, Speaker B: Yeah. There we go. There we go.
00:47:53.700 - 00:48:11.014, Speaker B: There's no reason why people like the Internet Archive shouldn't be running IPFS pinning services. And of course, anytime there's a Dow or a user group, storage is so cheap, right? And so could we use filecoin? Of course. Could we use Arweave? Of course.
00:48:11.014 - 00:48:33.390, Speaker B: But we don't even need to necessarily go to that level, right. Once we've made it available with IPFS, and once we've made it easy for users to point at whether it's an account or a project or an ecosystem and say, I want that data, then I think that that data will be duplicated all over the place. And you could even imagine that being built into clients of the blockchain.
00:48:33.390 - 00:48:56.326, Speaker B: One of the things that I've toyed with, the ideas I've toyed with and talked to the team about is the idea of, like, what if we built that into our API? When you query the blockchain, if there is an IPFS hash in the response, have the node actually resolve that IPFS data and send it back. So that as a DAP developer, I.
00:48:56.348 - 00:48:58.050, Speaker A: Just have to query the single interface.
00:48:58.130 - 00:49:05.260, Speaker B: I get all of the data. That data doesn't happen to be literally in the execution state. It just is easy to get to.
00:49:05.790 - 00:49:20.560, Speaker A: I mean, that's a very simple enhancement that just simplifies a bunch of requests and keeping data hot. That's cool. Well, my last question to you is something I've asked all the other speakers too, but what does decentralized mean to you and why do you think it's important?
00:49:22.050 - 00:49:27.970, Speaker B: Wow, that's a loaded question. That's a question I spent. How much time do we have?
00:49:28.120 - 00:49:29.890, Speaker A: Because that's a question I got three minutes.
00:49:29.960 - 00:49:47.110, Speaker B: Three minutes. All right, piece of cake. We literally spent hours talking about this when we were starting to build Flow, because I don't know if you all remember, but in 2018 there was this real mindset, especially among the investors, that there was such a thing as good enough decentralization.
00:49:47.110 - 00:50:11.326, Speaker B: And all the investors would talk to Vitalik and Vitalik would tell them, look, a truly decentralized system, it needs to have all these participants. And therefore the throughput of that system is going to be limited by sort of not the weakest of the participants, but sort of like the median participant in that network. And so if your system has high throughput, then you're rejecting people from participating in that network and that's not good.
00:50:11.326 - 00:50:37.698, Speaker B: And of course investors don't like that answer. And so they started telling themselves, well, maybe there's such a thing as like decentralized enough, right? We don't need to be government level security, we need corporate level security. As a team, when we were designing Flow, we're like, well, what would that even mean? Right? What would decentralized enough even mean? And so we actually dug into why decentralization matters and we came up with sort of four axes on why decentralization matters.
00:50:37.698 - 00:51:08.980, Speaker B: And I would argue that none of those four are worth diluting your system for, right? So one axis or there's two angles of this, but it's like basically security and certainty guarantees, right? And that's forward looking and backward looking. So backward looking certainty. What that means is that what happened, happened, right? And that's one of the great things about blockchain, is that no one can tell you that such and such happened on ethereum a year ago when it didn't actually happen.
00:51:08.980 - 00:51:28.922, Speaker B: That is impossible to do, provided that you're willing to actually go back and do the math to make sure that the hashes are correct. And so that's pretty remarkable, right? Like your bank can't guarantee you that your bank could give you they're audited and et cetera, et cetera. But the reality is that there's not in the same level of robustness and yet this is an open system.
00:51:28.922 - 00:51:53.520, Speaker B: That's amazing, right? The forward looking version of that is like guarantees that what works today will continue to work tomorrow. Right. And obviously the number one example we can think of that today is the whole reddit API thing, right? Where the thing that works today isn't going to work tomorrow and completely destroying a bunch of people's businesses, a bunch of users ability to interact with this platform.
00:51:53.520 - 00:52:05.682, Speaker B: And one of the neat things about blockchains is that they do change a little bit over time. But that's really incredible. The other sort of aspect, I guess, is a four x four.
00:52:05.682 - 00:52:32.400, Speaker B: Maybe I'm becoming a consultant now is the idea of participation. And I think that takes two angles and one is can I be a part of operating this thing? And you could argue that it doesn't matter, right? Like if you can trust that the thing is happening is doing, you're going to have to trust that some other server is doing the correct thing. But I think it's meaningful to be able to run a node and actually participate in the network that holds your stuff.
00:52:32.400 - 00:53:07.970, Speaker B: And then of course, the other side is censorship resistance and can I be certain that my stuff is getting equitable access to the blockchain as other people's stuff? And that last one actually is an area where I feel like the folks in Ethereum and I assume most of you are in the Ethereum community, I feel like you guys could do better because Mev is almost treated as like it's just a thing that has to happen rather than a thing that we can prevent. And I feel like we could do better on that one.
00:53:08.140 - 00:53:19.050, Speaker A: It is a privilege for people to actually, in a way, take advantage of any extractable value. You're right. That's a really good phrasing.
00:53:19.050 - 00:53:22.590, Speaker A: It seems like mev is not possible on flow.
00:53:23.490 - 00:53:31.706, Speaker B: Well, so mev is possible on flow but it's a much more complicated thing because we have the block.
00:53:31.738 - 00:53:34.490, Speaker A: Time would actually make it slightly harder, too, I assume.
00:53:34.570 - 00:53:55.894, Speaker B: Well, there is no single actor in the network that knows all of the transactions that are going to be in a block at the time that the block is formed. Right. So it's very similar to proposer builder separation with the exception that there's actually multiple proposers per block and the order in which those proposals are executed is unknown ahead of time.
00:53:55.894 - 00:54:06.706, Speaker B: And so it's much more difficult to execute certain kinds of sandwich attacks, I realize.
00:54:06.738 - 00:54:14.746, Speaker A: And I caught myself going technical and I promise this won't be technical. So we'll end this here. Please thank theater for an amazing chat and we'll move on with the next sauce.
00:54:14.746 - 00:54:15.020, Speaker A: It was.
