00:00:07.290 - 00:00:20.174, Speaker A: Okay, everyone, we'll go ahead and get started. This talk is about mev and Ethereum. So either you probably already know what mev is, or if you don't, that's okay.
00:00:20.174 - 00:00:33.510, Speaker A: We'll cover and give like a small example. And then I'm going to talk about lot of stuff just right outside the protocol. And it's interplay between, say, the actual core protocol and all the applications we build on top of it.
00:00:33.510 - 00:00:46.906, Speaker A: It turns out at least it's some pretty wild stuff. So, yeah, what is this thing? Mev? Again, many of you have probably heard of it. If not, so it sort of used to be an acronym and kind of still is.
00:00:46.906 - 00:00:56.666, Speaker A: Originally it stood for minor extractable value. And the idea was we have miners of the protocol. They're the ones who are like, determining consensus and making the blocks.
00:00:56.666 - 00:01:25.574, Speaker A: And it turns out that when you go to make a block to add a block in the chain, this miner actor had this complete freedom to take whatever transactions they saw in the Min pool and put them into a block however they chose. Right? And it turns out that when you have this freedom to have the ability to include transactions, exclude transactions or reorder them, it has implications, especially for blockchains like Ethereum, which have this very rich day fullness. So now we're in this proof of stake world.
00:01:25.574 - 00:01:35.370, Speaker A: We've gotten rid of these miners, so now we still have this acronym. And people have tried to come with different names, like Maximal Extractable Value or something like this. Either way, we can just call it MVB.
00:01:35.370 - 00:01:58.020, Speaker A: And yeah, again, this ability of a block producer to choose the exact sequence of transactions, if you're familiar with layer two stuff, I think there have been some talks even throughout this weekend about that. Everyone talks about the sequencer actor. And it's, again, this agent in these protocols that's selecting how these transactions actually are sequenced in the chain and like, the history that we all agreed to.
00:01:58.020 - 00:02:28.554, Speaker A: So how could it really matter? Maybe if you just think about it, let's just say we have a few Ethersins from you to me to you to you, then why does it really matter and what are they happening? But here's an example where the matter orders a lot. So you'll hear this a lot in this niche of the space called sandwiches. And the idea is that you have a transaction, some, quote, victim transaction, another transaction after.
00:02:28.554 - 00:02:39.194, Speaker A: And so this is where the sequence is important. So the place this comes up is with, say, uniswap, a decentralized exchange. You have a pool for these two tokens, say ETH, USDC and ETH.
00:02:39.194 - 00:02:50.674, Speaker A: And let's just say, for example, the price in this pool is 1656, meaning that many like, USDC tokens to get one ETH back. And that's basically what you want to do. You're like, okay, this looks good to me.
00:02:50.674 - 00:03:14.346, Speaker A: So I tell uniswap, hey, I want to do this along with that I have to tell uniswap pay there's this other thing called a slippage that I'll accept and here it's like half a percent. The idea is that by the time I look at the pool and I'm able to transact against it, the price may have changed a little bit. And this is just because there's this fundamental discrepancy between when I see the chain and when I can interact with it.
00:03:14.346 - 00:03:21.738, Speaker A: Because again, we have this open permissionless network. It's changing all the time, honestly. And all sort of things are happening.
00:03:21.738 - 00:03:35.954, Speaker A: So in order to do this and use uniswap you need to have some tolerance here. This is called the slippage. And, for example, saying half a percent means I would like to only pay, like the 1656, but worst case, I'd pay half a percent more.
00:03:35.954 - 00:03:43.620, Speaker A: Right. The 1664 number. I was looking for a laser pointer, but either way, this number over here.
00:03:43.620 - 00:04:05.894, Speaker A: And, yeah, sort of in our happy default case, we're the only ones interacting with uniswap. And so we get that price and we're happy. The problem, though, is that kind of as I laid out, there's time in between when I might see this price and when I'm able to actually execute the trade, right? So let's say everyone in this room wants to make the same trade.
00:04:05.894 - 00:04:28.820, Speaker A: But the way that these blockchains work today is there's a single sequence where we have to go in some serial order. And so that's part of this problem, is having this block producer figure out what that sequence is. So let's say then half of us trade before we can give it to this price that I had here and so what that means is that the price in the pool will move against us.
00:04:28.820 - 00:05:17.722, Speaker A: So now we can see where this idea of an attack comes from because what you do is basically you see a trade with a lot of slippage, you say, okay, I want to basically front run it so I get in front of it and I drive up the price against the user up to their slippage, right? So if this transaction accepted half a percent then basically I drive the price up just under the 1664 and then their trade will still go through but at the worst possible execution. And then as an attacker I can turn around and immediately sell the tokens I just bought at the higher price and I'm guaranteed profit. Yeah, so you do this front run victim transaction, back run, that's the sandwich and yeah, so again, the reason why this is here in the first place is because otherwise you couldn't use uniswap.
00:05:17.722 - 00:05:41.442, Speaker A: You'd basically have to say not having slippage is kind of identical to setting to zero. But if you go do that, almost certainly almost all your trades, if not all of them, are just going to revert, they won't go through because again, it's like too precise between when you make the trade and when the trade can be settled. That being said, it also opens up to this mev situation which at least in this situation we got a worse execution.
00:05:41.442 - 00:05:53.130, Speaker A: So that's not good. So what do we do about that? And this is just one example. There's many of these basically I'd say pretty much every on chain interaction like exposes some sort of mev.
00:05:53.130 - 00:06:18.260, Speaker A: Then the question becomes what do you do about it? And that's actually a very active R and D topic as we'll kind of get sense for in the rest of this talk. It opens up this whole design space for mevaware ways of thinking about how we design the protocol, both consensus and execution layers, how we think about applications, how they interact with each other, layer one, layer two, the whole space, honestly. Yeah.
00:06:18.260 - 00:06:33.626, Speaker A: So that's like mev kind of broadly and we'll kind of zoom in a bit to Ethereum specifically. And this is more or less the picture today. This is the transaction supply chain as we've come to call it, put together first by the ghost up.
00:06:33.626 - 00:06:55.006, Speaker A: And we see sort of these boxes with these types of actors that will have very important and different roles going from I'm a user who wants to make a transaction. Say, I want to trade some tokens all the way to a validator in proof of stake ethereum where they're actually the ones making the blocks that determine what happens on chain. So we'll just walk through.
00:06:55.006 - 00:07:06.770, Speaker A: You have a user, they have some intent. Like again, I want to swap my USDC for ETH. They usually then will use like wallet software MetaMask, something like this and that will author a transaction.
00:07:06.770 - 00:07:22.650, Speaker A: Transactions go into a public or even these days private mint pool. And there we have entities called searchers and searchers jobs are basically to find these different strategies they have. So for example, a sandwich strategy is one type.
00:07:22.650 - 00:07:33.840, Speaker A: You could have a different one. For example, you could specialize in liquidations. You could say oh, here's a CDP and maker and it's suddenly under collateralized, I need to go liquidated for the health of the system.
00:07:33.840 - 00:07:55.278, Speaker A: And yeah, side note that should just show us that not all mev is necessarily bad. There's like good mev because it keeps our protocols healthy and kind of points to this bigger picture of having this whole design space of again, just programming with these types of incentives. So searchers are the ones who are collecting extracting.
00:07:55.278 - 00:08:13.494, Speaker A: This mev, depending on how you look at it or the example, the way they do this is having bundles. And so a bundle is again, just like a stack of transactions. Again, with our sandwich example you would have my trade if I'm being sandwiched the front run and the back run and that's like the bundle that then goes to a builder.
00:08:13.494 - 00:08:26.190, Speaker A: Builders are kind of like searchers. They basically specialize in just making complete blocks versus having like one or two specific mev strategies that they specialize in. So builders build blocks which they then need to hand off to validators.
00:08:26.190 - 00:08:41.354, Speaker A: Already this picture is getting more complicated. This diagram was put out around the time of the merge for proof of stake Ethereum. I updated this today actually because it's again already getting a little more complex.
00:08:41.354 - 00:08:55.986, Speaker A: You've probably heard of ERC four three seven this is account abstraction. It's been a pretty hot topic. The idea here is that rather than me as a user go to make sort of raw Ethereum transactions that go on chain, I can now have this thing called a user operation, a user op.
00:08:55.986 - 00:09:25.766, Speaker A: And the idea is that rather than use the chain directly, I can abstract what I want to do and basically use the full sort of power of the EVM to determine how my intent or operation. Again, the language here gets a little blurry but I want to do something and then now I have the full power of the VM to program how that thing can happen. Yeah, so now you have users talking to wallets they might make transactions they could also then for example if you have a smart contract wallet they'd make these user ops.
00:09:25.766 - 00:09:41.234, Speaker A: There's now another actor called a bundler in the four three seven world that's then collecting the user operations. They make their own bundles, four three seven bundles which go into transactions that then would go to builders or Validators. There's a bunch of other arrows just not even on here.
00:09:41.234 - 00:10:00.450, Speaker A: It quickly gets very hairy. But yeah, point is things are getting complicated quickly and it keeps going. So 437 adds like something to the picture there's I think a pretty frontier research sort of direction right now is thinking about an order flow auction.
00:10:00.450 - 00:10:29.120, Speaker A: So if you have this picture where users are trying to use the chain and there's already all this infrastructure in the middle people want to think about ways to auction off these essentially rights to execute these different user intents and one way we've thought about this is just literally having an auction. Now we have another actor here like a solver in an ofa if you've heard of Cal swap this is kind of essentially the idea. Yeah.
00:10:29.120 - 00:10:40.722, Speaker A: And as you can probably guess it just keeps getting more and more complicated every day. Of course this is just at one layer of the stack. You could have this at layer two.
00:10:40.722 - 00:10:53.270, Speaker A: So you have to think about all this in that context. Then basically for each different sort of box or like column you could have centralized or decentralized components. So yeah, it quickly gets complicated.
00:10:53.270 - 00:11:27.266, Speaker A: So there's a lot going on and yeah, the bottom line is there's almost this intrinsic thing happening when we go to use blockchains the way we make them today and that thing just naturally has this consequence of mev and it turns out that mev kind of is always there and moreover it's this centralizing force. This is where it starts to be very problematic, especially for our core protocol. It's very important for Ethereum to be decentralized and have all these properties that follow from that.
00:11:27.266 - 00:11:58.702, Speaker A: And the thing with Mev is that again, it's directly sort of opposing that decentralization goal. The reason why is because if I'm over here and basically any of these players here, if I'm a little bit better at using this Mev as someone else's disadvantage in this picture, then I could basically make this flywheel where now I just get better and better and better. I just have reasons either because I can directly subsidize usage or something like this, but basically I can become more and more of an entrenched established player here.
00:11:58.702 - 00:12:12.530, Speaker A: And what that means is now it's harming the centralization of this whole network. So that's not good. And recognizing this we can say, okay, well, yeah, this is like messy, chaotic picture.
00:12:12.530 - 00:12:31.826, Speaker A: What can we directly do is we can make sure that the core protocol itself is actually retained some decentralization. And the way we're going to do that is basically just putting this firewall in place between the validators of the core protocol and all this other stuff. This is what we call PBS proposer Builder separation.
00:12:31.826 - 00:12:56.240, Speaker A: Again, if you follow this, you've probably heard that term thrown around and again the idea is basically saying, okay, can we think about how to remove these centralization tendencies from this whole picture, at least from this one part of the stack? What this picture does really is just push them up the stack. And so we haven't really solved the problem, just moved it somewhere else. But we can at least keep this part good and that gives us more breathing room to think about this other part.
00:12:56.240 - 00:13:15.170, Speaker A: Right? So that being said, I haven't even really said how pus work. I've just claimed it's a thing we can do and it turns out there's like a very large design space around it. And we also do want to be thoughtful about how we actually roll it out, especially if we enshrine anything in the core protocol.
00:13:15.170 - 00:13:28.486, Speaker A: So that means that some sort of enshrined PBS is probably some years away. At least it's not anything going to happen super soon. And so what can we do in the meantime? We can essentially do off chain PBS.
00:13:28.486 - 00:13:59.636, Speaker A: And you've heard of Me Boost or if you have, then that's exactly what Mebboost attempts to do is implement PBS in this off chain fashion. Yeah, again, this is like a whole different talk but it's just like calling out some of these different parts again of looking at this picture and saying if there's all these different players, some of them stay relatively immature because they kind of have just come onto the scene. Some of them are maturing and the builder market and searcher market I think are already quite sophisticated.
00:13:59.636 - 00:14:10.750, Speaker A: But it's only probably going to get more sophisticated from here. So there's all sorts of things you can do. You can think about more on the user part of things.
00:14:10.750 - 00:14:30.930, Speaker A: Rather than just leak the mev to other parts of the stack, can we capture it and actually internalize it back to the user? So, for example, if I make my unisop trade, is there some way to capture that slippage value that otherwise I would have left to someone else? And you could imagine that even flying directly back to Me in the form of a rebate. So it's almost like I get paid to trade. That's pretty nice.
00:14:30.930 - 00:14:45.850, Speaker A: Four, three, seven is happening. That opens again a whole nother layer to this. And then generally you can ask these same questions, like for applications broadly, the protocol broadly, can we minimize mev, can we capture it, to use it somehow? All sorts of fun things like this.
00:14:45.850 - 00:15:00.830, Speaker A: So the rest of this will be focused on PBS and what that means for the core protocol. Today, that means boost tomorrow some sort of enshrined PBS. And let's look at what that is.
00:15:00.830 - 00:15:21.056, Speaker A: So in case you haven't heard, what is Mevoost, it's an off chain implementation of PBS stewarded by Flashbots. They're like a big Mev R D firm in the space. Again, if you've heard of Mev, you've probably heard of Flashbots, along with many other researchers and developers in the Ethereum community.
00:15:21.056 - 00:15:45.960, Speaker A: There's a link here if you want to just check out a place to get started. And okay, so we'll step back a second and say, how are we going to actually implement this PBS thing if we want to build Mefboost to do this? What are we really saying? At the highest level of abstraction, we have proposers, the ones, these validators who are actually minting blocks through the chain. We have builders who are doing all this other stuff upstream of that.
00:15:45.960 - 00:16:02.716, Speaker A: And the core problem here is that proposers want to sell their block space, right? They wanted to sell what actually happens in the execution part of their block, which is this little question mark thing down here. And builders ultimately didn't want to buy that from them. Right? So already we have this market, we have people who want to sell something.
00:16:02.716 - 00:16:14.720, Speaker A: If you want to buy something, markets are a great way to structure that problem, a solution to that problem. And so, yeah, what I try to do with this graphic is have a chain of blocks. So this is the blockchain.
00:16:14.720 - 00:16:26.176, Speaker A: If you are familiar with this part, there's like a consensus layer and execution layer after the merge, right? So there's now kind of two parts here. The consensus block is the blue part. Inside we have this execution payload.
00:16:26.176 - 00:16:38.456, Speaker A: And I try to communicate the fact that some execution payloads have more or less mev by this golden border here. And what this means is that you have this channel blocks. You come to the next block in the chain, the proposer wants to build.
00:16:38.456 - 00:17:03.664, Speaker A: And the question is like, well, what do they do here? This is where they could then think about outsourcing that to one of these builder actors. So now we have a network of block builders again, who want to buy block space, a network of proposers who want to sell blockspace, the validators here. And yeah, the question is like, how do we connect them? And that's essentially what Weboost does is provide this market, this abstraction for them to do.
00:17:03.664 - 00:17:15.124, Speaker A: So, yeah, it's kind of like a bit overloaded because we use it to refer to the whole thing. So it's like this network to structure this exchange I just described. It's also all the software to actually do the thing.
00:17:15.124 - 00:17:30.296, Speaker A: So ultimately, if you are a solo sticker at home, you might run Map Boost. That means you have this sidecar thing, this middleware that sits next to your setup and facilitates this mev buying and selling. And ultimately what it does is just construct this again, rendezvous.
00:17:30.296 - 00:17:49.664, Speaker A: So it lets for each slot that a proposer has them connect to this network of builders and says, okay, as a block builder, I can bid for this block. And it's a way for me to tell you what my bid is. And yeah, the naive thing here is you basically as a builder, just send your block over.
00:17:49.664 - 00:18:10.980, Speaker A: The project says, great, I'll pick like the highest bid, for example, and carry on. So that's basically what this says, right? It's just like if I don't worry about any sort of attacks or anything, I can do exactly that I can imagine. Like as a proposer, I just know where all the builders are because they told me ahead of time, every slot I say, hey, give me your best block.
00:18:10.980 - 00:18:24.830, Speaker A: They do. So if I'm revenue maximizing, I'll pick the most valuable one, the one with the highest bid, select that one and move on. So there's a catch though, which is that it can't be that simple.
00:18:24.830 - 00:18:58.070, Speaker A: So ethereum, right, we want to have again this very decentralized broad validator set that could even mean you have quite anonymous actors who actually might try to grief this mechanism. Meaning they might try to do this to take advantage of a builder, something like this. So because we do want to support all sort of types of validators that show up, we don't want to have some trusted whitelist, for example, or something like this to say who can access this network, we want to have it such that anyone can use it.
00:18:58.070 - 00:19:11.960, Speaker A: And this leads to a problem because the way this usually works is, okay, as a builder I'm working with all the searchers I was talking about. Searchers would have then basically bid for inclusion in the block. Builders make a block, they then have a bid to the proposer.
00:19:11.960 - 00:19:35.168, Speaker A: And usually that looks like some sort of like even just an ETH send within the block to the proposer and it's a little bit less than the value of, say, what the searchers bid? That's like the builder's compensation. And again, there's like a whole supply chain here. So what happens though is as a validator, I could just take the payload I'm given in the construction I've given so far.
00:19:35.168 - 00:19:54.792, Speaker A: I could just take the payload and I could say, hey, this is a great block, but you're taking your 10% share. What if I just take that for myself? Which right now everything says sort of in plain text so I can see that and I can do so. And that's what this is trying to demonstrate, this Mev stealing, where the honest exchange would be on the know.
00:19:54.792 - 00:20:11.096, Speaker A: This builder I call Debbie Cafe, they get like some marginal sort of tip for their work. The proposer maybe gets most of the value, but that's okay. The attack here is that the proposer says, well, actually, I want all of it and in fact, I'll just leave you none.
00:20:11.096 - 00:20:29.760, Speaker A: And that's not great because again, we need the mechanism to have integrity on both sides with prosertation and builders. Otherwise no one will use it and we won't be able to have this nice firewall thing to prevent this centralization flywheel that I pointed out earlier. So it's important that this, again, has integrity.
00:20:29.760 - 00:21:00.530, Speaker A: It's a sound construction that people actually want to use. So we have this problem of stealing, well, how are we going to fix it? So again, just like at a very high level, you either only let trusted actors who promise they're going to say, hey, I'm never going to do this ever. Tim you only let honest actors play this game, have access to this market, or you somehow change it such that they don't really have to give you a promise because they just simply can't do this sort of attack in the first place.
00:21:00.530 - 00:21:24.070, Speaker A: And that's essentially what mevboost does, is it says, okay, we're going to add in this additional run of communication and have this sort of commit reveal game. What that means is that as a builder, I'm going to send over a commitment to the block and then the proser has to accept it in binding fashion before I reveal the whole block. And yeah, at eye level, that's what's happening.
00:21:24.070 - 00:21:34.520, Speaker A: Here's a little cartoon of this. So the intuition is that I've made my payload as a builder, but it's blinded somehow. That's what I give to the proposer.
00:21:34.520 - 00:21:43.800, Speaker A: It turns out that we can essentially use like the slashing security of the value set. So the proposer signs this. They make their whole block that they would want to put on chain.
00:21:43.800 - 00:21:55.292, Speaker A: They can sign this and bind them to it up to a slashing penalty. That then is given as proof to the builder that the proposer has bound themselves to this block. And once they've done that, they know it's safe to reveal.
00:21:55.292 - 00:22:18.810, Speaker A: And so they reveal the unblinded block, which the proposer then proposes naturally to the rest of the network. So you can't steal the MEB. And just to make it clear, the reason why is because the proposer has bound themselves again up to slash chain to use this one specific block that includes the builder payments and all that and it couldn't use any other one.
00:22:18.810 - 00:22:55.960, Speaker A: So this last bit though, at the very end here, where the builder has to reveal a block, we kind of have like addressed the first problem and now have another, which is that builders now are trusted to reveal the block and if they don't, they could then grief proposers. This is like a common theme with this PBS stuff is that there's a design and you have some hole, so you try to patch the hole and then there's like another hole somewhere else and it just goes back and forth. But all that being said, I called to hear this availability attack and the idea is that essentially I can have you sign this thing, but then I can just not give it to you.
00:22:55.960 - 00:23:11.576, Speaker A: And the reason that's a problem is because if I don't give you the full block, well, there's nothing for you to propose. So then you just lost out on the chance to propose the whole block. So the current way we get around this is with this actor called a relay.
00:23:11.576 - 00:23:35.910, Speaker A: And basically the relay is like this trusted party that is going to do a couple of things. They're going to make sure that builders are sending valid blocks, they're going to be this nice rendezvous viewpoint for proposers and builders and importantly, they are going to ensure they're going to act as these availability oracles. They're guaranteeing that the payloads will be available if the proposer holds up their part of the deal.
00:23:35.910 - 00:24:08.554, Speaker A: So now again, we silo some of this trust and the relay, but it means that then with respect to proposers and builders on either side of the abstraction, they don't need to be trusted at all. And yeah, an important point here is you have many competing relays, so it's not great to have this centralized trusted component, but you could have many of them and competition usually helps with a lot of the problems that you get from having any centralization in the first place. So putting it all together, this is kind of what it ends up looking like.
00:24:08.554 - 00:24:30.370, Speaker A: You have many builders. Again, there's ideally lots of competition in this builder market and that, for example, makes censorship type things harder because I could basically undercut you as a competing builder if I see you're doing something that is like censoring something like this relays. Two, the same argument applies, the more the merrier.
00:24:30.370 - 00:24:45.602, Speaker A: Mevboost is like in this picture, these are like different the blocks or these different software components. So you have mevboost sitting there and it's for the validator orchestrating, this communication to all these relays. And then they are in turn talking to all these builders.
00:24:45.602 - 00:24:55.928, Speaker A: And this is the whole picture. So now we'll look at some data. Again, this design shift with the merge to get ready for proof of stake ethereum.
00:24:55.928 - 00:25:03.692, Speaker A: And yeah, okay, these actually all came from today, so it's pretty recent. This website, memboost.org is pretty cool.
00:25:03.692 - 00:25:20.176, Speaker A: It has like a lot of cool stats on there. This is just from the header basically showing within the last 24 hours, 80% of the network has used this thing, which is like massive. If anything, this number is low simply because Chappelle just happened, the latest hard fork.
00:25:20.176 - 00:25:29.956, Speaker A: And so some operators haven't updated their nodes completely. But yeah, usually the number is much higher than this. So it's a very important part of the network now.
00:25:29.956 - 00:25:38.490, Speaker A: It calls out flashbots dominance. So flashbots is this firm? I pointed out they used to have much higher dominance. We'll get to that in a second with these graphs at the bottom.
00:25:38.490 - 00:25:46.348, Speaker A: So it's good to see that's pretty low in relative terms. And yeah, then we see this just counts. How many relays have been active? Again, we're at ten.
00:25:46.348 - 00:25:55.008, Speaker A: And again, the more the merrier here. So looks pretty healthy. And again, these are charts from Mavboost Pix, another good website to call out.
00:25:55.008 - 00:26:08.336, Speaker A: And basically they're saying this is like the relay market on the left. And we see that it started originally with Flashbots basically doing the whole thing. And then over time, other players entered the scene, in particular, like the ultrasound relay.
00:26:08.336 - 00:26:16.228, Speaker A: This orange blob that's grown has really stepped up. And yeah, Agnostics in there. You can look at the list.
00:26:16.228 - 00:26:40.910, Speaker A: Bottom line is you already see the market is like having more entrance, starting to mature, and that's really exciting. Then on the right here, it's a similar story for builders, where again, you see originally this big orange strip is Flashbots. And that was, again, to kind of bootstrap or seed the market, give other players time to come and gain some of their share, which you see with all the other colors coming out.
00:26:40.910 - 00:27:07.284, Speaker A: And yeah, I mean, it could always be better, but it basically went from one player to now like many players. So it's definitely turning in the right direction. And just to drive the point home, this was from March 20, so, a few weeks ago, and this is definitely an outlier, but this was a payment for some mev block of almost 700 e, which was a bunch of money.
00:27:07.284 - 00:27:19.720, Speaker A: It's even more now. This actually went into the lido pool, so good for them. But yeah, the point being is people are using this thing and it's quite serious.
00:27:19.720 - 00:27:40.016, Speaker A: So, okay, we have this problem, we have this solution for at least the short term of a boost and it seems to be working. So we're good, right? And no. So basically, again, I kind of called out the fact that we have this relay actor and.
00:27:40.016 - 00:27:57.928, Speaker A: It's now trusted in this game and it turns out that just is already showing some problems. So for one, we have censorship of the relays. So a lot of the relays, I showed you this picture over here with this graph on the left, maybe there's like ten people here in the market.
00:27:57.928 - 00:28:20.152, Speaker A: A lot of them are essentially following various legal mandates in their jurisdiction, which they should. But that being said, what it implies here is that some relays are straight up censoring some transactions which really goes against this idea at least of having layer one censorship resistance. This is a graph.
00:28:20.152 - 00:28:26.540, Speaker A: This is off mevwatch info. Again, I'm trying to share a lot of really cool websites. People have been looking at this stuff very deeply.
00:28:26.540 - 00:28:43.104, Speaker A: And mevwatch info, this is showing which blocks are OFAC compliant. So this is referring to this legal ruling that a lot of people are following right now in the space. And that being said, you can see this green blob has gotten much bigger.
00:28:43.104 - 00:29:02.620, Speaker A: So again, to the extent that we need censorship resistance that's trending in the right direction. But it's kind of just like ultimately a consequence of this model that this happened in the first place. So ideally we would like to maybe even remove the relay so that this is just not even a relevant concern.
00:29:02.620 - 00:29:15.596, Speaker A: Again, okay, so I'll have to explain this. This happened I think two weeks ago, sandwich the Ripper. There was like a pretty big MEP boost attack or hack you might have heard about.
00:29:15.596 - 00:29:42.372, Speaker A: And really what happened was again sort of a flaw with this relay system. And I'm not claiming that some enshrined PBS would have made this perfect, but the fact that again, there's like ten a small number of very centralized actors that are good targets, honey Pots, we can say that doesn't help the problem. So what happened? Yeah, this is actually very clever.
00:29:42.372 - 00:30:04.824, Speaker A: So basically there is more or less a bug in the real implementation where when I go to do this exchange that I was trying to show way back here. So the way that we do this blinding is by sending over a header, not the full block, just a header of the block. The proposer signs the header and that is then basically binding them to this particular payload and then they release the full block.
00:30:04.824 - 00:30:20.340, Speaker A: So basically what was happening is that relays were not validating. That this blue part was actually a valid block. And so what that meant is that I could hand over a signature that would look valid for an invalid consensus block and then release the payload.
00:30:20.340 - 00:30:38.970, Speaker A: And the reason this is a problem is because now the relay actually doesn't have a valid block. So they can't tell everyone else that the proposer already signed this thing and the proposer who's rogue in this situation has the block they can pull off one of these map stealing attacks. This thing here and that's exactly what happened.
00:30:38.970 - 00:31:02.862, Speaker A: The reason this one was such a big deal was that if anything, just the size of it. So there were other sandwich bots. The sandwich attack I talked about the beginning, there were several of these bots that were essentially attacked with this thing.
00:31:02.862 - 00:31:08.874, Speaker A: And it was literally this MEF stealing. So basically a proposer went rogue. They tricked the relay in the way I just described.
00:31:08.874 - 00:31:25.446, Speaker A: They then got the sort of unblinded payload that they could turn around and they could unbundle the bundles. That's why we called it unbundling. And the way that this worked is that to pull up these sandwich attacks, these searchers had to go and expose like a lot of liquidity to even have a profitable trade in the first place.
00:31:25.446 - 00:31:42.940, Speaker A: But that's assuming that as a sandwicher, I'm the person who's both front running and back running. What this validator did is they took the sandwiches, took off one half of it, and then replaced themselves. And basically what this meant is they could trick the bot into being drained completely.
00:31:42.940 - 00:31:52.458, Speaker A: That's exactly what happened. So this is one transaction from this block. That was the attack block.
00:31:52.458 - 00:32:07.714, Speaker A: And again, point being is you can see this token trade for like $100 worth of Stargate token. The attacker got over $5 million of wrapped ETH. That's not what the sandwich bot meant to happen, I promise you.
00:32:07.714 - 00:32:28.144, Speaker A: But this was possible because essentially these bundles that were supposed to be atomic were able to be exploited. So that was fun. The question is, like, what's next? Right? So we've come to today, we have this relay thing and it's not like maybe perfect.
00:32:28.144 - 00:32:57.464, Speaker A: And so then we could think about how to make it better. More broadly, we can say, okay, if we have this off chain PBS, can we make it somehow? Can we enshrine it? Can we bring some version of it on chain and leverage the protocol to improve some of these pain points that I pointed out? And yeah, there's a lot of research happening here, a lot of R and D across the ethereum space. There's sort of like immediate near and longer term outlooks for PBS.
00:32:57.464 - 00:33:14.380, Speaker A: So in the longer term, we again want to go to relays, move to some kind of enshrined PBS. And what that means is taking this MEP boost thing I've discussed and kind of mapping into the protocol somehow. I think the leading sort of design that we have is from Vitalik with this two slot PBS.
00:33:14.380 - 00:33:26.992, Speaker A: There's like a one slot variant, two slots. There's a couple different ideas here. But basically the idea is take the Mibboos construction that we just looked at, drop it directly in the protocol so that you have like a bidding slot.
00:33:26.992 - 00:33:33.236, Speaker A: Then you have a proposing slot. Well, so the proposer would select a bid. Then the builder would reveal the next slot.
00:33:33.236 - 00:33:46.024, Speaker A: So you have this like two slot thing alternating. And that is just going back and forth next. Right, so Barnaby Monot, EF researcher, he's written about this idea called Pepsi.
00:33:46.024 - 00:34:11.510, Speaker A: And the idea, you know, we'll almost really need something like PBS long term. And the question is, if we just take this Mevboost idea, even this two slot PBS, which is moving in that direction, if we just take the auction today, is that the best we can do? It could be the case that we come up with a better auction format or way of thinking about the problem. And it would not be great if we ship something, then ultimately realize that we should ship something much better.
00:34:11.510 - 00:34:40.552, Speaker A: So the idea of Pepsi is basically just to abstract that away and say, rather than have one particular auction, just make it programmable in the same way that we have smart contracts that are programmable and yeah, super cool. There's some links here to e three research which go into the ideas if you want to learn more. Point being, yeah, there's a lot of open sort of questions here, a lot of exciting R and D on the way, looking a little bit closer near term for PBS.
00:34:40.552 - 00:34:52.770, Speaker A: So, yeah, ultimately just want to harden this thing. Even with the ship all fork last week or sorry, I guess it just happened. I'm losing track of time anyway, with the shipball fork that has happened.
00:34:52.770 - 00:35:11.236, Speaker A: I think there were even some more minor things that happened. And basically as core devs of the protocol, we want to harden this as much as we can. I think we just have to accept that even though we don't like some of the trade offs that Mevboost makes today, it's like something we're going to have for at least a year, if not two or three or five.
00:35:11.236 - 00:35:27.676, Speaker A: It's not clear how long we'll have this, so we should definitely make it as secure as we can today. Along with that. Right, in parallel, we want to have early expirations of a PBS spec so that we can iterate towards actually putting something into the core protocol, something that's kind of come up.
00:35:27.676 - 00:35:54.096, Speaker A: In the meantime, actually observing the system being used is this idea of like latency games. So the way to think about this, we'll just look at this graph on the left here and basically it's showing like when I have a builder sending a bid, how late into the slot. So the way the protocol works is sort of cut up into these slots if there's like the clock of time and it cuts time up into slots which are 12 seconds.
00:35:54.096 - 00:36:33.090, Speaker A: And the question is now when I have a winning bid, like, how late in the slot does it arrive to, say, the relay or the proposer? And yeah, what this data is showing is that basically the winning bids are kind of all pushed up against the end of the slot. And the reason this, why this makes sense is because if I pick the highest bid just on value, even just like the marginal transaction, like, that one more transaction that would pay me just like a few guay and priority fee would be enough to outbid someone else, right? All other things being equal. And so what that means now is there's this arms race as a builder to gather up all the transactions I can and put them into the next block that I sent.
00:36:33.090 - 00:36:43.556, Speaker A: So this is happening. It turns out that mev, like, latency gains like this are really bad because again, they're very centralizing. But again, interesting to see the data here.
00:36:43.556 - 00:37:03.992, Speaker A: This is something on the right where it's essentially showing the same plot or the same idea. Just like as we go through the slot, how valuable do blocks become? And you can see it kind of just trends straight up. So the question now is if we want to at least yeah, so there's actually a couple of things here.
00:37:03.992 - 00:37:12.920, Speaker A: But one way to think about it is we want to make the playing field more even. So, like lowering barriers, entry. And one way to do that is basically remove these latency advantages entirely.
00:37:12.920 - 00:37:34.550, Speaker A: And there's been a recent line of work called Optimistic relay, which basically does this relays do a couple of things, one of them being validate the bids they get from builders, like these blocks coming in. And you could imagine basically just trusting the builder to give you a valid block. It turns out even this like 200 milliseconds of validation time is really important already in this game.
00:37:34.550 - 00:37:44.596, Speaker A: So, yeah, really cool research there. And that's kind of ongoing right now. This was right after they rolled this out on the ultrasound relay.
00:37:44.596 - 00:37:54.732, Speaker A: So they've been leading in charge on this work. You can see that their winning share of slots here just shot up. And that was pretty directly just from this one change of rolling out this optimistic idea.
00:37:54.732 - 00:38:14.376, Speaker A: So pretty cool to see. And then zooming way in just like immediately. Yeah, this sandwich slipper thing that I discussed, obviously fixing that, but already we're seeing it's basically pushing the synchrony assumptions we're making to their limits.
00:38:14.376 - 00:38:34.396, Speaker A: Meaning that the relays are now just doing even more work to make sure that this unbundling can't happen. And when they do that, it means that blocks are essentially coming later and later against some deadlines we have in the network. And what that means is that if you're too late, then essentially the rest of the protocol, like the rest of the validators, don't see a block for that slot.
00:38:34.396 - 00:38:43.560, Speaker A: It's like a missed slot. And that's not good because basically it's like you could have made a block in the chain, but you didn't. So that is bad for everyone, honestly.
00:38:43.560 - 00:38:51.064, Speaker A: So, yeah, there's some interesting consequences. There something to look at for sure. Shanghai just happened.
00:38:51.064 - 00:38:56.436, Speaker A: The hard fork. Very exciting. We have four four, four coming up with Blob space prototype.
00:38:56.436 - 00:39:01.676, Speaker A: Sharding bunch of words you probably also heard this weekend. So that's really cool. Yeah.
00:39:01.676 - 00:39:13.872, Speaker A: And there's a bunch of other ideas around improving this model, generally one of them being like censorship, resistance. So there's like an idea of inclusion list. Yeah, we can go to that more maybe in the questions if you want to hear more.
00:39:13.872 - 00:39:33.812, Speaker A: But point being, there's a lot of different ways to think about improving medboost. So how to contribute. I'll run through this in the wrap up, so there's a lot of ways, honestly, I'll just call some repos if you want to contribute with more engineering or research here.
00:39:33.812 - 00:39:45.050, Speaker A: So there's Slash boss at the top, both mevboost and the relay. I've actually started an alternative implementation of the previous two things in Rust. So if you like Rust, check that out.
00:39:45.050 - 00:40:05.732, Speaker A: There are specs. So basically this core interaction let me go way back, this core interaction here between Builder and Proposer, we have this Builder API for it. I mean, honestly, yeah, it's this okay, went too far back, but basically it's this blue line here.
00:40:05.732 - 00:40:31.286, Speaker A: The idea is we just have a minimal API for this interaction. And then what that means is that anything happening really on either side of it, but especially upstream of it, is free to do whatever and you just have to conform to the API and we still get all the benefits. So that's pretty cool that's in this Builder specs repo that I listed and yeah, so there there's like, I think a lot we want to do right now.
00:40:31.286 - 00:40:42.422, Speaker A: It's essentially just like an API spec. Here's what we can do around specifying honest behavior, Avi writing testing from that spec. So check that out.
00:40:42.422 - 00:40:56.554, Speaker A: Hive is this like very impressive honestly testing framework, let's say. And for here, we could add in these mev components. Like, they kind of have limited support right now, but we could definitely add more.
00:40:56.554 - 00:41:06.062, Speaker A: And that would let us do like end to end testing of this whole stack, which would be really helpful. And yeah, if you want to contribute more. On the research side of things, there's e three search you've probably heard of.
00:41:06.062 - 00:41:14.002, Speaker A: I called off Frontier tech. So Frontier Research is like a research group coming up. They are looking at mev as well.
00:41:14.002 - 00:41:29.254, Speaker A: And just another place outside of Flashbots or the usual suspects to look at. There is a boost community Call There's one a week from, well, Thursday, so next week. And yeah, there's a link if you want to check that out.
00:41:29.254 - 00:41:42.380, Speaker A: This is my Twitter, so DM me if you have more questions, I'm happy to direct you various places if you want to get involved. So I know there's a lot, but I think I might have time maybe for a few questions. And yeah, thanks.
00:41:42.380 - 00:42:17.954, Speaker A: Yeah. So we do is a short answer, but there is an important distinction here where a validator can always choose to build locally. So if we assume there's some altruistic sort of chunk or core of the network, if there is some issue where so if you think about this, what's really the worst that could happen if you had this cartel builders? Well, they could essentially censor things, which is not good, but if there was, again, an honest or even altruistic set of validators, they could see this.
00:42:17.954 - 00:42:39.810, Speaker A: And if they see this, they could basically say, hey, we're just not even going to touch this network at all, this like, maboost network, and then basically build blocks the way they used to. Yeah, they do today. But also, what we're seeing just from the data, right, this thing's very much used.
00:42:39.810 - 00:43:24.156, Speaker A: I think the question is, how much of the network is altruistic versus just rational meaning, like profit maximizing? And ideally, we wouldn't want to have this assumption that things need to be altruistic or there needs to be this honestly, even honest majority of actors. Oh, not even essentially, along with the payload header, you basically just claim, I'll pay you, say, like half an ETH or a quarter E, something like this. And so then Metboost looks at all of them and right now it picks the highest value.
00:43:24.156 - 00:43:34.916, Speaker A: So if you send a bid for one ETH, I send a bid for half an ETH, you would win. Yeah. One thing is actually, this value is not really verified at all and we haven't seen this yet.
00:43:34.916 - 00:43:49.858, Speaker A: But you could imagine a builder, again, griefs, this mechanism, by just lying. Then we need to provide payment proofs and that's a whole different thing. But yeah, exactly.
00:43:49.858 - 00:44:05.770, Speaker A: Yeah. And presumably what's happening is most builders see about the same set of order flow and so then there's competition for about the same thing. If that's the case, then if all of the searchers in the block will pay, say again, half an ETH, the builder will say, I'll bid zero point 49.
00:44:05.770 - 00:44:17.280, Speaker A: Right. They're just going to take a minimum amount, because if they don't, if they take more than what the market will clear, then they actually lose out on the opportunity. Because you would underbid me, for example.
00:44:17.280 - 00:44:33.576, Speaker A: And yeah, so as long as there's many builders in competition, then you'd expect these spreads to compress and yeah, that's what happens. Yeah. First price, all that.
00:44:33.576 - 00:44:48.370, Speaker A: So you could think about making a more sophisticated auction. And that was like the Pepsi thing I called out was like, what if instead of having a fixed format at all, it was just like completely programmable, very much like a count abstraction. But again, I think that's very much an open ended R D question right now.
00:44:48.370 - 00:45:19.144, Speaker A: Yeah, you definitely can do this. One thing searchers will do is basically, if they start to do some sort of mev strategy to extract something, they can basically replace that transaction. That would close out the bundle with a self transfer.
00:45:19.144 - 00:45:39.730, Speaker A: And because of the way we do transaction replacements, there's like a way just to basically it's the same nos but a higher fee. So you could do this and you just end up with like a self send, which basically does nothing except you just pay the base fee to do that. But the reason why is because then if you didn't do that, then you would end up executing your strategy, which would have cost you a lot more.
00:45:39.730 - 00:45:52.150, Speaker A: So, yeah, there's like cancellations and stuff like this where things like that could happen. Yeah. You can imagine there could be some situation where someone bids irrationally for some reason to take up the block space.
00:45:52.150 - 00:46:17.774, Speaker A: There's one over here, definitely. Yeah. So I think because there are relatively even fewer searchers and builders compared to builders to validators it's even more.
00:46:17.774 - 00:46:49.660, Speaker A: Sort of like a trust reputation thing, if it came out that a builder was stealing mev from searchers, the searchers would all stop using them immediately. But that being said, again, sort of like the ideal thing here is where you actually have you'd kind of want communication from each step encrypted in some way where you'revealing enough information that you can still proceed with whatever auction you have, but it still is protecting privacy of the engaging actors. So to say it a different way.
00:46:49.660 - 00:47:15.314, Speaker A: What I'd want as a user is the ability for someone to background me to do this thing where they ultimately pay me for the trade, but I don't want them to know the full trade because otherwise they would just front run me. Right, so then now you can think of ways to reduce or change the trust assumptions here to get to that. Most of those require more advanced cryptography than we have today, but yeah, that's just what makes it interesting.
00:47:15.314 - 00:47:38.420, Speaker A: R and D exercise. Yeah. So that's kind of what I was just touching on, where ultimately a lot of why this happens today is because transactions happen in clear text.
00:47:38.420 - 00:48:04.344, Speaker A: And so as a searcher, if I have too much slippage on my trade, then as a searcher, I could comment basically that's value I'm leaking from my trade. And so one way to get around this is rather than someone front run me to collect that value, I somehow encrypt my transaction in my trade so that basically they wouldn't know how to do this in the first place, so they just actually can't. And that's the idea there.
00:48:04.344 - 00:48:15.650, Speaker A: So then that would add kind of more pathways to that big supply chain graph thing I had where now you have layer years of encryption to protect trades. Yeah. Swaps all sorts of things.
00:48:15.650 - 00:48:29.040, Speaker A: Okay, well, thanks, everyone. I'll go ahead and wrap up. Bye.
