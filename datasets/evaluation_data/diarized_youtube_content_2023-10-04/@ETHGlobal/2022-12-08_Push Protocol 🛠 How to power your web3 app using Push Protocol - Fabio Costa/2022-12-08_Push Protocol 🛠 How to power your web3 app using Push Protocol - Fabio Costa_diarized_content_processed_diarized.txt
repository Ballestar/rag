00:00:06.170 - 00:00:11.118, Speaker A: Hey everyone. Yeah, I think my voice should be fine for everyone. Everyone should be hearing me.
00:00:11.118 - 00:00:14.570, Speaker A: Cool. Well, my name is Fabio. I am a developer at Push Protocol.
00:00:14.570 - 00:00:28.166, Speaker A: And today we're going to be talking about more of a workshop. We're going to be talking about different ways on how you can integrate communications into your own protocol, whether they are notifications or whether they are chat messages. So that's the agenda we're going to be covering today.
00:00:28.166 - 00:00:35.750, Speaker A: Basically web three communication. The solution about push protocol. We're going to be talking about Pushchat and we're going to be doing demo.
00:00:35.750 - 00:00:50.662, Speaker A: Most of the workshops going to be hands on. Well, I think for everyone that has been in Web Three for a while, it's pretty clear that we have one of the issues that we have in Web Three, scalability privacy. One of them is communication.
00:00:50.662 - 00:01:13.934, Speaker A: By communication I mean is, as of today, there is no way for users to receive information to their wallet addresses based on things that happen on chain or off chain. What do I mean by this? Let's say that you are about to get liquidated on a lending protocol today. How do you get notified about this? Well, you actually don't, right? You as a user have to keep constantly checking your collateral ratio to see if you're about to get liquidated.
00:01:13.934 - 00:01:32.662, Speaker A: How do you know today there is a new governance proposal? Well, you have to go on Twitter or Discord to know about this. So if you think about it, that's not how we go on our lives in Web Two, right? So the reason I'm here on this workshop is because I received a notification 30 minutes before. So I'm preparing myself to come here whenever someone sends me an email.
00:01:32.662 - 00:01:40.006, Speaker A: It's not like I'm on Gmail pressing F five all the time. I receive a notification informing me that I have received an email. That's how we do in web two.
00:01:40.006 - 00:01:53.834, Speaker A: In Web Three, we still don't have this. So that's where Push protocol started. So the applications for webtree notifications, they are pretty endless, right? So I'm very passionate about Dows.
00:01:53.834 - 00:02:21.850, Speaker A: So imagine like getting notified on your wallets, for example, notify all participants of this Dow that there is a new governance proposal. Or for example, whenever there is a new yield farm for those farmers out there, or even better, let's say that you are on an NFT marketplace, it will be super nice to notify your users whenever someone places a bid on their NFT or whenever someone outbids you. So don't keep going back to the NFT marketplace to check the status of your bid.
00:02:21.850 - 00:02:37.834, Speaker A: So the solution that Push Protocol is building is an open communication layer. That means that anyone can simply tap into the network and fetch the notifications themselves. The notifications are dynamic, which means there are no restrictions on what you're going to notify your users.
00:02:37.834 - 00:02:45.674, Speaker A: You can notify a governance proposal. You can notify a live stream. You can notify a newsletter, can pretty much notify anything.
00:02:45.674 - 00:02:53.982, Speaker A: Even you can customize how you notify the messages. There is no restriction whatsoever on what you notify your users. This solution is MultiChain.
00:02:53.982 - 00:03:01.170, Speaker A: As of now, we are on Ethereum Polygon. Sending notifications is gasless. So you don't pay to send the notifications.
00:03:01.170 - 00:03:13.910, Speaker A: Of course, if you send notifications via Smart contracts, you have to pay the transaction fees. But if you don't send notifications on chain notifications, it's completely free. For the protocol, they send in notifications, but also for the receivers.
00:03:13.910 - 00:03:27.680, Speaker A: And it's also platform agnostic delivery because you can any front end, any mobile application, anything can actually display the notifications. It's an open network. You just call a node, say, hey, give me all the notifications from this address and display to the user however you want.
00:03:27.680 - 00:03:45.086, Speaker A: So Push, we have empowered over 18 million notifications. As of now, we have over 70,000, even though this right size 60, we now have 70,000 different addresses that they have opt in to receive Push notifications. And we have over 100 integrations.
00:03:45.086 - 00:03:56.658, Speaker A: And as I said before, the integrations can be pretty much anything. For example, the integration for Avi that they use is completely different from, for example, for Adal or for ENS. So there is no restriction whatsoever.
00:03:56.658 - 00:04:11.398, Speaker A: The notifications are going to notify your users. We just close this bridge. Well on Bogota this year on Polygon Connect, we announced a new feature from Push Protocol.
00:04:11.398 - 00:04:19.386, Speaker A: We started notifications. We have been building notifications for over two years and a half now. On Bogota, we announced something called pushchat.
00:04:19.386 - 00:04:30.046, Speaker A: So this wallet, if you have an address I have an address. Well, we can start sending messages, we can start sending a video, we can send a GIF, a sticker, a PDF, pretty much anything. So we closed this bridge.
00:04:30.046 - 00:04:37.750, Speaker A: So we started with notifications. Now we are doing messaging as well. And back there, here, that's my face.
00:04:37.750 - 00:04:49.786, Speaker A: This was on stage in Polygon Connect we also provide a feature that is currently in development, but it's Push video. So now can video call other addresses as well. And this is us.
00:04:49.786 - 00:05:01.274, Speaker A: We were doing a video call on stage and yeah, let's chat. So I have prepared a video here. It's going to be this one.
00:05:01.274 - 00:06:11.330, Speaker A: I don't know if the sound is going to be good. Cool. So this is about Push chat.
00:06:11.330 - 00:06:24.754, Speaker A: So, yeah, let's get started with the demos. So first of all, if you want to send a notification so first of all, let's go to our how we have a concept of channels. Let me just log in.
00:06:24.754 - 00:06:34.630, Speaker A: Spacious network. Cool. So the way it works is if you are a protocol service adapt or anything you want to send notifications to your users, you must authenticate yourself into the protocol.
00:06:34.630 - 00:06:44.774, Speaker A: We call this creating a channel. Nothing fancy, just authenticate yourself to the protocol so you can notify your users. So this, as an end user.
00:06:44.774 - 00:06:52.906, Speaker A: Those are what the user see, we have channels. So, for example, Makerdal, we have rect. Lancevi Earnfi, banker.
00:06:52.906 - 00:07:07.970, Speaker A: Let's say, for example, I'm interested in receiving notifications from together me. As an end user, all I have to do is click opt in, assign a message. Then what happens is I give consent put together to send me notifications.
00:07:07.970 - 00:07:15.474, Speaker A: People cannot send you notifications. You as end user have to give consent. So in the hackathons, people there are beautiful ones to send notifications.
00:07:15.474 - 00:07:28.118, Speaker A: The first step is you create a channel push protocol. So for this, you go to our staging push. That's our testnet, URL So we are on Gurley.
00:07:28.118 - 00:07:37.280, Speaker A: We are also on Mumbai for testnet. I have previously created a channel so that's the channel that I have. So that's the UI, when you create a channel so that's the UI that you have.
00:07:37.280 - 00:07:46.350, Speaker A: Let me switch wallets here. Just refresh. Cool.
00:07:46.350 - 00:07:55.326, Speaker A: So once your channel is created, now I can notify my users. So we're going to go over different ways of how we can do this. The first step is we can send manual notifications.
00:07:55.326 - 00:08:12.994, Speaker A: For example, you can send a newsletter to your users. Instead of sending a newsletter to email, you can send any newsletter to addresses. There are three types of notifications broadcast, which means notify all the subscribers of my channel target, notify this address subset, notify an array of addresses.
00:08:12.994 - 00:08:28.586, Speaker A: On this example, let's send a broadcast notification. Let's add a title Hello World. And the message is going to be, hey, this is a special way of sending.
00:08:28.586 - 00:08:37.498, Speaker A: So we add here a bold on the text. Hey, happy to be here. Let's add as well a media.
00:08:37.498 - 00:08:47.346, Speaker A: So let me go to YouTube. Let me take this ice cream video here. Just copy close here and just paste here.
00:08:47.346 - 00:08:57.110, Speaker A: So just add a video on my notification. Once I click send demo notifications, it's going to be broadcasted to all subscribers of my channel. But let me do something here.
00:08:57.110 - 00:09:16.570, Speaker A: So as an end user on the left here, this is the vision of the protocol about send a notification on the right, it's going to be the vision of a user that wants to receive the notification from your channel. So for this, let me create a brand new wallet just as a brand new user. Just to simulate a brand new user, let me just connect to my DAP.
00:09:16.570 - 00:09:22.942, Speaker A: So first, as I said, I have to opt into my channel. So I come here to my channel. How is it called? My channel is called Demo channel.
00:09:22.942 - 00:09:28.820, Speaker A: So let's come here, demo channel. Here it is. I just opt in.
00:09:28.820 - 00:09:39.390, Speaker A: Okay, so I will now receive notifications. So if I come here to the left, send notification, I just sign a message free. I send notification.
00:09:39.390 - 00:09:47.446, Speaker A: And we got here two. So we got here on the left here. Because whenever we send a notification to everyone, this everyone includes yourself.
00:09:47.446 - 00:09:57.014, Speaker A: And here on the left, on the right, we just saw the notification that I received and it's here. My notification. I also got on my phone as well, because I have the application installed.
00:09:57.014 - 00:10:07.150, Speaker A: We also get here on the browser extension. So if I just copy my address here, come here. Switch network, verify.
00:10:07.150 - 00:10:13.214, Speaker A: Cool. Notification is here. Also here that was playing around.
00:10:13.214 - 00:10:17.146, Speaker A: We have a notification from a lo Fi girl that I was playing around. Cool. I received my notification.
00:10:17.146 - 00:10:23.918, Speaker A: Very nice. Let's go to the next step. So, other way of sending a notification is you can send notification using SDK.
00:10:23.918 - 00:10:32.440, Speaker A: And usually for hackathons, that's the way that I see the most of people integrating, because it actually is very easy. It's just one functional call. That's pretty much it.
00:10:32.440 - 00:10:55.006, Speaker A: So for this so I have the code here, sending notifications, SDK and this, all I have to do is just call here. So most importantly, before I just explain what the code is doing for this workshop, all the codes that I'm showing, I just copy and paste from the documentation. Literally, I did.
00:10:55.006 - 00:11:03.950, Speaker A: No change whatsoever, just copied from here. So if you go to Docs push, then developers send the notifications. Very interesting.
00:11:03.950 - 00:11:20.500, Speaker A: Send notification using the push SDK. So that's literally I've just copied this code and paste it here. All this code is doing is I just import the push SDK ether is because I need to sign a message and amp because I'm adding my private key here.
00:11:20.500 - 00:11:27.702, Speaker A: We just need three things to send a notification. Actually two, but in this example, it's three. I need the private key of the channel.
00:11:27.702 - 00:11:37.718, Speaker A: What does it mean? It's the private key of the wallet that you created the channel. So it's going to be this private key here. I need the receiver in this case can be optional.
00:11:37.718 - 00:11:47.914, Speaker A: If I say, hey, notify everyone the receiver is optional, but in this case I'm saying, hey, notify this address here. And the channel address is going to be this address here. I just copy and paste here.
00:11:47.914 - 00:11:55.950, Speaker A: So that's the address that is here. As you can see, this is following the type ten format, which is EIP five, five, column five. That's the chain ID.
00:11:55.950 - 00:12:06.594, Speaker A: And this is the address. Because we are MultiChain and as of now, we are only on EVM chains, but soon we're going to be across non EVM chains as well. So that's a way to identify which chain you are.
00:12:06.594 - 00:12:15.880, Speaker A: The only change that I need to change here is the receiver. Because I create a brand new wallet. And the receiver is going to be this guy here, just come here.
00:12:15.880 - 00:12:21.714, Speaker A: And that should be it. And this code here just copy from the documentation. It's going to be a target notification.
00:12:21.714 - 00:12:48.238, Speaker A: This is the notification title and body. And that's actually the payload from the documentation, from the notification. So if I go to Dunta, send the notification, I run the code I got here the response from the SDK and if I come here, the notification should be here and it's here.
00:12:48.238 - 00:13:11.320, Speaker A: You got a notification here. I have to refresh here but I should get from here and also I'll get on my mobile phone if you install the mobile application, cool, we have send notifications manually using the SDK you can also send on chain notifications using smart contracts. To send notifications using smart contract, you just do a contract call, that's all.
00:13:11.320 - 00:13:40.814, Speaker A: I have a contract that I have deployed here earlier. I hope this session is still open because I deployed this yesterday so what this code is doing is, as I said before, the code that I got here from sending notification, I got from the documentation docs push sending notification we're interested in using smart contract so I just copied this and I paste it here. That's what I have here.
00:13:40.814 - 00:13:52.120, Speaker A: So what this contract is doing is it's just a ERC 20 token. When I deploy this token, I mint 1000 Tokens to myself. And all I'm doing is just overriding the transfer function.
00:13:52.120 - 00:14:09.210, Speaker A: And when the transfer is successful, then I will notify the receiver of the Token. So I'm going to transfer 100 tokens. These push tokens, my custom tokens that are created here and when the user receives the tokens, the user will also receive a notification.
00:14:09.210 - 00:14:25.600, Speaker A: So for this, the contract is already deployed. So what I have to do so once you deploy the contract on a polygon or ethereum, you just have to do one more step. This contract is already deployed so I'm not going to redeploy it again just for the sake of time.
00:14:25.600 - 00:15:00.454, Speaker A: Once you deploy the smart contract, you just have to do one last step, which is the smart contract will be sending notifications on my behalf, right? So all I have to do is I have to give consent for the smart contract to send on notifications how do I do this? When you deploy the contract, you just copy the contract address. You go to your channel UI that you created, come here, add delegate and then you add your contract here. Once this transaction is approved, then the contract can send notifications on your behalf but I have done this already so that's the contract.
00:15:00.454 - 00:15:20.340, Speaker A: I added this yesterday so the contract has been deployed and also the contract has been added here. I gave consent to the contract send notifications so actually we can now send the notifications so for this, we are overriding the transfer function. So that's what we're going to be calling so we're going to be calling the transfer function here.
00:15:20.340 - 00:15:49.936, Speaker A: We're going to be transferring two, three, four tokens because why not? And we're going to be copying this address so I'm going to be sending two, three, four tokens to this address and this address will not only receive the tokens, but also receive the notification now I just confirm this. And once the transaction is validated let's see here. Yeah, mongoli.
00:15:49.936 - 00:16:06.006, Speaker A: But it can also be on polygon. Yeah. Okay.
00:16:06.006 - 00:16:12.708, Speaker A: It's in taxi now. Okay. The transaction was sent.
00:16:12.708 - 00:16:21.770, Speaker A: So if I come back here, if I refresh, then I should see the notification here. Yeah, it's not here. Let me just refresh here.
00:16:21.770 - 00:16:29.166, Speaker A: Okay. Yeah. For a reason, the notification is not here, but that's fine.
00:16:29.166 - 00:16:32.782, Speaker A: So that's the idea. So you can do a smart contract call. Basically send all chain notification.
00:16:32.782 - 00:16:37.806, Speaker A: You just do a functional call to the contract. Cool. So those are three ways you can send notifications.
00:16:37.806 - 00:16:47.766, Speaker A: There are more. So for the sake of time, I cannot go in every single ways of sending notification, but it's worth mentioning them. So there is one that I'm super passionate about.
00:16:47.766 - 00:17:01.290, Speaker A: If you go to Docs, push developer Docs, sending notifications subgraphs. So you can send notifications from subgraphs. So you don't need to change any logic of your current subgraph.
00:17:01.290 - 00:17:10.698, Speaker A: We have one helper function that import into your subgraph, and the subgraph starts sending notifications. And it's also free. You don't pay to send the notifications.
00:17:10.698 - 00:17:18.554, Speaker A: So, yeah, the Graph, a lot of people know the Graph. A lot of people have created subgraphs before. So in this hackathon, you're creating subgraphs.
00:17:18.554 - 00:17:23.970, Speaker A: You can extend this to also add notifications. Just one helper function. Don't need to change any of your logic.
00:17:23.970 - 00:17:51.254, Speaker A: This way of saying notification I find super interesting. There is one more thing that I like to mention is of course we can send the notification ourselves but a lot of people for some use cases people not only like to receive the notification but most importantly whenever there is a notification. What we can do, we can call your API, say, hey, this address here received this notification and we call your API.
00:17:51.254 - 00:18:08.890, Speaker A: Why would you want this? For example, if you want to build an email bot, a discord bot, or a telegram bot, you just do your server, deploy the code, send to me or to any of the push crew team, the URL of your server. We whitelist this in our nodes. So whenever there is a new notification, we're going to call your API.
00:18:08.890 - 00:18:18.818, Speaker A: And then you can start building automations and things on top of this. This is called we use AWS SNS for this. And yeah, this is useful for as well.
00:18:18.818 - 00:18:30.600, Speaker A: If you have our own mobile application, then you can send notifications yourself. So you have 100% control of what you notify your users. We just call your API and you decide whether you want to notify your users or not on your own mobile application.
00:18:30.600 - 00:18:44.374, Speaker A: The last thing that I'd like to show you guys is for chat if you come here. So we're going to be adding chat for adapt here. So if you come here, push, docs.
00:18:44.374 - 00:19:01.618, Speaker A: Push. Pushchat for web three, this is a brief introduction of pushchat, how it works, the encryption verification proofs and yeah, an overview of how pushchat works. But what we're interested here is integrating pushchat, not this.
00:19:01.618 - 00:19:09.810, Speaker A: We're actually interested on this one here. So this is how we integrate push chat. So TLDR is just one react component.
00:19:09.810 - 00:19:20.278, Speaker A: That's pretty much it. So I have a code here, as I said, for here, just copied from the documentation push chat. This app here.
00:19:20.278 - 00:19:33.658, Speaker A: I just did a NPX create react app. I created this sample create react app. And I just installed the Wagme library and I installed the push protocol UI web.
00:19:33.658 - 00:19:54.750, Speaker A: I just used the Wagme library because I need the use account hook. So what all this application is doing here? Yeah, this is the default that comes in. I just added the chat component here that we provide from the push SDK.
00:19:54.750 - 00:20:01.830, Speaker A: So we just need one more. Let me just copy from here. Copy.
00:20:01.830 - 00:20:10.520, Speaker A: Okay. So we just need four information. So it's going to be here, it's going to be the address.
00:20:10.520 - 00:20:15.290, Speaker A: Okay. So we just need four things. So the first one is the account.
00:20:15.290 - 00:20:29.222, Speaker A: So where the messages are going from. So the notifications are going from the connected address on the tab. This, the support address is the receiver of the notification of the chat messages.
00:20:29.222 - 00:20:38.154, Speaker A: This can be dynamic depending on the application you're building on this case. I just hardly coded the receiver, the API key. As of now you need the API key to send the messages.
00:20:38.154 - 00:20:50.814, Speaker A: If you need, just let me know. But soon we're going to remove this very soon. So as of now we need this and the environment, which is this as we're on staging on the testnet environment.
00:20:50.814 - 00:21:01.944, Speaker A: So for this, let me come back here. Push chat dose NMPM starts. So that's the default UI.
00:21:01.944 - 00:21:17.760, Speaker A: And we see here on the bottom right corner the chat button. I just click here connect. Let me just decrypt because I'm decrypting the messages and here is the UI.
00:21:17.760 - 00:21:31.490, Speaker A: Hi there. Nice to meet you. Hey, yeah, you're here.
00:21:31.490 - 00:21:40.150, Speaker A: The message has been sent. I also like to show you guys the last thing which is I send the messages here. So the messages belong to you, to the users.
00:21:40.150 - 00:21:50.440, Speaker A: So if come here to chat, that's the chat UI. And look, the messages that I just sent there, they're going to be appear here. They're here.
00:21:50.440 - 00:22:01.774, Speaker A: So if you go like you could go to different DApps and you always see the chat messages with you. The chat messages go with you to different DApps that you use. So the messages that are sent there, they're here.
00:22:01.774 - 00:22:18.046, Speaker A: I can send gifs, videos, anything, memes emojis, anything you want to send. So yeah, you don't need also you don't need to use our react components. If you want to build the discord like application, you can use the rest APIs yourself and build the UI yourself.
00:22:18.046 - 00:22:26.450, Speaker A: By no means you need to use a react component. Just an easier way to add it but if you want to build your own UI, by all means you can do this. We provide an SDK.
00:22:26.450 - 00:22:39.664, Speaker A: It's the rest API SDK. You can build your own telegram or discord for Webtree. And that's all that I had.
00:22:39.664 - 00:22:54.676, Speaker A: So as of now, it's the push chat. This is an alpha, but just for a brief time after, we're going to open this for everyone. So as of now, if you want to start chatting to any wallet on Ethereum or chatting or to any wallet on Polygon, just come talk to us.
00:22:54.676 - 00:23:10.120, Speaker A: We have Poops and Poaps that give access to the push chat. We have $20,000 for hackers that are integrating push, whether notifications or chats on this hackathon. And we also have $1 million that we fund projects that want to keep building push.
00:23:10.120 - 00:23:16.676, Speaker A: And that's all that I have. Those are our discord community. It's super, super active.
00:23:16.676 - 00:23:25.230, Speaker A: And we also have a live workshop that we did a couple of months back. Different ways of how integrate push and that's all that I have. Guys, thank you so much.
