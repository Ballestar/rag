00:00:06.410 - 00:00:13.054, Speaker A: So thank you all for coming. My name is Ariel. I'm very excited to be here and present it for you today.
00:00:13.054 - 00:00:42.298, Speaker A: I work at a company called Blocks, which is the core developer of a very cool project called SSV Network. SSV stands for Secret Shared Validators, and it's a decentralized infrastructure structure for Ethereum staking. Now, before we start with a quick raise of hands, how many of you here has been engaging in ethereum staking, either through solo staking or any other staking service? Very nice.
00:00:42.298 - 00:01:16.840, Speaker A: Hopefully, there will be even more after DevCon. So I think in order to better understand what we do, it's important to take a step back and talk a little bit about the current state of Ethereum and how it works. So the transition of ethereum to proof of stake started almost two years ago on December 2020, and since then, we have about 440,000 validators active on the beacon chain, which amounts to 14 million Ether at stake, or $18 billion.
00:01:16.840 - 00:01:35.018, Speaker A: This represents about 12% of Ethereum circulating supply, and those validators are earning approximately between four and four and a half Apr. Even more if you factor in MAV, which is now available. Now, I personally think this is pretty amazing.
00:01:35.018 - 00:02:03.410, Speaker A: Even more compared to the fact that most of our ETA was just collecting dust in our wallet, right? So every new technology has challenges, and ethereum staking is no exception to that. The main challenge, and the most familiar one is slashing. Slashing is what happens if you part of the validation process, do something that goes against the protocol.
00:02:03.410 - 00:02:17.750, Speaker A: It's a big penalty into your principal stake, which is pretty bad because it can result in negative ROI. Definitely something you want to avoid at all costs. Moving on there's centralization.
00:02:17.750 - 00:02:49.074, Speaker A: If you are not new to crypto Twitter, you've probably heard a lot of concerns regarding centralization or a subset of that problem, which is client diversity. Basically, it's the idea there's no single point of failure in the form of one entity, whether it's a client or a service that has enough market share that he can shut down or censor Ethereum. Your keys have to be online.
00:02:49.074 - 00:03:03.634, Speaker A: Really goes against everything we know about keys management, right? We need to keep our keys offline, preferably in cold storage. So it's hard. It's also something we take for granted, right? Because we all have our device in our pocket.
00:03:03.634 - 00:03:15.526, Speaker A: We bring it up. We have Internet. But as in life, the Internet shuts off, the kids plug it off the wall, we go on vacations, and sometimes we come to load up a song and it's buffering.
00:03:15.526 - 00:03:30.320, Speaker A: Right? There's latency issues. Now, we personally can wait out those 20 seconds for it to load. But if we were to run a validator and we were to miss a duty because of that, we would miss out on the associated reward with that duty, which is pretty bad.
00:03:30.320 - 00:04:00.170, Speaker A: And last but not least, ethereum staking. Has a very significant cost of development and maintenance and almost all staking providers out there has to build their own infrastructure which makes it very very not reusable. Now, the bottom line of what I'm trying to say is that Ethereum staking is very very hard and a lot of it has to do with the design itself of the staking.
00:04:00.170 - 00:04:26.180, Speaker A: So let's see how it looks like. This is the most basic infrastructure scheme of almost all staking providers out there ranging from the Coinbases and the Krakens of the world all the way down to startups and solo stakers managing a single validator. This is the most basic way people set up the infrastructure and as I said, the reason is it's pretty much derived from the Ethereum spec itself.
00:04:26.180 - 00:04:42.706, Speaker A: Now, in this middle part here we have a thing called validator client. This is a software containing of different and a bunch of validator keys. Each validator box we see here represent a 32 E validator on Ethereum.
00:04:42.706 - 00:04:58.026, Speaker A: And this piece of software is responsible of coordinating those validators into the duties they have to perform periodically, every 6 minutes or so. Now for the key nice. Here you can see that this infrastructure has a very big flow in it.
00:04:58.026 - 00:05:22.174, Speaker A: This big thing in the middle is literally a single point of failure and this causes a lot of challenges and a lot of risks. Validator clients can only run a unique set of keys. If you try to run multiple validator clients with nonunic set of keys then you are risking being slashed almost for sure.
00:05:22.174 - 00:05:52.780, Speaker A: So robustness through stuff like redundancy or backup is something that is really hard to develop into the infrastructure of Ethereum. You also have to keep your past signatures of all of the things you signed with your validator key into something called the Slashing database. And if you lose access to that database because you fail to restore it or back it up correctly, then you're also risking being slashed as well.
00:05:52.780 - 00:06:17.358, Speaker A: The keys has to be online 24/7 which is hard. We just discussed this and because the infrastructure is not reusable, it's going to cost you a lot of money, a lot of resources and a lot of knowledge and expertise in order to actually do this. And this pretty much goes against everything we learned in the past decades.
00:06:17.358 - 00:06:45.690, Speaker A: Regarding software development, especially in crypto. One of the amazing things we have in our ecosystem is that we manage to build these components that everyone can use, right? Usually it's the blockchain itself, but it can also be an application. If we take DeFi building blocks, for example, that are stacking up and building on top of each other, this really reduced the cost of development for everyone and accelerated growth and innovation.
00:06:45.690 - 00:07:02.474, Speaker A: And because the current infrastructure of Ethereum is not reusable, it really hinders innovation. Because if the cost of innovation is high, then it's very high to innovate. So with that in mind, let's circle back to SSV.
00:07:02.474 - 00:07:20.386, Speaker A: SSV is a protocol. It's a decentralized infrastructure for ethereum staking and it tries to solve a lot of the issues that we just covered. So how does it do that? Well, first, it doesn't use a single validator node or any specific staking, service or provider to run its validators.
00:07:20.386 - 00:07:44.196, Speaker A: It uses multiple of them. No single operators hold the full key, so there's no single point of failure. We use threshold signatures and BFT consensus protocol to coordinate duties between non trusting parties in a way that builds fault tolerance within the protocol.
00:07:44.196 - 00:08:05.920, Speaker A: And the best part is that it's a reusable infrastructure. Anyone can use it in a permissionless way. And this really enables you to focus on the application, focus on your business and not on the infrastructure beneath, but still in a way that lets you enjoy a solid first class, decentralized infrastructure.
00:08:05.920 - 00:08:34.730, Speaker A: And it looks something like this and you can see in the middle part there's no single point of failure anymore. There's a bunch of them and they work together to run your validator. And if one of those nodes or clients, in our case it falls shuts down, gets hacked or compromised, nothing happens to your validator because the rest of them will continue to work.
00:08:34.730 - 00:09:07.270, Speaker A: And this is really the heart of it. Instead of having a single point of failure that runs everything, you now have a bunch of them. And this really removes centralization not only by the fact that you have a redundancy of more than one, but also because it's highly customizable and you can cherry pick your validator operators according to their set clients, their jurisdiction, their client provider, et cetera, according to your needs.
00:09:07.270 - 00:09:25.800, Speaker A: Now, we are all devs here, so let's see how it looks pretty much internally. So, as I said, each validator has to perform periodically, every 6 minutes or so, a duty. Whether it's an Attestation or a block proposal, it doesn't matter.
00:09:25.800 - 00:09:43.040, Speaker A: And then those four or seven or whatever the amount of operators you chose for your validators. Once a duty comes in, then they together select a leader in a very deterministic way. That leader proposes what they need to do, for example, sign an Attestation.
00:09:43.040 - 00:09:56.032, Speaker A: And then if they reach consensus regarding what to sign and this is where really the fault tolerance kicks in. This is where the power of SSV kicks in. Then they each produce locally a partial signature.
00:09:56.032 - 00:10:14.232, Speaker A: They then reconstruct it to a full signature and execute it to the beacon chain as a full and valid duty. And this all means that no operator has the full key, okay? They only have a share of it. So they need each other to work together.
00:10:14.232 - 00:10:36.396, Speaker A: But they are pretty independent, right? They don't need to know the other operators. They don't need to trust the other operators only to communicate over a consensus protocol. So with that in mind, the benefits of SSV are pretty significant, right? First of all, you don't have to keep your key online anymore.
00:10:36.396 - 00:10:55.720, Speaker A: Put it in cold storage. Follow the best practices of key management because they don't need the key, the threshold signatures that we use, they grant security. And if a share is compromised, it cannot be compromised in a way that will compromise the full validator.
00:10:55.720 - 00:11:13.260, Speaker A: There's no single point of failure anymore. It's decentralized, it's fault tolerant and it's ready to use infrastructure, right? It's reusable. Now you can use the same operators, the same network, the same setups over and over again.
00:11:13.260 - 00:11:28.370, Speaker A: And the cost of integrating SSV is practically nothing. It's literally a smart contract call, which is pretty amazing. Now, the best part about everything I just said is that it's not some moonshot idea.
00:11:28.370 - 00:11:34.944, Speaker A: This is no science fiction. This actually works. It's running on testnet.
00:11:34.944 - 00:11:55.088, Speaker A: People are using it, people are experimenting with it. It works and you can try it out today. So I want to talk a little bit about where we come from and where are we now? Well, it all started when we received a grant from Ethereum Foundation to build an SSV node.
00:11:55.088 - 00:12:12.396, Speaker A: SSV was later termed as DVT Distributed Validator Technology. Since then, for the last year and a half we've been running testnets during which we got engagement from over 3000 operators. 100 of them and more are verified operators.
00:12:12.396 - 00:12:33.920, Speaker A: And by that I mean to real and reputable staking services. Some of them the biggest in the industry that are running a test nest node, experimenting with this, with the intention to adopt it when it goes live. We also managed to accumulate over 20,000 validators so we can really test it that it works out in scale.
00:12:33.920 - 00:13:12.740, Speaker A: And right now we are at the final stages of getting it ready to launch, hopefully early next year, early 2023. Now, I want to kind of showcase to you how it looks like through a very simplistic flow or use case of a solo staker that has a Validator that he wants to run on the SSV network instead of running his own infrastructure or instead of choosing a centralized staking service. So we built a very cool and easy web app which you can try, which you basically come with your validator and you can import it to run on the SSV network.
00:13:12.740 - 00:13:32.372, Speaker A: All you have to do is bring your validator key, bring your keystore file, enter your password if you have one, so we can extract the key. And then you'll be asked to choose the operators for your validator. You will see a big list of operators, a marketplace of operators.
00:13:32.372 - 00:13:52.480, Speaker A: Some of them you know and recognize, some of them you don't. But you can evaluate every one of them through some metrics, like how many they are managing currently, what is their performance metrics according to specific time frames, what rate they are charging for their services. Because this is a free market and once you picked your group.
00:13:52.480 - 00:14:12.980, Speaker A: All you have to do is review and sign this transaction with your web three wallet and once it's broadcasted to the network, your operators will pick it up and start managing your validator for you. And that's pretty much it. You're welcome to the distributed infrastructure of the SSV network.
00:14:12.980 - 00:14:41.388, Speaker A: I really encourage every one of you to go to SSV network, check out this web app. It's very simple, very easy to use and it really showcases how to onboard a distributed validator and how to manage it. So I discussed one use case but there's a lot of different use case which you can use to build on it, right? Because It's infrastructure and infrastructure was meant to be used somehow.
00:14:41.388 - 00:14:57.456, Speaker A: So these are the most typical use cases that we come up with. Obviously there are more because now when we open up infrastructure as a reusable way, a lot of innovation can happen. So the most obvious one are staking pools.
00:14:57.456 - 00:15:12.250, Speaker A: Staking pools that will use SSV as their back end. And starting this presentation, I said there's currently 14 million ITER at stake. This number is projected to go to 40 million in the upcoming years.
00:15:12.250 - 00:15:45.700, Speaker A: And that new ITER that will come in will not only go to Lido, will not only go to Rocket pool, but in our eyes there will be a long tail of new staking pools that will compete for this market share because at this amount it's becoming a huge market. And for those staking pools, for those new staking pools now that they have the infrastructure available as a service, the next rocket pool will not take three or four years to build, it will take three months. And we know this because we currently have teams doing exactly that in those timeframes.
00:15:45.700 - 00:16:12.540, Speaker A: Moving on, there's a lot of dow treasuries on Ethereum, a lot of DeFi protocols, even bridges that has a lot of ether. They're also accustomed to holding ether, they're accustomed to the price fluctuations of ETL. And we see that that Eto will eventually find its way to staking because it's becoming the de facto reference interest rate for ethereum.
00:16:12.540 - 00:17:03.170, Speaker A: And also staking services and institutional staking will want to use SSV as their backend to have higher performance, more security to decentralize their operation and mitigate the risk they have now because they're running it in a central way. And I want to use this opportunity to really call out all devs to check out our new and big grants program where we give out grants to build exactly those use cases and help the teams bootstrap their operations. So if you fall along one of these categories, come and reach out, make an application and also use this opportunity to extend this offer to the teams who choose to build on us today on this weekend.
00:17:03.170 - 00:17:22.380, Speaker A: If you choose to continue working on your project and make it from this weekend to a production grade venture, feel free to reach out and apply for even a bigger grant. We would love to support you and partner with you in the future. Go to Grantsv network, check it out.
00:17:22.380 - 00:17:32.990, Speaker A: So, with that, I would like to pass the torch to lior our CTO, who will present to you how to onboard a Distributed Validator through our smart contract.
00:17:36.790 - 00:17:56.950, Speaker B: Thanks, Ariel. So, I hope you're getting excited after hearing what Ariel described. So I want to do a quick guide because I don't have a lot of time on how to run a Distributed Validator and how easy it is for developers.
00:17:56.950 - 00:18:19.386, Speaker B: We offering grants for this hackathon to run SSV Staking Pool or Staking service based on SSV. So to run a Distributed Validator, there is a simple prerequirement is to have a validator. If you don't have you can use Ethereum launchpad to generate one and deposit.
00:18:19.386 - 00:18:28.530, Speaker B: You'll need to go early and you'll need a testnet SSV. You can get both of them for us. You'll need a little bit go early to just make the transaction to our contract.
00:18:28.530 - 00:18:38.770, Speaker B: You can get SSV as well from our Faucet. Okay. The process is you select a few operators.
00:18:38.770 - 00:18:50.486, Speaker B: Right now we support four, in the future we'll support more. You can use sorry. Then you need to distribute your validator key to shares and then register the validator to the network.
00:18:50.486 - 00:19:19.810, Speaker B: And that's basically it to have your validator run on the SSV network. Okay? So the operator selection, you can use our Explorer, where you can browse all the operators and their performance, as Ariel mentioned, and choose which one do you want to use for your validator. Once you chose them, you need to just pick just to copy their ID and public key, as mentioned here on the image.
00:19:19.810 - 00:19:37.030, Speaker B: And we will need it for generating the key shares. Okay, so, key distribution, we created SSV key distributor SDK and wrapped it with a CLI. So you can either integrate it in some code that you're running or just use the CLI for your convenience.
00:19:37.030 - 00:19:51.450, Speaker B: The output of this thing is the key shares. It has a public key and encrypted shares corresponding to the operators you chose. You will need that for registering that to the network.
00:19:51.450 - 00:20:09.854, Speaker B: All right. And then the main function register validator on our contract. It expects the public key, the validator public key, which you have the operator IDs that you chose from the Explorer, the share, public keys and encrypted keys.
00:20:09.854 - 00:20:30.940, Speaker B: That's the output from the CLI or SDK, whatever you choose to use, and the amount of the SSV that you want to fund your validator to pay the operators that you chose. By the way, the CLI also outputs this whole payload for the transaction. So you can use that for your convenience instead of building it by yourself.
00:20:30.940 - 00:20:50.058, Speaker B: And it's not just providing the public keys and encrypted keys for the validator. We really encourage you to go to our documentation. You have this whole guide and with a lot more resources to see how you run a validator.
00:20:50.058 - 00:21:15.720, Speaker B: But as well we have integration guides for this hackathon how to build a staking pool in SSV. It has a lot of information or a staking service and you should go there before you start we really encourage you to go there. It has a lot of information, will make things much more easier to kickstart so just go to docs SSD network and yeah, that's basically it.
00:21:15.720 - 00:21:24.520, Speaker B: So if anybody have questions feel free to ask why.
00:21:28.030 - 00:22:13.370, Speaker A: You basically mean I'm repeating you want to run your own operators and then choose your your validators to run on that operator, right? Correct yeah so each operator you can see the clients that he uses right? So if you want to have different clients you can choose operators that operate with different clients and then you have some diversification it's up to you totally open. Anyone else?
00:22:14.140 - 00:22:57.264, Speaker B: I'll just add I think it's even encouraged to do that right? For client diversity you can choose one operator runs on AWS and we show that those operators when they register verified operators provide their data. One can run on AWS and run Prism client and one can run on Azure or whatever Google Cloud and run something else. And not just that you can run even one operator locally if you want to have more diversity, right? Like let's say if Google cloud right now shut down or have some outage we're probably going to see a lot of validators not working right or et cetera AWS or so that creates not just for your security but also for the ethereum network to be more secure.
00:22:57.264 - 00:23:31.676, Speaker B: viters that are going to run on SSV network are much more resistant and make the network itself to be secure. Yeah so Lido, you want to answer that again? All right lido have a few operators, right? But they manage the ETH, they have the ethereum and then they distribute it between their operators. So each operator have and running by itself x amount of validators.
00:23:31.676 - 00:24:42.964, Speaker B: It means it holds the private keys somewhere right in a one custodial essential way with SSV the difference is that the validators running on operators but each operator hold a share of the private key right? So if let's say one of the lido operators will be hacked for some reason this way or another the attacker will have the private keys right here. If one of the operators hacked you'll have just a fraction of the keys and you can't do anything with that? Yes do you have any operators that are sorry if we have what incentives? Yes. So SSV is a dow that's first of all and operators, anybody can be an operator but we have a verification process that runs through the Dao and operators that are showing that they have a good infrastructure, a good reputation can get to be verified.
00:24:42.964 - 00:25:05.264, Speaker B: But hey, even if one operator from those four operators, as we mentioned, would be hacked or would be like something wrong with it, then the Dow will probably vote for it to be unverified. That's a and for you, that's not going to do anything because if you're running a validator on that, again, one operator can't do anything for your validator. Actually, the threshold is three F plus one.
00:25:05.264 - 00:25:18.980, Speaker B: That's why we said four. But in general, it depends on how many single points of failure, how many failures you want to support. So if you want to support one failure, that's four operators, right? Today, when you run a Vitro client as a solo staker, for example, that's zero.
00:25:18.980 - 00:25:42.750, Speaker B: So three multiplied by zero, it's one, right? If you want to have two failures, then it's seven and et cetera. And then as a validator, you can always change the operators, right? If you not happy with some operator because you think he's malicious or because his performance is not great, then you can anytime change the operators. All right, any further questions?
00:25:46.480 - 00:25:52.110, Speaker A: If something comes up, you can reach out to us outside or in booth. And thank you all for coming.
