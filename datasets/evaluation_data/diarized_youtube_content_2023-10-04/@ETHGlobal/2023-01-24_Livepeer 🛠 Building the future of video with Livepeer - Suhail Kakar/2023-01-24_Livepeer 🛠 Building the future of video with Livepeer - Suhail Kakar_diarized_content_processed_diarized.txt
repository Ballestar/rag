00:00:06.330 - 00:00:33.190, Speaker A: Hi, this is Ayel from Life Peer and in this workshop we will be covering what is Life Peer who can use Life Peer, what problem does it solve? And finally how to integrate Life Peer into your application. Approximately 80% of the internet traffic is accounted by the video. That means the large majority of the data transmitted and received it over the internet is in the form of video content such as streaming videos, online video calls and video sharing on the social medias.
00:00:33.190 - 00:01:09.758, Speaker A: However, this process is very expensive. The main factor is the amount of data and the bandwidth required to transmit and receive high quality and transcoded videos requires a specialized technology and infrastructure such as powerful servers, high speed networking equipment and furthermore video streaming and transcoding can be resource intensive process which can increase the cost of hosting and delivering the video content. For example, a transcoding video from one format to another requires lots of commuting power storage which can drive up to cost of the hosting and also delivering the network.
00:01:09.758 - 00:01:31.820, Speaker A: And for this the solution is Livepeer. Livepeer is a decentralized video streaming platform that uses blockchain technology to enable anyone to easily and affordably stream live video to a global audience. It is built for the developer and it aims to increase the reliability of the live and on demand video streaming while reducing the infrastructure cost by up to 50 times.
00:01:31.820 - 00:01:51.310, Speaker A: To easily interact with Live Peer you can use Live Pure Studio which is an open source dashboard for interacting with Live Peer network, creating and managing API keys, live streams and video assets from an easy to use dashboard. And yeah, that's about lifepeer. And now we'll be integrating Liver into a sample application.
00:01:51.310 - 00:02:06.222, Speaker A: In this workshop we will be using Livepeer JS which is the JavaScript k for Livepier. It makes building with Live Peer very easy. If your project is not made with the React framework, you can easily use a live pure API.
00:02:06.222 - 00:02:27.674, Speaker A: The rest API. It can be used on any language or framework you so now for the live peer JS, the first thing you need to set up an X JS application, which you'll be doing now. And then installing the library so you can open up the terminal and then go to the directory which you want to create the application.
00:02:27.674 - 00:02:55.022, Speaker A: In my case I'm going to desktop and here we can create NPX, create a next application, Life Pure app and this will create the NextJS application. We don't want with TypeScript and we want with Slint until the NextJS application is completed. You'd want to also go to Livepier Studio to create an account and get an API key and yeah, once you come here you should see a sign up button here you can go ahead and sign up with your email and password.
00:02:55.022 - 00:03:08.134, Speaker A: The thousand transcoding minutes is completely free so you don't need to pay for the first thousand minutes. But once you come here you will see the dashboard. Then you can go to developers here and click on create an API key and give the API key a name.
00:03:08.134 - 00:03:22.122, Speaker A: In my case it's going to be SVM Workshop. You can also allow cores if you want but it is not necessary if you're not using it on your front end. Once you have it, you can grab this API key.
00:03:22.122 - 00:04:06.350, Speaker A: Save us some places because you will need this later. Now coming back here the NextJS application is installed and now we can go to the next JS directory that is Lifepeer app and install Live pure package here we can also open the application into Vs code but you can use any other VCode editor that you prefer. The live peer package is now installed.
00:04:06.350 - 00:04:33.320, Speaker A: The basic would be to follow the live peer guides and from here you have everything on how to set up in your nickjs application. And the first thing that you would want to do is initiate client go here in the pages and then inside of app JS you can create const client is equals to beta react client. And finally you need to put your studio API key here.
00:04:33.320 - 00:05:06.660, Speaker A: You also need to import react client and studio provider and also live config from atlifepeer react. And at last we need to wrap our application with a Live Peer config. We can do it like this and finally bring this component here.
00:05:06.660 - 00:05:23.150, Speaker A: Save it and yeah, that's it. Now the Live peer is basically integrated into our application and now we can use live peer into our next JS application. So the first thing that you would want to do is this opening terminal and run yarn diff in order to start the next JS application.
00:05:23.150 - 00:05:56.870, Speaker A: And then you can go to localhost 3000 and yeah, this is a sample next JS application which we'd be using now to add our Life peer code into it. So you'd want to clean up this code completely and just have it h one Life Peer app? Yes, that works. You can also remove the imports from here for now.
00:05:56.870 - 00:06:07.268, Speaker A: You can also remove the styling. Oh yeah, we can keep it for now but yeah, we have the live pair app here. So let's go back to the styling.
00:06:07.268 - 00:06:31.692, Speaker A: And now in order to test whether the live pair is successfully integrated or not, we can just use a use asset to check if everything is successfully integrated or not. Now we can say use asset hook and here you need to put the asset ID. Once you upload an asset whether through the API or CDU or also SDK, you would get an asset ID and then we can use that one to fetch the asset.
00:06:31.692 - 00:07:01.660, Speaker A: Here in my case I want to fetch this asset, this is the ID of it or even you can use this one. And here we need to put this here and finally we can just say console log asset or we can just print it here. Let's do it here jason ringify Asset and if you come back to the application you can see it's printed here.
00:07:01.660 - 00:07:19.180, Speaker A: This is the ID of Asset, the hash how it was uploaded when it was created and finally the playback URL. So it means that we have successfully integrated live peer JS into our application. So now we'll go to how you can upload a video to the Livepeer.
00:07:19.180 - 00:07:51.490, Speaker A: And for that we would be using Use Create which is very similar to Use Asset and use Create Asset. So here you can import, use, create asset from at lifeview. React? And here we can name for our asset input type is going to be text and then place order enter the name edit.
00:07:51.490 - 00:08:21.180, Speaker A: And here also we can create a few states in order to save the value from the input we can give it name set name is equals to user state make sure to import user state from React. And here we are going to also have another input and this is going to have a type file and it's going to accept the video. And finally we can also put on change here.
00:08:21.180 - 00:08:53.238, Speaker A: Once the person has selected the video we can get the file and set. Let's create one more here const video set video user Set and here we can say Set Video pyro. We also should add an on change here in order to save the value of the input to the state.
00:08:53.238 - 00:09:03.260, Speaker A: Once it is done it should look like this. For now we are not going to focus much on from the styling here a simple styling should work. Margin left ten.
00:09:03.260 - 00:09:49.526, Speaker A: And finally here we need to add a button that would be Create Asset that should work and here we can say on click handle upload and here we can come here and create a new function const and upload a little bit and yeah that's it. We have declared a few states here for name and for the file a function that would be used to handle the media upload and finally two input components and one button. For now we can console lock both name and video to see if both of them is saved successfully.
00:09:49.526 - 00:10:00.486, Speaker A: And once we have that one we would be using Use Create Asset. So here I'm going to type it something and choose a video file. Click on Open and create asset.
00:10:00.486 - 00:10:24.250, Speaker A: You can see we have both the name and file which means it's working fine. And now we have to use the use create asset. We can add it here and say const is equals to use Create Asset and inside of use Create Asset we can pass the video so we can say if there is a video we would want to pass sources.
00:10:24.250 - 00:11:04.154, Speaker A: It should be in a form of array and you can also upload multiple videos if you want. In our case we just want to upload one video we can say name is going to be the name and finally file is equals to video and if name video is not there here we can just render now and inside of here we can add Create Asset. We can get the data from it once the asset is uploaded we can also get a status, we can get a progress and finally error if there's any.
00:11:04.154 - 00:11:23.310, Speaker A: And finally now on the handle upload we can call the Create Asset function. Now let's refresh this page, let's give it a name. For example Test Video click on Choose File, upload the video which you want and then click on Create Asset.
00:11:23.310 - 00:11:44.514, Speaker A: Now this should create an asset for us. Now let's come back to the Livebear studio, go to Asset. You can see this is a test video which the video is currently processing but it means that the video is now uploaded to the live peer and yeah, that is how you would want to upload a video to the live Peer.
00:11:44.514 - 00:12:09.470, Speaker A: And in the Live Peer JS documentation you can also go through different examples with different hooks such as Use Asset Metrics, use Update Asset and lots of different options. And yeah, that was the example of how you want to upload the video to the live Peer. And we just have one more example on how you can play a video that's already stored into IPFS using Livebeer Player.
00:12:09.470 - 00:12:20.354, Speaker A: So Lifebeer Player provides easy to use component to display both video and audio. It's going to be very easy. So let's first remove all of the code which we have already here.
00:12:20.354 - 00:12:40.218, Speaker A: But yeah, this is the code which you want to use for uploading the video which we have seen here and I think you can see the video is also now uploaded and it can be playable. The video which I have uploaded is a very bad quality because I just wanted to upload it very faster. But you can upload anything you want.
00:12:40.218 - 00:13:05.454, Speaker A: This was just an example video. Yeah, now in order to use the player we can just remove this all code here and just add a dev tag and inside of this you can add player and this player would be imported from At Liverreact. And now in this player you can play an asset which is already stored on Live Peer CDU.
00:13:05.454 - 00:13:24.886, Speaker A: You can play IPFS hash, you can play from RV Transaction hash and from other places. So in this example maybe we have this video, we can play it using the playback ID. So here we can just give it a playback ID and then put the playback ID here.
00:13:24.886 - 00:13:43.114, Speaker A: We can also give it some stylings names, team, et cetera but for now we can ignore that one. So let's come back here. And now you can see we have the video player and if we click on Play, it should now play the cat video which we see here and yeah, it plays.
00:13:43.114 - 00:13:56.046, Speaker A: Now just to make it, let's make it a little bit smaller. So we can say style width to be probably 70% and yeah, that's fine. And this is the Lifepr player.
00:13:56.046 - 00:14:11.842, Speaker A: And now the asset which we are currently playing is already stored to the Live Peer CDU. But if you want, you can also pass here IPFS hash and that should also work. For example, it would be IPFS and here you would want to put the IPFS hash.
00:14:11.842 - 00:14:29.742, Speaker A: It does not depend whether your video store it on the IPFS or like w three storage or any other places it would automatically play it. For example, if you go to the storage and here we have a few videos that stored in both IPFS and RV. For example, this is the video.
00:14:29.742 - 00:14:52.402, Speaker A: I can just copy the IPFS hash here and come back to our application and put the hash here, save it. And now if you come here, basically the video should play and yeah, let's play it. You can see the video gets played and you can also play and yeah, that's it.
00:14:52.402 - 00:15:01.534, Speaker A: Thank you very much. But yeah, this is a prerecorded workflow. If you have any questions or anything, feel free to DM me on Discord or join us at Live Peer.
00:15:01.534 - 00:15:03.880, Speaker A: Discord can add on the studio support.
