00:00:06.250 - 00:00:09.466, Speaker A: Hi everyone, from ETH Paris. Great to meet you. I'm josh siegel.
00:00:09.466 - 00:00:22.666, Speaker A: I'm the chief product officer of defense. So, yeah, very excited to introduce you to Defense today and hope that you will choose to hack with us. So we're going to go through a brief introduction, talk about the prizes that we're going to be offering.
00:00:22.666 - 00:00:39.926, Speaker A: Then we're going to tell you a bit about the platform at a high level and then we're going to jump right into the technical details. We're actually going to onboard onto the platform exactly like you will and then get into our SDK so that you can get up and running and productive as quickly as possible. So yeah, Defense is wallet infrastructure.
00:00:39.926 - 00:01:09.934, Speaker A: For web three we provide a seamless API and in the back end we implement multiparty computation threshold signature scheme wallets. So our goal is to be the kind of easiest to use and most powerful wallet API to create simple embedded wallets. And that is one of the reasons that we strongly encourage you to give us a shot because really you can do pretty much anything on any blockchain that supports our underlying cryptographic schemes.
00:01:09.934 - 00:01:39.782, Speaker A: The signature schemes we support are ECDSA, which is used across every EVM chain, ethereum, Bitcoin, et cetera, and EdDSA, which is used across like Solana and Cardano, et cetera. So you can use us with any of the other sponsors. If you need a wallet to do anything, then you can use us and you will have a greater chance of walking away with some money in your pocket because we're actually offering six prizes, a first price, $2,000 prize, then $1,000 prize, and then four $500 prizes.
00:01:39.782 - 00:02:02.980, Speaker A: So we really want to get as much participation as possible and we're just looking for creative ideas. Anything you want to do, if you want to use Defense independently to build some project that you've been envisioning, that's great. But we absolutely encourage you as well to kind of look at the other sponsors and the other prizes and we can integrate with pretty much any of these folks and to use Defense as your wallet layer as you're implementing your project.
00:02:02.980 - 00:02:15.506, Speaker A: So jumping into Defense in a little bit more detail. Now, we are MPC and TSS cryptography experts. So what that means is there's a bunch of different ways to potentially secure private key material.
00:02:15.506 - 00:02:38.378, Speaker A: You can put it in a hardware security module like a ledger, but there is a single point of failure there. Obviously, you can do what's called shamir secret sharing where you kind of split it up into different components, but then it still exists at the time of creation and at the time of signing. Or you could do Mpctss, which creates what's called symmetrical shares through a process called distributed key generation.
00:02:38.378 - 00:02:56.526, Speaker A: And at the time of creation, the private key never exists in its full form on any server, in memory or on disk. And also at the time of signing, it never exists. So that's why we feel like it is kind of the best technology out there to secure private key material because that private key in its entirety never exists.
00:02:56.526 - 00:03:10.490, Speaker A: It's only the shares. And those shares are very key cryptographic material that must be secured and we secure those in kind of a novel way. Taking a look at our decentralized key management network, that's what's on the right side here.
00:03:10.490 - 00:03:52.902, Speaker A: We create a signing network and we distribute the key shares all over between different partners in different regions and geographies such that no single partner ever holds a threshold of key shares such that they could move funds on chain by themselves. Basically, the network itself is credibly neutral and only through the coordination of the Defense platform can we federate a request to the network to say hey, come together and actually sign a request. So what becomes critical in this architecture is the security of the Defense platform itself, which is why we've innovated on our authentication infrastructure in order to sign every request into the platform.
00:03:52.902 - 00:04:18.762, Speaker A: Just like you would sign a transaction going to a blockchain using a signing secret that we never see, which kind of guarantees that we are a technology platform, we're fully noncustodial. So this breaks down into a dashboard which you'll see when you onboard with us. Our authentication APIs, which actually validate that signing secret, the signature that comes in our authorization APIs that say who can do what within our system based on very granular controls.
00:04:18.762 - 00:04:46.838, Speaker A: And then the key APIs, which are the wallet APIs creating a wallet interacting with ERC 27 21s transaction signatures, a whole policy engine and governance layer that actually looks at the metadata of transactions and applies policies to them. And then a callback layer that responds to the events on chain or in the system with posts back. These are built on a set of blockchain microservices that actually speak to the native chains as well as our decentralized key management network which is the heart of our technology.
00:04:46.838 - 00:05:01.962, Speaker A: And we build all our cryptography from the ground up. So if you want to start building with Defense, we'd love to have you on board and we will go ahead and provision a testnet environment for you. All you have to do is go to Etheris Defense Co.
00:05:01.962 - 00:05:08.414, Speaker A: And just give us an email address and your team name. That's all that we need and we will go ahead and sign you up. Great.
00:05:08.414 - 00:05:32.054, Speaker A: So you've gotten in touch with us and you've given us your email address and your team name. We've gone ahead and provisioned an environment for you on our testnet infrastructure which is called Defense Ninja. And you should see an email like this in your inbox where you can just go ahead and grab this registration code here and then click here and that should pre populate your username with your new ID and then just paste that registration code here.
00:05:32.054 - 00:05:43.846, Speaker A: These registration codes only last 4 hours. So if it's been 4 hours, just click email me a new registration code and you'll get a new one. So at this point you're going to create an account and what this is going to do is pop up web Authentic.
00:05:43.846 - 00:05:50.602, Speaker A: So you may have seen this before. This is passwordless authentication implemented with pass keys. So I'm going to do this device and click Continue.
00:05:50.602 - 00:06:04.970, Speaker A: That's going to give me a fingerprint logo there. I'm just going to go ahead and secure my fingerprint and that's it. I now have a pass key on this laptop secured by my biometrics and a recovery kit here, which you can pretty much ignore for the purpose of the hackathon.
00:06:04.970 - 00:06:13.886, Speaker A: But this is one way that you can retrieve your keys in the event that you lose your device. So I'm going to go ahead, click Done, my registration successful. Here is my username.
00:06:13.886 - 00:06:30.422, Speaker A: I'm going to log in using those same authentication credentials. So here webauthend pops up again and then I just touch my finger and that is signing a challenge and sending it back to the server and voila, I'm logged in. That is two factor authentication which is pretty cool, something I am and something I own.
00:06:30.422 - 00:06:46.478, Speaker A: So at this point what I'm going to do is click on the icon in the top right here and then just go to settings and then I can see all of my account settings here. So what I'm going to do is start inviting my team members. So I'm going to go to users and here's the user of my which is just me.
00:06:46.478 - 00:07:00.098, Speaker A: I'm going to invite my team member. So let me try josh plus ETH Paris Team Fence Co and I'm an employee because I'm a member of that team. You can ignore the external ID field and click Create.
00:07:00.098 - 00:07:21.926, Speaker A: Once again, this is an action you're going to have to sign because this is changing the organization. So I'm going to again sign this action by touching my finger to my laptop and that will go ahead and create the new user. Yeah, once we've got the new user on the system, you can click back to list all of the users that are here and you also need to assign permissions to users.
00:07:21.926 - 00:07:39.274, Speaker A: And generally we advocate principle of least privilege when creating permissions and you can use that through our API. But we've given you a shortcut because you don't necessarily want to be messing around with all the different levels of permissions just for hackathon. So right here is a little permissions missing icon.
00:07:39.274 - 00:07:46.898, Speaker A: So on your new team member you have permissions as the original owner. Just go ahead and click that. This is again changing the system.
00:07:46.898 - 00:07:58.610, Speaker A: So we're going to require you to sign that request. This is how our authentication system works. So you just touch your finger again and you have just given your teammate permissions to the system.
00:07:58.610 - 00:08:08.998, Speaker A: There it goes there's the checkmark. And that teammate should now receive an email just like you did with a registration code. They're just going to go through the same process and that is how they will get into the system.
00:08:08.998 - 00:08:27.614, Speaker A: So next we'll show you how to set up a service account so you can start signing API requests from the server side. Okay, so now that we've invited all of our team members to Defense and they have accounts, we're going to go ahead and we're going to set up what's called a service account. So let's just go click on service accounts here.
00:08:27.614 - 00:08:43.682, Speaker A: So think of service accounts like any type of machine account, like a set of API keys, right, that are long lived. So this is the type of account you will use from the server side in order to call the Defense API. So just go ahead and click New Service Account and you can give it any name that you want.
00:08:43.682 - 00:08:58.306, Speaker A: So let's just call it ETH paris. Now you'll see immediately that we require a public key in a PEM format. And again, this is because all the requests that come to our API that can change state in our system or on chain just put Post or Delete.
00:08:58.306 - 00:09:14.954, Speaker A: Requests need to be signed by a secret that we never see at Defense. And so that would be the corresponding secret key to this public key. So you need to kind of create one of these in any way that you know, using a service like Amazon Key Manager or just by the command line.
00:09:14.954 - 00:09:25.754, Speaker A: So if you take a look at our documentation here at Docs Defense Co. Just go to Docs Defense Co. And then take a look at our advanced topics authentication credentials.
00:09:25.754 - 00:09:39.062, Speaker A: And then we've got a section on Generate a, you know, for utility. We've given you some examples of how you can do this from the command line. So let's go ahead and create a private key here and that is very fast.
00:09:39.062 - 00:09:47.926, Speaker A: And list that out so that's the private key. You never want to show that. And then you create the corresponding public key.
00:09:47.926 - 00:10:06.894, Speaker A: So let's just go ahead and cat that public key right there and we see that we've got this key pair. So let's just grab this guy and copy that. And then we'll go back into here and we will paste in that public key and click Create.
00:10:06.894 - 00:10:35.170, Speaker A: Now again, this is an action that's changing the state of the system. So what do you expect? Do you expect that action needs to be signed? And so once again, I'm going to sign with my web authenticials and that will go ahead and create the key pair or excuse me, the service account in our system. And now one time and one time only, it will also return an access key, right? So this is actually a Jot token that you're going to use as the bearer token in the authorization header.
00:10:35.170 - 00:10:45.718, Speaker A: Of every request that you send up. So again, the Service account really has two secrets. It's got this one, which is the Jot token, which I'm going to go ahead and copy and then take that and put that in a secure location.
00:10:45.718 - 00:11:09.294, Speaker A: And that's just standard Rest based API authentication authorization bearer. And then you're going to put that Jaw token. But then it's also got the secret that we created here in the shell, which you're going to use to sign those requests, right? So now I have both my Jaw token and I've got my signing secret and I've got the new Service account, which I could just click here now that I've securely copied my Jaw token.
00:11:09.294 - 00:11:21.782, Speaker A: And this is what you'll use to access the defense API. Okay, now that we've created the Service account, we're going to go ahead and create an application. So just go ahead and click on Applications here.
00:11:21.782 - 00:11:37.366, Speaker A: So Applications are going to scope your credentials to a specific what's called relying party. So let's take a look at the information when you click New Application here. So I'm going to start by just calling it My application, something along those lines.
00:11:37.366 - 00:11:47.646, Speaker A: And you definitely want to choose a client side application now, even though you're going to be sending a request from the server side. No, that's a bit confusing. But these are the fields that are required by the client side application.
00:11:47.646 - 00:12:03.618, Speaker A: So we've got both a relying party and an origin, right? And so actually, I'm going to start with the origin. And this is kind of the full URL of the application that you'd eventually be calling from the front end. So let's just imagine that it's Httpsapp, myco IO or something like that.
00:12:03.618 - 00:12:15.574, Speaker A: And the relying party really just tends to be this last portion, the MyCode IO. So I'm just going to specify those things again. External ID is an optional ID that you can reference from another database, but you can ignore that for the most part.
00:12:15.574 - 00:12:24.106, Speaker A: Go ahead and click create. As always, this is changing state in the system. So I'm going to have to sign this request with my Web authentic Credential here.
00:12:24.106 - 00:12:40.478, Speaker A: And then this will create a new application in the system. And when I go and I click Applications, then I'm going to see my new application. You'll notice there was a default application for the Defense Dashboard that is specifically on Defense Ninja and App defense Ninja, which is where we are right now.
00:12:40.478 - 00:12:52.546, Speaker A: This is the application where my credentials are scoped every time that I execute a web authentic to use the dashboard. But here's my new application. You'll notice now I have an app ID here.
00:12:52.546 - 00:13:07.990, Speaker A: And then I've got the expected rolling party ID and the origin. And in just a moment, we're going to see how we're going to use these fields we've just created in both the Service account and the application in order to initialize our SDK. So we can start calling the API.
00:13:07.990 - 00:13:24.826, Speaker A: So now that we've created the service account and the application, we're going to go ahead and jump into our TypeScript SDK, which is available here in GitHub.com defense external defense TypeScript SDK. And we're looking at a specific example for setting up a service account.
00:13:24.826 - 00:13:36.910, Speaker A: We're going to kind of dive into this code and take a look at it. So the first thing, of course, that I'm going to do is I'm going to bring up the shell. I'm just going to run NPMI on the Defense SDK and defense key signer, SDK key signer.
00:13:36.910 - 00:13:47.022, Speaker A: And so those will install. And then I also have a couple other packages installed. I've got some node types here, and I've got the M package installed.
00:13:47.022 - 00:14:01.402, Speaker A: So from there, let's just take a look at Visual Studio code. And let's walk through this code, and then we'll walk through the corresponding environment variable file and figure out how to populate that. So we've got a few imports going on.
00:14:01.402 - 00:14:21.998, Speaker A: We're importing this blockchain network here, which is going to be a set of enumerated types from the Defense SDK foundations. Here we've got the Defense API client, which is the main client you're going to use to call the actual API through the SDK from Defense SDK. And we've got what we're calling an Asymmetric key signer here.
00:14:21.998 - 00:14:43.366, Speaker A: And this is what's actually going to take that secret that you use to create the service account. And it is going to use that as a callback to actually do the signing for you so that you don't have to make all the API calls required to do the handshake for the API request signing. And then, of course, we've got env here for process M.
00:14:43.366 - 00:14:46.562, Speaker A: Great. So we've got a main function. We're just going to configure MV.
00:14:46.562 - 00:15:04.206, Speaker A: And then the first thing we're going to do is take this Asymmetric key signer and pass it a number of variables, right? First, the actual secret key. This is the secret signing key that you used when we created the key pair for the Service account. And then the Cred ID, which also belongs to the Service account.
00:15:04.206 - 00:15:24.210, Speaker A: And finally, the app origin, which you just specified when you created the application. And these are all pointing to environment variables in our environment file, which we will fill in in just a moment. So once we have this key signer, now we have the kind of object that the API client can call back into to execute the signature.
00:15:24.210 - 00:15:38.562, Speaker A: And so what we're going to do is then create the actual defense API client itself here's, defense API. And what we're doing is we're passing into it the app ID, which is the ID of the application that we just saw. We're passing into it the access token.
00:15:38.562 - 00:15:54.350, Speaker A: And so this is the Jot token that was returned when we created the service account that we securely stored. And then we have the base URL, which is just the URL to the API, which is API defense ninja. And then we pass in the signer object that we created right up front.
00:15:54.350 - 00:16:02.858, Speaker A: And so this is the fundamental configuration of the SDK. And then on top of that, we basically just start using the SDK. These are all asynchronous methods.
00:16:02.858 - 00:16:23.286, Speaker A: So we're going to call await on them and then we call on that defense API wallet, create wallet. And we're going to pass in a body parameter here, which specifies the parameters to pass in the body of this API call. And in this case, we just have a network and we're referencing this enumerated type that's coming off of the blockchain network here.
00:16:23.286 - 00:16:43.670, Speaker A: And then we're going to console log that. And then we are also going to list and await this function as well list wallets, which will basically just show us what wallets we have after we have created this initial wallet. And once again, we are just taking the results of this list and we are stringifying them and then printing them to the console and then simply calling this function.
00:16:43.670 - 00:17:03.950, Speaker A: So, yeah, it's a pretty simple setup of the SDK and some simple usage of the SDK. So we're going to go ahead and take a look at the environment variable file now and we're going to populate that. Okay, now that we've had a chance to look at the code sample here, let's jump into the environment variable file.
00:17:03.950 - 00:17:19.954, Speaker A: So I've just copied this down from M example from the repo and removed some of the fields so that we can populate them. Now, starting at the top, we've got the defense API URL. So for your purposes, this will be Httpsapi defense ninja.
00:17:19.954 - 00:17:31.290, Speaker A: This again is our testnet environment. So you're going to be working off of the test chains like Gorely, Sepolia or Mumbai if you're coding on the polygon side, for example. After that we've got defense app ID.
00:17:31.290 - 00:17:38.462, Speaker A: So let's just jump right back into the dashboard. And you've just created my application here. And right underneath there we've got the app ID.
00:17:38.462 - 00:17:51.540, Speaker A: So we're just going to copy that app ID and put it right here into our file. And then we've got the app origin. And again, we just specified that, which is the full Https URL here as the app origin.
00:17:51.540 - 00:18:00.726, Speaker A: So we'll plug that in there and then we've got a defense Cred ID. So this is actually referring back to the service account. And here you'll see there's a signing key Cred ID.
00:18:00.726 - 00:18:20.234, Speaker A: So we're just going to grab this value right here and we are going to plug that into the environment here to run and save that. And then the final two values in the environment variable file are the secrets that we are keeping that give the service account access to the API. So the first one is the defense private key.
00:18:20.234 - 00:18:35.534, Speaker A: And this is the signing secret that we created on the command line and saved down. It's this one, the PEM file. And the one tricky thing here is that these PEM files are formatted with built in new lines and so you can copy them directly into the environment.
00:18:35.534 - 00:18:49.118, Speaker A: This way, assuming you're using the M environment package. If you're not, sometimes it will choke when it gets to this new line. And occasionally you may have to try putting in new line characters and putting this all on a single string.
00:18:49.118 - 00:18:58.290, Speaker A: It's a little bit of a pain. It's not our fault. It's just environments generally to make sure that that key gets pulled in correctly and that you can sign your transactions appropriately.
00:18:58.290 - 00:19:20.320, Speaker A: And then the second one is the Defense Access token, which is that JWT, which I call Jot Token, which came back when you created the service account and you copied that to a secure location. So now just throw that in here. So give me a second, I'm going to configure my environment here and then we will go ahead and run this very simple TypeScript example here.
00:19:20.320 - 00:19:45.126, Speaker A: Okay, so we've got the environment all configured with my secrets and now I'm just going back in the shell here and I'm just going to run simple TS node on this file that I created here and do a little praying. And then hopefully the SDK is set up and we actually see some of these console logs come out when we create the wallet. There we go.
00:19:45.126 - 00:20:01.978, Speaker A: We've created the wallet and then we've listed the wallets that are there in this items array here. So, yeah, fairly simple and straightforward. From here you can take that same Defense API wallets and you could execute all the different wallet functions.
00:20:01.978 - 00:20:14.606, Speaker A: You should see full IntelliSense there. So you should see all the functions self documenting in the context of your IDE. We are currently working the SDK is brand new, so thank you.
00:20:14.606 - 00:20:27.278, Speaker A: You're going to be helping us beta test it and we're currently working on all the documentation for it. Now you'll find all the documentation in the same location. You find everything else, which is at Docs Defense Co.
00:20:27.278 - 00:20:39.174, Speaker A: And yeah, that's it. Thanks so much for choosing to hack with Defense at ETH Paris. And as you get into it, if you have questions, don't hesitate to contact us.
00:20:39.174 - 00:20:55.614, Speaker A: You can contact us either at ETH Paris at Defense Co. And there'll be a bunch of us monitoring that email address or more natively, just go into the ETHGlobal discord and you should be able to find us at a channel called Partner Defense. So, yeah, thanks so much and we look forward to hearing from.
