00:00:07.610 - 00:00:14.954, Speaker A: Hey, everybody. I know I'm competing with dinner right now, so thank you all for being here. So I'm going to talk a little bit about Uma.
00:00:14.954 - 00:00:27.394, Speaker A: I know some of you have already heard the spiel both at the booth and maybe at side parties. So thanks for coming back again to hear a little bit more. I'm going to talk about how Uma is a decentralized truth machine.
00:00:27.394 - 00:00:45.510, Speaker A: And what that means is you can bring any true fact about the world that's provable on chain, and then your smart contracts can use that to either allow or disallow transactions to use the data in whatever way that you need. And I'll talk about a couple of different applications as well as what you could build at the hackathon. So a lot of people have a misconception about Oracles.
00:00:45.510 - 00:00:55.122, Speaker A: People just think like, oh, okay, data feeds or price feeds. Price data. How do we set up a network of nodes that can deliver the data that we need? With Uma, you don't need a network of nodes.
00:00:55.122 - 00:01:04.042, Speaker A: You just need one person that's willing to say, here is a true fact about the world, and also here's a bunch of money. If I'm wrong, take my money. That's the basic flow.
00:01:04.042 - 00:01:12.594, Speaker A: And that means that you have a really flexible architecture. So you can ask questions that are really basic data. Things like what's the price of bitcoin? A typical oracle question.
00:01:12.594 - 00:01:43.226, Speaker A: Or you could ask natural language, things like who won this election? Or did this deposit happen on this other blockchain? Or what's the result of this off chain calculation that could be super complicated, this like, ZK circuit that you're calculating. Or did this governance proposal pass, which is actually a use case that we're diving into right now around Dow governance, which I'll spoil right now a little bit, but get into later. So, yeah, optimistic Oracles, the pattern is you enforce correctness after a dispute.
00:01:43.226 - 00:01:54.702, Speaker A: Somebody's making this assertion, they're putting a bunch of money at stake. Everybody's watching the Oracle for assertions coming through. And if nobody challenges them within the challenge window, the data is safe to use.
00:01:54.702 - 00:02:03.774, Speaker A: Everybody had this big financial incentive. You had a long enough challenge window, and 99% of the time, proposals are correct. For that reason, disputes are actually rare.
00:02:03.774 - 00:02:23.338, Speaker A: And when we see disputes, it is usually because either the proposer did make a mistake or the disputer made a mistake, or there is some dispute about the wording of a question. And I can talk about some examples. Or you could actually go to Oracle Uma XYZ right now because we have some disputes that are in flight that voting opens up later today.
00:02:23.338 - 00:02:41.920, Speaker A: We do refund gas for voting. So if you get some, you know, $5 worth, you can go and become an Uma voter and you can spend that gas to vote and know that you're going to get it back as long as you vote correctly. And that's probably the best way to learn how we resolve these things that are around natural language, wording, human, readable questions.
00:02:41.920 - 00:02:57.854, Speaker A: So here's what goes into it. You could have somebody that's requesting some piece of data or a smart contract that's set up in advance to expect some piece of data. You have somebody, could be anybody who's making a proposal and posts a bond that's required.
00:02:57.854 - 00:03:05.510, Speaker A: And then you could have anybody else that's a disputer. Post a matching bond. If a dispute comes up, you need a dispute resolution process.
00:03:05.510 - 00:03:18.918, Speaker A: So that's where uma comes in. You basically have this shelling point game where all the Uma stakers are committing a secret vote on chain so you can't copy people's answers. Secret vote on chain can't just be lazy and copy people's answers.
00:03:18.918 - 00:03:30.906, Speaker A: You have to actually analyze the evidence and think what is the truth here? Because that's most likely to be the result. Then everybody reveals and you have your result. It's also good to have a documented methodology of truth.
00:03:30.906 - 00:04:02.278, Speaker A: So if you have some complicated question like you're running this whole protocol and you have to get a whole bunch of crosschain data and run calculations in a specific way, it's really important to let people know how to run those calculations, make it predictable. Because without that proposers aren't going to risk money on making a proposal that might actually be disputed where there is some ambiguity of what the answer will be. And then you need these economic guarantees that one disputers will show up and they're incentivized to show up and two, that voters will show up and they'll resolve disputes and they'll actually vote.
00:04:02.278 - 00:04:17.822, Speaker A: And that it would cost way too much money to try to bribe the voters than to just arrive at the right answer. This is kind of the flow. I think that you can probably find these slides on our website or in previous things.
00:04:17.822 - 00:04:27.034, Speaker A: I'll figure out how to share it, but it's a pretty simple workflow. So asking a question, post a bond along with an answer to the question. If no one disputes, great.
00:04:27.034 - 00:04:32.740, Speaker A: You have your answer after the challenge window. Maybe that's 2 hours, maybe that's two days. It depends on your use case.
00:04:32.740 - 00:04:53.862, Speaker A: If somebody does dispute, it goes to the voting mechanism and it's kind of a choose your own adventure thing at that point. Some things like Polymarket, which uses us for prediction markets, they wait until we get a final answer from our voting system and that's what they use. Other things like across, which uses us for cross chain bridging, they actually throw away the disputed answer because they don't want to wait until it's all resolved.
00:04:53.862 - 00:05:08.626, Speaker A: It opens it up to new proposals, then that somebody else proposes the correct answer so that their relayers get refunded faster. So these are examples of real questions, real use cases. I talked about Polymarket and prediction markets.
00:05:08.626 - 00:05:22.614, Speaker A: We're also really good for insurance. So Sherlock and Cozy both use us. It's great because you can ask these natural language things where there's no clear data source of whether a smart contract was hacked or if some severe weather thing happened that you would have an insurance payout.
00:05:22.614 - 00:05:46.002, Speaker A: But you can ask the Oracle and we can provide that answer and some other things that are worth talking about. We also have these interesting on chain derivatives that you can do like shapeshift. Dow used us for on chain VC fundraising in a DeFi native way where instead of the VCs getting a discount on a token that they could then sell and make a profit even if the token price goes down.
00:05:46.002 - 00:06:03.222, Speaker A: What they bought was an on chain instrument that has a boosted payout only if the token price goes up over the long term. So it's kind of like an embedded call option. Uma is going to verify the Fox token price and then based on that token price, you're going to get a greater or lesser payout as the VC who bought this option.
00:06:03.222 - 00:06:21.306, Speaker A: So it's much more incentive aligned. You're not going to have VCs dumping on you, but the VCs get an increased upside if they get the good outcome that they're looking for. And then something really cool if you're using Uma, you can actually trigger events after you get a result.
00:06:21.306 - 00:06:32.670, Speaker A: So you can say here's some question about something that's going to happen in the future and you can think about how Polymarket uses this. They're setting up betting markets around a basketball game or something. The game hasn't happened.
00:06:32.670 - 00:06:58.966, Speaker A: Obviously no one's going to actually trigger this with a proposal until the game is over, but you can start using it to bet on it for days or weeks in advance and then once it's time, somebody can come in and make a proposal and then when that happens, that can flow to other contracts. You can define a callback function that automatically some stuff happens after the value is settled and the function is called price settled. Don't get distracted by that.
00:06:58.966 - 00:07:05.786, Speaker A: It doesn't have to be a price, it could be any kind of data. So it's kind of like an if this then that thing. So you're waiting for some event in the future.
00:07:05.786 - 00:07:29.780, Speaker A: You get a proposal about that event, that proposal is accepted as soon as that's settled. You can just have all this other stuff that happens in this callback function that maybe automatically sends some tokens to somebody or makes some change to a smart contract, whatever your workflow is. And it actually makes your smart contract interactions much more autonomous because Uma's system already incentivizes people to raise disputes and to settle things.
00:07:29.780 - 00:07:39.362, Speaker A: Know it's actually settleable and then you don't actually have to do anything. You're not like, oh, let's go and get this price. You can define this callback function atomically with the settlement.
00:07:39.362 - 00:07:59.910, Speaker A: It'll trigger the callback and do some stuff in the rest of your smart contract system. So definitely use this callback methodology if you're using Uma for your hack. So, yeah, I mean, this allows the real world to actually reach out and touch your smart contracts like some hurricane hit and you need to trigger some insurance payouts.
00:07:59.910 - 00:08:08.494, Speaker A: That contract could automatically send the funds to the people that are owed insurance. They don't have to come back later. And because it's happened and it's confirmed, then they can claim it.
00:08:08.494 - 00:08:21.490, Speaker A: It can literally just send it to it as part of a callback function. It makes it much more efficient. So the way that you would try to attack Uma, you can't actually buy or borrow enough tokens to influence voting yourself.
00:08:21.490 - 00:08:34.406, Speaker A: So this is the attack vector you would try. You would deploy a smart contract that's a bribe smart contract that says, hey, it's securing this contract that has $5 billion in it. We're going to go steal the $5 billion with some faulty Oracle data.
00:08:34.406 - 00:08:54.206, Speaker A: It's going to send the money to the smart contract and automatically divide it up between the co conspirators. And so the way we deal with that, I think anything up to like 50, $60 million that could be stolen, it's not economically worth it to attempt a bribe attack. Given Uma's economic security, if it's a couple of billion dollars, it's worth trying.
00:08:54.206 - 00:09:22.194, Speaker A: But what you can do is you can have an alternate resolution path where you're using Uma and all of its earlier game theory around proposals and disputes to make sure disputers show up. But then once a dispute happens, instead of waiting for the Uma vote and then using that Uma vote to move money, maybe you jump to your protocol's on chain governance system or some other kind of dispute resolution system, or you just throw it away entirely. And then all that Uma is settling is the bonds, and that's extremely economically secure.
00:09:22.194 - 00:09:36.090, Speaker A: Like, you could set a 50 WETH bond and it wouldn't make any difference. Nobody's going to be able to set up a bribe attack for 50 WETH. So in that case, either you go to some alternate governance system or you just keep letting people propose and maybe it locks things up for a little bit.
00:09:36.090 - 00:09:52.810, Speaker A: And depending on what your contract system is doing, you might make different trade offs. And across is a good example. Across is securing $40 million, and I think that across actually would be happy with using Uma for final settlement like that's within the range that it's safe.
00:09:52.810 - 00:10:00.226, Speaker A: But across doesn't want to lock things up for the entire Uma voting period. They want their relayers to get refunded faster. They don't want to get dossed through this thing.
00:10:00.226 - 00:10:15.970, Speaker A: So if a dispute comes through on a cross, the disputed bundle of relayer refunds is just thrown away and somebody can propose a new one immediately. And that gets things done a lot faster. And then over the next few days, uma is going to cycle through and settle bonds.
00:10:15.970 - 00:10:32.120, Speaker A: So it's a really good question. And then, yeah, talk to me later about sovereign security, which is kind of that alternate path which no one's used yet, but we baked it in for exactly that use case. So this is how you make an assertion.
00:10:32.120 - 00:10:47.628, Speaker A: You can see all of the components here where you're kind of requesting data and providing data simultaneously. But what's nice about this is you don't need to go find some third party to deliver your data for you. You probably already know what the answer is in a lot of cases, but you don't want people to have to trust you.
00:10:47.628 - 00:11:02.560, Speaker A: So this keeps it decentralized while also being efficient. You're like, I know that Euler got hacked, for instance, so I can go to the insurance protocol and I say oiler got hacked because I want to get paid out on my insurance, but you don't have to trust me. And the people that provided the insurance don't have to trust me.
00:11:02.560 - 00:11:12.310, Speaker A: It's up for the liveness window. If I'm wrong, take my money. And so it still keeps it decentralized while letting you do all kinds of automated workflows that are cool.
00:11:12.310 - 00:11:33.390, Speaker A: So, yeah, I mean, just running back all kinds of stuff. I think it's important to remember that this optimistic oracle, it's not just for delivering data because you have these callbacks. You can use it to automate things that you want to have happen in response to something that happens somewhere else on chain or on a different chain or in the real world.
00:11:33.390 - 00:11:49.730, Speaker A: You're triggering things based on almost anything as long as it's publicly verifiable. And you can actually one interesting use case is build a collection of undisputed facts on chain that you can use to build other things. And we've had previous hackathon projects that were exploring that.
00:11:49.730 - 00:11:56.444, Speaker A: All this stuff, this exists. It's not hypothetical. These are real things.
00:11:56.444 - 00:12:19.940, Speaker A: I'm going to focus a little bit on number three right now with optimistic governance because we're trying to solve a real problem for DAOs to keep them decentralized and autonomous so they can focus on just getting organized. So this is a normal Dow governance flow. You have a forum discussion and then people vote on snapshot and then it kind of stops being a Dow and a multisig just decides whether or not to do it.
00:12:19.940 - 00:12:27.668, Speaker A: And so we're trying to solve that. You just drop off and there's good reasons to use snapshot, though. There are trade offs for on chain voting.
00:12:27.668 - 00:13:02.528, Speaker A: I think the gas cost for uniswap voting, which has delegated voting, it's over $3 million since they opened up governance. Even if you only had like and that's in the best case scenario where you do have delegated voting and you have a large treasury that you're securing, let's say that your treasury is $1 million, are you going to spend $3 million on gas? To manage this $1 million treasury, you need to have gasless voting for the vast majority of things that human beings might want to organize around. So we're trying to kill multisigs for Dows for the most part.
00:13:02.528 - 00:13:08.580, Speaker A: Like, multisigs are not the right tool for Dao. Vote execution. Your Dao is the multi SIG.
00:13:08.580 - 00:13:17.624, Speaker A: You can use our oracle to verify basically this thing passed on snapshot. Therefore I can execute it. Anyone can execute it.
00:13:17.624 - 00:13:26.760, Speaker A: And in the future, we'll probably set up bots that just automatically propose and execute, just watch snapshot and it's like, hey, this passed. Okay, propose. Make it fully autonomous like that.
00:13:26.760 - 00:13:39.448, Speaker A: And the truth is economically incentivized and it's super easy to set up. A huge number of these dows have this pattern where you have snapshot. You have a safe with a bunch of your money in it and a multi SIG, and you just don't want to use the multi SIG.
00:13:39.448 - 00:13:56.070, Speaker A: You can attach the Uma module, which is audited by Open Zeppelin and live in production with a bunch of people right now and then configure that with your snapshot space. It'll take an afternoon maybe, if you're doing it by yourself and taking your time with it. Or you could come talk to me at the booth and we'll do it in like five minutes.
00:13:56.070 - 00:14:06.276, Speaker A: It's really easy. And this is the flow. So you deploy your module, you're setting the parameters, and then it's kind of like normal.
00:14:06.276 - 00:14:15.800, Speaker A: You just go through snapshot. You're creating your snapshot proposal. The only difference is you can attach a specific transaction bundle and you're saying, execute these transactions once this is done.
00:14:15.800 - 00:14:29.516, Speaker A: And then if it passes, you're going to see a button in snapshot. So it makes it easy for anyone to just click the button to propose on chain after the challenge window, if nobody disputed it, click the button again and execute it. And that's open for anybody to do.
00:14:29.516 - 00:14:38.144, Speaker A: You don't even have to be a Dao member. It's just something that has been proven now through Uma's system. And you can also set your challenge windows to be pretty long.
00:14:38.144 - 00:14:58.650, Speaker A: We've had dows that have implemented this have set the challenge window to like five days because they're not in any rush. They don't need to move quickly the way that across as a protocol needs to do. The Dow is like, hey, I'm going to move $5 million, but really make sure that it's correct and they're okay with it happening days later and they have plenty of eyes on it.
00:14:58.650 - 00:15:16.348, Speaker A: So we're getting a lot of adoption early on in DeFi, which has been interesting to see. I think part of that is because a bunch of these DeFi protocols know us from back in the day when we were doing these more on chain derivatives and exotic option type things. So they know us and used us already, see shapeshift pop up again.
00:15:16.348 - 00:15:34.452, Speaker A: If they already did their VC fundraising round on chain using us, it was kind of easy to sell. But I think a big part of it too is DeFi protocols really want to be decentralized and that's on know, like, why did you get into this space? Because you want decentralization and you know that using this multi SIG is bad. It's also a practical thing.
00:15:34.452 - 00:16:01.660, Speaker A: It feels very precarious to be a multi SIG signer, especially in the United States. And there's a lot of legal and regulatory surface area there where it doesn't look good to be a multi SIG signer. And even if that wasn't the case, it's really inefficient and annoying and you don't feel like you're doing your job because if you want to get things done quickly, people are just bugging you like, hey John, can you sign this transaction? I'm not necessarily going to look through and analyze every transaction myself.
00:16:01.660 - 00:16:14.460, Speaker A: I'll be like, okay, yeah, Hart said to sign the transaction. The transaction is probably fine, but that's not how it should be. This way it's all being rigorously checked both through the voting process and afterwards by a lot of third party people, not just you as the signers.
00:16:14.460 - 00:16:20.288, Speaker A: And you don't need to chase down signers across time zones. Anyone can propose and execute. I'm like the snapshot vote is done.
00:16:20.288 - 00:16:32.470, Speaker A: I've done this for Dows. I'm just like, hey, excited for them you're able to propose this now and then I'm like, but I can too. And so I just go and propose then on their behalf because anyone can.
00:16:32.470 - 00:16:55.948, Speaker A: Lossless is kind of interesting because that's a protection protocol where they had a tool where you're able to essentially reverse hacks, where if you have tokens that were using earlier, their special token contract, it includes a freeze and transfer function. And they were able to rescue a bunch of tokens that were stolen, I think in the Ronan hack. And they were looking to do that for things like WETH where their old token model wouldn't really work.
00:16:55.948 - 00:17:20.096, Speaker A: And they were able to use OSNAP to bridge the results of their lossless token holders on whether to unfreeze or whether to transfer funds to a particular address based on some public evidence. So it was kind of cool to see this integrated not just for your typical treasury management thing, but for actual core protocol governance, which is how they're using it for this new product they're rolling out. And then plus company is neat because it's a very small Dow.
00:17:20.096 - 00:17:31.800, Speaker A: They don't have a lot of money in their safe. It's basically a network of creative agencies and they wanted to set up internal Dow for the 3000 something members of their agencies. And they want all these people to vote, but it's not about a lot of money.
00:17:31.800 - 00:17:45.976, Speaker A: If you were actually to do this on chain, this Dow instantly becomes totally unviable. Like there's no point to do this, you're going to spend so much on gas, no one's going to vote. I think that they're using NFT based voting and that's another neat thing about Snapshot voting.
00:17:45.976 - 00:17:55.032, Speaker A: You could have voting power that's calculated all kinds of different ways. You could consider three different tokens like the Across Dow does. They have their basic across token.
00:17:55.032 - 00:18:04.800, Speaker A: They also have staked across LP tokens, and then they have the across success tokens. And all of those things have voting power and snapshot, which is easy to set up. That would be a nightmare to set up on chain.
00:18:04.800 - 00:18:22.600, Speaker A: And if they wanted to give like NFTs to their community members and add some governance rights to those, how are you going to do that in a smart contract? It'd be absolutely terrible. And if you only have $1,000 worth of ACX, why are you even going to vote at all? This lets your dao be more decentralized in the sense that your voters can actually vote. You don't have to delegate everything.
00:18:22.600 - 00:18:37.352, Speaker A: You can actually be engaged as a small token holder, which people want to do. So this is this beautiful future of Dow coordination. Yeah, we got like, a lot of tutorials.
00:18:37.352 - 00:18:58.848, Speaker A: If you go to Uma XYZ or Docs uma XYZ, you'll see some tutorials. You can deploy a prediction market or an insurance protocol or a bunch of other stuff within a pretty short time frame. And even if you're not doing prediction markets or insurance, it'll walk you through all the steps of how Uma stuff works so your specific use case can be modified.
00:18:58.848 - 00:19:11.384, Speaker A: And I know this was billed as a workshop, but I'm mostly just like talking a lot with words. But the thing about Uma is it's kind of a cheat code where you can use words to govern what happens. Like write out a couple of sentences, here's what I want to have happen.
00:19:11.384 - 00:19:22.284, Speaker A: Here are the rules of this smart contract. And so all you need to do to modify the tutorial is just change what the words say. So it's not as technical, it's not a lot of smart contract work.
00:19:22.284 - 00:19:35.792, Speaker A: You can use the audited smart contracts as is. Just change your wording to your use case prizes. So we have a really weirdly big first place of 5000, and then second place it drops down to 2000.
00:19:35.792 - 00:19:49.024, Speaker A: But there's also a pool prize of 3000 that gets split between everybody that does some Uma or across stuff. You can also do across stuff. Across is kind of a sister protocol that a lot of the Uma team members were working on initially.
00:19:49.024 - 00:20:03.496, Speaker A: And we split into two separate things, but still kind of related. So come talk to us about that too, like cross chain bridging. If any of your stuff is related to that, there's a lot of cool things you can do, especially around passing messages, which some protocols have started to do.
00:20:03.496 - 00:20:22.136, Speaker A: It's a new feature added to across where you're not just sending tokens to some other chain. You can also add a message that goes along with those tokens that could then trigger some stuff that happens on the other chain which has been underexplored so far, and reach out to us. We're always hiring.
00:20:22.136 - 00:20:34.676, Speaker A: We have a bunch of open positions. If you don't see a position that looks right, but you're really interested in this stuff, please reach out. We're also starting a community ambassador program too, where I think we're going to start sending people to hackathons and things like this.
00:20:34.676 - 00:20:51.770, Speaker A: I think especially with OSNAP, our optimistic governance thing, that's much more I don't know, it's more of like a wide audience thing than the Oracle as dev infrastructure. So we want to reach out to a lot more people and we want to grow that community. So come talk to us about that as well.
00:20:51.770 - 00:21:05.336, Speaker A: Oh, and our referral program is kind of interesting. If you refer somebody to us, you get paid with an on chain option, and our Oracle will verify how long this person stayed at the company. So your option will pay out more based on how long they're staying.
00:21:05.336 - 00:21:11.804, Speaker A: So it's kind of similar to the success token thing. You get like this boosted on chain payout. If this is a good candidate, they make it to the interview stage.
00:21:11.804 - 00:21:13.804, Speaker A: Okay. Boosted payout. They get hired.
00:21:13.804 - 00:21:21.820, Speaker A: Boosted payout. Six months boosted payout. And I think that we actually have time for Q A.
00:21:21.820 - 00:21:29.890, Speaker A: Or if you all are diving into your hacks, I know that the hackathon has just started. This is the last talk, right? Or last workshop today. Okay.
00:21:29.890 - 00:21:50.552, Speaker A: Any other questions or thoughts on this? Ideas? Yeah, probably. Yeah, it depends where you are, I guess. I mean, we're not going to tell you what your taxes are, but it's like any other token thing.
00:21:50.552 - 00:22:01.550, Speaker A: But yeah, you'll get some tokens. I think it'd be like some, uma, tokens at the end of the day. And this is not tax advice, but you wouldn't actually have anything until the expiry date of the options.
00:22:01.550 - 00:22:39.510, Speaker A: And so whatever, uma, is worth at the time that you exercise it is probably the relevant thing. But I'm really only familiar with the American context, so it depends on where you're just so I think there's a couple of aspects to it. There's a lot of conflict of interest of the insurance company that sold you the insurance, also deciding whether or not you collect the insurance.
00:22:39.510 - 00:22:53.542, Speaker A: Everybody kind of understands the game is you pay the insurance company money and then they try not to pay you and they'll find any way not to pay you, and this takes it out of their hands. And so there's a couple of ways to think about that. One is you need to make it a lot simpler.
00:22:53.542 - 00:22:59.434, Speaker A: It needs to be publicly verifiable. It's not based on specific things. It's not like, oh, my sink leaked or something.
00:22:59.434 - 00:23:09.326, Speaker A: There's no way for our Oracle to go and verify that this was from your sink leaking. You could have higher level stuff like, oh, the smart contract system was hacked. That's like the active insurance thing that people use.
00:23:09.326 - 00:23:22.850, Speaker A: You could also do something like custodial risk insurance. It's like I have a bunch of money in binance, is Binance going to lock withdrawals? Like I want insurance against withdrawals being frozen on binance. That seems like that would be really practical.
00:23:22.850 - 00:23:33.894, Speaker A: And you're not buying that insurance from Binance, obviously, which is kind of like the way insurance currently works. It's the person who wants to pay you the least. And it's not up to the person that deposited funds in the insurance pool either.
00:23:33.894 - 00:24:09.092, Speaker A: They're not voting on it. This is going to a neutral third party oracle whose whole incentive mechanism is built around finding the truth to whatever question it is and is receiving all kinds of questions. I mean, potentially, I guess it's all happening on chain with Uma's stuff.
00:24:09.092 - 00:24:31.908, Speaker A: So if you had some funds that are off chain, you'd probably convert it to USDC or, you know, there are custodian. Like I'm imagining this whole enterprise stack of normal insurance companies. They would probably go to Coinbase custody or someone to hold it for them and then put it into this smart contract that's controlled by Uma and pay consultants like some ludicrous amount of fees.
00:24:31.908 - 00:24:49.900, Speaker A: But yeah, you should be able to do that to the extent that companies can interact with the chain at all, it's permissionless. So then after you do that, you could probably leave it open too for just random people to be like, here's 20 more dollars for the insurance pool. Yeah, okay, yeah, no, that's perfect.
00:24:49.900 - 00:25:05.190, Speaker A: Yeah, if you check out our insurance tutorial, let me know if it looks good. Yeah, okay, awesome. Cool, thanks.
