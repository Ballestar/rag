00:00:06.490 - 00:00:23.440, Speaker A: Hi, everyone. Welcome to my workshop. It's called? The future of identity is self sovereign. Build a DAP with polygon ID. First of all, I want to say a big shout out to the Polygon ID team. A bunch of the ID team is here. Can you guys stand up? We've got people back there.
00:00:23.440 - 00:00:56.400, Speaker A: They've built a really cool product, and I'm excited that you're all going to get to start developing DApps this weekend. I think these are going to be some of the first DApps on Polygon ID ever. So you're really early, which is exciting. But first of all, GM. I'm Steph. I'm a developer relations engineer at Polygon, along with my lovely coworker Rahat in the front row. Another round of applause for Rahat, because why not? Vibes are good today.
00:00:56.400 - 00:01:38.982, Speaker A: I'm also Oceans 404 on Twitter. But right here in this slide, I gave you 12345 pieces of my identity. So my name, my job title, my company, and also my Twitter and my profile picture. So you know five things about me from this. But how do we know that those things are true? We don't, really. Right? You can kind of trust me, but when I think about identity, I think about things that I recognize immediately, like SpongeBob. And I know this is SpongeBob, and maybe these police come up to him and ask him, who are you? And he says I'm SpongeBob.
00:01:38.982 - 00:02:31.798, Speaker A: And maybe they look at him like, Are you really? How do we know that? We've never seen the show. But if you have done Kernel or read a lot of things on Bitcoin, there's this proverb that says, don't trust verify. So you can see in this image, SpongeBob is wearing a name tag, and you can see that it's written maybe in handwriting. So we think that he is self identified as SpongeBob, but we still don't know for sure if that's his real name or if that's really who he is, or if he's just saying that's true. So if SpongeBob had a driver's license, that would be better proof that he is actually who he says he is. This driver's license is issued by the city of Bikini Bottom. It has his address, it has his sex, his hair color, his eye color, his date of birth.
00:02:31.798 - 00:03:30.282, Speaker A: But if the police came up to SpongeBob in Bikini Bottom and said, what's your name? Why should he have to show his full driver's license if they only need to know one part of it? Why do we need to show all of this other data if we only need to prove one piece at a time? So kind of ruminate on that as we get into the rest of the presentation. This isn't just a problem for SpongeBob, right? We all have digital authentication that we have to do to have access to all kinds of different apps, including big tech apps, social media apps like Facebook. You have to sign up and give your first name, your last name, a lot of personal data. So like your mobile telephone number, your email, you set, your birthday, your sex, just a lot of information. And no one really knows why they need that. They say it's to improve the algorithm and things like that. But what are you really getting back for all of that that you're giving? So, getting into identity solutions.
00:03:30.282 - 00:03:58.022, Speaker A: There's three different types of identity solutions today. The first one is centralized identity. Like I said, if you're logging into Facebook, you use your email or phone number and a password. A centralized identity system is a single purpose identity, so you would need to create a new account every time you use a new app. So you're kind of siloed, right? Because that identity isn't portable. As you go from app to app, you can't use this Facebook login to log into, let's say, TikTok. At least I don't think you can.
00:03:58.022 - 00:04:57.686, Speaker A: I really doubt those systems talk or that there's synergy there because of competitiveness, but every app is storing this information for you separately, which could lead to a lot more security risk, right? Like if one of these gets hacked, they have your data, if another one is hacked, they have your data. But it's also a huge headache for managing all of your passwords and accounts across apps. I know I have a password manager and even that is a pain because there's always like one password that isn't in there and then I don't know what my password is because it's a centralized identity system. The next step up is Federated identity. Who has a Federated Identity login for work stuff? I know I do. Everyone at Polygon probably uses I think it's Okta or Okta, I'm not sure, but it's a way to sign into a bunch of different apps that are all within the same federation. So at least then you can use one single account and reuse your login across all of those different apps.
00:04:57.686 - 00:05:45.274, Speaker A: That makes this type of identity a little bit more portable, but unfortunately, it doesn't work for every single app out there. And another drawback is if you log in with, let's say, Google, one big tech company has access to all of your data across all the different apps you're logging into. So it knows what you're looking at, it knows what you're accessing. And I remember I used to use Facebook login a lot and one time I decided to delete my Facebook and then I realized I was locked out of Spotify, which I didn't even realize was connected. So I immediately got my Facebook back, but I was just like, oh no. So enter decentralized self sovereign identity. This is a multipurpose and portable type of identity where you can prove pieces of your identity to use on any app.
00:05:45.274 - 00:06:54.010, Speaker A: This is really powerful because you as a user retain the control over your personal data and also your digital identity and you also eliminate the middleman that's holding on to your identity in all of these different systems. So you don't have to give up your data to prove access rights to the things you need to log into. So these concepts come from this really incredible book that the Polygon ID team recommended to me. It's called self sovereign identity. And the two main takeaways I had from this book were that SSI or Self Sovereign Identity empowers us to receive digitally signed credentials, store them in private wallets, and securely prove our online identities. And we as individuals or even organizations like maybe DAOs or Workplaces, have that sole ownership over our digital identities, and we can decide how our personal data is shared and stored or if we don't want it stored or shared at all. So, going back to my SpongeBob references, a big idea in SSI is this trust triangle.
00:06:54.010 - 00:07:22.682, Speaker A: So we have an issuer, a Holder and a Verifier. So, in the SpongeBob situation, the issuer is Mrs. Puff, who has a boating school and gives out a driver's license. The holder is SpongeBob, who is getting that license, and the Verifier is a police officer. And so this kind of explains the issuance of a verified Credential and also its usage. So the Verified Credential in this case is the driver's license, and Mrs. Puff issues.
00:07:22.682 - 00:08:17.738, Speaker A: It to SpongeBob. And in this new Self Sovereign identity system, instead of the police officer having to see the verified credentials, they can just accept a proof. And they can do that because they trust the issuer, and they trust that the issuer has given the holder a proof that is authentic. So the issuer has to be trustworthy in doing the right things to make sure that whatever the verified credentials that they're giving out to a holder are actually legit. So we already see that happening with governments and also in cases with, like, COVID passports or vaccine passports. So someone is issuing you a verified Credential, maybe it's a nurse giving you a shot, and they're saying, I gave Rahat this second COVID vaccine. And so if there was a way to have a proof instead of having to show that actual COVID vaccine card, that would be awesome.
00:08:17.738 - 00:08:48.630, Speaker A: And we're getting into that. Enter polygon ID. So, Polygon ID is a scalable blockchain ID with ZK based privacy. We have a really nice architecture diagram on the right, and then the left has different tenants and things about it. So it offers universal identity. You get to prove your access rights rather than giving up your data or identity. And it also enables advanced on chain verification through ZK snarks.
00:08:48.630 - 00:09:28.750, Speaker A: So these are four of the guiding principles, and I think these come from that Self Sovereign Identity book and just other extremely smart people on the team. But polygon ID is decentralized. It's private by default. It uses ZK for trust and reputation, and it's also open and permissionless. So, going back to the SpongeBob thing, we're going to switch that to what this looks like in Polygon ID. So instead of Mrs. Puff or like someone from the government creating claims, you use an issuer to create a claim.
00:09:28.750 - 00:10:27.280, Speaker A: And that issuer can give the claim as a verified Credential to a holder me within my Polygon ID Wallet app. And then I can generate a cryptographic proof that is verified on chain with a smart contract to check against my signature to make sure that that is actually my proof. So if we go back to kind of some of the problems that we've seen in social media apps and other different things on the left, I had logged into Instagram a few weeks ago and it said add your birthday. It said to continue using Instagram, you have to add your birthday. And I was wondering, why is that? So I looked at the why, and it's because you need to be 13 years old. So they need to know my birthday to make sure that I'm 13 years old. But I'm going to show you how we can use Polygon ID to prove that I'm over the age of 13 and I can use Instagram without actually having to swipe around and put in my real birthday.
00:10:27.280 - 00:11:03.860, Speaker A: So this all starts with Issuer. So I'm going to click into issuer So this is the UI that is used to create these claims that you can give out to holders. I'm going to sign up. It's actually more of a sign in. And I have the polygon ID wallet app on my phone. I'll show you more about that in just a second. But I'm just going to log in with this QR code and I see something that just says connect my wallet.
00:11:03.860 - 00:11:41.670, Speaker A: So I'm connecting my wallet authenticating and now I'm logged in and I can create a claim. So I'm going to create a claim, and there's some different default schemas that are drop downs. I'm going to do a KYC age Credential because remember, I want to prove that I'm older than 13 so I can use the app. I'm not going to tell you all my real birthday, but I'll say 19 98 24. So August 24, 1990, that would make me way older than 13. And I'll submit that. So this has created a claim that I can give myself.
00:11:41.670 - 00:12:16.252, Speaker A: So since you can't really see it on my phone, I'm going to open up a notion page that shows this. Or actually I'll start with the slides. So I'm interacting with this issuer within my Polygon ID wallet app. So these are just some screenshots from the app. Again, you can prove your access rights without revealing your identity. And what I just did in that issuer UI was I created a claim. So now I have to give this claim to myself so that I know that that was my fake birthday.
00:12:16.252 - 00:12:54.584, Speaker A: It's not my real birthday, but you get it. So to do that, I'll show you a video of how that looks. Okay, so we just created a claim which is this screenshot. Next up, we have to generate the claim. So when you accept the claim by scanning that thing, the QR code, it goes through this flow where it adds the claim to your polygon ID wallet. So once that claim is added, you can see it in your data. So you can see now I have this KYC age credential within my polygon wallet.
00:12:54.584 - 00:13:51.760, Speaker A: So when I screen recorded this earlier, I said my birthday was January 1, 1990. But now this exists in my wallet and I can check anything against this. So the demo app that we worked on was a Zke ERC 20 AirDrop. So what we want to do is AirDrop tokens to anyone who's over the age of I can't remember what the age was, but let's just say it's 13. I think it was a specific birthday. But in order to do that, we need to check against that claim that we just created that said that my birthday was the first in 1990. So what you would do is you would scan that proof request or you would scan that QR code.
00:13:51.760 - 00:14:48.774, Speaker A: It would generate a proof against the information you already had stored. So it's generating the proof, a cryptographic proof would appear, and then you would click Generate proof. It uses biometric ID or a password, and it pops open your MetaMask and allows you to claim that ERC 20 token claim based on the fact that you were over the right age. So it's generating the proof. And then if this is successful, we'll see that the AirDrop gets added to my wallet. So you can see that in the screenshot, it confirmed that contract interaction. And now I have five ERC ZKP, which is just the token drop that we created inside of that wallet.
00:14:48.774 - 00:15:37.150, Speaker A: So that's kind of a high level overview of how this works. But I'm also going to show you some of the code for the verifier. And all of this is in different links that you'll be able to check out so you can look at how the smart contract works and also how the front end works. Okay, so this is the tutorial example. Implement a ZK ERC 20 AirDrop in 20 minutes. So it really does only take 20 minutes if you follow these instructions and just deploy your own smart contract and update like three different variables. But what you would do is download that polygon ID wallet setup either from the Apple Store or the Google Play store, and then you would get it right into the code.
00:15:37.150 - 00:16:27.834, Speaker A: So if you were just cloning this repo, all you would have to do is install the dependencies and then compile the code that already exists there and then run the deploy script. This would result in one smart contract. And what you would have to do after that where all of the magic with the proofs and everything happens is that you have to run something called Scripts Set request. And this is where we're actually submitting all of the things that make the proof work. So let me get into that. So within this set request, we have a validator address. This is the already deployed smart contract that is doing the validation.
00:16:27.834 - 00:17:12.030, Speaker A: And this is something you can reuse for any of your Polygon ID examples. All of the specific stuff happens below. So there's an age query and the part where we're actually checking against the age is on line 14 with the value. So we're checking that your date of birth happened before January 1, 2001. And so I already proved that with my claim that I was issued, so this should work for me. The other thing is that we also have an ERC Verifier address. So this is the address of the ERC 20 token that you can deploy using those instructions above.
00:17:12.030 - 00:18:07.544, Speaker A: And so the ZK proof request checks against that validator and also the age query to make sure that you're actually over the age that you said you were. So, back in the README, we have two different contracts within contracts. So this is the ERC 20 Verifier that I was just talking about. And this extends an ERC 20 contract as well as a ZKP Verifier contract that exists in this repo. And there's a couple of interesting things going on. There's a before proof submit and after proof submit hook, as well as a before token transfer hook. So this is where all of the custom logic is happening to make the actual AirDrop happen.
00:18:07.544 - 00:18:42.870, Speaker A: So before you submit that ZK proof, it's checking that the challenge input of the proof is equal to the sender. So you need to make sure that the user who's saying I'm over the age of 13 is actually the person who is submitting the transaction. And then after the proof submit, there's one more require statement. And this is just making sure that you don't claim the AirDrop multiple times. So that's just a little extra logic. And then this is where the AirDrop is executed. So this is kind of just like classic Airdropping, a token stuff.
00:18:42.870 - 00:19:37.012, Speaker A: But before these tokens are actually transferred, there's one more check and it's just making sure that you, as the person who provided the proof, are allowed to receive the tokens. And so, once you have all of these smart contracts deployed, all of these, meaning just two, the last thing that you need to do is design a proof request. So there's a query based request, language or not language, but structure, so you can read about that. More on the Polygon ID documentation and in the GitHub. But I'll show you the one that I created. So mine is in QR proof. So this is just a big JSON Blob, and I'm going to pass this to the QR code it's going to live in the QR code.
00:19:37.012 - 00:20:15.196, Speaker A: So when someone scans the link, it understands that this is the contract and this is what we're querying. So on line 21 and 22 you can see what we're querying. We're querying the birthday. And on line 22 we have Lt, which is less than and then 2001 one. So we're checking that the birthday that the proof is submitting is less than January 1. I can't say January January 1, 2001, and mine definitely is, so this should be successful. And like I said, this needs to live in a QR code.
00:20:15.196 - 00:21:16.260, Speaker A: So on our front end we have to have some type of QR code that you can scan that has this data so that it kicks off the whole smart contract process. I created a little code sandbox for you all. So that when you deploy these on your own, all you have to do in the code sandbox once your contracts are deployed is update this deployed contract address and then you should be able to test with this front end to look at the QR code and see if you can actually claim the ZK AirDrop. But that big Blob of JSON that we saw before lives in the QR code request. So it's the same exact thing. It has the deployed contract address and that little check down here, birthday less than January 20 or 2001. And that just lives in a little QR code component.
00:21:16.260 - 00:22:09.242, Speaker A: So it's just passing the value of that to here. So when we scan this code from the Polygon ID app, since I already have a claim, it should kick off an AirDrop to me. So I see something come up that says Proof request in my app. So I've scanned and I'm just going to submit continue for the proof request. It's generating the proof on my phone and then once it's done generating the proof, I'll click one more button and then it'll kick off the transfer of that AirDrop to my account. And you can see where that happened before. If you look at this PolyScan link, I think I'm the only person who's claimed on this contract.
00:22:09.242 - 00:22:59.296, Speaker A: Yeah, but five of that Zke ERC 20 token were airdropped to me about 6 hours ago, so I should get another AirDrop pretty soon. But yeah, that's how you would do this with an AirDrop that was the code. Okay. Did I lose everybody? I know that's a lot. You can look at the code on my GitHub, I'll give you the links towards the end. But I just wanted to talk about some of the prizes that Polygon is doing for the hackathon. So we have $20,000 in prizes and 4000 of that is for the best use of Polygon ID.
00:22:59.296 - 00:23:40.850, Speaker A: So you could create an app like the one I just showed you or something totally different to help people prove parts of their identity without actually giving up their data. We have three other prizes. We have 4000 for the best public goods and refi projects. Hopefully they're going to be like local projects that help the LATM ecosystem. We also have $4,000 for the best social DApps on Lens Protocol and 4000 for the best user experience and user onboarding to whatever DAP you build. And last but not least, we have a $4,000 prize pool for everyone who deploys any type of contract on Polygon. We ask that you have two transactions to that smart contract so that we can see you've actually used it.
00:23:40.850 - 00:24:22.830, Speaker A: And then these are just some of the benefits of developing on Polygon. I'm sure a lot of, you know, speed, cost, scalability, flexibility, all great. It's a great developer experience. And we're also asking that if you do submit for our pool prize by deploying something on Polygon, that you tweet your smart contract at us and tell us what you're building and why you're excited about it. We love hearing developer stories. It really fuels our entire team to keep going just because we want to see what you're building and we want to amplify that work and maybe give you a grant or put you through our accelerator eventually. Okay, so these are all of the different resources that I covered in this talk.
00:24:22.830 - 00:25:05.624, Speaker A: You can take a picture of this or I'll have a screenshot at the very end or a QR code at the very end so that you can get all of these when you're developing during the hackathon. But we'll also be at the booth and we have lots of different members of the Polygon ID core team here that can also help you develop. They're awesome, super friendly, and some of the most talented engineers I've gotten to work with. So I highly recommend stopping by. But thank you so much for listening to all of the things that I just said. All of the slides and the GitHub repo and everything is on this QR code, so feel free to scan it and you'll have all of the links to get started building. Really excited to see what you build this weekend and wag me.
00:25:05.624 - 00:25:07.110, Speaker A: We're all going to make it. Thank you.
