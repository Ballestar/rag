00:00:07.370 - 00:00:41.340, Speaker A: My name is Tylen. I'm with the Uniswap Foundation. And today we're going to be talking and introducing you to Uniswap V Four. So before we start, I want to say welcome to where it all started for us here in New York, when all you could do on Uniswap was basically uni for ETH. And safe to say, we've come a long way since then. And while we've done quite a bit, we're nowhere near being done. This summer, we announced the launch of Uniswap V Four.
00:00:41.340 - 00:01:25.830, Speaker A: I should say we announced that Uniswap V Four will be launching. And with it came a very new and exciting paradigm for us, which we've introduced called hooks. Hooks allow you to now create pools that are customizable, they're modular, and they open up the design space for developers in a way that we haven't previously ever seen before at Uniswap and in DeFi. And I think it's a great time to be a developer on Uniswap. So hooks aren't the only new thing here. We've added so many new things to Uniswap V Four where you probably won't recognize it's not the same things we saw at V Three. Now, we've moved to a singleton pool manager design.
00:01:25.830 - 00:02:08.782, Speaker A: We've reintroduced native ETH. We have flash accounting. All of this is meant to make Uniswap faster, more gas efficient, and easier and more fun to build with for developers. Well, how about we dive into what makes V Four different? As we mentioned, the first thing we talked about was we have a different way for pools managing from Uniswap V three. In Uniswap V three, the way you would create pools is in a factory type style. You would end up going to the pool factory contract. The factory contract would then spin up a new totally separate pool address for you, and the pools would all live separately in different addresses.
00:02:08.782 - 00:02:40.990, Speaker A: And then you would have to call each of those addresses. So the way that works here is you set up your factory and pool manager contracts. You end up creating the contract factory and using that to interact with the pool creation. Then you would use that contract factory to deploy your Uniswap V Three contracts when you deployed them. This is another thing. You only had three parameters that you really had to worry about. You worry about what pool pair you're doing, ETH, USDC, and then you worry about what fee tier you have.
00:02:40.990 - 00:03:11.722, Speaker A: In V three, you could choose from four fee tiers. And with that came the automatic creation of what your tick spacing was. So your tick spacing is predetermined. You have your three parameters. Cool. And then you deploy your contract, you create the pool. And it's nice and done here, but it's in a different contract, which is not very easy if you're a developer, to just keep on finding all these new contracts, interacting with them.
00:03:11.722 - 00:03:48.898, Speaker A: It's kind of a pain. So what we did in V Four is we introduced a singleton style design, which is all of the pools now live in one contract, and they each have their own ID. And this ID is what you would use to reference the pool in the contract. So right off the bat, we're making it simpler, we're making it more gas efficient to also spin up pools. Now you don't have to deploy new contracts every time you spin up a pool. It all exists in the V Four pool manager. And the other thing that's different now is, as we saw in V three, there were only three parameters when it came to developing a pool.
00:03:48.898 - 00:04:18.010, Speaker A: Now you have a bit more parameters. You still have your fee tiers and your currencies. But now fee tiers are basically customizable by you as the developer to any fee tier you want. No longer is it just four fee tiers. You can put anything you want. You can set your fee tier to 99% and see how many LPs will rush to that pool. The other thing is the tick spacing is now there and determined by you and also new to the party, hooks.
00:04:18.010 - 00:04:52.860, Speaker A: Hooks are their own separate contracts now that live in pools, and they're able to be customized, developed by you. And you could put whatever parameters you want around that, and it'll dictate how the pool performs. We'll dive into hooks a little bit later, but I think this is where you would be initializing the pool. You'd add your pool key here. It's all of the different parameters we just mentioned previously. And then you'd initialize this and you would have your pool then saved into the contract. This is another interesting thing.
00:04:52.860 - 00:05:23.262, Speaker A: This is where before, when you were initializing pools, you would not have the ability to actually have hooks on V three. Now, in hooks, you can see when you're creating a pool, it checks to see if there's a hook that needs to be called before this pool is created. So that's already built into the initialize function. And then, as we mentioned, it's stored in the pool contract. The other item, no more wrapping of ETH needed. You can interact with native ETH. It's a lot easier.
00:05:23.262 - 00:06:10.466, Speaker A: And I think developers, it's probably a lot easier for you for testing and for everything. So it's simplifying trading, it's reducing the cost. And welcome back, native e. The other item is flash accounting. Flash accounting is very important for us because now we're able to actually test out transactions and have them all happen in one batch while they're going through. So you're not wasting a lot of gas going through multiple different swaps, multiple different things. The lock and call function in our flash accounting allows you to basically lock together a transaction, test out the different swaps that are occurring, and it looks at the delta of if everything adds up and makes sense.
00:06:10.466 - 00:06:50.378, Speaker A: And for V four, this is super nice because as we mentioned, gas efficiency is a big thing that we've kind of cut down on, and this is what enables us to do this. Yeah. So here you have your account delta. You're checking to see if everything adds up and it tracks all the balances to make sure that they're all accounted for and proper. And then you are able to get better results on your transactions and save more gas. Now that we've gotten all that, let's go to the actual fun of everything here and why I think you as developers should be most excited. It's V Four hooks.
00:06:50.378 - 00:07:46.786, Speaker A: So for the first time, you're now able to use Uniswap as a protocol and then build onto it new customizable features that could expand it from what it was as a Dex as just uniswap to now your own customized Dex with your own customized pools, your own interface. So what it looks like is hooks can basically be called at four different action points within the Uniswap protocol. Before or after you create a pool. As we saw when we were initializing the pool, there was a hook to check. Hey, do we call this hook here before or after a position is modified for an LP, so you're able to do cool things with that. You're able to call a hook before or after a swap occurs and before or after donate. Donate is also a new feature in V Four where basically you can give fees to LPs who in a pool, basically donating to them, incentivizing them.
00:07:46.786 - 00:08:42.238, Speaker A: If they're probably staying within a certain range of liquidity, you can give them fees to maintain in that range. So there are lots of cool liquidity mining incentives that could be created from this. So let's take a look at what you can probably build as an example to make you understand how hooks perform. We're going to look at a simple New York Stock Exchange hook, right? What if I want to change Uniswap and make it only open during the hours of the New York Stock Exchange? So, you know, we're going to look at this and we're going to say, okay, before a swap happens, I want to enable this hook, and I want to check that. I want to run my hook for this. So I call the before swap. I set that to true, and then I have my function in my separate hook contract that I add on to the Uniswap pool that I've created.
00:08:42.238 - 00:09:19.950, Speaker A: So I have this ETH USDC pool. It can only operate during the trading hours of the New York Stock Exchange and before the swap occurs. I, as the swapper now call this separate contract, or the contract now calls this separate contract. And it says, okay, is this between the hours of 08:00 and 05:00 p.m.? Is it a holiday? Is this, et cetera? And it checks to make sure that all of this is true. And if it is true, then the swap can occur if it's not true, then the swap doesn't occur. And here the developer actually emitted a ding ding ding whenever a swap happens.
00:09:19.950 - 00:10:00.138, Speaker A: So you know that your swap has happened and the New York Stock Exchange bell has rang. Now, that's not the only type of hook you can build. Instead of the code, let's see other examples that might be more conceptual. What if now I have an NFT, and for whatever reason, I only want users of a certain NFT to be able to interact with my Ethosdc pool? I, as the developer, say, okay, I have a board ape NFT and only people with the board ape NFT can interact with this pool. And then we've got the ether rock. We don't want the ether rock people interacting with this pool. So this hook would create the same scenario where it checks before a swap happens.
00:10:00.138 - 00:11:00.574, Speaker A: If this condition is met and it says the swap is successful, but if it's not met, then you can't swap on this pool. So there are lots of interesting social NFT type apps that can be built from this. And another, I think more interesting app for people, or hook for people that are interested in the liquidity provision space is what if. Now I have all of this liquidity in a USDC pool and I'm a provider of liquidity and I am not doing a great job of managing my positions. So I could create a hook that basically says if this person is in range, they're obviously going to be doing well and they're going to be getting fees gathered. But what if my position is out of range? Well, you could create a hook that basically says we're going to send any out of range liquidity to someone like Ave where we could still have yield being generated for us. So it's a way where hooks don't just have to be on the swap side.
00:11:00.574 - 00:11:53.250, Speaker A: It's a very interesting way for you as developers to start thinking, how do I bring in more people into uniswap into this liquidity pool where we're able to do a lot more with their money and generate them fees in ways that hasn't been possible before on Uniswap. So that's uniswap v four as what we're doing with hooks. We have $20,000 in bounties that we're giving out for people that are looking to build on top of hooks. We call it our hookathon here. So we'll be giving 12,000 to people that we're giving $12,000 as a pool prize to people that are building innovative, unique hooks that we haven't really seen before. And we haven't seen a lot of things because this has really been out for two months. So I think the world is y'all's oyster in how you build out these hooks.
00:11:53.250 - 00:12:46.258, Speaker A: And because we're still building on top of the protocol, because we're still building Uniswap v four out, we're looking for any help with developer tooling, any things that help make the developer experience a lot better for us and for you guys. And we're giving out 3000 in pool prizes for that. For each of the pool prizes, we're probably looking to give out two to three prizes so you guys can deduce how much you can make from that. And then we have an open innovation prize at the end as well. This is $5,000 and it will be for anyone that builds on top of Uniswap V Three or V Four eligibility to win these bounties is basically use the Uniswap V Four code. Use the uniswap v three code. Don't just integrate like a swapping app.
00:12:46.258 - 00:13:49.442, Speaker A: I think we'd like to see things that are a little bit more sophisticated than that. And if you are at all interested in continuing the discussion of V Four after this, come to me after this talk and join our hook Dojo. We've got over 200 members in there that are active developers building out hooks, sharing their ideas, answering questions, and I'm happy to give you guys the invite link. And then we also have our V Four docs. So just this week we spun up a testnet, a roll up on top of optimism, where you're able to develop now much easier than deploying just on a local testnet. All of our information on how to do that is on there and we also have information on hook resources and how to start building with some example hook templates. With that, I am happy to answer any questions anybody has about the protocol.
00:13:49.442 - 00:13:51.480, Speaker A: I wanted to leave more time for that. Yes.
00:13:53.610 - 00:14:08.506, Speaker B: Selection on the pool I have on pools and Unsuspected user tries to swap some. Do I have any guarantee that Ipools will be used? Is there a fairness built in Snubby port?
00:14:08.688 - 00:15:16.778, Speaker A: Good question. So his question was basically I've now created a pool with a hook. And me, as a developer, how do I ensure that when someone is swapping, my pool gets routed to so that I can collect fees for my LPs on that pool. So that is a routing problem which is dependent on the interface, dependent on where you deploy your pools. I think it brings up both a unique advantage where you can kind of have either we could go on to uniswap X on how uniswap X kind of addresses routing, but basically the short answer is it does get a little tougher for pools to get picked up because we have to make sure that safety of pools for these protocols, it isn't stealing the user's funds or doing something malicious. So there's still discussion on how we solve that right now. But for the most part I think we might see some blend of some kind of hook list standards, some kind of protocols like taking the push on how do you actually implement this into routing.
00:15:16.778 - 00:15:23.262, Speaker A: So will Labs route to it automatically? I think that's still we're still trying to figure that out.
00:15:23.396 - 00:15:26.600, Speaker B: UB Four user it took this.
00:15:28.570 - 00:15:31.480, Speaker A: Yeah, that's still being figured out. Yeah.
00:15:32.490 - 00:15:32.902, Speaker B: Cool.
00:15:32.956 - 00:15:49.300, Speaker A: Great question. Any other questions? Awesome. Well, thank you guys for your time. And yeah.
