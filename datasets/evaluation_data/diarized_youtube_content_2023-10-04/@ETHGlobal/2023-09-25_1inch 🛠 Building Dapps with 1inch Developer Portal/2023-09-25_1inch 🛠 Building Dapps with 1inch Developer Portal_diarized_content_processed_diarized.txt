00:00:07.290 - 00:00:39.526, Speaker A: I'm software developer from One Inch, and today I want to talk about Vanish developer portal. And before that, let's do some small recap, maybe someone don't know what is One Inch? And I just want to say okay, I just want to say that Vanish started at a few New York four years ago as a hackathon project and I was there as well, like at the same sitting with the same table with the co founders. They're not here right now, but they're always happy to support Ethereum Global and every hackathon of developers.
00:00:39.526 - 00:01:03.914, Speaker A: And over last four years we have right now about 4 million users, we have 55 billions of total available liquidity for traders, we have more than 350 billions of dollars of volume and we have about 70% of aggregation market share right now. Yeah, and over the years we developed several protocols and services for developers. The main one is aggregation protocol.
00:01:03.914 - 00:01:17.618, Speaker A: Of course, we do have a limit order protocol as well. We do have a valid Fusion, the latest our invention that allows you to trade with Dutch auction enabled. And also we do have a non custodial DeFi wallet available for all mobile platforms.
00:01:17.618 - 00:01:26.242, Speaker A: And we do also have a developer portal. What I will be talking about right now. So small rehab about aggregation protocol.
00:01:26.242 - 00:01:47.690, Speaker A: So, aggregation protocol allows you to make a swap with uniswap like experience, but inside one atomic transaction with the best trades on the market. Even if you're doing that with API or with user interface, it's still the best solution on the market right now according to analytics that we have here as well. Vanish always have open source and traceable analytics over all protocols.
00:01:47.690 - 00:02:14.470, Speaker A: And you can also always check this out, what numbers do we have by just checking june Slash, Vaninich okay, let's start. Actually, recently we considered how can we help builders to continue building Uns, maybe what else we can provide for developers to simplify the experience they have with One Inch. And we decided that maybe it's a good idea to build a developer portal.
00:02:14.470 - 00:02:36.438, Speaker A: Actually, it's a combo of all solutions that we have right now. We have multiple APIs that we are not available publicly for hackers, but right now we opened most of them and we develop a portal. Currently you can use almost anything that One Inch have developed for years for our noncustodial wallet and for our G app.
00:02:36.438 - 00:02:49.266, Speaker A: And of course we do have aggregation protocol and Nimito protocol and Fusion available there as well. So it looks basically like that. If you want to try it out, I will have a link soon.
00:02:49.266 - 00:03:12.218, Speaker A: And the only requirement for you is just to have a registration and by default you will have an identification token that will be having limit of one RPS per second and you can freely use any API that is available there with the commentation portal. For example, if you will try to use aggregation protocol, I just wanted to recap how it works. The basic integration is pretty simple.
00:03:12.218 - 00:03:44.210, Speaker A: You do have two handles that you need to quote to start to make a transaction. First, you need to make a quote to call a call quote handle with three parameters from token amount to token amount and address amount of the token that you want to swap if you're okay with the returned amount that you will get. Basically, you need to continue and call another quote called swap that will actually build a call data that you will need to execute on your own address on your own wallet by calling the one inch rotor smart contract directly.
00:03:44.210 - 00:04:07.580, Speaker A: So you can try aggregation protocol via the one inch developer Portal instantly. Right now if you want to check it out, there is a shortcut for it and I just want to show how it looks like and how you can try it out. So for that we basically don't need anything except have been registered on Developer Portal already and we do have a swagger here.
00:04:07.580 - 00:04:23.706, Speaker A: Let's wait until it will be downloaded. So we do have multiple handles there, but this is the main two handles that you need to use if you want to play with aggregation protocol. The first one basically allows you to get a quote.
00:04:23.706 - 00:04:33.566, Speaker A: So let's execute it. In this example, we will have a native token swap rate to the one inch token with the amount of I think 0.1 ethereum.
00:04:33.566 - 00:04:56.720, Speaker A: So let's take a look. What will be the rate, the tuka total amount that we will have? Okay, we got it. So this is the two amount that we have for the one inch token.
00:04:56.720 - 00:05:32.990, Speaker A: We can actually calculate what will be the return if you'll just make it not in the way amount but in the QR readable amount 1 second. Okay, looks like internet doesn't want to be my friend today. Okay, let's continue on other APIs that we have on Developer Portal.
00:05:32.990 - 00:06:11.386, Speaker A: So we added much more APIs to Developer Portal compared to aggregation protocol and the next interesting one is actually spot price API and this API allows you to get any token to native token and to USD and any other fiat currency price rate and you will get it in the batched amount. So the problem that we wanted to solve actually is that we need to get somehow we need to get rates, fiat rates of almost every token that we have on the market. Basically users always compare any amount of the fiat amount and we need to get updated prices of them.
00:06:11.386 - 00:06:40.398, Speaker A: And if you will try to use Pathfinder in such case it will be very resourceful but we still need to use something for that. The problems that we have is that it must be really up to date because if it will be not up to date during one block transaction, the price can significantly change and in such case users can lose money and user can't make a trade in such case. For example and this API is actually used almost everywhere on our front end, on our D app, on our wallet.
00:06:40.398 - 00:07:18.640, Speaker A: And what this allows to you to do is basically get price of almost any bunch of tokens almost with the real time precision and it's actually based on open source of spot price Oracle that is available on our GitHub. Our spot price Oracle actually allows you to get native token price of any token based on smart contract that actually aggregates the prices of every uniswap pool that is available for any token on multiple networks or uniswap like protocols. So you got pretty transparent pricing model for every token that you need to get a price.
00:07:18.640 - 00:07:33.374, Speaker A: One more API that we have there is a Balances API. We also widely use it everywhere. The main feature of the Balances API is that you don't need to call Nodrpc directly and you can use batched requests.
00:07:33.374 - 00:07:48.922, Speaker A: So basically you don't need to make a thousand requests per thousand tokens, you just need to make one request and we will do all for you. We're using one inch multicol operation there and it's pretty easily available on one inch developer portal. So you don't need to care about other other node PC services.
00:07:48.922 - 00:08:17.774, Speaker A: For example, if your app have a cross chain support, you need to take care about every chain another PC and it's quite resourceful on developer portal you can just use it and just change the parameter of the request. So yeah, multi chain low latency and one API call for getting all the balances and allowances at the same time. And one more pretty simple and nice API that we have, it's called Token API that allows you to search over tokens by querying.
00:08:17.774 - 00:08:34.680, Speaker A: So basically you have a text search over all unisex 20 tokens over all networks that we do support. It's about eleven EVM networks right now. And also you can get images and everything that you need to display for user for the tokens, use it on the front end on our G app as well.
00:08:34.680 - 00:08:47.482, Speaker A: And we do also support the uniswap token list standards. So we do aggregate multiple providers of tokens. So if you want to switch between multiple providers of uniswap token list, you can make it with this API.
00:08:47.482 - 00:09:18.230, Speaker A: And we do have a small rating system inside, so when you do a search, we actually provide a filtering and we provide like search depends on the rating of this token. And the rating of this token is actually amount of uniswap token lists where this token is actually available. So that means that if we for example searching for ave token, this token is quite popular and it's almost available on every token list, so it will be in the top of the results.
00:09:18.230 - 00:09:33.418, Speaker A: And last but not least, we have a portfolio API. Its API allows you to get your trading portfolio with CVL with a lot of new features. It's some small pre release that we will have soon.
00:09:33.418 - 00:10:00.340, Speaker A: The best of it is that we have a fantastic charts for any token to any other token in multiple networks with very nice precision and granularity. All the data is taken from on chain so basically it's pretty accountable. And right now I have a small examples 101 how you can run all these APIs with your nodes, with your code using node JS for example.
00:10:00.340 - 00:10:18.166, Speaker A: So this is the link for the one inch developer Portal 101. If you want to try it later on your own, just download this repo and there are only two requirements that you need to have there to run it. Basically it's available in the config.
00:10:18.166 - 00:10:36.558, Speaker A: The only two requirements to run it is to have your private key available for the swaps if you want to make a swaps and authorization key available. Authorization key is free so you can guide it on developer portal and the private key, I think you know what is it. So let's play a bit.
00:10:36.558 - 00:10:46.594, Speaker A: So I decided to make some user flow with all our APIs. How we can build a small D app. I am a backend developer so I decided to skip on frontend part.
00:10:46.594 - 00:11:04.938, Speaker A: So let's trust OpenAI and someone else to build a front end later. So let's imagine that we have a user that is trying to search something over like our input for some tokens. Let it be for example, one inch because they just somehow went to one inch website.
00:11:04.938 - 00:11:32.024, Speaker A: So let's try to run a search using tokens API for the search and yeah, I will check out what will be the result. So, we have a search result here for the tokens of one inch. So as you can see, the one inch token is in the top list.
00:11:32.024 - 00:11:53.344, Speaker A: So we have some sort of it's like sorting of every token based on your text query. And basically I made a wrapper over our APIs if you want to see how it works. It's pretty simple, it's basically Http requests and almost nothing else as simple as it's really hard to imagine how even more simple it can be.
00:11:53.344 - 00:12:16.500, Speaker A: It's basically API request to our developer portal with basically passing the parameters that you have from the swagger. In such case it's just passing the query for the text and also chain ID. I made it a bit simple so if you want to try to use anything of that, you can just copy these functions and that's almost it for you to use this API.
00:12:16.500 - 00:12:35.640, Speaker A: So, as you can see, we have some search result of one each tokens and just wanted to demonstrate that right now you can get not only we can take a look on one each token, what is inside. So we have name, symbol, log, Uri, so you can display a picture on your front ends for example. And we have a list of providers.
00:12:35.640 - 00:12:53.110, Speaker A: So providers are actually token lists that are available with such token that such token have and we can see that we have a one each token list in the top of it. So let's try to continue and grab a token list of some providers. In such case, let it be one inch token list.
00:12:53.110 - 00:13:09.210, Speaker A: So I already make this request. So let's wait until we'll get a token list of one inch. And here we are, we have a token list by provider.
00:13:09.210 - 00:13:24.174, Speaker A: This token list is the standard token list by standard of uniswap. So you have a group of tokens, it's about a thousand tokens that one each do support on the interface by default. And let's imagine our user right now sees a lot of tokens.
00:13:24.174 - 00:13:40.840, Speaker A: So user wants to get information, what is the price of some tokens here? Let's imagine that our user picks some of these addresses and want to get a fiat price of these tokens. So for that we will need a spot price API. Let's try to run it.
00:13:40.840 - 00:13:57.450, Speaker A: And this is basically the example how you can run a spot price API. It's almost as simple as token API. So basically it's a wrapper over one get method that allows you just to pass a list of tokens and VRS currency want to get the rates.
00:13:57.450 - 00:14:14.920, Speaker A: So in our case it will be some tokens from one each token list. So let's try to run it. I'm sorry, let me turn off the tokens part.
00:14:14.920 - 00:15:13.990, Speaker A: Something goes wrong with the debugger, let me just play it so I will get a logs of it. So here we are. We do have actually the prices returned for this bunch of tokens and this is actually the fiat prices of these tokens basically.
00:15:13.990 - 00:15:50.534, Speaker A: Okay, user actually right now knows about our USD prices and let's imagine that our user wants to continue on this deep research and if no user get interested in one of them and want to get a historical price of some tokens by using a chart API. So let's try to get the chart, a historical chart of some token versus USD to make a technical analysis search for example for such user and in such case we will use charts API basically and it comes from portfolio API. I will show you a wrapper over it.
00:15:50.534 - 00:16:02.554, Speaker A: It's almost as simple as everyone else, everything else. So it's here and the only requirements here is just chain ID, token versus currency. It's almost simple as everything else.
00:16:02.554 - 00:16:38.050, Speaker A: So let's try to use a chart bi right now to get some information about historical prices of this token that we are already found. Okay, so we have some candles, I don't want to visualize that via the console, but as you can see we have some price movements here. And let's imagine that our user right now do perform very nice productive technical analysis and this user wants to trade this token via an niche API and let's try to trade this token.
00:16:38.050 - 00:16:53.522, Speaker A: So to make it possible to make a trade we will need to use aggregation API. For that we first need to have some preparations. So before we will make some preparations we need first to get our balances.
00:16:53.522 - 00:17:13.982, Speaker A: So we need to understand what is our balances on our address that we have from the user and for that we will use balances API. The balances API is also simple as everything else to use. The only difference here between these two wrappers is that you can either have balances and allowances together batched via one call.
00:17:13.982 - 00:17:38.722, Speaker A: So you just pass address and list of tokens and you will get allowances and balances of every token for this address with the spender on it. If you will also pass a spender for allowances in our case it will be one inch rotor address. So before we'll try to perform a swap, we will firstly need to get to make approval on the one each rotor smart contract.
00:17:38.722 - 00:18:08.282, Speaker A: And if you want to make approval you first need to check that user needs to have some approval like does user already have approval or not? So let's check that we have some approval on it or not. I will use the get balances and allowances and in my case I will have one shorter smart contract as a spender address of my private key that I have in env variables and the network will be actually Ethereum network authorization key. I have it in config and we will try to get balances and allowances of several tokens.
00:18:08.282 - 00:18:19.006, Speaker A: It will be one inch token, it will be USDC coin, it's the same on binance smart chain and Ethereum. So I just hard coded it for binance machine here. Sorry for the naming and for the rapt Ethereum token.
00:18:19.006 - 00:18:54.076, Speaker A: So let's execute the balances here 1 second. Okay, so we have a balances as you can see it's key value result and for one inch token we have a balance this one and we have this one allowance so it looks like it's okay. And we potentially for example can trade from one inch token to any other token and we already have allowance for this address if we don't have it.
00:18:54.076 - 00:19:09.330, Speaker A: I also do have a script here nearby to make approve it's just below here and I think I will skip it for now because I want to continue on other interesting APIs. But if you want to try to use it, you can just use it with arguments. True.
00:19:09.330 - 00:19:39.942, Speaker A: So let's try to make firstly a quote and if the quote will be okay for us, we will make a swap from one each token to for example let it be the wrapped Ethereum token that user actually was doing research. Okay, let's try to perform a swap. I'm a bit out of time so let me just to continue to the swap with this API.
00:19:39.942 - 00:19:52.826, Speaker A: So we just perform it. So in our case, we will try to swap ten one inch tokens to some amount of wrapped ethereum. Let's imagine we already quoted the quote API and we got some results.
00:19:52.826 - 00:20:07.574, Speaker A: So this is a transaction hash that we have. Let's check that we have it open like we have this transaction and other scan. So here we are.
00:20:07.574 - 00:20:16.600, Speaker A: We tried to use aggregation rotary API to swap some on each tokens. Let's wait until to be executed. Basically see the information about the swap here.
00:20:16.600 - 00:20:43.920, Speaker A: I think my transaction stuck to bit. But one more point when transaction will be executed, we already have a transaction hash. And what if I want to get more information about my transaction hash by the transaction hash, like how it was executed? For such thing, we can continue to use one inch API and use one inch tracers API.
00:20:43.920 - 00:21:03.096, Speaker A: And using one inch tracer's API, we will get information about the trace, about all events, about all logs, calls, everything potentially that you need to debug and analyze the transaction. You can build almost anything on that. If you are familiar with transaction traces, you know that it's extremely hard to get traces of almost any transaction, of almost any block.
00:21:03.096 - 00:21:25.090, Speaker A: And one each developer portal provides traces API that will have almost zero latency and will be extremely reliable and fast to get traces of almost any block from Ganeshes to the current one for multiple chains, for eight EVM chains. So I don't have enough time to wait for the transaction to be executed. So let me just show you example how the trace looks like and I'll finish.
00:21:25.090 - 00:21:49.342, Speaker A: So, as you can see, the block trace is something like that. It's basically the transaction trace, not the block trace. But you can also use a block trace in such case.
00:21:49.342 - 00:22:24.550, Speaker A: And we do have a calls here that allows you us actually to see information how our transaction was executed, what was the storage operations here and using all of this data, basically it's much more easier to build analytics. And basically using transaction traces API, you can build your own indexer and the only requirement for you is just using traces API instead of running your own archival node, which is much more easier, especially for the L two S. So I think that's it.
00:22:24.550 - 00:22:26.460, Speaker A: So thank you for your attention mention.
