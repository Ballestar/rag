00:00:13.530 - 00:00:24.978, Speaker A: Hello everyone. Thanks for joining me today. I'm going to basically walk you through the developer documentation for Fendora, also give you a brief overview of the Fendora architecture.
00:00:24.978 - 00:00:49.270, Speaker A: And finally, for our ETH Global hackathon participants, I'm going to discuss a little bit more about the privacy routing SDK and also the Zkdid SDK that you can use as part of our hackathon challenges. So stepping right in, the first step for developers to do is to go to Docs Fendora.org. This is where all of our documentation is stored.
00:00:49.270 - 00:01:09.874, Speaker A: And once you arrive at the site, you'll see that it's broken up into essentially two main sections. One is the module section, which has a lot of theoretical abstract concepts that explains to you what kind of underpins the Fendora blockchain. Next, we have this developer section right here.
00:01:09.874 - 00:01:38.134, Speaker A: This is where you're going to find all the tools and SDKs that US developer can use and install in order to launch and run and manage a DApp on the Fendora blockchain. And finally, at the very bottom, I just want to mention that we have a network settings section. So if you're a developer developing on our testnets for a hackathon, make sure you're on the correct testnet.
00:01:38.134 - 00:01:56.602, Speaker A: For the ETH Global hackathon, we'll be using the Forge testnet. So just make sure to point your RPC, endpoints, MetaMask, wallets, et cetera, to the right network which would be forged testnet for the ETH Global hackathon. Okay, so that's the quick documentation walkthrough.
00:01:56.602 - 00:02:07.922, Speaker A: Next I'm going to talk to you a little bit about the Fendora architecture. So these are important concepts to kind of know. So you have kind of a background from which to build your DApp on Fendora.
00:02:07.922 - 00:02:36.618, Speaker A: So I'm going to go ahead and walk you through the introduction here. Scroll down here to the main image and essentially the important architectural facts to know about blockchain was originally Fendora started off as a UTXO based blockchain, and we incorporated a lot of confidential transfer features on top of this original Fendora UTXO blockchain. It operated under a tenderman consensus.
00:02:36.618 - 00:03:06.642, Speaker A: Later on, in order to sort of serve EVM developers, we added on top of the existing UTXO blockchain, EVM compatible blockchain layer. So now Fendora is really composed of two blockchains connected by one consensus, UTXO blockchain and an EVM blockchain. So as an EVM developer, one thing to note is the Fendora EVM, which we also call the Smart Chain, is completely 100% EVM compatible.
00:03:06.642 - 00:03:51.654, Speaker A: Meaning any Ethereum tooling you've ever used Remix, Truffle, et cetera, it will work. With Fendora EVM, any solidity code that you have on Ethereum, you can pretty much directly copy and paste it and have it run on Fendora EVM as well. Another important concept to understand and terminology to understand is because Fendora has again two blockchains, the original Fendora UTXO blockchain and the newer Fendora EVM blockchain, you have to have a way to migrate tokens between these two internal Fendora blockchains and the way to migrate them is through what we call a Prism transfer.
00:03:51.654 - 00:04:11.830, Speaker A: So essentially you can consider Prism as an internal bridge within the overall Fendora blockchain. So the Prism transfer allows you to move FRA tokens or any tokens between Fendora UTXO and Fendora EVM. So that's the important concept to note.
00:04:11.830 - 00:04:32.882, Speaker A: And finally, I'll give you a brief introduction on sort of the newest feature that Fendora has launched. It's still in an early stage and MVP phase, but we're pretty proud to announce that Fendora is going to be supporting decentralized Identifiers DIDs. Basically Zkd and Credentials is what we call the product.
00:04:32.882 - 00:05:10.110, Speaker A: Essentially it's a way to have an identity on the blockchain that's connected to credentials, which reveal personal information about that did holder. And these credentials and the related proofs that are related to the credentials can reveal private information about the did holder in what we call a zero knowledge fashion. Essentially what that means is you can reveal that your credit score is above 700 without actually revealing the actual number of your credit score.
00:05:10.110 - 00:05:31.314, Speaker A: Okay? So with that, I'm going to move on to the privacy routing SDK. Essentially go to the developers section, click on the SDK segment and look for the privacy routing SDK. And in our hackathon, we're going to have challenges related to using the privacy routing SDK.
00:05:31.314 - 00:06:08.750, Speaker A: So this is the primary document you'll be looking at to gain an understanding of what we mean by privacy routing. So you can check out this diagram and below that we have the steps to essentially, basically install the SDK into your basically JavaScript code. And it gives you a little bit of information about the token supported and the types of EVM transactions that you'll be using and calling in order to implement what we call privacy routing.
00:06:08.750 - 00:06:41.466, Speaker A: So let me step back a little bit and just walk you through the concept of privacy routing. So essentially the Fendora Utxl blockchain has the bulk of the confidential transfer features right now. So what we've implemented here is the ability to allow Fendora EVM DApp developers to basically deploy their DApp on Fendora and then essentially route their transaction through their Fendora EVM transaction through the Fendora UTXO layer.
00:06:41.466 - 00:07:19.706, Speaker A: And when you route your EVM transaction through the Fendora UTXO layer, this privacy routing SDK will essentially anonymize that transfer. And what exactly do I mean by that? Essentially the process is this if I initiate an initial transfer from Fendora EVM, I can send that transaction to a Fendura UTXO anonymous wallet. This is a random anonymous wallet that will be created via the SDK to give you an anonymous wallet on the Fendora UTXO side.
00:07:19.706 - 00:07:49.810, Speaker A: Then the SDK will create a second Fendora UTXO anonymous wallet, completely random, and you will send the FRA from the first anonymous wallet to the second anonymous wallet while in the Fendora UTXO blockchain. And by sending from one anonymous wallet to the second anonymous wallet, you kind of break the link between the sender and the final recipient. So this is where the transaction gets sort of the link broken and is arguably anonymized.
00:07:49.810 - 00:08:20.018, Speaker A: And then the final portion of the Fendora privacy routing process is once the FRA is in the second Fendora UTXO anonymous wallet. Now that it's been kind of anonymized, this wallet on the Fendora UTXO blockchain will send the token back across to the Fendora EVM using Prism transfer. And now the tokens will be with the final recipient on Fendora EVM.
00:08:20.018 - 00:09:06.700, Speaker A: So to summarize, basically what happened is a transaction started on Fendora EVM, it got routed through the Fendora Utixo layer where it became anonymized, where the link is broken on who the sender was, and then finally it gets routed back to the Fendora EVM wallet once again. So now the recipient doesn't know who originally sent the tokens from which Fendora EVM wallet sent the tokens. So that in a nutshell is the concepts and the overall flow behind the Fendora privacy routing flow and the associated SDK that allows you as a developer to use this process.
00:09:06.700 - 00:09:22.000, Speaker A: So that's it for the privacy routing SDK. The other major challenge that we have at the hackathon is related to using the Zkdid SDK. So let me walk you through that a little bit.
00:09:22.000 - 00:09:52.890, Speaker A: So the Zkdid usage is a little bit more complex because there's a lot of components and stakeholders. So first you should go back to the module section and read through the important concepts to understand when building or using a decentralized ID system with credentials, understand who the key stakeholders are. Basically a Credential issuer, the did holder and the Verifier.
00:09:52.890 - 00:10:32.600, Speaker A: The Verifier is typically a DApp that wants to verify some private information about the users that's using their app, right? For example, Ave might want to verify a did holder's Credential talking about their real life credit score, because Ave probably wants to give a lower interest rate to did holders who have high credit scores in real life, right, because they're good credit risks. So this document walks you through the overall architecture and again the key flows that have to be built by each of the key stakeholders. So for example, the Credential issuer needs to do these things.
00:10:32.600 - 00:10:49.510, Speaker A: The Credential issuer also needs to do the secondary flow as well. And then finally, this is the flow for the Verifier and what they have to do. So read through the key sort of abstract material to understand decentralized Identifiers and credentials.
00:10:49.510 - 00:11:04.734, Speaker A: And then once you're done with that, you can move on to the Zkdid SDK. And essentially here in the developer section, we'll walk you through the installation of the SDK. Here's the API reference for the SDK.
00:11:04.734 - 00:11:27.962, Speaker A: So these are all the functions that you can call within the Zkdid SDK. And very importantly, because again, it's kind of complex, decentralized Identifiers, the stakeholders and the various process flows. We've given you example code that you can sort of model and use to understand what the functions do and what the flows look like.
00:11:27.962 - 00:12:00.734, Speaker A: So there's three examples in here, they go from sort of simple to hard just to walk you through the key concepts. When you are building flows for did and credentials, one important piece is obviously creating and assigning the DIDs. The second piece is creating credentials, for example, a Credential for your GPA that might be assigned and given to you by your university.
00:12:00.734 - 00:12:18.086, Speaker A: A Credential from Equifax that gives you your real life credit score. So the second portion is being issued credentials from these trusted parties. And then the next piece is creating proofs from the credentials.
00:12:18.086 - 00:12:43.234, Speaker A: So at the end of the process, the Verifiers accept proofs as input to verify information about you. So in the process you have to create a proof that proves data that you have in your Credential. So to create a proof, you use your Credential as an input along with something we call a circuit as well.
00:12:43.234 - 00:13:07.094, Speaker A: So when creating zero knowledge proofs, there's cryptography involved that allows you to prove information that's in your Credential in a zero knowledge manner. For example, you can prove that in your proof that your credit score is above 700, but not reveal the actual number. For example, maybe my credit score is 767, but I don't reveal the actual number.
00:13:07.094 - 00:13:21.754, Speaker A: I just prove with my proof that it's above 700. And so that's where these circuits come in. These circuits apply cryptography so that you can create proofs that reveal your private information in the zero knowledge manner.
00:13:21.754 - 00:14:11.022, Speaker A: So that's why you need these circuits as well, and to understand the concept of these circuits and to call the APIs to create these proofs that require both the Credential and the circuit as inputs to create your proofs. So that in a nutshell is sort of the process for the various flows and the APIs you need to call to essentially create a Zkdid and Credential management process. Obviously in the hackathon you don't need to do all three, you can focus on a particular niche, pretend you're a Verifier that's built a DApp that's sort of like Ave, that's a DeFi lender and you just want to verify the did holders credit score, but obviously you're not limited to that.
00:14:11.022 - 00:14:39.140, Speaker A: Feel free to build anything that you have an interest and passion for. And with that, that's it for this hopefully brief introduction on the key documentation, how to use it, and then the two key SDKs that you'll need to read about and learn if you want to participate in the hackathon challenges that Fendor has presented at the ETH Global hackathon. So, with that, good luck and thank you very much.
