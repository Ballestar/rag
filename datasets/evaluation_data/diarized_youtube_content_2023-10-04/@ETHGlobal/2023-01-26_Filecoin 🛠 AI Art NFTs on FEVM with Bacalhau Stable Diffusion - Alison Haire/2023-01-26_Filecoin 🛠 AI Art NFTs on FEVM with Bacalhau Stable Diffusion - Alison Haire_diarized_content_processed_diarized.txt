00:00:06.730 - 00:00:40.200, Speaker A: Hi everyone, I'm Krie and with the East Global team we have Ali here from Filecoin. She is going to give us a talk on SCM and Balacow. Please tell me if I'm totally butchering the pronunciation of that, but it's on Bridging. Compute over state and compute over data. So I'm super excited for this. This is going to be something like I specifically signed up to host this because I was really curious on learning about this stuff myself. So very excited for this talk.
00:00:40.200 - 00:01:07.220, Speaker A: We'll open it up for maybe like the last five minutes for questions. So feel free to raise your hand and come off mute at the end once that is time. Or if you just want to drop your questions in the chat just so you don't forget them. Feel free to do that throughout the talk and then at the last five minutes we'll be able to answer those questions and yeah, without further ado, Ali, feel free to take oh and come off.
00:01:10.630 - 00:01:17.318, Speaker B: I'll be on mute. Thanks very much. Cree. And actually, fun fact, I think it's been almost a year to the day.
00:01:17.404 - 00:01:23.574, Speaker C: Since my first ETH Global presentation with you guys. So pretty, pretty cool that I'm back.
00:01:23.612 - 00:01:25.574, Speaker B: Here after a year and doing so.
00:01:25.612 - 00:01:28.262, Speaker C: Many amazing events with so with you guys.
00:01:28.316 - 00:01:30.006, Speaker B: So big thanks to you guys for.
00:01:30.028 - 00:01:31.260, Speaker C: Hosting me here today.
00:01:31.710 - 00:01:39.754, Speaker B: And okay, for those that may not know me as well, I'm Ali, I'm a Developer relations engineer so I get the absolute privilege of working on my.
00:01:39.792 - 00:01:46.602, Speaker C: Passion and helping enable others to build out their ideas and supporting developers like all you amazing folks on your own journeys.
00:01:46.666 - 00:01:51.214, Speaker B: And I love hackathons because it's really an amazing way to harness the power.
00:01:51.252 - 00:01:53.394, Speaker C: Of community and innovation and it really.
00:01:53.432 - 00:01:55.266, Speaker B: Captures the spirit of why I got.
00:01:55.288 - 00:01:57.426, Speaker C: Into tech in the first place, which.
00:01:57.448 - 00:02:00.462, Speaker B: Is the impact that innovation and innovative.
00:02:00.526 - 00:02:02.420, Speaker C: Science and tech can have.
00:02:03.750 - 00:02:29.194, Speaker B: So what are we doing today? Firstly, I want to do a quick project demo and have a rundown of the tech stack. I'll tell you about Bacchal. What? Well, Bacoyau, it's not a Portuguese fish. Well, it is, but it's also compute over data. I'm going to run through the code with you, so I'm going to make sure you know every bit of function that interacts here and then I'm going to talk a little bit about the.
00:02:29.232 - 00:02:33.440, Speaker C: Possibilities and future for FBM and Bacliau together.
00:02:34.930 - 00:03:05.894, Speaker B: So first things first, FBM and Bacaliao, what is Bacaliao? We all know data and information is everywhere. It helps me get up to my favorite song in the morning. It remembers my meetings for me, thankfully, and it even helps me reword my blogs. Thanks, Chat. GPT. I'd also literally be lost going anywhere outside my old suburb without maps data. So, needless to say, data access and storage is really a critical part of today's society and it's also why it's essential we take a minute and think.
00:03:05.932 - 00:03:07.766, Speaker C: About what happens with our data, how.
00:03:07.788 - 00:03:10.342, Speaker B: It'S stored, who it belongs to and.
00:03:10.396 - 00:03:11.506, Speaker C: What is done with it.
00:03:11.548 - 00:03:15.686, Speaker B: And for those of you familiar with the Filecoin ecosystem, you'd already be aware.
00:03:15.718 - 00:03:25.054, Speaker C: That this is a fundamental mission we're working on, which is building the tech to enable open, scalable and distributed data systems, the base infrastructure that we need.
00:03:25.092 - 00:03:28.686, Speaker B: For a really open Web. So that means that not only is.
00:03:28.708 - 00:03:40.142, Speaker C: It essential that we create a distributed storage and retrieval network that enables that data sovereignty and that provides those innate blockchain qualities like censorship, resistance and trustlessness.
00:03:40.206 - 00:03:45.726, Speaker B: Which we're doing with Filecoin. It also means and we're also providing.
00:03:45.758 - 00:03:48.818, Speaker C: A content verification layer system with IPFS.
00:03:48.914 - 00:03:53.414, Speaker B: But it also means enabling computation of data in a way that aligns with.
00:03:53.452 - 00:03:58.460, Speaker C: This Open Web mission which is where both FBM and Bacquiao fit in.
00:04:00.110 - 00:04:22.254, Speaker B: So this is a great little diagram that maybe shows you how these things interact. So storage is really only the start and we can think of the storage layer as the layer zero while the ability to storage and retrieval layer I should say while the ability to perform that on chain computation which is super exciting right now, or that computation over.
00:04:22.292 - 00:04:28.922, Speaker C: State with FBM brings layer one capabilities to the Barcoin stack.
00:04:28.986 - 00:04:38.290, Speaker B: So Baccliau then builds on this by bringing the additional capability for off chain verifiable compute loads on large data sets.
00:04:38.370 - 00:04:39.906, Speaker C: To the filecoin network.
00:04:40.018 - 00:04:52.966, Speaker B: So this makes for some really powerful tools enabling new and innovative applications to arise. So just to reiterate, FBM enables computation over state for Filecoin, so it brings.
00:04:52.998 - 00:04:57.770, Speaker C: Programmable applications and logic to the Filecoin chain, which I love, and in itself.
00:04:57.840 - 00:04:59.814, Speaker B: Is pretty awesome because it really helps.
00:04:59.862 - 00:05:02.830, Speaker C: Enable some more user friendly developer opportunities.
00:05:03.410 - 00:05:06.474, Speaker B: As well as enabling all sorts of use cases.
00:05:06.522 - 00:05:08.910, Speaker C: So both those already available in other.
00:05:09.060 - 00:05:15.806, Speaker B: Ones in the ethereum ecosystem, for example, or in the broader Web Three community and also some that are really unique.
00:05:15.838 - 00:05:26.810, Speaker C: To the Farcoin ecosystem. So such as the opportunity for data markets and Dows and programmable storage automation, which is really not a feature of other blockchains.
00:05:26.910 - 00:05:29.862, Speaker B: So one thing that blockchain technology really.
00:05:29.916 - 00:05:33.186, Speaker C: Doesn'T do inherently well though is data processing.
00:05:33.298 - 00:05:34.806, Speaker B: And this is just a factor of.
00:05:34.828 - 00:05:42.810, Speaker C: The cost of computing over a distributed system that needs consensus to provide other powerful properties like trustlessness and censorship resistance.
00:05:43.390 - 00:05:49.674, Speaker B: So data processing and making sense of that data in a way that we can verify is really essential for not.
00:05:49.712 - 00:05:53.098, Speaker C: Just like business profitability or competitive advantage.
00:05:53.194 - 00:05:58.766, Speaker B: But also to solve some increasingly complex human challenges and as well as just.
00:05:58.788 - 00:06:05.970, Speaker C: Make our everyday lives a little easier or a little more fact based. And yes, I'm looking at you fake news pandemic.
00:06:06.550 - 00:06:19.526, Speaker B: Anyway, this is where Baffleyo can help. So Baffleyao enables off chain computation over data without giving up the decentralization or verification values inherent to IPF Filecoin and.
00:06:19.548 - 00:06:22.360, Speaker C: The broader Web Three community in general.
00:06:24.810 - 00:06:37.210, Speaker B: So FDM and Baclil make up the computation side of Filecoin, FDM offers that computation over state or on chain computation and Backlier provides you with the compute over data or any data.
00:06:37.280 - 00:06:39.642, Speaker C: And that includes big data with support.
00:06:39.696 - 00:06:48.670, Speaker B: For GPUs as well. And in the not too distant future, we're working on this cool little project called Frog, which will enable you to.
00:06:48.740 - 00:06:52.750, Speaker C: Leverage Backalau by calling it in your smart contract.
00:06:53.250 - 00:06:55.154, Speaker B: So that will be a big win.
00:06:55.192 - 00:06:56.974, Speaker C: For developer experience and users.
00:06:57.022 - 00:06:59.742, Speaker B: And if you're interested, keep an eye on Project Frog.
00:06:59.806 - 00:07:05.842, Speaker C: This is a POC in progress right now. As I said, if we think about.
00:07:05.896 - 00:07:12.134, Speaker B: Some of the data stored on the File point ecosystem, it also really gives an even better picture of just how.
00:07:12.172 - 00:07:14.694, Speaker C: Essential it is that this data is.
00:07:14.732 - 00:07:17.334, Speaker B: Open and accessible and that we're able.
00:07:17.372 - 00:07:20.380, Speaker C: To make use of this data in some collaborative ways.
00:07:21.070 - 00:07:24.182, Speaker B: So these technologies that I've just spoken.
00:07:24.246 - 00:07:31.134, Speaker C: About will also enable more applications in the decentralized science and decentralized data fields as well.
00:07:31.172 - 00:07:33.662, Speaker B: So things like collaborating on climate data.
00:07:33.716 - 00:07:53.118, Speaker C: Action or sharing academic research, even creating an open education library which is happening now from our Filecoin foundation for the decentralized web team. By the way. Check them out. Awesome bunch of people doing some amazing things. All of this requires off chain compute methods.
00:07:53.294 - 00:07:56.094, Speaker B: So these are just a few examples.
00:07:56.142 - 00:08:00.790, Speaker C: Of some of the things that would require that just to get your brains thinking.
00:08:00.940 - 00:08:21.558, Speaker B: So what exactly is Bacquia? How does the tech stack work? I'm not going to linger on this too long. I know you're here to see how to AI generate an NFT. I'm going to get to that, I promise. But firstly, just how does bathlia work? So it was originally conceived to bring these useful compute resources to data stored.
00:08:21.574 - 00:08:23.850, Speaker C: On the IPFS and Filecoin network.
00:08:24.010 - 00:08:27.598, Speaker B: So again, we really wanted to make sure we were bringing the same benefits.
00:08:27.684 - 00:08:30.510, Speaker C: Of open collaboration on data sets to.
00:08:30.580 - 00:08:33.182, Speaker B: Generic computer and really aiming to help.
00:08:33.236 - 00:08:35.938, Speaker C: Democratize the future of data processing there.
00:08:36.024 - 00:08:37.266, Speaker B: If you want to dig deep on.
00:08:37.288 - 00:08:45.746, Speaker C: This, I recommend this video by our lead David Aronchek, if you want to hear more. He was also a founding member of.
00:08:45.848 - 00:08:48.662, Speaker B: Kubernetes, so he's dealt with containerization before.
00:08:48.716 - 00:08:51.400, Speaker C: He understands how these data systems work.
00:08:52.490 - 00:08:59.702, Speaker B: So Bacliau is a peer to peer network of nodes that enables users to run docker containers or WebAssembly images or.
00:08:59.756 - 00:09:03.270, Speaker C: Adds tasks against data that is stored in IPFF.
00:09:03.430 - 00:09:06.218, Speaker B: And this provides that platform for public.
00:09:06.304 - 00:09:12.974, Speaker C: And transparent and optionally verifiable computation as well, which is known as compute over Data.
00:09:13.172 - 00:09:21.390, Speaker B: Cod. Which fun fact is cod? Cod. This is a fun fact. This is where Bacquiao's name come from.
00:09:21.460 - 00:09:27.326, Speaker C: Bacchiao is Portuguese for cod. So there you go. That's how it gets its name anyway.
00:09:27.428 - 00:09:33.378, Speaker B: Each so the Bacchiao network has a requester and a compute component and to interact with the cluster the back of.
00:09:33.384 - 00:09:36.182, Speaker C: Your CLE request, or in my example.
00:09:36.316 - 00:09:40.482, Speaker B: A HTP request sent to a node in the cluster.
00:09:40.546 - 00:09:43.846, Speaker C: This is via JSON or http It.
00:09:43.868 - 00:09:46.834, Speaker B: Then broadcasts these messages over the transport.
00:09:46.882 - 00:09:48.434, Speaker C: Layer to other nodes in the cluster.
00:09:48.482 - 00:09:52.314, Speaker B: So all other nodes in the network are connected to the transport layer and.
00:09:52.352 - 00:09:54.474, Speaker C: Have a shared view of the world.
00:09:54.672 - 00:10:03.938, Speaker B: So this means that when a job is submitted, I can get my words out today to Bacqueau, it is forwarded to a Baccalau cluster node which acts.
00:10:03.974 - 00:10:05.610, Speaker C: As the requester node.
00:10:05.770 - 00:10:11.546, Speaker B: So the requester node broadcasts the job to all the other nodes in the peer to peer network who can bid.
00:10:11.578 - 00:10:14.366, Speaker C: On the job, creating a job deal market.
00:10:14.468 - 00:10:16.626, Speaker B: So these are some similar systems to.
00:10:16.648 - 00:10:19.858, Speaker C: What you might see in IPFS or Barcoin already as well.
00:10:20.024 - 00:10:21.746, Speaker B: So depending on the flags given to.
00:10:21.768 - 00:10:24.194, Speaker C: This requester node, these can include things.
00:10:24.232 - 00:10:43.226, Speaker B: Like concurrency or confidence, minimum bids before acceptance, reputation, locality, lots and lots more, even IPFS CIDs. Depending on these flags, the requester node accepts one or more matching job bids and the accepted bids are then executed by the relevant compute nodes using the.
00:10:43.248 - 00:10:56.014, Speaker C: Storage providers that executor node has mapped in, for example, the docker executor and IPFS storage volume. So it's a really flexible way of doing compute over data.
00:10:56.132 - 00:11:06.798, Speaker B: So once the job is complete, a verification will be generated which you've accepted leads to the raw results folder being published to the compute node. So our default compute node at the.
00:11:06.804 - 00:11:11.858, Speaker C: Moment is estuary tech for those of you that may be familiar with that as well.
00:11:11.944 - 00:11:26.354, Speaker B: So there's a lot more flexibility to this process. But the main thing to understand is that back of the gives you the ability to execute a job where the data is already hosted across a decentralized network of servers that store data, enabling.
00:11:26.402 - 00:11:28.514, Speaker C: You to kind of save time, save.
00:11:28.572 - 00:11:30.918, Speaker B: Money and operational overheads.
00:11:31.094 - 00:11:44.990, Speaker C: Because trying to run like a GPU processor, for example, in the cloud can get quite costly as well as annoying to set up. And it allows for referenceable and reproducible jobs that are easy to manage and maintain.
00:11:47.170 - 00:12:17.126, Speaker B: Obviously had an animation on that one that I forgot about. So let's get on with the project. I've gone ahead and made what's kind of a little bit of a trivial but super fun example of how Bacquio and FBM can work together. I'm hoping by the end of this though, I can leave you with some cool ideas for what's possible. And also NFTs have so many great use cases and combining them with computation processes over data could really help bring your projects to life as well. So there's all sorts of things you.
00:12:17.148 - 00:12:23.034, Speaker C: Can do with music, voxel NFTs, token gating to animated and dynamic NFTs like.
00:12:23.072 - 00:12:36.202, Speaker B: All sorts of things. So anyway, let's take a sneak peek of what our final example looks like. So this is my project architecture. I'm just building a front end on next JS and TypeScript. I'm using for the NFT contract.
00:12:36.266 - 00:12:41.150, Speaker C: An open, Zeppelin modified, OpenZeppelin, solidity contract.
00:12:41.570 - 00:12:50.210, Speaker B: I'm using a backyard text to image Stable Diffusion Script, which I'll get into, but it's all open source and you can do it yourself or use ours.
00:12:50.630 - 00:12:54.622, Speaker C: And I'm using NFT storage for the metadata storage.
00:12:54.766 - 00:12:57.042, Speaker B: And then I'm deploying to the Hyperspace.
00:12:57.106 - 00:13:04.258, Speaker C: Testnet using Hard Hat and I will deploy this front end app to Fleek.
00:13:04.354 - 00:13:06.022, Speaker B: I didn't quite get around to doing.
00:13:06.076 - 00:13:20.990, Speaker C: That, but Fleek is like versel, it's a CI CD deployer. And if you're deploying your front end apps, I'd really recommend trying to do it with something like Fleek or Steron who are using IPFS and filecoin under the hood rather than web two text.
00:13:21.140 - 00:13:38.814, Speaker B: So let's take a look. Has anyone got a prompt I can put in here to give my little text to image thing? What NFT should we create here? This is the actual application. This is connected to a contract. So if no one has any ideas.
00:13:38.862 - 00:13:46.210, Speaker C: I'm just going to write Rainbow unicorn in here again in space maybe. Let's try that out.
00:13:46.360 - 00:13:55.846, Speaker B: So basically what's happening here is I'm entering my text prop prompt. When I go to generate the image, this is calling backliau and running a.
00:13:55.868 - 00:13:58.150, Speaker C: Stable Diffusion script in the background.
00:13:58.890 - 00:14:05.110, Speaker B: Once that comes back, I'll get a preview of the image. So it'll come back as a CID.
00:14:05.190 - 00:14:15.520, Speaker C: Backlier will return, as I said before, this kind of folder, which will include things like the exit code, the output standard error. It comes back as a CID, though.
00:14:16.130 - 00:14:17.806, Speaker B: And then as part of that, the.
00:14:17.828 - 00:14:26.654, Speaker C: Outputs will include an image. So something like this, for example, this is an old one, it'll come back with something like this and then I'll.
00:14:26.702 - 00:14:30.082, Speaker B: Go ahead and mint the NFT after that happens.
00:14:30.136 - 00:14:42.198, Speaker C: Now, this does take a few minutes. This isn't an instantaneous API running in the cloud. Like this is legitimately running right now on our baffl servers and this job is going through.
00:14:42.364 - 00:14:45.206, Speaker B: So I'll just take a couple of minutes. And while it does that, I just.
00:14:45.228 - 00:14:49.722, Speaker C: Want to show you how I made this contract as well.
00:14:49.776 - 00:14:51.946, Speaker B: So as I said before, this is.
00:14:51.968 - 00:14:58.170, Speaker C: A contract based off Open Zeppelin ERC 721, which you can use from anywhere.
00:14:58.510 - 00:15:01.190, Speaker B: So the Mint function on this contract.
00:15:01.270 - 00:15:41.754, Speaker C: Takes an IPFS CID, which would be the NFT metadata. So that includes the name, the description and image and other properties that you want to put in there for that image or other type of what am I looking for? Mind bulb. So this Mint function needs those three things name, description and image. Sorry, the metadata function needs those three things. So this is a basic contract, though. Once I call this function to mint an NFT on, in this case the FDM Hyperspace Network, I am emitting an event as well.
00:15:41.792 - 00:15:43.626, Speaker B: So every time if I'm signed up.
00:15:43.648 - 00:15:49.942, Speaker C: From my front end to listen for events on this contract, I will get an omission of this event.
00:15:50.016 - 00:15:52.634, Speaker B: Now I'm also saving some ownership details.
00:15:52.682 - 00:16:00.606, Speaker C: Here, so I'm mapping the address of the owner to the ERC 21 721.
00:16:00.708 - 00:16:03.700, Speaker B: That they mint it's a bit early here. Sorry guys.
00:16:04.310 - 00:16:08.340, Speaker C: And yeah, that will be emitted on the blockchain as well.
00:16:08.950 - 00:16:15.346, Speaker B: So to deploy this, I'm using hard hat. And when I first started doing this.
00:16:15.368 - 00:16:24.198, Speaker C: Contract, I was actually working on the wallaby test set and then obviously Hyperspace became live so I had to switch over to that.
00:16:24.284 - 00:16:26.840, Speaker B: So there was a few fun little.
00:16:27.210 - 00:16:31.014, Speaker C: Figuring out how this worked and what things were going on there.
00:16:31.052 - 00:16:33.642, Speaker B: But at the end of the day, I got this working and it's really.
00:16:33.696 - 00:16:37.194, Speaker C: Kind of just a normal Hard Hat script which is really cool.
00:16:37.312 - 00:16:39.498, Speaker B: The only difference here is that a.
00:16:39.504 - 00:17:27.530, Speaker C: Lot of the time you'll use, providers get sign up from efforts and if you don't know what this is, you can always deploy on Remix, don't worry. But I just wanted to run through some of the maybe bugs that I came across that might help you guys as well. So when I was deploying on Hard Hat, I found I needed to provide the wallet so the signer explicitly rather than try and grab that off the provider itself. So I didn't do provider signer, I had to explicitly name this for this contract to work and I could have a quick look at that if I go down here. I've got my hard hat config here. Nothing too special about that. Just has the Hyperspace RBC, the chain ID and the accounts and then the deploy Bafia script.
00:17:27.530 - 00:17:40.126, Speaker C: Really pretty normal to any other script apart from explicitly calling out what this wallet is and I can go ahead and deploy it by running. If you can see this, I've got.
00:17:40.148 - 00:17:41.278, Speaker B: So many things open.
00:17:41.364 - 00:17:59.382, Speaker C: Oh my gosh. Just this middle one here, I can run it NPM hardax run and run the script that's here and that will deploy it to the FBM Hyperspace network which is pretty cool. I'm not going to do another deployment, I've already deployed one.
00:17:59.516 - 00:18:01.846, Speaker B: Oh so great. If we have a look back here.
00:18:01.868 - 00:18:07.800, Speaker C: It looks like our NFT job from Baffleya has come back with an output as well.
00:18:08.810 - 00:18:18.006, Speaker B: So how cool is this? What a pretty unicorn. It's actually only got one horn as well, so it's really funny. I was doing this demo and I.
00:18:18.028 - 00:18:19.606, Speaker C: Was typing in Rainbow Unicorn a few.
00:18:19.628 - 00:18:20.926, Speaker B: Times and every time it would come.
00:18:20.948 - 00:18:26.826, Speaker C: Back with this unicorn that had two horns. So like a duo corn. Really weird.
00:18:26.858 - 00:18:33.786, Speaker B: But anyway, we've got a one horned rainbow unicorn in space now so I could go ahead and mint that NFT.
00:18:33.898 - 00:18:35.102, Speaker C: If I want to as well.
00:18:35.156 - 00:18:36.706, Speaker B: And that will call that contract that.
00:18:36.728 - 00:19:29.246, Speaker C: I was just showing you before. Obviously I would need a connected wallet for that. So you can have a look at the FBM docs if you're not sure how to connect up your MetaMask. I've got this connected to the FBM hyperspace network though and I'm just going to confirm that I do want to mint that NFT and that will go ahead and send firstly, before it does send to the contract, though, it does actually save to NFT storage. So I'll come back to this script and how it works in a second. So firstly I'll store this metadata with NFT Storage. And the cool thing about this, and what will be awesome when FBM goes to Mainnet as well, is that NFT Storage actually can return some of your so once you save this metadata to NFT Storage.
00:19:29.246 - 00:20:17.162, Speaker C: And here's, like the really easy package you can use to do that, the JavaScript package to do that. It's also got an optional status property. So if you have a look at the NFT Storage docs and I think I have them open here, it's got this status here which can return the IPFS pinning where it's pinned to and also the filecoin deals that have been made for this piece of content. So that's really cool and it'd be great to kind of integrate that in the future. Obviously that's on mainnet and this is on a testnet, so they're not going to interact together. But I'm saving this NFT to NFT storage first. I've just gone ahead and minted the NFT.
00:20:17.162 - 00:20:28.270, Speaker C: All I do for that is called the contract. If you haven't seen that before, there's lots of resources out there about how you'll connect that or you can have a look at the GitHub as well. So let's see how we're going with the minting.
00:20:28.350 - 00:20:37.334, Speaker B: Just going to go back there. Looks like I've minted this on two FBM already. I've obviously got sorry, I rushed my front end code and I've got a few bugs here.
00:20:37.372 - 00:21:05.458, Speaker C: So this says starboard benches contracts undefined. This is one of the block explorers that you can use for hyperspace. This is meant to have the contract address on it. I can probably just have a look and see what's happening here and I'm pretty sure this is my contract, actually. I recognize the numbers from playing around with it. So you can see that there's been 1234 transactions. And if I went and had a look at this, I've also got four NFTs on here.
00:21:05.544 - 00:21:15.366, Speaker B: So that's the NFT demo pretty cool. You can put anything in here as well if you wanted to. For some reason it's not showing the.
00:21:15.388 - 00:21:24.600, Speaker C: NFTs that are on my wallet, but if I swap over, I think it should work. Got a listener in there, but yeah.
00:21:25.050 - 00:21:39.322, Speaker B: How's that? Auto generated AI NFT art. That's all there is to it, apart from the underlying magic that is. Brought to you by Bacquio. So I'm just going to go back.
00:21:39.376 - 00:21:44.320, Speaker C: A couple of slides and show you what is happening with that one as well.
00:21:45.250 - 00:21:49.994, Speaker B: So underlying this, what's returning these results.
00:21:50.042 - 00:21:53.386, Speaker C: Is basically a TensorFlow script written on Python.
00:21:53.498 - 00:21:53.866, Speaker B: Whoops.
00:21:53.898 - 00:22:22.860, Speaker C: Wrong one. My bad. If you want to see get a really in depth view of how you'll go about building this, dockerizing it and then putting it on the bacchia network, I do have a video out on that. So you go and go ahead and have a look at that if you want to get more into depth on that. But otherwise it's also in our examples. So you can go to our bakiao examples docs and there'll be a whole page right up on how to do this yourself, too.
00:22:23.710 - 00:22:30.514, Speaker B: Anyway, this is the basic script, though. So it basically uses Keras TensorFlow implementation.
00:22:30.582 - 00:23:03.720, Speaker C: Of stable diffusion, which is the ML model that generates images from a given text string, and it finally just displays the image generated. This basically basic Python script or returns the image generated, I should say. The ML weights are pre calculated in the library as well, so there's no need to do that. But there's lots of scope for you to kind of do some tweaking around with this group or run it with different implementations. Or if you're like data science or AI inclined, I'm sure you've got lots of ideas of things you could do there.
00:23:04.570 - 00:23:05.958, Speaker B: Now, in order to run this in.
00:23:05.964 - 00:23:28.730, Speaker C: My front end, I'm using a bafia http endpoint now, these are still a work in progress, so this was the first one that has been done just for this demo. So this rest API for bacchia, like I said, still work in progress, but you can call this stable diffusion one already. Now, under the hood, this triggers the back of your job, which contains that Python stable.
