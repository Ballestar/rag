00:00:22.040 - 00:00:22.284, Speaker A: All right.
00:00:22.322 - 00:00:28.664, Speaker B: Hello everybody. Welcome to Uma workshop uma and across building. Optimistic DAOs with OSNAP.
00:00:28.664 - 00:00:36.830, Speaker B: We have joining us today John Shut, who will be taking us through the session. And with that, I'll pass it over to John to introduce himself and get this session started.
00:00:38.560 - 00:00:40.440, Speaker A: Hey, everybody, thanks for joining.
00:00:40.600 - 00:01:02.600, Speaker C: So I'm going to focus today on a new product that came out from Uma that we're pretty excited about called OSNAP. And we'll just run through some slides that kind of explain how Uma works, how OSNAP works. Then we'll go through the process of actually deploying OSNAP with a safe and a snapshot space and show how you can do easy optimistic execution without having a multi SIG in the loop.
00:01:02.600 - 00:01:18.300, Speaker C: And we'll have some time for questions at the end, too. All right, so using OSNAP to actually decentralize your Dao, a lot of DAOs are not particularly decentralized. They are reliant on a multi SIG to actually execute the will of the voters on snapshot.
00:01:18.300 - 00:01:30.530, Speaker C: They also aren't particularly autonomous or organized, so we're working on that. Uma is an optimistic oracle. So if you're familiar with optimistic roll ups, it's kind of a similar idea.
00:01:30.530 - 00:01:50.680, Speaker C: The way that Uma works is that you assert some truth about the world. Like the temperature was below 70 as a high in Las Vegas today, and anybody can dispute that within a challenge window. And it basically works as a decentralized truth machine following a shelling point mechanism that has pretty strong economic security.
00:01:50.680 - 00:02:10.280, Speaker C: And it's really flexible too. It can handle any kind of real world cross chain off chain kind of calculation type question. So a common misconception based on how Oracles are used in DeFi is that Oracles are just for relaying price data onto a blockchain, which is really limited.
00:02:10.280 - 00:02:21.472, Speaker C: I think most Oracle protocols would disagree with this characterization of what Oracles are about, but that's what most people think about. But really, an Oracle is a truth machine. You can record any kind of truth about the world.
00:02:21.472 - 00:02:40.016, Speaker C: We talked about weather, but it could be about real world events. It could be a price, or it could be, did this governance proposal pass? And that's what this is going to be about. So optimistic Oracles are about enforcing correctness after a dispute.
00:02:40.016 - 00:02:51.464, Speaker C: So normally proposals are correct. If you make a proposal of this is the truth, you have to post a bond with that, which you're going to lose if you're disputed and you turn out to be incorrect. So 99.9%
00:02:51.464 - 00:03:10.828, Speaker C: of proposals are correct right out of the gate, and you just have to wait for that challenge window. So that's different from a price feed style Oracle that you might be more familiar with, where you have a network of nodes that are paid to try to determine in advance what the answer is and then push that answer on chain, and then you can use that. It gives you recourse.
00:03:10.828 - 00:03:21.572, Speaker C: Dispute functions are kind of an undo. It has a computable cost to actually manipulate it. And it's really flexible because Uma doesn't have to anticipate in advance what your questions are going to be.
00:03:21.572 - 00:03:48.856, Speaker C: As long as they're human readable, as long as they're comprehensible, as long as there is a clear correct answer, you can ask that question to the Oracle. So what goes into it? You have a requester asking for some data or asserting some data, in some cases a proposer that's saying, here's what the data is. And you have a disputer network that's watching and wants to try to take bonds from people that are making bad proposals, so they have a financial incentive to watch closely.
00:03:48.856 - 00:04:14.950, Speaker C: You have a dispute resolution process, which is basically a vote from the, uma, token holders, which we'll get into in a bit, a documented methodology of truth, so that those token holders, when they're trying to determine what the correct answer is, they have some guidelines that you might have set in advance of, like, here's how you calculate this. If it's some kind of complex calculation, and you have economic guarantees that give you an upper bound of the cost to manipulate the system.
00:04:16.440 - 00:04:20.020, Speaker A: So we're pretty flexible.
00:04:20.100 - 00:04:38.060, Speaker C: We've done a whole lot of integrations. You can ask stuff like did the sports team win for prediction markets that's live? You can build DeFi insurance things, asking if a protocol was hacked. There's no data source you could go to that you need to have something like an optimistic Oracle nexus actually works in a similar way too.
00:04:38.060 - 00:04:46.816, Speaker C: You could build an entire protocol, like across this cross chain bridge. That's kind of our sister protocol, which is also hiring, by the way. We have the hiring slide at the end.
00:04:46.816 - 00:05:13.144, Speaker C: And they're asking, was this bundle of relayer refunds calculated correctly? Did they do all of the relays correctly? Did they do fees correctly? So it's this very bot driven kind of machine driven system there. You could do success. Tokens shapeshift, did some on chain VC fundraising in an incentive aligned way where the VCs get paid out if the token price goes above a certain point at the expiration date of March 1, 2024.
00:05:13.144 - 00:05:27.230, Speaker C: And it's not like they're getting a discount in advance that they still make a profit if the token doesn't do too well. And then another example is just sort of like TVL KPI options. You could reward very specific things for your dao, which is kind of cool.
00:05:27.230 - 00:05:39.676, Speaker C: So, yeah, just kind of like an outline of things highlighted optimistic governance, because this is what this is going to be about. So this is kind of a typical flow. You have a forum discussion, you have a snapshot vote.
00:05:39.676 - 00:05:56.592, Speaker C: Snapshot votes are not actually binding in most cases, you can't really execute them. You do a snapshot vote and then the multisig that is actually running things decides whether or not they want to enforce that snapshot vote. And even if they do want to enforce it, they have to go around and collect signatures.
00:05:56.592 - 00:06:07.300, Speaker C: Even though the Dow has theoretically made its decision, you have to chase down a bunch of signers. They have to make sure the transactions are correct, and then it runs through the multisig. So it's not very efficient.
00:06:07.300 - 00:06:21.368, Speaker C: Sometimes the multi SIG signers decide they don't want to enforce the governance vote if it goes against their personal interest. That's happened a few times. But even in the normal case where they do want to do what the Dow says, it's really inefficient and annoying.
00:06:21.368 - 00:06:33.884, Speaker C: It's not fun to be a multisig signer. So OSNAP in this, your Dao is basically replacing the multi SIG. Anyone can initiate a transaction.
00:06:33.884 - 00:06:47.296, Speaker C: Everyone can dispute the transaction. The truth is economically incentivized, like all the other things running through uma, and you can set it up really quickly, just in an afternoon, basically. And we'll walk through a setup process, which is not an afternoon.
00:06:47.296 - 00:06:53.524, Speaker C: It's going to be like a couple of minutes. This is a basic flow. You deploy this module.
00:06:53.524 - 00:07:03.260, Speaker C: You're going to attach it to your safe. You set some basic parameters which will show, and you create a Snapshot proposal with some transactions attached. If it passes, you can execute them.
00:07:03.260 - 00:07:13.500, Speaker C: If it doesn't pass, it gets disputed. There's going to be a vote to settle the bonds between the proposer and the disputer. But if it was a valid proposal, you don't have to wait for the result of that vote.
00:07:13.500 - 00:07:22.972, Speaker C: You can just repropose again so it doesn't slow you down. And it's kind of built for tools that a lot of people are already using. You're using safes.
00:07:22.972 - 00:07:37.876, Speaker C: You're using Snapshot, this cool symbol in the middle, this is the Zodiac framework for adding modules to a safe. There's a lot of other cool Zodiac modules. You should definitely check that out if you're building a Dow, because the Dao toolkit is getting way more sophisticated now.
00:07:37.876 - 00:07:46.890, Speaker C: It's not just about multi sigs. And safes are not just about multi sigs. Safes are a whole operating system for building organizations, is the way I think about them.
00:07:48.780 - 00:07:50.750, Speaker A: All right, so getting it set up.
00:07:51.120 - 00:07:58.732, Speaker C: Let's actually jump out of the slide deck and we'll set one up. How do I escape this?
00:07:58.786 - 00:07:59.340, Speaker A: Okay.
00:07:59.490 - 00:08:03.496, Speaker C: All right, so we got a Safe. It's a test safe. It's a one of one multisig.
00:08:03.496 - 00:08:11.404, Speaker C: Not super secure, but good for demo purposes. So you just want to go to apps here. And I do see questions coming in the chat.
00:08:11.404 - 00:08:21.190, Speaker C: I'll answer them at the end. And you want to go and search for Zodiac? If it lets me type it.
00:08:21.880 - 00:08:22.950, Speaker A: There we go.
00:08:24.360 - 00:08:31.816, Speaker C: So you want to add this app if you don't have it already. In this case, it's a demo space that we use a lot. So it's already added in there.
00:08:31.816 - 00:08:45.660, Speaker C: See a whole bunch of modules and modifiers here. The one that we're interested in is the, Uma OSNAP module. And this is designed to allow you to execute successful snapshot proposals on chain.
00:08:45.660 - 00:08:56.156, Speaker C: And we'll set some basics here. We'll say like 0.1 WETH as a demo space, you get some warnings if you set parameters that look kind of unsafe.
00:08:56.156 - 00:09:04.284, Speaker C: So it's saying a minimum bond of one is recommended liveness. If you set this low, it's going to warn you about that. Liveness is the challenge window.
00:09:04.284 - 00:09:29.316, Speaker C: So if you get a bad proposal that comes through and you set this to 48 hours, you basically have two days that anybody can come in and dispute that bad proposal. And that might be somebody from your Dow, it might be somebody that would be a multisig signer traditionally and is paying attention to these things. It could be third parties because we have a really robust kind of party disputer network that's watching for proposals primarily from prediction markets because they're very high volume.
00:09:29.316 - 00:09:33.820, Speaker C: We settle a lot of markets every day. So people are watching to check and.
00:09:33.970 - 00:09:36.636, Speaker A: They are actively disputing and these are.
00:09:36.658 - 00:09:46.396, Speaker C: Very easy ones to dispute. You just go and see if a snapshot vote passed or not. Did the transactions match or not, if not dispute.
00:09:46.396 - 00:10:00.820, Speaker C: So I would actually expect these to get disputed within ten minutes or less. But it's good to set a long liveness just for security purposes, which is why we have these warnings. You would enter your snapshot space URL.
00:10:00.820 - 00:10:23.544, Speaker C: You would set some quorum and voting period rules and these are basically getting added to your written rules. This string here is your rules that are going on chain that Uma is going to use to interpret whether or not something passed. You might set a quorum of like 100 and a voting period on snapshot of, let's say it's like three days.
00:10:23.544 - 00:10:40.000, Speaker C: And then if you have a snapshot admin that goes rogue and they create a vote and the voting period is 1 minute and the quorum is one and they vote to give themselves all the money that'll contradict this rules parameter on chain. So then they'll propose that and that'll still get disputed. It doesn't matter that it technically passed on snapshot.
00:10:40.000 - 00:10:57.864, Speaker C: A human can look at these rules. They can clearly see that this didn't meet the minimum quorum, minimum voting period and dispute that it's invalid even though it passed on snapshot, which kind of shows the flexibility of an optimistic Oracle type system that you're able to apply that human reasonableness to it.
00:10:58.062 - 00:11:01.064, Speaker A: So at this point we would go.
00:11:01.182 - 00:11:04.552, Speaker C: And try to move this zoom stuff.
00:11:04.606 - 00:11:11.070, Speaker A: Out of the way and add the module got all these zoom little thumbnail things.
00:11:11.600 - 00:11:19.390, Speaker C: So we would go and just attach this to our safe here. And because gas fees are kind of high, we're probably not going to actually do this.
00:11:20.560 - 00:11:23.872, Speaker A: Yeah, we'll just reject that because we.
00:11:23.926 - 00:11:26.112, Speaker C: Already have one that we can use.
00:11:26.246 - 00:11:28.208, Speaker A: So we'll just kind of cancel and.
00:11:28.214 - 00:11:45.120, Speaker C: Exit out of that and we'll just use one of our existing things. So going over to our snapshot space, if we did deploy it, adding it to your space is really simple. You just go to Settings, and then if you scroll all the way down to the bottom of your snapshot space settings, you can add a plugin.
00:11:45.120 - 00:11:56.516, Speaker C: You would look for Gnosis Safe Snap, which is already added here. And then you just add your network address. And where it says, uma, address, you would add the address of the module that you just deployed.
00:11:56.516 - 00:12:11.390, Speaker C: Or in this case, we have a module that's already deployed and added to this snapshot space. And this is going to be tied to our safe back here. So that is this one here, I think, actually, which is going to execute the result of this proposal that we're about to create.
00:12:11.390 - 00:12:20.128, Speaker C: So that's all set up. You can see it actually only takes a couple of minutes. Once it is set up, nobody else has to really think about it.
00:12:20.128 - 00:12:28.484, Speaker C: It's really easy to create a proposal and just start using this as a user. And it's all like point and click. What you see is what you get.
00:12:28.484 - 00:12:39.000, Speaker C: Type interfaces you don't have to know how to code. And we'll just kind of walk through creating a basic transaction, create a basic transaction.
00:12:41.260 - 00:12:43.672, Speaker A: Do some stuff.
00:12:43.806 - 00:13:04.672, Speaker C: Please vote yes. And you can use any kind of voting scheme again, because what you're checking on, uma's, side is just, did this vote pass? It doesn't matter how potentially complex your snapshot space strategy is or what kind of voting system you're using. You're able to just look and see as a human being.
00:13:04.672 - 00:13:07.840, Speaker C: Did this pass or not? But we'll do basic voting for against.
00:13:07.910 - 00:13:12.704, Speaker A: Abstain, and we will do something once.
00:13:12.742 - 00:13:28.354, Speaker C: I get Zoom out of the way again. Okay, so we're going to set this to settle and sorry, zoom is like the bane of my existence.
00:13:28.402 - 00:13:29.980, Speaker A: How do I get this thing out of the way?
00:13:41.040 - 00:13:43.304, Speaker C: Okay, I hid the floating meeting controls.
00:13:43.352 - 00:13:45.260, Speaker A: So this should go more smoothly now.
00:13:45.410 - 00:13:59.692, Speaker C: All right, so we're going to have a really short voting period because we basically want to vote on this and then pass it and execute it within the confines of this demo. So let's add a transaction. We're just going to transfer some ETH.
00:13:59.692 - 00:14:10.230, Speaker C: It's really easy to do kind of common transactions. You can do contract interactions. You can do any transaction just like raw transactions that you composed in some way.
00:14:10.230 - 00:14:12.356, Speaker C: But we'll just transfer some funds to.
00:14:12.378 - 00:14:18.196, Speaker A: Ourself here, do a small amount of.
00:14:18.218 - 00:14:24.532, Speaker C: ETH on Gurley, and then we could add more transactions if we want to, and it'll execute this whole bundle as a batch.
00:14:24.596 - 00:14:32.670, Speaker A: But we'll just do one as an example sign to create that going to vote for it.
00:14:33.360 - 00:14:36.510, Speaker C: I like this proposal that sends some money to myself.
00:14:40.430 - 00:14:42.160, Speaker A: Great, vote is in.
00:14:42.530 - 00:14:44.366, Speaker C: And we just have to wait a.
00:14:44.388 - 00:15:01.576, Speaker A: Minute until we are able to execute this, we have 1 minute left for the voting period. Do all right, I think that we.
00:15:01.598 - 00:15:03.304, Speaker C: Might be able to execute this now.
00:15:03.342 - 00:15:06.330, Speaker A: Let's see or propose it.
00:15:07.340 - 00:15:15.612, Speaker C: All right, so this little thing here is where OSNAP is doing its thing. Everything else is normal. If you have your snapshot space set up, it's all going to look the same.
00:15:15.612 - 00:15:29.356, Speaker C: Except now there's going to be a little button here you can click to request proposal execution. And this is just where you double check. Did this actually pass? Because you might have some complex kind of voting system to determine whether or not something passed.
00:15:29.356 - 00:15:36.976, Speaker C: You might have different quorum rules. You might have yada, yada yada. So just to double check sanity check it, and then you can request execution.
00:15:37.168 - 00:15:38.644, Speaker A: And this is going to actually make.
00:15:38.682 - 00:15:51.304, Speaker C: The on chain proposal with that transaction and say, hey, this is a valid proposal. Please execute this on chain. And you'll have a challenge window where anybody can come in and dispute that.
00:15:51.422 - 00:15:54.456, Speaker A: For instance, if people voted no, this.
00:15:54.478 - 00:16:08.380, Speaker C: Would not be a valid proposal and the person would lose their bond, which because this is a demo, the bond is zero. But in real life, it would probably be like it might be like 1500 USDC. It might be one WETH something like that.
00:16:08.380 - 00:16:22.604, Speaker C: Something that's going to hurt a little bit if you get it wrong, because that's your incentive as a disputer to go and dispute bad proposals. And so this is, uma's, Oracle interface. All of our Oracle requests go to the same interface.
00:16:22.604 - 00:16:41.960, Speaker C: They kind of go to the same alerting system. So you kind of have A network effect there where this is going in with A dozen Prediction market settlement requests. Like all of the insurance protocol things, the people that have bots that are monitoring for bad requests, they are going to see Every proposal that comes through from your Dow and it'll be Very.
00:16:42.030 - 00:16:43.976, Speaker A: Easy for them to spot A bad one.
00:16:44.158 - 00:16:52.664, Speaker C: You have a liveness period here about a minute left to dispute this. If this is wrong, we're not going to dispute it. But if we wanted to, we could do it from here.
00:16:52.664 - 00:17:12.800, Speaker C: You could even potentially have bots that do this. If you have like a bot that's smart enough to know whether or not a snapshot vote passed, then you can race and beat all of the other disputers and collect that disputer reward, which is basically half the proposer's bond. Now we just wait around for 40 seconds.
00:17:12.800 - 00:17:25.332, Speaker C: Some more stuff in the Oracle interface, which is nice. You can see in the explanation this is kind of cool. This is like an IPFS CID for the specific snapshot vote that this is tied to.
00:17:25.332 - 00:17:29.050, Speaker C: So this vote right here has a specific.
00:17:30.860 - 00:17:37.576, Speaker A: Kind of IPFS identifier which includes all the details about it.
00:17:37.758 - 00:17:49.896, Speaker C: And that's going to be the same one that is referenced here. And there's like some slow load times to pull it up, but it's basically going to be like a JSON file with all the details. It'll show the transactions, it'll show the description, et cetera.
00:17:49.896 - 00:17:58.476, Speaker C: And that's how you can tie what's being proposed here to a specific snapshot vote. And if you don't see one, I mean, that's an easy rejection. That means it's not tied to a vote.
00:17:58.476 - 00:18:05.964, Speaker C: It's a bad proposal. It probably didn't come through the Snapshot interface at all. And that's just IPFS loading.
00:18:05.964 - 00:18:13.344, Speaker C: Yeah, if you have a better IPFS node that would load faster. So this is done now. So what this means is this was not disputed.
00:18:13.344 - 00:18:18.104, Speaker C: This was a good proposal. The Dao did vote yes on it.
00:18:18.222 - 00:18:31.574, Speaker A: So we can go back here. This time has passed, let's refresh and we can execute. Can see most of the time is.
00:18:31.612 - 00:18:33.720, Speaker C: Actually just waiting for Gurley to do stuff.
00:18:34.730 - 00:18:35.894, Speaker A: Going to execute here.
00:18:35.932 - 00:18:44.934, Speaker C: This is another on chain thing. Anybody can execute. You could have a bot that automatically executes once you see that this has passed.
00:18:44.934 - 00:18:56.494, Speaker C: So you might not even be manually doing this, but at this point, it's not up to a multi SIG signer. Like anybody can do it because the Dow did approve it. It's been verified through, uma Nobody disputed it.
00:18:56.494 - 00:19:11.746, Speaker C: And by the way, if it does get disputed and it was a valid proposal, you can just repropose. You don't have to wait for the Uma voting period to determine what the outcome was. That voting is basically just going to settle the bonds between the proposer and the disputer.
00:19:11.746 - 00:19:16.806, Speaker C: It's not going to affect this flow and it's not going to slow you down because that voting period does take.
00:19:16.828 - 00:19:17.800, Speaker A: A couple of days.
00:19:19.450 - 00:19:21.110, Speaker C: So that is executing.
00:19:21.690 - 00:19:24.226, Speaker A: It's going to transfer a tiny bit of ETH.
00:19:24.338 - 00:19:33.834, Speaker C: All transactions have been executed. Anybody coming back to this vote can see that we're done here. We did what we wanted to do, and if we go back here, we should be able to see in the.
00:19:33.872 - 00:19:40.880, Speaker A: Internal transactions that got some ETH. So that's what we were out here to do.
00:19:41.490 - 00:19:43.280, Speaker C: So that's pretty much it.
00:19:43.730 - 00:19:47.200, Speaker A: I'll skip ahead to some extras here.
00:19:48.290 - 00:19:57.742, Speaker C: All right, so this is audited. We audit everything at Uma fully integrated with snapshot and Zodiac safe. You can set it up on all these different chains, really beginner friendly.
00:19:57.742 - 00:20:05.506, Speaker C: You don't have to code to deploy it or to use it. You don't have to use the command line to deploy it or use it. I just walk through the whole flow.
00:20:05.506 - 00:20:14.246, Speaker C: It only takes a couple of minutes. It's exactly the same when you're setting it up for your own space. And the human readable rules means that you actually understand what it's doing.
00:20:14.246 - 00:20:44.642, Speaker C: You don't have to wonder about this code and just sort of like, trust that the coders got this right. You can read the rules of your Dow and it's really easy to participate so moving beyond you might have thought to yourself if you can write the rules that say oh, enforce snapshot votes, could you write other rules as well? Like you're not allowed to transfer any more than this amount in a given day or this person is allowed to transfer that amount over the next month because that's their budget. Yes you can.
00:20:44.642 - 00:20:55.682, Speaker C: So you can write down any rules. The optimistic oracle can enforce them. We're just trying to create something that is really easy to set up, that's using tools that people are already using and kind of filling that niche.
00:20:55.682 - 00:21:14.250, Speaker C: But once you have this deployed, we are really interested in seeing more experimentation that you could add additional rules to your OSNAP module and enforce them on chain. So this is kind of our most advanced and generalized form of contracting on chain. Like smart contracts that are written like contracts that are human readable.
00:21:16.270 - 00:21:17.834, Speaker A: All right, talent and culture.
00:21:17.882 - 00:21:23.760, Speaker C: Seriously. This is the recruiting slide. We are recruiting at UMO, we're also recruiting at across.
00:21:23.760 - 00:21:27.238, Speaker C: Look at all of these friendly people. Look at this neon.
00:21:27.354 - 00:21:28.580, Speaker A: Great place to work.
00:21:30.390 - 00:21:51.430, Speaker C: Yeah, so go here also if you are not looking for a job. We do have recruiting bonuses that are paid out on chain using KPI options where depending on how your referral moves through the process, you'll get a greater lesser payout for your referral fee, which is kind of a cool on chain incentive if you have any referrals.
00:21:52.750 - 00:21:54.220, Speaker A: So I think that's it.
00:21:54.830 - 00:21:59.750, Speaker C: Check out the docs docs, umaproject.org, developersnap.
00:21:59.830 - 00:22:03.580, Speaker A: You can DM me and I think.
00:22:04.270 - 00:22:13.486, Speaker C: That is all and we are good for questions. Let me pull up the chat. Does my contract only receive the value after the dispute window is over? Yes.
00:22:13.486 - 00:22:36.802, Speaker C: So you have to wait for the challenge window and you probably would want to set that at a reasonably long one to protect whatever assets your safe has or admin controls that your safe potentially has. A lot of people have safes that basically have governance rights over other smart contracts. So you want to set a reasonably long dispute window to make sure that bad proposals do get caught.
00:22:36.802 - 00:22:54.902, Speaker C: Like if somebody's making a proposal on Christmas or something because they think people are going to be offline, you might want to have a few days or at least a full day for people and alerting systems too, which we could talk about offline. How does Snap integrate with a smart contract? It just plugs into a safe. It's just a module.
00:22:54.902 - 00:23:07.586, Speaker C: Once you deploy the module that is attached to your safe, whatever your safe can do, you can do through OSNAP now and you're just proposing transactions that you would ordinarily send to your safe via a multi SIG or whatever else.
00:23:07.688 - 00:23:09.620, Speaker A: And OSNAP will execute it.
00:23:09.990 - 00:23:21.646, Speaker C: There will be no execution. No, if it passed on snapshot, you're good. So you could have like, let's say if it gets a majority approval, it's valid.
00:23:21.646 - 00:23:28.370, Speaker C: Then you could have 49% vote no and that's okay. That passed. There won't be execution.
00:23:28.370 - 00:23:44.966, Speaker C: You basically would need to repropose if somebody disputed it on chain. But if they're disputing on chain, what they're saying is it didn't pass on snapshot. And if the disputer is wrong about that, they're just kind of like annoyed because they voted no and they don't like this, they're going to lose their disputer bond, which is going to be the same size as the proposer's bond.
00:23:44.966 - 00:23:52.766, Speaker C: So that's why you don't get spurious disputes too. Like the disputer has money at stake that they're going to lose if they're wrong about the facts here, which is.
00:23:52.788 - 00:23:59.144, Speaker A: That it did pass on snapshot. And we have a few more minutes.
00:23:59.182 - 00:24:00.552, Speaker C: If anybody wants to ask any live.
00:24:00.606 - 00:24:03.000, Speaker A: Questions or drop questions in the chat.
00:24:08.710 - 00:24:12.180, Speaker D: Hi, John. I would like to make a question.
00:24:15.430 - 00:24:16.420, Speaker A: Yes, please.
00:24:18.790 - 00:24:40.714, Speaker D: I already used chainlink and I was seeing if I could integrate Uma in my contract, but I failed to find any example how to integrate with my contract. You said it's just a safe. It's a very easy set up.
00:24:40.714 - 00:24:56.900, Speaker D: So I think that's why I couldn't find anything in your documentation. But maybe if you could show me a path where I could at least see how it is done, it would be of great help.
00:24:57.830 - 00:24:58.434, Speaker A: Sure.
00:24:58.552 - 00:25:02.514, Speaker C: What are you using chainlink for right now? Because it probably depends on your use.
00:25:02.552 - 00:25:06.190, Speaker D: Case, how you would I'm just retrieving one value that's.
