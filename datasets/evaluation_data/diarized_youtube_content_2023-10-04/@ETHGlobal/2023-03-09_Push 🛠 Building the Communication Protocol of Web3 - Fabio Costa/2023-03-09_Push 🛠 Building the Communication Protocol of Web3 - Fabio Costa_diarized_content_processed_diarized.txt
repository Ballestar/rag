00:00:07.370 - 00:00:49.674, Speaker A: Hello everyone. Today we're going to be talking about EPNS, what problem EPNS is solving. And by the end of the video we're going to be doing some demos showing you how you can integrate EPNS into your protocol, into your hackathon project, or into your service. So as of today, there is no way for protocols to reach out to users through their wallet address. We rely on Twitter or Discord or Telegram to notify users about something that has happened. And if we think about it, that's not how we are used to do in our day to day life. For example, if I'm waiting for a very important email, I know that I'll get a notification whenever I receive this email.
00:00:49.674 - 00:01:27.240, Speaker A: I don't need to go to keep constantly going to my email provider and refreshing the page. See, if I have a new email, I'm going to get alerted whenever there is a new email or whenever I'm expecting any deposits into my bank account. I don't need to go to my bank account. I keep constantly monitoring or checking the balance on my account. I know that I'm going to receive a notification whenever someone has made a deposit. So for the user experience perspective, it's much better. The users get notified about information they care, they care and they can focus on doing other things instead of constantly checking about the particular information.
00:01:27.240 - 00:02:19.926, Speaker A: On Webtree, we still don't have something like this. And what will be the notifications? For example, in webtree space, it can be, for example, a governance proposal. Whenever there is a new proposal, it would be nice for users to get notified in their wallet addresses instead of the users having to constantly be checking, Discord or Twitter about a new proposal. This definitely would increase community engagements and participation into proposals for DeFi. It would be nice for users to receive notifications before they are liquidated. This definitely would save a lot of users funds and for a user experience as well. It's a better experience for the user in general to actually get notified whenever they're about to lose their funds for ENS.
00:02:19.926 - 00:03:12.620, Speaker A: For example, in the Uns case, it will be nice for users to receive a notification seven days before they are about to lose their ENS domain. And just to reiterate notifications, they can be both based on on chain events, but they also can be based on off chain events. For example, if you have a newsletter and you want to send a newsletter to your user's wallet address, you can totally do this. The way on the demo, we're going to show you guys how to do this. But just to reiterate, the notifications don't need to be necessarily on on chain events, but they can be also based on off chain events and in this case, on the user letter. You're going to be sending a notification to the users about your newsletter, to your user's wallet address. And once the user clicks on the notification, the user is going to get redirected to your newsletter page.
00:03:12.620 - 00:04:08.650, Speaker A: So the solution that APNS is building, we're building an open communication layer. So we're working on nodes that community we will eventually be able to run the nodes and they're going to get incentivized by running them. And any community member will be able to run the nodes and any community member or any person can query those nodes and fetch the information and actually verify the notifications have not been tampered with the notifications. They are dynamic. So what, you send notifications completely up to the protocol to decide the notifications. They can be a video, they can be an image, they can be pretty much anything. There is no limitation in what the notifications can be and most importantly, there is no limitations on how you're going to notify your users.
00:04:08.650 - 00:05:05.326, Speaker A: If you want to notify your users based on onchain events you can or off chain event you can, how often you're going to notify your users, there is also no problem. It's all up to the protocol decide how they want to interact with their users. The solution is also multi chain. Even though our name is Ethereum push notification service, it's because we started on Ethereum, but we're going to be across all EVM chains and also non EVM chains sending notifications and receiving notifications, they are gasless. So if you want to receive a notification, all you have to do is to sign a message to show that you are interested in receiving notifications for that particular channel. For example, in the Ave channel, you can just sign a message saying, okay, I want to receive notifications for the Ave channel for my liquidation alerts. As an end user, you pay nothing and also sending notifications.
00:05:05.326 - 00:05:33.258, Speaker A: If you send notifications on the DAP or using the SDKs, they're completely gasless. Only the on chain notifications. If you want to send notifications using your smart contract, you have to pay gas. Besides that, everything's gasless and it's platform agnostic delivery. You can receive notifications anywhere. For example, we provide like a mobile application. We have our own DAP, we have a browser extension you completely free to receive to see the notifications there.
00:05:33.258 - 00:06:30.246, Speaker A: But we also and we encourage protocols to use we have SDKs, so we definitely encourage protocols, user SDKs to receive notifications right on your DAP. For example, the users never need to leave your DAP to receive notifications or more importantly, the users never need to leave your DAP to opt in to receive the notifications. All of this covered on our demo that we're going to do on the SDK. So long story short, the user never needs to leave your DAP to opt in to receive notifications and also never need to relieve your DAP to receive the notifications. We also recently announced something called SNS module for push delivery nodes. So this allows you to add logic in a way like to the notifications. So for example, our push delivery nodes, they're going to be calling one of your webhooks whenever there is a new notification.
00:06:30.246 - 00:07:20.390, Speaker A: And based on the notification, you can react. For example, you can build a telegram bot, you can build a WhatsApp bot. You can build pretty much anything. You can display your own push notifications into your mobile application. If you already have a mobile application, you can just react to the events that the push delivery nodes are going to call your API, you take this notification and you can send push notifications to your already existing mobile application if you want. This is called SNS module for push delivery nodes and we have a very extensive documentation for all those ways of receiving notifications into Docs DNS IO developers. So, as I said before, there are multiple ways how you're going to notify your users is up to the protocol.
00:07:20.390 - 00:08:18.770, Speaker A: So for example, I give an example for Dows. Whenever there is a new proposal liquidation alerts, whenever there is a new farming, users can start providing liquidity into the liquidity pools NFTs. For example, whenever someone places a bid into your NFT, it will be nice to get alerted by this event. Or if you're playing a gaming, you get notified into your wallet address whenever there is a new community event so you can participate into your gaming community. Those are some, we call them Friends or VNS. So those are the protocols that definitely helped us to shape the notifications and make the protocol completely agnostic and most importantly, flexible on how we notify the users and what we notify the users. So we can definitely see each use case for those we call Friends of VPNs into our blog.
00:08:18.770 - 00:09:07.818, Speaker A: So for each protocol we provide an article explain how they are using the notifications to engage with the community or to notify users. So definitely head over to the PNS blog to reach out on how they are using notifications into their protocols. We also were very active in hackathons, so we always have hackathon bounties. We have a Push Grants program have $1 million. If you're building a protocol project and you want to get funded to keep working to this protocol into your project, please feel free to apply for grants program. It's completely open and transparent so anyone can see and participate into the push grants program. So, a little bit how the protocol works under the HUD.
00:09:07.818 - 00:10:02.002, Speaker A: So first of all, we have on the left here we have the EPNS core contract. So the EPNS contract resides on Ethereum and it's responsible for the channel creation, for governance, channel state changes, and as well as all the incentives mechanism. And just to make sure, this contract here, it lives on Ethereum. We have the EPNS communication contracts and those contracts, they are completely multi chain, they live on EVM chains and also non EVM chains. And those are the contracts whenever you want to send a non chain notification. Wherever your smart contract is deployed, you're going to be calling the EPNS communicator contract deployed on that specific chain that your smart contract is deployed. Here in the middle, we have the push nodes.
00:10:02.002 - 00:10:37.410, Speaker A: So the push nodes, they are responsible for validating all the notifications, the events. They do validation to see if the notification is actually correct. This is following the standard, and if it is, the push it delivery knows they're going to dispatch the notifications to the end users. So the end users are going to receive the notifications tied to their wallet addresses. So that's pretty much it. Those are the socials that you can reach out to us. We're going to be doing some demos now and showing you guys how you can integrate into EPNS with your own protocol.
00:10:37.410 - 00:11:13.410, Speaker A: And now let's do some demos. First of all, we'll see how to create a channel on push protocol. Previously EPNS. We'll learn how to send notifications manually using the DAP smart contract, the SDK in your backend, or using a scaffold solution called Showrunners. We'll also see how to customize notifications with content markdown images and videos. We'll finish by doing a demo on how to integrate notifications each in your own DAP. And also we'll be receiving notifications for Web two five platforms.
00:11:13.410 - 00:11:47.520, Speaker A: And now let's create a channel on EPNS. One analogy that I like to make is think about the YouTube channel. So whenever you create a channel, users, they can subscribe to your channel and they are going to get notified whenever you upload a new video. EPNS channels work the same way. You're going to create a channel and users, they can opt into your channel to receive notifications. So to create a channel on the testnet, you go to staging EPNS IO. You click here on the left menu here on the Create channel.
00:11:47.520 - 00:12:29.026, Speaker A: So on my wallet here, I already have ETH, and I claim that the free die here, but if you need die or ETH, just click on this button. Then you're going to be redirected to the corresponding Faucet. So, yeah, I already have if today. So just click on next. Yeah, let's create a channel name. So it's going to be demo tutorial, creating demo tutorial. Channel descriptions are going to be creating a channel channel website URL.
00:12:29.026 - 00:12:52.260, Speaker A: That's the URL about your protocol, about your website. So in our case, we can do Youtube.com. Let's click on next. So we need to upload an image. So I have an image here set. So I'm going to upload this sword here. Let's crop the image and let's create the channel.
00:12:52.260 - 00:14:13.732, Speaker A: So we're going to need to do two transactions. The first transaction is to approve the die, and the second transaction is to create the channel. Once the channel is created, I'm just going to copy the address here. I'm going to go to my other browser, and what I'm going to do, I'm going to simulating another user here opting to the channel that I just created to receive the notifications. So I'm going to hear on the search, I'm going to search for the newly created channel, which is this one. I'm going to opt in to receive the notifications. So all I have to do is to sign a message.
00:14:13.732 - 00:14:43.468, Speaker A: So opt in and opt out to receive notifications. They are completely gasless, so non transactions fees involved. So since here, the browser on the right has already opting to receive notifications to the channel that I created, so all I have to do now is to send the notifications. So I come here. I click on send notifications. Here on the left there are three types of notifications. So I can send broadcast notification, which means I'm going to send notification to all subscribers to my channel.
00:14:43.468 - 00:15:22.092, Speaker A: I can send a targeted notification, which means that I'm going to send notification to a particular wallet address that is subscribed to my channel. Or I can send a subset notification, which is I can send notification to an array of wallet addresses. In this case, I'm just going to send a broadcast notifications. I'm going to create a title. Here is hello there notification message can be hi, yeah, we have here in the bottom the preview of notification. So let's set notification. So just have to sign a message.
00:15:22.092 - 00:15:54.870, Speaker A: Send notification is also guessless. Just sign a message and the notification has been sent. So if I come here on the right, click on the inbox. Notification should be here as it is. And also on this browser here, I have installed the VPNs browser extension. So if I come here, I see also the notification here. Now let's see how you can send notifications from your smart contract with Push Protocol.
00:15:54.870 - 00:16:26.990, Speaker A: First head over to push. For hackers repo, go to Send Notifications folder. On this folder, there are multiple examples on different ways on how you can send notifications. You can send notifications using the SDKs subgraphs. You can send manual notifications. You can send notifications using the Rscafold solution called Showrunners. And in this case, for this demo, we're going to be sending notifications using smart contracts.
00:16:26.990 - 00:17:01.530, Speaker A: So let's go over this folder. Let's go for this demo, copy the content of this token modifier contract. So let's copy the content of this contract and let's explain what this contract is doing. So I'm going to call this contract push. Sol. Let me copy here. So what this contract is doing is we're importing the ERC 20 token contract form open Zeppelin.
00:17:01.530 - 00:17:50.646, Speaker A: We're defining the interface here for the communicator contract, which is the contract we're going to be calling. And we're going to be calling the Send notification function to actually send the notifications. We're defining here the Push contract. The Push contract is an ERC 20 token which has a constructor. And upon deployment, we're going to be maintaining 1000 tokens to the deployer of this contract. We have here a public address that we call it Epnscom Address. This address is going to depend on the chain your contract is deployed for this demo we're going to be deploying our contract into Coven so let's get the corresponding address, the correct address for the communicator contract in Coven.
00:17:50.646 - 00:19:07.990, Speaker A: So let's go to Push documentation, docs Push we have the Communicator address deployed on multiple chains but in our case we are interested in the Covent Chain. So let's go over here and let's copy this contract address here. Let me paste it here so I have the correct address here the Push contract we are overriding the transfer function from the ERC 20 and what this function is doing is we're calling the internal transfer function here and after the transfer is done, we're going to be calling the Communicator contract the send notification function here. First we're going to be sending notification from this contract address here which I have selected here. So for this, let's get the correct address for the channel that we have previously created. So I have a channel here that I have already created so let's copy the channel address. Let's head over to the contract and let's change this address here with the correct address from our contract.
00:19:07.990 - 00:20:25.150, Speaker A: The tick is the recipient of the notification and here is the notification itself. If you go over to Docs Push, we go over for each property here and we explain how you can prepare and set your notification payload. I just want to point out on this example we are sending a target notification and the notification content notification body is going to have this content here, but please for more information go to docs push here below. There are just two helper functions that we have created just to prepare the notification so notification appears good for the recipient. Let's compile our contract so press command s the contract was successfully compiled so now let's deploy the contract I have selected here injected provider MetaMask we're indeed on the Coval network. Let me select the correct contract, in this case the Push sole contract. Let's deploy the contract.
00:20:25.150 - 00:22:27.420, Speaker A: Let me confirm the transaction was successfully deployed so let's get the contract address so the contract address was deployed on this address here. So after contract deployment, we just need one more step which is head over to your channel, your channel that you're going to be sending notifications from click Add Delegate. Now you're going to set as delegate the contract that you have just deployed. Click on Add Delegate. Just confirm the transaction. We have successfully add a new delegate so before sending the notification, Lenny opting to receive the notifications. So we're going to be sending the notification to this wallet here but this wallet is not opting to the channel so let's opt into the channel.
00:22:27.420 - 00:23:18.010, Speaker A: So first let me copy the contract address which is here. Let's head over to the other browser. Let me search here for this contract let me opt in to receive notifications from this hello channel sign a message I have successfully opting to the channel perfect. So let me copy this contract at this wallet address here let's go back to remix let's expand our deployed contract and let's call the transfer function which is this function here. So let's spank here so let's send to this address here the.
