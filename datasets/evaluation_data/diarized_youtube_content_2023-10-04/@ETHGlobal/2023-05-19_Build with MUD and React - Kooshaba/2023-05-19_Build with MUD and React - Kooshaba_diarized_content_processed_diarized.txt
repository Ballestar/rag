00:00:07.530 - 00:00:17.920, Speaker A: Hello, everyone, and welcome to the Lattice Workshop build with Mud and React. Joining us today is Kushaba who will be taking us through this session. And with that, I'll pass it over to Kushaba to get the session started.
00:00:19.250 - 00:00:22.698, Speaker B: All right. Short and sweet, dope. I'm Kushaba.
00:00:22.698 - 00:00:34.550, Speaker B: I work at Lattice. I'm contributor but also mainly a game developer at Lattice, working at our internal game studio on internal projects. My brother is here with me today, Kushaza.
00:00:34.550 - 00:00:43.980, Speaker B: He's going to be facilitating and collecting questions in chat. He's just going to let me know if there's some burning question, but I can't be looking. I'm just going to be doing a live demo today.
00:00:43.980 - 00:00:56.974, Speaker B: Since it is a live demo, please bear with me. I am actually going to be for real coding this. I'm going to try not to cheat and look at the final product and just go through the experience of what using Mud is like for real.
00:00:56.974 - 00:01:14.420, Speaker B: Also, I'm going to be focusing on just very practical tips on just how to get shit done in React. I assume you know a little bit about React and I assume you know TypeScript. I assume you know a little bit about Mud, but I'm going to be going through the fundamentals of Mud as I'm doing this.
00:01:14.420 - 00:01:21.526, Speaker B: The API is still in flux. We just released mud. Two, like today.
00:01:21.526 - 00:01:29.720, Speaker B: So please let us know if the API seems strange. There are some edge cases we haven't thought of. We are all stress testing together.
00:01:29.720 - 00:01:45.230, Speaker B: Let's get going. Today we're going to do the classic React to do list. This is probably not a great idea to put on chain, but it's a great example to show data modeling in Mud and have something a little bit more interactive.
00:01:46.130 - 00:01:48.400, Speaker C: I'm going to start sharing. Let's do it.
00:01:48.850 - 00:01:53.730, Speaker B: I can't share my screen. Can I get permission from someone? Rory.
00:02:07.410 - 00:02:07.966, Speaker D: There you go.
00:02:07.988 - 00:02:09.150, Speaker A: You should be able to now.
00:02:09.300 - 00:02:10.560, Speaker C: Okay, thank you.
00:02:11.650 - 00:02:17.460, Speaker B: And let me know if this size is good for everyone. I think I can bump this up a little bit.
00:02:19.670 - 00:02:20.114, Speaker D: All right.
00:02:20.152 - 00:02:26.914, Speaker B: So I made a starter kit here on GitHub. Feel free to clone it and try to follow along. I'm going to be going pretty fast.
00:02:26.914 - 00:02:46.394, Speaker B: I don't think you should expect to follow along, but I'll stick around afterwards for questions and we can try to get as far as we can together. And I even have some bonus things I want to add later on that I think are really cool, but they're probably not going to fit into the now 25 minutes that we have. So I've cloned the to do start.
00:02:46.394 - 00:02:54.362, Speaker B: What do we do first? We just run. PMPM Dev this is like the hot reloading. It's going to start your dev client.
00:02:54.362 - 00:03:04.654, Speaker B: It's going to compile your contracts, deploy your contracts. And you can just go to localhost 3000 and everything is hooked up. We have the Mud dev tool set up.
00:03:04.692 - 00:03:07.194, Speaker C: It's hooked up to the local chain.
00:03:07.242 - 00:03:08.622, Speaker B: You see the block number ticking.
00:03:08.686 - 00:03:10.340, Speaker D: We're good to go. Great.
00:03:11.510 - 00:03:21.606, Speaker B: I don't want this to become like a how to write CSS and react components tutorial. So I basically did all of that beforehand. I'm just going to blast those into the app.
00:03:21.606 - 00:03:36.998, Speaker B: We're going to be focusing on how to hook up chain data into your react app and make it interactive. So we want to make a to do list. What's the first thing you have to add to Dos? Right, let's go to how we are going to data model this to do structure.
00:03:36.998 - 00:03:54.580, Speaker B: And the first thing you do is you open up your Mud Config. If you went to Mud 101, it's like the brains of the entire application. It's a really easy way to go into a Mud app and just see, okay, what is going on? What am I dealing with here? First, let's make a to do.
00:03:56.150 - 00:03:59.282, Speaker E: Hey, Kushaba, could you zoom in on the Vs code a little bit?
00:03:59.416 - 00:04:00.242, Speaker B: Yes, I can.
00:04:00.296 - 00:04:01.186, Speaker C: Thank you.
00:04:01.368 - 00:04:02.500, Speaker B: How's that?
00:04:03.750 - 00:04:04.834, Speaker E: I think that's a lot better.
00:04:04.872 - 00:04:06.100, Speaker B: Chat looking good.
00:04:06.490 - 00:04:07.442, Speaker D: No, I forgot.
00:04:07.506 - 00:04:08.360, Speaker B: Thank you.
00:04:10.890 - 00:04:11.640, Speaker D: Cool.
00:04:12.090 - 00:04:20.022, Speaker B: So technically, there's a key in a table. I usually just use the default key. Default key is bytes 32.
00:04:20.022 - 00:04:27.754, Speaker B: Works for anything. You don't need composite keys with basic structures. Each to do is going to have an auto generated ID.
00:04:27.754 - 00:04:38.330, Speaker B: I'll show you how to auto generate that ID later. What is the Schema that to do? The basics of it is like, there's a body to the to do. So let's just do a body and make it a string.
00:04:38.410 - 00:04:40.654, Speaker D: Right. Cool.
00:04:40.772 - 00:04:50.420, Speaker B: Done. One little quirk of Mud dynamic fields need to go last in the Schema. So we're going to add one more field, which is like, whether or not it's done and that needs to go before the body.
00:04:51.590 - 00:04:52.340, Speaker D: Cool.
00:04:52.870 - 00:04:54.020, Speaker B: This is all.
00:04:56.390 - 00:04:57.686, Speaker E: Hey, Krishaba, sorry, but.
00:04:57.708 - 00:04:58.918, Speaker B: Could you actually just zoom in a.
00:04:58.924 - 00:05:00.600, Speaker E: Little more on both Vs code.
00:05:02.410 - 00:05:02.774, Speaker D: And.
00:05:02.812 - 00:05:06.120, Speaker E: The local host real quick? We got some other people saying it's too small.
00:05:06.890 - 00:05:14.134, Speaker B: I have a really big monitor. I apologize. Also, I am bragging.
00:05:14.182 - 00:05:17.820, Speaker C: Yeah, I have a huge monitor. I'm so very cool.
00:05:19.230 - 00:05:30.254, Speaker B: Okay, so we modified our mud config. Mud dev automatically redeployed our tables. It auto generated a table, and we can see in our DevTools that that.
00:05:30.292 - 00:05:33.802, Speaker C: Table was registered somewhere.
00:05:33.866 - 00:05:35.326, Speaker B: I can't see it because the zoom.
00:05:35.358 - 00:05:39.134, Speaker C: Thing is behind it, but okay, regardless.
00:05:39.182 - 00:05:52.818, Speaker B: It exists, trust me. So now we're going to make a system to interact with this table. Once again, I created the Scaffold beforehand for this system, but a system is just a contract that inherits from the system interface.
00:05:52.818 - 00:05:57.782, Speaker B: And we're going to just declare, I am going to turn off copilot for this.
00:05:57.836 - 00:05:59.782, Speaker C: You're probably going to be wrong copilot.
00:05:59.846 - 00:06:00.460, Speaker D: Okay.
00:06:01.390 - 00:06:26.370, Speaker B: So we're going to add one normal function, which is just add to do string memory body and make it public. As long as you make the function public, it'll be available in the client. Now, the first thing we need to do here is we need to actually get an ID to assign to this To Do because every row in our table needs an individual ID.
00:06:26.370 - 00:06:42.482, Speaker B: If you were paying close attention to the Mud config before, I had this unique entity module loaded. Quick background modules are just like little composable pieces of code that we have built into Mud. They're not like strictly necessary in every world which is why they're not auto loaded.
00:06:42.482 - 00:06:52.122, Speaker B: But they're very helpful in certain circumstances. In this case, unique entities will just generate. It basically stores a nonce and it'll generate incrementing IDs for you.
00:06:52.122 - 00:07:01.146, Speaker B: So you don't have to do that busy work yourself. So I had it loaded here, I imported it over here. So I'm going to be able to.
00:07:01.168 - 00:07:05.390, Speaker C: Say bytes 32 ID equals get unique entity.
00:07:09.620 - 00:07:10.368, Speaker D: Great.
00:07:10.534 - 00:07:14.844, Speaker B: Okay, so we have the ID. Now let's import that to do table.
00:07:14.892 - 00:07:19.204, Speaker C: That we created before. So let's import To Do and then.
00:07:19.242 - 00:07:25.888, Speaker B: Also it will auto generate a struct that is the same schema as the To Do that we created and that'll.
00:07:25.904 - 00:07:28.150, Speaker C: Be helpful when setting this data.
00:07:29.420 - 00:07:36.840, Speaker B: All the auto generated files live in a code gen folder. Just so you know. Hey, you probably should not touch these files.
00:07:37.340 - 00:07:39.530, Speaker C: That is pretty helpful for me.
00:07:42.800 - 00:07:50.928, Speaker B: Okay, and then let's do To Do sets. First argument is the ID. Second argument is the content of it.
00:07:51.094 - 00:07:52.370, Speaker C: Let's do this.
00:07:52.980 - 00:08:01.396, Speaker B: Body is body and done is false. Seeing as if you're putting the to do in brand new, you probably have.
00:08:01.418 - 00:08:02.950, Speaker C: Not done the to do yet.
00:08:04.120 - 00:08:10.280, Speaker B: Okay, once again, let's go back to Dev. Okay, it picked up our new system. It picked up our new function.
00:08:10.280 - 00:08:22.276, Speaker B: The local host should be up to date. Now let's get something on screen, make it look good. The entry point is app TSX.
00:08:22.276 - 00:08:31.416, Speaker B: This is like where I set up this little structure here. Like I said, I made these forms beforehand. So let's just add this form Blam.
00:08:31.416 - 00:08:40.256, Speaker B: We have just a basic react component that stores data and input and this plus sign does nothing right now.
00:08:40.358 - 00:08:41.410, Speaker D: Cool. Great.
00:08:44.420 - 00:08:57.460, Speaker B: The next step after you make a system function on chain is to actually link that system function up on the client. This is kind of a convenience thing. You could just use this World Send function manually.
00:08:57.460 - 00:09:15.964, Speaker B: WorldsEnd is this. It has types inside of it and it will know about all your system functions that you just created because it auto generates TypeScript definitions inside of World Send to match all of your contracts. But just for cleanliness, it's way easier to do.
00:09:15.964 - 00:09:19.464, Speaker B: Let's make a function here to wrap.
00:09:19.512 - 00:09:20.110, Speaker D: That.
00:09:22.400 - 00:09:33.344, Speaker B: Now world Send and To Do. And the next argument is an array of arguments to provide to the contract and we just want to put the.
00:09:33.382 - 00:09:34.610, Speaker C: Body in there.
00:09:36.760 - 00:09:38.612, Speaker B: And we add this to do.
00:09:38.746 - 00:09:39.430, Speaker D: Great.
00:09:41.560 - 00:09:42.310, Speaker C: Now.
00:09:43.240 - 00:09:52.232, Speaker B: Let's go over to our to do form right now. It does nothing right now. All there is is an on change hook here that is changing the local state.
00:09:52.232 - 00:09:54.104, Speaker B: We want this on form button to.
00:09:54.142 - 00:09:59.160, Speaker C: Actually submit it when it is pressed.
00:10:02.550 - 00:10:09.330, Speaker B: Now, here's the first bit of magic with react. Like, you can use this hook. Use Mud.
00:10:09.330 - 00:10:31.210, Speaker B: Use Mud will just grab all of the Mud auto generated code, all of the Mud state, put it into one hook, and you can access everything here. So we have our system calls available, and we have that to do available as well. So now we can just add to do the new to do that we were just typing.
00:10:31.210 - 00:10:37.546, Speaker B: And just so that this is not really annoying, let's clear the current to.
00:10:37.568 - 00:10:45.600, Speaker C: Do so you don't have to keep backspacing every time you want to add something. All right, let's add our first to do.
00:10:46.770 - 00:10:47.278, Speaker D: Great.
00:10:47.364 - 00:10:56.370, Speaker B: So the transaction executed. We see that it was successful, and we can check here what tables were actually set. This one's obvious.
00:10:56.370 - 00:11:02.850, Speaker B: It's like the to do table. It has a key of one. This is the first key that we generated from that Getunique entity.
00:11:02.850 - 00:11:22.202, Speaker B: Here's one that might not make sense unless you remember, like, yeah, we have that unique entity module. It's setting its own storage. This is not super helpful for you, but if you're installing a bunch of modules, it's nice to know, hey, what are these modules doing secretly in the background? Is it like accessing too much storage? Do I need to clean this out?
00:11:22.256 - 00:11:22.860, Speaker C: Maybe?
00:11:24.430 - 00:11:27.034, Speaker E: Let's bump up the zoom on the Dev tools a little bit.
00:11:27.072 - 00:11:33.854, Speaker B: Hey, there is a to do. Is that good? I think that's probably the biggest I can make it.
00:11:34.052 - 00:11:35.518, Speaker E: Yeah, this is good then.
00:11:35.684 - 00:11:43.170, Speaker B: Okay, so the transaction is successful, and technically, the state is in our client right now.
00:11:43.240 - 00:11:44.500, Speaker C: It's just not available.
00:11:45.110 - 00:12:04.018, Speaker B: Let's go over and add some hooks and get that client rendering here. Okay, let's go grab our Use Mud hook again. Grab that magic context, and then I will grab the to do component.
00:12:04.018 - 00:12:13.286, Speaker B: Okay, huge disclaimer. We mix the usage of components and tables everywhere. Right now, Mud started as a pure ECS framework.
00:12:13.286 - 00:12:25.390, Speaker B: It is now based on tables, and ECS is a subset of this table structure. I still use ECS during game development. That's why components are everywhere in the API.
00:12:25.390 - 00:12:33.890, Speaker B: So this really means tables. Take my word for it. But this to do matches the to do table that we just defined in our config.
00:12:33.890 - 00:12:52.934, Speaker B: And there's another magic query or magic hook that you can use to grab all of the things that have to dos, and that is use entity query. This is like kind of a DSL of describing a query given, like, certain.
00:12:52.972 - 00:12:54.886, Speaker C: Tables that it's composed of.
00:12:55.068 - 00:13:02.554, Speaker B: In this case, we have has to do. Very simple. It's going to grab all the IDs locally that we know about that have.
00:13:02.592 - 00:13:04.058, Speaker C: To Dos associated with them.
00:13:04.144 - 00:13:16.862, Speaker B: And if we render those right here to do IDs blam one shows up here. Not the information we wanted, it's just the ID. But we can for sure know, hey, there is a To Do.
00:13:16.862 - 00:13:20.894, Speaker B: And if I add another one, another one will pop up.
00:13:20.932 - 00:13:26.580, Speaker C: So there are two to dos. Okay, so now let's actually render these things.
00:13:35.260 - 00:13:38.492, Speaker B: I'm going to iterate through the to do.
00:13:38.546 - 00:13:39.420, Speaker C: IDs.
00:13:41.600 - 00:13:52.044, Speaker B: Now, the first step here is to get the actual data from these To Dos. And then with that, you use this method called Get component Value Strict. There's two versions of the method.
00:13:52.044 - 00:14:01.324, Speaker B: Strict means, hey, I for sure know that this ID has this table. Please just get it for me. It is not possible that it is null.
00:14:01.324 - 00:14:04.480, Speaker B: If it is null, if you were wrong, it will crash.
00:14:04.560 - 00:14:05.648, Speaker C: It will throw an error.
00:14:05.744 - 00:14:14.596, Speaker B: There's also a not strict version of this. Just get component value, which will give value or undefined, as if, hey, you.
00:14:14.618 - 00:14:16.788, Speaker C: Don'T know if this ID actually has the value.
00:14:16.874 - 00:14:19.048, Speaker B: It's just a little more difficult to work with because then you have to.
00:14:19.054 - 00:14:20.760, Speaker C: Do not null checks everywhere.
00:14:21.900 - 00:14:25.400, Speaker B: Okay, so we have the to do data, which is the same schema.
00:14:27.120 - 00:14:29.836, Speaker C: This is not giving type hints right.
00:14:29.858 - 00:14:35.944, Speaker B: Now, but I made a To Do item before. We can throw this to do item.
00:14:35.992 - 00:14:55.630, Speaker C: This to do data into the to do item. I believe this also requires the ID. And let's give it a key also because this is react.
00:14:55.630 - 00:15:00.286, Speaker C: What are you complaining about?
00:15:00.388 - 00:15:01.680, Speaker B: Property content.
00:15:03.170 - 00:15:08.180, Speaker C: Okay, I named it Content before. I'm going to change all of that to body now.
00:15:13.150 - 00:15:19.530, Speaker B: All right, here we go. The things have showed up. Add another one just to prove this is real.
00:15:19.530 - 00:15:22.166, Speaker B: This is not fake.
00:15:22.358 - 00:15:28.830, Speaker C: I don't know. Hackathon by yacht.
00:15:30.210 - 00:15:30.862, Speaker D: Great.
00:15:30.996 - 00:15:38.674, Speaker B: We are adding To Dos, but the checkbox here is not done right. And we can't click it to make.
00:15:38.712 - 00:15:40.900, Speaker C: Them done because we didn't write that system yet.
00:15:41.750 - 00:15:56.240, Speaker B: Let's now add a system for actually changing that. So we're going to add a new function toggle Done. Now, this one's going to take just the ID that we generated before.
00:15:57.410 - 00:16:02.100, Speaker C: Let's just make this explicit. To do. ID public again.
00:16:05.430 - 00:16:13.074, Speaker B: Okay, here's another fun thing about the auto generated tables. We generate some utility functions for you. So you could just say set done.
00:16:13.074 - 00:16:27.914, Speaker B: Instead of reconstructing the struct in memory and shoving it back into the To Do, you could just do this. And they will handle that in the background for you. And we're going to say instead, we're going to toggle it.
00:16:27.914 - 00:16:33.274, Speaker B: So not to do. Get done. To do.
00:16:33.472 - 00:16:39.340, Speaker C: ID. And that is the wrong name.
00:16:41.570 - 00:16:46.558, Speaker B: Okay, so that is toggle done. I think that should work.
00:16:46.724 - 00:16:47.134, Speaker D: All right.
00:16:47.172 - 00:16:55.162, Speaker B: Okay, so the to dos just disappeared? That is because we just modified a system. Mud picked that up. It redeployed the contracts.
00:16:55.162 - 00:17:02.606, Speaker B: We are now using a new world address in our client. Technically, that old world exists. There is a folder somewhere where you have all your old worlds.
00:17:02.606 - 00:17:13.830, Speaker B: If you want to go back to them, you can hard code that world into your URL parameter. But generally, if you've just modified your systems, you probably want to use those systems immediately. We push you onto a new world.
00:17:13.900 - 00:17:17.340, Speaker C: And you have new storage to go along with it.
00:17:17.790 - 00:17:21.994, Speaker B: Let's just add to do again because we want something to interact with.
00:17:22.032 - 00:17:23.610, Speaker C: To add this checkmark.
00:17:28.690 - 00:17:29.198, Speaker D: We'Re going to.
00:17:29.204 - 00:17:51.934, Speaker B: Go add the local system call again and WorldsEnd should have picked up our toggle done. Now, one more thing that is a bit annoying right now. I'm going to add an API function for this or for fix this soon.
00:17:51.934 - 00:17:58.482, Speaker B: But you need to repad the ID when it goes back into the contract. Right now I added a utility function.
00:17:58.536 - 00:18:06.820, Speaker C: For you here though and we have to do that. Then we toggle done.
00:18:08.950 - 00:18:17.830, Speaker B: Okay, now to hook that back up, we go back to our to do item. We have this checkbox here. I already have the on change registered.
00:18:17.830 - 00:18:57.460, Speaker B: Let's grab our use Mud book one more time and we are going to was it e target value, right? Is it checked? This is a real question.
00:18:57.530 - 00:18:59.540, Speaker C: I forget. Forget HTML.
00:18:59.960 - 00:19:00.964, Speaker B: I think so.
00:19:01.082 - 00:19:04.384, Speaker C: Okay, let's see. No, it's not.
00:19:04.442 - 00:19:15.952, Speaker B: What is checked? Please someone send help.
00:19:16.086 - 00:19:17.250, Speaker C: What is this?
00:19:18.580 - 00:19:20.530, Speaker B: Oh, I guess I just use done.
00:19:23.140 - 00:19:32.390, Speaker C: Nobody panic. I'm not panicking. Oh, wait, I'm so dumb.
00:19:32.470 - 00:19:33.402, Speaker B: We have to give it the ID.
00:19:33.456 - 00:19:34.250, Speaker C: So that would matter.
00:19:34.320 - 00:19:36.300, Speaker B: Okay, cool.
00:19:41.180 - 00:19:41.960, Speaker D: Dope.
00:19:44.320 - 00:19:58.930, Speaker B: We'Ve set the transaction toggle done? It then comes through from the contract sets client storage. The checkbox checkbox is checked now. Okay, here's one thing that we just did.
00:19:58.930 - 00:20:14.164, Speaker B: Technically, this is a multiplayer to do list. If we open up localhost 3000 in incognito window, we can see someone else's to Dos, right? And I can check this as done. And that's a horrible, horrible thing.
00:20:14.164 - 00:20:20.052, Speaker B: Just add to Dos and then check off other people's to Dos. We can't allow this.
00:20:20.186 - 00:20:23.076, Speaker C: This is a crime against humanity.
00:20:23.188 - 00:20:27.512, Speaker B: So let's add some permissioning to to Dos. Just one extra thing.
00:20:27.646 - 00:20:32.120, Speaker C: Let's remodify an existing table.
00:20:32.700 - 00:20:44.428, Speaker B: So I'm going to add an owner field to this bytes 32. So now when we add a to do, we're going to set who owns it based on the address of the.
00:20:44.434 - 00:20:50.670, Speaker C: Person owning it to do system.
00:20:55.750 - 00:21:06.522, Speaker B: And once again, I made a utility function for this address to entity. It's just casting an address into a bytes 32 in this fancy way.
00:21:06.576 - 00:21:10.620, Speaker C: It's really nothing, but it is annoying. So I gave that to people.
00:21:12.850 - 00:21:19.742, Speaker B: Now, okay, here's one other important thing. You cannot please do not use message.
00:21:19.876 - 00:21:22.960, Speaker C: Sender raw in a Mud system.
00:21:23.730 - 00:21:32.690, Speaker B: You can. It's just not going to return what you expected. Since the world is this single entry point of Mud message sender is going to be the world address.
00:21:32.690 - 00:21:48.760, Speaker B: And that's probably not what you were expecting when you called it. Instead, we have our own internal message sender, which stores the address that entered the Mud world. In this case, that is like the actual wallet address that we used.
00:21:48.760 - 00:22:03.246, Speaker B: And okay, we can see our to do data is now false because we have no owner associated with it. Now let's set the owner to owner. And then now with toggle done, we.
00:22:03.268 - 00:22:07.600, Speaker C: Can grab here bytes 32. Sender is.
00:22:10.050 - 00:22:18.622, Speaker B: This. And let's require that the sender equals.
00:22:18.766 - 00:22:28.870, Speaker C: To dot getowner to do to ID. Otherwise it is an unauthorized action.
00:22:31.990 - 00:22:32.498, Speaker D: Cool.
00:22:32.584 - 00:22:36.738, Speaker C: I think this all checks out.
00:22:36.824 - 00:22:38.334, Speaker B: Once again. It redeployed.
00:22:38.382 - 00:22:42.600, Speaker C: So it cleared our storage. Do this one more time.
00:22:44.730 - 00:22:45.480, Speaker B: Okay.
00:22:50.570 - 00:22:51.686, Speaker C: Everything'S looking good.
00:22:51.788 - 00:22:53.334, Speaker D: I'm going to check it.
00:22:53.532 - 00:23:00.842, Speaker B: It is done. Now let's try to check it here.
00:23:00.976 - 00:23:04.090, Speaker C: Does not work unauthorized.
00:23:04.430 - 00:23:18.494, Speaker B: I believe you could go into your console and you can actually see the error here. Yeah, execution reverted unauthorized, but I can make my own to do. I can check that off here, but.
00:23:18.532 - 00:23:19.920, Speaker C: I cannot check it here.
00:23:21.250 - 00:23:31.858, Speaker B: Okay, that is the end of the scheduled features. I have some bonus features that I want to do, but maybe I'll do one more after questions.
00:23:32.024 - 00:23:34.340, Speaker C: Are there any pressing questions that people have?
00:23:40.130 - 00:23:40.506, Speaker D: Yeah.
00:23:40.548 - 00:23:47.810, Speaker A: If you have any questions, please feel free to take yourself off mute and ask. Or if you don't want to ask, feel free to type in the chat.
00:23:54.710 - 00:24:02.868, Speaker B: Just straight to bonus feature. All right, I'll do it. It's fun.
00:24:02.868 - 00:24:10.820, Speaker B: I like this. This is more of like a purely user experience thing that we have built into Mud that I think makes it.
00:24:10.970 - 00:24:12.676, Speaker C: Like the client's very snappy.
00:24:12.788 - 00:24:44.096, Speaker B: So obviously when you're clicking done here, there's that little delay like you're clicking the transaction is being sent, you're waiting for confirmation. In this case, there's like a 0% likelihood that this transaction is going to fail other than a reorg or some gas error. So let's make our client just optimistically say, hey, this is probably going to succeed, and let's tell the Mud client that it's going to succeed before the.
00:24:44.118 - 00:24:45.776, Speaker C: Confirmation even comes through.
00:24:45.958 - 00:24:47.188, Speaker B: We have a built in way of.
00:24:47.194 - 00:24:48.448, Speaker C: Doing this with Mud.
00:24:48.624 - 00:25:11.960, Speaker B: So we have this concept of client components. So we've auto generated these components here and we're setting that into client components, but we can override those components with our own components, or we can create purely client components just for client side state. In this case, we're going to override the to do component with an overridable component.
00:25:11.960 - 00:25:31.884, Speaker B: Now what this means is we have now injected some methods onto to do that. Say, hey, I'm going to set your value before I actually know the real value and just pretend that that's real. And then all of those overridden or overrides will get wiped.
00:25:31.884 - 00:25:41.716, Speaker B: The second real chain state comes through, this is going to make it so that when we check this checkbox, it immediately happens, and they don't really need.
00:25:41.738 - 00:25:44.020, Speaker C: To worry about the transaction in the background.
00:25:45.880 - 00:25:53.210, Speaker B: And now really, all we need to do here is okay, so we've toggled done. Actually, let's go into our.
00:25:56.220 - 00:25:58.010, Speaker C: Actually, let's just do it here.
00:25:59.180 - 00:26:10.444, Speaker B: We can now set the component manually with the to do the ID. Okay, I guess we have to just.
00:26:10.482 - 00:26:13.950, Speaker C: Grab the actual component from here.
00:26:16.500 - 00:26:19.810, Speaker B: We do need to grab the to do data.
00:26:34.750 - 00:26:44.366, Speaker E: Hey, Kushaba, we have one participant who is not sure what exactly we're overriding. Could you elaborate on where the generated components are and what we're overriding?
00:26:44.398 - 00:26:44.980, Speaker D: Exactly.
00:26:46.790 - 00:27:03.630, Speaker B: So we are overriding the done state locally because we know that once this transaction goes through, the done state is going to be true if it was false. But we have to wait for that entire flow. We need to wait for the transaction to get sent to the chain.
00:27:03.630 - 00:27:14.220, Speaker B: We need to wait for confirmation, and then it would get sent down, and then we know, oh, it's true. We can short circuit that whole process and just set into the client done is true.
00:27:16.590 - 00:27:42.770, Speaker C: Does that make sense? Also, I think I was doing this wrong. Yeah, it's add override. And then we have to set the entity here, which is ID and value, which is to do data.
00:27:42.770 - 00:28:09.040, Speaker C: This is possibly undefined. We probably don't want to render anything if we have no data, so that's fine.
00:28:09.810 - 00:28:23.214, Speaker B: Okay, so if you remember before when we clicked this, there was a slight delay. Now it happens immediately, but the transactions are where the transactions are failing.
00:28:23.262 - 00:28:23.570, Speaker D: Right?
00:28:23.640 - 00:28:26.466, Speaker B: Because that was unauthorized. This is a little more complicated because.
00:28:26.488 - 00:28:28.866, Speaker C: Of the unauthorized methods, but if I.
00:28:28.888 - 00:28:37.634, Speaker B: Click the one that I own, the transaction goes through. Otherwise you see what happened. It's instant.
00:28:37.634 - 00:28:54.778, Speaker B: Now, that's the whole thing. This is not super impressive with a to do list, but I promise you, if you're making a world with players in it and you want to move around, attack things, pick things up, this is going to make the difference between someone closing out of your app and being engaged and feeling like they're a.
00:28:54.784 - 00:29:02.510, Speaker C: Part of the world. Yes. That was the bonus feature though, the secret hidden feature.
00:29:02.510 - 00:29:06.240, Speaker C: And it's still 330, so I guess it's fine.
00:29:09.290 - 00:29:16.620, Speaker A: Awesome. We did have a question from Albert. Could you explain when a new world automatically gets generated, is this relevant to the testnet or the main?
00:29:18.910 - 00:29:31.946, Speaker B: Sorry, this is purely for development. Like, if you're on main net, you're not going to be running Mud Dev because that's going to be constantly redeploying your contracts, which know costing you money. This is purely for local development.
00:29:31.946 - 00:29:52.204, Speaker B: If you change a system file for your convenience, it is going to automatically redeploy your contracts. Yes. So in this override scenario, if the transaction does fail, it will cleanly remove that override and revert back to the original.
00:29:52.352 - 00:29:53.850, Speaker C: The correct value.
00:29:54.460 - 00:29:57.044, Speaker B: It knows to listen for that transaction.
00:29:57.092 - 00:30:00.570, Speaker C: And to say, hey, something messed up.
00:30:04.880 - 00:30:11.100, Speaker A: It looks like all the other questions have been answered by Alvarius or Bushazlan.
00:30:21.820 - 00:30:28.996, Speaker B: Oh, yeah. So set up is a promise. Yes, technically, setup is a promise.
00:30:28.996 - 00:30:46.608, Speaker B: Setup is really fast. And we also have this concept of a loading state table, like a purely local table that you can hook into that says the actual percentage of the loading state. And if you come to my Phaser workshop, I'm going to go into that a little bit where you can make a proper loading screen and even have.
00:30:46.694 - 00:30:50.530, Speaker C: The app progressively load as loading changes.
00:30:51.620 - 00:31:09.860, Speaker B: But generally, setup is pretty fast because setup doesn't wait for loading to be complete. It just starts the loading process. Bruno, that is a fantastic question about migrating tables in production.
00:31:09.860 - 00:31:21.352, Speaker B: We have no great way to do that right now. I would love to talk more about it, and you should make a live world and get into this situation and we can work through it together.
00:31:21.406 - 00:31:22.410, Speaker C: That's my answer.
00:31:24.140 - 00:31:24.890, Speaker D: Yeah.
00:31:27.740 - 00:31:29.980, Speaker B: Palash. How difficult is Phaser to pick up?
00:31:30.050 - 00:31:30.332, Speaker D: Okay.
00:31:30.386 - 00:31:45.596, Speaker B: I'm a big fan of Phaser. It's not as powerful as Unity. Your game is not going to look as great as Unity, but it is an incredibly good prototyping tool, and it's also incredibly easy to get it in front of people because it's just browser native.
00:31:45.596 - 00:31:58.896, Speaker B: Unity can technically compile to browser code, but I don't know if anyone's ever done this before. It is not the intended purpose of Unity, and they do not make it super easy. Phaser, on the other hand, has, like, really tight integration with the browser.
00:31:58.896 - 00:32:26.350, Speaker B: It was made for browser first. We have really good integrations for it. And we basically have a built in infinite canvas in our phaser integration, where it's like you can just scroll through this infinite world and set the positions on objects, and it won't overload the browser by rendering every single object in this infinite world, which, if we're creating autonomous worlds, is pretty important.
00:32:26.350 - 00:32:47.940, Speaker B: So, once again, during the workshop, I'll explain this, but we have an object pool that you have access to where you can dynamically set sprites, and if they go off screen, they will just get not rendered. That didn't even answer your original question, which is, is it easy to pick up? Yeah, it's easy to pick up. It's like a really simple API.
00:32:47.940 - 00:33:00.344, Speaker B: It basically is one of those things where you can use as much as you want. You could use the bare minimum of it and not even know what Phaser does and then progressively pick it up.
00:33:00.382 - 00:33:04.410, Speaker C: More and more as you go along. I think that's why it's easy to pick up.
00:33:11.550 - 00:33:16.780, Speaker A: Awesome. I think everything else was covered. So there are no other questions.
00:33:16.780 - 00:33:29.194, Speaker A: Thank you all for attending. And thank you, Khushaba and Kushaza, for demoing this as well. And yeah, there are a few more workshops for us today.
00:33:29.194 - 00:33:33.258, Speaker A: So we'll hope to see you again in a few minutes. Few hours.
00:33:33.424 - 00:33:34.700, Speaker D: Cheers. Thank you.
00:33:35.230 - 00:33:36.434, Speaker B: Peace. Thanks for coming.
00:33:36.512 - 00:33:38.270, Speaker E: Thanks everyone. Bye.
