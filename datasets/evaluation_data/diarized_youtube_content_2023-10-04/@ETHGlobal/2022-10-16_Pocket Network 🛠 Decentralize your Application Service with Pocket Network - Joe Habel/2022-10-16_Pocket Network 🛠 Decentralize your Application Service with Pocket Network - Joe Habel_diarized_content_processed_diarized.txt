00:00:06.410 - 00:00:49.370, Speaker A: Let's go ahead and get started. So let's start off with the basics. What even is pocket network? So in short, we're a decentralized RPC provider. Let's go ahead and give a quick background of what that means and why that might exist. So on the Ethereum network, there's two ways to send a transaction out to the network. You can run an Ethereum client yourself and broadcast that transaction directly, or you can send a request to a node that has exposed its port to offer RPC service publicly. Talk about what a client is, because that might not be a word that kind of rings with you when we're talking about Ethereum.
00:00:49.370 - 00:01:59.300, Speaker A: So formerly these would have been mining nodes in ETH one. Now we're here, they're validator nodes. There's what are called full nodes, which hold the most recent 128 blocks available. There's what's called archival nodes, which hold the historical state of all blocks in existence. And what does it take to run these nodes? What exactly does that mean? It means that you need essentially a server running 24/7. Is that going to be an old computer? Is that going to be a Raspberry Pi? Is that going to be a rack server? You're going to put that in the cloud? Are you going to be able to make sure that you can securely access that? Are you going to figure out how to scale that if your demand grows? There's a lot of work that is completely unrelated to someone building a smart contract on Ethereum when it comes to actually standing up the infrastructure needed to get your applications out to users. But wait, what about Light clients? Unfortunately, while I'd love for them to exist, they're not really here for web browsers yet.
00:01:59.300 - 00:02:32.560, Speaker A: They still need to handle a bunch of complex behavior in communicating across the network. And they offer a considerable amount of latency and bandwidth costs for historic lookups. And they always will, unfortunately. And so in comes your RPC service. This is what MetaMask uses whenever you use it to talk to an application. This is what Ledger smart contract integration uses. And Trustwallet and Guarda wallet and myether wallet and basically every web app that you've used.
00:02:32.560 - 00:03:13.340, Speaker A: But what exactly is that? RPC stands for Remote Procedure Call. What happens is messages are communicated between the application and the node. In JSON nodes expose it via an Https API as well as WebSockets. It provides the lowest technical barrier of entry for application developers. Almost everything can communicate strictly through JSON and Http. Who handles this? Was the miners now validators? It's a little outdated and sorry about that. Is this what Gas is for? No, it's not.
00:03:13.340 - 00:04:04.890, Speaker A: Validators can choose to serve RPC, but they have no obligation to do so on the network. There is no on chain incentive for nodes to service applications with RPC, even though it's the primary way that applications interact with the Ethereum blockchain. There's off chain solutions that we can use. Private entities have really stepped up to fill the need, and some examples of these are infura Alchemy Anchor. While these are accessible, they're all centralized and require monthly fiat payments to keep that application live and running. Typically the only solution for smart contract developers. And this is really the only way that smart contract developers who don't have the know how to manage infrastructure are able to interact with the blockchain until Pocket Network.
00:04:04.890 - 00:04:48.040, Speaker A: What are we? We're an independent blockchain with a native token called Pocked, and node runners can come onto our network and earn Pocked for servicing RPC. Relays apps can stake up that Pocked to get access to that RPC layer. What this does is it provides a utilitarian market for blockchain infrastructure. It makes RPC permissionless and decentralized. It all sounds neat, but how does that help you as a developer here? One thing is you have less risks from outages. Pocket Nodes run in a pretty variety of configurations. We have people self hosting their own hardware, running computers right out of their worker home office.
00:04:48.040 - 00:05:04.622, Speaker A: Some people choose to host up on cloud providers AWS, Azure, DigitalOcean, all the works. There's services that offer rented hardware directly that we have no runners run on. Talking here. OVH. IBM Cloud. Bare Metal. It's not really running in the cloud.
00:05:04.622 - 00:05:33.400, Speaker A: They're renting that hardware directly. This makes Pocket resilient to outages at the cloud provider and data center level. It also gives you the availability for the first time to own your access. Once an app is staked on the network, that relay rate is locked in. As long as that app remains staked. What this means is there will always be some guarantee of service as long as you keep those tokens locked up. What that means for you as an app developer is that you don't have to worry about that monthly bill coming in.
00:05:33.400 - 00:06:08.610, Speaker A: You can't accidentally run up a massive compute bill charge without realizing it because your users decided to go cog wild on the interface. You can recoup some of that initial infrastructure investment by unstaking and selling. In short, with Pocket Network, web for the infrastructure becomes an investment and not a recurring cost to end developers. So let's get started with what you can actually do out the gate. We offer a free tier through our portal so that you can get started right away. Building Today. It's an application that we've built on top of Pocket Network.
00:06:08.610 - 00:06:58.302, Speaker A: It's available directly at Portal pocket Network, and it gives developers the user experience of the centralized options that they're used to building with today. Gives them a dedicated RPC URL, gives them security configurations for how they protect that URL, gives them dashboards about any full meaningful metrics about where that service is flowing through. Gives you alerts when you're approaching your bandwidth limits. And the free tier is currently offering it's a quarter million relays a day. And it's as simple as going up, getting started, registering, creating an app. You have all that data available to you on that application page. You have your availability to set up security, set up your notifications, and you're ready to get rolling once you have that URL.
00:06:58.302 - 00:07:33.690, Speaker A: So let's actually see how, when you get that URL, how you use it. We'll start with solidity development environments. If you're building a smart contract, we'll get Hard Hat as a popular example. It's as simple as in your Hardcat config JS file specifying in your networks mainnet. Here example is our ETH mainnet endpoint and specifying Robston. Just drop in that Robson URL that you get from the portal. Same with Rinkby and Gorely and COVID.
00:07:33.690 - 00:08:28.234, Speaker A: All right, there that when you run anything in Hard Hat, you can just network specify the name you're running in that Live environment. So you're building in Truffle. It's very similar in your module exports in your networks, basically the same thing, except you have to specify that the port it's going through is 443 because it's SSL protected and you have to specify the network ID of the chain. But that's normally something that you have to do with Truffle anyway, but just as easily. Take that format drop in the URL, you have Robston in your environment, you have Rinkbee, you have Gorely, you have COVID. And again, just as simple as Dash network and your network of choice, and you're running Live with us. You can deploy, you can test, you can run queries everything that you would do from the console right to the live network remix.
00:08:28.234 - 00:09:11.674, Speaker A: Say you've never really built with us before. You want to just drop it in and start using us in a more IDE environment. All you have to do is navigate to that Deploy and Run tab, select Web Three provider from the drop down, and then put your endpoint in right there. And you're good to start deploying with us and testing with us in Remix Live as well. So now, let's say you're using Pocket, but in a JavaScript front end in Ethers. It's as simple as specifying your URL and initializing it in their JSON RPC constructor, and you're good to start making queries directly to the chain. What about Web Three? JS Just as easy.
00:09:11.674 - 00:10:07.440, Speaker A: Take that URL, just start using it right on the chain. What about in Python? If you're building something that lives in the back end, take that URL and drop it into Web Three Pi's constructor and you're good to start querying that chain. What about if you're not a DApp developer, but you're still interested in the space, you can use us in your MetaMask. All you have to do is select add a network from the drop down, enter in the public RPC information that we offer a variety of, and then you can repeat that for any of the chains that you interact. With MetaMask with including we have Avalanche, public RPCs, Gnosis, public RPCs, Fuse, Polygon, a whole variety of public RPCs that you as a user, not even as a developer, can take access of. These are available on our docs. Under our resources, we have a public RPC endpoints for you.
00:10:07.440 - 00:10:39.000, Speaker A: Additionally, let's say you're a developer who's not just building on Ethereum. I'm sure there's a lot of you here today. Here's an example of how you can quickly leverage us to not just build on Ethereum, but throw in optimism in Polygon as well. It's as simple as taking those endpoints and dropping them in where you need to. That could again be in those solidity development environments. That could again be in any of your libraries. As long as they work in a JSON RPC provider or in any of those environments, you're good to get rolling on those networks too.
00:10:39.000 - 00:11:47.916, Speaker A: Currently, right now, we have a full list of honestly now pushing close to 40 blockchains. Some of the big ones that come to mind that we recently integrated StarkNet, Optimism, Avalanche. We have a whole variety, and it keeps growing. And so what we're going to encourage you today is that if you are building anything with us, or if you're building anything this weekend and you need to deploy a smart contract, you need to build an interface to it. We're offering a $2,500 prize pool split between any developer who deploys something and utilizes us, and we encourage you to. This link will take you to essentially what we ran down today and even more about how to integrate yourself in various uncovered programming libraries in case you're not a JavaScript or Python dev, as well as some other smart contract development environments like Brownie and Apeworks. So I'm excited to see what you all build it up.
00:11:47.916 - 00:11:59.720, Speaker A: Anyone? Just questions? Yeah.
00:12:01.470 - 00:12:16.414, Speaker B: What's the stop? Like an outage from the DNS on the RPC URL. What's the stop? If there's like a DNS outage on.
00:12:16.452 - 00:12:24.480, Speaker A: That, it's like a global DNS outage. We're talking yeah, I mean, that's a good question, but then we're now talking the whole Internet is down.
00:12:25.090 - 00:12:39.702, Speaker B: But I'm talking about let's say that the DNS for that URL that were provided through, I guess through the app, are we hosting that or in the portal, it provides the URL, right?
00:12:39.756 - 00:13:04.940, Speaker A: Yeah. So what the portal is, is I can go back there. So the portal is an application that's built on top of Pocket directly. What that means is the portal under the hood is leveraging Pocket Network to kind of give that UX development layer to developers.
00:13:06.740 - 00:13:07.200, Speaker B: Okay.
00:13:07.270 - 00:13:11.692, Speaker A: Yeah. The portal is not pocket network. It is built on top of Pocket network.
00:13:11.756 - 00:13:12.080, Speaker B: Okay.
00:13:12.150 - 00:13:48.436, Speaker A: But for a lot of smart contract developers or people building interfaces to smart contracts to actually kind of rotate through, every hour the list of providers that you can receive service to changes. So every hour, each application gets a list of 24 providers that they can receive service from. And so for someone who's used to taking a URL and putting it into their D app. It's a lot harder than maintaining that rolling infrastructure, but under the hood, it's not fundamentally tied to that layer.
00:13:48.548 - 00:13:49.210, Speaker B: Okay.
00:13:54.140 - 00:13:59.230, Speaker A: All awesome. Thanks, everyone. Looking forward to seeing this build again.
