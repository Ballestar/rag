00:00:08.010 - 00:00:13.786, Speaker A: Today we're here to talk about MetaMask Snaps. We have a bunch of bounties for you. So this is very exciting.
00:00:13.786 - 00:00:20.938, Speaker A: We also launched Snaps about one week ago. I'm going to tell you a little bit more about that, but first, about myself. My name is Ziyad.
00:00:20.938 - 00:00:36.310, Speaker A: I am the developer advocate for MetaMask Snaps. You can find me on Twitter, Instagram, all the social medias yadmtl. And before we get started, this is a QR code for this presentation.
00:00:36.310 - 00:00:58.510, Speaker A: And if you're hacking on one of our bounties for MetaMask snaps, you're going to want to get this presentation because it has all the resources that you're going to need in order to get started hacking with us. Very briefly, let's talk about MetaMask. MetaMask is the most popular self custodial wallet, 30 million plus users.
00:00:58.510 - 00:01:11.590, Speaker A: I'm very proud to work for MetaMask. I have a beautiful colleagues and we're doing some great stuff for Web Three. It was released as a browser extension and it lets browsers connect to Ethereum compatible blockchains.
00:01:11.590 - 00:01:27.130, Speaker A: But not just ethereum. As of September twelveTH, MetaMask is now able to do a lot more things thanks to Snaps. Snaps are add ons for MetaMask.
00:01:27.130 - 00:01:58.680, Speaker A: They enable the addition of new features to MetaMask, and you can develop those features anyone by using our APIs. And we're going to see how to do that. In this workshop, you build Snaps with TypeScript or JavaScript source code, ideally TypeScript and your Snap, your JavaScript codes, runs in a secure sandboxed environment so that you can only do the things that we allow you to do and that the user of MetaMask allows you to do.
00:01:58.680 - 00:02:12.198, Speaker A: Once you're done developing your Snap, you publish it as an NPM package. Anyone can install it and they can do a lot of things with it. Like what? Well, yeah, we launched on September twelveTH.
00:02:12.198 - 00:02:37.460, Speaker A: So what can you do with Snaps? First, you can add non EVM chains to MetaMask. That means you can own Bitcoin inside MetaMask or Dogecoin or any other coin that you want. You can increase the security of the wallet by providing the user with transaction insights, telling them that a transaction is maybe not safe based on some algorithms that you have or some proprietary information that you have.
00:02:37.460 - 00:02:53.160, Speaker A: You can add distributed identity features to the wallet. You can add communication features to the wallet. And there's a whole bunch of other support APIs such as networking, secure storage, custom UI that you can use as a support to build all those features that you're building.
00:02:53.160 - 00:03:12.090, Speaker A: And there's a lot more on the way. If you looked at our bounties, which I'm going to present in a moment, you will see that we're already starting to develop more features just as we have launched. So what are some of the things that people are building with Snaps? Well, if you go to Snaps MetaMask.
00:03:12.090 - 00:03:25.326, Speaker A: IO today, you are going to be able to download and install in your MetaMask browse in your MetaMask extension, 35 different snaps. The biggest category is interoperability. We have a Cosmos snap.
00:03:25.326 - 00:03:38.870, Speaker A: We have a bitcoin snap. We have leap snap. We have all the snaps that you see here, and all those can allow you to manage all these accounts securely from inside MetaMask, the same way that you manage your Ethereum.
00:03:38.870 - 00:04:05.946, Speaker A: We have Transaction Insight snaps, which allow you as a developer to add some data inside the MetaMask UI to give more information to the user about a transaction that they're about to make. And we also have notification snaps that allow communication features. So let's talk a little bit about our bounties before we start looking at a demo for the ETH Global New York hackathon.
00:04:05.946 - 00:04:23.570, Speaker A: We have two bounties. The first one is prompting you to build a Transaction Insight Snap with a V, two that is so new that it's not yet in our documentation. So this presentation contains a link to a beta documentation that you're going to be able to use in order to hack on our bounties.
00:04:23.570 - 00:04:35.190, Speaker A: We also have a bounty for a domain resolution Snap. This is a feature that's not even live. You're going to have to use a special developer preview of MetaMask in order to be able to build on that bounty.
00:04:35.190 - 00:04:47.066, Speaker A: And you're going to get all the information during this presentation. This is the link to it. You can scan it if you want, or if you scanned the QR code earlier, you will have access to it.
00:04:47.066 - 00:05:00.842, Speaker A: And we also created a developer guide for you, especially for this hackathon, so that you can get started easily. All right, so now you're all excited. You've seen all the beautiful features that we can build with snaps.
00:05:00.842 - 00:05:18.614, Speaker A: So how do you get started? Well, it's very easy. All you have to do is run one command on your command line. We're going to run it in a minute, and it's going to provide you with a full repository that contains everything and a fully functioning Snap that you can start editing right away.
00:05:18.614 - 00:05:32.038, Speaker A: So you don't have to start with a blank page. And there's one more thing you're going to need to get set up with a special version of MetaMask called Flask. It's a developer preview of MetaMask.
00:05:32.038 - 00:05:45.566, Speaker A: It looks exactly like MetaMask. It has a different icon so that you can know that it's a different one. And also don't put any live private keys in there that you care about.
00:05:45.566 - 00:05:58.340, Speaker A: It's really meant to be used as a separate extension, ideally in a new browser profile or in a completely different profile. And you can get it on MetaMask IO flask. All right.
00:05:58.340 - 00:06:27.834, Speaker A: And the rest of this presentation contains a bunch of links for you that will also give you some inspiration, that will give you some more documentation about everything that you can do with snaps. And that being said, now, I would like to walk you through what happens when you run that command that we looked at earlier and what kind of code you get. And we're going to see how you can use that code, how you can debug a Snap, and we're going to get started right away.
00:06:27.834 - 00:06:38.430, Speaker A: So the command was yarn. Create. You can also use NPM, if you like at MetaMask, Snap and then the name of your Snap.
00:06:38.430 - 00:07:03.566, Speaker A: And I was expecting the network to be a little bit slow here, so I've already set up a new Snap from scratch that we're going to be using for this presentation. Here it is. And I want to double check how the font size is looking on the screen that you're seeing.
00:07:03.566 - 00:07:21.854, Speaker A: It's a little bit small, so I'm going to make it a little bit larger. All right, so once you run that command, you get a full Yarn repository that has two packages in it and a bunch of setup files. So very quickly you get a site package.
00:07:21.854 - 00:07:31.160, Speaker A: You don't need to use it. It's a DAP that allows a user to install the Snap. You can add some buttons to it that will allow you to interact with your Snap as you're building.
00:07:31.160 - 00:07:50.398, Speaker A: And the most important package is the Snap package. It contains some TypeScript code as well as some commands that you can use as a developer in order to quickly get started building with Snaps. And how do you get started building? Very easy.
00:07:50.398 - 00:08:01.306, Speaker A: You go on your command line and you run Yarn what? Yarn what? What do you think? Start. Yeah, simple, easy. Just Yarn.
00:08:01.306 - 00:08:14.760, Speaker A: Start. And what is this command going to do? It's going to run two processes in parallel. The first one is a development server that is going to be constantly looking at your Snap code and rebuilding it on the fly as you're changing your code.
00:08:14.760 - 00:08:35.754, Speaker A: And the second one is going to run the site package, which is a simple DAP that has a few buttons that allow you to install the Snap, interact with it, and get started. It's built using React, and it's very easy to get started with. We're not really going to be looking at it today.
00:08:35.754 - 00:09:04.162, Speaker A: It's basically a react site with some buttons that are interacting with the Snap. And once the development server has executed, you can just go in your browser, you go to localhost 8000 and you get presented with a very simple DAP that allows you to connect with the Snap. Now because I've already connected with a Snap before, with this Snap before, the button says Reconnect here.
00:09:04.162 - 00:09:12.738, Speaker A: And this is very important as a developer. As you're making changes to your Snap, the Snap gets recompiled immediately. Your TypeScript code gets recompiled immediately.
00:09:12.738 - 00:09:28.830, Speaker A: But if you want to see those changes, you have to click this Reconnect button so that the Snap will get reinstalled with all those latest changes. So this is what happens when you do that to ask you for your password. I hope I remember my password.
00:09:28.830 - 00:09:41.578, Speaker A: All right. And then you get a dialog that asks you to install a Snap. This is exactly what your users will see once they install your Snap, once they interact with your Snap.
00:09:41.578 - 00:10:10.730, Speaker A: And we can see here that in addition to giving you some information about the source of the Snap, the name of it, there's also a very important section here which lists all the different permissions that a Snap is requesting. A few moments ago, I mentioned that a Snap runs in a sandboxed environment. So even though you're writing TypeScript JavaScript, and it's seemingly running in a browser, your Snap code doesn't have access to anything, cannot fetch data from the network.
00:10:10.730 - 00:10:28.522, Speaker A: It can't do anything. And through this permission system, which you set up through a manifest file, you can ask the user to do things. For example, in this case, the Snap that you get as a template when you get started is asking for two permissions.
00:10:28.522 - 00:10:54.950, Speaker A: It's asking to be able to communicate with websites, which means that your Snap is going to be able to provide an API, an RPC API that websites and other snaps will be able to use. And it's asking to display dialog windows using this custom UI feature that we're going to look at in a minute. So if I say install, the Snap is going to be installed.
00:10:54.950 - 00:11:12.430, Speaker A: And then where am I going to see this? In my MetaMask? If I go in my settings menu, there's an option that you might not have seen before. It's now live in the main extension. It used to be only in this MetaMask flask version called Snaps.
00:11:12.430 - 00:11:34.164, Speaker A: Right here and under here, you will see all the snaps that you've installed. And if you go in there, you will see all the DApps, all the websites that are connected with your snaps, all the permissions and the ability to remove the Snap if you want to. In addition to this, the DAP contains a send message button.
00:11:34.164 - 00:11:54.952, Speaker A: This is a button that is going to be calling a function from your browser from this web page using the Ethereum provider. And this is going to call the Snaps RPC API in the example that we give you. And it's just going to show a demo of the custom UI features that we have in MetaMask snaps.
00:11:54.952 - 00:12:18.432, Speaker A: So when I clicked on this button, the DAP securely communicated with the Snap through its RPC API and inside the Snap code, we're using the custom UI feature in order to bring up this dialog. And whether I click approve or reject is not going to have any effect in this DAP. But the Snap will be able to have access to the response from this dialog.
00:12:18.432 - 00:12:37.690, Speaker A: It will see whether the user has rejected or approved. So if you're building a bitcoin Snap, for example, and the user is about to make a transaction, you're going to want to show them a confirmation. You're going to say, for example, A, you're about to spend one BTC and you're going to send it to this address, and then they'll have the ability to approve or reject it.
00:12:37.690 - 00:12:52.192, Speaker A: And based on that, you can continue the logic and the Asynchronous logic inside your code and decide what you want to do with that. So right now, it doesn't matter whether I click approve or reject. We don't have a lot of time.
00:12:52.192 - 00:13:10.310, Speaker A: So I want to show a little bit the code that's driving what we just looked at. So inside the snap package, the source directory contains only one code file, index TS. And this is the only file that you need.
00:13:10.310 - 00:13:30.380, Speaker A: If you start building a more complex snap, you're going to have modules, you're going to have all sorts of files in there. But this index TS is going to export some functions that are going to allow MetaMask to interact with your snap. The one that we're using here is called Onrpc Request.
00:13:30.380 - 00:13:46.960, Speaker A: This function is detected by MetaMask and is called every time that adapt makes an RPC request to your snap. Very simple. And how does adapt make an RPC request to your Snap? Well, it has to have the permission for it.
00:13:46.960 - 00:14:01.984, Speaker A: Our snap asked for a permission to be communicated with by websites. And these permissions are located in the snap manifest JSON file, which is at the root of the snap directory. As you see, it's not in SRC.
00:14:01.984 - 00:14:26.316, Speaker A: It's right at the root here, and it contains a bunch of metadata about your snap. And the permissions are inside this field called initial permissions. So this snap that you're getting provided with asks for two permissions displaying dialogues and the ability to expose an RPC API that only DApps can communicate with.
00:14:26.316 - 00:14:37.250, Speaker A: In this case, snaps are not allowed to communicate with this snap because this is set to false. Thank you. And so what's in there? Well, in this case, it's very simple.
00:14:37.250 - 00:15:02.872, Speaker A: It's a function that receives the origin of the RPC request as well as the request object itself, the JSON RPC request. And in this case, we're doing a very simple switch statement. If the method that comes back is hello, we are then using the snap global variable to request a dialog to be printed on the screen.
00:15:02.872 - 00:15:10.792, Speaker A: This is the dialogue that we saw earlier. It's a confirmation dialog. You can set up the content using these panels, these text elements.
00:15:10.792 - 00:15:23.852, Speaker A: We have a copyable field and a lot more coming on the way. And this is how you set up your snap. And in this case, we're only returning that value to the DAP that has called us.
00:15:23.852 - 00:15:42.070, Speaker A: So this is not very useful in this case. But with the few minutes that I have left, I want to show you something very important that you're going to need as you're starting to develop and debug with your Snap. What's the most common feature that we use for debugging as developers? Console log.
00:15:42.070 - 00:15:45.928, Speaker A: Yeah, console log. It's everywhere. I even have a T shirt with it.
00:15:45.928 - 00:16:10.064, Speaker A: So you would think that if you were using a console log inside your Snap that the log would appear in your Developer Tools right here, but it doesn't. And so with the few minutes that we have left, I just want to show you how to debug your Snap so that you can more easily get started as you're working on our bounties. So I'm just going to change this code a little bit.
00:16:10.064 - 00:16:40.120, Speaker A: I'm going to assign the result of this dialog request to a variable and yeah, the function is sync. And then I'm just going to console log that right here. And as I do this, if I switch back to my terminal, you will see that those changes are being recompiled immediately using the Snaps bundler.
00:16:40.120 - 00:16:58.008, Speaker A: And if I go back to the DAP, this is where I have to reconnect to the Snap. Those changes that were just built are not going to be detected by MetaMask right away. So I'm going to reconnect the permissions haven't changed because I haven't touched the manifest file.
00:16:58.008 - 00:17:16.404, Speaker A: And once the installation is complete, now I have the new Snap available to me. So how do I debug it? I just go to Manage Extension by right clicking on the MetaMask flask icon in my extensions. And you want to make sure that Developer I don't know if I can zoom in on this.
00:17:16.404 - 00:17:24.868, Speaker A: Yeah, you want to make sure that Developer Mode is on. If Developer Mode is not on, you're not going to see the debugging option. So make sure Developer Mode is on.
00:17:24.868 - 00:17:32.964, Speaker A: And then you're going to get an Inspect Views field here with background HTML. Thank you. And if you click there, it's going to open another Developer Tools.
00:17:32.964 - 00:17:51.490, Speaker A: And this one is for the MetaMask extension. There's going to be a whole bunch of things popping up in there about MetaMask itself and as you interact with the Snap. For example, if I click Approve here, then I'm going to get an error that says Method not Found.
00:17:51.490 - 00:18:06.836, Speaker A: Well, let's debug that. I don't know what happened, but I did get my console log here, by the way, that says Dialog Result true. And I think the reason why it says Method not Found is because I haven't returned anything here.
00:18:06.836 - 00:18:27.640, Speaker A: So I'm going to just say Return true. I'm going to recompile the Snap and that's going to take us towards the end of this presentation. So this time, get the dialog, I click reject, everything works, and then I get my console log here that says Dialog result false.
00:18:27.640 - 00:18:54.060, Speaker A: This is about all the time we have, so I wish I could have done a full workshop. But what I'm going to do instead is if you connect to me on social networks, on Twitter specifically, I'm going to be announcing in about a week, I'm going to be coding that live on Twitch we're going to do a full session of coding a Snap from start to finish. I know it's not going to help you with this current hackathon, but we have a MetaMask booth.
00:18:54.060 - 00:19:00.048, Speaker A: If you go all the way to the end and all the way to the corner, you can't miss it. It's right in the corner. It's a big white booth.
00:19:00.048 - 00:19:14.132, Speaker A: And I'm going to be there most of the time to answer all your Snap's questions to help you with your Snap, whether it's validating your use, case or debugging it with you. And I think I'm out of time. So I want to thank you very much for joining us today.
00:19:14.132 - 00:19:20.120, Speaker A: I hope you're going to be successful developing your Snaps, and I'll see you at the conference.
