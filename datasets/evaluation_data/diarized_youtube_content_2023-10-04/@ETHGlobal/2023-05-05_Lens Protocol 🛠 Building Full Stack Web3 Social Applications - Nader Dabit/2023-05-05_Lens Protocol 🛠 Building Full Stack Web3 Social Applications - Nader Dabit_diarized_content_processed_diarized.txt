00:00:10.810 - 00:00:19.566, Speaker A: On my schedule. I had this at 730 and I was right around the corner actually polishing up some of this stuff. So we have a lot to cover.
00:00:19.566 - 00:00:32.294, Speaker A: And what we're going to be going over today is going to be split up into two separate parts. We're going to start off with an introduction to Lens and then we're going to actually build a mobile app from scratch. And I mean from scratch, like literally from zero to one.
00:00:32.294 - 00:00:39.522, Speaker A: So that should be fun. And we're supposed to do this in 30 minutes, so we'll see. My name is Natter.
00:00:39.522 - 00:00:58.570, Speaker A: I am the Director of Developer Relations at Ave Companies, including Lens Protocol. Most of my focus has been on Lens Protocol so far. I am kind of diving a little bit more into some of the stuff that we're going to be releasing soon with the Go token mainnet as well as a lot of the new stuff that's tied in with Ave.
00:00:58.570 - 00:01:12.740, Speaker A: But today I'm here to talk about Lens. I've been a developer for about eleven years and I've been in developer education for about seven or eight years and I've been in Blockchain for about two years. I'm also the founder of Developer now if you've ever heard of that.
00:01:12.740 - 00:01:32.938, Speaker A: So first I want to kind of give an overview of what Lens is and then we're going to talk about more of the technical stuff around how it works. So when we look at our documentation, we say that Lens is a composable and decentralized social graph. But I think that when the average person kind of reads that, it doesn't maybe resonate that much with them.
00:01:32.938 - 00:02:01.586, Speaker A: But when we're talking to developers, they often like to describe it as a protocol and a suite of tools and APIs for easily building social apps or integrating social features into existing apps. I'll go back to that slide because it looks like someone's taking a picture of that. But that's kind of a better description to me because it kind of gives more of an overview of what you can actually do with it and we're going to dive a little bit more into exactly what that means as well.
00:02:01.586 - 00:02:18.482, Speaker A: So when we think about social applications, these are features that you might consider being part of a social application. You create a profile. That profile allows you to kind of attach information about yourself and then you start creating content and all that content is kind of attached to that profile.
00:02:18.482 - 00:02:36.202, Speaker A: And then you might also follow other people and see the content that they're creating. Often that content is curated and presented to you in some sort of recommendation algorithm. And you can also subscribe to other people's feed of content as well by following them and so on and so forth.
00:02:36.202 - 00:02:56.638, Speaker A: Now when we think of a social application, we might think of Twitter or Instagram or things like that, but there are actually social features built into all types of applications that we use on a day to day basis. So things like GitHub are actually social applications because you follow other people and you see a feed of all the actions that they're doing. You could even consider things like stack overflow.
00:02:56.638 - 00:03:18.262, Speaker A: I'm speaking to developer focused types of applications but really when we look at the number of people online today, I think it's like 4.85 billion people are using social applications today. So the really interesting thing to me about Lens was that we're building a UX that is approachable by hopefully the average person, whether or not they're crypto native.
00:03:18.262 - 00:04:01.174, Speaker A: And therefore we kind of are really broadening the scope of the type of user that might be able to be onboarded into web Three via this mechanism that might not be that interested in maybe financial use cases. And then if we go a step further, which is also something that we're kind of working towards, like abstracting away even the wallet addresses and all of the complexity around externally owned accounts and stuff down the road. What ends up happening is through some of the design decisions that the Lens team has made, things like gasless transactions and also signless transactions, getting the average person to kind of use this type of application is a lot easier because they don't need to have tokens.
00:04:01.174 - 00:04:46.102, Speaker A: You don't have to tell them to go to Coinbase to sign up and transfer their money into Coinbase or some centralized exchange and then buy some token and then transfer that token to the right network and then download this browser wallet and then send those tokens to the wallet and then go to some other exchange to swap the tokens and then pay for the transactions. Now we might put up with this shit honestly because we're like crypto people and we love this, but the average person, this is a very bad experience and I think when we talk about this meme of onboarding the next billion people, it's not going to happen if we were asking those people to do that. We need instead really simple applications that have a good UX, and we need to kind of have use cases that make sense to them.
00:04:46.102 - 00:05:01.754, Speaker A: And then once they get onboarded into these applications, they might then be introduced to things like wallets and stuff. And then we can kind of start talking about other use cases that are more like native to us, that are really interesting. So that's kind of why I'm excited about this as a use case.
00:05:01.754 - 00:05:26.606, Speaker A: And Lens isn't an actual application, it's just a protocol for people to build applications. So we see that we have developers building all sorts of applications. So Lentube, for example, is an application that came online and it's cool because when a new application comes online, you sign up one time, but then you go to these new apps and you automatically have all of the followers that you've built over time across all of the applications.
00:05:26.606 - 00:05:51.338, Speaker A: So when Linstube came online, I had all the followers that I had built up from using Leinster, and then you had things like Butterfly and Orb and Ulala and all these different applications. And it's cool because every time a new application is launched, it gives you a new way to kind of express yourself and create content in new and interesting innovative ways. So you might resonate with a new type of application that comes online, or you might not.
00:05:51.338 - 00:06:05.954, Speaker A: But when something does happen to come online that you do resonate with, you don't have to build up your following again from the ground up. You automatically have that built in user base. And depending on the application, that content might also be displayed across other applications as well.
00:06:05.954 - 00:06:20.418, Speaker A: So even if you're only creating on Ulala, you might have that content be made visible on other applications as well, which is really cool. So let's talk about how Lens works. At the very core of Lens is a set of smart contracts that's deployed to polygon.
00:06:20.418 - 00:06:46.506, Speaker A: But the real power around what Lens has been able to do has more to do with the infrastructure and the design decisions around the API, in my opinion. So interacting with a smart contract again isn't that good of a user experience. But if you can abstract away the gas and you can abstract away the signing of the transactions, then you now have a user experience that's on par with something like Twitter.
00:06:46.506 - 00:07:26.220, Speaker A: And then if you start adding the features that are enabled only by decentralized technologies like Blockchains, you can then offer a better user experience and maybe a better value proposition than what's possible with traditional infrastructure. And I think that that is the true unlock with this sort of infrastructure, because I don't think that Web two social is that terrible. There's a lot of amazing things that we've been able to do so far, but I think that we're not going to kind of win the average person over into these sorts of applications unless we can provide an equal or better user experience and maybe even like a better value proposition in general.
00:07:26.220 - 00:07:48.606, Speaker A: So in order to kind of make that happen, our API essentially subsidizes the gas for transactions. And our new infrastructure that we're rolling out is going to make this even faster, better and cheaper. Because in the past this wasn't really possible because when you transacted a couple of years ago on Ethereum, it was a couple of dollars per transaction or even $0.50
00:07:48.606 - 00:08:11.030, Speaker A: or twenty five cents and let's say even $0.01. That's still too expensive to treat like we treat traditional infrastructure because when we think of an application like Instagram, when we use Instagram, we obviously are not going to pay for any type of database update. But that doesn't mean that Instagram isn't actually having a cost per user transaction or interaction.
00:08:11.030 - 00:08:45.140, Speaker A: It's just so freaking inexpensive that they're obviously not going to offload that cost to the user. We're getting to a point now though, with decentralized networks, not only like L ones and L two S, but really other things like Rweave and Bundler and things like that, that you can start kind of considering treating these types of infrastructures like traditional infrastructure and kind of subsidizing that. Because if we can kind of get to the point where we're not asking people to pay for using our app, then we've unlocked a large number of people in the world that might not have been able to use our apps before.
00:08:45.140 - 00:09:17.934, Speaker A: And then the idea of a signless transaction means you're kind of authorizing our API to perform certain actions on your behalf that are non financial. So these would be things like posting a comment or posting a picture or things like that, where you're not having to kind of put your financial self at risk. Instead, you kind of are saying, I'm going to make this trade off and I'm going to authorize this API to kind of post and things like that on my behalf and I can revoke that at any time.
00:09:17.934 - 00:09:33.986, Speaker A: And then you end up again with a higher quality user experience. So those are kind of some of the things that are really compelling, that enable a good UX. And then the other big focus for us is the developer experience that I'll talk about now.
00:09:33.986 - 00:09:45.634, Speaker A: So the DX includes a bunch of work beyond just the API. We have a couple of really interesting things that have been launched really just in the last few months. One of them is the react.
00:09:45.634 - 00:09:57.750, Speaker A: Hooks SDK. So the react hooks SDK abstracts away the GraphQL API So you don't have to kind of write out these long GraphQL queries. You don't have to deal with things like authentication, you don't have to manage your tokens.
00:09:57.750 - 00:10:14.286, Speaker A: All sorts of things are kind of abstracted away by the SDK. And it's really nice because in the past, if you wanted to do some type of query, it needed at least 25 or 30 lines of code and you had to set up a GraphQL client. With the Hooks SDK, you can now do that in as little as two lines of code.
00:10:14.286 - 00:10:38.662, Speaker A: So here we're kind of importing a recommendation algorithm called Use Explorer Profiles and then we're kind of pulling the data out of that query and then we're just able to do whatever we want with it. So the react hooks SDK we have the react native lens UI kit. And the React Native Lens UI Kit allows you to create UI components that have abstracted away certain types of functionality in just a couple of lines of code as well.
00:10:38.662 - 00:11:03.742, Speaker A: We've seen a lot of people win hackathons with the React Native Lens UI kit because they're able to quickly build like a mobile app in just a few lines of code. And then we also have our new Widgets, which allow you to kind of do integrations with Lens in just two lines of code as well. So the widgets kind of look like this in practice, like this is an actual these are some of the designs that you'll end up seeing if you use them.
00:11:03.742 - 00:11:14.050, Speaker A: And they have a very similar API as well. You just import it and then you render that. Each component takes up to 30 or 40 different props, but by default, you don't have to pass any props in.
00:11:14.050 - 00:11:36.742, Speaker A: You can just render a component like this and you automatically get like something at default which is good enough to get started building. We also have our GraphQL API, which if you kind of have ever tried to build an application on top of a smart contract, you realize that you're very limited on the types of queries that you can get there. You obviously at that point often will build an indexer.
00:11:36.742 - 00:11:54.506, Speaker A: But building an indexer is like a nontrivial task, especially for just a prototype or a hackathon or even for a new developer. So we have essentially built our own indexer where we index all of the different data that's coming off of the events. And then we also are offering up like dozens and dozens of different queries.
00:11:54.506 - 00:12:10.198, Speaker A: So when you think of a database, the database is optimized for querying. You can say, give me the last ten people that signed up that have the last name that starts with D, that live in Maryland, that blah, blah, blah. You can't hit a smart contract with that type of query, but you can hit a database with that.
00:12:10.198 - 00:12:25.766, Speaker A: You can also hit our API with those types of queries. We have all types of arguments and things like that that you can do filtering and sorting and things like that. We also recently released a BigQuery API, or BigQuery Table, actually a set of BigQuery tables.
00:12:25.766 - 00:12:40.030, Speaker A: We have like 50 different tables that are available to query with BigQuery. And this opens the door to a lot of cool things around analytics, dashboards and machine learning. And we're already seeing people build some really cool AI stuff with the BigQuery API.
00:12:40.030 - 00:12:57.574, Speaker A: We also have kind of a standard now with Xmtp for DMs on Lens. So you can tap into the 100 and x thousand users on Lens using Xmtp with just a few lines of code. Xmtp is a really great protocol as well.
00:12:57.574 - 00:13:21.920, Speaker A: And then kind of the integrations that you might build with Lens widgets would be follow on Lens, sign in with Lens, share to Lens, profile view, publication view, things like that. But these are more like if I want to maybe open the door to more distribution for my app, but it's not necessarily a social app, but I want to kind of allow people to share the lens. You can do that pretty easily now.
00:13:21.920 - 00:13:48.110, Speaker A: So one of the really interesting things that Lens enables that isn't really possible through traditional social media or really anything else that I know of is extensibility around the actual features of the protocol itself. So you can actually build unique and custom functionality into Lens. As a developer, this would almost be like if you were using Twitter and you were like, oh man, it would be so freaking cool if you could do this thing on Twitter.
00:13:48.110 - 00:14:04.922, Speaker A: But obviously you're not going to send a pull request to Twitter and they're not going to merge it, right? You can actually do that with Lens. You can create a custom module. You can then essentially submit it to our repository and get it merged and you can start using it, but everyone else in the world can start using it as well.
00:14:04.922 - 00:14:21.358, Speaker A: And now you've added a new feature to Lens. And then this is just a couple of examples of what that might look like. So these are displaying some custom modules that are available that enable you to kind of set settings around your sharing of content.
00:14:21.358 - 00:14:30.162, Speaker A: And this is kind of an optional view that you can opt into depending on the app. So this is leinster. You click a button when you're about to share something and you now have all these options.
00:14:30.162 - 00:14:54.502, Speaker A: You can say, I want to set a limited number of collect for this publication and only for a certain time, and I maybe want to split revenue for anything that gets generated through this with this number of people and blah, blah, blah. These are all custom functionality that's kind of built into a module. And then another big component of Lens is Composability.
00:14:54.502 - 00:15:12.586, Speaker A: Now this isn't really specific to Lens. This is more of like a web three, I would say, component. But it's especially I think, exemplified with what you can do with Lens because with traditional application development, you're building out the client and you're building out the server.
00:15:12.586 - 00:15:24.866, Speaker A: You have to kind of come up with a front end team and a back end team. You need DevOps and all this stuff on the back end. But with Lens, you only need to worry about the front end because we're building out and we're managing the back end.
00:15:24.866 - 00:15:39.974, Speaker A: We're updating the API, we're adding features and we're improving it on a daily basis. And you can worry about building the front end. And what ends up being unlocked with this is that we have teams of one and I will not call out the app itself, but it's one of the more successful apps on Lens.
00:15:39.974 - 00:15:57.134, Speaker A: It's a single developer. They were able to do this because they can only spend their time on one thing, which is building a high quality mobile app. And yeah, that's kind of one of the general ideas that you don't have to kind of build anything on the back end.
00:15:57.134 - 00:16:13.282, Speaker A: You're just kind of focusing on the front end. And beyond that, you can also inherit a user base that isn't kind of something you have to bootstrap from the ground up. If you are a developer building a new app, you might in the past have to start from zero.
00:16:13.282 - 00:16:45.962, Speaker A: But now if you launch an app into the Lens ecosystem, you have a built in user base of 100 x thousand people, which once we remove the permission access it will be even more than that. And then there's this idea also I will kind of call out for composability almost for users. And a good example of what that looks like is that if you are someone that is building up your following on one network and then, for instance, when TikTok came out, you had to kind of start from scratch with this type of protocol.
00:16:45.962 - 00:17:06.470, Speaker A: Your followers essentially are following you around with you to every new app that comes online. So we'll talk now about the tech stack a little bit. So if you wanted to actually build a production ready app, like what would you need to use for Lens? You can choose either the Lens API in a GraphQL client or one of the Lens SDKs.
00:17:06.470 - 00:17:29.130, Speaker A: The SDKs are just now coming to maturation. In the past there were kind of like developer preview beta types of situations, but now they are basically stable. So version one of the actual Lens react hooks SDK was just really kind of like pushed out a few days ago.
00:17:29.130 - 00:17:47.790, Speaker A: We haven't really announced that it's now like officially b one or production ready. But yeah, you can choose between one of the other there and then when you upload a new publication to Lens, you need to store your metadata somewhere. So most of the time people are using either bundler with Rweave or they're using IPFS.
00:17:47.790 - 00:18:05.480, Speaker A: We're seeing more and more people kind of though, leaning towards Bundler. Bundler is a protocol on Rweave that enables permanence and immutability, whereas IPFS is more about immutability but not really permanence. Unless you use something like Filecoin, which is really a little bit more complicated, I think.
00:18:05.480 - 00:18:20.202, Speaker A: And then you might also just use some of the same SDKs that you've used in the past. So Wagme hooks, Ethers, Rainbow Kit, all that stuff, you'll still be using all of that stuff as well. And then on the front end it doesn't really matter.
00:18:20.202 - 00:18:50.374, Speaker A: You can build with React, native, you can build with React, you can build with native iOS, native Android, whatever you want to build with. And most of the applications are starting to implement DMs, so Xmtp would probably be the way to go there because you can already tap into all the other users using Xmtp on other apps. So this would almost be like if you sent a DM on Twitter and you responded on Telegram and then you responded again on Instagram, but it's all into a single inbox and a lot of people really like that.
00:18:50.374 - 00:19:06.922, Speaker A: And there's even an app called Converse that is only for DMs on Xncp, allowing you to kind of pick up all the conversations from all the Lens apps. So we only have a few more minutes. So I'm going to run through these major concepts and then I'm going to actually start building the app from scratch so we can finish this up.
00:19:06.922 - 00:19:17.194, Speaker A: But I'll call out a couple of the main concepts. One is a profile. This is the main object and Lens, and this is like when you sign up, everything that you do afterwards gets attached to this profile.
00:19:17.194 - 00:19:33.060, Speaker A: So when you create a publication, when you comment on someone else's publication, anything that you do gets attached to this profile. And the profile is transferable because it's essentially an NFT. So if you want to move it to another wallet, if you want to burn it, if you want to sell it, you have full control over that.
00:19:33.060 - 00:19:42.370, Speaker A: And publications are creating content. Three main types posts, comments, and mirrors. A mirror is kind of like a retweet.
00:19:42.370 - 00:19:57.770, Speaker A: A post and a comment is probably self explanatory. And these are posted directly to the profile. And the content Uri points to a decentralized storage protocol, typically like, again, Rweav or IPFS, wherever you store that metadata.
00:19:57.770 - 00:20:18.114, Speaker A: And you can even add gated conditions to these publications too, which is pretty cool. So people are building OnlyFans and those sorts of things, but they're also building gated things for like a Dow or token or whatever on chain interaction that might be there. Collects are oops, let me go back.
00:20:18.114 - 00:20:33.170, Speaker A: Sorry. Collects are really interesting, actually, because let's say in Twitter you have a, like a comment and a retweet. In Lens, you have a like, comment, a mirror, and you have a collect.
00:20:33.170 - 00:20:55.422, Speaker A: And a collect is when you take a piece of content that someone's put out there and you mint that into a digital asset, which is essentially like an NFT. And this is where you can add a lot of really interesting custom functionality. So a good example of what people are doing with this, beyond just whatever you might already assume with NFTs and stuff, is that you're able to support people.
00:20:55.422 - 00:21:17.726, Speaker A: And at scale, this is actually a lot of money for a lot of people, but it also enables everyone to kind of participate. So when you think of digital collectibles, you might think of $1,000 or $10,000. But on Lens, since we have hundreds of or tens of thousands of people, over 100,000 people using it, then you only need a few thousand people to collect at a small amount to make a large amount of impact.
00:21:17.726 - 00:21:35.210, Speaker A: So two good examples of this. We had an artist a few days ago drop a song that they had written years ago that they had kind of forgotten about, and they said, hey, I just wanted to kind of throw out this song I'd created a while ago. If you want to support me, you can collect this for like a dollar or $2.
00:21:35.210 - 00:21:53.758, Speaker A: And he had like, I think $3,000 worth of collects from that drop that he just threw out there on there. We also saw a developer who was quitting their job to go focus full time on Lens. Just post a tweet or whatever post on Lens that said, hey, I'm quitting my job.
00:21:53.758 - 00:22:12.102, Speaker A: I'm going to go work full time on this lens front end, you can collect this to support me for $2. And he had I think, around $30,000 of revenue that came in through that publication. That obviously, since it's an on chain transaction, goes directly into his wallet and it took him 5 seconds to write that.
00:22:12.102 - 00:22:30.154, Speaker A: So you can do stuff like that. And when you think of the scale that we're kind of going to eventually see millions of people, possibly tens of millions of people using this stuff, fifty cents, twenty five cents a dollar, types of collects will actually add up to a lot of money. And this just isn't possible on traditional social media.
00:22:30.154 - 00:22:44.702, Speaker A: So what I want to do now is show you how to build an app from scratch. And we only have a couple of minutes, so we're going to do this in just a couple of minutes. So this is a mobile app that is built using Expo, which is a react native framework.
00:22:44.702 - 00:22:58.982, Speaker A: And I want to build out a simple social media application. So I'm going to start by importing a feed of profiles. Oh yeah, that's not showing, is it? I'm going to mirror my screen.
00:22:58.982 - 00:23:27.460, Speaker A: Sorry about that. All right, can everyone see that now? Okay, so we're starting off with a basic mobile app with nothing there. This is literally what you get when you scaffold a new expo project.
00:23:27.460 - 00:23:34.066, Speaker A: And this is where I was. So this is the app. What I want to do is start building out our mobile app.
00:23:34.066 - 00:23:51.186, Speaker A: So I'm going to first import from Lens protocol this profiles component. And this is just going to start us off with a feed of profiles. Now when you log into Twitter, you get a feed of publications and when you click on someone's profile, you get their profile details.
00:23:51.186 - 00:24:17.966, Speaker A: We're building out a similar type of view, but we're starting with the list of profiles for us to view first. So I'm going to go ahead and just add a potting top of like 70 units and I'm going to save that and I'm going to see if my network connection is working okay. I don't know if my network is no, it's working good.
00:24:17.966 - 00:24:25.934, Speaker A: Okay, cool. So this is what we have now and in like two lines of code, we've started off with just a single component. This is rendering a list of profiles.
00:24:25.934 - 00:24:37.158, Speaker A: And what we can do is we can extend this component with all types of different props so we can style this component. We can attach click handlers to follow and on press. And we're about to do that as well.
00:24:37.158 - 00:24:48.342, Speaker A: But this isn't that interesting. Instead we might want to click on a profile, view the profile details and go even further than that. So what I want to do is start off with some navigation.
00:24:48.342 - 00:25:12.850, Speaker A: So instead of just rendering the profiles component I want to import a navigator and I want to render that navigator. And instead of just rendering the profiles component I'm now rendering a navigator that's rendering the profiles component. It's kind of the same view that we have before but now we have the profile header we can click on a component and navigate to the details of that.
00:25:12.850 - 00:25:39.998, Speaker A: So what I want to click on is a user and I want to navigate to that user details. So to do that I'm going to create a new file called View Profile or we'll call that Profile View whatever and this is importing this profile view. So we imported the profiles component plural.
00:25:39.998 - 00:25:52.646, Speaker A: Now we want to import a singular profile. This is going to render an individual user's profile. With this component we can pass in the profile ID, the handle or the wallet address and this is going to render out everything for a profile that we'll need.
00:25:52.646 - 00:26:26.010, Speaker A: And this takes in a few dozen different props that we'd like to pass in. For us though we're only going to pass in the profile and a function that will handle an on comment press meaning we want to view the comments of the publications details that we're about to see. So I'm going to go ahead and save that and then we need to go ahead and import that here and then we're going to add another screen to our navigation that we're going to call Profile View.
00:26:26.010 - 00:26:49.036, Speaker A: And now what we want to do is click on a profile and then boom we're now navigating to that profile and we see that we have all the profile details and we have something nice that kind of gets us started off. I don't like the way this looks though. I'm a big fan of Dark theme so I'm going to go ahead and import Dark theme from the navigation.
00:26:49.036 - 00:27:07.060, Speaker A: But I'm also going to import a component from Lens called the Lens Provider. And this allows us to pass in global configuration to a Lens application. And all we need to do is wrap our main component there and that can also import the theme component.
00:27:07.060 - 00:27:26.268, Speaker A: And then I can now set the theme as theme dark. And now we have a nice dark theme. And if I click on a profile then we see the darkness.
00:27:26.268 - 00:27:53.556, Speaker A: I want to now view comments though because I see that there's like let's see here 100 or 1000 comments whatever there. So the last thing we're going to do before wrapping this up is we're going to have a comments view and we are going to render a feed component from the Lens UI kit and this renders either a feed of profiles or a feed of. Publications.
00:27:53.556 - 00:28:13.650, Speaker A: In this case, we're rendering a feed of publications. And to set up the query and everything correctly, we're passing in two props, one for the query itself and the other for another on Comment Press so we can have a recursive view of the different public, different comments. And I'm over on time, so I'm wrapping this up now.
00:28:13.650 - 00:28:42.110, Speaker A: I will go ahead and render this and then we'll be done. So profile view, comment from Comments view. We click on Comments and now we're viewing the comments.
00:28:42.110 - 00:28:55.160, Speaker A: If they load, there we go. So that's kind of it as far as my presentation is concerned. I had maybe one other thing I was going to go over, but I think we're done on time.
00:28:55.160 - 00:29:05.510, Speaker A: Yeah, that's kind of it. So we're going to be hanging out at the Lens booth the rest of the week. We have swag for anyone that's building on Lens or that's active on Lens.
00:29:05.510 - 00:29:26.260, Speaker A: We have Bounties that are set up for Lens and for Ave. So we have a lot of ideas that we'd like to share for anyone that is looking for something to build. You can go to the Lens Twitter or the Lens on Lens or Lens on Twitter and kind of see a thread that we publish that gives a lot of ideas for developers on what they want to build.
00:29:26.260 - 00:29:44.082, Speaker A: And if you have any questions, like, come talk to us. And then also one last thing I'll throw out. We also have a grants program, so if you want to build something beyond the hackathon, we have up to $15,000 initially available for developers that want to get started building on Lens and need a little bit of money to kind of like take it all the way there.
00:29:44.082 - 00:29:46.270, Speaker A: So that's it. Thank you. Bye.
