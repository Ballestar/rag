00:00:07.370 - 00:00:21.360, Speaker A: Hello everyone. Today we're going to be talking about EPNS, what problem EPNS is solving. And by the end of the video we're going to be doing some demos showing you how you can integrate EPNS into your protocol, into your hackathon project, or into your service.
00:00:21.360 - 00:00:41.626, Speaker A: So as of today, there is no way for protocols to reach out to users through their wallet address. We rely on Twitter or Discord or Telegram to notify users about something that has happened. And if we think about it, that's not how we are used to do in our day to day life.
00:00:41.626 - 00:01:02.558, Speaker A: For example, if I'm waiting for a very important email, I know that I'll get a notification whenever I receive this email. I don't need to keep constantly going to my email provider and refreshing the page, seeing if I have a new email. I'm going to get alerted whenever there is a new email or whenever I'm expecting any deposits into my bank account.
00:01:02.558 - 00:01:12.782, Speaker A: I don't need to go to my bank account. I keep constantly monitoring or checking the balance on my account. I know that I'm going to receive a notification whenever someone has made a deposit.
00:01:12.782 - 00:01:31.640, Speaker A: So for the user experience perspective, it's much better. The users get notified about information they care and they can focus on doing other things instead of constantly checking about a particular information. On Web Three, we still don't have something like this.
00:01:31.640 - 00:01:58.450, Speaker A: And what will be the notifications? For example, in Web Three space, it can be, for example, a governance proposal. Whenever there is a new proposal, it would be nice for users to get notified in their wallet addresses instead of the users having to constantly be checking, Discord or Twitter about a new proposal. This definitely would increase community engagements and participation into proposals for DeFi.
00:01:58.450 - 00:02:19.870, Speaker A: It would be nice for users to receive notifications before they are liquidated. This definitely would save a lot of users funds and for a user experience as well. It's a better experience for the user in general to actually get notified whenever they are about to lose their funds for ENS.
00:02:19.870 - 00:02:49.122, Speaker A: For example, in the Uns case, it would be nice for users to receive a notification seven days before they are about to lose their ENS domain. And just to reiterate notifications, they can be both based on on chain events, but they also can be based on off chain events. For example, if you have a newsletter and you want to send a newsletter to your user's wallet address, you can totally do this on the demo, we're going to show you guys how to do this.
00:02:49.122 - 00:03:12.620, Speaker A: But just to reiterate, the notifications don't need to be necessarily on on chain events, but they can be also based on off chain events and in this case, on the user letter. You're going to be sending a notification to the users about your newsletter, to your user's wallet address. And once the user clicks on the notification, the user is going to get redirected to your newsletter page.
00:03:12.620 - 00:03:45.338, Speaker A: So the solution that APNS is building, we are building an open communication layer. So we're working on nodes that community we will eventually be able to run the nodes and they're going to get incentivized by running them. And any community member will be able to run the nodes and any community member or any person can query those nodes and fetch the information and actually verify the notifications have not been tampered with the notifications.
00:03:45.338 - 00:03:59.958, Speaker A: They are dynamic. So what, you send notifications completely up to the protocol to decide the notifications. They can be a video, they can be an image, they can be pretty much anything.
00:03:59.958 - 00:04:17.802, Speaker A: There is no limitation in what the notifications can be and most importantly, there is no limitations on how you're going to notify your users. If you want to notify your users based on on chain events you can or off chain event you can, how often you're going to notify your users, there is also no problem. It's all up to the protocol.
00:04:17.802 - 00:04:41.750, Speaker A: Decide how they want to interact with their users. The solution is also multi chain. Even though our name is Ethereum push notification service, it's because we started on Ethereum, but we're going to be across all EVM chains and also non EVM chains sending notifications and receiving notifications, they're gasless.
00:04:41.750 - 00:05:05.306, Speaker A: So if you want to receive a notification, all you have to do is to sign a message to show that you are interested in receiving notifications for that particular channel. For example, in the Ave channel, you can just sign a message saying, okay, I want to receive notifications for the Ave channel for my liquidation alerts. As an end user, you pay nothing and also sending notifications.
00:05:05.306 - 00:05:15.482, Speaker A: If you send notifications on the DAP or using the SDKs, they're completely gasless. Only the on chain notifications. If you want to send notifications using your smart contract, you have to pay gas.
00:05:15.482 - 00:05:26.946, Speaker A: But besides that, everything's gasless and it's platform agnostic delivery. You can receive notifications anywhere. For example, we provide like a mobile application.
00:05:26.946 - 00:05:56.506, Speaker A: We have our own tab, we have a browser extension you're completely free to receive to see the notifications there. But we also and we encourage protocols to use we have SDKs, so we definitely encourage protocols, user SDKs to receive notifications right on your DAP. For example, the users never need to leave your DAP to receive notifications or more importantly, the users never need to leave your DAP to opting to receive the notifications.
00:05:56.506 - 00:06:17.910, Speaker A: All of this covered on our demo that we're going to do on the SDK. So long story short, the user never needs to leave your DAP to opt in to receive notifications and also never need to relieve your DAP to receive the notifications. We also recently announced something called SNS module for push delivery nodes.
00:06:17.910 - 00:06:37.238, Speaker A: So this allows you to add logic in a way like to the notifications so for example, our push delivery nodes, they're going to be calling one of your webhooks whenever there is a new notification. And based on the notification, you can react. For example, you can build a telegram bot, you can build a WhatsApp bot.
00:06:37.238 - 00:06:57.858, Speaker A: You can build pretty much anything. You can display your own push notifications in Cure mobile application. If you already have a mobile application, you can just react to the events that the push delivery nodes are going to call your API, you take this notification and you can send push notifications to your already existing mobile application if you want.
00:06:57.858 - 00:07:38.960, Speaker A: This is called SNS module for push delivery nodes and we have a very extensive documentation for all those ways of receiving notifications into Docs APNS IO developers. So, as I said before, there are multiple ways how you're going to notify your users is up to the protocol. So for example, I give an example for Dows whenever there is a new proposal liquidation alerts, whenever there is a new farming, so users can start providing liquidity into the liquidity pools NFTs, for example, whenever someone places a bid into your NFT, it would be nice to get alerted by this event.
00:07:38.960 - 00:08:09.960, Speaker A: Or if you're playing a gaming, you get notified into your wallet address whenever there is a new community event so you can participate into your gaming community. Those are some, we call them Friends or VNS. So those are the protocols that definitely helped us to shape the notifications and make the protocol completely agnostic and most importantly, flexible on how we notify the users and what we notify the users.
00:08:09.960 - 00:08:34.480, Speaker A: So we can definitely see each use case for those we call Friends of EPNS into our blog. So for each protocol we provide an article explaining how they are using the notifications to engage with the community or to notify users. So definitely head over to the PNS blog to reach out on how they are using notifications into their protocols.
00:08:34.480 - 00:08:45.508, Speaker A: We're very active in hackathons, so we always have hackathon Bounties. We have a push grants program. We have $1 million.
00:08:45.508 - 00:09:07.768, Speaker A: If you are building a protocol project and you want to get funded to keep working to this protocol into your project, please feel free to apply for a grants program. It's completely open and transparent, so anyone can see and participate into the postgrance program. So, a little bit how the protocol works under the hood.
00:09:07.768 - 00:09:30.580, Speaker A: So first of all, we have on the left here, we have the EPNS core contract. So the EPNS contract resides on Ethereum and it's responsible for the channel creation, for governance, channel state changes, and as well as all the incentives mechanism. And just to make sure, this contract here, it lives on ethereum.
00:09:30.580 - 00:09:41.400, Speaker A: We have the EPNS communication contracts. And those contracts, they are completely multi chain. They live on EVM chains and also non EVM chains.
00:09:41.400 - 00:10:01.944, Speaker A: And those are the contracts whenever you want to send a non chain notification. Wherever your smart contract is deployed, you're going to be calling the EPNS communicator contract deployed on that specific chain that your smart contract is deployed. Here in the middle, we have the push nodes.
00:10:01.944 - 00:10:18.368, Speaker A: So the push nodes, they are responsible for validating all the notifications, the events, they do validation, they see if the notification is actually correct. This is following the standard. And if it is the push delivery nodes, they're going to dispatch the notifications to the end users.
00:10:18.368 - 00:10:30.984, Speaker A: So the end user is going to receive the notifications tied to their wallet addresses. So that's pretty much it. Those are the socials that you can reach out to us.
00:10:30.984 - 00:10:37.400, Speaker A: We're going to be doing some demos now and showing you guys how you can integrate into EPNS, into your own protocol.
00:10:40.380 - 00:10:48.136, Speaker B: And now let's do some demos. First of all, we'll see how to create a channel on push protocol. Previously EPNS.
00:10:48.136 - 00:11:08.816, Speaker B: We'll learn how to send notifications manually using the DAP smart contract, the SDK in your backend, or using a scaffold solution called Showrunners. We'll also see how to customize notifications with content markdown images and videos. We'll finish by doing a demo on how to integrate notifications into your own DAP.
00:11:08.816 - 00:11:13.380, Speaker B: And also we will be receiving notifications for Web two five platforms.
00:11:15.080 - 00:11:29.944, Speaker A: And now let's create a channel on EPNS. One analogy that I like to make is think about a YouTube channel. So whenever you create a channel, users, they can subscribe to your channel and they are going to get notified whenever you upload a new video.
00:11:29.944 - 00:11:43.980, Speaker A: EPNS channels work the same way. You're going to create a channel and users, they can opt into your channel to receive notifications. So to create a channel on the testnet, you go to staging EPNS IO.
00:11:43.980 - 00:12:06.784, Speaker A: You click here on the left menu here on Create Channel. So on my wallet here, I already have ETH, and I claim that the free die here, but if you need die or ETH, just click on these buttons and you're going to be redirected to the corresponding faucet. So, yeah, I already have if today.
00:12:06.784 - 00:12:20.392, Speaker A: So just click on next. Yeah, let's create a channel name. So it's going to be demo tutorial, creating demo tutorial.
00:12:20.392 - 00:12:39.410, Speaker A: Channel descriptions are going to be creating a channel channel website URL. That's the URL about your protocol, about your website. So in our case, we can do Youtube.com.
00:12:39.410 - 00:12:46.390, Speaker A: Let's click on next. So we need to upload an image. So I have an image here set.
00:12:46.390 - 00:12:56.924, Speaker A: So I'm going to upload this sword here. Let's crop the image and let's create the channel. So we're going to need to do two transactions.
00:12:56.924 - 00:13:59.882, Speaker A: The first transaction is to approve the die, and the second transaction is to create the channel. Once the channel is created, I'm just going to copy the address here. I'm going to go to my other browser, and what I'm going to do, I'm going to simulating another user here opting to the channel that I just created to receive the notifications.
00:13:59.882 - 00:14:13.702, Speaker A: So I'm going to here on the search, I'm going to search for the newly created channel, which is this one. I'm going to opt in to receive the notifications. So all I have to do is to sign a message.
00:14:13.702 - 00:14:30.486, Speaker A: So opt in and opt out to receive notifications. They are completely gasless, so no transactions fees involved. So since here, the browser on the right has already opting to receive notifications to the channel that I created, so all I have to do now is to send the notifications.
00:14:30.486 - 00:14:36.710, Speaker A: So I come here. I click on send notifications. Here on the left there are three types of notifications.
00:14:36.710 - 00:14:58.110, Speaker A: So I can send broadcast notification, which means I'm going to send notification to all subscribers to my channel. I can send a targeted notification, which means that I'm going to send notification to a particular wallet address that is subscribed to my channel. Or I can send a subset notification, which is I can send notification to an array of wallet addresses.
00:14:58.110 - 00:15:16.838, Speaker A: In this case, I'm just going to send a broadcast notifications. I'm going to create a title. Here is hello there notification message can be hi, yeah, we have here in the bottom a preview of notification.
00:15:16.838 - 00:15:24.410, Speaker A: So let's send notification. So just have to sign a message. Send notification is also gasless.
00:15:24.410 - 00:15:35.582, Speaker A: Just sign a message and the notification has been sent. So if I come here on the right, click on the inbox. Notification should be here as it is.
00:15:35.582 - 00:15:45.380, Speaker A: And also on this browser here, I have installed the EPNS browser extension. So if I come here, I see also the notification here.
00:15:49.350 - 00:16:02.630, Speaker B: Now let's see how you can send notifications from your smart contract with Push Protocol. First head over to push. For hackers repo, go to Send Notifications folder.
00:16:02.630 - 00:16:16.934, Speaker B: On this folder there are multiple examples on different ways on how you can send notifications. You can send notifications using the SDKs subgraphs. You can send manual notifications.
00:16:16.934 - 00:16:28.830, Speaker B: You can send notifications using the Rscafold solution called Showrunners. In this case, for this demo, we're going to be sending notifications using smart contracts. So let's go over this folder.
00:16:28.830 - 00:16:49.474, Speaker B: Let's go for the demo, copy the content of this token modifier contract. So let's copy the content of this contract and let's explain what this contract is doing. So I'm going to call this contract push.
00:16:49.474 - 00:17:01.530, Speaker B: Sol. Let me copy here. So what this contract is doing is we're importing the USD 20 token contract form open Zeppelin.
00:17:01.530 - 00:17:17.226, Speaker B: We're defining the interface here for the communicator contract, which is the contract we're going to be calling. And we're going to be calling the Send notification function to actually send the notifications. We're defining here the Push contract.
00:17:17.226 - 00:17:50.598, Speaker B: The Push contract is an ERC 20 token which has a constructor, and upon deployment, we're going to be maintaining 1000 tokens to the deployer of this contract. We have here a public address that we call Epnscom address. This address is going to depend on the chain your contract is deployed for this demo, we're going to be deploying our contract into Coven so let's get the corresponding address, the correct address for the communicator contract in Coven.
00:17:50.598 - 00:18:36.040, Speaker B: So let's go to Push documentation docs Push we have the communicator address deployed to multiple chains but in our case we are interested in the Covent Chain. So let's go over here and let's copy this contract address here. Let me paste it here so I have the correct address here the Push contract we are overriding the transfer function from the ERC 20 and what this function is doing is we're calling the internal transfer function here and after the transfer is done, we're going to be calling the Communicator contract descent notification function here.
00:18:36.040 - 00:18:59.280, Speaker B: First, we're going to be sending notification from this contract address here which I have selected here. So for this, let's get the correct address for the channel that we have previously created. So I have a channel here that I have already created so let's copy the channel address.
00:18:59.280 - 00:19:47.582, Speaker B: Let's head over to the contract and let's change this address here with the correct address from our contract, the two is the recipient of the notification and here is the notification itself. If you go over to Docs Push, we go over for each property here and we explain how you can prepare and set your notification payload. I just want to point out on this example we are sending a target notification and the notification content notification Body is going to have this content here, but please, for more information go to docs push here below.
00:19:47.582 - 00:20:22.570, Speaker B: There are just two helper functions that we have created just to prepare the notification so the notification appears good for the recipient. Let's compile our contract so press command s the contract was successfully compiled so now let's deploy the contract I have selected here injected provider MetaMask we're indeed on the Covo network. Let me select the correct contract, in this case the Push sole contract.
00:20:22.570 - 00:21:23.970, Speaker B: Let's deploy the contract. Let me confirm the transaction. The contract was successfully deployed so let's get the contract address.
00:21:23.970 - 00:21:49.800, Speaker B: So the contract was deployed on this address here. So after contract deployment, we just need one more step which is head over to your channel, your channel that you're going to be sending notifications from click Add Delegate. Now you're going to set as delegate the contract that you have just deployed.
00:21:49.800 - 00:22:16.160, Speaker B: Click on Add Delegate. Just confirm the transaction. We have successfully add a new delegated so before sending the notification, let me opt in to receive the notifications.
00:22:16.160 - 00:22:18.916, Speaker B: So we're going to be sending the.
00:22:18.938 - 00:22:19.620, Speaker A: Notification.
00:22:21.560 - 00:22:36.852, Speaker B: To this wallet here but this wallet is not opting to the channel so let's opt into the channel. So first let me copy the contract address which is here. Let's head over to the other browser.
00:22:36.852 - 00:22:53.544, Speaker B: Let me search here for this contract. Let me opt in to receive notifications from this hello channel. Sign a message I have successfully opt into the channel.
00:22:53.544 - 00:23:02.328, Speaker B: Perfect. So let me copy this contract at this wallet address here. Let's go back to Remix.
00:23:02.328 - 00:23:19.920, Speaker B: Let's expand our deployed contract and let's call the transfer function, which is this function here. So let's expand here. So let's send to this address here the address that I just opt into the channel.
00:23:19.920 - 00:23:43.550, Speaker B: Let's send 500 tokens. Let's click on transact. Let's confirm the transaction has just been approved.
00:23:43.550 - 00:23:56.930, Speaker B: So just as refresh, we call this function. We're going to be transferring the tokens and after the transfer is token, the transfer is successful. We're going to be sending the notification.
00:23:56.930 - 00:24:07.400, Speaker B: So let's go back to this to the other browser. Let's click on Inbox and we should see the notification here. As we can see.
00:24:07.400 - 00:24:15.450, Speaker B: So the notification has been successfully sent from the smart contract to the end user.
00:24:19.640 - 00:24:36.040, Speaker A: Now let's see how we can send notifications using the Showrunners. Showrunners is a scaffold solution that allow developers to quickly start send notifications using EPNS. To get started, just go to docs EPNS IO on the how to set up Showrunners section.
00:24:36.040 - 00:28:21.570, Speaker A: First of all, all you need to do is to clone the repository. Let's head into the folder, install the requirement query dependencies. Once the dependencies are installed, let's open the project.
00:28:21.570 - 00:28:40.740, Speaker A: So as we can see here in the documentation, after we need to copy the env sample file, rename it to env, and do some changes on this. So let's do this. So I'm going to create here a env file.
00:28:40.740 - 00:29:06.512, Speaker A: I'm going to copy all the content from here and I'm going to paste here. So we're going to do sending notifications on the testnet environment so we can keep this variable as it is for log level. Let's add debug infruwer project ID and inferior project setting secrets is not needed now.
00:29:06.512 - 00:29:29.930, Speaker A: So we can just set as no and the same thing for the advanced configurations. As of now, we're not going to need to use them, so we just set them to no. Once you do this, you open the source folder and the Showrunners folder here.
00:29:29.930 - 00:29:47.848, Speaker A: As you see, as of now, the Showrunners folder is empty. Note that there is also a folder called Sample underscore Showrunners. Once you open, you see a lot of boilerplate code start running and sending your notifications.
00:29:47.848 - 00:30:07.010, Speaker A: For example, we have here an example on how to send notifications for ave how to send notifications for ENS domains. We have here Hello World boilerplate code and proof of humanity. In our case, we're going to be running the Hello World.
00:30:07.010 - 00:30:25.090, Speaker A: So all we have to do is take the Hello World folder drag and drop here on the Showrunner folder move. Yes. So it is here.
00:30:25.090 - 00:30:53.476, Speaker A: Once you do this, the last change that you have to do here, you go to this Hello Worldkeys JSON file and you added here the information related to the channel that you have created. In this case, we are sending notifications on the testnet environment. So I have here that's the wallet that I have created a channel on the staging environment.
00:30:53.476 - 00:31:05.404, Speaker A: So this wallet, I already have created a channel on the previous demo. So the first thing that I need is the private key of this wallet. So all I have to do here is come here.
00:31:05.404 - 00:31:37.080, Speaker A: Account details, export private Key let me write my MetaMask password. Once it's done, I just copy the private key and I'm going to paste here, paste it here and also here for the chain ID. Since we are sending notifications on the testnet environment on the Coval network.
00:31:37.080 - 00:31:54.190, Speaker A: So we're going to add here, we just leave EAP one five five, column 42. And that's pretty much all you need. So let's go head over to the terminal to start running this.
00:31:54.190 - 00:32:21.930, Speaker A: So first of all, we need to start running Docker. So we do Docker compose up. Once Docker has run, you open a new terminal and you're going to type NPM Start.
00:32:21.930 - 00:32:44.770, Speaker A: Once you do this, you see the Share Runners framework now is starting. So let's start sending our first notification. So here on the Hello World folder, we see a Hello World routes file.
00:32:44.770 - 00:33:12.090, Speaker A: So what we are going to do, we're going to be sending a post request to this endpoint so we can start sending the notifications. So for this, in my case, I have postman open here. So how to set up this URL? So we know here that the port, the server is listening on the port 55, 54, 32, which is this port here.
00:33:12.090 - 00:33:33.470, Speaker A: And after we just append this. So the slash APIs is on the loaders file. If you go here to the loaders express here config API prefix, that's the APIs that you see here.
00:33:33.470 - 00:33:38.960, Speaker A: And then showrunner. Hello, world. You can find it here.
00:33:38.960 - 00:33:51.140, Speaker A: Showrunner Hello Word test Notifications and this is a post request. And this is what we have here. So all we have to do now is just send a request.
00:33:51.140 - 00:33:58.970, Speaker A: As we can see, we got success. Two, one, one. That means the notification has been sent.
00:33:58.970 - 00:34:17.390, Speaker A: So to test this, I'm going to open this new old browser here. So this is a wallet address that already have opting to the channel that I have just sent a notification. And which channel did I send notification from was from the channel that I set the private key here.
00:34:17.390 - 00:34:29.248, Speaker A: So all I have to do here is go to the inbox. Let me refresh. And here is the notification that I've just sent.
00:34:29.248 - 00:34:37.840, Speaker A: Demo Tutorial Channel. Hello, World. Now let's see how to send customizable notifications on EPNS.
00:34:37.840 - 00:35:10.060, Speaker A: Once your channel is created, you click on Send Notifications tab on the left menu and you're going to get redirected to this page. On this particular demo, we're going to be sending a broadcast notification which means a notification to all subscribers to your channel. We're going to be adding a custom title to the notification, and the title is going to be My New Pets for the notification message, we're going to be sending a customizable notification, which means we're going to be adding this message here.
00:35:10.060 - 00:35:30.710, Speaker A: Here's my dog on bolt, as we can see here. For a full list for all the support notification content, head over to Docs EPNS IO on the Notification Content section. And we have here a full list of all the supported types as well as examples of how to use them.
00:35:30.710 - 00:35:57.600, Speaker A: We're going to also be adding a media to the notification, and we're going to be sending this image, which is my new dog. We're also going to be adding a Call to Action link. This link is whenever the user clicks on your notifications, they're going to get redirected to this link here.
00:35:57.600 - 00:36:17.122, Speaker A: Once the notification is set, we just click on Send Notification. All we have to do is sign a message and the notification was sent. So now here on the browser on the right, I have a user that has already opted into my channel.
00:36:17.122 - 00:36:36.460, Speaker A: So once the user head over to the Inbox section, we're going to see the notification. Here you see the notification has a blue border, which means it has a Call to Action link. Once I click on the notification, I'm redirected into this case to a YouTube video.
00:36:36.460 - 00:37:00.610, Speaker A: On this demo, we're going to see how you can use the PNS SDK into your DAP. We're going to be fetching all the notifications from a particular wallet address. And also we're going to be creating a button on the screen so users can opt into your channel so they can start receiving notifications.
00:37:00.610 - 00:37:25.194, Speaker A: So first of all, head over to Docs EPNS IO developers. Go to the EPNS SDK section here on the left on this page, we have added this table here. And on this table we have all the features that the SDK provides, the description for each feature, and the corresponding package that you're going to need to import to do this.
00:37:25.194 - 00:37:42.090, Speaker A: And also we added here the target platform if this feature can be used on the UI, or if the feature can be used on the server. For example, we can use the SDK to send notifications. We can use the channel, the SDK to opt in and opt out to notifications.
00:37:42.090 - 00:37:51.998, Speaker A: And this is what we're going to be doing in this demo. We have the notification component. We're going to be using this to display the notifications in a beautiful way in the UI.
00:37:51.998 - 00:38:03.640, Speaker A: And I have other elements here so you can take a look. Let's go over to fetching user channels, details. That's what we're going to be doing today.
00:38:03.640 - 00:38:17.178, Speaker A: So here displays how we can fetch the notifications from a particular user. So note that we are calling the Getfeeds API from the EPNS SDK. The user property here.
00:38:17.178 - 00:38:44.850, Speaker A: All we're adding is the user wallet address, as we see here, and we add this prefix before the wallet address, which means that we're on the Ethereum chain. The chain ID is 42, which means that we are on the Coven testnet. So we're fetched all the notification from this wallet address on Coven testnet and the staging, because that's the testnet.
00:38:44.850 - 00:39:06.700, Speaker A: I have created a sample code here so we can go over it together. So this sample code is going to be provided in the description so you guys can take a look at your own time. So what I'm doing here, let's go over here to this return section here.
00:39:06.700 - 00:39:24.900, Speaker A: What we're doing here, we're just iterating over all the notifications and we are passing the notifications to these notification components. So first of all, let's take a look of what is these notifications here, they're just an array. And this array set right here.
00:39:24.900 - 00:39:41.938, Speaker A: So all I did is add it here under user effect. So whenever the application starts, I'm going to be calling this notification function here. And all it's doing, I'm calling the same Gatfeeds API as we saw in the documentation.
00:39:41.938 - 00:39:49.254, Speaker A: So what I did, I copied this. I pasted here the recipient address. I just added the address here.
00:39:49.254 - 00:40:06.494, Speaker A: One of my address that I have, that I have already opting to a particular channel, the environment staging. And I just limited myself to five notifications so I can display beautifully on the UI. So once I set notifications here, the notifications are set here.
00:40:06.494 - 00:40:20.130, Speaker A: Once the application starts, if we scroll down, we see. We're then passing all the notifications fetched from the SDK and passing to these notifications component. Let's go over inside this component.
00:40:20.130 - 00:40:41.240, Speaker A: For this component here, I took this code here from the documentation itself. So on the documentation there is a link to the GitHub with a lot of examples on how you can display beautifully the notifications on the UI. So also this GitHub repo is also going to be on the links below.
00:40:41.240 - 00:41:02.320, Speaker A: It's just one way that I did to display the notifications in a very beautiful way. So you as a developer don't need to spend time formatting the notifications, but just fetching the notifications themselves. But all the links to this code here are going to be provided and also examples on other react components that you can add to your application.
00:41:02.320 - 00:41:20.840, Speaker A: So what we're doing, we just take notifications, iterating over them and displaying on this notification item. And look, notification item here is a component that I just imported from the SDK UI web. So let's start the application.
00:41:20.840 - 00:41:41.980, Speaker A: So the application has already started. Let's come here and here. So we're just iterating over the five notifications and we are passing the notifications to the notification item component here.
00:41:41.980 - 00:41:54.118, Speaker A: And this notification item is a component on this library here. So once I pass them to this component, well, the notifications, they are. All formatted on the screen, right, and you see the notifications.
00:41:54.118 - 00:42:25.482, Speaker A: They have a blue border, which means they have call to action links, which means that once you click on the notification, the user is redirected to the Call to action link that you set it. Let's take a look now on how the users can opt into your channel. Of course, users can go to the APNS tab and opt into your channel in the APNS tab, but it's way better for user experience perspective.
00:42:25.482 - 00:42:44.046, Speaker A: So for users to opt in to receive notifications right on your DAP itself. So users don't need to go to DPNS to opt in to start receiving notifications. So in this example here, just to recap, the users can start receiving notifications right on your DAP.
00:42:44.046 - 00:43:02.070, Speaker A: And also we're going to see how users can opt in to receive those notifications on your DAP. Let me just commit all this and commit this for this. All I'm doing, I'm just following the steps on this section here in the documentation.
00:43:02.070 - 00:43:19.310, Speaker A: We have a section here called Opt in and Opt Out. Once click here. All I'm doing, I'm just following the steps here, right? So all I'm doing, I copy this function here and this function, all it's doing, going to opt in to a channel that I have previously created.
00:43:19.310 - 00:43:43.218, Speaker A: So I copy this code here and I pasted this code here. I created a function called Opt in Channel that I just copy and paste and change the signer here to the signer that is connected into the browser. So I just hard coded here a channel address that I have created.
00:43:43.218 - 00:43:51.720, Speaker A: The signer is the user currently logged in into the browser. Get the user address and I call this function. So let's see how it works.
00:43:51.720 - 00:44:06.960, Speaker A: Let's go to the depth. See the button here? Once I click it, there is a message that pops up. Now, if I sign this message, then I'll start receiving notifications from your channel.
00:44:06.960 - 00:44:28.560, Speaker A: So users don't need to leave your DAP to start receiving notifications. They can see notifications on your DAP, and now they can also opt in to receive notifications right on your DAP. On this demo, we're going to be using the EPNS SDK to send notifications and also to receive notifications.
00:44:28.560 - 00:44:46.520, Speaker A: So for this, we need to import the EPNS SDK and the EthereumJS library. We're going to need the private key of the wallet that created the channel on the APNS tab. In this case, I added the private key on the env file.
00:44:46.520 - 00:45:04.430, Speaker A: You're also going to need the channel address. And you see the channel address, it's following the Kype Ten format. So you just add EIP one five five column chain ID, which in this case is 42 column, the channel address.
00:45:04.430 - 00:45:18.108, Speaker A: In this demo, we're going to be sending a notification to this wallet address here. So I just pasted here as the recipient address variable to send notifications. It's straightforward.
00:45:18.108 - 00:45:41.130, Speaker A: All you have to do is call the send notification function. We're going to pass the notification information and most importantly, the notification payload notification is going to have a title, a body, and in this example a call to action. So whenever the user clicks on the notification, the user is going to get redirected to this URL, in this case a YouTube video.
00:45:41.130 - 00:45:57.920, Speaker A: Once the notification is sent, we're going to be sent. We're going to just console a message. And here in the bottom we have a get notifications functions and in this case here, it's just to display how you can fetch notifications from a particular wallet address.
00:45:57.920 - 00:46:08.588, Speaker A: In this case you just call the get feeds function. You pass the wallet address. Following the captain format here you pass the environment.
00:46:08.588 - 00:46:37.180, Speaker A: Since we are sending a notification on the staging environment, you just pass staging here and here I'm just passing those limits and page to fetch the latest notification sent. And here on the bottom we're just calling those two functions above to run this just test node index JS. So we can see the notification has been sent and this is the notification that was fetched by the push storage node.
00:46:37.180 - 00:46:56.860, Speaker A: So to see the notifications, there are multiple ways where you can see the notifications. You can see the notifications on the APNS tab mobile application browser extension. You can integrate with the SNS module and receive the notifications directly from the push delivery nodes into your webhooks.
00:46:56.860 - 00:47:10.992, Speaker A: On this example here, I'm going to show you how to receive notifications on the browser extension. So you see here the notifications. It has this blue border here that once I click it, I am redirected to the video to the call to action.
00:47:10.992 - 00:47:26.140, Speaker A: We are now going to do a demo on SNS module for push delivery nodes. It allows very easily to integrate push notifications to your platform of choice. Whether it's a wallet browser extension, telegram, Twitter, discord or any app.
00:47:26.140 - 00:47:43.490, Speaker A: Push delivery nodes are a decentralized solution to enable webtree to web two bridging. They allow any platform to receive communication from push storage nodes. The push storage nodes, they are responsible for validating and indexing all communication and tying them to your wallet address.
00:47:43.490 - 00:48:11.220, Speaker A: The SNS module is a mid level solution that eliminates all the heavy load of running a node or syncing information and gives you webhooks that you implement to start receiving notifications, chats or any other web three communication in your software. It works by writing all the user's webtree wallet communication into Amazon SNS as a topic. You as a developer only need to subscribe to the topic to start receiving those notifications.
00:48:11.220 - 00:48:34.336, Speaker A: This eliminates the majority of infra building on the developer side when they are trying to create a POC out or ensure instant integration to web three notifications. So I've got here a demo and on this demo we're going to be doing a Telegram bot, right? So since we get the notifications from push delivery nodes. What we do with those communications, we can do anything we want.
00:48:34.336 - 00:48:49.620, Speaker A: In our particular case, we're building a telegram bot. So just before going over the code, all the code here, I'm going to provide the links by the end so you guys can dive deep into the code. And also I'm going to provide the link for the documentation with further explanation.
00:48:49.620 - 00:49:09.000, Speaker A: So here we just import everything, all the imports necessary to run the telegram bot. And here is the webhook that we are creating. So whenever there is a new communication on the push delivery node, the SNS are going to be calling this webhook.
00:49:09.000 - 00:49:36.900, Speaker A: And what this webhook is doing, all it's doing is taking the data, parsing the data. We're validating the payload received by SNS if the payload is of type notification. In our particular case, since we are building a telegram bot, we're just going to take the payload and we're going to be sending the notification to the telegram, to the telegram API.
00:49:36.900 - 00:49:52.170, Speaker A: So here, that's the EPNS tab. So I already have created a channel, right? So now I'm going to send a broadcast notification to all the subscribers of my channel. So I'm going to send them a message.
00:49:52.170 - 00:50:03.660, Speaker A: Hello world. The notification message is going to be SNS demo. Here we have the preview of the notification.
00:50:03.660 - 00:50:12.988, Speaker A: We're going to now send the notification. All I have to do is sign the message. It's completely gasless to send the notifications.
00:50:12.988 - 00:50:29.076, Speaker A: The notifications have been sent. So if we come here back to the telegram bot, we see indeed that we received a notification. And if you come here to the telegram, we have received a notification here.
00:50:29.076 - 00:50:40.996, Speaker A: You see, we're also receiving a lot of other notifications here. But the notification that we are interested in is this SNS demo here. Yeah, those are the links.
00:50:40.996 - 00:51:00.430, Speaker A: I'm also going to provide you guys a link to our article that we posted here. There is information about further explaining what the SNS module is, what the push delivery nodes are, what is the push storage nodes, so on and so forth. So you guys can dive deeper into this.
00:51:00.430 - 00:51:08.480, Speaker A: There is also the GitHub repo here. It's going to be on the links as well. And also the links for our documentation.
