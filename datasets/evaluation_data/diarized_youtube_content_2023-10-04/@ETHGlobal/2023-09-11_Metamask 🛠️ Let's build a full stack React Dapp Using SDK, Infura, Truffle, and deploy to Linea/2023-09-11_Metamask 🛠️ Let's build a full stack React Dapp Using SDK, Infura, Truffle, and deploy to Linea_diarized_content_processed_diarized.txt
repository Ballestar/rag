00:00:07.290 - 00:00:17.134, Speaker A: Hello everyone. My name is Eric Bechard and I am the MetaMask Developer Relations Manager. And today we have a great workshop for you.
00:00:17.134 - 00:00:40.510, Speaker A: It's the MetaMask SDK plus linear workshop. Today we're going to be starting with a Veet application and generating a react and TypeScript DAP, and that is the bulk of the workshop. We're going to build a full stack react DAP using the SDK infura Truffle and we're going to deploy to Linear.
00:00:40.510 - 00:00:50.990, Speaker A: Now, you can use the code that we have in this workshop. You can use the same tools we have. You can also use things like hard hat or whatever.
00:00:50.990 - 00:01:01.870, Speaker A: It's just a quick configuration file change. But yeah, let's go ahead and get into this and get started. So again, my name is Eric bashard.
00:01:01.870 - 00:01:15.742, Speaker A: This is my title here developer Relations Manager at MetaMask. And you can find me on Twitter, telegram, GitHub, Lens, ETH, all of the above. Probably even some more places like Reddit, et cetera.
00:01:15.742 - 00:01:34.726, Speaker A: As http junkie. That's at HTP J-U-N-K-I-E my DMs are always open. As Developer Relations, we are your front door to the product and engineering teams pretty much at any company or any product, but especially here at MetaMask and Consensus.
00:01:34.726 - 00:02:05.010, Speaker A: So whether it's a question about MetaMask, one of our specific MetaMask features or products, or maybe it's something else in the Consensus lineup of tools, it could be linea, it could be infura, whatever, just come ask us. Our DMs are always open and that's what we're here to do, answer your questions or if we can't answer those questions, to find the right people to do that. So what we'll be doing in the workshop is cloning down an existing GitHub repo.
00:02:05.010 - 00:02:15.714, Speaker A: This repo uses the MetaMask SDK. That's mostly what we're going to be focusing on here is kind of getting this DAP working. It's mostly going to be configuration.
00:02:15.714 - 00:02:34.366, Speaker A: We don't have enough time to build the application from scratch, nor is that really kind of the scope of this workshop. But what the SDK does is it allows you, your users to connect to the MetaMask browser extension or MetaMask Mobile. So it gives the user that option, which is really cool.
00:02:34.366 - 00:02:58.278, Speaker A: Previously, if you were connecting adapt to your MetaMask wallet, you typically only had the ability to connect them to the browser extension. You could use other tools out there like a wallet connect or something like that to connect to MetaMask Mobile. But pretty much all you have to do now is instantiate the MetaMask SDK inside of your project.
00:02:58.278 - 00:03:13.530, Speaker A: And then when you call ETH underscore Request accounts, which you kind of have to do in order to connect to MetaMask, it gives that user that option. And we'll see what that looks like here in just a few moments. First we're going to go through all the slides.
00:03:13.530 - 00:03:26.894, Speaker A: And here, if you want to take a screenshot, these are all the links that you can get to our GitHub repo. That's the first link at the top. The slides, which you're looking at right now, is the second link.
00:03:26.894 - 00:03:41.780, Speaker A: Finally we'll get to a point where we're going to explain Linea a little bit. It's a L two ZK roll up, created by consensus. And I'll do as good as a job as I can at explaining what linear is.
00:03:41.780 - 00:03:52.050, Speaker A: But we do have a really good linear explainer little workshop as well. You can find lots of them on YouTube from our Deverel. Emily Lin.
00:03:52.050 - 00:04:14.762, Speaker A: So, yeah, screenshot this and take a look at these various URLs if you want to grab the resources for this workshop. All right, so the agenda so we have a demo app that we're going to be cloning down and basically configuring. We have a review of Linea, which will just take a few moments.
00:04:14.762 - 00:04:33.250, Speaker A: Again, if you want to go a little bit deeper into linear, you can check out Emily Lens explainer which we have linked to on the previous slide right here. Second link as well. We're going to review the SDK basics in our project.
00:04:33.250 - 00:04:40.674, Speaker A: We're going to clone the workshop project. We're going to install all the dependencies. We're going to configure all the environment variables.
00:04:40.674 - 00:04:51.610, Speaker A: We're going to review the blockchain and web workspaces. So those are different folders within our workspace. We're going to then build and deploy to linear testnet.
00:04:51.610 - 00:05:12.394, Speaker A: We will test the front end application. So from Minting and testing the contract and wallet interaction is our state from our wallet in sync with our application, et cetera. The demo, the demo will look a little bit like this when we're using the SDK.
00:05:12.394 - 00:05:28.134, Speaker A: There's a few things to remember. If your users have already connected with the browser in MetaMask before, when they come to your site, they will probably see a screen that looks a lot like this. So you can't see the connect button in the top right here.
00:05:28.134 - 00:05:48.460, Speaker A: But when connecting, if they've already connected to the MetaMask browser extension, it'll probably give them that option. Again, you can employ a cache buster or something like that in order to ensure that that doesn't happen. But we do kind of track what was the way that they connected last time.
00:05:48.460 - 00:06:13.678, Speaker A: And if it's through the browser extension, we'll go ahead and try to do that the next time they connect, just to make it easier for your user. But what the SDK also does is if they're visiting your site for the first time is it'll give them the opportunity to choose desktop or mobile. If they choose desktop, they will have a link in which they can connect to MetaMask using ETH underscore request accounts, just like you normally would connecting to the browser extension.
00:06:13.678 - 00:06:46.426, Speaker A: If they choose mobile, well, that's when they get this QR code, which they can pull out their phone, they can scan the QR code and yeah, they will be able to connect with MetaMask mobile. So once they're connected whether they're through the extension or mobile, you will see the chain that they're connected to. So if they're connected to linear, it'll show that if they're not connected to linear then what will happen is they will get a switch network button which will programmatically switch them over to the correct chain.
00:06:46.426 - 00:07:02.960, Speaker A: It'll add and or switch them over to the correct linear chain. To the right of that, it will show their address for their mobile wallet. It'll display the amount of ETH or whatever you're connected to.
00:07:02.960 - 00:07:12.882, Speaker A: In our case, it's ETH. That'll be the linear ETH that they have. If you also see to the left of linear there, it says extension.
00:07:12.882 - 00:07:25.334, Speaker A: It's not really a button but a tag that says Extension. So when we connect them to the wallet, if they choose extension, then it'll show that extension there. If we connect to mobile, it'll show mobile.
00:07:25.334 - 00:07:52.242, Speaker A: And all that is, is just a little bit of a conditional rendering in our react application to just let you know that, hey, it's possible to tell whether they're connected to the extension or mobile. That might be something that you want to know as an application developer. Or you might want to conditionally render one thing versus the other depending on how they're connected overall, when they're connected to one or the other, the experience is pretty much the same.
00:07:52.242 - 00:08:03.990, Speaker A: It's just where they approve their transactions or where they sign. Is it in the extension pop up in the browser or is it on the mobile phone? Right. But otherwise it's pretty much seamless.
00:08:03.990 - 00:08:15.530, Speaker A: Below this we have our ticket types. This is a fictitious event called ETH Atlantis, the best ETH conference under the sea. Again, it's not real.
00:08:15.530 - 00:08:32.014, Speaker A: This is just a demo application. But what we do is we give them the ability to mint a general admission or VIP ticket. The way that our contract determines in this very contrived demo is if they submit 0.1
00:08:32.014 - 00:08:41.778, Speaker A: ETH, well, they're going to get general admission. If they submit 0.2 ETH, we'll get a VIP and no other option is available.
00:08:41.778 - 00:08:48.146, Speaker A: So it works out for us. It's kind of hacky way of doing things. But again, this is a demo, it's contrived.
00:08:48.146 - 00:09:19.226, Speaker A: But yeah, once they mint that ticket, we will disable their button while the minting process is happening. And then once the ticket has been minted, once the transaction is complete, what we're going to be doing is calling into the contract to find out hey, what Tokens or NFTs has this person already minted with this contract? And you can see here that this user, which was me, had minted a general admission and a VIP ticket. And you can tell that they are unique.
00:09:19.226 - 00:09:39.350, Speaker A: Not only do they have a ticket number, right? So even if someone there's not a 1000 and 1001 for Ga. No, if you meant a Ga and a VIP, they will both have unique numbers for that event. It will also tell whether it is a general admission or a VIP.
00:09:39.350 - 00:09:50.330, Speaker A: It'll have their wallet address printed onto the ticket. Plus they have a different background as well. So no one ticket can ever be the same again.
00:09:50.330 - 00:10:06.350, Speaker A: Very contrived, but just a way of showing you how to create completely unique NFTs that are stored on the blockchain. With the contract that we have. And you don't have to use a contract that stores an SVG on chain.
00:10:06.350 - 00:10:19.746, Speaker A: You could use IPFS or something else. For the purpose of this workshop, we're trying not to deal with all that overhead of showing you how to use IPFS and to store images somewhere else. There's a lot of overhead involved with that.
00:10:19.746 - 00:10:42.620, Speaker A: So we went with an on chain SVG ticket for the purpose of the workshop. As I said, you can see up here, it shows how you're connected, what chain you're connected to, the address, and the amount of ETH that you have in your balance. Here is where the tickets are and then the NFTs down here that we just talked about.
00:10:42.620 - 00:10:59.600, Speaker A: Cool. So what is linea? So I'll do my best to describe Linea, but as a developer, I'll tell you that if I can deploy to Ethereum or maybe even something like Polygon, it's not really that different for me. Not a lot changes.
00:10:59.600 - 00:11:11.730, Speaker A: So linear is an L two scaling solution. It is a type two ZK roll up. We use linear for deploying our contracts.
00:11:11.730 - 00:11:21.014, Speaker A: And from watching Emily's course, you can kind of determine what is linear. Describe probably way better than I can. What is an L? Two.
00:11:21.014 - 00:11:33.706, Speaker A: What is a type two ZK roll up? Anatomy of a roll up. You can understand the asset transfer process and understand kind of the difference between optimistic and ZK rollups. So I'll go over a little bit of what this stuff is.
00:11:33.706 - 00:11:45.770, Speaker A: So a type two ZK roll up is not a layer one. So a layer two is a separate blockchain that increases the transaction speed and throughput while partially deriving its security. From ethereum EVM.
00:11:45.770 - 00:12:00.878, Speaker A: It pulls off that execution layer away from L one. They rely on Ethereum for data availability and then post their transaction data back onto L one. Roll ups are the most widely accepted implementation.
00:12:00.878 - 00:12:18.174, Speaker A: You have optimistic roll ups like Arbitrum, optimism, even Base. Then you have ZK roll ups like linear ZK sync polygon, ZKE EVM scroll and StarkNet. So what is a ZKE EVM? Right? It's a zero knowledge Ethereum virtual machine.
00:12:18.174 - 00:12:50.130, Speaker A: So it executes smart contract transactions in a way that uses existing Ethereum infrastructure in a way that ZK proofs can understand. So the way a proofer works is by submitting the programs that translate into math, which pulls out a boolean, like a true or false that's done through Arithmetization, which is a difficult process. And because this is difficult, there are four major types of Zkebms, right? You have a type four, type three, type two, and type one.
00:12:50.130 - 00:13:12.598, Speaker A: So we'll go over two of those, because I think at the highest level, you have the high level language equivalent. You can think of a type four as like a StarkNet ZK sync, and those are not 100% like the EVM, right? So your tooling changes, some opcodes are not covered. If you're using hard hat, it may require its own plugin.
00:13:12.598 - 00:13:38.420, Speaker A: Right? You have type three, which is partially EVM equivalent, and then you have type two, which is fully EVM equivalent, which is what linear is. So it's language equivalent, which means that I can write insulid and it's bytecode equivalent. You're fully compatible with your existing application that you've already built, maybe on ethereum, right? Ethereum, polygon, whatever.
00:13:38.420 - 00:13:45.694, Speaker A: As a dev, really. Nothing changes, no tooling changes. All opcodes are recognized.
00:13:45.694 - 00:14:01.038, Speaker A: Right? And then you have type one, which is fully ethereum equivalent. Again, linear is a type two. So if you want to learn more about linea, I would suggest going over to Emily's little crash course, linear.
00:14:01.038 - 00:14:06.300, Speaker A: Explainer. The link is up here at the top right of the screen. Up there, way up there.
00:14:06.300 - 00:14:21.546, Speaker A: And then you might also want to look into the different types of Zkevms and specifically focus on the type two Zkevms, which is what linear is. Also linear build. You can find all the docs for Linear.
00:14:21.546 - 00:14:42.082, Speaker A: And if you have any questions, again, the developer relations team, myself, Emily, any other developer relations person that you might find at Consensus or MetaMask, they are your front door. They are the ones that can answer your questions or find the right people that can do that. All right, so the MetaMask SDK in adapt.
00:14:42.082 - 00:14:53.642, Speaker A: So what I'm showing you here is actually the way that the SDK used to work. So if you are below 0.50, this is how it worked.
00:14:53.642 - 00:15:18.066, Speaker A: Your connect button would determine whether or not you have a MetaMask extension, and then if so, it would connect you to that extension. Otherwise the SDK would realize that you did not have an extension. So a MetaMask extension in your browser, and it would pop up a QR code if you didn't have either of those, it would also give you the option to download MetaMask and install it.
00:15:18.066 - 00:15:39.702, Speaker A: The way that the SDK works after zero 50 is that there still is this kind of yes no, is there MetaMask extension installed, but only if someone is already previously connected to the browser extension. So it's a little bit different. There's a little bit more logic going on.
00:15:39.702 - 00:15:55.710, Speaker A: But what happens now is that the user is pretty much given that choice at the beginning. They get a little modal, a pop up, it's responsive, it works very well. It actually makes a better user experience for connecting to MetaMask, in my opinion.
00:15:55.710 - 00:16:16.690, Speaker A: But they're giving that option. So let's say that I have an extension in my browser, but I'm using Chrome, and I maybe only have my test wallet set up in Chrome it's not my personal wallet. It's not the one connected with my ENS domain or something like that, right? But it's just this weird test wallet that I have set up.
00:16:16.690 - 00:16:33.340, Speaker A: Maybe it's a rabbi wallet or something like that, something that says it's MetaMask, but it's not MetaMask, right? And I know I don't want to connect to that thing. I want to use my mobile phone. Well, I have that option kind of at the beginning, and I can connect with that.
00:16:33.340 - 00:16:51.358, Speaker A: So I think it's a better user experience. And again, being able to connect a DAP to a mobile and being able to work with the window ethereum object in the same exact way is, I think, super valuable for DApp developers. And that's kind of what the MetaMask SDK brings you.
00:16:51.358 - 00:17:03.870, Speaker A: And in the future, we'll have other helper functions. We have libraries coming out for React developers and who knows what after then. But some of the react components that we have coming out are for state management.
00:17:03.870 - 00:17:25.462, Speaker A: We have connect buttons and other things like that, which you can just drop into your application, and they work along with the MetaMask SDK. A few other things I would also note is that MetaMask is working with packages like Wagme and Web Three react and block natives. Web three onboarder.
00:17:25.462 - 00:17:39.386, Speaker A: We're trying to put in a pull request with them so that we can have the SDK right there in the tools that you like to use in order to connect to multiple wallets. Here are some references. So we have a MetaMask SDK Developer Resource Guide.
00:17:39.386 - 00:18:05.186, Speaker A: We have the linear L, two ZK roll up information here, and also another repo down here, which is the MIP GitHub repo. This is the MetaMask improvement proposals kind of unrelated to this workshop. But I thought I would put it in here because a lot of people that will be watching this workshop either have a good idea of how to work with MetaMask or have worked with it in the past and are here to learn a little bit about the SDK.
00:18:05.186 - 00:18:30.270, Speaker A: But they might be interested in being part of the MetaMask improvement proposal. It is a program that we have going on, and we meet, I think it's once a month, and discuss MetaMask improvement proposals. But also you can work with us async through our GitHub account, and you can either submit MetaMask improvement proposals or create issues to that GitHub repo.
00:18:30.270 - 00:18:50.338, Speaker A: So let's go let's go ahead and get into our workshops. I'm going to go ahead and close down our Google Docs there. And if you were to go to that first link that I had you screenshot, it would take you to this GitHub repo.
00:18:50.338 - 00:19:08.154, Speaker A: All right, in here you will find a README that will walk you through one. All the information about the workshop, kind of what it uses. Some of this may change over time, so just keep up to date with always check out this top page here, this top part of the page here.
00:19:08.154 - 00:19:15.470, Speaker A: To figure out kind of what we're using. Maybe we decide to go hard hat in the future. Maybe we continue using truffle.
00:19:15.470 - 00:19:31.550, Speaker A: We adapt these workshops based off of feedback from the developer community. So although it uses a lot of consensus tools, if we get a lot of feedback saying, hey, I really want to see how to do this in hard hat, we might end up doing that. And then you have steps.
00:19:31.550 - 00:19:48.226, Speaker A: Clone the project down, open your editor, create an inferior account. So we're going to go through all of these really quickly, get everything up and running, and you will see how this all works. So the first thing that we want to do is we want to clone down this workshop.
00:19:48.226 - 00:19:57.500, Speaker A: And I'm going to copy this last little part right here. So I'm going to go ahead and open my terminal. I think it's this one.
00:19:57.500 - 00:20:12.636, Speaker A: And let's just go ahead and add that last little bit on the end there. So what we're going to do is we're going to let's make sure we spell this correctly. Not GTI clone.
00:20:12.636 - 00:20:23.488, Speaker A: Let's do a Git clone. That'll probably be better. So what this is going to do is this is going to clone down our repo into a folder called React SDK Linear Workshop.
00:20:23.488 - 00:20:38.260, Speaker A: And then we're going to CD into that directory. And then from there, we will get all of our dependencies installed. All right, so it cloned it down and it also changed us into that directory.
00:20:38.260 - 00:20:47.710, Speaker A: And from here, I am just going to open Visual Studio code. Here we go. Let's close this other one.
00:20:47.710 - 00:21:02.130, Speaker A: All right. And we can also get rid of this other terminal back here and just open this up and we can see what we have inside of here. Let's also get a terminal open here.
00:21:02.130 - 00:21:12.336, Speaker A: And if we go to the README, just go ahead and open up the README. It's the same README that we saw over on GitHub. And what we want to do is we already cloned the workshop.
00:21:12.336 - 00:21:38.604, Speaker A: So step two is just to run NPM install so we can do that down here. And what this is going to do is because we're using Turbo Repo, which you can find about all up here, I'm going to kind of skip over that for sake of time. Turbo Repo kind of has these, what I would just call like, different workspaces, blockchain and Web.
00:21:38.604 - 00:21:48.716, Speaker A: Each of these has its own package JSON. It has its own environment variables file. But it's going to go into both of those and it's going to install the dependencies in those packages.
00:21:48.716 - 00:22:01.716, Speaker A: JSON. All right, so it's done installing. Great.
00:22:01.716 - 00:22:09.508, Speaker A: Step three. So we want to create an infuria account. And that's one thing that I haven't done yet.
00:22:09.508 - 00:22:27.550, Speaker A: I mean, I actually have an infuria account, but I'm going to walk you through. So let's go ahead and open up infura IO. I'm going to go ahead and sign in and I'm going to pause this for a minute while I sign in.
00:22:27.550 - 00:22:37.410, Speaker A: And once you get signed in, you'll be basically brought to this dashboard where you can create a new API key. And that's what we want to do. So we want to create new API key.
00:22:37.410 - 00:22:58.676, Speaker A: So we want to go ahead and create a new web, three API key and not IPFS. We're going to do this one here and we're going to call it ETH Atlantis. We're going to hit Create and you can call it whatever you want.
00:22:58.676 - 00:23:16.140, Speaker A: That's going to give us an API key here, which we want to copy. And I will also kind of point out linear mainnet and testnet. We're going to be using the testnet here, but if you switch over to mainnet, you can get the this is what you're going to plug into your truffle or your hard hat config.
00:23:16.140 - 00:23:46.244, Speaker A: But if you wanted to deploy to something else, polygon, optimism, palm ethereum, you can find all of the links for those here inside of Infira. So with that we will go ahead and come over to our application here and we will see that we need to rename the file in our web directory, which is env example. And let's just get rid of the example at the end, all right.
00:23:46.244 - 00:23:54.650, Speaker A: And we're going to paste this right here. Also we are going to be using linear. So we're just going to put in the hex code for that here.
00:23:54.650 - 00:24:27.660, Speaker A: There are some pretty cool tools out there if you want to be able to find out what the hex code or the chain ID for a particular network is. So one is chainlist.org to include testnets and we can click on we can just search for linear.
00:24:27.660 - 00:24:38.992, Speaker A: There's the linear. So we see the code, the hex code. We also see the actual chain ID and that's pretty cool.
00:24:38.992 - 00:24:59.530, Speaker A: We also have E serialize, which if I were to put in let's grab this 59144. The way we would do this is we want to put in a number and we want to get the hex value of it. We see OXE 708 just the same as we see here.
00:24:59.530 - 00:25:11.884, Speaker A: So two really cool tools I think you should know about as an ethereum developer or a blockchain developer. Cool. So we have our environment variable here filled out.
00:25:11.884 - 00:25:27.760, Speaker A: Environment variable file filled out. Let's go back to our README. And the next one we want to do is we want to copy that same Infura project ID over to our blockchain and we want to rename this as well.
00:25:27.760 - 00:25:40.070, Speaker A: So let's go ahead and get rid of example here. And I think I don't still have that one. So let's go to grab it again from here.
00:25:40.070 - 00:26:01.350, Speaker A: Copy that, put it here. And then I'm going to pause while I get my private key. But I'll show you how to do that so we want to open up MetaMask, and I'm going to go to account that's not one that I could say an imported account.
00:26:01.350 - 00:26:21.828, Speaker A: So what you would do is you're going to click on this guy here, account Details, and then you're going to hit Show Private Key. All right? So I'm going to go ahead and do that in the background again. That's right here, you select the accounts.
00:26:21.828 - 00:26:30.200, Speaker A: You click on the three little dots next to the account. Account details show private key. So while I do that real quick, if you're following along, you can do it as well.
00:26:30.200 - 00:26:37.230, Speaker A: And then we're going to paste that into the file. I'm going to be sure not to show you guys that because you never want to share your private key. So one moment.
00:26:37.230 - 00:26:54.404, Speaker A: All right, so now that out of the way, I added that private key to my blockchain environment variable file. And I want to click off of that real quick just to make sure I don't accidentally click on it. And we want to go back to our README and just continue following along.
00:26:54.404 - 00:27:12.168, Speaker A: So now that we have our environment variables filled out, one area of the project you should be aware of is your Truffle config. Or you might have your hard hat config over here. And let's kind of walk through it real quick just to see what we have set up.
00:27:12.168 - 00:27:23.196, Speaker A: So a few things that I would point out is that we have these contract build directories and contract directory. We're telling it where our contract is located. It's in this.
00:27:23.196 - 00:27:37.244, Speaker A: Contracts, ETH, tickets. So here is our contract. If I go back to that also, where do we want to build out the abis to? So we want to go into the web directory and into a folder called Lib.
00:27:37.244 - 00:27:44.292, Speaker A: That's where I'm putting mine. That gives our front end application access to that contract abi. So that's the first thing I would kind of go over.
00:27:44.292 - 00:28:00.584, Speaker A: Here how that works within the application. You can poke around the application a little bit and see how it uses that abi. We're using it along with typechain, but those are all things that are kind of beyond the scope of the course.
00:28:00.584 - 00:28:10.696, Speaker A: We're just going to show you how to get everything kind of up and running. So I have a few different networks set here. I have Nagerly, I have Mumbai and I have Linea.
00:28:10.696 - 00:28:24.352, Speaker A: So I just wanted to put a few different ones in here. And also I got these from Infira. So basically I copied the Infira link that I was showing you inside of when we created our API key.
00:28:24.352 - 00:28:40.310, Speaker A: And then I'm just replacing the last part with whatever inferior project ID that I have inside my environment variable file here. So whatever goes at the end here is the same as what I've put right here in my environment variable file. Let's go back to that.
00:28:40.310 - 00:28:52.760, Speaker A: So we have scripts in our application to deploy to Garly, Mumbai or Linear. We will be using the one for linear and that's what we'll be kind of going over next. So let's go back to the README.
00:28:52.760 - 00:29:13.580, Speaker A: We can also check out the Treble configuration docs if you need to, or if you're using Hard hat, it should really be no different. There's a few little minor differences, but Truffle and hard hat are kind of similar. We're using Truffle in this workshop.
00:29:13.580 - 00:29:28.950, Speaker A: In the future, maybe we'll do one using hard hat so that we can show people what the site little differences are there. Yeah. So here's all the different files that may or may not use your public network ID.
00:29:28.950 - 00:29:49.660, Speaker A: But step four, we need to get some linear ETH. So if you don't have any linear ETH, you can do one of two things. You can go to infura Iofosst, linear, and you from there will be able to get some linear ETH for testing purposes.
00:29:49.660 - 00:30:02.188, Speaker A: If you're part of my workshop, you can reach out to me. I can give you some, maybe it takes I think you get 0.5 a day through the faucet if you need it really quickly.
00:30:02.188 - 00:30:06.770, Speaker A: If you need a little bit more than that, 0.5 reach out to me. I can probably hook you up.
00:30:06.770 - 00:30:15.764, Speaker A: I have quite a bit of it. So anyways, step, I already have some in my wallet, so I'm going to skip this step. But just know that you could go to this link here.
00:30:15.764 - 00:30:28.328, Speaker A: You could paste in your wallet address and you can get some of that linear ETH dripped down to you. So step five will be to build the project and compile the contracts. So let's go ahead and do that.
00:30:28.328 - 00:31:05.070, Speaker A: We're going to run NPM, run build, let's run Truffle compile real quick. Truffle compiler got an error here. Let's try and determine what this is.
00:31:05.070 - 00:31:40.680, Speaker A: CD into our apps real quick blockchain. I just ran tropical compile kind of inside of the let's run NPM, run build now, see if this changes anything. All right, so we're getting an issue here.
00:31:40.680 - 00:32:17.942, Speaker A: This actually looks like an issue in our own code, so I'm going to try to determine what this is real quick and come right back and give you the solution. All right, so what I will go ahead and do is update our GitHub repository and remove this auto connect. I believe that with the new version of the SDK that that is set to true automatically and you don't have to do anything there.
00:32:17.942 - 00:32:33.178, Speaker A: So hopefully removing that right now will get rid of our issue. It was on line 117, so if that's in your workshop, you can remove it. I will try to do my best to remove that and kind of make that change to the GitHub repo.
00:32:33.178 - 00:32:40.838, Speaker A: So hopefully that won't be an issue. But if anyone runs into that, cool, you'll know how to resolve it. Let's go back here and run NPM.
00:32:40.838 - 00:32:50.686, Speaker A: Run build and see if we have any issues again. And it looks like that cleared up our error. That was just a TypeScript error.
00:32:50.686 - 00:33:05.474, Speaker A: It wasn't anything wrong with actual linear or deploying running and building. So NPM run build will not only build your contracts, but it'll also build your front end web application. And in that case, we were getting a TypeScript error.
00:33:05.474 - 00:33:21.214, Speaker A: If you get an error there, pay very close attention to what line it's on, what file it's on, go check your file. If there's a little red squiggly line or some obvious thing there, that's where your issue is. So if you start changing our workshop out quite a bit, just be aware of that.
00:33:21.214 - 00:33:47.270, Speaker A: If you're using the same commands that we're running now, we could deploy to Linear or Mumbai or Ethereum or Garly, any of them really, because it's pretty much all the same as far as deploying from a developer perspective and working with our contracts. But we're going to choose to run NPM run, deploy linear. And what this is doing is it's calling a script up here in our package JSON.
00:33:47.270 - 00:34:04.794, Speaker A: So we will see right here, deploy Mumbai, deploy linear, deploy Garly. Let's say that you wanted to set up like a deploy to Arbitram or something. You would need to add a new script right here, deploy Arbitrum and then you'd want to do network arbitram and that would get you squared away.
00:34:04.794 - 00:34:15.280, Speaker A: But we are going to go ahead and go back to the README. We're going to copy this NPM run deploy to Linear. We'll go ahead and paste that in here.
00:34:15.280 - 00:34:33.922, Speaker A: And what we should be getting is a contract address. And there's ways that you can write that contract address directly to the file that you need. In my case, it is in my web directory.
00:34:33.922 - 00:34:52.018, Speaker A: I have this lib config. So maybe you can put a piece of code in here that checks that contract abi and finds out what the contract address is and uses it. But I'm just going to do a quick little copy paste.
00:34:52.018 - 00:35:01.040, Speaker A: So I'm going to copy our contract address it just gave us. I'm going to put it under the linear one. Make sure you put it under Linear because that's where our application is going to be looking since we're running against linear right now.
00:35:01.040 - 00:35:16.260, Speaker A: And with that we should be good to go to the next step. So the next step is, yeah, we already did this, we already copied the contract address into that. So we've completed step seven as well.
00:35:16.260 - 00:35:38.982, Speaker A: And the next is just pretty much to run the application and let's start testing it out. So go down here, run NPM, run dev testnet. And if we want to search for where that command is really quickly, JSON, it's right here in our main directory.
00:35:38.982 - 00:36:06.530, Speaker A: So our root directory which is dev underscore testnet, which is basically just going to run NPM run dev and it's going to be telling you about the web workspace here, which is the web directory. So this is going to run our front end application using turbo repo and you should see this little link pop up. And if we click on that we will see our application really quickly.
00:36:06.530 - 00:36:21.826, Speaker A: What I'm going to do is I'm going to go in here and I'm going to inspect, I'm going to go to application. I'm going to make sure that we don't have I'm just going to delete anything that's already in here, make sure there's nothing in session storage. So local storage, session storage.
00:36:21.826 - 00:36:36.540, Speaker A: There's nothing in here. We have basically nothing cached as far as what the user's preferences are for connecting to MetaMask. At this point I want to hit the connect MetaMask button and here's where you see the SDK, right.
00:36:36.540 - 00:36:55.234, Speaker A: All I did when connecting that MetaMask button, that connect MetaMask button, if we want to go look at it real quickly, we go into the navigation. So let's go into components navigation, navigation TSX and we will find that connect button. Here it is.
00:36:55.234 - 00:36:57.490, Speaker A: Here. It's calling Connect. MetaMask.
00:36:57.490 - 00:37:22.688, Speaker A: Connect MetaMask is found inside of our use MetaMask folder or sorry file. And inside of here there's going to be a connect MetaMask function which we'll find real quick. No, here it is.
00:37:22.688 - 00:37:52.962, Speaker A: So all that we're doing is we're calling ETH underscore Request accounts. But because we've instantiated our SDK right here, then it's going to automatically, I mean it's that simple. It's going to automatically pull up this little modal which give our users a nice little, hey, I can connect through desktop or I can connect through mobile.
00:37:52.962 - 00:38:01.130, Speaker A: So we'll go ahead and connect with the MetaMask extension first. Or maybe we should do mobile. Let's do the desktop first, then we'll come back and do mobile.
00:38:01.130 - 00:38:13.338, Speaker A: So go ahead and connect. And we can see here that my account with the ox 75 is the one that's actually connected here. I'm on the linear chain.
00:38:13.338 - 00:38:45.800, Speaker A: Now what would have happened if I would have been on a different chain like linear mainnet but I wanted them to be on linear testnet, right? So what my application would have done, and you can see how to do this is it would have conditionally rendered this switch chain button which when I click on it will programmatically either if the linear test nut chain is not in MetaMask already, it will add it. Otherwise it will just connect me over to it. So I'll click that and boom switches me back over to the correct network and now I'm good to go.
00:38:45.800 - 00:39:10.958, Speaker A: Another thing that you could also do is the same logic you would use to render that switch button you could also use to disable your minting buttons, right? You may not want them to mint an NFT unless they are on the right network. Cool. So we see everything here and what we're going to do now is we're just going to test out our application, make sure our Minting buttons work.
00:39:10.958 - 00:39:37.122, Speaker A: So we'll go ahead and hit Mint ticket here. And obviously, since I'm connected to the browser extension, it's going to confirm all of that over here in the MetaMask extension and notice that my button is again disabled while the Minting transaction is not complete yet. So as soon as that transaction is finished, we will see that will go away and then, wow, we get our NFT showing up there at the bottom that we just minted.
00:39:37.122 - 00:39:50.310, Speaker A: And so let's take a look at that really quickly in our application. So I think to start off here, the thing that we should take a look at really quickly is our contract. Now, again, this is a contrived contract.
00:39:50.310 - 00:40:07.506, Speaker A: It is specifically for demo purposes. You probably want to build something a little bit better for yours. But the thing that makes this work, where I can go and fetch these NFTs that are on chain and display them right here in the browser, is a few things.
00:40:07.506 - 00:40:31.210, Speaker A: So one, it is this wallet of owner function inside of my contract, which basically, if I mint five different NFT tickets, one for me and four of my friends, I get a VIP for me and a general admission for all of my friends, of course. Well, then I minted them all with a certain address, right? And I don't have any way to transfer those over. Basically, you meant it, it's yours.
00:40:31.210 - 00:40:55.250, Speaker A: So I can call into this wallet of owner and I can get back a list of the Token IDs that basically I've minted on this contract. With those token IDs I can then call into. Let's see here generate NFT SVG by token ID.
00:40:55.250 - 00:41:17.160, Speaker A: So by passing that Token ID into this function here, which is a public function on our contract, if I've generated five of them, then my react application would actually run through all five of those Token IDs and call this five times in a row. And it'll get the generated SVG and it'll display that onto the page. So that's how that's being done.
00:41:17.160 - 00:41:31.630, Speaker A: We could take a little bit more look at this contract. So this is the top portion of my SVG and this is the bottom portion. I just split them up for organizational purposes.
00:41:31.630 - 00:41:50.690, Speaker A: We also have the Token Uri being created for the actual NFT. And then we have the contract Uri for the collection of NFTs. For this project, we have a Can Mint function.
00:41:50.690 - 00:42:05.686, Speaker A: So we want to make sure that the total supply has not reached the max supply, that the minting kind of deadline has not occurred yet. I think for what we're doing here, it's one week long. So once I deploy the contract, I can mint for up to one week.
00:42:05.686 - 00:42:19.482, Speaker A: After that, anyone will get an error if they're trying to mint from this contract. You could set that as long as you want. There is a Mint deadline variable above in the file, that you can set that to a different time frame if you want to.
00:42:19.482 - 00:42:31.934, Speaker A: And then here we're making sure that the message value, otherwise the price being sent over is either 0.1 or 0.2, which would give them either a Ga or a VIP ticket price.
00:42:31.934 - 00:42:40.674, Speaker A: If it's any other value, it's not going to work. So that's the contract in a nutshell. Yeah.
00:42:40.674 - 00:42:52.680, Speaker A: Here is the price for the VIP ticket ga ticket, the max supply. We start with zero when the contract is deployed. And every time we mint an NFT, that goes up one.
00:42:52.680 - 00:43:08.262, Speaker A: Yeah. And we have a few open zeppelin contracts that we've used in this. Then if we go and take a look at our tickets page, tickets owned, to be specific, we will see how we're calling into that contract.
00:43:08.262 - 00:43:31.070, Speaker A: So the first thing I would kind of take a look at here is list of tickets. So this will be what we actually kind of loop over this code right here in order to generate each of those images that we've gotten. But let's take a little bit further look into here's where we call that wallet of owner.
00:43:31.070 - 00:43:40.200, Speaker A: Right. So we call wallet of owner. We tell it what our wallet address is, and then we're going to get a list of owned tickets back.
00:43:40.200 - 00:44:03.252, Speaker A: We can then map over those owned tickets, and then we can call that Token Uri, and then we can get our actual ticket back. Sorry. So one thing is that the Token Uri calls the other one.
00:44:03.252 - 00:44:17.892, Speaker A: So I think I said that wrong over here. So token Uri calls in to generate NFT SVG by token ID. Okay, that was one thing that I kind of messed up in saying over there.
00:44:17.892 - 00:44:26.808, Speaker A: This is the one that we actually call it's public as well. You could call either one, but that's the one we're calling from our tickets owned. And then that's getting our SVG back.
00:44:26.808 - 00:44:45.712, Speaker A: And then we are literally just pushing these into an array. And then we are looping over them up here and then displaying them here on our page. And that is how we get our tickets showing up here at the bottom.
00:44:45.712 - 00:45:04.944, Speaker A: So if I were to mint another ticket here of the IP ticket, once that NFT mint is complete, we are setting a global variable just to one number higher. And when that global variable changes, that number changes. In other words, the user has minted another ticket.
00:45:04.944 - 00:45:26.428, Speaker A: This portion of code down here knows to run again and to go check if any new SVG NFT tickets has been created on this contract by this user. And then it displays them out. So every time I mint a ticket, let's say that I have 100 of them here, it will actually have to call back in and generate all 100 again.
00:45:26.428 - 00:45:32.364, Speaker A: Again, this is a demo application. It's contrived. It's for demo purposes only, but it works.
00:45:32.364 - 00:45:44.736, Speaker A: And it gives you an idea of how to work with these various things. Making that a little bit more efficient would be up to you in building a more production app. So let's go back to our README real quick.
00:45:44.736 - 00:45:53.252, Speaker A: Let's make sure that we're not forgetting anything that I want to go over here. So we've connected. Oh, well, let's go ahead and just test out one thing really quickly here.
00:45:53.252 - 00:46:26.130, Speaker A: So we notice that we're connected to Linear and we already changed the chain and it gave us the button to switch us back to the right change. But what happens if we change the account? So notice if I connect to a different account, all of my tickets disappear, but it has updated my balance and my address here. So let's go let's refresh this for a moment here.
00:46:26.130 - 00:46:44.034, Speaker A: Let's go back over to our other account. All right, we do have a little bit of an issue with our mobile and extension. We have just released a new SDK package.
00:46:44.034 - 00:46:56.890, Speaker A: I may be getting that tag incorrectly. It's not a big deal. Again, everything works the same for both, but I might need to update that code in the repo to make sure that it's always showing the correct one there.
00:46:56.890 - 00:47:16.414, Speaker A: But other than that, everything seems to be working fine. Our wallet state, most importantly, is staying in sync with our application state. And the way that that is happening right now is because we are using this use MetaMask, basically context provider.
00:47:16.414 - 00:47:36.930, Speaker A: So if you're familiar with React, you'll understand what a context provider is. We've created a context here and we have some quite a bit of code going on to understand how many Mints have we had? All sorts of things. Have there been any errors? Let's go ahead and generate an error.
00:47:36.930 - 00:47:47.340, Speaker A: So let's go ahead and try to mint a ticket and we are going to reject it. And you'll see down here that we have action rejected. If we click on this, the error will go away.
00:47:47.340 - 00:48:21.080, Speaker A: So that's another piece of our global state, is that when we get an error from MetaMask, whether we get an error, whether they change their account, whether the balance changes, whether the chain changes, we take all of that information through either a rejected request or error, or through events that are happening with MetaMask. So if I change the account, if I change the chain ID or the balance changes, that actually triggers an event that we have covered down here. We have all these events that we're watching.
00:48:21.080 - 00:48:46.090, Speaker A: And if any of these happens, we are then calling into a certain function that will update our global state, right? So this is a little bit more involved. The good thing is that we've shown you how to kind of keep your wallet state in sync with your React application here in this file. This is put together rather quickly for a workshop.
00:48:46.090 - 00:49:04.770, Speaker A: Again, demo purposes. However, we have a react package coming out, which will have basically a Use SDK hook and also some connect buttons in it that you can just drop into your application and not have to worry about writing any of this stuff. So look out for that.
00:49:04.770 - 00:49:24.090, Speaker A: As soon as we have that available and we've announced it, which should be very soon, then I'll be tweeting about it and I'll also be updating the workshop to use those instead. We'll probably have both of them in here so that you could see how we've done this anyways, but it won't be being used. We'll be using the use SDK hook from the SDK.
00:49:24.090 - 00:49:34.700, Speaker A: That's basically a companion library that's coming along with the SDK. A react companion library. All right, so we've tested that.
00:49:34.700 - 00:49:45.454, Speaker A: Let's see if there's anything else I wanted to test here. If we change the chain, do we see it reflected in the UI? Do we get a switch chain button? Yes, we do. Can we change accounts and see it reflected in the UI? Yes, we can.
00:49:45.454 - 00:49:54.430, Speaker A: Can we mint a ticket? Yes. See the NFT ticket show up at the bottom of the page? Yes. Disconnect from both accounts and make sure that it is reflected in the UI.
00:49:54.430 - 00:50:03.106, Speaker A: Disable the MetaMask browser extension. So that's kind of our next thing that we want to do here. So we want to come up here and we're connected to two different accounts.
00:50:03.106 - 00:50:12.460, Speaker A: So let's go ahead and we're going to do that here. We're going to disconnect this account and then we're going to disconnect this account. All right.
00:50:12.460 - 00:50:36.500, Speaker A: And again, since I've already connected with MetaMask, I'm also going to just for the sake of the demo, I'm going to make sure that there is nothing stored in here. So I'm going to delete all of these. You could also do this programmatically, but I'm just going to make sure that there's nothing else there.
00:50:36.500 - 00:50:57.000, Speaker A: And once I disconnected from those, notice that all of those menu items went away. I didn't have to refresh the page or anything. That's all react state knowing that like, hey, they've disconnected from MetaMask and conditionally rendering this connect MetaMask button.
00:50:57.000 - 00:51:15.870, Speaker A: Now what we can do is we can hit that connect MetaMask button and let's try to log in with our mobile phone. So we'll click mobile here and let me just pull up my mobile application in my phone real quick. This may take a moment.
00:51:15.870 - 00:51:33.750, Speaker A: My phone was not on. All right, got MetaMask opening up. And what I'm going to be doing, if you can see here up in the top right hand corner, there is a little QR code.
00:51:33.750 - 00:51:56.958, Speaker A: I'm going to hit that and I'm going to scan the QR code here and you'll see that we want to accept this and boom, we are logged in. Now, I was on Ethereum mainnet here, so I am not on the correct chain. So it's going to switch me over.
00:51:56.958 - 00:52:07.010, Speaker A: I'm going to click the switch chain button. Cool. And then I'm going to switch over to linear Garly test network.
00:52:07.010 - 00:52:29.400, Speaker A: I'm going to approve that I shouldn't hit I messed up here. Nine two nine. So if I disconnect on that, this is actually good because we can show that the disconnect works here.
00:52:29.400 - 00:52:36.082, Speaker A: We're going to refresh the page and hit connect to MetaMask again. That was my fault. I hit the wrong button.
00:52:36.082 - 00:52:49.614, Speaker A: I dismissed it and then tried to change it manually. But it actually did what it was supposed to do. If it figures out that you've disconnected from MetaMask mobile at any point in time, you'll see on the screen there that it actually showed me a number that I have to click on my phone.
00:52:49.614 - 00:53:06.100, Speaker A: That is the same number and that will just make sure that I'm disconnected completely from MetaMask or I can connect back up again anyway. So I'm connected back up again this time and I'm on the right testnet. So we're good there.
00:53:06.100 - 00:53:18.182, Speaker A: And you can see here that I'm connected with a different wallet address. And if I were to same thing happens if I were to switch the account. Let's try that real quick.
00:53:18.182 - 00:53:35.456, Speaker A: I'm going to go to account two. Okay, so now I'm on account two. Here is the situation.
00:53:35.456 - 00:54:00.680, Speaker A: So since I'm on mobile, it's a little bit different when you just switch accounts from one to the other on mobile, right? You need to make sure that you're connected with account one. You need to be on account one. But at this point, if I can go ahead and mint a ticket, let's just go ahead and make sure that we know that on MetaMask mobile, it will ask us for confirmation.
00:54:00.680 - 00:54:21.346, Speaker A: So I want to scroll down a little bit here and I want to hit confirm. And now our Minting process is happening. So transaction is submitted and in a moment it takes a tiny bit longer with mobile to recognize that transaction still.
00:54:21.346 - 00:54:33.640, Speaker A: Our Minting button is still disabled because that transaction is not completed yet. And it says transaction complete. 12345.
00:54:33.640 - 00:55:00.634, Speaker A: There we go again, takes a tiny bit longer with MetaMask mobile. There's some polling, there's some communication going on behind the scenes that is just a little bit more time consuming than with your MetaMask extension. And I figured out what's going on here with my little tag is that I have the boolean in my react application, the switch.
00:55:00.634 - 00:55:09.810, Speaker A: So when I'm connected to mobile, it's telling me I'm on extension. When I'm connected to extension, it's telling me on mobile that would be a really quick fix. It was probably a programming error of my part.
00:55:09.810 - 00:55:22.722, Speaker A: But I can see that this is actually working kind of as intended. It's just showing the wrong one. So when I'm connected to mobile, extension, extension mobile, that's just changing the logic around of how this thing is conditionally rendered.
00:55:22.722 - 00:55:48.430, Speaker A: But I don't want to take too much longer because we are reaching kind of the end of the workshop, but everything so far is working exactly as I expected it to. I ran into the one little issue where I accidentally kind of rejected the request to, what was it? Change the chain chain. The change chain.
00:55:48.430 - 00:56:08.870, Speaker A: And then it tried to disconnect me. It realized that I was disconnected and then it gave me that number to make sure that I was clicking on the right number that was being displayed on my phone. That's a security feature of connecting to MetaMask mobile.
00:56:08.870 - 00:56:45.794, Speaker A: And then it disconnected me and then I just used the QR code to scan and log in again. A lot of these things can be programmed on your side to make it very seamless and it's not too hard to do these things. So the best thing to do is and that's why I did include this little information here about whether you're connected to extension or mobile, even though I did it incorrectly, is so that if you find that you want to do something a tiny bit different when you're connected to mobile, you can do that.
00:56:45.794 - 00:57:03.970, Speaker A: There are some edge cases where the logic might be different when you're connected to mobile because of the way that the mobile application works with the app. But at the surface it's pretty much all the same. The same events work that you're listening to from MetaMask.
00:57:03.970 - 00:57:26.990, Speaker A: You still use the window ethereum object in order to interact with the MetaMask mobile, even though it's slightly being faked. And if you make changes, if your balance changes and all that kind of stuff, it's all just going to automatically reflect in your application. Your app state is going to stay in sync with your wallet.
00:57:26.990 - 00:57:51.400, Speaker A: But yeah, we're going to continue building out this workshop and adding additional features and just making it as fully featured as possible so that everything that you could possibly need to know about working with the SDK is in this workshop. But this is a developer preview the SDK. It still hasn't reached a major version one yet, so keep that in mind as you use it.
00:57:51.400 - 00:58:10.090, Speaker A: But also know that this is really powerful stuff, especially the fact you can connect to MetaMask Mobile from Adapt and do all the same things that used to do with your MetaMask browser extension. So with that being said, I think that's about it. That's the end of the workshop.
00:58:10.090 - 00:58:33.858, Speaker A: Hopefully you can get this code running down on your computer and everything works. Will maybe I'll bring back up the oh, that's not going to work. So just bringing back up the slideshow really quickly here and I'll go ahead and leave you on this slide again.
00:58:33.858 - 00:58:38.034, Speaker A: My name is Eric Pichard. I'm the Developer Relations Manager at MetaMask. You can find me on Twitter.
00:58:38.034 - 00:58:44.294, Speaker A: Telegram. GitHub Lens ETH at HTP Junkie. My DMs are always open.
00:58:44.294 - 00:58:59.910, Speaker A: I'm trying to end this video so that it's less than an hour long but if you have any questions, reach out to me or the rest of my team. And we're always traveling all over the world to various ethereum conferences and blockchain conferences, multi chain conferences. You'll see us everywhere.
00:58:59.910 - 00:59:10.560, Speaker A: If you see, please come say hi and ask us any questions or find out how we can work more closely together. We've got an ambassador program. We have an accelerator program.
00:59:10.560 - 00:59:19.340, Speaker A: There's lots of ways for you to work, with the consensus MetaMask infura linea, all these different teams. Thank you very much, and have a great day.
