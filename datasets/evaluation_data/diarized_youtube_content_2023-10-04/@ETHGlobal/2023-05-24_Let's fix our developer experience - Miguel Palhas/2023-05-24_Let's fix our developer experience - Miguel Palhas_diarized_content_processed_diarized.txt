00:00:07.450 - 00:01:05.470, Speaker A: My name is Miguel. I'm going to talk about developer experience, something that I've been building for the past couple of months kind of as a side project. So first of all, even though it started as a side project, I need to thank my my employee Lightshift Capital, and also people from subvisual that were helping me along the way and giving me time and resources to be able to do this kind of thing. So with that out of the way, let me get to it. So I come from a web development background. This is kind of an illustration of one of the most important concepts I learned there about this red green refactor cycle and about the quick feedback loops that you need to get in order to do good TDD. Just by show of hands, I'm assuming most people here are hackers of some sort.
00:01:05.470 - 00:01:46.320, Speaker A: Either experience, junior, seniors, it doesn't matter. Okay, good. So, yeah, I learned a lot, a lot of stuff like this from web developments. I used to work in Ruby on Rails, Elixir, then rest more towards the end. And all of those ecosystems had something in common that I don't really find in Ethereum about the developer experience, which is that the tools are usually a lot nicer to use, especially for beginners. If you're an expert and you can read EVM bytecodes at breakfast, it's probably not a pain for you. But for beginners or for people that are on the sidelines of ethereum, like front end developers that don't write smart contracts but still need to interact with them.
00:01:46.320 - 00:02:43.598, Speaker A: There's a lot of things that I found along the way that small things that kind of build up and make the experience a bit painful for me to build and for even to teach newcomers in the space. And the way it started, the way I started this whole research and work was actually something kind of stupid. I'm not sure if anyone, depending on what you do for a living, if you recognize any of the issues on either of these screenshots. So, yeah, I use a lot MetaMask for development. Often I'm writing smart contracts and doing some front end work at the same time and I use Anvil or Ganache or that sort of thing. I already learned from speaking at people here at the Hackathon that a lot of people don't use local nets that just deploy to Sepoli or Gorli and so on, which is just going to increase that feedback loop and make it harder to iterate on stuff. But yeah.
00:02:43.598 - 00:03:34.026, Speaker A: So the first thing is, I think the biggest pain in the butt for me, which is when I'm iterating on smart contracts and the UI at the same time, I'm going to do some quick fix on smart contract going back to the UI, testing the transaction again, and it doesn't work. Why? Because to redeploy the smart contract, I needed to restart anvil trigger. The redeploy MetaMask doesn't know that it still tries to submit transaction with the nonce from the state it had before. It doesn't know that it should go back to zero. I need to go to the settings, reset that manually. It's a small thing that bothered me like every ten times a minute when I'm doing some quick change. And then the other is something that happens if I close my browser on my laptop and then I open it back up and I start MetaMask.
00:03:34.026 - 00:04:08.060, Speaker A: But it was connected to Anvil. Anvil is not live anymore and MetaMask doesn't even let me input the password and sometimes I need to start anvil just to get MetaMask going. Yeah, so these are two small things that kind of started me after this. I literally went into the MetaMask code base. I started reading maybe I could fix these things with a small pull request. That was kind of naive because the MetaMask code base is too big and with a lot of hands involved it's not like I was going to learn how to touch on it in a couple of days. But then I got to learn how MetaMask works.
00:04:08.060 - 00:05:05.098, Speaker A: It was kind of magic for me the way the extension would communicate to the pages and I ended up learning a lot about how that worked. That's mainly on EIP 1193 which specifies a lot of how window ethereum works, how the web page connects to your browser and vice versa. There's a lot of other IPS for other parts of the RPC API but this is one of the main ones. And through this research and talking with other people and brainstorming I kind of remembered a few other bigger pains I guess or not pains, but things that are kind of technical depth that there's reasons for those things to be the way they are but they still could be improved. So for example on MetaMask you're connected to one account, to one chain. When I'm developing what I would want ideally is if it's on localhost I want to use my test account or Mnemonic. If I'm on a regular website connected to mainnet, maybe I want to use my real wallet.
00:05:05.098 - 00:06:04.894, Speaker A: But on MetaMask I need to switch between the two back and forth. If I'm developing it switches globally to my development account. And same thing for network I'm either connected to Anvil or to mainnets I can't be connected to both depending on which website I'm working on. There's security reasons, there's scalability reasons for these things to exist but still they're a pain for our side. And the main thing after reading this EIP and noticing and others and noticing how it's a bit not necessarily incomplete but it's old, maybe a bit outdated in some things. It was built mostly by MetaMask for MetaMask because it's what existed at the time and as a result they then iterated and implemented some new endpoints that are actually not part of the RPC and then rainbowkit comes in and depends on those endpoints. So the spec is no longer being followed fully, which means that you don't actually get a connect with an EIP compatible wallet.
00:06:04.894 - 00:06:42.902, Speaker A: You just get a connect with MetaMask button that assumes that window Ethereum is MetaMask, when in reality it should just be a generic thing. So other than MetaMask, just a quick rundown of some of the tooling that I use. And this is by no means exhaustive, but a lot of the things that I use day to day. So Foundry does a lot of great things. It allows me to impersonate accounts, create forks, snapshots, and a lot of cool stuff. Of course, see the scan to maybe browse for Live Smart Contracts and interact with Dbis tenderly. If I want to simulate some transactions.
00:06:42.902 - 00:07:37.310, Speaker A: Then there's this impersonator XID, which I think a lot of people don't know, but it's really cool. It creates a fake wallet connection and it allows you to see any main net websites as if you were Vitalik or any other address in Ethereum. Obviously you can sign transactions, you still don't have the private key, but you can see the UI states and interact with the site as if it were someone else. For QA, for Debugging, this is really useful. Then there's public databases, public APIs that you can use to feed information like the Ethereum Database Signatures. Ethereum Signatures Database sorry, what do these things have in common? So a lot of these things are either CLI tools that you kind of need if you're not actually a solidity developer, but more of this kind of front end developer. Maybe you're not aware of those tools or you don't know how to use them properly.
00:07:37.310 - 00:08:29.534, Speaker A: Others are web tools that exist online and they are connected to Livenets only. So if you're running your local stuff on anvil for fast development cycles, you don't have access to those, like tenderly and Impersonator, for example. And so all this research and all these small frustrations and talking to other people, it led me to, ironically, to this thing where I'm frustrated with the current standards. So I decided to build my own. And right now the way that that's materialized is that I ended up not fixing MetaMask but essentially building my own wallet. As I was learning how MetaMask was working, that communication between the tabs and the extension and so on, I noticed a few other things that could be improved, at least for developers. That's the thing I'm focusing on right now, making the development experience a lot better.
00:08:29.534 - 00:08:54.040, Speaker A: But there are some things that, at least in theory, could be useful for users as well. So what's this? Iron wallet. So right now it's an attempt at being a drop in MetaMask replacement. What this means is that there's still an extension. The Iron Wallet itself is a desktop app, but there's still an extension to handle that communication. But the extension just sits there idle. You don't interact with it.
00:08:54.040 - 00:09:37.186, Speaker A: It's drop in in the sense that any site that has a Connect with MetaMask button, the Iron Wallet will fool it and the website will think that it's interacting with MetaMask because it supports the exact same RPC API and so on. So it should just work smoothly, of course, still work in progress, no promises. And the main things I was focusing at the start was just the developer experience. So first of all, it's anvil aware. It knows if you're connected to an anvil nodes if you're just developing something. And in that case, it does some additional things already. First of all, that non reset thing that I was talking about earlier, it doesn't happen at least on anvil because it detects that anvil was restarted.
00:09:37.186 - 00:10:07.066, Speaker A: It resyncs all the states right away. I'm going to show that in a minute. Also because this is right now targeting just developments. I don't care about passwords or encryption, just using the test mnemonic, the one that's usually publicly available. Of course it's not safe for real private keys. But the advantage is that I don't get that annoying pop up every time I need to do a transaction. If I'm testing a smart contract, I don't need to worry about checking what the gas fees are or rechecking my transaction.
00:10:07.066 - 00:10:45.802, Speaker A: I just want to click things fast and iterate quickly. And then some built in devtooling, which is more generic. But these are the things that I'm working on right now. I'm going to work in the future. And that actually I'm here in the hackathon trying to do some of those and maybe some of these will materialize into an actual wallet for end users. But right now that's not anywhere near my radar. So things that I'm thinking about both for developers and for users that could be useful and that these are work in progress, not yet supported, but in the works.
00:10:45.802 - 00:11:33.062, Speaker A: So first of all, it doesn't have to be restricted to a single chain, a single account at a time. I'm able to keep track of which tabs are connected to the extension and allow the user or the developer to configure which tabs he wants connected to which chain, based on maybe the domain name. Maybe I want local loss to angel and everything else to mainnet, something like that. Some rules around that, being able to use multiple mnemonics instead of being restricted to just one. Or if you're like me, you have like five chrome profiles with five different private keys. Transaction, simulation and inspection because I mentioned tenderly and impersonator. Those things you can do use on mainnet, but locally you have anvil, but you can use anvil on foundry tests or through the CLI.
00:11:33.062 - 00:12:26.902, Speaker A: There's no way to write at least that I'm aware of right now, to use it in a wallet. As a non EVM solidity developer, I would say smart contract interaction. So if you're interacting with smart contracts. It's usually very useful to have some kind of a built in Etherscan Contracts page for reading and writing smart contracts without having to implement the UI for each one of those yourself, because those things are there's an Avi, we can just programmatically build a UI around that. And then this may be just my opinion, but the fact that it's not sandbox to a browser also makes this a lot more beneficial. There's access to a lot of other features of the operating system that can be useful. Opens up a lot of doors about where can we store the private key, in what format, maybe in multiple formats.
00:12:26.902 - 00:13:03.040, Speaker A: Maybe they're in the cloud or in some other external device. And then this again, pet peeve. And probably a very niche thing, but I use a Tiling window manager, and those MetaMask pop ups on my computer just mess up my entire workspace. But maybe that's just me. So, yeah, now demo time. If it works, if I can get to that screen. No.
00:13:03.040 - 00:13:33.580, Speaker A: Okay. This is very hacky. Yeah, I can't clone the screen here. So this is what I'll have to do. So what I have here, that's a generic NFT Collection thing that I implemented just to implemented a long time ago, just to test things out. It's running that it's an XJS app. It's all running locally with envelope and so on.
00:13:33.580 - 00:14:06.330, Speaker A: This is the wallet that's also running locally. But it's a desktop app. It's not an extension, even though yeah, as I said, there's an. So, yeah, I need to refresh this probably. Okay, so there we go. So just to prove that it's working, this is the current UI for the wallet, where you have the same thing as MetaMask, like account selection, network selection. It propagates that to all the tabs.
00:14:06.330 - 00:15:02.078, Speaker A: But already because on MetaMask, every time you do that through a website, the MetaMask pop up, asks you to confirm, et cetera, et cetera. Right now, I don't care about that, so it just switches automatically. There's also this connections tab which shows which tabs are connected to it, which can see it updates in real time. The work that's not yet done is to be able to select some of these tabs or by domain or something like that, and override which network those are connected to. And I can submit transactions. And because this is anvil, and because this doesn't have that whole confirmation screen, it's still estimating the gas. But that's all on anvil you can see that just the fact that I'm clicking things and I'm literally minting NFTs a lot faster than I would with MetaMask and other wallets.
00:15:02.078 - 00:15:28.890, Speaker A: And the other nice thing about it is that now if I come here and I restart the server, that's server foundry, all the stack that's powering that website, and I restart it. Now, in MetaMask, this would be the moment where the nonce wouldn't allow me to just mince. But here that all works right off the bat. Yeah. Again, we can see transactions here right now. No more details. It's also tracking balances of both Eats and the RC 20.
00:15:28.890 - 00:16:15.260, Speaker A: Right now, that doesn't exist. The Contracts tab is where those interactions that I mentioned through the Avi will be, but this UI is not I'm not married to this. It's just your basic tailwind UI. So the initial focus was to get this to this state where it's already kind of useful, or useful if you're just developing contracts and just need a wallet to submit transactions. And none of those fancy features, just the speed and now this hackathon. And in the future is when I'm going to be working on all those other developments. Nice features that I mentioned before, and because I think I went pretty fast, I have time for questions, I guess.
00:16:15.260 - 00:17:12.340, Speaker A: Yeah. So you're saying you have both MetaMask and Wallet Connect, and sometimes the page you're using gets confused about which of the two it's supposed to use. Okay, yeah. You sign up with Wallet Connect and then Ethers thinks it's supposed to go to MetaMask. So I never had that use case myself. So I don't know what specific bug that is. But I did come across not in Ethers JS, but once in Rainbowkit and some other SDKs, there's some specific nuances about how they connect to the wallet, where, as I said before, they assume that if window Ethereum is there, then it's MetaMask, and if it's not MetaMask, they will get confused about it as well.
00:17:12.340 - 00:17:51.950, Speaker A: About wallet connect. Yeah, I don't know. I would have to try it, but it's probably something worth checking out and fixing somewhere. So you shouldn't be making a DAP for Iron Wallet. You should be making an App for an EIP 1193 compatible wallet. In theory, right now, probably there's some component of the spec that I haven't implemented that I missed. But the idea is that this would either completely implement the spec without adding any additional endpoints that you would rely on.
00:17:51.950 - 00:18:37.840, Speaker A: It's just all the RPC endpoints that are specked out. If there's some limitation in those, that makes some feature not work correctly, and maybe MetaMask and Wallet Connect both do something that is not part of the spec, then it should be part of the spec. Essentially, you shouldn't whatever DAP you create shouldn't be tied to a specific wallet. It should be tied to those specs, and every wallet should implement those. So, yes, that's it. Thank you.
