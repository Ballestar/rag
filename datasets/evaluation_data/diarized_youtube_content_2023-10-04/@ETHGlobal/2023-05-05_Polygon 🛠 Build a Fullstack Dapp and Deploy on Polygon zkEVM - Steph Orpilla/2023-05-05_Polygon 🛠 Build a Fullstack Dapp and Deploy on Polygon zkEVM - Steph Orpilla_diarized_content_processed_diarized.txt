00:00:07.690 - 00:00:16.430, Speaker A: Hey, everyone. Thank you so much for coming to this session. I'm going to really quickly show you how to bootstrap and deploy your DAP on Polygon Zke EVM.
00:00:16.430 - 00:00:28.050, Speaker A: But first of all, GMGM or as we've switched to ZMZM, since we're kind of like in this ZK universe. I'm Steph. I'm a developer relations engineer at Polygon Labs.
00:00:28.050 - 00:00:40.982, Speaker A: I'm also Oceans 404 on Twitter. And a fun fact about me is I got started in Web Three because of hackathons just like this. So I'm super passionate about building things and helping you all build things.
00:00:40.982 - 00:01:11.038, Speaker A: And one of the things I struggled with when I was doing hackathons is, like, building really quickly. So the goal of this session is to show you how to use Polygon ZK EVM really fast, so how to bootstrap something quickly so that you can focus more on your business logic and the hacks and the real world problems you're trying to solve and less on like, oh, how do I connect my wallet? Or what is specific about Zkevm? But that said, I will go over a few Zkevm things. But first, I just want to highlight our four different price categories for builders.
00:01:11.038 - 00:01:34.554, Speaker A: So we have four categories. The first one is the best cross chain or X chain hack with Polygon Zkevm. So we want to see you connect to either Ethereum or Polygon POS or some of the other L two S and use that data in an interesting way, whether you're connecting it for governance or like, having Mints based on owning tokens on another chain, something like that.
00:01:34.554 - 00:01:45.994, Speaker A: Next is 5000 for Polygon ID verified credentials. So implement identity in an interesting way. Next, we've got the best public good with account abstraction.
00:01:45.994 - 00:02:00.702, Speaker A: And I don't know if you noticed, but account abstraction has kind of been a theme at ETH Global Tokyo this year. And we're really excited to see all of the different account abstraction hacks. So if you did that on Polygon, you'd be eligible for three different bounties.
00:02:00.702 - 00:02:08.222, Speaker A: So you could triple up if you did a really great hack. Highly recommend that. And then the last one is our Polygon Build and Public Pool prize.
00:02:08.222 - 00:02:29.174, Speaker A: So if you deploy on any of our chains, you're eligible to split this prize with however many people also deploy. So really encourage you to deploy any type of DAP because we want to see what you're building. But we had a really exciting announcement on the 27 March, and that is that we launched Polygon Zkevm mainnet beta.
00:02:29.174 - 00:02:40.954, Speaker A: So it's on the main net. You can deploy DApps to it, you can test it out. We've had our testnet for about six months and over 70,000 developers have developed smart contracts and it's started to be battle tested.
00:02:40.954 - 00:02:51.038, Speaker A: So excited to see you develop on Polygon Zke EVM, this hackathon. Why? Polygon zke EVM. We think it's the next chapter of Ethereum Scaling.
00:02:51.038 - 00:03:10.418, Speaker A: It's exciting for developers because you can use all the same tools and technologies you're already used to whether that's building with hard hat or remix or foundry, they all work out of the box. You can use solidity the same way you would for Polygon POS or ethereum. And it just works pretty seamlessly.
00:03:10.418 - 00:03:24.090, Speaker A: The only thing that I have to call out is that we don't support four pre compile opcodes. So if you're building something with those, those aren't supported. But for the most part, everything should work seamlessly, which is great for developers.
00:03:24.090 - 00:03:36.900, Speaker A: So the first half of Zke EVM is ZK zero knowledge. And I like to explain this with an example. Did anyone play Where's Waldo as a kid? Those books where you look for Waldo? I know I did.
00:03:36.900 - 00:03:51.894, Speaker A: So Waldo is somewhere in this picture. And I could prove to you that I knew where he was without telling you exactly where he was. And I could do that by highlighting where he is in the picture and covering it with a big piece of paper.
00:03:51.894 - 00:04:13.310, Speaker A: So on this picture on the left, there's a big purple piece of paper in front of the actual Waldo puzzle. And so you can see that I know where he is but you don't know exactly where I've positioned this piece of paper. So that's kind of like a ZK proof where I'm proving to you I know where Waldo is without giving you the information to show you where he is.
00:04:13.310 - 00:04:31.220, Speaker A: So you don't know exactly where he is, but you know that I know. And I kind of, like, took this example from a cool wired video where a computer scientist explains ZK with five levels of difficulty to a little girl. He has, like, a penguins and puffins example.
00:04:31.220 - 00:04:53.926, Speaker A: But when this is kind of done in the real world, it's done with cryptography, which is complex math to prove a statement or, like, a batch of transactions in this case, is valid without actually needing to have all of the data there. So this is really great because it can be secure and private. But that's not actually the focus of Zkevm.
00:04:53.926 - 00:05:13.006, Speaker A: It's more for increasing the throughput of ethereum and adding kind of like to the efficiency. So ZK proofs help you prove that you know something without revealing any additional data about what that thing is. So that's the first half of ZK rollup or Zke EVM, so we know what ZK is.
00:05:13.006 - 00:05:41.450, Speaker A: Now the other half is what is a roll up? So a roll up is a layer two scaling solution. It's where you take a big batch of transactions and you do something interesting with them and you just post a small amount of data on the L one, which is ethereum. In the case of a ZK roll up, you're taking a big batch of transactions from Polygon, Zke EVM and instead of having all that data on ethereum you just have one single ZK validity proof that says, okay.
00:05:41.450 - 00:06:09.698, Speaker A: All of the state changes that changed on Zke EVM are valid and we can just have that posted on Ethereum which drastically decreases the amount of data there and increases the throughput and adds to lower cost transactions for each of those batch transactions. Because there's only one thing that's finally posted on Ethereum and that's that proof. So why polygon zke EVM? First of all, it's great to inherit Ethereum's battle tested security.
00:06:09.698 - 00:06:18.710, Speaker A: That proof is being posted on Ethereum and Ethereum has been running successfully for years and years. We trust it, we love it. For DeFi, that's awesome.
00:06:18.710 - 00:06:31.274, Speaker A: Second reason is achieving true EVM equivalents. And when we have that, the things that function on Ethereum also function on Zkevm. So you don't have to change functions or anything.
00:06:31.274 - 00:06:41.050, Speaker A: The code works the same way. Third reason is it's fast and performant. And then the fourth reason is lower cost transactions than if you were operating just on Ethereum.
00:06:41.050 - 00:06:59.406, Speaker A: Some of the industry use cases and things that we're really excited to see you all build are things in the DeFi and traditional finance space. When you're transferring value you want high levels of security, right? Because you don't want somebody to be able to change that transaction. So for finance we highly suggest Zkevm.
00:06:59.406 - 00:07:17.042, Speaker A: Also for supply chain infrastructure projects, healthcare, all of that, you need high levels of trust. So Polygon Zke EVM is the right choice when you're figuring out what chain to use there. So to get started building, the first thing you need to do is bridge over some ETH.
00:07:17.042 - 00:07:31.654, Speaker A: So on the testnet that'll be Gorely ETH. And then on the main net it'll be just like real ETH that you would use on Ethereum. So you'll use wallet polygon technology and you'll bridge over those tokens so that you can use them on Zkevm.
00:07:31.654 - 00:07:50.530, Speaker A: And then once you do that, you can operate on this chain pretty much the same way you would with Ethereum. And I'm going to show you how to pretty quickly build a DAP. I worked on Create web three DAP and added a polygon Zke EVM network the other day with my friend Vito and the Alchemy team.
00:07:50.530 - 00:08:06.690, Speaker A: So I'm just going to show you how to use this tool to pretty quickly create your own DAP and deploy to polygon Zke EVM. So like I said, this is a tool that was created by the Alchemy team. All I did yesterday was add support for Polygon Zkevm.
00:08:06.690 - 00:08:22.346, Speaker A: Here are some of the other chains that are already supported. So Ethereum and Polygon were already supported Arbitrum and optimism. And the cool thing about this is you can get started pretty much as easily as you can with Create react app if anybody's ever used that.
00:08:22.346 - 00:08:48.870, Speaker A: So I love this tool because it bootstraps a front end and helps you create the smart contracts that you would need for anything you're doing. So I'm just going to open a command line tab so all you have to do is run NPX and then create Web three DAP at latest. And this will just start that package, creating a Web Three DAP.
00:08:48.870 - 00:09:07.610, Speaker A: So it's beginning to bootstrap and it's just asking me for some details about my project. So I'm just going to create a simple NFT project because I think we're all familiar with NFTs, just so that you can understand how this tool works. So I'm going to call it Tokyo NFT.
00:09:07.610 - 00:09:17.402, Speaker A: So then you can either choose to create a full stack DAP or use a template. I'm going to just choose the full stack DAP so you can see the full workflow. You choose your chain.
00:09:17.402 - 00:09:35.058, Speaker A: So I'll choose Polygon Zkevm and you can choose your development environment. I'm going to use Hard Hat, and the beautiful thing about Zkevm is that it works with Hard Hat Foundry Remix, all the things that you're already used to building with. Do I want to create a smart contract? Yes.
00:09:35.058 - 00:09:46.854, Speaker A: And then since we're just going to do some NFTs today, I'll choose ERC 721. But as you can see, you could use this if you were doing something interesting with tokenomics. You could do like an ERC 20.
00:09:46.854 - 00:10:05.310, Speaker A: You can also do, I believe, a governance contract if you were doing something with Dows and then name for your contract. Let's just call it cherry blossoms and symbol CBS, I guess. Or just CB.
00:10:05.310 - 00:10:22.514, Speaker A: That works. Okay, so now it's asking me to toggle some features. If you've ever used Open Zeppelin's Wizard, I think I spelled that completely wrong.
00:10:22.514 - 00:10:37.198, Speaker A: If you've ever used the Contracts Wizard from Open Zeppelin, it's using this same API where you can pick whatever token you want and add features. So we're just doing this from the command line. So I would like my NFTs just to auto increment.
00:10:37.198 - 00:10:42.890, Speaker A: And also have uri storage. So auto increment. Just oh, wait.
00:10:42.890 - 00:10:49.974, Speaker A: I'm not done selecting. So auto increment. Just bumps up the ID every time we mint an NFT.
00:10:49.974 - 00:11:09.726, Speaker A: And then Uri storage means that we can create our own metadata for the NFT, whether that's image, title, whatever we want there. So you could also add any of these other features if you wanted to, but since this is going to be a pretty simple demo, I'm not going to do that. I'm done selecting features.
00:11:09.726 - 00:11:19.460, Speaker A: Next, it's just asking me if I already have an Alchemy account, which I do. Alchemy allows you to have RPC URLs. So I have a bunch here.
00:11:19.460 - 00:11:36.522, Speaker A: I created this key a day ago, so I'm just going to reuse it and I'll delete it after this demo so no one will be able to grab my key and know it. But I'm just going to paste it back into the command line. And now it's creating this full DAP boilerplate for me.
00:11:36.522 - 00:11:50.062, Speaker A: So it's going to give me all of the dependencies that I need for this. And it'll have a front end and a back end. So it'll create this Hard Hat repo for me and I'll basically have the shell of everything I need to do.
00:11:50.062 - 00:12:13.890, Speaker A: So all I have to do next is my business logic and a tiny bit of front end, which in a hackathon setting is great, right? Because you don't have to figure out, oh shoot, how do I add Wallet connect or Rainbow Wallet or anything like that? It just is already there. So all you do is focus on whatever you're actually hacking on, which I love. The other really cool thing that Alchemy has is some component libraries.
00:12:13.890 - 00:12:48.830, Speaker A: So let's just check those docs really quick so you can see what's available. If I was hacking this weekend, I'd probably use a combination of the component libraries and then something like Material UI or Chakra to have a bunch of components so that you don't worry about all of the styling. But the components that are available out of the box for Alchemy are some things that include like an NFT Minter and I believe also an ERC 20 claim.
00:12:48.830 - 00:13:05.154, Speaker A: So those are both great for really quick bootstrapping. Okay, we're almost there with the bootstrapping and this is installing all dependencies. So once it's done, really all I'll have to do is run like NPX Hard hat.
00:13:05.154 - 00:13:18.240, Speaker A: Compile and I'll have everything I need to deploy my smart contract. Come on, WiFi. This is what I get for doing a live demo.
00:13:18.240 - 00:13:28.500, Speaker A: Okay, awesome. So as you can see, there's two more things to do. Add your private key in the env file and then run the application.
00:13:28.500 - 00:13:52.140, Speaker A: So I'm just going to copy over an env file that I have already and I'll just add it to so this is just copying it into my back end folder because I don't want to show you all my env file. But now I've got that and I can just run the front end command to Bootstrap, our front end. So I'll copy this in.
00:13:52.140 - 00:14:09.478, Speaker A: It is running on localhost. We just open this up in Chrome and this is what we have out of the box from Alchemy. Like I said, this is the Bootstrap site and we have a Connect wallet button.
00:14:09.478 - 00:14:23.610, Speaker A: I'm just going to use MetaMask. You can see I'm already connected to the Zkevm testnet and that was all done for me. Didn't have to do a thing, which is pretty awesome.
00:14:23.610 - 00:14:32.586, Speaker A: I don't know if you've had to do this from scratch ever, but it can be painful. So this is great. And then the last thing I'm going to do is just deploy my smart contract.
00:14:32.586 - 00:14:48.950, Speaker A: So this was the front end repo that was generated. I'll just show you the folder structure here. So we've got a back end folder and also a front end folder.
00:14:48.950 - 00:15:01.294, Speaker A: The front end folder is just a Next app that looks like this. The backend folder is really similar to a hard hat repo if you've used hard hat before. And all of the commands are the same as well.
00:15:01.294 - 00:15:14.018, Speaker A: So let's just CD into backend and then the Hard Hat command is NPX hard hat. Compile. And what this is doing is it's taking the contract that we bootstrapped from the command line.
00:15:14.018 - 00:15:29.062, Speaker A: If you remember, I called it cherry blossoms. I had this as the short name for it. And you can see that we've bootstrapped this with the Uri storage access control, the counters, everything that we asked for in the command line.
00:15:29.062 - 00:15:44.134, Speaker A: So it was pretty simple there. I ran Hard Hat compile and I've got all of those solidity files successfully compiled. And let me just double check the command for actually deploying in my package.
00:15:44.134 - 00:15:48.794, Speaker A: JSON. It looks like it is. NPM run.
00:15:48.794 - 00:16:00.574, Speaker A: Deploy testnet. So that's just going to run the deploy script that was also created when this was bootstrapped. And just to show you, this is our Hard Hat config that was also created for us.
00:16:00.574 - 00:16:29.440, Speaker A: In the Networks object, you can see we've got Polygon, Zke, EVM Mainnet, and also the testnet. And those both have our Alchemy keys that we added. So I'm just going to run that NPM and this will just start to deploy to Polygon Zkevm testnet and we should be able to see the result of this in the testnet explorer.
00:16:29.440 - 00:16:39.530, Speaker A: So we've got a testnet and Mainnet Explorer. They look very similar to Etherscan. If you've used those before, they're just at Zkevm Polyscan.com.
00:16:39.530 - 00:16:59.942, Speaker A: And you can switch between mainnet and testnet in the Explorer. Let's see what the contract address was. So, Cherry Blossoms, our NFT project was deployed here to this address and yes, it was deployed about 31 seconds ago.
00:16:59.942 - 00:17:15.100, Speaker A: So the only other thing we have to do now is hook up the front end. You can do that using those really nice components that Alchemy provides. So I'm just going to pull up the components really quick so I can reference those as we add them to the front end.
00:17:15.100 - 00:17:30.618, Speaker A: Okay, so back in CW 3D, which is just create web Three. DAP checking out the components. So you can either use collection, display creator, minter or gallery.
00:17:30.618 - 00:17:41.570, Speaker A: I'm just going to look at Minter so we can mint the NFTs from the front end really quickly. It's asking me to create two files. One of them is an NFT Minter and the other one is just some styling.
00:17:41.570 - 00:17:53.640, Speaker A: I'll show you what that code looks like. They've got really nice copy paste abilities here. I don't trust my copy paste, so I'm just going to grab them from my finder where I pasted them earlier today.
00:17:53.640 - 00:18:21.454, Speaker A: So I'm just going to put NFT Minter inside of front end components and then the styling can just go in the styles folder here. And then the only other thing we have to do is actually import these. So we'll just add these to the page components, pages index.
00:18:21.454 - 00:18:37.078, Speaker A: Okay, I'm just importing those two components to the front end. And then it looks like this takes a few props. So it's asking for the contract address.
00:18:37.078 - 00:18:47.702, Speaker A: And then also the let's see if I save this. That'll format, it a little easier for us to look at. Okay, so first thing we need is the contract address.
00:18:47.702 - 00:18:54.970, Speaker A: We know that from our command line. This was where we deployed about a minute ago. So just adding that here.
00:18:54.970 - 00:19:07.440, Speaker A: And then for the Token Uri, I'm just going to upload it really quickly to NFT Storage. I created one of these a little bit earlier as well. It's just going to look like this.
00:19:07.440 - 00:19:21.038, Speaker A: Typically a Token has a title and then a description and an image. Since this is cherry blossoms, I'm just going to use an image I took two days ago at one of the gardens here. Just some beautiful cherry blossoms.
00:19:21.038 - 00:19:29.458, Speaker A: I thought I missed the season, but luckily got one more tree in. So this one was waiting for me. But let me just go to NFT Storage.
00:19:29.458 - 00:19:41.500, Speaker A: This is a place where you can upload to IPFS really quickly. There's also like an API, so you can do it programmatically. But today I'm just going to upload where is it? Let's see.
00:19:41.500 - 00:19:51.600, Speaker A: Desktop tokyo hackathon. So just uploading the token. Uri here.
00:19:51.600 - 00:20:05.410, Speaker A: It'll spit out an IPFS link and I'll just add that to the front end. So let's see. Is it this one? Nope.
00:20:05.410 - 00:20:26.560, Speaker A: Okay, we'll just use that one for now. Back in the index, I'm going to change the Token Uri, and then the very last thing is the contract abi. This is what gives our front end all of the knowledge about what the contract actually looks like.
00:20:26.560 - 00:21:05.510, Speaker A: So I'll just grab this from the back end in where was it? Artifacts build info and then no artifacts build info and contract. So I'll just copy this contract into the front end and inside of NFT Minter. Where am I putting this? Sorry, I'm just moving this file out and we'll just reference abi from this file inside of index.
00:21:05.510 - 00:21:39.770, Speaker A: So import contract from all right, if all went well in this live demo, we'll see an updated let's see, where did it go? I'm hoping to see a Minting site. Looks like it's loaded. Oh, here it is.
00:21:39.770 - 00:21:53.630, Speaker A: Okay, so I'm going to mint now. We could improve the CSS, obviously, but this is the general Minter gas. Seems to be weirdly very high, but we won't worry about that quite yet.
00:21:53.630 - 00:22:04.080, Speaker A: And I'll go back to the contract and let's see if we got that Minted successfully. So we should see one new transaction. That is a mint.
00:22:04.080 - 00:22:09.104, Speaker A: Whoo. Here it is. Let's check it out.
00:22:09.104 - 00:22:46.510, Speaker A: Nothing ever works for me the first time, so I'm kind of impressed by this. So hopefully we'll see the NFT Minted to this address and that will be our create not create, react app create web three DAP demo on polygon Zke EVM. So if I can do this in 30 minutes, you all can definitely do this within the two day hackathon, but come on, WiFi, let's go.
00:22:46.510 - 00:22:56.044, Speaker A: We'll see. Okay, I'm going to go back to the presentation. There's just one more slide, and it is a QR code to the docs.
00:22:56.044 - 00:23:18.132, Speaker A: And then if you need any docs this weekend, this is where all of them are for polygon, ID, zkevm, POS, our prizes, everything. But I'm Steph, and I'll be at the polygon booth all weekend. So if you need encouragement, if you need help, come say hi, and I'm happy to help with anything you need as you're hacking, whether it's polygon or anything else.
00:23:18.132 - 00:23:36.670, Speaker A: Love to talk about web three, but let's go back and see if this actually loaded and worked, please. We might just have to assume it did, because I don't know if the WiFi is loving me right now, but hopefully we've got an NFT of a cherry blossom. Thank you so much.
00:23:36.670 - 00:23:49.760, Speaker A: I'll just let it load until our next presenter comes. Oh. Yay.
00:23:49.760 - 00:23:52.160, Speaker A: We've got it. Yay.
