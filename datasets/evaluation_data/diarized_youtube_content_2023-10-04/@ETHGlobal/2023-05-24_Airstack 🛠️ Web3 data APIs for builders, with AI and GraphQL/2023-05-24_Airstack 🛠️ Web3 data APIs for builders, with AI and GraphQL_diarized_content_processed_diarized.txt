00:00:07.290 - 00:00:17.310, Speaker A: Good afternoon. Hope everyone's doing well. I'm Jason, founder of airstack, and I'm here with my colleague Rishi, who's one of our senior developers.
00:00:17.310 - 00:00:47.558, Speaker A: Hope everyone's enjoying the hackathon thus far. So I'm going to do a very short introduction to airstack, and then Rishi is actually going to show you a demo app that we've built using our SDKs and then talk through the APIs really quick. For those who are unfamiliar at all with airstack Web three developer API platform that enables you to very easily integrate both on chain and related off chain data into your applications.
00:00:47.558 - 00:01:18.150, Speaker A: With airstack, you can run a single query across chains, so across both Ethereum and Polygon and also across DApps as well. So we have an identity API that cuts across Farcaster, Lens, ENS, and then also we have on the NFT marketplace side, OpenSea, Blur and Wearable. And you can query all of that in a single query and response using our APIs.
00:01:18.150 - 00:01:37.382, Speaker A: If you have any questions, we have a Telegram chat that is very active with developers and we encourage everyone to ask questions in the Telegram chat. You can come up to us afterwards if you don't have access to the chat. We have a team of 16 people working on airstack.
00:01:37.382 - 00:01:51.920, Speaker A: There's two of us here today. The other 14 are all standing by, answering questions as you have them. If you go to airstack XYZ, where I am, see, you can access by launching the app.
00:01:51.920 - 00:02:06.578, Speaker A: You can go to the app homepage here, and from here you can sign in. And when you sign in, you will get your API key. It is entirely free.
00:02:06.578 - 00:02:15.478, Speaker A: We don't plan to charge for airstack for several, several months now. Our focus is just on working with developers, helping you build good use cases. So it's entirely free.
00:02:15.478 - 00:02:31.002, Speaker A: Just one thing I'll point out. You'll get an API key provisioned when you sign in if you want to get a higher rate limit. So all you need to do is go to manage your plan and request a rate limit increase and our team will receive it.
00:02:31.002 - 00:02:40.878, Speaker A: And it just asks you to explain why they needed the rate limit increase and we'll give it to you. Don't worry. We want you to build great applications, so we have other plans that we can upgrade you to.
00:02:40.878 - 00:02:54.690, Speaker A: No problem. And there will be no charge at all, I promise you. Last thing I just want to point out is if you go to the airstack app, you've probably seen that we have the AI Assistant.
00:02:54.690 - 00:03:06.194, Speaker A: It's kind of like cheat codes. In the end, if you're a developer, you need to use the SDKs or use the GraphQL. Access the APIs directly.
00:03:06.194 - 00:03:21.758, Speaker A: The AI Assistant is just like cheat code is a great way to help you get started and to learn the product. So you can write a query using the AI and it'll create the GraphQL query and then it's a great way for you to learn the syntax. So I'll just show you a quick example.
00:03:21.758 - 00:03:43.090, Speaker A: I can say, show all NFTs owned by Betashhop E and the images along with his Web three social profiles. And the AI assistant will create this query.
00:03:44.150 - 00:03:45.780, Speaker B: Where am I missing though?
00:03:50.970 - 00:03:58.220, Speaker A: Where's the actual do you know where the actual Explorer is?
00:03:58.910 - 00:04:01.878, Speaker B: Yeah, sorry, no buttons.
00:04:01.974 - 00:04:02.842, Speaker A: It's there though.
00:04:02.896 - 00:04:10.240, Speaker B: Yeah, he just got masked. Somebody can you do it in a UF tab? Yeah.
00:04:15.570 - 00:04:34.120, Speaker A: There we go. Okay, sorry. So I can say, show all NFTs owned by Betashop E and the NFT images and his Web three socials, just an example.
00:04:34.120 - 00:04:50.614, Speaker A: And the AI will generate the query. So it's essentially the APIs that we have are NFT collection stats. So stats about NFT collections domains, which is ENS marketplace stats, NFT sale transactions.
00:04:50.614 - 00:05:13.742, Speaker A: So all transactions happening on OpenSea and Blur and Rarible socials is Farcaster and Lens token token balances or balances of a wallet. NFTs is you can look up a collection and see all the holders, all the metadata about the collection token transfers. So the whole transfer history of an address as well as wallet, which is everything related to that wallet.
00:05:13.742 - 00:05:32.466, Speaker A: So you see for the query that it did here, it just created basically it opened up the GraphQL and it created the query. One thing you note is the queries can be cross chain. And so this is all NFTs owned by Betashop, which is ETH, which is on Ethereum and NFT images.
00:05:32.466 - 00:05:48.346, Speaker A: And here, I'll just run this and I can get the JSON file here and you can then work with that. And you can see we also have images as well that are resized. You can ask for different sizes as well.
00:05:48.346 - 00:06:05.938, Speaker A: I'm going through this really fast because I want to get Rishi up here. The last thing to show you is the docs are very comprehensive. If you go in the docs, you'll see the SDK information about the API and then the reference has every detail about each of the APIs that we have.
00:06:05.938 - 00:06:15.074, Speaker A: So you can see exactly what's in the APIs and how to call them. That was me in four minutes, giving you a very high level airstack. He's going to show you the real meat.
00:06:15.074 - 00:06:16.310, Speaker A: Go ahead, Rishi.
00:06:18.970 - 00:06:22.038, Speaker B: Yeah. Thank you, Jason. So, hi everyone.
00:06:22.038 - 00:06:41.534, Speaker B: I'm really excited to demo what we've done and great to see you all. So the query with Jason Ran, we're kind of building a demo similar to that which uses the underlying the same query underneath. And let me just open up how we're planning to make it look.
00:06:41.534 - 00:07:05.494, Speaker B: So it's going to be a single react page and how it's going to be is we're just going to enter a wallet address or any other identity. It can be an ENS name, it can be a Farcastle handle, it can be an address as well. And accordingly, we'll get a prompt of all the images which are there as well as other data associated with it.
00:07:05.494 - 00:07:28.810, Speaker B: And alongside that, you see that we have these buttons below Next and Previous. So we support Page Nation in our APIs and we'll be demoing how to integrate all of that, so anyone can just plug and play. So for the purposes of the hackathon, and in general making developers life easier, we thought that, let's build an SDK.
00:07:28.810 - 00:07:52.402, Speaker B: And it's a react based SDK that would allow users to just take these components, take our react hooks, and just plug it into their application and get started right away. Focus more on the actual app and not how to plug airstack into your service. So I'll just quickly walk through how it looks and what are the different support available.
00:07:52.402 - 00:08:04.358, Speaker B: So you just need to run NPM, Install or Yarn, whatever works for you. And we have react hooks. So we have query hooks and Pagination query hooks on a high level.
00:08:04.358 - 00:08:14.966, Speaker B: And query just involves running a single query. And Pagination is the example which we showed where you may need to iterate over multiple pages of data. Because we have a limit.
00:08:14.966 - 00:08:25.840, Speaker B: You can just use these particular hooks and get started. And alongside that, we have a lazy version of each query. So you don't need to actively handle it.
00:08:25.840 - 00:08:47.874, Speaker B: You can get the particular function from the hook, and then you can just use that function in any of your handlers. And alongside that, we also have an asset component. So, just referencing back to our figma, you can see that the NFT images that we get, they may be of different sizes.
00:08:47.874 - 00:09:02.330, Speaker B: And it's often difficult to resize and keep everything standard. And it's a lot of effort to do it by yourself. So we decided that you can just use our asset component and get started, and everything will be resized the way you'd like it to be.
00:09:02.330 - 00:09:12.430, Speaker B: We have different sizes, and I'll explain further as we get there. So, yeah, let's get started. We have a demo app here.
00:09:12.430 - 00:09:24.226, Speaker B: It's on our GitHub and it's public. I've already cloned it here so we can get started. First thing I'd suggest is just NPM install, make sure that you have everything.
00:09:24.226 - 00:09:47.914, Speaker B: And now you can just import this from our SDK, this init function, we just need to pass the API key, which Jason mentioned, and this key would basically append itself throughout any API request as a header. So you're good to go. You don't need to manually add it anymore, and I'll just show how we can get the key.
00:09:47.914 - 00:10:01.278, Speaker B: So just go back to here. You can just click View API keys and copy, and you're good to go. So this is the first part done.
00:10:01.278 - 00:10:16.046, Speaker B: Now let's look more into how the actual structure is coming for the react app. So, we have, as I mentioned, we had these hooks, and this is one of the hooks we're using. Lazy query with Pagination.
00:10:16.046 - 00:10:37.926, Speaker B: So this will ensure that you can just have a Next and Previous button and whenever you click it accordingly, the Pagination will take place. We have the hook here and these are how the variables look. So just quickly explaining that get data is the actual underlying function which makes the API call and it updates these following four variables.
00:10:37.926 - 00:11:01.150, Speaker B: So data would be the actual API data and loading and error are just used for error handling and state management. And Pagination is what we use actually underneath to implement the Next and Previous buttons. And you can see just using this single Pagination has just reduced your code lines really fast.
00:11:01.150 - 00:11:12.174, Speaker B: You don't really need to know underneath how we're using Pagination, how the API uses cursors. You just straightaway do this and you're good to go. And the argument we pass here is the query.
00:11:12.174 - 00:11:31.638, Speaker B: So this query here, we can get it from the Explorer as well. And you just need to use that query and you can build this straight up from the Explorer and you just need to paste it and we're good to go. Right, so here we are basically destructing that Pagination variable.
00:11:31.638 - 00:11:45.310, Speaker B: And we have two Boolean variables and two functions. And the Boolean variable is just used to denote whether we can traverse in that direction or not. And the Next and Previous page does the actual API call implementation.
00:11:45.310 - 00:12:05.058, Speaker B: Here we have a submit handler that takes the input from the text box here and we alongside that pass the limit. And this limit is 50 for us right now. So that's why we need to use Pagination because you may have thousands of NFDS.
00:12:05.058 - 00:12:17.654, Speaker B: And if we only return 50 at a time, we needed a strategy to show everything. So we went that way. And now this is where the main header and the structure lies.
00:12:17.654 - 00:12:29.642, Speaker B: And basically from the data response, we're kind of showing how the state would look like. This is the actual list which comes. And here is how we've implemented the Next and Previous button.
00:12:29.642 - 00:12:52.758, Speaker B: So you can see it's just have an on click pass the variable that we got from Pagination and you can even disable or enable it using the states which were provided. And we'll dive in now to how this token list looks like. Yeah, so here we're using the asset which I mentioned before.
00:12:52.758 - 00:13:08.246, Speaker B: And this asset basically airstack has all the assets on it. So we're not querying externally for any further data, everything's with us. So we made this asset component that you can directly plug in with our API.
00:13:08.246 - 00:13:16.474, Speaker B: And it's going to be very seamless. We have the chain which is needed. Like you want polygon data.
00:13:16.474 - 00:13:24.186, Speaker B: By default. We assume ethereum. But if you'd like polygon data, you just need to add that as a field, the address and token ID of the NFT you would require.
00:13:24.186 - 00:13:35.886, Speaker B: And yeah, we also have preset. This is what I meant by the size. So we've resized all these NFT images based on some dimensions, which is there in our docs.
00:13:35.886 - 00:13:44.230, Speaker B: And you can just pass it here. And everything would be uniform. Everything would be scaled and yeah, I think we're good.
00:13:44.230 - 00:14:24.030, Speaker B: So let me run this so we can start with Italic ETH. So now I just click submit 1 second. Let me try.
00:14:24.030 - 00:14:44.490, Speaker B: Sorry. This always happens. This Internet working.
00:14:44.490 - 00:15:39.002, Speaker B: Go ahead. Okay. Yes.
00:15:39.002 - 00:15:45.306, Speaker B: Sorry. I entered the wrong API key. So, yeah, here we can see how the images are turning up.
00:15:45.306 - 00:15:57.506, Speaker B: They're all of the same size, even though the original images might be of different sizes. We can page A, go to the next page, and you can see how it works. And you can enter anything here.
00:15:57.506 - 00:16:06.034, Speaker B: So we can enter Stanny note lens. You can get lens related data as well. You have a farcast ID.
00:16:06.034 - 00:16:16.050, Speaker B: You can pass that as well. And all this data is available on airstack. Yeah, I think with this, we're good with the demo.
00:16:16.050 - 00:16:18.160, Speaker B: So open to any questions anyone has.
