00:00:06.570 - 00:00:11.760, Speaker A: All right. How you guys doing? Thank you so much for coming. You guys having fun or what? Welcome.
00:00:11.760 - 00:00:19.534, Speaker A: All right, so quick introduction. My name is Kevin. I actually work full time for a Web 2.0
00:00:19.534 - 00:00:24.254, Speaker A: company, NGINX. You might have heard of them. Most popular web server out there.
00:00:24.254 - 00:00:32.866, Speaker A: But I also so I'm a part time developer advocate for Scaffold ETH. Thank you. And I work basically in the build guild.
00:00:32.866 - 00:00:49.046, Speaker A: If you're not familiar with Build Guild, it's basically a group of developers that like to build on Ethereum. Most of them are fond of Scaffoldeth, which I'm going to be talking a lot about today. And I also have a nonprofit that I've founded in California just to kind of educate people about blockchain, specifically Ethereum.
00:00:49.046 - 00:01:01.066, Speaker A: I'm also a mentor for Growic, which is a free solidity track if you're interested in that. It's a free track and it's basically an eight week cohort where you can learn more about solidity. And I'm a photography and filmmaker.
00:01:01.066 - 00:01:13.202, Speaker A: You'll see me running around, I'm actually shooting photos for the event today. So anyways, that's my contact info if you guys want to follow me at all. So what is scaffold ETH? So most of what I'm going to be doing today is actually a demo.
00:01:13.202 - 00:01:25.778, Speaker A: But I just want to give you guys a brief kind of overview of how it works and what you need to get kind of going and get set up. You need Git, obviously, because you need to be able to check out the repository. And then you need Node JS and yarn installed.
00:01:25.778 - 00:01:31.014, Speaker A: Node JS is pretty much the prerequisite. You need at least version 16 or above. So make sure you have that.
00:01:31.014 - 00:01:37.554, Speaker A: Make sure you have the newest version of Yarn. Don't be using like an old version of Yarn on Linux. There's this kind of old version of Yarn that doesn't work properly.
00:01:37.554 - 00:01:45.966, Speaker A: So just get the newest version of Yarn and then you'll be good to go. That's really the only tools you need to get going. It's going to spin up Hard Hat for you.
00:01:45.966 - 00:02:06.734, Speaker A: So Hard Hat is like one of the main components to Scaffold ETH as well as React. So it's going to spin up react for you and it's going to do a lot of the magic that you don't have to worry about, like setting up a hackathon project or any web three Ethereum based project can. Be a hassle because you got to spin up all these different programs and make them talk to each other and figure out how you're going to inject your abi into react.
00:02:06.734 - 00:02:16.114, Speaker A: And yada yada, everything's kind of already done for you. And I'm going to kind of show what that kind of looks like. And then everything obviously that I'm going to talk about today is based on Solidity.
00:02:16.114 - 00:02:38.938, Speaker A: So we compile our contracts in Solidity and that is pretty much the smart contract language of choice for Scaffold ETH. So if you're a developer, how do you spin it up? So the first thing you're going to do is clone the repository. Everything is based on Yarn scripts.
00:02:38.938 - 00:02:54.366, Speaker A: If you're not familiar with Yarn, Yarn is really awesome because it is a package manager, but it also allows you to run these cool kind of command line scripts with simple commands. So you can be like yarn this, Yarn that, Yarn whatever. So Yarn Install is going to do all the dependencies for you and install all the prerequisites.
00:02:54.366 - 00:03:13.302, Speaker A: So you don't really need to figure out what version of this particular React you want to use or Hard Hat, it's going to do that for you based on the current version of Scaffold ETH. And then you're going to run Yarn Chain, that's going to spin up your blockchain, hard Hat, right, running locally. And then you're going to run React on Localhost 3000 using Yarn Start.
00:03:13.302 - 00:03:26.026, Speaker A: So it's Yarn Install, you only do that once. Yarn Chain to spin up your blockchain, yarn Start to spin up React and then you do a Yarn deploy. And what that is going to do is going to use Hard Hat to take the there's kind of like a hello world smart contract.
00:03:26.026 - 00:03:34.298, Speaker A: I'm going to show you. We're going to start toying with it and it's going to ship it and deploy it. And that's going to also automatically inject the Abi.
00:03:34.298 - 00:04:01.340, Speaker A: So if you don't know what Abi is, it's basically the way that the smart contract, your front end can interact with that smart contract in a way because obviously when you compile down your smart contract into bytecode, it's not human readable specifically. It's not readable from your front end either. So as you interact with your application, pretty simple, you start to form blocks and you can start testing, right? And every time you do a deploy, it gets a fresh copy of your smart contract and we'll show what that looks like as well.
00:04:01.340 - 00:04:08.300, Speaker A: So that's pretty much all the slides. I don't like doing slides because slides are pretty boring. So let's just get right into it.
00:04:08.300 - 00:04:26.238, Speaker A: So if you do a search for Scaffold ETH, the first one is going to come up is going to be the GitHub repository. So the primary repository for the actual Scaffold ETH is here. At Scaffold ETH there's also this Challenges directory which is linked to the Speedrun Ethereum challenges, which I'm going to talk about in a second.
00:04:26.238 - 00:04:34.834, Speaker A: And then there's some examples as well. So the cool thing about it is you can find like ERC 721 example. You can find an ERC 1155 example.
00:04:34.834 - 00:04:48.630, Speaker A: There's pretty much an example for everything you need to know or need to build on top of. So it's a great starting point for hackathon projects, right? You don't have to worry about injecting the open Zeppelin contracts. They're already pretty much set and ready to go.
00:04:48.630 - 00:05:01.466, Speaker A: It's even got a little bit of a front end going for you. It's already got Ethers JS hooked up, it's already got your API plugged in, yada yada, everything's kind of set up. So if you like as an example, let's just say you went to Scaffold ETH examples and then you did a search here.
00:05:01.466 - 00:05:19.154, Speaker A: You could type like ERC, there's an ERC 20 demo, there's a simple ERC 720, 111, 55, and you can kind of pick and choose from that starting point. And that's a perfectly valuable starting point for your hackathon project. Okay, but we're going to be focusing on Scaffold E, the actual main build.
00:05:19.154 - 00:05:35.334, Speaker A: And that's where you should really if you're just like toying around and building, you're going to use that. By the way, all the instructions of everything I said is going to be inside of the repository as well. So like the yarn install, yarn chain, yarn start, and pretty much everything I'm going to go through today is in here.
00:05:35.334 - 00:05:53.046, Speaker A: So don't feel like you have to follow along. I'd rather you guys just kind of watch me do it and then unless you're really good, you can follow along. And then after you get Scaffold set up, I always recommend people if they're still learning to go to Solidity by example and copy and paste stuff from Solidity by example into your smart contract and start testing.
00:05:53.046 - 00:06:14.350, Speaker A: That way, once you get comfortable with Solidity, that's when you'll say, okay, well, I want to test my abilities. This is outside of obviously the hackathon, but when you want to start learning more speedrun, ethereum is a great resource. Now it's basically like a set of challenges that you go through and real quickly, challenge zero is you build a simple NFT.
00:06:14.350 - 00:06:40.798, Speaker A: Challenge one is you build a decentralized staking app, a token vendor, a dice game, and you go through and eventually you get invited to the Build Guild, right? And then you can actually start kind of being part of the Build Guild community. And then obviously you get access to special chat channels too as well, where you can talk to the developers and the other builders and kind of work together to kind of solve these challenges. It gets really hard after challenge four, so if you can get through these challenges, it's a lot of fun.
00:06:40.798 - 00:06:49.822, Speaker A: All right, that's enough shill about that. But this is a good scan, this if you want to know anything about Scaffoldeth. All the links for Scaffold ETH are in this one high hello card.
00:06:49.822 - 00:07:06.580, Speaker A: So if you're interested in that scan that I'll give you guys just one quick second and then I'm also going to give a POAP away. So come see me afterwards and I will bring this up and you guys can scan the poops as well. Okay, so let's get going here.
00:07:06.580 - 00:07:17.954, Speaker A: I use tmux. I don't know if you guys are familiar with tmux, but it's basically like terminal multiplexer. It allows you to have more than one window open at a time you can do this in multiple windows.
00:07:17.954 - 00:07:31.350, Speaker A: But the general rule of thumb is you need like three windows open when you're working with Scaffold ETH. Okay? The first window is pretty much where you're going to do the yarn install. So you're going to set up install the dependencies.
00:07:31.350 - 00:07:38.670, Speaker A: I've gone ahead and done that. It takes a little bit over a minute to do, but once you get it set up, you don't have to do that again. You're good to go.
00:07:38.670 - 00:07:45.370, Speaker A: Then all you have to do is do a yarn chain. Yarn chain is going to spin up the hard hat node. It's going to run on Localhost.
00:07:45.370 - 00:07:55.038, Speaker A: That's it. You can pretty much leave that window open all the time. I like to have it just here in the corner because you might use hard hat console to print stuff to that console.
00:07:55.038 - 00:08:06.902, Speaker A: And you might want to debug your contract. And then over here in a new window in the same directory, you're going to do a yarn start. So what's that going to do? It's going to spin up React on Localhost 3000.
00:08:06.902 - 00:08:21.270, Speaker A: That's going to take about a minute. So we will let that do its thing. And then the last command, if you guys remember, yarn deploy, right? So those three commands, basically we've deployed adapt locally on our local host.
00:08:21.270 - 00:08:27.818, Speaker A: We can see here that we saw some contract calls. Let me zoom out a little bit. We have some contract calls.
00:08:27.818 - 00:08:38.066, Speaker A: It tells us how much gas was used. We can see that React just started on the right. Now we see more contract calls and we see how much gas was used to deploy our contract on the bottom, we even have our address.
00:08:38.066 - 00:08:43.966, Speaker A: So we get this kind of like cool printout. It tells us how long it took. Let's take a look at Scaffold ETH.
00:08:43.966 - 00:08:50.626, Speaker A: So it says I'm on main net. Oh, let me disconnect from MetaMask. Okay, so this is scaffold ETH.
00:08:50.626 - 00:09:02.234, Speaker A: So when you first get in Scaffold ETH, it's basically React, right? But what's cool about it is it has all this stuff already ready for you. Okay. This first app, home, you can think of this tab here.
00:09:02.234 - 00:09:18.350, Speaker A: Like everything in here is like where you would build your DAP that you're actually building for the hackathon. It's like your DAP inside of Scaffold ETH, right? And this is a special app, JSX file that's inside React. And you can just build around that, right? So you can inherit all of the components that you have in React and whatnot.
00:09:18.350 - 00:09:34.210, Speaker A: But what's cool is this debug contracts folder. So what this does is essentially takes a copy of your contract and it builds like a full functional debug UI for you. So it has your variables, your functions, it has your contract address.
00:09:34.210 - 00:09:46.950, Speaker A: It has the value stored in that all in this one location. And then you can really kind of test your assumptions as you're developing, right, in solidity so let's take a look at what that contract looks like. So adam.
00:09:46.950 - 00:10:00.934, Speaker A: I'm going to use Adam. You can use whatever you want, but obviously Adam is just a basic text editor. And what do we got here? We got a Packages folder and then we have a Hard Hat folder and then we have a React folder.
00:10:00.934 - 00:10:13.806, Speaker A: Okay, most of everything I'm going to show you today is really in the Hard Hat folder. And we're going to be working out of the Contracts folder and inside of that is your contract. So this is kind of like the de facto Hello World contract that comes with it.
00:10:13.806 - 00:10:24.462, Speaker A: So we can see here that we define a version of Solidity, we define a license. We import Hard Hat console so that we can do some logging to the Hard Hat console. We name our contract.
00:10:24.462 - 00:10:40.598, Speaker A: And we also have like an event that we're doing that basically broadcasts the address that calls the purpose function and the string that they pass into that function. And then we have another variable that we define. And then we have the empty constructor which is not doing anything, but we could do that.
00:10:40.598 - 00:10:50.634, Speaker A: I'll show you about that in a little bit. And then we have Set Purpose, which is a function that allows us to change that variable, right? We have this kind of like public variable here. We could change it here.
00:10:50.634 - 00:11:04.538, Speaker A: Like if we say unstoppable like that and then save that and then do another deploy. And by the way, you might want to reset enforce a deploy. Sometimes just do reset and it will force a new contract to be deployed.
00:11:04.538 - 00:11:19.794, Speaker A: So I just did that small change and then now we can look at the change here. It's been changed in here, right? And so you're able to kind of just do your changes to the smart contract deploy, go back, start testing. That's obviously just a very simple test, but let's get going a little further down the contract.
00:11:19.794 - 00:11:31.686, Speaker A: Okay, then we have inside this set purpose function. It takes a variable, essentially a string and passes it to the new purpose. And then we log that with console log using Hard Hat console.
00:11:31.686 - 00:11:42.490, Speaker A: And then we emit that event, right, so that we can capture the event and see that. So it's a pretty smart, it's like just a Hello World. It's like the simple starter contract.
00:11:42.490 - 00:11:53.726, Speaker A: Let's make some changes, let's make some interesting stuff. So the first thing you'll learn, you might want to do some kind of like access control. So let's just do like a quick kind of like janky access control.
00:11:53.726 - 00:12:02.050, Speaker A: We'll make it owner, sorry, owner public or address public. Owner equals. And we'll go back to our thing here.
00:12:02.050 - 00:12:11.170, Speaker A: And what do we see up here on the top? Right? So this is a burner wallet. The burner wallet is cool because you don't have to have MetaMask installed. It's just using a browser wallet.
00:12:11.170 - 00:12:38.782, Speaker A: And if you were to open up another tab, you still have access to that because it's in the browser, right? So you don't lose it. But if you were to come over here and say, oh, well, new incognito window and do Localhost 3000, we would get a new instance of burner wallet because it's an incognito one, right? So let's leave that open for right now because we're going to get back to that in a second. But my point is that we can just use this wallet and it's empty right now, but we can just grab some funds from the faucet clicking that button.
00:12:38.782 - 00:12:49.586, Speaker A: We can even grab more funds if we want. You can grab the address, we can come down here to the faucet and say, oh, I want way more. Let me, give me like, I don't know, thousand bucks send.
00:12:49.586 - 00:13:04.754, Speaker A: I'm able to just grab those funds from hard hat, just dump them into my burner wallet so I'm instantly ready to test. I don't have to worry about MetaMask and nonces and any of that junk, right? So let's make a change. Let's grab this address and we want to do like access controls.
00:13:04.754 - 00:13:10.758, Speaker A: Now we have access to this wallet. By the way, the private key is here as well. So you can export the private key that it generates.
00:13:10.758 - 00:13:29.200, Speaker A: So it's full functional wallet, right? You can also import private key. So if you just want to use like some one that you keep using and then let's go to the thing and let's define that variable, save it and then redeploy. Let's make sure it deploys correctly first, which it does.
00:13:29.200 - 00:13:50.754, Speaker A: And then now what do we see? We got a new variable owner, right? So what we could do is say like, all right, let's make sure that only someone who calls this function here is an owner. Like an access controlled function. We could do something like a require statement, right? And we could say require that the message sender is equal, equal to owner.
00:13:50.754 - 00:14:09.958, Speaker A: Otherwise you are not allowed to call this, I don't know, something like that. So what I'm doing here is I'm just basically like toying around with my smart contract, redeploying my changes instantly. I was able to get up and running with adapt and testing my assumptions.
00:14:09.958 - 00:14:35.402, Speaker A: So there we go. We have our contract, we got a new one. And then now if I want to come over here to this incognito tab, get some funds, go to the debug contracts and try to change the purpose, I don't know, to foo like this, it's going to say you're not allowed to call this, right? I've done some basic access control, right? But if I come over here and I can say FUBAR send and it lets me so good, bad, right, but let's go a little further.
00:14:35.402 - 00:14:52.982, Speaker A: Let's actually wipe out this concept of hard coded addresses and let's use anyone familiar with openzeplin open zeppelin, right? Awesome. If you don't know open Zeppelin, got to follow those guys. The second thing you'll learn with smart contracts is inheritance.
00:14:52.982 - 00:15:25.566, Speaker A: So we can see right here, we can do like an import, right? We can import an Open Zeppelin contract and then we can make our contract inherited from that, right? And you'll see a lot of the examples like ERC, 20 example ERC 1120, 1155, 721 use this import and inheritance function. So let's do that and then let's save that and then let's deploy again. So instead of doing a hard coded owner, we're just doing this inheritance method and we don't have only owner that's the thing we got to do is we got to inherit the modifier.
00:15:25.566 - 00:15:45.530, Speaker A: So instead of using a require statement, we're using a modifier which is part of inherited access control ownable contract. But you can see what we're doing, we're toying around, let me deploy again because I forgot that and then let's go back. But what's different now? Someone want to tell me what's different? The owner address.
00:15:45.530 - 00:16:06.606, Speaker A: It's unexpected. What owner address is that? It's just a random string, right? Well, Hardat uses the very first contract address, or I should say the first, like it has a set of 20 accounts, uses the first account to deploy the smart contract. So what's happened is we've had Hard Hat deploy our contract but it's hold on to the contract.
00:16:06.606 - 00:16:32.010, Speaker A: Now we don't have any access control because before we had Hard coded the owner. So the next thing you'll learn with Scaffold ETH is that you need to be able to change the deployment. So if you look right below the contract folder, there's a deploy script and this is where when you do a yarn deploy, this is what's being processed, right? This is what's running and you can see here that we get a copy of our contract.
00:16:32.010 - 00:16:46.078, Speaker A: We set the deployer as the deployer which is from the named accounts coming from Hardhat. And then we can see here that we get an instance of the contract. And so in this script now we have a copy of the contract here.
00:16:46.078 - 00:17:09.638, Speaker A: So what we can do is call an inherited function, right? And if you know ownable or openzeppen ownable, it has what's called transfer ownership function, okay? And you'll even see it down here on the bottom because we inherit it and you can see it's right there. So now what we need to do is actually transfer the ownership of our smart contract to us. And so we can grab that address again like this.
00:17:09.638 - 00:17:22.394, Speaker A: And then actually, you can see right here that I have it kind of like grayed out in there. So we can just grab that. And then here we can take the contract, call the transfer ownership, and then put the address in here.
00:17:22.394 - 00:17:31.626, Speaker A: So sorry, let me grab it again and then save and then redeploy. Give it one SEC. That worked nice and fast.
00:17:31.626 - 00:17:40.110, Speaker A: And now you can see that it matches again. So we deployed the smart contract called the Transfer Ownership function and transferred it to ourself. So that's cool.
00:17:40.110 - 00:17:58.274, Speaker A: We've been able to kind of toy around with our contract. And you see how you get in this kind of loop where you like I said, you have hard at running, you have react open, you're testing your smart contract, building some stuff and then you just kind of start testing those changes. And you can even do things like I'll just do a couple more things here just to show you.
00:17:58.274 - 00:18:01.910, Speaker A: We're done with the deploy script. So we're good. Now we have kind of access control.
00:18:01.910 - 00:18:18.234, Speaker A: Let's pretend that we don't want to actually call only owner on that function because it's kind of boring to have one function that only the owner can call. Let's make it a public function. But we could do something like let's require an amount of value is sent.
00:18:18.234 - 00:18:45.620, Speaker A: Let's do 56 public price equals, I don't know, one Ether. So we can set a variable price and then we can come over here and then we can get back into our requirements, right? And we can say something like require message value which is the transaction value is equal, equal to price. Or we say not enough.
00:18:45.620 - 00:18:59.558, Speaker A: Something like that, right? So now if we deploy our change oh, sorry, when I always forget this. You have to make that because we're accepting value now you got to make it a payable function. So let's make it payable.
00:18:59.558 - 00:19:06.300, Speaker A: Save that and deploy. Did I spell it wrong? I did. Thank you.
00:19:06.300 - 00:19:20.622, Speaker A: One more time. But you guys can see how easy it is with Scaffolding to get up and running with a project using this and start doing some changes. So cool.
00:19:20.622 - 00:19:31.490, Speaker A: Now we have a function. But what do you see? Well, the UI is adapted and it said, oh, well, now we need to pass the value. So then you can start testing and we even have that new variable here which is showing you the value in Way.
00:19:31.490 - 00:19:54.874, Speaker A: So another thing you'll learn about when you're writing smart contracts is you need to send your transactions in Way and not in Ether. And so what this does is it kind of just gives you the variable. And if you didn't have this variable here, you could use this little cool green little icon that does the math for you, which one Ether is equal to times ten to the 18th power in Way.
00:19:54.874 - 00:20:09.166, Speaker A: So what we could do is say, okay, well now we have this function, we want to change it. Let's set the purpose to bogata and then we have to pass in. If we were to pass one Ether sorry, let me do zero just so that doesn't freak out.
00:20:09.166 - 00:20:16.546, Speaker A: And then click this little button. That would be the wrong amount. It's going to tell me not enough, right? But I could just grab this and copy this paste it here.
00:20:16.546 - 00:20:18.290, Speaker A: Send. Boom. It worked.
00:20:18.290 - 00:20:28.946, Speaker A: So now what happens with our smart contract? It has value. Now it's actually storing some value, which is cool. It's like this little vending machine, right? So we could probably write like a withdraw function in there.
00:20:28.946 - 00:20:46.794, Speaker A: That would be cool, right? And then that one we would definitely want only owner, right? So we could use that only owner modifier. But let's just do one more thing that I just want to show you. With like one small change, you could do something at the very bottom of your function that says price equals to price, I don't know, times two like that.
00:20:46.794 - 00:20:57.290, Speaker A: And then deploy that change. And with one small line in the contract, you completely change the behavior of this kind of vending machine. It deployed successfully.
00:20:57.290 - 00:21:05.262, Speaker A: And now if we change the thing to, I don't know, Columbia. Boom. Send.
00:21:05.262 - 00:21:11.474, Speaker A: Now we'll see that the price adjusted, right? We did this simple modifier. Okay. So I think you guys get the idea.
00:21:11.474 - 00:21:31.986, Speaker A: It's just kind of like toying and tinkering around with your smart contracts, testing your assumptions with multiple identities, right? Multiple browsers. If you have problems and if you have any issues, there's a Telegram channel for getting problems resolved. I'll be around, I'll be shooting photos.
00:21:31.986 - 00:21:39.734, Speaker A: But I'm more than happy to help you guys out if you have questions. Yeah, that's pretty much what we want to go over. Any questions? I'll try to get least time for questions.
00:21:39.734 - 00:22:06.492, Speaker A: Yeah. Are you saying like for a testnet? Let me kind of show you real quick. You can generate an account so you can do yarn.
00:22:06.492 - 00:22:13.728, Speaker A: Here, let me open this so it's full screen. You can do yarn run generate. And what that's going to do is generate a special deployer mnemonic.
00:22:13.728 - 00:22:25.000, Speaker A: It's going to place it inside of your directory, which I won't click on it, but it's right here. So it has the deployer address. The mnemonic is in there, so you can inject that into MetaMask as well, so you have access to it.
00:22:25.000 - 00:22:37.964, Speaker A: And then you can do a yarn account like this. And you can also what I would do is I have a punk wallet on my phone and it pops up a QR code for you. It goes by real fast, but you can just scan the QR, send some funds to that one.
00:22:37.964 - 00:22:50.428, Speaker A: And then now you have this kind of like wallet that you have access to the private key, right? No, it's stored right here on your thing. Yeah, that's your deployer account. So, yeah, that's a good question.
00:22:50.428 - 00:22:58.320, Speaker A: I was going to show that, but I didn't have enough time and I want to be respectful of other people. I was going to deploy it. You can also verify your contract with a yarn verify.
00:22:58.320 - 00:23:05.216, Speaker A: You can do all this cool stuff. You can also do yarn surge and you can upload your DAP. Like you can build it with yarn.
00:23:05.216 - 00:23:12.792, Speaker A: Build and then yarn surge and it'll upload it to surge. You can also yarn IPFS and push it to IPFS. So there's all this stuff that's just already written for you.
00:23:12.792 - 00:23:20.090, Speaker A: You don't have to hassle with it. Just take a look at the package JSON file and it has all the yarn commands. One more question.
00:23:20.090 - 00:23:23.332, Speaker A: Yeah. Testing. Testing.
00:23:23.332 - 00:23:28.444, Speaker A: Writing tests. Have you talked about that? No. There is a test in there.
00:23:28.444 - 00:23:45.184, Speaker A: So you can do like a yarn test and there's a test in the hard hat test and you can create and build around that. If I did it right now, it would fail because the test is designed for the hello world one that comes with it. But yeah, you can definitely just do a hard hat test.
00:23:45.184 - 00:23:56.580, Speaker A: And I think that directory is right here. Test my test and you write it like a normal hard hat test. So it uses chai, basically.
00:23:56.580 - 00:24:00.230, Speaker A: Hard hat and chai. Yeah. One more.
00:24:00.230 - 00:24:20.652, Speaker A: So there's sneak peek. There might be a future version of Scaffold that has foundry. There actually is one I think someone's already built, actually, that I don't think it's in here yet, but I would just keep an eye on the repository here and see.
00:24:20.652 - 00:24:27.116, Speaker A: I could actually check right now. There is one. Yeah.
00:24:27.116 - 00:24:42.390, Speaker A: So there is one with foundry, I think. I think it's kind of like yeah. I don't know if it's been tested too much, but probably not the recommended one to use for this hackathon, but yeah, looks like there's already one.
00:24:42.390 - 00:24:50.960, Speaker A: Thank you guys. Appreciate it's.
