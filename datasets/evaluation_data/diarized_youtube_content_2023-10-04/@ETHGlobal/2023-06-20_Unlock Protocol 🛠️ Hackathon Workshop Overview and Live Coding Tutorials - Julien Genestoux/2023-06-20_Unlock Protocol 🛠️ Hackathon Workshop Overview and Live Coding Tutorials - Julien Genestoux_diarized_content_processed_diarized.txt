00:00:13.070 - 00:00:30.346, Speaker A: Good morning everyone. Welcome to this workshop where we'll learn today about Unlock Protocol. This is a workshop that is dedicated to developers or people at Hackathons that want to build on top of the Unlock Protocol here's to get started, a quick agenda about what unlock is.
00:00:30.346 - 00:00:45.434, Speaker A: First we'll start with an overview. Then we'll look at the ecosystem, what kind of tools, including the subgraphs from the graph and what kind of integrations exist out there. Then we'll move into final section about two different tutorials.
00:00:45.434 - 00:01:01.326, Speaker A: One of them is to show you use cases for frontend and how to create one, as well as use cases for smart contract integration, as well as creating a hook, which is something that is very specific to the unlocked smart contracts. First of all, a little bit about myself. My name is Julianistu.
00:01:01.326 - 00:01:13.206, Speaker A: I'm the CEO and founder here at Unlock Protocol. Before that, I was actually working in a company called Superfeeder, which was sold to Medium in 2016. Superfeeder was building RSS feed API RSS, our core building block of the open web.
00:01:13.206 - 00:01:31.242, Speaker A: And really you have to think of unlock as another building block for the open web. I'm a big open source advocate, I'm a W, three C invited expert, and I'm also a member of the Graph Council. You can find me online at Julian 51 mostly everywhere, or use my site@uroboat.com
00:01:31.242 - 00:01:41.962, Speaker A: Ouvreboite.com. So let's jump right into it. What is unlock protocol? Unlock Protocol is a protocol for memberships.
00:01:41.962 - 00:02:05.398, Speaker A: What does that mean, you might ask? Well, simply thought Unlock Protocol is a system to create membership and sell access NFTs membership NFTs in minutes. It allows developers like yourself to create memberships, subscription ticketing solution, add token gating to websites, create certifications and gaming. And we'll come back to all of these.
00:02:05.398 - 00:02:21.126, Speaker A: It is obviously completely open source under the MIT license. It is community governed, which means that we have a Dao and a governance token. And if you're building on top of Unlock, we invite you to join our Dow so you can help us make decisions about the future of the protocol.
00:02:21.126 - 00:02:47.330, Speaker A: There's a set of application that we have built at Unlock Labs, but also other people have built similarly with libraries and developer tools. It was funded by me in 2018 and we now have a team with diverse experience from Google, Facebook, GoDaddy and multiple others, as well as a global community of people around the world. So let's talk more about memberships and NFTs specifically.
00:02:47.330 - 00:02:59.542, Speaker A: So can I use any NFT to represent membership? And especially here, you might recognize some of the popular projects out there. The short answer is no, you should not. I mean, you can, but you should not.
00:02:59.542 - 00:03:11.446, Speaker A: And the reason why you should not is because these default NFTs, specifically the collectible NFTs, are limited in what they allow for you to do. For example, the number one limitation is that they're valid forever. They're perpetual.
00:03:11.446 - 00:03:30.478, Speaker A: And when you create a membership of any kind, you actually probably want to have it time bound. Think of your Netflix membership or your Amazon Prime membership. It is time bound, it is valid for a month and it renews for another month and for another month and for another month for as long as you pay, but it is not valid forever.
00:03:30.478 - 00:03:39.846, Speaker A: Similarly, think about a certification. Your driver license in the US. For example, is a membership to the DMV and it is limited in time.
00:03:39.846 - 00:04:06.494, Speaker A: It's valid for five years and then you have to renew it to prove that you still know how to drive. So using regular NFTs would not work really well for this this time aspect as we just alluded to also allows you developer to build in recurring revenue mechanisms for your application or for your community to have sustainable funding. Every week, every month, every year, depending on what is the timeline that you choose.
00:04:06.494 - 00:04:48.298, Speaker A: Because the NFTs expire over and over again allows you to move from the concept of royalties, which is very linked to the NFT concept, to more continuous revenue, where, again, as your community is accruing revenue on a constant basis. Similarly, at unlock we've built inside the smart contract several capabilities that would allow you to support not just crypto payments, but also payment using for example EFC 20 tokens, and specifically on top of that also fiat payments using credit cards for example, and we'll come back to this in the future as well. It also allows for off chain access verification as well as on chain access control.
00:04:48.298 - 00:05:16.100, Speaker A: Each of these NFTs can be signed to prove their authenticity, and then from the signature we can generate, for example QR code that are shown on tickets as a way to prove that somebody might have or should have access to a venue, for example, if they're attending a concert or conference. Similarly, some memberships are transferable, but others, and I'd say almost the majority of them, should not be transferable. Your Netflix account is probably not transferable, even you share your password with your friends.
00:05:16.100 - 00:05:30.562, Speaker A: A certification, a diploma is definitely not transferable. You don't want to be able to transfer your diploma from an organization to another. But you can also imagine that some social clubs, for example, have memberships that are transferable.
00:05:30.562 - 00:06:02.302, Speaker A: If you're not currently part of the club, you can transfer that to someone else that we're able to join the club and then you're not able to join anymore. Obviously the contract that we've built and unlock are ESC 721, which is the same default NFT contract that you've used in most places, but it has been built with a ton of characteristics. When you think about collectible, it's important, maybe even critical, that the contract itself is immutable, that whatever is in the contract on the first day is there forever.
00:06:02.302 - 00:06:22.838, Speaker A: But when you're thinking about membership as a more generic concept, it might actually be interesting to be able to kind of upgrade or change how the contract behave. For example, the price of the membership might increase and that is something that is support natively by unlock as well. Specifically unlock's contracts are updatable.
00:06:22.838 - 00:06:39.214, Speaker A: You can change the name of the contract, the price of the membership, the duration of the membership, the supply, the number of membership that there could be. You can also change a specific membership. You can imagine that in some cases membership can be revoked, even though somebody might have paid for this.
00:06:39.214 - 00:06:57.106, Speaker A: You might allow them to cancel and get a refund or they can be assigned to someone else. The contracts are also upgradable. We've built the contract with the idea that the protocol will evolve over time and each contract should be upgradable, not by us, obviously, but by the person who deployed it.
00:06:57.106 - 00:07:20.742, Speaker A: So a specific creator that has deployed a membership contract should be able to opt in to a new version of the protocol if one has been made available by the Dow. Finally, and this is really kind of an interesting aspect here, the protocol contracts, the public locks as we call them, are programmable. They're programmable because we realize, like as a developer, you might want to build custom logic into your membership contract.
00:07:20.742 - 00:07:52.482, Speaker A: So we do that with a system of hooks that allow developers and maybe even at some point creators to add or change the behavior of the smart contract based on some characteristics. So for example, that's how we support discount codes on membership. You can say the membership price is $10, but if a user, as they go through checkout, as they purchase their membership, they enter a specific discount code, they should only be paying $5 or $8 and that is through the use of hooks.
00:07:52.482 - 00:08:15.974, Speaker A: And we'll come back to this in the last section of this presentation. Let's talk about some key important use cases because I alluded to a few, but let's be more specific. As I said, event ticketing, a ticket to a conference, a ticket to a concert is a membership, a one off membership, one that is just for that specific event, but it is a membership.
00:08:15.974 - 00:08:31.154, Speaker A: You can also build some kind of recurring subscription. I mentioned Netflix, Amazon Prime, these are good example of this. If you use substack or if you support some creators using patreon, you're probably familiar with the idea of the recurring subscription where the user pays on a monthly basis a certain amount of money.
00:08:31.154 - 00:08:48.098, Speaker A: They can also be time based. So you can build, for example, seasons in your application and say okay, there's cohorts that are used for people to, for example, govern a specific project only for the duration of the project. And so basically these are type based membership.
00:08:48.098 - 00:09:04.790, Speaker A: We mentioned certifications, credential, diplomas, all of these are membership. You're a member of the university or the alumni class of a specific year and that's how you get your diploma. You are member of the people that got trained around using Ethereum for a year and you get that certification.
00:09:04.790 - 00:09:18.254, Speaker A: It is valid for a year. You can use it to prove that you have gone through the certification, but at the end of that year it should be considered expired because maybe your knowledge is not up to date anymore. It is also useful in the context of gaming.
00:09:18.254 - 00:09:32.374, Speaker A: Think of games where you unlock a level. Well, this is a membership to that level. Again, a bit strange to think of this as a membership, but it really is if you think at the core of what a membership is as a user, as a player, you're part of the group.
00:09:32.374 - 00:09:45.150, Speaker A: You're a member of the group of people that get access to level two. You can also be a member of the group that have access to a specific game item, a sword or something like this. It's also valid in the context of loyalty programs.
00:09:45.150 - 00:09:58.800, Speaker A: So think of it as your airline miles program. You have a card that's a membership card that show that you're loyal to the brand and that you should be treated as a loyal customer. In that example.
00:09:58.800 - 00:10:27.174, Speaker A: Unlock can also be used for attendance NFTs, the proof of completion, the fact that you went somewhere or as a way to commemorate something on chain. And finally, you can also use the unlock contract for digital collectibles like PFP collection that we've seen before, or even any kind of other NFTs regular collectible NFTs. The time limit aspect, the time bound aspect can actually be very useful there as well.
00:10:27.174 - 00:10:37.980, Speaker A: If you want, for example, to have dynamic NFTs that evolve over time. So you can imagine your PFP gets older unless the user extends it or renews it. In that example.
00:10:37.980 - 00:10:52.800, Speaker A: Let's dive deeper with some more specific use cases. So for ticketing, based on how the protocol is deployed right now 100% of the ticket revenue goes to the queer or the event organizer. It's not like a platform that would take a cut here.
00:10:52.800 - 00:11:17.494, Speaker A: The organizer fully controls the ticket distribution and maybe if they won't fully controls potentially the secondary market, they can avoid transfer or they can require transfer to go to a specific clearinghouse for these to happen. They can also create, and I think maybe where smart contracts shine. Interoperable experiences for attendees before, during or after the event.
00:11:17.494 - 00:11:36.294, Speaker A: Imagine if the ticketing for the event is an NFT. You can use it, for example, to connect to a discord server before the event and join all of the other attendees. Or you can use it when you connect to a reservation website to book, for example, a hotel room and prove that you have a ticket to get a discount for this.
00:11:36.294 - 00:11:56.786, Speaker A: So that's the kind of thing that you can do before the event, after the event, or maybe during the event. You can use this as a way to build a system where people kind of vote on what is the best session of the conference and only people that have a valid NFT can actually vote using a tool like Snapshot. If you were to use traditional ticketing system, it would be really hard to build.
00:11:56.786 - 00:12:09.880, Speaker A: You would have to build authentication into your application that plugs into the event ticketing application. And they probably don't have an API for this. And even if they do, they can restrict who can access that information.
00:12:09.880 - 00:12:36.350, Speaker A: It's also useful after the event where you can imagine, for example, like next year's conference might have a discount for people that were here the previous year. If you have that concept of NFDS ticket, it's really easy to just program the smart contract to say whenever somebody has a ticket from last year, they should get a 10% discount. Tickets are membership cards that connect to a community of people that are interested in a specific concept.
00:12:36.350 - 00:12:59.586, Speaker A: Unlock for ticketing has been used at multiple conferences in the crypto space, in the Ethereum space, and here we're showcasing Dapcon, which is a conference happening this year again in Berlin between September 11 and September 13. Dapcon has used unlock last year. Actually there's about 1000 attendees that are mostly in the crypto ecosystem.
00:12:59.586 - 00:13:19.658, Speaker A: What's interesting here, they're using unlock, obviously, but they're also using unlock on a specific chain. We haven't talked about this yet, but unlock has been deployed on nine different EVM networks. So obviously you probably know of Ethereum mainnets, you know of Polygon, but Defcon chose Gnosis chain, which I think is a very good option to deploy this smart contract.
00:13:19.658 - 00:13:32.014, Speaker A: We're also on Optimism on Apitrum and multiple others. You can find them all in our doc. What's interesting about Dapcon is like they're a crypto conference and so it only makes sense that as a crypto conference they're dog fooding.
00:13:32.014 - 00:13:49.730, Speaker A: They're using the technology that they are writing or talking about. And in that example specifically, they decided to use unlock for this. We also have built inside of the unlock a reference ticketing application, a system to verify authenticity of tickets by scanning QR codes.
00:13:49.730 - 00:14:13.310, Speaker A: So really excited about that use case and if you want to build some kind of ticketing solution, you should try to inspire yourself from what Dapcon has done. Other examples of conferences that have used unlock ETH, Taipei a couple of weeks ago in Taipei, ECC in Paris has used unlock last year as well. Ethwarsha is using unlock for ticketing, et cetera, et cetera, et cetera.
00:14:13.310 - 00:14:23.554, Speaker A: Another example of use case that we talked about is the concept of subscriptions. So subscription enable token access to experiences and services. Think again.
00:14:23.554 - 00:14:39.462, Speaker A: A Netflix subscription. It gives you access, not token based, but it gives you access to their streaming service to view applications. Your gym membership gives you physical access to the gym so you can exercise there.
00:14:39.462 - 00:14:53.450, Speaker A: It is sustainable subscription and recurring revenue for the business that hosts it. They can use crypto or credit card for these things. And what's important here is, like, the business has a direct relationship with the members.
00:14:53.450 - 00:15:04.014, Speaker A: There is no middleman involved in that situation. There is no service in between these two things. The Netflix example is an interesting one, right? You can get your Netflix subscription either from the Netflix.com
00:15:04.014 - 00:15:20.446, Speaker A: website or through Apple or Google on mobile devices when that happens. Through mobile devices, as a matter of fact, Netflix and Apple and Google act as middlemen here and they can change the terms. They can decide to not validate how the application works anymore.
00:15:20.446 - 00:15:27.106, Speaker A: And this is not ideal for a business like Netflix, obviously. This is obviously useful for content. We talked about substac briefly for software.
00:15:27.106 - 00:15:46.910, Speaker A: If you think about in app purchases, a lot of these are subscriptions that know just ways to unlock different features into an application. Think about music services like Spotify, obviously, video, podcasting, et cetera, et cetera. So if you're trying to build an application in that field for creators, definitely think about monetization using something like Unlock.
00:15:46.910 - 00:16:02.734, Speaker A: An example here that is really powerful, I think, is the example of DeFi Robot. DeFi Robot provides trading tips and mechanisms to automate some of the trading. And what's interesting about that membership, it's using Unlock.
00:16:02.734 - 00:16:32.134, Speaker A: Obviously, on Ethereum main net, the monthly membership, if I'm correct, is about $300 or almost $300, which is a very pricey one. But once you have the membership in your wallet, you can access a dedicated Telegram channel as well as access some key feature into the application. At this point, DFI Robot, which is a pretty simple application, is making about $150,000 in annualized membership revenue.
00:16:32.134 - 00:16:56.094, Speaker A: So again, if you build these things right, that's actually a very significant revenue opportunity for any kind of community or software application there. These time based membership we talked about a little bit are not necessarily recurring, but they are kind of time limited. So think of it as seasonal or even sometimes perpetual memberships that, for example, give you access to a Discord or Telegram.
00:16:56.094 - 00:17:04.898, Speaker A: You approve some of that. Obviously. What's interesting here is, like at Unlock, when you create your membership contract, you can choose the currency.
00:17:04.898 - 00:17:23.886, Speaker A: And so since that kind of time based membership is really used in the dow space, there's something really cool about using the ERC 20 currency of the specific community as the pricing mechanism. Example of this is cabin. So Cabin is a project that actually launched two days ago.
00:17:23.886 - 00:17:43.362, Speaker A: It's a network city. It's basically a community of people that have some kind of co living places. And they have a membership where if you are a citizen and that's how it's called in the membership, you get access to some specific airdrops specific features that are allowed only for Cabin members.
00:17:43.362 - 00:18:11.258, Speaker A: What's interesting here is what they've built is a system where if you have 1000 Cabin tokens, the membership is free. And for this they actually use a hook system that we'll discuss in the last section of this presentation onto certification. We talked about this earlier, your diploma, the fact that you've taken a course that you maybe attended, hackathon, non transferable, obviously critically, but also time limited most of the time to make sure that your knowledge are up to date.
00:18:11.258 - 00:18:53.770, Speaker A: Example of people that are using unlock for this is a team called Planodao that have created the Certified Digital Asset Advisor, which is basically a proof that you went as a financial advisor through some education around cryptocurrencies and around crypto assets, digital assets altogether. And that to date they have certified over 100 financial advisors that went through that curriculum and in the end receive one of these NFT as a proof of completion. What's interesting about these NFTs is like they can be represented or added, for example, to a LinkedIn profile as a way to show again to your potential customers that you are certified here.
00:18:53.770 - 00:19:06.430, Speaker A: So building certification application I think is also one of the things that we're excited about to see people doing the ecosystem. We talked about gaming briefly. This is a very popular game in the web three space.
00:19:06.430 - 00:19:25.326, Speaker A: It's called pixels. It's a multiplayer game built on blockchain and they use unlocked memberships as a way to create these inapp purchases. And you can have different kind of feature into the application that are time limited.
00:19:25.326 - 00:19:43.618, Speaker A: And if you acquire these NFTs, then you are able to actually do certain things inside of the game. So really if you're building a game, think about using time limited NFTs as a way to do this. Another example of loyalty, another example of use case is the ring around loyalty.
00:19:43.618 - 00:20:20.970, Speaker A: One of the examples I want to highlight here is a company called Stakes, which is basically building a loyalty program around a restaurant brand or chain. And what's interesting here is once as one of the customers, you have one of these NFT, you get some priority access to a reservation system that allows you to book restaurants and be treated as a premium customer and access to some premium table, maybe free drink or dessert, and a ton of other possibilities that each restaurant might offer to their customers. Finally, attendance NFTs, sometimes called POAP in the ecosystem.
00:20:20.970 - 00:20:31.370, Speaker A: It is basically a system, it's basically an NFT that someone can earn if they have done something. It is valid forever. And what's interesting here, it can have dynamic metadata attributes.
00:20:31.370 - 00:21:05.374, Speaker A: We talked briefly about them, but still unlock is usable for PFP project from 101 to 10,000 plus static or dynamic NFTs can be minted on demand by users or can be airdropped and obviously supported on all of the networks that unlock supports. Tales of Electrorra is an example of a collectible that was built using unlock. And what's really interesting about Tales of Electoral is like you can see here examples, each of these avatar actually has a component of both the avatar and so called weapons, which are both NFTs.
00:21:05.374 - 00:21:24.806, Speaker A: And if a given address or given user owns both an avatar and the weapon, the weapon will show in the background of the avatar. You can see here, for example, the arrow and the bow displayed behind that wolf. If the user of that NFT were to sold the weapons, then the avatar would not have the bow and arrow.
00:21:24.806 - 00:21:39.482, Speaker A: It's kind of dynamic based on this and I think this is a very powerful tool. Just a reminder for everyone who's joining now. Unlock protocol for memberships and memberships are a very core primitive to lots of businesses.
00:21:39.482 - 00:22:03.080, Speaker A: Can be used from event ticketing all the way to digital collectible through recurring subscriptions certification, credentials, gaming loyalty, attendance, NFTs. Really you have to think about unlock as a framework for NFT memberships and memberships can be lots of different things. So, thank you very much for listening to me until now and let's jump into the right section in a couple of minutes.
00:22:03.080 - 00:22:27.358, Speaker A: Let's now talk about the unlock ecosystem and the developer tools that we put for people to use inside of their applications. So, first of all, quick reminder, unlock is a protocol, it's a smart contract system. Of course you can and you should if you can just use the smart contract and not rely on anything that was built on top of us by the Unlock Labs team.
00:22:27.358 - 00:22:42.126, Speaker A: However, if you want, and we think it's a good way to kind of scaffold your application, you can start by using some of the tools that we've built. For example, we have built two really important front end applications. The first one is what we call the unlock dashboard.
00:22:42.126 - 00:23:02.758, Speaker A: The unlock dashboard is a way for what we call lock managers to deploy their membership contract, their lock. From there they can also manage the contract. They can change, as we've seen earlier, the contract is updatable, so they can change some settings, the price of a given lock, the number of memberships, the duration of these memberships, et cetera, et cetera.
00:23:02.758 - 00:23:28.150, Speaker A: They can also manage members so they can see the list of existing members, they can change the membership status of someone, can refund, can cancel. They can also AirDrop membership NFTs to specific addresses, or even use some of the features that we built, such as the wallet list AirDrop, where it's basically airdropping NFTs by email. The recipient gets an email with a claim link that they can use to bring the NFT from a placeholder address to their own wallet.
00:23:28.150 - 00:23:50.758, Speaker A: Obviously, as I said earlier, these membership contracts are NFT contracts. Like they're ERC 721, which mean that you can also customize the metadata on this NFT, starting with the image, obviously, or even set custom attributes for the type of membership that you have. So, for example, if you're organizing an event or building an event platform, there's a set of metadata specific to events.
00:23:50.758 - 00:24:04.486, Speaker A: So for example, the location, the starting date and the starting time. The finishing date and the finishing date and finishing time. But also, for example, things like description of the events.
00:24:04.486 - 00:24:20.738, Speaker A: We can say, okay, this is a conference happening on blah blah blah with speakers X and Y and Z. Similarly, we also have built a second really important application that is called the Checkout. The Checkout UI is not meant for lock managers, but really it's meant for the soon to become members.
00:24:20.738 - 00:24:44.502, Speaker A: It's a way for people to mint NFTs by purchasing them. And I say purchasing, but in some cases, these NFT can be free as long as they're claimable by the end users directly, and not only airdroppable by the lock managers, you can use the Checkout UI. The Checkout UI is a flow that has multiple steps that obviously starts with connecting the wallet and finishes with minting the NFT.
00:24:44.502 - 00:24:58.970, Speaker A: But during that flow, the lock manager can configure it so that some metadata is collected as well. So for example, if you're organizing an event as we talked about, you might want to collect information about the attendees, their first name, last name or email address. That is something that you can easily do with the Checkout.
00:24:58.970 - 00:25:28.466, Speaker A: We have a way to configure this with kind of a no code tool accessible from the dashboard, the checkout builder, but you can also configure this in code and we'll talk about this a bit later. Finally, as I said earlier, unlock smart contracts are built in a way that they instantly support payment using fiat. So using credit cards specifically, and you can do that from the dashboard, configure things from the dashboard, and then users can enter their payment info from the Checkout UI.
00:25:28.466 - 00:25:46.110, Speaker A: We also support some interesting mechanisms such as swap and purchase. Swap and purchase is basically a flow on the checkout that user can pick if they don't have the currency of the membership, but they have another one that can be swapped on the same network, on the same chain for the one required by the lock. So let's take an example.
00:25:46.110 - 00:25:57.294, Speaker A: Maybe I deploy a lock that is using USDC as its currency on polygon. But myself, I've actually never bridged USDC token to polygon. I only have matic token on polygon.
00:25:57.294 - 00:26:10.138, Speaker A: It's not a problem. The checkout flow will actually include a one click option for me to swap. So pay with my matic that gets swapped into USDC, into a membership in a single transaction.
00:26:10.138 - 00:26:32.374, Speaker A: I don't have to leave the UI, I can just do that straight from the Checkout UI. So that's the two tools, the Dashboard and the Checkout that are basically UI and front end, that you can use to get started or also use into your application. We also have built a lot more developer tooling that are directly useful for you developers to integrate unlock into your applications.
00:26:32.374 - 00:26:45.562, Speaker A: First of all, we mentioned this earlier, the concept of subgraphs. So as you know, the graph is a protocol for onchain data indexing. But beyond that and we have built custom subgraphs for unlocked smart contract.
00:26:45.562 - 00:27:02.610, Speaker A: These custom subgraphs include obviously representation of the locks, the smart contract so you can get all of the information from a smart contract at once using the subgraph or multiple locks at once from the subgraph, but also the memberships. And they're called keys in the context of unlock. So you can retrieve all of the members on a given lock in one single transaction.
00:27:02.610 - 00:27:25.066, Speaker A: I think the subgraph actually has, and it's not an unlock limitation but it's a subgraph limitation, has a maximum of 1000 keys, 1000 items. But you can paginate and kind of do 10 00, 10 00, 10 00 and kind of add things up from there. The subgraphs also include what we call receipts, which is basically an object that you can use to identify what payments were made on a smart contract.
00:27:25.066 - 00:27:37.622, Speaker A: Another useful developer tool that we have introduced is called unlock JS. This is a JavaScript and TypeScript actually library that retrieves data from the chain. So you could use that instead of the subgraph.
00:27:37.622 - 00:27:56.002, Speaker A: But it also includes the ability to trigger transactions to change the state of the chain. It is based on ethers. JS and by the way, you could very well use Ethers with a specific lock but it does provide a lot of syntactic sugar for things that would require a lot more manual handling.
00:27:56.002 - 00:28:12.746, Speaker A: So you should check out Unlock JS if you want to deploy locks for example, or if you want to purchase memberships. This is definitely possible. Again, you could very well use existing libraries like Ethers or Web Three JS or others in other languages if that's easier for you.
00:28:12.746 - 00:28:20.506, Speaker A: Unlock JS is completely optional. Another tool that we built is called the Paywall. So I mentioned earlier the checkout UI.
00:28:20.506 - 00:28:46.674, Speaker A: The Checkout UI is basically a UI that can be displayed using two mechanisms. On one side it can be done as Checkout URLs, so kind of standalone web pages that can be open in a new tab for the user or it can be used as part of the Paywall which is a JavaScript library that can be embedded inside of any web application. The Paywall obviously supports signing refrim and includes all of the Checkout steps.
00:28:46.674 - 00:29:09.760, Speaker A: This is really useful if in your application you want to, for example, identify users or allow them to purchase membership without sending them to a different web page. That payroll is obviously completely configurable using a JSON object. So you can customize the title, the image, the number of locks that are displayed and the metadata collected, for example, as I mentioned in the previous step.
00:29:09.760 - 00:29:23.582, Speaker A: Finally, a last tool that we have which we think is really useful actually there's a couple more tools, but for this presentation I will only clarify these is the concept of hooks. As I said earlier, the smart. Contract themselves are programmable.
00:29:23.582 - 00:29:38.082, Speaker A: You can change the behavior of your membership contract using these hooks. There is at this .7 hooks on the contract that can all be called or implemented sorry for your specific lock and change the behavior.
00:29:38.082 - 00:30:02.154, Speaker A: Some of the popular hooks include, for example, the on key purchase, which is basically a hook that gets triggered when someone purchases a membership and one that's about to be minted. That hook is really interesting because it allows you to do things like check that the user meets certain criteria. So for example, are they on a specific allow list? If so, then yes, they can complete the purchase automation, or no, it will fail the transaction.
00:30:02.154 - 00:30:32.018, Speaker A: Another characteristic of that on purchase hook is that it includes the ability to customize the price that the user pays based on a certain characteristics. So if the user is on the loudest of discounted people or if they have entered a discount code at the time of purchase, we'll actually come back to this specific example in the last section of this presentation and so please jump to that step if you're interested in this. One last thing that I want to mention is existing integrations unlock, the public lock.
00:30:32.018 - 00:31:04.878, Speaker A: Sorry, in the unlock protocol, the public lock, the membership contract is just like any other ERC 721 contract. It is implementing the base ERC 721 specification, including stuff like transfer and everything. So it does work with any existing framework like Ethers, Third Web, Two, JS, Wagme, et cetera, et cetera, like I mentioned, but also any kind of wallet, whether it is a proper MetaMask hardware wallet, obviously, but also things like Magic or Privy if you want to use these wallet as a service kind of approaches.
00:31:04.878 - 00:31:23.478, Speaker A: Finally, unlock has been integrated by different teams inside of their application or by us inside of the other applications. I mentioned Magic as an example. That's something that we have a tutorial from on the Docs website Stripe that lets you connect with Stripe Connect as it's called, to receive payment in crypto.
00:31:23.478 - 00:31:42.926, Speaker A: Superfluid, the streaming protocol uniswap that's for something that I described earlier as the swap and purchase Flow East pass that allows users to download iOS Android passes into their phone, represents NFTs, et cetera, et cetera. If you're building an integration into an existing platform, please get in touch with the team. We'd love to hear from you.
00:31:42.926 - 00:31:54.814, Speaker A: We'd love to help you build this. I want to show you another kind of overview of the unlock protocol ecosystem. So basically these are all applications that either work or have integrating unlock natively.
00:31:54.814 - 00:32:05.826, Speaker A: So you have a bunch of protocols. So for example, Lit Protocol is a token gating protocol that does encryption. You can very well use the unlock membership to decide whether a specific piece of content should be encrypted or not encrypted.
00:32:05.826 - 00:32:21.286, Speaker A: Using unlock works with Superfood I mentioned earlier, works with Livepeer, actually. We'd love to see Livepeer integration so Live Peer is a video protocol, a streaming video protocol that you could use to tokengate live streams. A bunch of application also use unlock.
00:32:21.286 - 00:32:38.574, Speaker A: So you mentioned, I mean Guild is a good example. Coinbase are two of the UIs that you can use as a creator to deploy or manage rather membership and connect these membership to your community. You can use stuff like Beam for video or Monetize to get in Notion, et cetera, et cetera.
00:32:38.574 - 00:32:51.190, Speaker A: We also have a bunch of agencies and friends that are using unlock directly into their application and so you can see some of the names there. Finally, there is a ton of projects that are built on top of unlock. You can use that list.
00:32:51.190 - 00:33:07.180, Speaker A: And as a reminder, we're actually unavailable on nine different network, which means that one of them is missing from that slide. But ether mainnet polygon gnosis chain optimism. Arbitrum cello binance palm is the one that's missing from here.
00:33:07.180 - 00:33:25.620, Speaker A: Again, check our docs, we have all of the links with this. And by the way, on all of these networks we've obviously deployed the corresponding subgraphs or any of the other smart contract that we would use such as the credit card or system, et cetera, et cetera. Let's move on to the next section after this.
00:33:25.620 - 00:33:43.374, Speaker A: Let's jump right into our first tutorial of the day. How to build a token gating application with unlock obviously on the front end only. So we're not going to write any smart contract code, we're not going to write any solid code.
00:33:43.374 - 00:33:54.418, Speaker A: We're only going to focus on building a front end application using JavaScript Technologies. Let's actually start first look at the basic app that I built. This is a regular next JS application.
00:33:54.418 - 00:34:18.582, Speaker A: I'm starting from there and what I want to achieve is basically have this section here be a members only section. So only visible if the user has authenticated first and obviously if they have a membership in their wallet, if they don't have a membership in their wallet, we will prompt them to purchase one. And obviously until we know who the user is, we'll add a mechanism to authenticate users.
00:34:18.582 - 00:34:34.970, Speaker A: So let me actually do a quick show of the application. This is the basic app component again, vanilla Next JS application. It has a single page which is page here in a single content section which has a little bit of content that we want to token gate.
00:34:34.970 - 00:34:45.202, Speaker A: Let's get started by first installing a couple of dependencies here. And I want to install two dependencies specifically. I have them here.
00:34:45.202 - 00:35:10.714, Speaker A: Yes, here they are Wagme, which is a JavaScript actually a react front end, sorry, a react hook framework for dealing with smart contracts and connecting wallets. And Ethers which is a low level JavaScript library that interacts with the same smart contracts and wallets. So I'm going to just go ahead and install these two things pretty basic and then we'll go look at our app here.
00:35:10.714 - 00:35:18.854, Speaker A: What I want to do first obviously is add the dependencies that I just installed. So I'm going to just do that at the top of the file. Nothing too fancy.
00:35:18.854 - 00:35:27.226, Speaker A: Then I'm going to create what is called a Wagme client. That is what's going to use. That's what our application is going to use to interact with the wallets.
00:35:27.226 - 00:35:50.850, Speaker A: And if here we see we're pressing this little property AutoConnect True, which is basically allow users who have already connected to stay connected and auto connect when they load the page. But then we're also passing a provider. The provider is the network component if you want, that allows the application that we're building to connect to the blockchain and we're using the RPC endpoint that unlock provides for development purposes.
00:35:50.850 - 00:36:20.858, Speaker A: You're more than welcome to replace that line specifically with Alchemy Infura or any of the RPC provider that you actually recommend using your own as soon as you hit production. We see here we have a little network component here and we're actually going to import that from a config file that we have. I can't type today from network and obviously I need to remove that little N from the config file.
00:36:20.858 - 00:36:30.962, Speaker A: Let's go look at the config file. There's not much in it for now, just the network. Once we have this, obviously the next I think that's what I want to do.
00:36:30.962 - 00:36:48.714, Speaker A: Once we have this, we need to wrap the component here inside of what is called a Wagme provider and this is a react provider for specific context which allows us to connect down the application. So that's the basic setup here. Let's double check.
00:36:48.714 - 00:37:00.334, Speaker A: But the application is still accessible. Nothing's changed because we haven't actually done anything from a code perspective. Let's now look at our index page and that's actually more interesting here.
00:37:00.334 - 00:37:16.802, Speaker A: What we want to do on that page is obviously get started by make sure that the user is connected. For this we will use other components from the Wagme library. So I'm going to just add these dependencies right away at the top.
00:37:16.802 - 00:37:48.822, Speaker A: So first we're going to use Use account which allows us to get information about the user that's connected and use Connect which lets us connect the user. I'm also using this injected connector which is basically a way to retrieve the injected wallet in the web browser. So I'm just going to include these two hooks here and I'm going to change the behavior of the application a little bit so that if the user is not connected, we will basically add a button to let the user connect, which seems pretty straightforward.
00:37:48.822 - 00:38:10.562, Speaker A: And then we're going to just change one thing for now which is if the user is connected we will show the content. And obviously I am missing a little parenthesis here, but we'll also add not just the content but a button to disconnect. And since we're going to have two component in the same element we do this.
00:38:10.562 - 00:38:20.742, Speaker A: And for the disconnection, I'm actually going to use another feature from Wagme, which is this disconnect function here. So that's pretty much it for now. Let's go refresh the page.
00:38:20.742 - 00:38:28.326, Speaker A: I'm already connected because I connected before. So what I'm going to do here is disconnect from here. So you see that happening here and I'm going to disconnect from here.
00:38:28.326 - 00:38:37.510, Speaker A: So if I refresh the application now, I only see this connect button, obviously because I'm not yet connected. I click connect. My wallet should have prompted, but again soon I connected earlier.
00:38:37.510 - 00:38:47.114, Speaker A: It is not prompting me to connect, but I'm connected and then I can see the content. So again, fairly straightforward. Now what's interesting though is we now have a connected user.
00:38:47.114 - 00:39:06.546, Speaker A: We know what the user's wallet is and so that's going to allow us to move to the next step which is to add a special component which we'll call basically something like Token Gate. And so let's actually do that. I'm going to add a new component, Tokengate TSX.
00:39:06.546 - 00:39:15.398, Speaker A: And this component is going to be fairly simple. It is just going to for now, return the children. So it's actually not Tokeny anything for now.
00:39:15.398 - 00:39:30.954, Speaker A: It is just serving the content that it has. And what we'll do now is actually wrap the content inside of the Token Gate component. I just want to make sure that I'm including this at the top of the file as you can see here.
00:39:30.954 - 00:39:48.786, Speaker A: And so now the content component is still here, but this time we wrap it into the Token Gate component which will have the logic of making sure the user is connected and has access. For now, again, nothing changed oops mismatched between what the server shows. But if I click here, I can now still show the content.
00:39:48.786 - 00:39:59.830, Speaker A: But this time what we have is the way to go through that, through this Token Gate component. This component is going to be a bit more complicated. Oh, actually I forgot to add the props here for the children.
00:39:59.830 - 00:40:12.246, Speaker A: So this component itself is going to be a little bit more complicated. And so let's get started working with this. So here we're going to use again library, the Wagme library.
00:40:12.246 - 00:40:39.742, Speaker A: We're going to use Use account which we'll use to retrieve the wallet address. But we'll also use this Use contract with which is a hook that lets us retrieve some information about a smart contract. What we'll do here is also include another library that we haven't used so far and I'm actually going to install it which is this component that unlock provides, which includes the API.
00:40:39.742 - 00:40:56.934, Speaker A: The API is if you want the API description of what the smart contract has. And I forget to say add here and I have a quote that I need to remove, but I'm adding this dependency now. It's going to take a couple of seconds to install.
00:40:56.934 - 00:41:07.754, Speaker A: And what's cool about that now is that I'll be able to use this into the code. So let's actually do this. I'm also going to add actually that's it for now.
00:41:07.754 - 00:41:23.822, Speaker A: The first step is to then now add a bit of logic here, which I'm pasting here. So lock address, that's going to be another configuration that will come to this and address is going to be the user's address. So actually let's retrieve that directly from the Use account component.
00:41:23.822 - 00:41:47.110, Speaker A: So I'm just going to do const address equals Use account and then lock address will actually include this from our config as well, which I'm going to just add in a minute here. And so I'm going to now write it in the config. So the lock is the membership contract as we discussed earlier.
00:41:47.110 - 00:42:02.230, Speaker A: And so I'm just going to add an address here other than the membership contract that I've deployed before. There is no need to go through that process here, but know that you can easily do that from the unlock dashboard. So let's actually go back to the tokenia component.
00:42:02.230 - 00:42:11.474, Speaker A: We have this interesting hook now that is being called and it's going to retrieve some data. We'll look at the data in a second. If there's an error, this VAR is going to be set to true.
00:42:11.474 - 00:42:26.854, Speaker A: And if it's loading, this variable is going to be set to true. And what we're passing as argument is first the lock address, the smart contract address that we're retrieving the abi of the public lock version 13, that's the latest version of the protocol that I've used here. And the function I'm using here is called balance off.
00:42:26.854 - 00:42:50.830, Speaker A: This is a way to retrieve from the contract if a given address that we're passing as argument has any membership token that is valid, it will return zero if the user doesn't have a valid or if they have one that is expired. And obviously we'll return 12345 depending on how many valid membership the user might have. So let's actually now add a little bit of logic here.
00:42:50.830 - 00:43:20.662, Speaker A: Obviously if the page is loading, we don't actually want to show the children right away if there is any kind of error. We also don't want to show the content. But the last step is if data and actually we'll look at this in a second, but equals to zero, we will show something like you need a token to access this content.
00:43:20.662 - 00:43:40.202, Speaker A: Let's save this and let's actually go to our page. It already is self refreshed, but you can see here that it says you need a token to access the content because as a matter of fact, and I'm just going to console log the data object here so you can all see what it's in there. It's a so called big number and it's a JavaScript object.
00:43:40.202 - 00:43:49.600, Speaker A: And this is the exadecimal value of zero. So at this point I don't have a membership and I cannot see their content. So really nothing.
00:43:49.600 - 00:44:05.362, Speaker A: I mean, this is what we expected. And so I guess the next step is to add another function here. So rather than actually tell the user hey, you don't have access, we'll basically show them something along the lines of if you don't have access, well you need to buy a membership.
00:44:05.362 - 00:44:25.818, Speaker A: So I'm going to replace this with a button that's called Buy Membership and I'm going to add a new checkout function to our component here. This function will get started with an empty version of it. So I'm just going to do nothing in here and we'll look at implementing this.
00:44:25.818 - 00:44:48.526, Speaker A: For this we're going to use another library that the unlock team provides. Obviously completely optional but it makes things much easier which is the Paywall library. The Paywall library is basically, as the name indicates, a quick little paywall that you can add to any web page that allows users to check out or purchase a membership.
00:44:48.526 - 00:45:06.854, Speaker A: I'm also going to add another useful package which is called the Networks package from unlock that has all of the configuration for unlock. They're again completely optional but it's simplify things greatly if you use it. So let's go back now to the code here and let's look at what we're going to put in the checkout.
00:45:06.854 - 00:45:31.034, Speaker A: So first we're going to do an interesting things, a couple of interesting things. We're going to load the provider used by the connector and connector is actually something that we get from Use account and that's the object that connects to the user's wallet if you want. So we're going to get that provider and then we'll instantiate a Paywall object and again that's coming from the unlock library.
00:45:31.034 - 00:45:57.830, Speaker A: I'm just going to add this. I didn't add that at the top as a requirement here and Paywall config and networks actually networks we have it from the package that we just installed so I'm going to add that as well and the Paywall config will get it from the configuration and we'll go at that in a minute as well. So I'm just going to replace this line with this and Paywall config here.
00:45:57.830 - 00:46:25.726, Speaker A: I'm just going to copy paste what I have already built before and this is basically a JSON Blob and you can find all of the details on how to build this inside of the unlock documentation that lets you configure how the Paywall should behave. It should have multiple locks here but in this example just one, it could have multiple locks, just one here with the lock address on the network number five. We're going to skip the recipient step assuming the user is purchasing for themselves and then we're going to put a name curve.
00:46:25.726 - 00:46:47.290, Speaker A: My membership or My app membership maybe seems more accurate here and we're also going to use what we call the Pessimistic which is basically we're going to require the user to wait for the transaction to be mined before returning to the application. Let's go back to tokengate component now. So we have this Paywall, but that is not enough.
00:46:47.290 - 00:47:01.834, Speaker A: What we need to add is the ability for the user to load the checkout. I'm just going to add this here and basically load checkout model. It's an Async function that's going to show a little checkout model.
00:47:01.834 - 00:47:08.154, Speaker A: And we'll go look at this right away. So let's actually go to the application. You see now I have a button here which is really useful.
00:47:08.154 - 00:47:21.006, Speaker A: And I still have my console log, which makes this a bit messy, but it's fine. If I click here what's going to happen. It's going to load the checkout model and I have my app membership and the smart contract that I'm using here at the address that I've specified earlier.
00:47:21.006 - 00:47:33.640, Speaker A: You can verify this is the right address here. So this is all great, but let's actually go look at the rest. If I close, nothing happens here, which is what's expected here.
00:47:33.640 - 00:47:46.326, Speaker A: Result. What's interesting is like if there is a result, we will get inside of that result object a hash. And what's interesting here is that we want to use the hash in our UI.
00:47:46.326 - 00:47:59.402, Speaker A: I'll explain what it is in a second. So we're going to use React use State. And here what we want to do is basically have a nicer UI to show the user that it's important to wait, that they are waiting for the donation.
00:47:59.402 - 00:48:13.140, Speaker A: So even though they might not have a membership, let's remove this if they have just bought one. We are going to wait a couple of seconds for the transaction to confirm. And then once this gets confirmed, hopefully they'll be able to see the children.
00:48:13.140 - 00:48:24.086, Speaker A: All right, so we're ready to do the final test on this application. And I'm going just to click Connect here. At this point, my wallet is connected, which is exactly what I want you to do.
00:48:24.086 - 00:48:35.580, Speaker A: And I'm going to click the Buy membership button. You see this little pop up shows up and I'm going to click Next. And this is a renewal because I probably have already purchased a membership before.
00:48:35.580 - 00:48:44.426, Speaker A: So we'll have to send this transaction. We can go see it on the Block Explorer actually. And so you can see that a blockchain transaction is being minted.
00:48:44.426 - 00:48:52.526, Speaker A: We'll have to wait a second or two here. Oh, this has been mined. We usually wait for a couple more blocks inside of unlock.
00:48:52.526 - 00:49:02.162, Speaker A: So I can close this, hopefully. And you see that now I can access those content. So I refresh the page here and click Connect.
00:49:02.162 - 00:49:25.206, Speaker A: You see that I can see the content once my membership is going to have expired, which should be actually, you know what, it should be shortly, I will have to reconnect and buy again. So this is it for today. Let me stop the video here how to use unlock in smart contracts.
00:49:25.206 - 00:49:45.140, Speaker A: Here we're doing something a bit special, which is we're going to implement a hook to modify the behavior of the public lock, which is the membership contract. What we'll want to do here is something actually pretty simple. We want to make sure that every time a new membership is sold, the price of the next membership goes up a little bit.
00:49:45.140 - 00:50:04.550, Speaker A: This is usually called a bonding curve and this is a good way to implement what is called a discovery, a price discovery mechanism where basically every time a new membership is being sold, the price goes up. And at some point you would assume that no more memberships are being sold because the price is now too high. So let's go ahead and get started.
00:50:04.550 - 00:50:26.858, Speaker A: So to do this, we'll probably create a new folder here, which I'm doing here. Okay, I already have, well it's actually doing example here and we'll just CD into that one. I already have the bonding curve locally.
00:50:26.858 - 00:50:41.602, Speaker A: Then we'll run common called NPX Arthat which installs the Hard Hat tool set. Hard Hat is one of the popular tool sets in the ethereum world. You should definitely consider using it for any project that you use.
00:50:41.602 - 00:51:10.570, Speaker A: It is not related to unlocked. And so I'm here just completing the default options and let's say yes, we'll install the toolbox here and wait for a few seconds. When HarDNet does this, it actually does install not only a bunch of dependencies, but also creates a scaffold for a project which is going to be very useful for us as we're going to go into this exercise.
00:51:10.570 - 00:51:23.466, Speaker A: So let's wait a couple of seconds for this to complete. In the meantime, I'm actually just going to open the code here and show you what's in here. There's actually a contract that is kind of called Doc.
00:51:23.466 - 00:51:39.298, Speaker A: It's very confusing but it's not received at all with unlock. And we'll actually remove that file in a second and also has a test which basically tests the behavior of the contract that we're going to write. It also has interestingly a configuration file for Hanhat.
00:51:39.298 - 00:51:44.870, Speaker A: And we'll actually start looking at this. I see that the dependencies have been installed. We'll install two more dependencies.
00:51:44.870 - 00:52:15.694, Speaker A: One is the unlock contract package. So Yarn add unlock protocol package and then we actually have a specific unlock plugin for Hat hats which we'll install right after this just to make sure that everything works as we expect. Once we have this, we need to modify our files to make sure that they include all of the required setup.
00:52:15.694 - 00:52:34.146, Speaker A: And so we'll basically have to do one simple thing which is add the unlock plugin here to make sure that it's going to be used and that should be pretty much it. So let's actually do yarn run test just for the sake of making sure that everything is working as we expected. Yarn.
00:52:34.146 - 00:52:35.720, Speaker A: Run hard. Hat test. Sorry.
00:52:35.720 - 00:53:03.002, Speaker A: And we're missing a bunch of dependencies here, which we'll just install that's actually Yarn as this. So Yarn add and that should work. There's a quote somewhere yarn add here just installing all of these extra dependencies which are used by hard hat specifically.
00:53:03.002 - 00:53:18.310, Speaker A: So let's give it a second for this to complete. But once we're in there, what we're going to do is basically start by cleaning up that code. So we're actually going to use we'll rename that rename to maybe bonding curve.
00:53:18.310 - 00:53:49.610, Speaker A: Bonding curve I can't type bonding curvehook sol and so that means it will pretty rename the contract as well to bonding curve hook and we'll remove pretty much everything that's in it. The constructor will just maybe not even have anything in here. Let's not make it payable because it's actually not going to be useful to be payable.
00:53:49.610 - 00:54:09.206, Speaker A: And so that's the most basic version of our hook here. We'll also look at the test obviously rename that bonding icarp type curvehook JS. I think that's fine and we'll go modify the test.
00:54:09.206 - 00:54:24.490, Speaker A: So, quick indication. So as I said, we're going to modify the behavior of the lock and we're going to modify the behavior of the lock when a new key, a new membership is being purchased. For this we actually have to implement two function in our smart contract.
00:54:24.490 - 00:54:45.506, Speaker A: One function is called on key sorry, it's called key purchase price. And I'll explain in a second what this function does. And then we'll have to implement a second function which is a bit pretty basic, which is the on key purchase function.
00:54:45.506 - 00:55:04.514, Speaker A: So what the first function does basically the lock, the membership contract calls that function with whoever is the sender of the purchase function with the recipient address, the referral. And again, these are concepts that are specific to unlock. You should check it out in our docs as well as a data argument.
00:55:04.514 - 00:55:14.906, Speaker A: And then this function is expected to return a key price. Here what we'll do is return what is the default key price. So basically we'll make sure that we return the normal key price.
00:55:14.906 - 00:55:34.830, Speaker A: And I realize I forgot to include the interface file for this to create. The second function is the one that actually is called at the tail end of the purchase function when the purchase has been successfully achieved. And that's the one that we'll use here to modify the state of the contract.
00:55:34.830 - 00:56:14.874, Speaker A: And so to do this we'll just basically do something pretty simple which is go read, I mean basically create something where we'll have the lock that retrieve as the sender of the transaction that calls this specific contract and then we'll retrieve the price. We'll multiply by two here the price doubles every time and we call the update key pricing function to change the price. So basically we've called this function, we change the price and obviously we keep the same currency token address is the currency of the lock which could be an ESC 20 or the base currency of the chain.
00:56:14.874 - 00:56:30.530, Speaker A: So our contract is actually pretty much implemented at this point, there is not much else to do. The next step is obviously to modify the tests. So here what we're going to start with is obviously use something that is very useful here.
00:56:30.530 - 00:56:42.866, Speaker A: So actually we'll clean that first because I don't think we need any of that at the top here. We actually don't even need that part. We'll describe this as being the bonding curve hook.
00:56:42.866 - 00:57:03.514, Speaker A: We'll just remove this function because we'll not use that actually we'll remove everything here. So again, we are in a pretty basic default state. And then what we want to do is before any of our tests run, to do something pretty simple which is first to deploy the unlocked protocol and that's going to happen locally.
00:57:03.514 - 00:57:12.918, Speaker A: And for this we use this function that we get from the Rhat plugin. So I'm just going to include this from Hard Hat. So unlock deploy protocol.
00:57:12.918 - 00:57:27.366, Speaker A: Then we're going to pass a bunch of default arguments for the lock. And so here we pass duration of seven days. We use the base currency which we don't need to pass any address here, any smart contract currency contract address.
00:57:27.366 - 00:57:39.866, Speaker A: So it will be an ESC 20. We set a key price of one guay. Basically that is we'll have a number of membership limited to ten for now.
00:57:39.866 - 00:57:58.506, Speaker A: And we'll call this basically a demo. Lock is the name of the lock. So what's going to happen next is we're going to create the lock using again that plugin that we use with the right arguments and we'll get hopefully the lock address in the result we will also deploy the hook.
00:57:58.506 - 00:58:06.482, Speaker A: So that's actually really important here. We'll wait for that to be deployed. Here we use the default Hard Hat way of deploying contract and then we'll do two things.
00:58:06.482 - 00:58:18.126, Speaker A: The first one is we want to call this set even hooks function on the lock. This function does something really useful. It sets the hooks on a lock.
00:58:18.126 - 00:58:33.354, Speaker A: And here we're basically only setting the first one which is the purchase hook. You can see that we're passing a bunch of zero addresses because there's a lot of other available on key transfer, on renewals, et cetera, et cetera. So we only want to set the first one for this demo here.
00:58:33.354 - 00:58:46.606, Speaker A: So we pass the address of the onkey purchase hook that we just deployed, the bonding curve hook. And we also want to do something critical here which is add the hook to be a lock manager. Let's go back to the code.
00:58:46.606 - 00:58:56.014, Speaker A: So I explained this a bit more obviously. This function, not anyone can change the price. Only what call a lock manager can set the price of a hook.
00:58:56.014 - 00:59:12.182, Speaker A: And the lock manager is the first person who deploys it or any other address that has been set to be lock manager. And here basically we're calling the lock to say hey, you allow the hook to be a manager. As well.
00:59:12.182 - 00:59:24.106, Speaker A: So once we've done this part, basically our code is ready. And so the next and final step is to actually add one test for the sake of this demo. But you are more than welcome to add more.
00:59:24.106 - 00:59:39.390, Speaker A: So I'm just going to do this here. We're retrieving the list of signers, we'll make sure that the lock exists isn't set and then we'll make sure that the key price is basically our default from above here. We actually could use something locked at key price here.
00:59:39.390 - 01:00:00.706, Speaker A: That's going to be oops cool, let's now make a purchase. So we are basically calling the purchase function on the lock. That first argument is the values and we should actually pass probably, I mean we pass a zero here because it's a default currency lock.
01:00:00.706 - 01:00:06.806, Speaker A: It's okay. We could actually pass the actual value. So let's actually do this, see if that works.
01:00:06.806 - 01:00:15.910, Speaker A: And then we pass the recipient. So that's the recipient's address. So the person who's going to get the membership NFT, this is the key manager.
01:00:15.910 - 01:00:28.254, Speaker A: So it's the address that's going to have the transfer rights over the NFT that is minted. And then this is the refer which would receive any referral fee. That one is the data argument here.
01:00:28.254 - 01:00:37.650, Speaker A: We leave them empty and that's the empty array. We pass arrays for each of these values. So actually it's just for sake of directory do this.
01:00:37.650 - 01:01:01.126, Speaker A: We pass an array for each of these because you could actually call this function with multiple values to purchase multiple memberships in a single call. Once this transaction has been executed, we'll just verify that the key price has been successfully changed to be now double what it was. So we had a key price of one guay and now we should have two guay.
01:01:01.126 - 01:01:08.810, Speaker A: That's pretty much it. Code is ready now. So the next step is to run our test, which I'm going to do here right away.
01:01:08.810 - 01:01:21.818, Speaker A: It compiles and we have obviously an undefined argument here because lock arguing exposed. So I'm just going to keep that value that I had before. I think that's going to make things easier.
01:01:21.818 - 01:01:45.270, Speaker A: And so this time if I run the command it should compile fine and you see that the test passes. So we're done for that exercise. You can see that we've created a lock first in the code here we've attached a hook that basically changes the price of the membership every time a new membership has been purchased.
01:01:45.270 - 01:02:02.086, Speaker A: Just make sure that if you want to learn more about this, go check our docs. We actually have a specific tutorial so the docs are at Docs unlockprotocol.com. We have a specific tutorial for how to create hooks.
01:02:02.086 - 01:02:11.986, Speaker A: The one that is on our website is the one to create a password protected purchase. So please do check it out. It provides more detail around hooks if you need them as well.
01:02:11.986 - 01:02:24.594, Speaker A: In our docs you can find all of the reference for the API and the protocol itself. So please use this if you want to start implementing anything with unlock. Thank you very much.
01:02:24.594 - 01:02:25.360, Speaker A: See you soon.
