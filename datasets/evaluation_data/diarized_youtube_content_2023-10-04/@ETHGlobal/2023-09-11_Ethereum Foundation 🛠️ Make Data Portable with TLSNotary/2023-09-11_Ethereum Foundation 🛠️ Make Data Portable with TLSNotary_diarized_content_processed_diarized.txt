00:00:07.050 - 00:00:32.230, Speaker A: I'm Hendrik Achred, representing the TLS Notary Dream from the Privacy and Scaling Exploration Lab at the Ethereum Foundation. I want to present you the advantages of integrating TLS Notary into your hackathon projects and the transformative potential it holds. We, the TLS Notary team, are building TLS Notary to make private data on Web servers portable.
00:00:32.230 - 00:00:56.640, Speaker A: This data portability empowers users to control how they use their data, ensuring it remains trustworthy for third party applications. In the next few minutes, I'll explain to you why we're building TLS NoTree in more detail. I will give you a high level overview on how it works, and I'll end with a few possible ideas of what you can build with it.
00:00:56.640 - 00:01:18.630, Speaker A: I assume all of us know that modern web servers use TLS, which stands for Transport Layer Security. TLS ensures that the user let's use Alice as an example receives data directly from the server. Untempered, Alice can trust that the data is authentic.
00:01:18.630 - 00:01:35.866, Speaker A: However, when Alice wants to share this data with Bob, TLS does not help. Because of the way TLS works, bob can't be sure if Alice changed something to the data after she received it. This is where TLS notary steps in.
00:01:35.866 - 00:01:58.420, Speaker A: TLS Notary provides a secure, privacy centric method for data to get that seal of approval from a reliable notary. This enables seamless data sharing with third parties. TLS Notary works by adding a notary to the TLS connection using multiparty computation, or MPC for short.
00:01:58.420 - 00:02:05.942, Speaker A: Before we go further, let me clarify. TLS Notary is not some man in the middle scheme. No.
00:02:05.942 - 00:02:27.766, Speaker A: Instead, Alice and the notary each have their key share and need to cooperate correctly to execute the TLS communication. MPC enables this collaborative computation without revealing private information from Alice. This means the notary can verify the data's authenticity while only seeing encrypted bits.
00:02:27.766 - 00:02:47.314, Speaker A: And for the server, business as usual, the server can't tell that the data requests they receive is being notarized. One more thing you'll really love about TLS Notary is that it allows for selective disclosure. This means that Alice can redact Notarized data.
00:02:47.314 - 00:03:07.730, Speaker A: She gets to pick and choose which parts of the data to unveil. To Bob, selective disclosure can be further augmented with zero knowledge proofs of the redacted parts. For example, rather than exposing your exact address, you could add a zero knowledge proof that you do not live in the US.
00:03:07.730 - 00:03:36.530, Speaker A: Or you could simply confirm you're over 18 instead of exposing your exact birth date. A brief word on trust assumptions the server is unaware of the Notarization, so no trust assumptions there. NTLs Notary is open source, so Alice, the user, can check that the cryptographic algorithms were implemented correctly, so her data is handled securely and no information is leaked to the Notary.
00:03:36.530 - 00:03:52.370, Speaker A: Only the unredacted data is shared with Bob. If Bob the Verifier trusts the notary, the data he receives from Alice can be trusted too. Bob can tell Alice which notaries he trusts.
00:03:52.370 - 00:04:14.986, Speaker A: And Bob can also demand that Alice provides proofs from multiple notaries to increase certainty. Bob can also run the Notary himself, eliminating any trends assumptions at all. Technically speaking, TLS Notary is a rust library that can be used natively on most platforms.
00:04:14.986 - 00:04:31.010, Speaker A: A WebAssembly version is also forthcoming for browser integration. Likewise, the Verifier operates natively or via WebAssembly in JavaScript. The Notary server can easily run natively or in a docker container.
00:04:31.010 - 00:04:49.370, Speaker A: Now let's stir that creative pot. Here are some potential use cases. As a first example, imagine a distributed Web application where users can post independent reviews for products they bought in online stores like Amazon or AliExpress.
00:04:49.370 - 00:05:13.550, Speaker A: With TLS NoTree, users can provide this Web application with a proof that they purchased this product without revealing any other private information. Other users of the application can consult the reviews knowing the review was posted by real product owners. A next example we nicknamed DM Disclosure.
00:05:13.550 - 00:05:36.870, Speaker A: This is a hypothetical Web application that allows users to upload private messages. Topics could include I received incriminating messages from the crypto villain of the day, or I received unwanted private part pictures or anything else you would like to brag about or bring to light. TLS Notary proves the data is authentic.
00:05:36.870 - 00:05:55.630, Speaker A: The third example is using TLS Notary to prove censorship. Recently, there was a whole debacle around reddit, and multiple accounts were suspended. With TLS Notary, one can verifiably share the message received with the reason for your suspension.
00:05:55.630 - 00:06:17.506, Speaker A: You could also build a Web application for users to prove they were blocked from using an application, and report if other users are experiencing the same. You can also use TLS Notary to prove various kinds of account information. Imagine you have some crypto coins on a centralized exchange.
00:06:17.506 - 00:06:49.710, Speaker A: How can you prove ownership of your assets when the exchange suddenly disappears? You could also use TLS Notary to improve to import your Web two reputation and use that to gain access to anonymous chat rooms. For example, use your game Achievements on Steam to unlock access to anonymous chats with other proven advanced players. Or prove that you have the Marathon badge on Garmin or Strava to allow access to a chat about sensitive marathon topics.
00:06:49.710 - 00:07:06.790, Speaker A: Another idea is a POAP dispenser. You could use TLS Notary to dispense Poaps based on private data. For example, create a tool to prove participation at E Global, New York or any other events and reward a nice POAP.
00:07:06.790 - 00:07:28.970, Speaker A: And of course, we're also very open to tools at JSF TLS Notary. A generic proof visualizer would really help other projects exploring the use of TLS Notary. This could include visualizing redacted parts in the data or displaying certificate information and showing the notary's signature.
00:07:28.970 - 00:07:52.740, Speaker A: Tools to help with redaction are also an active area of usability exploration. A Short Remark about Public Data While TLS Notary can notarize public data, for public data, it's currently better to look at existing Oracle solutions. TLS Notary is best suited for notarizing private information.
00:07:52.740 - 00:08:09.330, Speaker A: For more information, visit our website tlsnotary.org. This page also links to GitHub repositories and our documentation website. The TLS Notary team will be live at the venue, so make sure to visit our boot.
00:08:09.330 - 00:08:24.030, Speaker A: We look forward to hearing your ideas and questions. I trust you now see what TLS Notary's data portability enables. And I hope that I sparked your imaging nation to invent and build new applications that make an impact.
00:08:24.030 - 00:08:28.350, Speaker A: Wishing you all the best for the hackathon. Let's make it memorable.
