00:00:06.330 - 00:00:32.706, Speaker A: All right. Hi, everybody. Thank you for being here. I'm Jack, and I am a developer relations engineer at O of One Labs. We're the company that incubated the Mina Protocol. And now we continue to build tools for Mina. And that's what we're going to talk about today, is Mina and Snarky JS, which is the smart contract language for yeah, here's our agenda.
00:00:32.706 - 00:01:13.966, Speaker A: We have sorry, this is, like, in the way a little bit. I'm going to be like that. Okay. So, yeah, first we're going to talk about Snarky JS, which is a TypeScript library that you can use to build zero knowledge proofs. And it's also the smart contract language for the Mina Protocol. We'll go through an example, building a simple contract that will let you only increment a number if it's the next number in the Fibonacci sequence. And then we'll make it recursive, which is a strategy that we can use to allow this code to actually, we'll just cross that bridge.
00:01:13.966 - 00:02:05.780, Speaker A: When we get to it, we'll talk about the Muna Protocol, which is sort of like a more general Snarky JS. It's a TypeScript library for defining zero knowledge proofs, and it's also the smart contract language for the Mina Protocol. And it looks like this, but you don't have to worry too much about that because we'll dive in in a lot more detail in just a second. Everything is in TypeScript, so you can keep using the tools that you're familiar with, like prettier ESLint vs. Code NPM, and it's very easy to learn. The IntelliSense is so good that I think probably most people can just dive into a repository of existing code and kind of make sense of it just by hovering over the things that they don't understand. And we have good descriptions of what it all does.
00:02:05.780 - 00:02:40.030, Speaker A: It's also extremely powerful, and this is for two reasons. The first is Kimchi, which is our proof system, and it's absolutely state of the art. It has a number of features that are really unique to it, and it's extremely well suited to this use case. So, first of all, it has a fully trustless setup, so there's no ceremonies, there's no sort of toxic waste. It just works. We have custom constraints for poseidon, elliptic curves, and encryptions. So this makes operations that you'll end up doing a lot dramatically more efficient.
00:02:40.030 - 00:03:29.246, Speaker A: The proof size is constant, so you can do as much computation as you want, and the proof always stays the same size and is the same computational complexity to verify it's recursive, which means that you can actually create a proof and then verify that proof inside of the process of creating another proof. And that has a lot of really sort of cool implications that we'll talk about a little later. And finally, it's plonkish so we can add new features like dynamic array access and a few other things we're working on. What about the Snarky JS library? So this is the other side of the equation. The Snarky. JS. Library we've built to be as easy to use as possible and as expressive as possible method chaining makes it very easy for developers to think through their programs in a linear way.
00:03:29.246 - 00:04:24.270, Speaker A: You kind of think like here's my data, here's what needs to happen to it, here's sort of where it ends up. And it makes it more sort of apparent what's happening inside your contract versus what's just sort of happening in maybe code that runs prior to your contract's execution or something like that. So yeah, we can see what this looks like. If we want to know if this guess is not equal to zero, we can call this equals method and then just chain on to the end the not method. And we can do the same thing if we want to add two values together. We can call just this add method on white pegs and pass in an argument. So custom circuit values provide a layer of abstraction that makes data a lot easier to think about.
00:04:24.270 - 00:05:09.582, Speaker A: This is basically a class that we have that you can extend in order to create. In this case, we have pegs. This is like four pegs as part of a board game. Fundamentally zero knowledge troops require that everything that you work with is is represented in this type called a field. It's, it's basically very similar to unsigned 256 bit integer except for that division works a lot differently. And yeah, it's not too important to dive into why this is necessary, but it's universally required by all of the zero knowledge proof systems that exist today. And it makes programming a little bit harder, especially when you're getting started.
00:05:09.582 - 00:06:10.894, Speaker A: And so the circuit value abstraction will let you define basically a way to take some type that you're more used to working with. Like in this case, like a JavaScript object that has four values for each of these pegs. And then it'll map it into these field elements for you and do the inverse when it comes time to take something from the representation in the circuit into a representation that's easier to work with. And finally, a lot of the stuff that you need is already implemented in Snarky. JS. So what we have included today is all of these types efficient poseidon hash functions, efficient encryption and decryption, efficient signatures, merkel trees and their recursion API. And so all of these types are circuit values that are again constructed out of this field element.
00:06:10.894 - 00:06:56.210, Speaker A: Ultimately they're composed of the field element but you can work with them just like you're used to working with like an unsigned 64 bit integer in whatever other language. So why did we choose TypeScript? And the reason is because we're ecosystem focused. And $0 groups are cool because they open the door for cryptographers and stuff to build crazy new things that make things that seem intuitively impossible possible. But it's also really cool if we can then make this available to people who want to build protocols or products that are user facing. And so that's kind of what we're going for. We're going for code reuse. That's as high as it is in the JavaScript ecosystem.
00:06:56.210 - 00:07:29.766, Speaker A: Yeah. So we'll also sort of touch a little bit more on this a little bit later. So here's kind of everything we talked about and just there for the sake of if you go back and look through the slides after, you can get like a condensed kind of view of everything. So how does Snarky JS work? Oh, and also the slides will be available after there's a QR code. You'll be able to scan it and it has all sorts of information, everything I talked about it's good. So how does Snarky JS work? Here it is in five sentences. It's a TypeScript library.
00:07:29.766 - 00:08:40.580, Speaker A: All the information is represented in one of the Snarky JS compatible types, which is eventually all of them are composed of this field type. And then Snarky JS provides classes and functions that are compatible with the field type. And it can represent anything that you do using these methods on these types as like what's called an Arithmetization, which is basically a math problem representation of the program, which is important because then we can feed it into the Xeronola true system, which is itself basically a math problem. And so a user that's interacting with Snarky JS program can run it as normal TypeScript. And then if they want to, they can actually pass all of these values that are computed as they're running it. Basically, they can pass their execution trace into this math problem that we generated and use this to create a zero knowledge proof. And so, yeah, the developer experience feels very much like if you view something like react it's like, yeah, this is pretty much JavaScript, but we have maybe like another layer on top of it now that's expressive and kind of helps us do something specific.
00:08:40.580 - 00:09:20.042, Speaker A: It's pretty easy to get started with. Okay, so how did the smart contracts work? And yeah, developers write them in TypeScript and then they deploy just the verification key to a Zkap account. So the verification key is like a commitment to the code with the added property that it can be used to validate these zero knowledge proofs that are generated by the code. And so when we want to deploy a ZK app to Mina, we just send a transaction with this verification key to the MENA network. And that's the only thing that's stored on chain. So the code actually doesn't live on chain only this verification key lives on chain. And then the users run the smart contract in their browser and they generate a zero knowledge proof of their interaction.
00:09:20.042 - 00:09:47.874, Speaker A: So the code doesn't run on the chain, it actually runs in the browser. And this is cool for a couple of reasons. Yeah. So we send the transaction, it's a zero knowledge proof. If it's valid, then the transaction is applied, and if it's invalid, then it's dropped. So if the Mina blockchain can validate this zero knowledge proof, it commits any relevant state updates. And this is kind of what this looks like from a higher level, is we have the Smart Contract method.
00:09:47.874 - 00:10:14.362, Speaker A: We pass into it some arguments that the user generates some smart contract states. So this is actually the state of the Smart Contract. It has to be passed in as an argument. The reason is because the Smart Contract doesn't run on the blockchain. And so, yeah, we have to grab the values, pass them in and run them ourselves. And then we also get some values for the state of the world. So this would be things like block height, if that's something that's important in your transaction.
00:10:14.362 - 00:11:11.220, Speaker A: And then what we get out is updates to the state of the Smart Contract and updates to the state of the world. And so when we run a Smart Contract on Mina, what it ends up looking like, if we have something that has the net effect of transferring some balance from you to me, let's say what I'll actually do is I'll just send a zero knowledge proof as well as two new values. And so one will be your balance, which will be lower, and one will be my balance, which is higher. And as long as knowledge proof is valid, then we know that's legal. And so we can just write these two values that's more on that. So how do ZK apps work? You can install your Smart Contract into your UI repository and deploy it and that's all there is to it. The Smart Contract is a bunch of TypeScript code, you can put it on GitHub or NPM or whatever, and then you can just install it into your front end repository with NPM install.
00:11:11.220 - 00:11:47.630, Speaker A: Very simple. Okay, so now we'll get into a code example. So the Fibonacci Sequence is a sequence of numbers that's each next number in the sequence is the result of summing the prior two numbers together. And we'll write a Smart Contract that will compute the next number of the Fibonacci sequence. It'll have two pieces of state, n minus two and N minus one. And it'll have a single method update. And this will let us update n minus two and n minus one if we pass in the correct number, the correct next number in the Fibonacci sequence.
00:11:47.630 - 00:12:41.930, Speaker A: And so to write a ZK app, we can just extend the Smart Contract class of Snarkyjs. So we have a smart contract called Fibonacci Sequence here, and then we can define our on chain state. And this is done, we just have these variables and we add this state decorator and pass in as an argument the type of the state. So here we're creating two pieces of state. Each one has a field type and this will live on the actual Mina blockchain. And Snarky Jest will sort of do the work to say we changed this, we proved that we changed it the right way and we made sure that the MENA network got the request to change this. The next thing that we have is we have this deploy method and this is actually a method that gets called as the Smart Contract is being deployed.
00:12:41.930 - 00:13:40.366, Speaker A: So this deploy ARGs is a thing that usually the Zkapp CLI, which is a piece of developer tooling we'll talk about in a second, will pass in. For the most part this can stay exactly as you see it here. In most contracts it can be used to configure a couple things at deploy time like set permissions for the contract or for the contract account and stuff like that. And in this case we're going to actually also use it to initialize the value of these on chain state values. And so we'll set N minus two to zero and N minus one to one. The next thing is we'll add our actual method that the users will call Update. And you can see Update takes N as an argument which is of the type field and we add this method decorator and the method decorator basically tells Snarky JS hey, this is code that users are going to call the same way that users would call like a method on an Ethereum Smart Contract.
00:13:40.366 - 00:14:46.434, Speaker A: And when users do call it, we should prove that it executed correctly and then send this on to the meta network. So something that's worth calling out here is that any argument that we pass into the method and anything that happens inside of the method is totally private. It happens in your computer and it doesn't leave your computer unless it eventually does something like emits an event or sets some piece of on chain state. But even in those cases you could emit an event which is like a hash of the real value and have a commitment, or you could store a hash of the value. It's much easier to keep even permanent storage private in this way, but yeah, that's worth calling out. Finally we'll start to make the functionality of this method. And so the update method here, we want it to grab the value of these N minus one and N minus two on chain state variables.
00:14:46.434 - 00:15:50.490, Speaker A: And so we just call the get method on N minus one and N minus two and we set it into this constant current N minus one and current N minus two. And so when the Smart Contract runs, this get method basically says contact the amino blockchain, get the values, store them here. The next thing that we have is we'll compute what the next number in the Fibonacci sequence should be and we do this just by calling the add method on N minus two and passing it as an argument n minus one. And so we have the sum of the last two values then in this new state. And then we assert that it's equal to the value that we passed in. And so this assert equals statement means that if this condition doesn't hold true, it will not be possible to generate a zero knowledge proof that's valid. And so yeah, if you pass anything other than the next number in the Fibonacci sequence into this method, you just won't be able to get a valid zero knowledge proof out and so you won't be able to send a valid transaction to the munin network.
00:15:50.490 - 00:16:50.560, Speaker A: Then finally what we can do is we can actually set this on chain state to something new. And so we'll set N minus two to current N minus one and we'll set N minus one to the new state. And so this is just sort of shifting everything over one. And so when we do this also again, Mina will make sure that you can't call these set methods unless everything that's happened is sort of attested to with this valid zero knowledge proof. And so yeah, this is just as secure as doing this directly on another blockchain setting some kind of state from within your contract. This is kind of like the general structure of this. Generally we define our on chain state sort of at the top we have our deploy method and then we add the actual user callable methods below that.
00:16:50.560 - 00:17:50.590, Speaker A: So this is cool, but what else can we do? Well, we can make it recursive. And so this is something that's unique to the way that Mina works and to our proof system, at least it is right now. And this is that our zero knowledge proofs can actually be passed as arguments into other zero knowledge proofs and validated inside of those zero knowledge proofs efficiently. And so what this means is that I don't know, if I have a lot of computation, I might split it into ten different chunks, run each of these chunks, prove that we ran it correctly and then actually take those proofs and prove that we've aggregated them together correctly. And so yeah, we can embed recursive proofs into each other with arbitrary branches and merges and we can do it an infinite number of times. And this is made possible with this ZK program thing. So this is basically a smart contract without it's like sort of a stripped down smart contract.
00:17:50.590 - 00:18:48.500, Speaker A: It's just the program smart contract is kind of a superset of this. And so we define a public input, some methods. But what we can see is that for our private inputs here, we're actually passing proofs in and we can see that the method here takes still an N value, but it can also take in this Fib One and Fib two, which are both proofs of the same kind that this will generate. So this thing makes a proof and then it can actually also take the proofs that it makes as arguments and make another proof from that. And so what we do is we verify these two proofs, and then we do basically the same thing that we did earlier. This can be quite powerful in a lot of cases. It lets you do things like build if you want to do something like build a game, but you don't want to have users wait for blocks and pay gas every time that they want to make a move.
00:18:48.500 - 00:19:23.134, Speaker A: We can set the game up in such a way that I make a move. I prove to you that I made the move correctly. You actually look at the proof that I made my move correctly, make your move, and then prove that your move is correct, and also prove that you've verified the proof of my move correctly. And then we go back and forth this way, and at the end, we have a single proof the same size as each of its prior proofs. We're not like, creating more and more information here. We're just back and forth this fixed size chunk. And at the end, we have this proof that attests to the entire history of the game.
00:19:23.134 - 00:19:56.060, Speaker A: And so we can actually submit that proof then to the Mina blockchain in the form of like a transaction or something, and settle the whole game in just one transaction. So no need. It's basically very good. UX. Same as like in a normal game, because you don't wait for blocks and you don't pay transaction fees only at the end. And so it's pretty straightforward. We can just wrap our ZK program inside a proof class and then we can pass it in with this, I guess.
00:19:56.060 - 00:20:32.230, Speaker A: Yeah, we set the the type of the argument that we pass in to be this Fibonacci sequence proof, and then we just call verify. And as long as the proof is valid, then we go through. If the proof is not valid, then again, it's impossible to generate a valid proof of this bit. So pretty cool. Okay, so now we get to kind of the interesting part. This is a tool that you can use to build stuff and then you can use to build things for Mina. And Mina is a layer one blockchain that proves its entire finalized state using these recursive zero knowledge proofs.
00:20:32.230 - 00:21:20.930, Speaker A: What this means is that it doesn't grow. It stays a fixed size over time, or at least the amount of information that you need in order to validate the current finalized state of Mina stays a fixed size. And so that means that if I have an account, I can store the state route a proof that the state route was gotten to via a legal sort of path, and then all the information for my account that I need in this 22 KB. So this is really cool, but it's actually also really useful. And there's quite a few reasons the first is privacy. So Ethereum smart contracts run on every single node and so the information is all public. Mina smart contracts run in the browser and so the arguments and the intermediary values are private by default.
00:21:20.930 - 00:22:02.020, Speaker A: You can see the only thing we send is our state update and our proof. And we verify the proof and then we update the state if it's a valid proof. It also opens the door to being able to scale things more easily. So there's no gas model ZK apps run off chain and the amount of the computation does not affect the transaction cost. You can do actually as much computation as you want to inside of a single transaction. You can make these transactions asynchronous sorry, you can make this computation asynchronous you can do all kinds of crazy stuff because it's literally just TypeScript code that then proves that it ran correctly. And we get this fixed size proof no matter how much computation we do.
00:22:02.020 - 00:22:49.806, Speaker A: So that's pretty cool. And then you can also use this to build these application specific roll ups, which is this kind of idea like the game that we talked about a little bit earlier, we can build basically because we don't need the whole network in order to prove that we've sort of ran something correctly. We're depending on cryptography instead of game theory. We can prove things in more narrow contexts and then only settle to chain when we need to. And so this makes it possible to build all kinds of things that would be too expensive to build them on even very scalable blockchains today. Finally, it increases decentralization. And the reason is because it's possible to validate the whole mean estate using only the small zero knowledge proof.
00:22:49.806 - 00:23:28.686, Speaker A: And so there's no need to rely on like a trusted third party node operator. Like infura people can connect directly and it also makes bridging easier. And this is pretty cool. So smart contracts on other chains, they can bridge the entire amina state just by verifying the most recent proof. So there's no sort of like multi SIG or weird sort of, I don't know. It's not like a normal bridge. It's basically like you can verify that the Mina consensus has worked correctly and worked up to a certain point just by taking this most recent proof and verifying it.
00:23:28.686 - 00:24:09.946, Speaker A: And so if you can write a smart contract that can do that on Ethereum, then you can bridge the whole MENA state to Ethereum without introducing any additional trust assumptions and without having to lock any kind of liquidity anywhere. There's nothing. It's very simple. A user basically says, hey, here's the Mina state route and the zero knowledge proof of it. I'm just going to call this method on this Ethereum contract pass in the state route and the zero knowledge proof. This contract will verify the zero knowledge proof and if it's valid, and if the block height is higher than the last one, then we'll just update the state. It's very cool.
00:24:09.946 - 00:24:48.930, Speaker A: And actually the Nil Foundation is working on this and they have a demo on testnet. And so if you want to there's also a link to this in the QR code at the end. You can experiment with this. This bridges the whole Mina state to I forget which testnet, but one of the Ethereum testnets and this is an audit. Now we also have oracles. So users will be able to create TLS proofs that can bridge data from any website onto the MENA blockchain. And the way that this kind of ends up working is that right now when you go to a website you get the little lock in the side of your browser and this is the result of an interactive process and it basically guarantees like hey, I really am connecting to Amazon.
00:24:48.930 - 00:25:56.366, Speaker A: They actually are Amazon, I'm sending them my credit card information and I know that nobody can see it basically. And so it makes these guarantees but it's in an interactive process and so it doesn't work for something like a blockchain. Amazon can prove to me that they're Amazon and that we had the interaction we had, but they couldn't prove it to Ethereum because yeah, it would have to be this sort of interactive thing. They can't just generate a signature or something that says, hey, this all worked nicely. But with zero knowledge proofs you can take these interactive processes and turn them into static non interactively verifiable proofs. And so doing this with Mina, this will allow us know basically you can go to whatever website you want to, you can prove that you really went to that website, that the website really was the know, they really had the certificates for their domain name or whatever and that they really sent you something. And so I could do something like, I don't know, prove that I logged into my bank account and they sent me a web page that says I have a balance with X number of dollars.
00:25:56.366 - 00:26:46.286, Speaker A: And then I could actually take that proof and I could feed it into another proof that says let's verify that Jack is a unique person by hashing his Social Security number or something and checking that it's not in a list. And then also let's check if Jack has more than $1 and then if I have more than $1 we spit out a Boolean true. And if I don't, then we spit out a Boolean false. And so we can augment this information as much as we really want to. And actually also probably right after this presentation we'll have a tutorial live that lets you build something similar to this for it's like a fake credit score. Oracle, it's just API that returns a fake credit score and is signed. And so you can do this today with signed data.
00:26:46.286 - 00:27:27.530, Speaker A: But what ZK Oracles will allow you to do is also have sort of signed data that comes through a necessary exchange. So that's pretty cool. And what else? Well, we actually don't know everything that's possible yet. And this is what we're hoping that people like you guys here help us figure out. There are a lot of things, like probably every six months it seems like we found out new things that are possible that we didn't know were possible six months ago. So that's the point of coming to hackathons and having people like you build stuff. There's probably a lot of cool things that are possible to make that we haven't thought of yet.
00:27:27.530 - 00:27:44.174, Speaker A: And you should build them. And we have prizes. We'll give you money if you build them. Yeah. So where to learn more in questions and answers? How do you get started? Super, super simple. Install the Zkap CLI. This is our only piece of developer tooling.
00:27:44.174 - 00:28:28.270, Speaker A: It's very powerful and it's very simple to use. You run ZK projects, call it something and it'll spit out a repository with some Scaffold code. The Scaffold code is just a smart contract that adds, I think, two numbers together and stores that on chain but testing stuff. All set up, linter all set up. Everything good to go, basically. And then when it comes time to deploy it, the Zkap CLI will connect to a testnet and create a transaction that deploys this application. So yeah, you can install this really easily and you can just get a project and like I said, the easiest way to get started, install it, get a project and just poke through the code using IntelliSense and see what's going on.
00:28:28.270 - 00:29:06.310, Speaker A: It should be pretty straightforward ways that you can get involved with the community are we have ZK apps, building them, that's a good thing. You can make educational content or you can sort of do mentoring, like hanging out in Discord and stuff. Mina foundation has quarterly grants that are backwards looking, so if you do something cool, maybe in like two months they'll give you money or something like that. And then finally, these are our social media pages. Here's the discord. Here's the link to our docs. And you should definitely join the Zkapp Developers channel on our Discord.
00:29:06.310 - 00:29:28.510, Speaker A: This QR code here has link to a notion page that has the slides for this presentation. Links to a couple of other presentations that have information on other things. Link to the Nil Foundation stuff. Basically, all the information you want is behind this QR code. I think that's all. Yeah. Thanks everybody, for listening.
00:29:28.510 - 00:29:31.180, Speaker A: Awesome.
