00:00:01.130 - 00:00:51.300, Speaker A: Some people to trickle in. Okay, Kevin says we're good to go. Hi everyone, I'm Krie, I'm with the East Global team. We have ali here from filecoin. She is going to give us a talk on FBM and Balacow. Please tell me if I'm totally butchering the pronunciation of that, but it's on Bridging. Compute over state and compute over data.
00:00:51.300 - 00:01:30.800, Speaker A: So I'm super excited for this. This is going to be something like I specifically signed up to host this because I was really curious on learning about this stuff myself. So very excited for this talk. We'll open it up for maybe like the last five minutes for questions. So feel free to raise your hand and come off mute at the end once that is time. Or if you just want to drop your questions in the chat just so you don't forget them. Feel free to do that throughout the talk and then at the last five minutes, we will answer those questions and yeah, without further ado, Ali, feel free to take oh and come off.
00:01:34.770 - 00:02:25.940, Speaker B: Mute. Thanks very much, Cree. And actually, fun fact, I think it's been almost a year to the day since my first ETH Global presentation with you guys. So pretty, pretty cool that I'm back here after a year and doing so many amazing events with you guys. So big thanks to you guys for hosting me here today. And okay, for those that may not know me as well, I'm Ali, I'm a Developer Relations engineer, so I get the absolute privilege of working on my passion and helping enable others to build out their ideas and supporting developers like all you amazing folks on your own journeys. And I love Hackathons because it's really an amazing way to harness the power of community and innovation and it really captures the spirit of why I got into tech in the first place, which is the impact that innovation and innovative science and tech can have.
00:02:25.940 - 00:02:57.100, Speaker B: So what are we doing today? Firstly, I want to do a quick project demo and have a rundown of the tech stack. I'll tell you about Baco. What? Well, Baco Yao. It's not a Portuguese fish. Well, it is, but it's also compute over data. I'm going to run through the code with you, so I'm going to make sure you know every bit of function that interacts here. And then I'm going to talk a little bit about the possibilities and future for FBM and Bacoyau together.
00:02:57.100 - 00:03:50.426, Speaker B: So first things first, FBM and Bacoyau, what is Bacoyau? We all know data and information is everywhere. It helps me get up to my favorite song in the morning. It remembers my meetings for me, thankfully, and it even helps me reword my blogs. Thanks Chat GPT. I'd also literally be lost going anywhere outside my own suburb without Matt's data. So, needless to say, data access and storage is really a critical part of today's society and it's also why it's essential, we take a minute and think about what happens with our data, how it's stored, who it belongs to and what is done with it. And for those of you familiar with the Filecoin ecosystem, you'd already be aware that this is a fundamental mission we're working on, which is building the tech to enable open, scalable and distributed data systems, the base infrastructure that we need for a really open Web.
00:03:50.426 - 00:05:10.050, Speaker B: So that means that not only is it essential that we create a distributed storage and retrieval network that enables that data sovereignty and that provides those innate blockchain qualities like censorship, resistance and trustlessness, which we're doing with Filecoin. It also means and we're also providing a content verification layer system with IPFS. But it also means enabling computation of data in a way that aligns with this Open Web mission, which is where both FBM and Bacoyau fit in. So this is a great little diagram that maybe shows you how these things interact. So storage is really only this start and we can think of the storage layer as the layer zero while the ability to storage and retrieval layer I should say while the ability to perform that on chain computation which is super exciting right now or that computation over state with FBM brings layer one capabilities to the filecoin stack. So Bacliau then builds on this by bringing the additional capability for off chain verifiable compute loads on large data sets to the filecoin network. So this makes for some really powerful tools enabling new and innovative applications to arise.
00:05:10.050 - 00:06:32.782, Speaker B: So, just to reiterate, FPM enables computation over state for Filecoin, so it brings programmable applications and logic to the filecoin chain, which I love, and in itself is pretty awesome because it really helps enable some more user friendly developer opportunities as well as enabling all sorts of use cases. So both those already available in other ones, in the Ethereum ecosystem, for example, or in the broader Web three community, and also some that are really unique to the Filecoin ecosystem, such as the opportunity for data markets and dows and programmable storage automation, which is really not a feature of other blockchains. So one thing that blockchain technology really doesn't do inherently well though, is data processing. And this is just a factor of the cost of computing over a distributed system that needs consensus to provide other powerful properties like trustlessness and censorship resistance. So data processing and making sense of that data in a way that we can verify is really essential for not just like business profitability or competitive advantage, but also to solve some increasingly complex human challenges and as well as just make our everyday lives a little easier or a little more fact based. And yes, I'm looking at you fake news pandemic. Anyway, this is where Bakuya can help.
00:06:32.782 - 00:07:25.714, Speaker B: So, Bakuyao enables off chain computation over data without giving up the decentralization or verification values inherent to IPFS filecoin and the broader Web Three community in general. So FVM and Baclil make up the computation side of Filecoin. FVM offers that computation over state or on chain computation, and Backlial provides you with the compute over data or any data, and that includes big data with support for GPUs as well. And in the not too distant future, we're working on this cool little project called Frog, which will enable you to leverage Backalau by calling it in your smart contract. So that will be a big win for developer experience and users. And if you're interested, keep an eye on Project Frog. This is a POC in progress right now.
00:07:25.714 - 00:08:16.718, Speaker B: As I said, if we think about some of the data stored on the Filecoin ecosystem, it also really gives an even better picture of just how essential it is that this data is open and accessible and that we're able to make use of this data in some collaborative ways. So these technologies that I've just spoken about will also enable more applications in the decentralized science and decentralized data fields as well. So things like collaborating on climate data action or sharing academic research, even creating an open education library, which is happening now from our Filecoin foundation for the Decentralized Web team. By the way. Check them out. Awesome bunch of people doing some amazing things. All of this requires off chain compute methods.
00:08:16.718 - 00:09:07.090, Speaker B: So these are just a few examples of some of the things that would require that just to get your brains thinking. So what exactly is Bacquio? How does the tech stack work? I'm not going to linger on this too long. I know you're here to see how to AI generate an NFT. I'm going to get to that, I promise. But firstly, just how does Bacclia work? So it was originally conceived to bring these useful compute resources and to data stored on the IPFS and Filecoin network. So again, we really wanted to make sure we were bringing the same benefits of open collaboration on data sets to generic compute tasks and really aiming to help democratize the future of data processing there. If you want to dig deep on this, I recommend this video by our lead David Aronchic, if you want to hear more.
00:09:07.090 - 00:09:43.034, Speaker B: He was also a founding member of Kubernetes, so he's dealt with Containerization before. He understands how these data systems work. So Bacliau is a peer to peer network of nodes that enables users to run docker containers or WebAssembly images or as tasks against data that is stored in IPFS. And this provides that platform for public and transparent and optionally verifiable computation as well, which is known as compute over Data. Cod. Which fun fact is cod? Cod. This is a fun fact.
00:09:43.034 - 00:10:18.054, Speaker B: This is where Bacchiao's name come from. Bacchiao is Portuguese for cod. So there you go. That's how I guess its name. Anyway, each node in the Bacchal network has a requester and a compute component and to interact with the cluster, the back of your CLI request, or in my example, a HTP request sent to a node in the cluster. This is via JSON or HTP and it then broadcasts these messages over the transport layer to other nodes in the cluster. So all other nodes in the network are connected to the transport layer and have a shared view of the world.
00:10:18.054 - 00:11:28.074, Speaker B: So this means that when a job is submitted, if I can get my words out today to Bacoyao, it is forwarded to a Bakuyao cluster node which acts as the requester node. So the requester node broadcasts the job to all the other nodes in the peer to peer network who can bid on the job creating a job deal market. So these are some similar systems to what you might see in IPFS or Filecoin already as well. So depending on the flags given to this requester node, these can include things like concurrency or confidence, minimum bids before acceptance, reputation, locality, lots and lots more, even IPFS CIDs. Depending on these flags, the requester node accepts one or more matching job bids and the accepted bids are then executed by the relevant compute nodes using the storage providers that executor node has mapped in, for example, the docker executor and IPFS storage volumes. So it's a really flexible way of doing compute over data. So once the job is complete, a verification will be generated which you've accepted leads to the raw results folder being published to the compute node.
00:11:28.074 - 00:12:16.766, Speaker B: So our default compute node at the moment is Estuary tech for those of you that may be familiar with that as well. So there's a lot more flexibility to this process. But the main thing to understand is that Baccalia gives you the ability to execute a job where the data is already hosted across a decentralized network of servers that store data, enabling you to kind of save time, save money and operational overheads. Because trying to run like a GPU processor, for example, in the cloud can get quite costly as well as annoying to set up. And it allows for referenceable and reproducible jobs that are easy to manage and maintain. Obviously had an animation on that one that I forgot about. So let's get on with the project.
00:12:16.766 - 00:12:56.970, Speaker B: I've gone ahead and made what's kind of a little bit of a trivial but super fun example of how Bacquio and Fem can work together. I'm hoping by the end of this though, I can leave you with some cool ideas for what's possible. And also NFTs have so many great use cases and combining them with computation processes over data could really help bring your projects to life as well. So there's all sorts of things you can do with music, voxel NFTs, token, gating to animated and dynamic NFTs like all sorts of things. So anyway, let's take a sneak peek of what our final example looks like. So this is my project architecture. I'm just building a front end on next JS and TypeScript.
00:12:56.970 - 00:13:34.546, Speaker B: I'm using for the NFT contract. An open Zeppelin modified open Zeppelin solidity contract. I'm using a backyard text to image stable Diffusion script, which I'll get into, but it's all open source and you can do it yourself or use ours. And I'm using NFT storage for the metadata storage. And then I'm deploying to the hyperspace testnet using Hard Hat and I will deploy this front end app to Fleek. I didn't quite get around to doing that, but Fleek is like versel. It's a CI CD deployer.
00:13:34.546 - 00:14:17.086, Speaker B: And if you're deploying your front end apps, I'd really recommend trying to do it with something like Fleek or SPHERON who are using IPFS and filecoin under the hood rather than web two text. So let's take a look. Has anyone got a prompt I can put in here to give my little text to image thing? What NFT should we create here? This is the actual application. This is connected to a contract. So if no one has any ideas, I'm just going to write Rainbow Unicorn in here again in space maybe. Let's try that out. So basically what's happening here is I'm entering my text prop prompt when I go to generate the image.
00:14:17.086 - 00:15:05.778, Speaker B: This is calling Bacliau and running a stable Diffusion script in the background. Once that comes back, I'll get a preview of the image so it'll come back as a CID. Bacliau will return, as I said before, this kind of folder, which will include things like the exit code, the output standard error. It comes back as a CID, though, and then as part of that, the outputs will include an image. So something like this, for example, this is an old one, it'll come back with something like this and then I'll go ahead and mint the NFT after that happens. Now, this does take a few minutes. This isn't an instantaneous API running in the cloud like this is legitimately running right now on our backyard servers and this job is going through.
00:15:05.778 - 00:15:51.634, Speaker B: So I'll just take a couple of minutes. And while it does that, I just want to show you how I made this contract as well. So as I said before, this is a contract based off Open Zeppelin ERC 721, which you can use from anywhere. So the Mint function on this contract takes an IPFS CID, which would be the NFT metadata. So that includes the name, the description and image and other properties that you want to put in there for that image or other type of what am I looking for? Mind file. So this Mint function needs those three things name, description, and image. Sorry, the metadata function needs those three things.
00:15:51.634 - 00:16:31.920, Speaker B: So this is a basic contract, though. Once I call this function to mint an NFT on, in this case the FBM Hyperspace Network, I am emitting an event as well. So every time if I'm signed up from my front end to listen for events on this contract. I will get an emission of this event. Now I'm also saving some ownership details here, so I'm mapping the address of the owner to the ERC 21 721 that they mint it's a bit early here. Sorry guys. And yeah, that will be emitted on the blockchain as well.
00:16:31.920 - 00:17:30.978, Speaker B: So to deploy this, I'm using hard hat. And when I first started doing this contract, I was actually working on the wallaby test set and then obviously Hyperspace became live so I had to switch over to that. So there was a few fun little figuring out how this worked and what things were going on there. But at the end of the day, I got this working and it's really kind of just a normal Hard Hat script which is really cool. The only difference here is that a lot of the time you'll use, providers get signer from efforts and if you don't know what this is, you can always deploy on Remix, don't worry. But I just wanted to run through some of the maybe bugs that I came across that might help you guys as well. So when I was deploying on Hard Hat, I found I needed to provide the wallet so the signer explicitly rather than try and grab that off the provider itself.
00:17:30.978 - 00:18:02.058, Speaker B: So I didn't do provider signer, I had to explicitly name this for this contract to work. And I can have a quick look at that if I go down here. I've got my hard hat config here. Nothing too special about that. Just has the Hyperspace RPC, the chain ID and the accounts and then the deploy back VR script. Really pretty normal to any other script apart from explicitly calling out what this wallet is. And I can go ahead and deploy it by running.
00:18:02.058 - 00:18:31.400, Speaker B: If you can see this, I've got so many things open. Oh my gosh. Just this middle one here, I can run it NPM hard hacks run and run the script that's here and that will deploy it to the FBM hyperspace network, which is pretty cool. I'm not going to do another deployment. I've already deployed one. Oh, so great. If we have a look back here, it looks like our NFT job from Bacoyau has come back with an output as well.
00:18:31.400 - 00:19:01.920, Speaker B: So how cool is this? What a pretty unicorn. It's actually only got one horn as well, so it's really funny. I was doing this demo and I was typing in Rainbow unicorn a few times and every time it would come back with this unicorn that had two horns. So like a duochorn. Really, really weird. But anyway, we've got a one horned rainbow unicorn in space now so I could go ahead and mint that NFT if I want to as well. And that will call that contract that I was just showing you before.
00:19:01.920 - 00:19:59.940, Speaker B: Obviously I would need a connected wallet for that. So you can have a look at the FBM docs if you're not sure how to connect up your MetaMask. I've got this connected to the FBM hyperspace network though and I'm just going to confirm that I do want to mint that NFT and that will go ahead and send firstly, before it does send to the contract, though, it does actually save to NFT storage. So I'll come back to this script and how it works in a second. So firstly I'll store this metadata with NFT Storage. And the cool thing about this, and what will be awesome when FBM goes to Mainnet as well, is that NFT Storage actually can return some of your so once you save this metadata to NFT Storage. And here's, like the really easy package you can use to do that, the JavaScript package to do that.
00:19:59.940 - 00:20:42.762, Speaker B: It's also got an optional status property. So if you have a look at the NFT Storage docs and I think I have them open here, it's got this status here which can return the IPFS pinning where it's pinned to and also the filecoin deals that have been made for this piece of content. So that's really cool and it'd be great to kind of integrate that in the future. Obviously that's on mainnet and this is on a testnet, so they're not going to interact together. But I'm saving this NFT to NFT storage first. I've just gone ahead and minted the NFT. All I do for that is called the contract.
00:20:42.762 - 00:21:07.826, Speaker B: If you haven't seen that before, there's lots of resources out there about how you'll connect that or you can have a look at the GitHub as well. So let's see how we're going with the minting. Just going to go back there. Looks like I've minted this to FBM already. I've obviously got sorry, I rushed my front end code and I've got a few bugs here. So this says Starboard Ventures contracts undefined. This is one of the block explorers that you can use for hyperspace.
00:21:07.826 - 00:21:36.180, Speaker B: This is meant to have the contract address on it. I can probably just have a look and see what's happening here and I'm pretty sure this is my contract, actually. I recognize the numbers from playing around with it. So you can see that there's been 1234 transactions. And if I went and had a look at this, I've also got four NFTs on here. So that's the NFT demo pretty cool. You can put anything in here as well if you wanted to.
00:21:36.180 - 00:22:11.382, Speaker B: For some reason it's not showing the NFTs that are on my wallet, but if I swap over, I think it should work. Got a listener in there, but yeah. How's that? Auto generated AI NFT art. That's all there is to it, apart from the underlying magic that is. Brought to you by Bacliau. So I'm just going to go back a couple of slides and show you what is happening with that one as well. So underlying this.
00:22:11.382 - 00:23:07.630, Speaker B: What's returning these results is basically a TensorFlow script written on Python. Whoops, wrong one, my bad. If you want to see get a really in depth view of how you'll go about building this, dockerizing it and then putting it on the backyard network, I do have a video out on that, so you can go ahead and have a look at that if you want to get more into depth on that. But otherwise it's also in our examples. So you can go to our Bapyow examples docs and there'll be a whole page write up on how to do this yourself too. Anyway, this is the basic script though, so it basically uses Keras TensorFlow implementation of stable diffusion, which is the ML model that generates images from a given text string, and it finally just displays the image generated. This basically basic Python script or returns the image generated, I should say.
00:23:07.630 - 00:24:07.726, Speaker B: The Mo weights are pre calculated in a library as well, so there's no need to do that. But there's lots of scope for you to kind of do some tweaking around with this script or run it with different implementations, or if you're like data science or AI inclined, I'm sure you've got lots of ideas of things you could do there. Now, in order to run this in my front end, I'm using a bapier http endpoint now, these are still a work in progress, so this was the first one that has been done just for this demo. So this rest API for bacchia, like I said, still a work in progress, but you can call this stable diffusion one already. Now, under the hood, this triggers the backlier job, which contains that Python stable diffusion script I was just showing you from the last slide. And the job then runs on that whole GPU enabled network that I talked about earlier and returns an IPFS CID. Now, we had a quick look at the folder structure of that return from earlier.
00:24:07.726 - 00:24:57.614, Speaker B: So this is the kind of return that we got. Yes, already showed you that. And that's about all there is to it, actually. So the only other thing I would mention is that the Bakuyao Klee does return a V zero version of an IPFS CID. So I'm just using a library, that's the word called multiformats, just to convert that into a V one string because it's easier for me to display that through gateways. Like a lot of gateways won't display V zero versions of IPFS CIDs, so I'm just converting that for easier use on my front end as well. So I think that's pretty much all there is to this whole contract.
00:24:57.614 - 00:25:59.094, Speaker B: We can play around with it, have some fun with it. It's up on my GitHub repo as well, so you can pull it down from there. Please don't pay me out. My really bad code. I was building TypeScript, but I haven't built too many TypeScript projects recently and I started just going type any so feels if anyone's done that so it does need a bit of cleaning up, feel free to put in a PR, but hopefully it kind of explains some of these major points in here. So before I do finish up though, I do want to leave you with some possibilities for Bacquio and FBM integration that aren't just like kind of this AI generated NFT though, that's cool in itself, but Bacquial also lends itself really well to performing some repetitive and deterministic processing jobs over data. So things like machine learning and AI, which we just saw IoT data integration and I think I saw Jared on the zoom before as well.
00:25:59.094 - 00:26:43.410, Speaker B: I know he's a massive IoT fan, so this one might be something that you want to have a look at, Jared. So batch processing, which would be for things like financial and market data as well, or storage deal data. There's also video and image processing and there's so many more things. If you do have a look at our examples, we've got so many great examples on there of different things you can do. I know Livepeer was talking the other day and I know Hudalo One's been talking and they're both big video people. Bakuyao could help enable some of the processing involved with that as well. So some other ideas for Baccalau and FBM kind of combination.
00:26:43.410 - 00:27:32.418, Speaker B: It could help with onboarding and offboarding of filecoin data in the future. That's not quite something that we're at now, but definitely something that's on the roadmap. It could help build a reputation and quality of service layer for filecoin by processing the data that's retrieved on chain about those deals and storage providers. It could provide computation for market and payment data. As I kind of mentioned a second ago, it could help with processing data from Dows. And data dows like Dows themselves already have so much information that needs to be kept somewhere. So proposals, votes, how do you decide if your members are active, all these kind of things that decentralized autonomous organizations are trying to figure out involves data and data processing in some way.
00:27:32.418 - 00:28:26.580, Speaker B: And then we're adding on top of that tokenized data sets for data dows and we've got even more information. So Baccaldao could potentially help with processing data for those kind of applications as well. Could also help empower more automation for creative endeavors like I've kind of mentioned with video and image processing and even gaming as well. Gaming and metaversing data. There's a lot of data there, so it could help with some processing for those type of things. And obviously, as I mentioned before, back of the hour IoT and simulations are possible and AI and Mo applications too to add additional functionality to what's already happening and it's already cool on FBM. And in the future, like I said earlier, we're really excited to be announcing that you'll be able to call Bacliao in your smart contracts as well.
00:28:26.580 - 00:28:55.254, Speaker B: Okay, more inspiration. As I've said a few times, check out the examples. There's heaps there how to process these images, some OCR, speech recognition things, object detection, all sorts of examples there that you can play with and that are already built and dockerized and you can just call from Bacchia. So otherwise I am going to leave it there. Get involved with us though. We're on Twitter. YouTube.
00:28:55.254 - 00:29:30.006, Speaker B: Bacquio project. Join the filecoin Slack and join our Bacquio channel. You'll find us all there and willing to help engineers and everyone. We have a forum on our GitHub as well. And again, there's those docs examples too. We do have some future events coming up and actually this is a great playlist if you do want kind of more inspiration about what Bacliau or compute over data can do. This is from our recent summit in Lisbon, and we've got another one coming up for our launch on 9th and 10 May.
00:29:30.006 - 00:29:51.758, Speaker B: We've already launched in beta, but this will be like a more fuller launch then as well. And otherwise I'm going to leave you with this quote, guys. The best way to predict the future is to create it and otherwise learn long build and prosper. Thank you so much everyone for joining me. I'll stick around for any questions that people have.
00:29:51.924 - 00:30:09.750, Speaker A: I love that quote so much. Thank you. Yeah, that was awesome. I'm honestly so excited to go mess with this. I just love all the NFT and AI generation stuff. So cool. I think we have a few questions in the chat.
00:30:09.750 - 00:30:19.522, Speaker A: So Jordan asks if the okay and Ali, please teach me how to say this again. I know you said it like A, right?
00:30:19.596 - 00:30:25.082, Speaker B: So anyone that's Portuguese is probably like saying it wrong. And I'm like I'm very sorry.
00:30:25.136 - 00:30:26.700, Speaker A: I was going to call it B.
00:30:28.190 - 00:30:46.340, Speaker B: I'm calling it the Australian version of Linked to my GitHub. I think Jonathan's asked for that in the chat there, so I've sent you a link to that. But also I'm developer Ali on GitHub, so you can check that out.
00:30:47.190 - 00:30:54.370, Speaker A: Super great. And then yeah, Jordan asked if that can access the network and if yes, how does that get verified?
00:30:57.110 - 00:31:45.106, Speaker B: What network do you mean, Jordan? I'm guessing she means IPFS network. So there's a lot of information in our docs about what it can and can't do. So you would store your upload your data to IPFS first, so there's some data ingestion or you can upload it anywhere. I mean, I suggest IPFS or filecoin and then you can do something with it. I'm not sure how does the response get verified. So back in that software lifecycle as well, if you had a look at the software lifecycle that I was talking about originally, the verification process is one of the last processes I can't find it typically. Let me see if I can find my slide on.
00:31:45.106 - 00:31:58.686, Speaker B: It actually. Might show you. A little bit more about it. Think I can. Yeah. There we go. So job verification happens in one of the job lifecycle processes.
00:31:58.686 - 00:32:33.250, Speaker B: So I would encourage you to dig into the Docs to get the exact technicals of how that is verified though is probably the best way you need it. Dockerized or on WASM to run the job, but the data wouldn't have to be constant, but it would need to be stored somewhere accessible that your docker container or WASM image could find. Hopefully that helps. Awesome.
00:32:33.400 - 00:32:44.900, Speaker A: Anyone else have questions? Feel free to raise your hand too if you have any. Or there is the filecoin discord chat so you can always drop your questions in there too.
00:32:48.670 - 00:32:50.038, Speaker B: I think we've lost.
00:32:50.214 - 00:33:01.386, Speaker A: Super, super awesome. This was recorded so everyone will be able to watch it later. And yeah, thank you everyone, so much.
00:33:01.568 - 00:33:04.390, Speaker B: Amazing. Happy hacking. Thanks, Craig.
