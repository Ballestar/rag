00:00:07.610 - 00:00:17.040, Speaker A: Hello. Good afternoon to you guys. My name is Carlo, I'm with Cartesi and today I'm going to try to convince you to use our cool tags to do some interesting stuff.
00:00:17.040 - 00:00:45.110, Speaker A: The name of this is Billions of Reasons to use CartaSi and I hope it becomes clear during the presentation. So today we'll be covering basically this. A quick overview of what Cortesi is and then an intro into our tech, which is cortez its interfaces, a really simple application of how you can build Cortesi application, in this case in Python.
00:00:45.110 - 00:00:59.994, Speaker A: And then I'll go through a couple of things that are being built with Cortesi and are nice things to inspire others. So this is just a preview, I'll come back to this later. But this is a really simple program in Cartesi.
00:00:59.994 - 00:01:14.466, Speaker A: In this case, it's an Acro application. Whatever you froze it, it throws back at you. And if you check the code on the right side, which is the whole application code for the ones that are familiar with Python, this is just traditional Web Two Python code.
00:01:14.466 - 00:01:26.706, Speaker A: There's nothing in there screaming Web free. You don't have to learn anything new, you're just using requests, which is a well known HTP client. So it's really easy for anyone used Web Two to get started with Cortisol.
00:01:26.706 - 00:01:37.690, Speaker A: But as I said, I'll go back to this later. So let's get started. So what's the idea behind Cortisol? So, Cortez started in 2017.
00:01:37.690 - 00:01:50.094, Speaker A: Ethereum was blooming at that time and Ethereum is really nice. So we have all these decentralization properties, censorship, resistance. No one can tamper with anything because if they try to, it's really hard.
00:01:50.094 - 00:02:16.838, Speaker A: You have to lie with thousands of nodes in order to get you right and it's awesome, but it comes with its disadvantages as well. So on Ethereum, everything is low, is expensive and it's cumbersome. Why slow? Because, well, you're sharing a single VM, all the resources with all the applications that are running on it expensive because you're always bidding for the resources that are scarce available in there.
00:02:16.838 - 00:02:38.240, Speaker A: So you have to purchase that resources and overbid others trying to use it. And cumbersome, because Ethereum was designed around EVM, which is really good for sandboxing, make sure that no one's messing with someone else's computation, but it's not similar to anything that came before. So all the tooling has to be built from the ground up.
00:02:38.240 - 00:03:03.062, Speaker A: So what's the idea behind Cartesi? What if we could have much more complex computations, still having these really cool guarantees that Blockchain gives us, but with great selling, and that's what we achieve. So what's our solution? So we have this really cool application specific roll up solution. We basically do this roll up for each application.
00:03:03.062 - 00:03:07.042, Speaker A: That the plasma. Cortesi. Each one of them has their own VM.
00:03:07.042 - 00:03:26.378, Speaker A: And this VM is based on this Risk Five architecture, which is an open hardware processor. And since everyone's got their own processor, the applications are not competing for resources and it's based on this traditional computation platform. Well, we can boot Linux and by booting Linux we bring all the web Two goodies for Web three development.
00:03:26.378 - 00:03:44.050, Speaker A: You don't have to learn Solidity to have all this really steep curve for doing your decentralized application. You can just use what you used to or want to. And in order to make it easier for people to onboard, we wrapped all the complexity of the framework on an Http interface.
00:03:44.050 - 00:04:04.682, Speaker A: So how do we achieve this? This is achieved by using a very cool dispute resolution protocol that secures this computation. It's based on something called verification game. I'm not going to get really down on the details of how it works, anyone interested on that can talk later to me.
00:04:04.682 - 00:04:16.774, Speaker A: But basically what happens is that all these competitions they happen in the Cortez machine. The cortez machine is deterministic. So if someone disagrees about the competition they engage on this verification game protocol we set.
00:04:16.774 - 00:04:37.750, Speaker A: What's the first point of the computation you don't agree? And that single instruction is arbitrated by the underlying chain on a copy of the Cartes machine implemented in Solidity. So when you have a dispute it's the entire blockchain you're using underlying that's actually arbitrating if you're right or wrong. So it's very safe.
00:04:37.750 - 00:04:55.242, Speaker A: Our security guarantee is that a single party willing to enforce the correct result is enough to guarantee it. Okay, just being a bit graphical here. So Ethereum Tooling is really scarce because as I said, EVM is not compatible with anything that came before.
00:04:55.242 - 00:05:16.946, Speaker A: So everything is being built from rod up and when you come to Cortesi, well, you have everything you're used to on Web two. So you can use all the libraries, all the services, all the languages that you're used to. This is just a quick overview of how you can make your Cartesi machine drive in which contains your application, everything you're going to use.
00:05:16.946 - 00:05:45.578, Speaker A: So when you're building your Cortez machine you can take advantage of a docker container which uses camo to emulate risk Five and all the Linux distros that are already built for it and you just use whatever you want to install your environment. So in this case here, I'm just starting from this risk five build of Z link jammy for Python, which is Ubuntu distro, you can use whatever you want. Alpine is your cup of tea, go for it.
00:05:45.578 - 00:05:51.418, Speaker A: You want to use Vanilla Linux, go for it as well. Whatever you want. You can start in there.
00:05:51.418 - 00:06:23.430, Speaker A: Since I'm Ubuntu and I want to use a SQLite database, well I just apt install it and it's available inside the machine for my usage. Then I just copy that directory in there to this optic Ortiz adapt because on my directory I will have the actual Python files for this application which actually has my logic and I can just pip install the dependencies like I would do on any Linux machine. So for a web to developer, this is all very simple if you're used to docker.
00:06:23.430 - 00:06:37.978, Speaker A: Now let's talk a bit about the computational scalability. So if you take a look at VFR scanner or whatever your source, you can take a look that Ethereum blocks. They generally have like 30 million gas on all the transactions within it.
00:06:37.978 - 00:06:59.778, Speaker A: So considering you have the entire block just for yourself and you're doing the cheapest possible useful computation. So if you take a look at Ethereum codes, the cheapest one is adding and that costs free gas. So that gives you a boundary of about 10 million instructions for the most you can do on an Ethereum block, considering you have the entire block for yourself, which is something really hard to get.
00:06:59.778 - 00:07:29.530, Speaker A: Okay, just as a comparison, this is hard to read, I guess, but in here I have a terminal, and in this terminal I'm just booting the Cartesian machine and holding it, doing nothing, just booting Linux and just shutting down. And this is using alone about 37 million risk, five CPU cycles, which are much more complex than just adding. So if you do equivalent operations on the EVM, it's not going to cost three gas, it's going to cost way more.
00:07:29.530 - 00:07:45.620, Speaker A: But that's just to give you an idea of the scale of the competition. You can do and booting Linux and shutting down, which takes about 37 million risk, five secure instructions, happens in a laptop in 0.2 seconds, so it's pretty fast.
00:07:45.620 - 00:08:14.934, Speaker A: Now, just another comparison, I've done some dumb computation here using a shell script and that took 3.7 billion CPU instructions, okay? And on a regular laptop, that took about 13 seconds, which is the average block time of Ethereum. So just to have a perspective of how that is compared to those 30 million instructions you can have in a Fury block, it's this grid.
00:08:14.934 - 00:08:26.106, Speaker A: So the left top corner is a yellow square and that would be 30 million instructions. And then 3.7 billion instructions will be all this blue grid.
00:08:26.106 - 00:08:38.178, Speaker A: And that's not the limit of Cartez machine computation, I just limit it to 13 seconds. But you can actually have as large computations as you want. Remembering that this machine is just for application.
00:08:38.178 - 00:08:48.118, Speaker A: It's not shared among everyone, just like in Ethereum. So let's get started on Cartesi rollups. This is the overview of a Cartesi rollups application.
00:08:48.118 - 00:09:05.494, Speaker A: So on the client side, traditionally you're going to do a web application. So you probably be using HTML, CSS, JavaScript, some framework you used to like angular react, view, JS or whatever your capacity is. And then you need a couple of libraries to connect to the Carteza framework.
00:09:05.494 - 00:09:16.218, Speaker A: The Carteza framework has three interfaces you're going to use. The first one is a JSON RPC one. And why is that? Because our framework is deployed on top of an EVM blockchain.
00:09:16.218 - 00:09:40.946, Speaker A: And in order to provide inputs to the Cartes machine, there's a data availability problem so we enforce this to go through the blockchain for a special smart contract called Framework. And well, to talk to Ethereum or any other blockchain, you generally do this using Gzrpc interface into an Ethereum or polygon or Gnosis or whatever you're doing node. Then we have an Http request API that's used for something like Ethereum calls.
00:09:40.946 - 00:10:03.642, Speaker A: So it's Ethereal calls you do to check some machine state that doesn't really do anything. It's a read only operation, right? And finally we have a further interface which is a graphical one in which you can create the Cartes node for events and things that you emitted on your logic. Now, your decentralized logic actually resides inside the Cartes machine.
00:10:03.642 - 00:10:21.358, Speaker A: And in order to make it easy for you to program, we have this HTP dispatcher component that wraps up the entire framework complexity on this simple HTP interface. What does it look like? Well, let's go back to that first slide now. Let's go in details.
00:10:21.358 - 00:10:34.226, Speaker A: So if you take a look at this code, we just start like our traditional Python program. We're importing requests, which is our HTP library. We're importing the environment module from OS because we want to read the environment variable.
00:10:34.226 - 00:10:50.538, Speaker A: In this case, it's being used on line four because we're looking at this roll up Httpserver URL, which is an environment variable. We set with the address of this Http dispatcher. Okay, well, once we know it, we ask for it.
00:10:50.538 - 00:11:11.986, Speaker A: What do we have to process? So the basic structure of a Cartesi program is an iterator in which you call this finish endpoint. And when you call it, you're doing two things. The first thing is you're putting a payload saying what happened with the previous thing you process is it okay? Is it invalid? If it's okay, you return a status accept saying it's fine.
00:11:11.986 - 00:11:22.498, Speaker A: The Cartes machine should events state it's fine. If saying valid. If it's something that will corrupt your application or anything like that, you can just reject it by returning a payload with status reject.
00:11:22.498 - 00:11:39.770, Speaker A: Once that happens, the Cartes machine holds and it's waiting for the next input. The next input comes, this call returns and you get a response with the data of the next thing you should process. The payload itself is in a field called Data and then you have some useful metadata.
00:11:39.770 - 00:11:54.400, Speaker A: One of them is message address, which is the sender address. You have the timestamp of the block in which you received it and a couple of interesting things on line 26. Specifically, we're looking for this request type.
00:11:54.400 - 00:12:16.902, Speaker A: These are pretty simple usage. It's just a metadata that can come with advanced state or inspect state or lines 19 and 20. And that's for you to differentiate when you have an input that came through the blockchain that should advance your application state or if that's if call if female call in which you just want to generate some state of the application, maybe for a front end to consume or something like this.
00:12:16.902 - 00:12:26.266, Speaker A: So, just an example, let's say you have a chess application. You move a piece that changes your application state that's going to come on an advanced state. Now you just open your application.
00:12:26.266 - 00:12:42.142, Speaker A: You want to know if a game is going on or something like that. Traditionally you would have to go through the blockchain, check all the transactions that you have to rebuild the application state, or use something like GraphQL to index the state and query it with Cartez. You can use this Inspect state.
00:12:42.142 - 00:12:57.266, Speaker A: You just provide your address and it's going to return JSON maybe with your chess configuration. Chessboard configuration and the player server, right? So this is the difference. In this really simple example, we handle either advanced and inspect states the same way.
00:12:57.266 - 00:13:19.690, Speaker A: We just pick up the payload of the input, we put it on a JSON and we meet an event with it in case it's a HANO advance. We use our interface called Notice which is equivalent to an inferior event. And in case of Hano Inspect, we use the report which is the wrapper for responses for this Ephemeral call which is the Inspect API.
00:13:19.690 - 00:13:34.014, Speaker A: Now on the left side, we're using a really simple front end application. We built in TypeScript that implements those three interfaces of the other slide. So if you call this command yar, Start, Input, send payload, whatever you put in there.
00:13:34.014 - 00:14:08.042, Speaker A: And in this case, hello there, it's the binary payload that's going to go on this add input framework and it's going to be piped into the Cartes machine so that hello there, it's arriving here. And after we process this response in line eight, that JSON with a Notice, it's going to post it with exactly that payload. So now if you call this front end application with Yarn Start Notice list, it will go to that GraphQL interface of the node and it's going to say, hey, give me the notices and you have a nice noses in there with the hello there.
00:14:08.042 - 00:14:19.070, Speaker A: Because this echo application just pipes the input back to the output. So this is a really simple crash course on how to use Cartesi. It's a 27 line Python code.
00:14:19.070 - 00:14:28.242, Speaker A: You can make it even less if you want. And it's just using HTP interfaces, nothing fancy, nothing different. Cool.
00:14:28.242 - 00:14:56.314, Speaker A: Now that you have a crash course on how to make a cortez application and the interface and stuff, let's take a look at some usages and some nice things people are doing with it. So generally people use Cortesi either to further decentralize DAP logic because most DApps you do when you go to high computation or something complex, you generally put a part of the DAP in smart contracts and then you put some whistles of logic centralized. That works for game, for DAOs, for a lot of stuff.
00:14:56.314 - 00:15:13.246, Speaker A: So with practice, since you have a Linux machine with great tooling and a lot of computational power. You can actually decentralize this logic, express more complex logic because you got all the tooling, all the libraries. So you can have really complex mathematical functions that you just import and use.
00:15:13.246 - 00:15:37.794, Speaker A: You can use NumPy, you can use data analytics, you can use machine learning, all the stuff that's already been developed, leverage in traditional stacks. And it's also way easier to onboard web two developers into web three because after all, they're using the tooling they're used to. So, a first cool use case I want to show is this game is developed by a Taiwanese studio called Aphros, and the game name is Dazzle.
00:15:37.794 - 00:15:58.330, Speaker A: It's basically a Pokemon and crush mashup. So you have your team, you attack the other one. Whenever you want to attack the other player, you do a combo on this shared puzzle and then there's no problem about anyone needing to trust the server, about anyone tempering with the random numbers that's going to fuel the puzzle.
00:15:58.330 - 00:16:09.090, Speaker A: So you're in a competitive match, you know, that no one tempered with your board to get a better combo next turn, anything like that. The client itself is done in unity. It's pretty beautiful.
00:16:09.090 - 00:16:18.174, Speaker A: It's got some pretty nice effects. 3d characters that they use as NFCs. And the game logic, they built in rust and it runs inside the cartridge machine.
00:16:18.174 - 00:16:24.118, Speaker A: So each match you can just run your own node check. It checks out. Nothing was tempered with.
00:16:24.118 - 00:16:40.154, Speaker A: If someone tries to tamper with it, you can just prove they're wrong and enforce the correct result. This is a nice DeFi application that was done inspired by the Mango hack on Salana. So there's this DeFi protocol lending in Solana that's really simple.
00:16:40.154 - 00:16:51.226, Speaker A: And it was hacked by a guy that checked that they accepted a certain asset as collateral. And this asset had really poor liquidity. So this guy got something like $5 million purchases.
00:16:51.226 - 00:17:07.670, Speaker A: The asset pumped, the price goes to Mango, says, hey, I want 100 million USDT or another stablecoin gets it because it just goes to a price oracle checks out, but then if they try to liquidate it, it won't hold. It's not worth 100 million. It's worth those 5 million is paid.
00:17:07.670 - 00:17:31.722, Speaker A: So, inspired by this, these guys, they made this really nice risk analysis protocol called Nerfless and well, they feed the Cortez machine with prices and volumes of assets and then they use NumPy to do some sophisticated analysis and come up with some robust metrics about liquidity and volatility. And then they give recommendations like, yeah, this asset is not good. You cannot liquidate over ten K on it, it's going to going to hold.
00:17:31.722 - 00:17:42.234, Speaker A: Or no, this is a great asset with liquidity low volatility. You can liquidate a million bucks and no issues here. This one is more machine learning and image processing.
00:17:42.234 - 00:18:01.320, Speaker A: So these guys has this problem of people tempering with fingerprints in many places in the world. It's used either for access for clocking in and clocking out of work, this kind of stuff, and people mess with it. So they make fake silicone fingers to go in and go out, or to get an access or photocopy and this kind of stuff.
00:18:01.320 - 00:18:23.898, Speaker A: What this guy did is he made this Dapping cartesi, which is specialized on defining if a fingerprint was poofed or not. How does it work? He gets inputs as a fingerprint image, then has a first C plus plus program using OpenCV. It processes this image and describes an array of features that is fed into a Python program with a really cool machine learning model he trained.
00:18:23.898 - 00:18:38.438, Speaker A: And this model was trained to differentiate a real fingerprint from somebody spoofed from silicon or paper or anything like that. This one is more on games, AI. This is from a guy that came from Raw Community, and it's called Ultrachas.
00:18:38.438 - 00:18:46.834, Speaker A: So chess has this plague that people don't really play chess online. They open up a game, but you're not playing versus a human. They just open a computer game.
00:18:46.834 - 00:18:54.694, Speaker A: Whatever you throw at them, they throw the computer. Whatever clever move the computer does, they throw back at you. So this guy said, okay, so let's make it part of the game.
00:18:54.694 - 00:19:10.554, Speaker A: You can play as a human, sure. But the main focus on Ultra chess is actually you're a trainer of the bot that's going to play. So you do your AI, you train it, you change its parameters, you put it in there, and then inside the cortez machine, automated matches happen and you're king of the hill.
00:19:10.554 - 00:19:24.266, Speaker A: You turn your bot, you defeat someone that previously defeated you. So it becomes a bot automated game, and the focus is on you training and improving your bot. Since it's happening inside the cartel's machine.
00:19:24.266 - 00:19:32.980, Speaker A: If you win or you lose a match, it's not because someone tempered with the match. There's nothing to temper with. Anyone can reproduce all of the matches and check that everything's fine.
00:19:32.980 - 00:19:45.462, Speaker A: In this case, it built. It in Python and a web user interface. The bots themselves, they use a protocol that's established and they can be developed in any language you want.
00:19:45.462 - 00:20:01.130, Speaker A: So you can do a binary in C or Rust or you can do a Python script or JavaScript or whatever you want. This one is a really cool application that came from India. So Indians, they have a problem with car insurances.
00:20:01.130 - 00:20:12.830, Speaker A: Basically in there you have an accident, you activate your insurance and they deny you the payment. And why is that? They claim you're a bad driver. How do you dispute it? You go to justice.
00:20:12.830 - 00:20:28.578, Speaker A: The decision is behind closed doors and you cannot really dispute it. So what this guy is doing is a decentralized car insurance protocol. So most cars today, they have this old BDB two port in which you can export all the data from the car computer.
00:20:28.578 - 00:20:38.658, Speaker A: They feed it into the cartes machine. Then inside the cartes machine. They have this model that analyzes this data and come up to you with a risk metric saying you're a good driver, you're a bad driver, you're an average driver.
00:20:38.658 - 00:20:56.974, Speaker A: And based on that data, they deny you or approve your insurance and they make it cheaper or more expensive. So if your insurance is expensive or is denied or anything like that, you don't have to go behind a trip port for something. Well, you just check the data is in there, the model is in there.
00:20:56.974 - 00:21:02.320, Speaker A: Yeah, I'm a better driver. No, I'm a good driver. They make a false claim, you dispute it and you force a correct result.
00:21:02.320 - 00:21:20.466, Speaker A: This one was also built in Python. This is a really nice application that was done in a Harvard hackathon. So these guys, they got this retro style emulator called Ikimango that does games like Street Fighter.
00:21:20.466 - 00:21:34.130, Speaker A: They put it inside a cortez machine, they make a Python program wrapping it. And they created all these crazy NFTs for Pikachu, Pokemon, Skunk, fu guy, pizza delivery guy, you name it. And then this application called Coliseum.
00:21:34.130 - 00:21:38.938, Speaker A: You will have a batting phase. Everyone says, I think this guy's going to win. This guy's going to win.
00:21:38.938 - 00:21:54.286, Speaker A: They output their money, it ends. Then you have the automated match happening inside a cortez machine and then you have the result and you pay the winners. Once you have the result, they also render the whole match into old school style video.
00:21:54.286 - 00:21:59.858, Speaker A: So it's interesting. You bet. Then you watch the match like you're watching MMA or something like that.
00:21:59.858 - 00:22:12.840, Speaker A: And then you get your money in case you want, once again, nothing to tamper with. If someone tempers with a fight, you just enforce the correct result by disputing a competition. And this is a really cool guy.
00:22:12.840 - 00:22:35.710, Speaker A: These guys, they made this for a hackathon in Bogota. So NFTs have this problem in which NFT itself, it's not the assets you want, it's actually a certificate pointing to the asset. So there are a couple of cases in which you purchase this really expensive NFT and then the person changes that beautiful art for a blank canvas on the server or something like that.
00:22:35.710 - 00:22:51.870, Speaker A: So these guys, they actually wanted to generate an NFT collection with provable art. How did they do it? Well, they generated the art with Inkartized machine. And in this case they use a competition intensive algorithm that generates fractals called Mdlbrot.
00:22:51.870 - 00:23:03.222, Speaker A: They implemented it in rust. So if you have an NFT from their collection and someone tries to tamper with the art or anything, you just go to the carte's machine and say, hey, this is not the real art. The real art is this one.
00:23:03.222 - 00:23:14.106, Speaker A: This is a computation that generated. Anyone can just verify this is the right art. This is a more traditional application, but still it's an interesting use case.
00:23:14.106 - 00:23:30.350, Speaker A: So this is from a team of Poland, and what they did is they did a decentralized parking app. I'm not sure about your personal experience, but sometimes you get a fine for not paying your parking, but you were on time. All the stuff you have to go through the common justice to dispute it.
00:23:30.350 - 00:23:38.434, Speaker A: It's a hassle, especially if you're not from the place. Sometimes you don't know how to pay for the parking meter, all the stuff. So they make this really nice application.
00:23:38.434 - 00:23:57.110, Speaker A: The front end is web review and they use Rust and post SQLite on the back end. And they build this nice application which you have the parking zones, you have the fees, you can just go in there and fill up your meter. Anyone can go in there and check that you're still on your time and do your thing.
00:23:57.110 - 00:24:11.294, Speaker A: So it's a more traditional web show application made very easily inside the Cortez machine. All these and many others. We have things with carbon credits, we have other things really interesting use with machine learning.
00:24:11.294 - 00:24:23.760, Speaker A: So sentiment analysis, all this stuff, they're available on this showcase page. We have our games, we have some really nice projects in there. They're available in there.
00:24:23.760 - 00:24:38.582, Speaker A: And just to inspire you guys a bit more on what you can do on Cartesian. So we have this track with a total price of ten k. The first winner is going to get a nice price of seven k.
00:24:38.582 - 00:25:02.362, Speaker A: And then we also have share pool for the runner ups. So three teams share $1,000 each. Okay, so we had this tweeter of February of this guy asking, well, if Ethereum is really the word computer, can someone explain how no one has managed to get Dome working on it? And we had a very clever engineer in our Emulator team.
00:25:02.362 - 00:25:13.840, Speaker A: We said challenge accepted. So yeah, he put Dome on real time running inside the Cortez machine and yeah, it's really cool. So if you look at his suite, I can give you the link later.
00:25:13.840 - 00:25:29.682, Speaker A: There's a render of him playing and there's also a GitHub repo for the courageous to use because he hacked this refast. So it's not really easy to reproduce it, but it's in there. Okay, and that's all.
00:25:29.682 - 00:25:37.702, Speaker A: Thank you very much for attention. I hope you learned something maybe. And whatever doubt you have, you can shoot at me.
00:25:37.702 - 00:25:52.560, Speaker A: We're going to be on our stand during the whole hackathon. So if you want to exchange an idea, if you have something you want to build, if you want to brainstorm, if you're trying to build with us and you have some problems, you need debugging or anything like that, we're there available for you. Thank you guys.
00:25:52.560 - 00:26:14.178, Speaker A: So I think we have some time for questions if anyone wants to ask something. Sure. How works on randomness? Okay, so the question is how randomness work? And that's a great question.
00:26:14.178 - 00:26:55.018, Speaker A: So the way it works is when you generate a random number on a computer, it's not really random, it's persona random, right? And the source of entropy in the cartes machine is controlled otherwise it's not deterministic so when you generate a random number in a cartes machine it's always going to be the same because other people will produce it and it's the same. That doesn't mean you cannot have random numbers within it how do you do it? There are multiple techniques and that depends on your application so let's get dazzle for example, which is a multiplayer game, right? You need to generate a random number to refuel the ward. The way you do it is you use a seat that's a joint number from both players.
00:26:55.018 - 00:27:06.180, Speaker A: In order for you to have both players contributing without one mining advantage. Random number. We use a scheme that's well known called committing review.
00:27:06.180 - 00:27:18.594, Speaker A: So, basically, one player commits to a number, maybe the hash of their number. The other player submits the actual number, and then the first player has to review the first number, and then it's a hash. So you hash the number he provided.
00:27:18.594 - 00:27:57.970, Speaker A: If it checks out, that's a number if it doesn't, he tries to tamper with it, everything's fine combine both, you have a seed for a random number that's a strategy. You can use our approaches it depends on your application. Let's say you have a SWAT machine application for instance you can use something that's hard to control like the block hash of the input that's coming requesting number you want to be maybe a little more safe you can use Oracle from chainlink you can use Ivrf yeah, there are many options.
00:27:57.970 - 00:28:41.230, Speaker A: Yeah, because you can always reset the seed on the Linux system so yeah, you just set the seed on the system and that's going to be used universal. Yeah cool. Anyone has got further questions? Okay, I guess that's Ethernet as I said, great hackathon for everyone if you need want to trade a word or something, we'll be on our booth and happy to talk to you guys have a great evening.
