00:00:06.970 - 00:00:26.022, Speaker A: This is a 20 minutes presentation. I want to make sure this is short and sweet and useful for everyone who's here. So by show of hands, I just love to know who here has written a Cairo program? Okay, so not very many people, but I'm extremely happy to see those who have.
00:00:26.022 - 00:00:47.386, Speaker A: And how many people here have made a transaction or used StarkNet layer two in the past? Okay, so still the minority in the room. Finally, how many of you know what an Ethereum scaling or layer two solution? Great. Great.
00:00:47.386 - 00:01:01.360, Speaker A: So we can skip past all of that. Just sort of begin by telling you a little bit about myself. I am the developer relations engineer for Startet Foundation in the US.
00:01:01.360 - 00:01:23.160, Speaker A: I am not very far apart from some of you in Asia, just graduated college last year with four years of research in DeFi and game theory. And if you want to connect with me or get to know anything about me, feel free to hit that link tree up. And bonus points for anyone who understands the joke and the name over there.
00:01:23.160 - 00:01:35.686, Speaker A: So I have a few talking points today we like to say on StarkNet. You comfort the ZK and you stay for the AA. So the guiding point for today's talk will be AA account abstraction.
00:01:35.686 - 00:01:52.950, Speaker A: But we'll be going over generally what we're up to at StarkNet. So feel free to let me know when these slides are sort of redundant or you already know what I'm talking about, so we can just sort of brush past them. Blockchain accounts, people familiar with the concept.
00:01:52.950 - 00:02:29.654, Speaker A: Generally, the blockchain account is basically composed of three things address keys and business logic, or some software that's deployed on chain and then some metadata. Now, the whole idea of account abstraction, for those of you who haven't heard this phrase before, is unlike ethereum, where these three things come bundled in a package, you're able to separate your addresses and keys from the business. Logic and data and actually write your own accounts as smart contracts and associate them with a certain address or a certain set of keys.
00:02:29.654 - 00:02:51.460, Speaker A: And that allows you to create heavily customized accounts. So I hope everyone's familiar with the idea so far. Sort of a quick slide I borrowed from the Ethereum Foundation's website that shows how your address maps to the data that I was talking about sometimes it's also called metadata or state data.
00:02:51.460 - 00:03:06.706, Speaker A: A lot of the code that you guys are going to be deploying as smart contracts are going to be mapped to your account address through the code hash. And let's talk about StarkNet. Since this was really the minority in the room, people weren't so familiar with StarkNet.
00:03:06.706 - 00:03:35.758, Speaker A: StarkNet is a layer two solution that uses Stark proofs, which are a form of validity proofs, to accelerate Ethereum. We do so by essentially executing, by validating and executing programmatic logic on a layer two blockchain. It's just a blockchain and then processing those transactions, bundling them into a hash and reporting them to Ethereum layer one for them to be included in Ethereum's blocks.
00:03:35.758 - 00:04:13.600, Speaker A: And we provide Ethereum with a mathematical proof that all of these transactions were validated correctly. So has anyone here ever heard about the blockchain trilemma? Right, scaling, decentralization and security, essentially, Ethereum as a layer one blockchain. A final settlement layer focuses on decentralization and security, and we pick it up when it comes to scaling and borrow Ethereum security guarantees in a mathematical sense in order to do so.
00:04:13.600 - 00:04:26.782, Speaker A: There are several constructions of validity proofs out there. There are different rollups that are operating on Starks, narcs, Blancs, et cetera. Though there seems to be now a narrative in favor of Starks.
00:04:26.782 - 00:04:55.820, Speaker A: Basically, Starks are a form of validity proofs which use lean cryptographic primitives, allowing the proof generation cycle to be extremely fast and for it to be theoretically post quantum secure. However, this does imply that the proof is a little bit bigger and clunkier and takes a longer time to verify. But at StarkNet, we have optimized the proving process to a point where that's a significantly reduced concern for us.
00:04:55.820 - 00:05:27.842, Speaker A: So, just as a visualization, you can think of all of these validators as Ethereum validators running the full Ethereum client, StarkNet processing a bunch of transactions, creating a proof that the validation was done correctly, and allowing all of these validators to be sure that this is actually done correctly without having to commit large computational or storage resources to that. So, so far, I hope you're all on the same page. I'll quickly go over Cairo.
00:05:27.842 - 00:05:46.230, Speaker A: I think only two or three people here have worked with Cairo in the past. So Cairo stands for CPU of arithmetic intermediate representation. If you're not familiar with that, you don't necessarily need to be ZK, and proof systems can sound a bit sort of technically intimidating.
00:05:46.230 - 00:06:27.542, Speaker A: I'm not a PhD myself, but I've learned that you don't really need to know those mathematical details to build some really cool programs. Has anyone here ever written a ZK proof or tried to do that in the so if you use any of sort of the more playground like libraries like Circum or Socrates or Remix, you'll notice that you have to express your programmatic logic as a circuit in order to write a proof. And that's quite a shift from the traditional paradigm of just writing a computer program that works on a von Neumann CPU architecture and uses a Ram memory model.
00:06:27.542 - 00:07:04.820, Speaker A: So at StarkNet, what we do is essentially we've created an intermediate layer, a VM, that allows you to write expressive smart contracts and software in general in a Rust like programming language. And then we constrain and arithmetize and basically turn your computer program into a provable program and generate the proof automatically by construction of the system so you don't have to think about building a circuit from scratch. So it's sort of an old computer programming experience translated quite seamlessly into ZK scaling land.
00:07:04.820 - 00:07:27.850, Speaker A: Very importantly, we have a Stark verifier that's implemented as a smart contract on Ethereum. So all of your Cairo code can be verified on Ethereum. So just want to quickly help you guys visualize the naive way of verifying each transaction.
00:07:27.850 - 00:07:54.980, Speaker A: Using, if you didn't have a proof system, would be that you have to rerun each transaction on each node in order to verify what's going on in the layer two that would be order of N, whereas with proof systems it's polylogarithmic. And as you can see, as the number of transactions in a block increases, the difference in time and resources is, well, stark to say the least. No one got that show.
00:07:54.980 - 00:08:06.054, Speaker A: So yeah, finally, let's get down to account abstraction. I do want to be clear. Account abstraction is not necessarily something that only StarkNet is working on.
00:08:06.054 - 00:08:24.266, Speaker A: It's already quite a big push to bring account abstraction to Ethereum. We've already spoken about what it implies. It implies separating the addresses and the signing keys from the programmatic logic of an account and allowing people to express their own accounts on Ethereum.
00:08:24.266 - 00:08:38.610, Speaker A: As many of you know, the block that you get of three things is called an externally owned account. It's different from a smart contract and it's supported at the EVM execution level. Now, there are some great things about having EOAS.
00:08:38.610 - 00:08:54.742, Speaker A: They've been around for a long time. So developer tooling around EOAS and integrations are very mature. You have products that have hit billions of dollars of market capital already, like hardware wallets and browser extensions that are quite good to use.
00:08:54.742 - 00:09:06.234, Speaker A: I use them myself. But there are some limitations as well. First of all, an EOA is not a smart contract, which means that you can't express programmatic logic on it.
00:09:06.234 - 00:09:37.910, Speaker A: So for instance, if you want to use something like a multi party signing scheme, you have to go through the third party like Gnosis, Safe, et cetera, et cetera. Whereas you could, if an EOA was just another contract, express that functionality in your own code. Some arguments also indicate that EOAS create a bad user experience because this is just sort of a tale and I'm not paid by braavos, but I'll be taking you through in just a couple of minutes.
00:09:37.910 - 00:10:04.122, Speaker A: The Bravos I see there's a story for Bravos, which is a commonly used smart contract wallet on StarkNet. Basically, Bravos, because it uses abstract accounts, was able to create a three factor authentication for their wallet user experience. So you can sign your transactions by simply clicking Button, which is the familiar UX.
00:10:04.122 - 00:10:30.898, Speaker A: You can also sign transactions with Face ID and you can perform social recovery very efficiently on keys. And there was a crypto influencer in our ecosystem who accidentally revealed their private keys on a twitch livestream some time back. And their Ethereum keys, which were exposed unfortunately led to their fans taking away most of their funds from their accounts.
00:10:30.898 - 00:10:56.078, Speaker A: But since the Bravos account was settled on two FA and they needed to sign with the facial identification, the only wallet that people were not able to exploit despite knowing the private key was the Braavos wallet. And then finally, one of the benefits of account abstraction, which is extremely cool to me, and I will run through this slide. Too many slides to run through.
00:10:56.078 - 00:11:34.090, Speaker A: But account abstraction allows you to essentially convert your phone doesn't matter if you have an Apple or an iPhone or a Google phone into a hardware wallet by simply implementing the Secure Execution Environments signature scheme in Cairo. So, yeah, that's sort of the TLDR that I could do in ten minutes about account abstraction. There are some other benefits, such as creating gasless or seamless user experiences for people using adapts, because you can create something like a Paymaster that pays gas fees as metatransactions.
00:11:34.090 - 00:12:00.034, Speaker A: AA on StarkNet supports multi call functionality and so on and so forth. The salient differences between AA on StarkNet and Ethereum is that on StarkNet, AA is supported at the protocol level because it was a concern that we addressed from day one. We have sophisticated developer tooling around AA, and I'll be sharing that with you in just a second.
00:12:00.034 - 00:12:12.966, Speaker A: So you can use that in your projects with the hackathon. And we essentially are able to also provide fee delegation for DApps just the way Ethereum does. So, yeah, this is what I was talking about.
00:12:12.966 - 00:12:37.118, Speaker A: You're able to use the secure enclave that's what the Secure Execution Environment on an Apple phone is called, and basically turn that into a hardware wallet purely because of the power of account abstraction. So I understand that I'm short on time. So there's a great, great talk about account abstraction that you can listen to, if time allows, at this QR code.
00:12:37.118 - 00:13:00.214, Speaker A: I highly recommend it. And yeah, now, how many of you have a Braavos wallet on your Chrome browsers? So I'll get to this in just a second. First of all, I want to give some direction to the builders over here who might be interested in building something using StarkNet over the next couple of days.
00:13:00.214 - 00:13:16.602, Speaker A: First of all, if you're interested, resources are quite concisely bundled in thenet book, which can also lead you to our docs. Everyone here is an experienced hacker. You're all meat eaters, so I'm not going to hammer this down too much.
00:13:16.602 - 00:13:38.734, Speaker A: If you want some extra help, though, medium blogs are a good place to look at. There are two directions that I'd like to encourage people to consider over the next two days. The first is zero knowledge or verifiable machine learning DApps, which can be implemented quite easily using the Giza Zkai tooling.
00:13:38.734 - 00:14:02.346, Speaker A: You're basically able to create machine learning models in familiar frameworks like Jupyter notebooks and Python, and then transpile those into Cairo bytecode and verify them on very, very efficiently. Actually, if you follow that QR code. You can take a look at how you can implement a neural network that can differentiate between different texts in less than ten minutes.
00:14:02.346 - 00:14:32.338, Speaker A: And then if you're interested in on chain gaming, the hottest narrative or one of the hottest narratives in the StarkNet ecosystem right now is the Dojo Gaming SDK. And some really cool games have been coming up using Dojo SDK over the past couple of months. Actually, if you think you can pull it off, I would even consider combining these ideas and creating games which use an artificial intelligence agent in a gaming experience, like chess game or something like that.
00:14:32.338 - 00:15:00.730, Speaker A: It's possible those QR codes will lead you to some sample projects that you can consider. So, yeah, as I understand, we have four minutes left, and so I will not get into the coding right now, but if you quickly scan this QR code, it will lead you to well, I'm already at Chrome. It will lead you to an article.
00:15:00.730 - 00:15:21.010, Speaker A: I would just recommend following this article. It will take you no more than ten or 15 minutes, and it will help you set up your local developer environment for Cairo. Setting up local developer environment for Cairo is as simple as typing two lines in your command line interface.
00:15:21.010 - 00:15:38.394, Speaker A: All you need to do is set up a command line tool called Storkli and a package manager called Scarb. And that is it. And then you can follow this to essentially create so I created a wallet for the express purpose of this demo.
00:15:38.394 - 00:15:52.106, Speaker A: This is braavos. It's a pretty useful mobile wallet as well, but you can create a wallet with some testnet ETH in there. I recommend using stARkit gurley.
00:15:52.106 - 00:16:02.270, Speaker A: Gurley two. These are our two test networks. Just set this account up, you're able to seamlessly integrate it with your CLI.
00:16:02.270 - 00:16:25.766, Speaker A: You're able to define your own account as you want. If you want to use RPC calls, highly recommend using Alchemy. It's extremely easy to just create a new app and set mean, it doesn't matter if you do either one of those, but you can create your RPC node over here.
00:16:25.766 - 00:16:48.960, Speaker A: This is where you can download Braavos. And then finally, I want to make you familiar with a Block Explorer that I highly recommend called Stork Scan. Basically, yeah, I'm sure all of you know how Block Explorers work, but you can get some pretty decent insights just by playing around with this.
00:16:48.960 - 00:17:03.778, Speaker A: The instructions are quite clear over here. My team and I will be walking around. You can locate us by virtue of either starquare shirts or ID cards and just stop us, ask us questions.
00:17:03.778 - 00:17:17.554, Speaker A: More than happy to help you on your projects. As I said, highly, highly recommend taking a look at the Giza Zkai framework and Dojo Gaming SDK. So, yeah, I have 1 minute left.
00:17:17.554 - 00:17:39.840, Speaker A: If anyone wants to quickly ask a question, we can call it an afternoon. Yeah, so Warp is so before we had Cairo as we have it today. We had an older version, which was a little bit more like python.
00:17:39.840 - 00:17:47.984, Speaker A: Not quite, but a bit like it. And it was a little bit harder to use. And so we created a transpiler from Solidity to Cairo.
00:17:47.984 - 00:17:55.270, Speaker A: But now you're able to write Cairo programs in pretty much a rust identical framework. So warp is no longer required. Yeah.
00:17:55.270 - 00:18:06.510, Speaker A: Anything else? It's awesome. Okay, I believe we are right on time, then. I'll stop sharing, but thank you so much for hearing me out.
00:18:06.510 - 00:18:07.240, Speaker A: Bye.
