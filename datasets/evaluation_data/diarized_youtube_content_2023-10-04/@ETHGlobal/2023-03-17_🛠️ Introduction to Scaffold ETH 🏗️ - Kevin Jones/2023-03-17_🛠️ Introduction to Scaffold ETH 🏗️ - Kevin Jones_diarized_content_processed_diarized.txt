00:00:06.170 - 00:00:16.000, Speaker A: Hello everyone, and welcome to the introduction of Scaffold ETH workshop. Joining us today is Kevin Jones, who will be taking us through this session. And with that, I'll pass it over to Kevin to get the session started.
00:00:16.850 - 00:00:33.190, Speaker B: Thank you so much, Rory, I appreciate it. Thanks for joining, guys. Super awesome to see everyone here. I'm really excited. It's been about I think this time last year I was speaking at the Stanley Ethereum. And so it's really cool. It's really excited to be back.
00:00:33.190 - 00:01:12.814, Speaker B: My name is Kevin Jones. I am a developer advocate for Scaffold ETH. All about trying to help developers coming into Ethereum and specifically coming into the ETH global hackathon, how they can use Scaffold ETH as this kind of tool and this catalyst to really kind of kickstart your project and get you up and running really quickly. So without further ado, let's go ahead and just start share your screen. Let's just go ahead and dive into it. So first of all, I wanted to just kind of talk a little bit about how you can find Scaffold Beats. So if you're at home and you want to search for it, you can just do a simple Google search and you're basically going to be able to just click the first plank and that's going to give you the GitHub repository.
00:01:12.814 - 00:01:43.290, Speaker B: So to get started, just search for this. You can clone the repository. So you do need a couple things installed on your system. You need node JS installed. Obviously you need to clone the repel, so you're going to need git and it's going to basically install everything for you. And this kind of like, quick README is going to get you up and running. But I'm going to go through it with you guys today and we're going to kind of tinker around and show how Scaffold ETH is going to kind of just help you kickstart your Ethereum project or your hackathon project.
00:01:43.290 - 00:02:24.710, Speaker B: So one of the things I want to talk about too is also after you're all done with the hackathon project and you guys want to learn more, check out Speedruniththerium.com Quick Show on this. This is a kind of a step by step validation of your skills where you can go through some challenges. You can build an NFT, you build a Staking app, build a token vendor, and then eventually you actually get invited what's called the Build Guild, and I just want to briefly touch on it. But the Build Guild is a group of developers like myself who are trying to help the Ethereum ecosystem specifically that kind of using Scaffold as kind of like public good to help build your applications, your decentralized applications, and eventually you can actually become part of the Build Guild. So check that out. That's a good path.
00:02:24.710 - 00:02:50.926, Speaker B: So I've gone ahead and I've actually already checked out the repository, so I'm using Tlux. If you guys aren't familiar with Tlux, it's basically a terminal fed plexer allows you to have lots of windows up. You always need like kind of three windows up to get started with Scaffold. So I like to use it just makes things a little bit cleaner. As I was saying before, I've already gone ahead and checked out the repository. I've also gone ahead and did the yarn install. So if you do Yarn or yarn Install, it's going to install all the dependencies.
00:02:50.926 - 00:03:26.270, Speaker B: So you'll check out the repository, do yarn install, yarn install is going to install all the dependencies for you. And then you can get up and running with a blockchain using yarn chain that's going to actually spin up a copy of Hardat running locally on your machine. You're up and running, ready to go. And it's also going to come with these 19 or actually 20 accounts that have some plate ether in there that you can kind of start toying around and kind of test your assumptions as you start to build your application all locally. Then you're going to open up a new window. So again, you can do this new window. I'm just going to tab over this one and I'm going to do a Yarn start.
00:03:26.270 - 00:03:50.286, Speaker B: Okay, so Yarn start is going to do exactly that. It's going to spin up a copy of React. So it's equivalent to doing the React start of the web application. Takes a second for that to start. So we'll go ahead and let that sit. We can see after it started successfully. We can also see that we have some contract calls that are being made that are being outputted to Hard Hat as well then in this last window.
00:03:50.286 - 00:04:12.558, Speaker B: So you're always going to kind of keep those two windows up your back end, which is Hard Hat. You got your front end which is React. And then here is where you do your deploy. So the last step is we just do a deploy. We do a yarn deploy. It's going to take a contract that comes to Scaffold E and it's going to automatically deploy it to Hard Hat for you. And it's going to show you here that it was successful, going to show you what the address swap, it's going to show you how much gas was used.
00:04:12.558 - 00:04:44.470, Speaker B: And if you wanted to get a new version, you could just do yarn deploy, chefs reset, and that would force a deploy and it would give you a whole new contract. Okay, so we can see that everything's kind of working. We can go through and do these deploy as many as we want and we're going to keep getting instances of our contract. And then we can also check out the UI while we're here. So scaffolding again it runs in react. It runs on localhost port 3000. So you can see here that we're up and running and we have this kind of like UI which allows us to kind of start tinkering with the smart contract.
00:04:44.470 - 00:05:17.562, Speaker B: The first thing I want to show you is there's some tabs here with a lot of different stuff going on. This first tab is kind of just like a place where you would build your application. So if you're building your project, you're going to go into the Packages React app folder, source folder, views, and then homejsx. And that's where you can start building your DAP right inside of Scaffold. You can kind of think of it as just this DAP within a DAP and it's just going to build out inside there. So that just shows you how you can kind of get started. But really what's awesome about Scaffold is it has this debug Contracts folder.
00:05:17.562 - 00:05:50.518, Speaker B: So we can see here that we've already got a contract that's been deployed and we can see that it has an address. We can see that it has a variable called purpose with a value of building unstoppable apps. And then we can also see we have that we have a function that allows us to update that. So let's take a look at what that smart contract looks like. So I'm going to load up Vs code. And if you're using Vs code, you can simply just go to the Packages folder here on the left and then you can go to either Hard Hat or you can go to React app. If you want to toy with the backend.
00:05:50.518 - 00:06:11.346, Speaker B: We're going to start out with Hard hat. Then we're going to go into the Contracts folder and we're going to go into your contract. So like I said, it comes with a contract which has been deployed and it's very simple. It's just a string. So we could change that string here if we want. We could say building awesome apps or something like that, right? We could save that. We could come over here and we could redeploy again.
00:06:11.346 - 00:06:36.582, Speaker B: Okay. And then after we do that deploy, there we go. We get that kind of automatically updated in our front end. And so again, this is going to take that existing contract and then you can start kind of building off of that and then build your apps. We can see here that we have the function and then we have a constructor that's empty so we could do something there. So let's kind of start tinkering in a little bit. Let's create a new variable.
00:06:36.582 - 00:07:15.894, Speaker B: First of all, let's make it an address variable and we're going to make it a Payable address and we're going to make it sorry, address public. We'll do public payable. I think that's equals and then let's grab our address. So the next thing you'll know with Scaffold is you have this ability to basically get a copy of a private key that's automatically generated inside of your browser. It's called a burner wallet. So you could click here and click Connect and actually connect to MetaMask. But for the purpose of this, we don't really need to do that.
00:07:15.894 - 00:08:01.526, Speaker B: What we can do is we can just use the contract address that we have that's already here. So here we have essentially a burner wallet that's already there. And then you can kind of also see that there is a little bit of a blocky that's generated and we can see if it has a balance. We can also click the little wallet and we can send funds around in here. We can also take a look at the private key if we wanted to. Right, so there's a bunch of different things you can do and then on top of that, we can essentially use that variable. Okay, so what I want to do first is let's say that we want to hard code an address.
00:08:01.526 - 00:08:40.414, Speaker B: We could do that and we can hard code it in here like I was going to do. Another option that we can do is we can create an owner variable using the import command. So we can import ownable here, we can save that and then we can redeploy. And we also need to say your contract is ownable like this. So now let's go ahead and deploy and deploy that. Okay, so now let's take a look at our UI. So what's happened? Well, we automatically got a owner variable that showed up.
00:08:40.414 - 00:09:12.642, Speaker B: Okay, more specifically, what's interesting about this is you're inheriting. So the idea of inheriting another smart contract is here we can inherit that contract and then we can use that inherited contract as an inherited set of values. So we get all of the functions and all of the variables, all of the modifiers that are essentially available in there. So now we automatically have access to a owner variable, which I was going to hard code. But the better way to do it is actually use ownable. Now this is a hard hat address. So again, Scaffolding few uses hard hat.
00:09:12.642 - 00:09:50.018, Speaker B: So the next thing we want to understand is how does Scaffold deploy the actual code? Or using hard hat, how does it deploy the code? So let's go into our hard hat folder again. And right below you'll see that there's a deploy folder. Okay? So we can go to the deploy folder and then we can come here and we can take a look at what's going on with the deploy. So here we can see that we get a full list of the named accounts. And so in this case we have the deployer and we get the very first address and then we use that to deploy our smart contract. And then here we use that deployer. And then we can also do things like if we wanted to, we could pass some arguments to the constructor here.
00:09:50.018 - 00:10:22.366, Speaker B: Like if we wanted to name our token or if we wanted to pass in some kind of value like this, we could do that. We're not going to do that right now, but that's good to know that you could edit your deploy script here. But what's more importantly is, because we inherited Ownable, you'll notice that we got some new variables that showed up here, and we also got some functions that showed up here. And one of those is called transfer ownership. So that's part of ownable. Ownable is essentially a way for you to manage ownership access control of your smart contract. And so now we have access that here.
00:10:22.366 - 00:11:00.262, Speaker B: So what we can do is we can call that transfer ownership inside of our deploy script. And so if we come down right here, we'll actually see that we have kind of a grayed out version, so we can just copy that and we can instead paste our address that we get here. Okay. And so again, this is a burner wallet and it's inside of the browser. So the private key is stored inside the browser and we have the public address, so we can transfer using that existing function and we can pass in that burner wallet that we have, so we can save that and then we can go ahead and redeploy. Okay, so let's take a look at the front end now. Now we can see that the owner is going to get updated.
00:11:00.262 - 00:11:25.700, Speaker B: Let's go ahead and refresh. Did I pass it properly? Let's see. Make sure I did it properly. See what I did wrong? Your contract is not defined. That's interesting. Is it spelled differently? Your contract, transfer ownership. That should work.
00:11:25.700 - 00:11:35.860, Speaker B: Looks like this kind of bug with the name of the contract. Oh, your contract. Yeah, that should be right.
00:11:37.750 - 00:11:40.420, Speaker A: There was a comment that says uncomment the line.
00:11:43.310 - 00:11:44.540, Speaker B: Let's see here.
00:11:49.630 - 00:11:51.530, Speaker A: About the transfer ownership.
00:11:53.310 - 00:12:03.374, Speaker B: About transfer ownership. No, this is part of the thing. I don't think it needs to be uncommented, actually. Oh, I see. We're not actually getting your copy. Yeah, you're right. Thank you.
00:12:03.374 - 00:12:28.702, Speaker B: They changed this. Thanks, Philip. Yeah, appreciate that. So here we actually get a copy of the contract. I thought we're doing that already. So I think we need to do it like that. But that's if you just want to get access to a specific contract.
00:12:28.702 - 00:12:41.340, Speaker B: Oh, here it is. I see. I stewards, so they changed this. Sorry, guys, this is throwing me for a loop. Yeah, so I need to actually grab it here. There we go. Let's try that.
00:12:41.340 - 00:12:55.234, Speaker B: There we go. Thank you, guys. All right. They changed the deploy script recently, so that's why I didn't notice it. Okay, so now we can see that we've moved ahead. So this is good. We did some real troubleshooting.
00:12:55.234 - 00:13:41.370, Speaker B: And what we had to do is let me just show you what we had to do. So we actually had to get a copy of the instance of the contract before this was automatically put for us, because during the deploy, we would automatically get it. But since we didn't do that, we're creating a variable here and then we're using ethers get contract. We're using your contract as the name and then we're using Deployer which is actually up here which is the named account, right? And then here we're actually calling that transfer ownership function. Okay, so we got that. This is interesting. So now what we can do is we can start thinking about, okay, well let's say we want to actually make changes to our smart contract where instead of someone who wants to call a specific function, maybe we want to require that they pay some value.
00:13:41.370 - 00:14:23.014, Speaker B: So I'm going to show you here how we might do something like that. So first let's go ahead and create a UN and we're going to make it publicly available. We're going to call it price and we're going to make it zero, zero, one ether like this. Actually we're going to go one ether and then we're going to do a require statement. So we're going to say, all right, so make sure that the message value that's being sent equal, equal, equal, equal to price. Otherwise send no money like that and then we're going to close that off. Okay? So now what we can do is we can redeploy.
00:14:23.014 - 00:14:58.482, Speaker B: And again so what we're doing here is we're just basically creating a variable that is a certain value. So we're defining it ether. And then we're also requiring that anyone who calls this set purpose instead of just calling it, they also have to send in some value. Now it is already payable. You want to make sure that your function is payable, which it already is. And so now what we can do is we can come over here and try to set the purpose to something new using the function so we can say like scale ethereum like this and hit send. And if we don't it's going to send more money, right? We need to send some value in the contract so we don't have any funds.
00:14:58.482 - 00:15:26.826, Speaker B: So how do we get funds? Well, we can just click this little button right here and that's going to give us 0.1 ether from the burner wallets that come with hard hat or I should say the deployer accounts and it's going to put it into our burner wallet. We could get more as well. So we could click the address here. We could come down here, click the address for this kind of like dispenser and we could get, I don't know, let's say we want $100 worth of ether and then that will transfer from hard hat as well. And now we have 0.6 ETH which is $117.
00:15:26.826 - 00:15:55.978, Speaker B: And so now we have some ETH to play with. Let's go ahead and do that. So we're going to go 0.1 and then what you'll notice is you'd think you could just put that in and you can hit send, but that's not going to work because you need to actually convert that value into way. And so there's this awesome button right here that does that for you. It's going to multiply your value times ten to the 18th power which is how you convert from way to ETH. And so that's going to tell us exactly how much way that we need to send in that transaction and then we can click send.
00:15:55.978 - 00:16:41.526, Speaker B: There we go. Now it was successful so we're able to update the purpose because we are sending in a specific value and then we can also see that our contract starts to get some value. Okay, so we can actually start using the contract as a bank. And so the next thing you might want to do is like, okay, well let's create a withdraw function, right? Let's do that next. So let's say function, sorry, I cannot type today for some reason. Function withdraw and we will send, we don't need to send anything in that but we're going to make it publicly available and we'll get back to that in a second. But we're going to require this one to actually we're going to just do like this.
00:16:41.526 - 00:17:23.506, Speaker B: Let's do set a boolean called success. Otherwise we won't set a value and we're going to do a message sender call, which is how we can transfer value from the contract to the address that we're calling and we're going to pass in a value of the balance of this contract. So we're going to say address of this contract's balance like this and then we're going to close that off. Now we wouldn't want anyone to be able to access all the funds that's in the contract. So this is a good example of how you can use Ownable and you get access to also what's called modifiers. So ownable has modifiers for only owner. So we can say that only owner here.
00:17:23.506 - 00:17:57.166, Speaker B: And so this is going to require that anyone who calls this function is the owner of the actual smart contract. So we can hit save and then let's go ahead and redeploy again. Did I spell something? Rudy again? Probably. Oh, I need to make it payable. See that? I think, I think I'm spelling something wrong. Sorry. I think we need to put that this to the end.
00:17:57.166 - 00:18:26.066, Speaker B: Sorry. Try it again. There we go. Okay, so now we've successfully been able to deploy our contract. So now I want to talk a little bit about the burner wallets again. I'm going to open up a new tab here and I'm sorry, I'm going to open up a new incognito tab, sorry, file, new incognito window and I'm going to go to localhost 3000 so we can see now that we have a new instance of our burner wallet. Here we have this kind of like purple green blocky dude.
00:18:26.066 - 00:18:44.542, Speaker B: Here we have like a yellow and green blocky dude. So we can come over here and we can get some funds from the faucet. We can also grab some extra funds if we need to. So let's do that. So we have full control to access the Faucet. Let's get $10,000 to this guy, he's rich. And we can update the function.
00:18:44.542 - 00:19:29.750, Speaker B: So let's say set purpose to scale Ethereum like this and we can do 0.1 Ether, we can send that and we're able to update it because we are this kind of like new user of the DAP. But if I want to come down here and then use the withdrawal function and get this dollar 75 of ETH or this one ETH, and I want to hit that and I hit send, it's going to tell me that ownable caller is not the owner. So the ownerable is basically blocking access to that deployment or to that function. But if I come over here and because this owner will match, then I can actually withdraw the funds. So here we go and then there we go. I was able to take the dollar 75 and put it into my wallet.
00:19:29.750 - 00:20:39.890, Speaker B: So we've been able to utilize honorable to do that and get going. So one thing I will say as well is that if you've got a hackathon project that you're working on right now, there are a lot of builds in Scaffold e that have kind of good starting points for different things. So the one that I showed you guys is kind of like the basic kind of starting point and then you can kind of start building out if you want to like, I don't know, let's say you're going to work on an NFT project. So if you go to the Scaffold ETH repository and then you go to Scaffold e examples, there is a complete list of a bunch of different examples. So you could start typing NFT here and there's like a VRF NFT, there's an aging NFT, there's a chain link VRF NFT, there's a buyer Mint NFT which is quite interesting, which allows you to basically mint NFTs and the buyer has to pay the Minting fee. And so there are all these different kind of starting points that you can use and there's also like an 1155 version that allows you to do SVG examples. So there's all sorts of examples there.
00:20:39.890 - 00:21:45.160, Speaker B: There's also some examples in the Challenges folder and there's also some examples in the Scaffolding folder so you can kind of dig around. So if you have an idea in mind, make sure that you're using one of those kind of good starting points as your starting point so that you don't have to write a certain amount of code, right, it's going to kind of get you up and running. And then if you're kind of just messing around, I also recommend if you're new to building on Ethereum, check out Solidity by Example. Solidity by Example is going to have a bunch of examples and you could kind of do things very simply like creating if else statement or getting the gas price or converting or how to convert Ether in way and use different values inside your smart contract. Whatever it is you're messing with, you can come here and kind of see examples. And another reason that it's useful is a lot of the code is explained on YouTube as well. So if you're one of those people that's more of a visual learner, you can go there and you can kind of like, watch the video, grab the syntax, put it into Scaffold, and kind of toy around with it as a good starting point.
00:21:45.160 - 00:21:59.100, Speaker B: And yeah, so I hope that's valuable. I want to save some time for questions. So if anyone has questions about how scaffold works or if there's something I didn't cover, please let me know. I'm ready to help you guys out.
00:22:01.250 - 00:22:12.174, Speaker A: There was a question early on and what exactly is a Burner Wallet? Another participant commented, but I wonder if you wanted to maybe share your yeah, absolutely.
00:22:12.292 - 00:22:32.360, Speaker B: Yeah. So again, just to refresh on that. So if you wanted to use MetaMask so you could click Connect and you could use MetaMask, it's going to give you like, an error. Like in this case I've corially selected. So it's going to tell me I need to switch to Localhost, so I can do that. Actually, I might have to do it here. Let's do that.
00:22:32.360 - 00:23:05.422, Speaker B: Localhost. There we go. Okay, they changed the chain ID on me as well, so I need to go in there and edit my chain ID. But yeah, it's kind of a hassle to deal with MetaMask for a couple reasons. One main reason is the nonce issue. So there's this one issue with nonces where MetaMask will start building out the nonces and eventually your DAP and your MetaMask are kind of out of sync and you'll start getting nonce errors. And so that can be kind of annoying.
00:23:05.422 - 00:23:49.930, Speaker B: So that's why I recommend just using the Burner wallet. So disconnect MetaMask and just use these wallets, especially if you're on local host because it's really just easier for you to do your testing and you don't have to worry about loss of funds because it's all just kind of like hard hat money. When you get to a testnet and you start to deploy to Guerreli or some other testnet, you'll probably want to start using MetaMask, and then you won't have to worry about the non sysche because you won't have this issue where the deployments change and your MetaMask doesn't see that change. And there's this kind of out of sync problem. So for testnets, you can use MetaMask for local hosts, just use Burner Wallets. It's just a little bit easier. And again, the Burner Wallet is just all inside the wallet.
00:23:49.930 - 00:24:12.790, Speaker B: And so if you were to open up a new incognito window, you could have as many kind of identities as you wanted to because these sorry I lied to you. In this case we have the incognitos are kind of working as one instance here. So you can have multiple kind of instances of wallets, and it just helps you kind of test your assumptions.
00:24:14.490 - 00:24:25.740, Speaker A: Cheers. Thank you. Another question. My team wants to know if Scaffold is enough to work with multiple wallet solutions as Show, or should we install used app?
00:24:27.390 - 00:24:57.794, Speaker B: Yeah, I mean, you could use like you're talking about like, here, I assume you can use like, Wallet Connect. You can use I don't know why that kind of modal error that's having lots of errors today. It's been a while since I did this demo. I would probably say that's fine. You don't need to use any kind of other solution. You can just use everything that comes with Scaffold and it should be good. Of course, you could kind of add your own components.
00:24:57.794 - 00:25:06.600, Speaker B: Like if you wanted to use a different kind of identity provider or connector, you could, but you don't need to.
00:25:08.670 - 00:25:13.290, Speaker A: And does Scaffold work with MetaMask on Zkebm chains?
00:25:15.870 - 00:25:28.480, Speaker B: Yeah, I believe it does. Yeah. So it should work. As long as it's like, EVM compatible, it will work. I particularly haven't really tested it myself, but I'm pretty sure it works.
00:25:31.490 - 00:25:38.690, Speaker A: And Steve made a comment, there's one branch of Scaffold that I wanted to use which doesn't work. Chakra UI.
00:25:41.270 - 00:26:24.234, Speaker B: Yeah, I've never used the chakra UI one particularly. I would probably say you could utilize just the base version of Scaffold, and then because it's using React, you could just add in all of the Shocker UI stuff on your own. It's pretty easy if you just go to, like, Chakra. I've used Chakra UI before, I've never used the Chakra UI version of Scaffolds, but you probably can just import all that stuff manually using the Chakra UI. Kind of getting started. There's like different ways to do it, but you just put it in your React code, which I didn't really get to too much. But there is an entire folder here under React app, and then inside React app is the source folder, and you'll see there's an App JSX file.
00:26:24.234 - 00:26:48.520, Speaker B: And so this is kind of like the starting point. And I didn't really go too much into React. I was kind of just focusing on Solidity. But this has a lot of information here in the comments to get you started, like how you adjust your networks. But you could again add Shocker UI probably pretty easily here into the base application, and it should work without a problem.
00:26:50.810 - 00:26:53.954, Speaker A: And Wilman asked when scaffold ETH version.
00:26:54.002 - 00:27:27.410, Speaker B: Two yeah, yeah, I didn't really get to that too much either as well. But if you're doing a search for Scaffold E, or actually if you go to the GitHub repository, there's an Se Two branch. So if you do Se Two, it's currently in a working condition. It totally works. So it's Scaffoldive Se Two, and it's basically just a rewrite of Scaffoldive. Most importantly, it's using Next JS instead of React JS out of the box, it's using Rainbow Kit. It's.
00:27:27.410 - 00:28:00.400, Speaker B: Still using Hard Hat, but it's also using Wagme and it's using TypeScript. So if you are more familiar with Next JS or with TypeScript, this might be a good option for you to start. But just know that if you're using it for Archathon project, it might be a little buggy, there might be some issues. So it's not fully ready yet. Unfortunately, I don't know because I'm not particularly the one working on it. I don't know when it's going to be completely 100% ready to replace scalpel e, but it's definitely in a really good starting point. So if you want to toy around with it, I would recommend checking it out.
00:28:04.050 - 00:28:28.040, Speaker A: And that's all we have for questions right now, unless people, if you want to, we still have some time, so if you want to take yourself off mute and ask a question, feel free to do so, and if not, we can go.
00:28:34.010 - 00:29:02.370, Speaker C: Never mind. My question is like the gay stuff integration in terms of, let's say, I don't know if you guys work with Snacky JS or something that generates proofs and deploy contracts in that nature. I'm trying to see if Scuffle here has any Zoka trees stuff examples.
00:29:03.510 - 00:29:53.502, Speaker B: Yeah, so I particularly haven't messed with much with the ZK Sync builds, but there are a couple here that I just saw, like ZK Sync NFT, ZK Sync Starter Kit. I think mostly everything that we've done is around ZK Sync, so you might want to check those out. You also might want to look on YouTube and see if Austin Griffith, who's the creator of Scaffold ETH, or anyone else, has done some stuff with ZKS. With Scaffold ETH, I'm not familiar particularly, but that might be a good option as well. I was just going to check this branch real quick. Okay, so there's also some on the Scaffold ETH examples folder like ZK committable NFT game example, proof, membership, voting example. So there's some stuff out here, and usually this one is a voting example, right? And it has some additional documentation.
00:29:53.502 - 00:30:38.318, Speaker B: So you can go through and see whoever created this build hopefully has done their due diligence and created a decent README for you at least to look at and understand what's going on. But if not, and you have questions about it, you could look and see who committed the code. You could try to reach out to them. You'd also check scaffold ETH. If you have problems, you can go to the Scaffold Telegram channel and ask them there to see if anyone has examples of stuff they've done with Zkades on Scaffold ETH. That would be another good option. So if you want to get onto the Telegram, which is also something I would recommend everyone do, you can go to Scaffold ETH and you can go all the way to the bottom and there's a support chat right here.
00:30:38.318 - 00:30:50.020, Speaker B: You can click that and you can join the Telegram group. And if there's something I wasn't able to answer or someone wants to get more help during the hackathon. That's another good spot for you guys to go.
00:30:51.510 - 00:30:57.526, Speaker C: Yeah, thank you so much. This is so helpful because they have some stuff that I was actually working on.
00:30:57.708 - 00:30:58.598, Speaker B: Cool, awesome.
00:30:58.684 - 00:30:59.078, Speaker C: Thanks.
00:30:59.164 - 00:31:19.014, Speaker B: Yeah, well, thank you so much, guys. So again, go to Scaffold, check it out, check out the repository, get up and running, check out the sport chat. And yeah, after you're all done, don't forget to speedrun Ethereum.com to check out that as well. So I appreciate it, guys. Cheers.
00:31:19.062 - 00:31:27.830, Speaker A: Thank you. Well, thanks everybody for joining and thank you, Kevin, for the great presentation and yeah, cheers. Have a good rest of the day and happy hacking.
