00:00:06.170 - 00:00:12.090, Speaker A: Yeah. Thank you all again for taking the time to stop by this workshop. So I'll be covering.
00:00:12.090 - 00:00:21.070, Speaker A: So I'm jessica. I'm the developer advocate at Xerox Labs. So today we'll be talking about building token swaps with the Xerox API.
00:00:21.070 - 00:00:55.866, Speaker A: So to start off, what is token swapping in this world? If you've ever been to a dex aggregator, for example, Matcha here, if you're making a trade from wheat to dye, you might be wondering, how is it finding me the best price in the back? Some other use cases for this could be perhaps you have an index fund. So, for example, Future is one of our projects that integrate with us every month they rebalance. And so in order to find the best price, they use our API to do the rebalancing and finding the best trade in trade outs.
00:00:55.866 - 00:01:11.886, Speaker A: Other applications include wallets and portfolios. So this idea of know, it's kind of a little building block that can be plugged into a number of different applications. So at Xerox Labs, we cover several layers of the stack.
00:01:11.886 - 00:01:21.666, Speaker A: So starting at the very top, Matcha is our front end user application. Behind that is the API. And this is what powers a lot of the other projects that I was mentioning.
00:01:21.666 - 00:01:31.850, Speaker A: And then below that is the protocol. So this is a set of smart contracts, open source smart contracts that handle the trade settlement. And I'll dive a little bit into each of these layers.
00:01:31.850 - 00:01:54.370, Speaker A: So for the remainder of the talk, just kind of overviewing we looked at with Xerox, dive into how it works. And then I'll specifically talk about using the swap endpoint, which will be what we're sponsoring prizes for at this hackathon, and then sharing some resources that will be useful for this hackathon. So, overview of Xerox.
00:01:54.370 - 00:02:30.086, Speaker A: So, for those who are not familiar with our project, essentially the thesis is that all forms of value we believe will be tokenized. And we've seen this expanding more and more from derivatives to physical items, as in NFTs, expanding into many other forms of tokenized assets. And as this market continues to grow, there's a lot of fragmentation not only across different chains, but across just different use sorry, across different chains.
00:02:30.086 - 00:02:40.282, Speaker A: And also we're looking to bridging and different layers. And so this just means more and more fragmented liquidity across this whole ecosystem. And we all know that markets hate fragmentation.
00:02:40.282 - 00:03:12.890, Speaker A: So how do we make this simpler for applications that are trying to build the best applications for their users? So we think of this in the way that in web two, there was a standardized protocol, so Http that standardized the transmission of data. And in this way we think about web three, so we're standardizing the way that assets are transacted in this world. And so kind of the high level mission is to create a tokenized world where all assets can flow freely.
00:03:12.890 - 00:03:25.230, Speaker A: And so here's a bird's eye view of the Xerox ecosystem. So for those who come from a more financial space, you might have heard the terms makers. So market makers and takers.
00:03:25.230 - 00:03:47.086, Speaker A: So we look at it in two different parties that interface with our API, so on, I think you're right, are the makers. So these are parties that are providing liquidity into this ecosystem. So this can include automatic market makers such as Uniswap SushiSwap, as well as private market makers.
00:03:47.086 - 00:04:01.530, Speaker A: And then on the other side are those takers. So they ping the API and they find orders that match what they need. So this can be Wallets coinbase wallet uses US MetaMask wallet, rainbow wallet exchanges.
00:04:01.530 - 00:04:17.854, Speaker A: We also have capabilities for NFT swapping capabilities, but I'll primarily focus on ERC, 20 swapping capability for this talk. And we do this across right now, I think, eight different EVM compatible chains. So we make it super easy.
00:04:17.854 - 00:04:53.942, Speaker A: If you're looking to build on polygon, we have that support. So let's dive more into then how does zerox work? So we saw at those different layers, right, the protocol, which is the smart contracts, the API for those who want to build NFT swapping capabilities, we do offer an NFT swap SDK, but the focus of this hackathon is on the API and those applications above. So the API specifically, again, how it works is we're aggregating across these market makers.
00:04:53.942 - 00:05:20.238, Speaker A: So whether that's professional market makers who provide RFQ so requests for, quote, liquidity, as well as a number of other sources of liquidity, the API does various routing. So it might source maybe like the best trade is actually through a number of different hops or maybe through a number of different sources at the same time. We also factor in gas costs and this is all done behind the scenes.
00:05:20.238 - 00:05:37.906, Speaker A: And then these applications can easily leverage that without having to do that work on their own. So specifically when I'm talking about these orders, like what does an order look like? So here's a super simplified transaction happening. So we'll see the market maker.
00:05:37.906 - 00:05:47.478, Speaker A: So I'm going to let the GIF restart. So the market maker here creates an order. So here they're know I have this intent of either selling or buying this asset.
00:05:47.478 - 00:06:01.774, Speaker A: They create it, they sign it, and then they push it off chain. And then once it's off chain, our API can aggregate the liquidity from all these different market makers. And then when the taker finds one that they like, they pick it up and then they sign it.
00:06:01.774 - 00:06:21.510, Speaker A: And then once they sign it, they submit it on chain. And then once it's on chain, our smart contract autonomically swaps the assets between the two parties wallets. Okay, so let's dive into the API swap endpoint specifically.
00:06:21.510 - 00:06:43.818, Speaker A: So we've kind of seen this paradigm repeated throughout the presentation. So API is aggregating liquidity sources and our API just the taker only needs to make a really simple HTP request. And then from there, the API returns this breakdown of the sources.
00:06:43.818 - 00:07:07.670, Speaker A: So for example, say the trader wants to trade 1500 die for ETH. Perhaps the best price is 50% from balancer, 25% from zero X liquidity and 25% from Sushi Swap. So this is all just bundled together and from the taker side, they don't need to think about what's happening and then the response that the taker receives.
00:07:07.670 - 00:07:34.654, Speaker A: If you're using any web three library, you can easily submit that directly because it's just a JSON object that has all the params that are needed, say for web Three send transaction. So I kind of mentioned the API like very high level, but we have three endpoints that are of interest. I will talk specifically about the quote one here.
00:07:34.654 - 00:07:51.860, Speaker A: So quote, I guess I should have started off in the audience like who has done web development before? Okay, nice. So good portion of the folks in the audience. So this request probably looks very familiar to you.
00:07:51.860 - 00:08:01.874, Speaker A: So what it is, is we're simply breaking down. So we're simply submitting a quote to buy die for Weath. So if we break it down, it's relatively straightforward.
00:08:01.874 - 00:08:11.974, Speaker A: So the first portion is saying like, which network we want? So we'll have different networks and you can see a list of them. This one specifically for ETH mainnet. The next section is for the quote request.
00:08:11.974 - 00:08:32.650, Speaker A: So as you'll see swap quote, so we're asking for a quote. The next one is which token that we want to receive in this trade. So here we said we want Dai and then we're asking say we want to sell Weath in this trade and then in this situation we're selling, I think it's one wheat.
00:08:32.650 - 00:08:51.350, Speaker A: And so this is in the base unit of the sell token. And so if you make that query, say from your browser, from just like a curl request here, I'm putting it in a postman. You'll see, you get this JSON object back and you'll see here what's in that object.
00:08:51.350 - 00:09:01.606, Speaker A: You'll saw the chain ID up above here. It's looking at the different sources you'll see at Sushi swap proportion is one. So this trade was best 100% through Sushi swap.
00:09:01.606 - 00:09:28.290, Speaker A: And then as we continue down, we'll see some other parameters that are of interest. So maker token, taker token, some other data that's necessary for making a transaction. And so yeah, it's super straightforward just making this Http request and then you get the values that you need to submit that as a valid transaction.
00:09:28.290 - 00:09:52.470, Speaker A: So three simple steps to use the API endpoint. One for those who have not sent a transaction before, you'll need to set a token allowance. And this is meaning we are allowing our contracts to make that transaction for you because as we saw on that GIF earlier, we're going through the protocol and it's making that atomic trade.
00:09:52.470 - 00:10:05.790, Speaker A: So it's a pretty standard practice and we have some code snippets to help with that. If you have any questions you fetch the swap quote, which was the quote that we saw earlier. And then you're just going to sign that transaction with your favorite Web Three library.
00:10:05.790 - 00:10:20.370, Speaker A: So in code, what it looks like is the first couple of constants. Up above, you might be getting that from the UI. So up above where you have the Dai, the ETH, you probably get that from the UI.
00:10:20.370 - 00:10:40.798, Speaker A: The next section here is the setting of the token allowance and then here is the fetch swap quote. And so that's what it looks like in JSON if we're using certain libraries to make our lives easier. And then lastly we're just using Web Three to send transactions.
00:10:40.798 - 00:11:03.722, Speaker A: So we were taking that response and then passing it in and then from there it's a submitted transaction onto the blockchain. Okay, so I just talked about Quote, but there are two other endpoints that I want to call out. So Price, I would recommend using Price if you just want to query for a quote.
00:11:03.722 - 00:11:28.810, Speaker A: So think of it as like the read only version. And I say that because when you use Quote, we're pinging these market makers so they have an intent and if we say, hey, there's a taker on the other side that's interested, then they've already set aside this order for the taker. So we don't want to keep pinging market makers with quotes and then they keep setting aside orders, they're going to get frustrated.
00:11:28.810 - 00:11:48.602, Speaker A: It's going to block off liquidity for people. So if you just want to show a price to your user, use Price first and then once it's committed, then use Quote. And the params for that are almost identical.
00:11:48.602 - 00:12:13.510, Speaker A: You can take a look in our documentation and then Source, you can see all the sources for a particular network. So yeah, it makes it easy to see where we're sourcing from and we're continuing to add liquidity sources for all networks as well. So for those who are building, there's this tutorial in our documentation.
00:12:13.510 - 00:12:31.742, Speaker A: It goes through step by step exactly how you could build a token swap DAP. So very similar to our Matcha DAP, it covers how to query a token list. So for example, if you go to any swap interaction, your user can pull up a list.
00:12:31.742 - 00:13:01.558, Speaker A: So using CoinGecko for that and then walking through how to use the endpoint token allowance and then connecting that user to MetaMask so their trade can be submitted. So, highly recommend taking a look there if you're building. Yeah, lastly then is just kind of like why use zerox? I think a lot of our teams that integrate with us, they think it's a lot of what they've said is they like that we specialize in this field and so it takes the burden off of them.
00:13:01.558 - 00:13:23.182, Speaker A: So we have some stats here, 99% uptime, 2% revert rate, which is ten times lower than our competitors, and then 1.5 2nd response time. So just making it really quick for our integrators and less on the, I guess stats side is some interesting features that we offer.
00:13:23.182 - 00:13:50.066, Speaker A: So for example, if there's positive slippage meaning when there's a trade being made, if at any point the user could get a better deal, well, we don't collect any of that, we actually give that back to the user. And so this is kind of a unique thing across dex aggregators, so we definitely have our users first, so that's a big point of ours. And then similarly slippage protection.
00:13:50.066 - 00:14:04.246, Speaker A: So baked into our API we have heuristics that look at how likely it is that a certain trade will be attacked by mev. And if it is, then we route it away. So you don't even need to think about, yeah, it's baked into the API.
00:14:04.246 - 00:14:28.078, Speaker A: And if you want to learn more about how we do that, then happy to talk to you about the data that our team has done to bake this in. Lastly, so we have continuing to build out more and more tooling for teams that are using our API, one including the Xerox Explorer. So this is like a proprietary dashboard for teams that use our endpoint.
00:14:28.078 - 00:14:54.950, Speaker A: You can see all the trades that are going through your project, you can dig into the sort of trades that are happening and it's really, I guess, powerful for projects and their data teams to have this information and we're continuing to build this out even more. So specifically for the hackathon, let's talk about some resources. So at this hackathon we'll be offering three prizes.
00:14:54.950 - 00:15:03.150, Speaker A: So rather open ended. We just want to see how teams are using the swap endpoint. And specifically this is for ERC, 20 trades.
00:15:03.150 - 00:15:22.478, Speaker A: And so we're offering 5000, 3002 thousand. Here are just some project ideas, but happy to brainstorm some ideas with you. We've seen a continuing growing number of DFI applications and there's a lot of different novel use cases beyond, again, just the basic portfolio and wallet.
00:15:22.478 - 00:15:59.294, Speaker A: As we're expanding more into retail user use cases, how can we integrate this more, say, into index funds even? What's it called? What are those things called? Like gift cards perhaps transactionals. And then again, marketplaces wallets tooling in game currency I think is interesting. So say you have an experience, you don't want to push your users off of your platform, you then have the capability to keep it all in house, right? So say they're playing a game and they need to make some sort of trade within the app.
00:15:59.294 - 00:16:11.886, Speaker A: So then you can customize that your app can actually earn revenues from that directly as opposed to pushing them off to a third party exchange. And then just whatever you can imagine. Here are the judging criterias.
00:16:11.886 - 00:16:35.180, Speaker A: I'm sure you've seen this. You can also just find this on the website. So some things I want to call out are if you could use making sure that you use the affiliate address parameter so that's just a parameter that links to a wallet address that's related to your project and this helps us be able to help generate that dashboard for you.
00:16:35.180 - 00:17:01.182, Speaker A: Other things, looking at technical implementation, how creative and adoptable is this project? On the Dragon criteria side, these are some of the requirements and again, you'll see these on the website. So just making sure you have the description public repo. And then if you could put together a short video to just explain your project.
00:17:01.182 - 00:17:12.786, Speaker A: I'm sure you're doing this for other projects as well. So not much new stuff stuff. And then lastly, I will share a QR code later to links with these resources.
00:17:12.786 - 00:17:21.538, Speaker A: So git docs and GitHub repos if you're interested. Okay, so this is the last slide. This is just a slide for this deck if you need any resources.
00:17:21.538 - 00:17:27.970, Speaker A: But yeah, happy to stay here to answer questions. And thanks again for taking the time to stop at this workshop.
