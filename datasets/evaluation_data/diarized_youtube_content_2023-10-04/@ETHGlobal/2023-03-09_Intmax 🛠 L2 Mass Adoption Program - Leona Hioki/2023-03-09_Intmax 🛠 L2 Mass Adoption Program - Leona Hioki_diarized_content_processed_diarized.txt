00:00:07.370 - 00:00:12.670, Speaker A: Hi. I'm Riona from Intimas project. I'm an architect of Intimas.
00:00:12.670 - 00:00:17.662, Speaker A: Intimas project is aiming to make a globalized property system.
00:00:17.796 - 00:00:20.960, Speaker B: It enhances our whole sermon rail to world.
00:00:22.690 - 00:00:26.950, Speaker A: Today, I'd like to introduce two products from INTMAX.
00:00:27.370 - 00:00:29.574, Speaker C: INTMAX consists of two things.
00:00:29.772 - 00:00:51.930, Speaker A: First, the statistic load upset makes near the gas cost token transfers, customized privacy and interoperable smart contract between layouts. Second, walletless wallet for all layouts users. Let's start with their explanation about the wallet and talk about the stateless drawer bladder.
00:00:51.930 - 00:01:10.260, Speaker A: What is walletless. Wallet? This is a barometric wallet using only the default functionality of browsers like Clomon Safari. So there's no need for the installation of an extension or external application.
00:01:10.260 - 00:01:17.110, Speaker A: You can provide a really seamless interface to customers over DAP by changing several lines of codes.
00:01:17.770 - 00:01:20.902, Speaker B: Just changing some string of Web search.
00:01:20.956 - 00:01:22.790, Speaker A: JS to WebMast JS.
00:01:26.540 - 00:01:32.360, Speaker C: This is using the default functionality of browsers. Then in the UX, you find another.
00:01:32.430 - 00:01:36.380, Speaker A: Tab pops up instead of pop up honor extension.
00:01:36.960 - 00:01:39.624, Speaker C: When it comes to mobile UX, it's.
00:01:39.672 - 00:01:50.640, Speaker A: More significantly beneficial because people can access tabs by a browser like Safari instead of accessing from specific app or wallets.
00:01:51.780 - 00:01:54.640, Speaker D: Okay, let's see the UX. In the movie.
00:01:59.220 - 00:02:00.384, Speaker B: You can think that.
00:02:00.422 - 00:02:02.644, Speaker D: This is a usual DAP interface, and.
00:02:02.682 - 00:02:05.140, Speaker A: If a user pushes the button, another.
00:02:05.210 - 00:02:06.630, Speaker D: Dab will pop up.
00:02:07.000 - 00:02:10.420, Speaker A: Web also allows you sign a transaction by fingerprint.
00:02:28.970 - 00:02:49.070, Speaker B: Webmarks JS itself is a wrapper of Webster JS and Webosom. Then you can have both existing Word users and Bare Metrics users. So if you want to integrate this UX into adopt, you need to integrate Webmark JS.
00:02:49.150 - 00:03:08.470, Speaker D: Like following way webmark JS is quite similar to Webster JS. So if you know about Webster JS, you can build our DAP front end by reading the document here and representing some codes. Some lines of your DAPs front end codes.
00:03:08.470 - 00:03:16.090, Speaker D: This is a document link.
00:03:20.640 - 00:03:23.116, Speaker B: I will move to the coding demo.
00:03:23.218 - 00:03:29.970, Speaker D: To make sure you can build a front end with BF code.
00:03:31.700 - 00:03:34.784, Speaker B: Okay, let's build our DApps front end.
00:03:34.822 - 00:03:48.310, Speaker D: With Webbox JS in 20 minutes. Let's create their react project. If you don't wait and see this process, please skip to 30 seconds later.
00:04:29.320 - 00:04:47.500, Speaker B: Once a react project is created, open the project source code in BF code and start their app with their command NPM run stud confirm that the app is running the browser.
00:04:48.560 - 00:04:52.270, Speaker D: If you see the react logo, it's a success.
00:05:02.700 - 00:05:12.456, Speaker B: We will install various libraries regard for their react application. First install chocolate UI. A UI framework.
00:05:12.456 - 00:05:26.640, Speaker B: The documentation describes how to install it and how to use it with React. So we will install it accordingly. We'll show the next step in about 30 seconds.
00:05:26.640 - 00:06:05.818, Speaker B: Then remove unnecessary initial codes. This takes more than minutes. You can skip seeing this coding process.
00:06:05.904 - 00:06:08.460, Speaker D: And jump to 6 seconds later.
00:06:13.050 - 00:06:56.130, Speaker B: 60 seconds later 30 seconds left to the next step.
00:07:17.720 - 00:07:18.516, Speaker E: Okay.
00:07:18.698 - 00:07:27.716, Speaker B: Next, we install their libraries used to build their form. Here we will use React folk form.
00:07:27.818 - 00:07:31.576, Speaker D: On Zod we will install each of them.
00:07:31.758 - 00:07:34.804, Speaker B: Next we will install the webmark JS.
00:07:34.932 - 00:07:41.370, Speaker D: The latest version of Webmark JS is 0.1.9 right now.
00:07:53.010 - 00:08:09.780, Speaker B: After installing the various library, create an account component. The account component uses INTMAX JS to connect to INTMAX warrant and the driven display account information. It takes about minutes.
00:08:44.420 - 00:08:46.710, Speaker D: 30 seconds to the next step.
00:09:09.780 - 00:09:46.290, Speaker B: Then we use use context to pass data across components. Create useaccount TSX and create our context provider. It takes three and a half minutes 3 minutes to the next step.
00:09:46.290 - 00:11:54.466, Speaker B: 2 minutes to the next step. Racing the context provider create area at.
00:11:54.488 - 00:11:56.180, Speaker F: The top of level of the application.
00:12:47.290 - 00:12:50.170, Speaker B: Here, pressing the context provider.
00:12:52.350 - 00:12:52.826, Speaker E: At the.
00:12:52.848 - 00:12:54.380, Speaker F: Top of level of the application.
00:12:57.990 - 00:12:58.402, Speaker E: It.
00:12:58.456 - 00:13:58.422, Speaker B: Takes 30 seconds in the account component. Use context and put a value in account here we want to change the text displayed when the account has a value and when it does not. When the account has a value, it assumed to be connected to intermarks wallet.
00:13:58.422 - 00:14:20.766, Speaker B: At this time, the account address and chain ID are retributed and displayed on the screen. When the connect to intermax button is pressed, the connection to intimacy world is established. The connect to account function of webmarkjets.
00:14:20.818 - 00:14:24.490, Speaker D: Is used for this purpose.
00:14:25.070 - 00:14:28.700, Speaker B: To disconnect put new in account.
00:14:30.590 - 00:14:31.002, Speaker E: It.
00:14:31.056 - 00:14:33.580, Speaker B: Takes about 3 minutes to code.
00:14:38.060 - 00:14:41.770, Speaker D: Sorry 2 minutes to the next step.
00:15:20.160 - 00:15:20.524, Speaker E: 1.
00:15:20.562 - 00:15:22.190, Speaker D: Minute to the next step.
00:16:21.270 - 00:16:21.970, Speaker E: Okay.
00:16:22.120 - 00:16:26.182, Speaker B: Next we create our form for entering the transaction information.
00:16:26.316 - 00:16:30.326, Speaker F: We want to send on displays of home only.
00:16:30.508 - 00:16:33.642, Speaker B: When the account barrier is entered, it.
00:16:33.696 - 00:16:35.770, Speaker D: Takes about 1 minute.
00:17:10.260 - 00:17:12.530, Speaker F: 30 seconds to the next step.
00:17:25.610 - 00:17:28.338, Speaker B: We will build a poll using React.
00:17:28.434 - 00:17:34.490, Speaker D: Folk react folk form. And sodge here we will allow the.
00:17:34.560 - 00:17:37.382, Speaker B: User to enter the address and amount.
00:17:37.456 - 00:17:43.360, Speaker F: Of tokens we want to send. It takes about 4 minutes.
00:18:27.330 - 00:18:28.206, Speaker B: 3 minutes.
00:18:28.308 - 00:18:29.600, Speaker D: To the next step.
00:19:25.660 - 00:19:28.090, Speaker F: 2 minutes to the next step.
00:20:29.260 - 00:20:29.672, Speaker E: 1.
00:20:29.726 - 00:20:31.530, Speaker D: Minute to the next step.
00:21:35.370 - 00:21:36.194, Speaker E: We receive.
00:21:36.242 - 00:21:43.690, Speaker F: A received from intmas word after executing a transaction and displayed it on their.
00:21:43.760 - 00:21:50.346, Speaker B: Screen about the project disclose to the.
00:21:50.368 - 00:22:28.810, Speaker F: End so don't skip seeing their coding process anymore. Servicing to the next step.
00:22:50.390 - 00:23:06.990, Speaker B: Then create a parameter to receive a value from the o and pass it as a transaction. We use send transaction in webmark.
