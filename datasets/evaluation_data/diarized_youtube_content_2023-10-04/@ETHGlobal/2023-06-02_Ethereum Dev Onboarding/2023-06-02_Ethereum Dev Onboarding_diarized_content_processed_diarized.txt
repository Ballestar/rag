00:00:00.330 - 00:00:05.840, Speaker A: Three while. All right.
00:00:06.210 - 00:00:18.270, Speaker B: I was looking back at the old videos. It was like a group of people. We had, like, Rick Moo, and we had, like that would be a fun and maybe even talking about what's changed since then. Oh, what? Looks like we're live. All right.
00:00:18.340 - 00:00:19.360, Speaker A: We are live.
00:00:22.130 - 00:00:22.880, Speaker B: Welcome.
00:00:24.530 - 00:00:53.546, Speaker A: Yes, us. Well, I'll just wait just a couple of minutes maybe people coming in, but maybe you want to oh, yeah. Let's do a session after this where we can get a group of panelists and talk about how the that'd be awesome changed. Yeah, that sounds good to me. Cool. So I will just maybe start right now because I see more people coming in. So welcome, everyone, to the Ethereum Developer Onboarding session.
00:00:53.546 - 00:01:45.134, Speaker A: I'm Linda, and our instructor mentor today is Austin Griffith, who is just one of my favorite people in the entire Ethereum Ecosystem. He's so passionate about the space and has just helped onboard a lot of people into the ecosystem. His passion is also very contagious, so you'll be super excited after this call. And then he's also just built a lot of important dev tooling as well, so he's the perfect person to answer your questions. The session is just going to cover kind of what are the latest tools and resources to be aware of, how do you get started as a new developer building in the ecosystem? And then we'll have Q A at the end where you can just kind of ask any of your questions. And we also got a bunch of pre submitted questions as well that we'll cover. This is currently being live streamed by ETH Global, so thank you, Kevin, for helping us out with that.
00:01:45.134 - 00:02:27.974, Speaker A: And then we'll have the recording of the video up on YouTube afterwards so you can reference it later, share with anyone who couldn't make it. I also want to just shout out to ETH Global in general because if you're not aware of them, they just hold the best hackathons in the Ethereum Ecosystem. It's online and in person all over the world. Highly recommend attending one of them. Lots of really great companies have come out of ETH Global hackathons as well, so they're really great couple housekeeping rules. So if you have any questions, feel free to just paste in the chat, and I'll be moderating and help get them answered. And then at the end, when we have the Q-A-I will be promoting people to panelists.
00:02:27.974 - 00:02:49.378, Speaker A: If you just raise your hand where you can just kind of chat. If you would rather talk instead of typing a question, please. No questions about price or speculation. We're here to focus on building, so really appreciate if you could just keep that focus. So without further ado, going to kick it off to Austin to get us started.
00:02:49.544 - 00:03:00.774, Speaker B: What's up? Thank you, Linda. Thank you, ETH Global. Thank you for having me. Yeah, I think I don't really have a particular. Let's do this. In this schedule. I think it's more like let's intro.
00:03:00.774 - 00:03:20.362, Speaker B: Let's talk about E Dev. Let's talk about tooling. Let's talk about how to get you, the developer started tinkering and get you started in Ethereum. Feel free to just jump in too, if there's questions. If you see something in the chat, Linda hit me up. Or if anybody else has any questions, just hit us up as we go. Yeah.
00:03:20.362 - 00:03:37.460, Speaker B: Awesome. I think I should just share my screen and get into it. Let's see right here, right? We were just talking about ETH Global events. So many awesome events. Make sure to get on and check this out. I wish I was going to Waterloo coming up, but I will miss Waterloo. But I bet this will be an awesome one.
00:03:37.460 - 00:04:03.562, Speaker B: I saw the original CryptoKitties came out of the first ETH Global Waterloo, which is, I think 2017. ETH Waterloo 2017. And then I think they skipped 2018. And then I was there in 2019. But oh, man, what a time, what a time. What a time that would have been back then, back in the day. Okay, so make sure you go to these events, though, and as a new builder, you're not trying to just blow something out of the water.
00:04:03.562 - 00:04:56.090, Speaker B: Yes, so many awesome companies did come from these hackathons, but at first you're just trying to create something and build something and kind of flex that muscle a little bit. So when you start picking out these hackathons and you start going to these hackathons, try not to be too focused on creating something completely unique that's going to blow away the world and think about something of how do I really make sure I'm good at this and kind of practice and get good at shipping and trying things out and tinkering. And that's kind of what we're going to talk about today, is just like, really how to on localhost get very confident with ETH Dev. And that's what we're going to dive into here. Probably. Mostly I'm going to be using Scaffold ETH. And not even Scaffold ETH one.
00:04:56.090 - 00:05:30.102, Speaker B: I think Scaffold ETH Two will be where we will dive in. And it's kind of fun to talk about. Since the last time we did this, a year or two ago, a lot of things have changed. One big shift that's happened kind of underneath the tooling a little bit is Wagme. We see Wagme being used a lot more relative to Ethersjs. Or maybe right now you're using Ethers, JS and Wagme, but then there's VM that's coming out from Wagme that kind of replaces some of this stuff. And then Wagme is pulling out Ethers out of there.
00:05:30.102 - 00:06:01.594, Speaker B: So it really comes down to what you're working on. I think Wagme is going to be a front end hook library. So if you're thinking a lot about building apps, you're probably going to use Wagme a lot. And it's W-H-E-M-I sh just to have these docs kind of in your pocket. We'll be using these today. Also, Scaffold ETH uses sort of Wagme, but then has its own set of hooks on top of that. And back in the day, the original Scaffold ETH had a set of hooks.
00:06:01.594 - 00:06:48.122, Speaker B: That basically what Wagme became was that set of hooks. We called it ETH Hooks back in the day. So there was something similar to this, but not as good. And it's so awesome to have better and better developers coming in and making better and better tools. So the next time we do this in 2024, we'll see all the cool, crazy tools that have been created that make your life, the developer, easier when you're starting to build an app. So what I really want to do is talk about getting started, a getting started point and a way for you as a developer to get started and start tinkering and start testing your assumptions and start learning how to build and not just how, but what and why. And there's more to it, right? It's not just learning the syntax.
00:06:48.122 - 00:07:27.574, Speaker B: You're going to pick up the syntax really quick. It's sort of like what can be built with this cool new thing? And what kind of app do I need to run in a trustless environment that's censorship resistant? There's not that many things really need that. So this special kind of network and this special kind of new tool is still kind of finding its place in the world. So here we go. Let's just dive into scaffold e two. What we're going to do is I have followed these instructions already ahead of time, but if you want, you can follow these at home. Also, let me paste Scaffold E Two into the chat somewhere.
00:07:27.574 - 00:07:35.434, Speaker B: It's probably already did. There we go. Oh, you already got it. Thank you. Oh, look at that. Look at that. And the ETH Global and the Wagme.
00:07:35.434 - 00:07:36.206, Speaker B: Wow, you're right. Yeah.
00:07:36.228 - 00:07:37.274, Speaker A: Don't worry. I got links.
00:07:37.322 - 00:08:04.610, Speaker B: All right. Okay. So it's a repo that you clone down. It uses yarn because it's going to have multiple packages. It's going to have a smart contract editing package like Hard Hat or Foundry. And then it's going to have some sort of front end package and hooks like Wagme and React. In this case, we're using Next JS Rainbow Kit, Wagme and TypeScript.
00:08:04.610 - 00:08:32.462, Speaker B: And this is kind of like a modern stack. So what you do when you install it, you do an install, you do a yarn chain. And that brings up hard hat. Also, if you're getting in or you're a new dev, you've probably heard about Foundry. Also, Foundry is a similar suite to Hard Hat and Scaffold e Two will also kind of choose your own adventure, let you choose between the two. But today we're just looking at Hard Hat. They're both great.
00:08:32.462 - 00:09:10.798, Speaker B: I think if you're going to get really into smart contract development and testing, you're probably eventually going to be using Foundry. So it works the same exact way here. You would just kind of do a yarn deploy, and you deploy your contracts, whether you're deploying them to Hardhat or Foundry, it'll be all the same here. And then you yarn start, and that brings up your front end. So you sort of have this front end that's serving up your smart contracts, and you can tinker with your smart contracts as you go. So let's go ahead and just get in this loop where we do this yarn deploy, and I'm going to do a reset, and that's going to give us just fresh contracts. You don't need to do that at home.
00:09:10.798 - 00:09:44.358, Speaker B: Just follow these instructions exactly the same way. And what you'll have is a localhost app that comes up here, and then you have your smart contract here. And so there's the NextJS package and the Hard Hat package. And if we get into our Hard Hat package, we're going to find our contract. Okay? And this is really the heart of ETH. Dev is tinkering with this smart contract and tinkering with Solidity. And if you're a developer, you're going to be able to dive in and figure this out very quickly.
00:09:44.358 - 00:10:25.634, Speaker B: But let's just kind of add a few things here just to show this loop I want to show. So when you get in here and you go to Debug Contracts, this page is going to show what you're editing. It's going to show your smart contract. So if we do like, an address public and we make someone the boss, and let's just grab this dude's address, that's an address that this address controls the Edcon wallet that was deployed to Edcon and the token that was there. It's a burner wallet that I loaded into local storage. And now that I have it here, I'm just going to have to use it on localhost. But I recognize this account, and I shouldn't be messing with it.
00:10:25.634 - 00:10:57.982, Speaker B: But here we are live, and we're just going to so we have this boss, right, this pink dude. We're going to make the boss of our contract, and we're going to go ahead and redeploy that. So we're just tracking some arbitrary address. But watch what happens over here. The front end Auto adapts to that and says, oh, you started tracking this new boss character, and I can see it here. And then maybe we want some function that allows us to maybe update the boss, right? Let's see. AI should probably just take over.
00:10:57.982 - 00:11:27.794, Speaker B: There we go. Thank you. So there's a require statement, and when you get into Solidity, you'll discover this. Require statements are sort of like an assert it's checking that a certain condition is set, and if so, it continues, and if not, it reverts and everything rolls back, everything's atomic. So if we did a couple of swaps before this or something like that, and then we get to this require it's going to undo those other actions. Everything either works or it fails. So we have this require statement.
00:11:27.794 - 00:12:08.878, Speaker B: We're making sure that the person calling the contract, the message sender is the boss and then we're letting them update the new boss. So that means that someone else can't just come along and update the boss to someone else. Only the current boss can update the boss and let's make sure that works. Let's go ahead and deploy. Okay, so now we'll notice, look at that, a new function showed up in our contract, right? So we have the boss here, but now I can go, hey, let's make Vitalik the boss and hit send. Oh no, we don't have any money. Okay, so one other thing we have to do is we have to go up here to the faucet and we have to grab some funds and that's just going to grab some local funds from the faucet.
00:12:08.878 - 00:12:44.682, Speaker B: Now if we go here and we try to make Vitalik the boss hooray, okay, and look at this, it updates here too. Okay, so let's go ahead and just go ahead and redeploy that whole thing and see that again. Okay, so there's my account and then you can make a call to make anyone the boss. Basically just by putting in an address and making some function that allows you to update the boss. We went to the faucet. Let me show one other thing and that's burner wallets. As you start to tinker around, you can of course connect your MetaMask up here, it's using Rainbow kit.
00:12:44.682 - 00:13:07.254, Speaker B: But on localhost sometimes you don't always want to connect your MetaMask. You might want to just use a burner wallet and that's what I'm using here. And let me do this to help explain what a burner wallet is. So I go to this same localhost address, but you'll notice I've got this different address there's kind of like this green and yellow. Now let me close that and do that again. Just bring up localhost again. There we go.
00:13:07.254 - 00:13:40.814, Speaker B: Kind of a different character, right? So every time I'm doing this, I'm actually getting a brand new account that I can use. This is really handy for testing things. For instance, we have this sort of boss character that we're keeping track of and only the boss can update the boss. So let's try and test that and make sure it works the way we think it does, right? So we have this character over here. This guy is kind of like the bad guy, right? And this guy's kind of like the boss. So if we grab some funds from the faucet and as the bad guy, we try to update the boss, right? Let's try to set the boss. To me, this should fail.
00:13:40.814 - 00:14:14.606, Speaker B: It should tell us not the boss, right? We can't update this address record because there's this specific rule in here that says you can only update this if you are the boss, right? And so we've kind of tested that this guy who's not the boss is not allowed to set it right, but this guy over here could set it right. We could even set this bad guy to the boss. I don't know why, but that's what we're going to do. We're going to make the bad guy the boss. Okay, awesome. Now the bad guy's the boss, right? And now, so this guy could make ATG E the boss. Let's do it.
00:14:14.606 - 00:14:39.934, Speaker B: There we go. In a really roundabout way, we kind of made the bad guy the boss, and then the bad guy made me the boss. Okay, so you can see here what we're doing here is we're using burner wallets to quickly make transactions. We're tinkering with our contract. We're writing small bits of solidity, and then we're testing out how that solidity works. And there's a lot of stuff here that teaches you through different things. Here's how you make a string.
00:14:39.934 - 00:14:58.954, Speaker B: Here's how you make a boolean. Here's how you keep track of a number. So it looks like there's some counter here. Let's go ahead and just deploy the stock contract, and we can kind of tinker with that some more. Then maybe we can get started tinkering or building something little and kind of talk about what kinds of things you might build on ethereum. I'm not seeing any questions yet. Looking good.
00:14:58.954 - 00:15:26.998, Speaker B: Looking good. Okay, so I've redeployed this. This is the stock contract. I've gotten rid of all of our boss stuff. I just wanted to show you that as you add stuff to your contract, it's just going to show up over here and you can tinker with things. So how do you get started? How do you really learn solidity, and how do you get going? The best way, if you're a technically minded person, I think you're going to pick up the syntax pretty quick. The way I like to do it is go to Solidity by Example.
00:15:26.998 - 00:16:01.054, Speaker B: I don't know if we have that one in over here yet. I'm going to beat Linda to it. Solidity by Example has so many wonderful solidity examples that stay up to date. And if we get way down in here, I can make this a little bigger. If we get way down in here, there's all sorts of DeFi stuff and hacks and very kind of edge case stuff you can really get into. You can go down a lot of rabbit holes right here on this simple website. But what I want you to do, if you haven't really gotten in and learned solidity yet, this is the first place that you want to get in.
00:16:01.054 - 00:16:19.830, Speaker B: And this is just going to help you tinker. And what you do is you just kind of go, let's go learn mappings first. Okay, so let's say we're going to learn what a mapping is. We just grab this mapping and we kind of paste it into our contract. Shoot. I'm just leaving the stock contract here. I wanted to go through that, but we're on a tangent.
00:16:19.830 - 00:16:42.410, Speaker B: We're learning what a mapping is. Let's go for it. Okay, so you bring up scaffold ETH. You go to Solidity by example and you pick out these topics. This mapping topic is the one that we picked out, and we kind of just copy pasted it in. And if I go ahead and deploy that, what's that going to look like? I need to stop saying reset. That's kind of an extra added thing.
00:16:42.410 - 00:17:08.418, Speaker B: Notice how if I hit deploy now without the reset, it's just going to say, oh, we're going to reuse your contract. That's what that reset does. Okay, so we've deployed this My map, okay? And all it is is a mapping from an address to a number, and it's stored in this My map. So let's see. We could put in any address here. What's the value for ATG? Okay, it's zero. What's the value for this guy? It's going to be zero.
00:17:08.418 - 00:17:35.966, Speaker B: They're all zero, right? It's basically an empty mapping right now. Any given address will give you a number, but since we haven't set any values yet, basically they're all zero. Okay. If you're a programmer, you probably know what you see here is a constructor, okay? A constructor is the kind of thing that's going to run when something gets created, right? So this is when the contract gets deployed. This code will run. Let's get in here and let's just set the My map. I don't even know.
00:17:35.966 - 00:18:15.674, Speaker B: Let's set the My map for this dude since it's our So, and let's give him maybe like a hundred tokens, right? Let's say these are maybe, maybe instead of my map, let's say balances, okay? And for any given address, you have a number. And then in the constructor, we're going to set the balances of this pink dude to 100. Okay? Let's go ahead and deploy that. And we're testing our assumptions here. We're just seeing that it does what we think it's going to do. Hopefully this deploys a new contract and it has this new balances mapping. And if we paste in our address, hopefully we have 100.
00:18:15.674 - 00:18:33.966, Speaker B: Okay? So it's sort of starting to work. It's coming together. We're learning what a mapping is, what is Vitalix. If we just go look at this again man, that's a hard word to spell. I don't know. I don't know why I have such oh, no, that's like not even the right one. Oh, that's smart.
00:18:33.966 - 00:18:43.126, Speaker B: Someone has actually taken the wrong vitalik name. Let's see. There we go. There we go. There we go. That's him. There we go.
00:18:43.126 - 00:19:29.490, Speaker B: And of course, his mapping is still zero, but my mapping is 100 right. I can't send this around. I can't change this at all. But now you can see how we're keeping track of a balance for someone, and it's 100 here. What would we need if we wanted to make a decentralized currency, the next thing we need is basically a function to transfer these balances around, right? Move a balance from one address to another, right? Well, let's write it. Let's write a function transfer, right? What's it going to do? It's probably going to have some recipient and some amount. We're going to make sure that the message sender the person calling transfer has enough and we're going to subtract it from the balance and add it to the recipient's balance.
00:19:29.490 - 00:19:50.106, Speaker B: Okay. We technically didn't write any code there. AI took care of it for us. But now we have a token. Basically we have a mapping that keeps track of balances and we have a transfer function that lets us move those balances around. So now if I go here and I check my balance, it should be 100. But now there's a new write function down here.
00:19:50.106 - 00:20:11.410, Speaker B: There's a transfer function, right? All right, now we're getting into it here. Let's send Vitalik 50 of these, right? Boom. Okay, so now if I check my balance, it's 50. And if I check maybe like ATG's balance, it's going to be zero. And if I check Vitalik's balance, it's 50. Okay. We have a decentralized currency.
00:20:11.410 - 00:20:36.410, Speaker B: We're coming along very quickly. We're learning how to build things on ethereum. And all we needed was this example mapping from solidity by example. And we kind of pasted it in and started tinkering around and now we have our own shitcoin that I sent to Vitalik. I hope he's happy. But don't worry, this was on local host. So nothing out public yet, but we will get to it soon.
00:20:36.410 - 00:20:55.662, Speaker B: Oh, nice. Shout out for Cookbook Dev. Cool. Okay, I'm going to probably just trash this stuff. Let's go look at this contract real quick just to see. I meant to look at it earlier just to kind of show it off. Let's go ahead and redeploy with there's going to be something wrong there in the constructor, right? We need to take that out.
00:20:55.662 - 00:21:14.694, Speaker B: Okay, cool. Let's go ahead and deploy that one more time. Make sure we get back to our normal contract. There should just be just some of this stuff and usually you'll probably clear all this stuff out and attack kind of a brand new contract or pull most of this stuff out. Let's see, we can receive some funds. There's a withdraw function. Okay.
00:21:14.694 - 00:21:46.462, Speaker B: There's a set greeting function. I think this is the meat of the function here. There's basically a greeting that we're keeping track of. That's some string and then there's some function that allows people to update this greeting. And then I think there's some fun logic in here where if they pay some money, we set their greeting to premium. Okay, let's go tinker around with that too. So if I say, hello world and I hit send, our greeting updates and our counter updates, but Premium is still false.
00:21:46.462 - 00:22:30.282, Speaker B: Okay, so what if I say, hello world and I pay a little money? Okay, so this is going to take us down a little bit of a rabbit hole talking about ETH versus way. When you're writing a contract and we had that hundred up here when we said some UN 256 equals 100, that's actually 100 way. Okay? This is some number, right, equals 100. Okay? So this is 100 way. But if we wanted to express something in terms of a decimal, let's say we wanted to say 100.46 or something like that, right? You can't do decimals in solidity. There's no floating point math.
00:22:30.282 - 00:23:03.770, Speaker B: And we want the EVM to be a very simple machine. So what happens here is we do this little trick. We say we think of things in Ether. So this is 100.46 Ether, which is actually equal to the number two. This is equal to 100.46 times ten to the power of 18, right? That's what this Ether is doing.
00:23:03.770 - 00:23:38.946, Speaker B: So I'm going to do this here. I'm going to take a decimal and I'm going to multiply it times ten to the 18 and you get this giant number. But that's what the EVM is going to use. So you're not going to use decimals, you're going to use a decimal and then multiply it by ten to the 18. So a human wants to see it in decimal form. But the machines, the EVM, the simple EVM wants to see it in a whole number. So that's the long winded way to talk about how there's Ether and there's way and this is in way and this is in Ether.
00:23:38.946 - 00:24:01.834, Speaker B: And we can convert by multiplying times ten to the 18. And if I send in some decimal, it's going to get mad at me. It's going to say, no, you're doing it wrong. So this is built for developers, but once you build your front end, you're probably not going to have it set up where they have to hit this little button. You will do this all for them. But you the developer. You need to do this because you need to remember what you're doing.
00:24:01.834 - 00:24:24.146, Speaker B: You need to remember that you're converting things to way here. So there we go. We'll convert that to way and when we set that to True, we say, hello world. It shows up here. Let's maybe do hello world two, right? And hit send. But cool. Now we're premium because we paid a little bit of money along with it, right? So this was a payable function, which means it accepts some ETH along with it.
00:24:24.146 - 00:25:16.434, Speaker B: And then down here we're looking if message value is greater than zero, we'll make it a premium greeting for some reason, which is just kind of showing you how you the programmer. You're really setting this up. You're building the state, you're building the functions. You can create whatever you want within a smart contract. Once you figure out how to write some solidity, the next question is, like, what do you build and why and how? Right? And I think that's when you want to start looking at Speedrun Ethereum. So Speedrun Ethereum is a curriculum that will take you through oh, man, am I typing this right? Yeah. It will take you through building the most important pieces and kind of building things that are going to teach you what people are building on Ethereum and what's kind of popular and what is actually useful and getting product market fit even.
00:25:16.434 - 00:25:30.070, Speaker B: So, just like we already talked about, you want to use Scaffold ETH. You want to copy and paste. Maybe I can make this a little bit bigger here. There we go. You want to use Scaffold ETH. You want to copy and paste these solidity techniques. So you'll go to Solidity by example.
00:25:30.070 - 00:25:48.970, Speaker B: You bring down Scaffold ETH. You'll do all of this tinkering that I'm showing here, and then you're ready to start building. Okay. And build a few things yourself with Scaffold ETH. But then jump in here. The first thing is just a simple NFT example. It gets you exposed to an NFT contract.
00:25:48.970 - 00:26:18.250, Speaker B: How NFTs work? I love this little buffalo. I have a little sticker here, too. I'm going to put it on the door of my office. You'll be able to learn how collectibles work, sending around burner, wallets, just a handful of dev environment things. You don't really write a whole lot of code in this one. It's more just to get you used to the tools and kind of into general ETH dev and starting to build again. You'll use hard HAP for these? We'll upgrade to Foundry eventually.
00:26:18.250 - 00:26:58.680, Speaker B: Kind of just a flavor kind of thing. Okay, decentralized app. This is the spot right here. This is probably the most important challenge because it doesn't just teach you how to build this stuff, but specifically something that Ethereum is really good at and to really lean into that. The Superpower is allowing you, the developer, to write the rules. And you're writing the rules of a game that a bunch of adversarial actors can play where they don't have to trust each other, they just have to trust the code that you've written and they can coordinate. It allows them to coordinate together even though they don't trust each other because all they have to trust is your code.
00:26:58.680 - 00:27:23.790, Speaker B: And then you'll get down to a token vendor where you'll deploy an ERC 20 token. You'll learn about the approved pattern. You'll learn about how you can write a second contract that Vends that sells your token or even buys it back. The Build Guild is something kind of a side quest as you get through here. The Build Guild is more of a funding mechanism. We're giving out small grants. We're giving Developer UBI out.
00:27:23.790 - 00:27:48.150, Speaker B: We're identifying people as they come through the Speed Run, and we're kind of helping them out, making sure people get through. But that's just kind. Of an extra thing. Okay, now let's keep going. Dice game. So as you're learning how to build things on Ethereum, eventually you may want to use randomness. And getting a random number on chain is super tricky.
00:27:48.150 - 00:28:29.246, Speaker B: A public deterministic blockchain is very hard to get a random number from. That's not something that you can predict or at least check on. And you'll learn that in this game. Basically there's a dice game and you can pay a little money and roll the dice. And what you're going to do here in this challenge is you're going to build a second contract and the second contract looks in and figures out what the random number is going to be. And it only pays to roll the dice if it's going to be a winning number. So you can basically create your own attacker contract that attacks this dice game because it's using future block hash instead of some other better randomness.
00:28:29.246 - 00:29:08.990, Speaker B: But also any better randomness comes with its downsides. There's some user experience issues if you're using, for instance, Chainlink's VRF, really good source of randomness, but it's expensive and you have to wait for the value to come back. You kind of make a call to a smart contract and it calls back later. So this is really going to get you in the weeds with randomness and really kind of expose to you why it's tricky, but also help you create games and other things that eventually can use good randomness. And then this is it. This is the hyperstructure. I feel like this is whenever I explain Ethereum to someone, I feel like it really starts to click.
00:29:08.990 - 00:30:26.674, Speaker B: When I start talking about what a Dex is and how a Dex is basically this hyperstructure. You should definitely google Hyperstructure. Jacob from Zora has written this really good paper that talks about how to make a really good smart contract protocol and some of these really important things. It needs to be credibly neutral, it needs to be free, it needs to be unstoppable, right? And we can get into like expansive fees and some of these other things are interesting and I think we're still kind of on the verge of even exploring and figuring this stuff out. But a Dex is a hyperstructure. A well built Dex basically allows people to swap between one token to another and from the other token and back. But before this was created, basically you had to go to an order book or you had to go to some central service that would provide the swap for you once it's written into a smart contract and you just go talk to that smart contract, there's no longer that centralized piece basically anywhere with an internet connection and a little bit of ETH.
00:30:26.674 - 00:31:09.586, Speaker B: You can make that swap without having any kind of centralized authority. But there's more to it. Basically. They built the smart contract. Anybody can get to it, but they built it in a particular way that allows anybody to provide liquidity to. So if we think of this like a vending machine at your school or whatever and it allows you to swap different candy bars, right? I can put in a Twix bar and I can get back Reese's Pieces. Now, also, if I am an entrepreneurial type dude or whatever, I could supply some candy bars to this vending machine, right? So I could bring in a whole box of Twix bars and people can be swapping Twix to Reese's.
00:31:09.586 - 00:31:35.470, Speaker B: And what's going to happen is slowly I'm going to earn fees for providing that liquidity. So these fees inside the decks, this hyperstructure, are expansive in a way that they reward the folks that provide the liquidity, provide the expansion of the network. By providing this liquidity, I'm making swaps easier. So I'm rewarded with this fee. But I didn't write the smart contract. I'm not in control of it. Actually.
00:31:35.470 - 00:32:13.974, Speaker B: No one's in control of it. No one can shut it off. I am sort of this disinterested third party that just provides liquidity and earns fees and there's other people that come in and swap between those things. And then there's sort of this third person who sort of deployed the contract that doesn't control it. And I think this sort of credibly neutral structure leads to some really interesting systems. And those are the kinds of things we're seeing deployed on Ethereum right now. And this Dex challenge is really going to get you into it and really take you deep on how to build this, how to calculate the price based on the reserves, how to incentivize other folks to provide these reserves.
00:32:13.974 - 00:33:23.290, Speaker B: So this building a Dex, I think is a really eye opening challenge. Then we get into things like state channels, scalability, signed messages, even account abstraction, right? Like as you start building a multi SIG, instead of having an EOA, an externally owned account in control of everything and your private key sort of signing all these messages, what if you could have a Smart contract wallet? And that smart contract wallet could control all of your assets and then you can write the rules, maybe a spending limit. Or maybe you need three different signatures. Or maybe it's a multi SIG for a family where there's two parents and four kids and the kids need to get at least one parent's signature, something along those lines, right? Like you need three kids and one parent for this transaction to go through and it can never spend more than $1,000 a day, right? And if everyone loses their keys, maybe there's some kind of social recovery here where grandma can trigger a transaction that resets everything and gets everybody their keys back. You'll get into account abstraction and multi sigs and all of that stuff here in the challenge. Then there's a nice fun one. It's just building an SVG NFT.
00:33:23.290 - 00:33:57.606, Speaker B: This is totally a flex. You really should not store heavy amounts of data on blockchain, especially images. But in this case we're going to draw images using a smart contract. What you can do there is some really interesting stuff like the width and the color of the thing is actually all on chain. So you can breed these NFTs and the colors mix all on chain. Just a fun game to play with, but probably not actually where things are going. I don't think that we're going to be storing SVGs on chain in any other way other than art and a flex.
00:33:57.606 - 00:34:38.186, Speaker B: I don't know if that's the best usage of a blockchain, but come here and learn it and check it out. Okay, so to recap so far, basically Scaffold ETH is a great place to get started. Tinkering use scaffold ETH and solidity by example, right? Use these two in combination, solidity by Example and Scaffold ETH to set up your local dev environment, to get confident on localhost, to start tinkering with contracts and building things. And then when you're ready, you feel like, okay, I've got it. I kind of got the language. Solidity is not that hard. I can figure this out.
00:34:38.186 - 00:35:15.140, Speaker B: Then jump into the speed run and start running through each one of these challenges to really start kind of sharpening the skills. Then after you've gotten that far, then it's time to start shipping and kind of like building interesting things again. You're still not trying to make something like super unique and make a million dollars. It's like everybody's first gut instinct. Mine too is to like, okay, I got to build an app that's got to make all this money and this is my goal. And you try to build it and it doesn't work that way. And there's so much that you have to learn that it just never works that way.
00:35:15.140 - 00:36:15.400, Speaker B: Maybe it'll work that way for you, but for me, I had to quit trying to make something that makes money and start trying to make something that's interesting and that actually fits on Ethereum. You see a lot of hackathon projects that are like reddit on Ethereum or a blog on Ethereum and that kind of doesn't work yet. Now we're seeing more scalability solutions and we're seeing that kind of become more applicable. But really you kind of almost need to learn what kind of things you can build on Ethereum before you start swinging for the fences and trying to make a company out of it. And I think that get your bearings, learn how to write solidity, go through the speed run and learn the kinds of things that people are starting to ship and then start getting in a habit of tinkering and shipping small things yourself. I have this crazy miro board that I call the ETH Dev Tech Tree. And if I zoom way out, let's see.
00:36:15.400 - 00:37:03.154, Speaker B: This is probably the best picture to describe this thing that I've put together here is like Charlie all crazy that's me putting this together kind of after you get through the speedrun, there's a lot of things that kind of happen before the speedrun, right? You're learning arrays and gas ETH versus way. We just kind of talked about that. Payable functions, you kind of learn the language and you learn how the language works. If you're a coder, you're going to figure that stuff out really quickly. It's this next part that's sort of like this tour of duty of things that you need to build to really learn how to get to be proficient. And oh, check out node guardians too. Like once you get through the Speed Run, node guardians kind of is a fun, gamified way to kind of go through another tech tree.
00:37:03.154 - 00:37:48.840, Speaker B: And their tech tree is a lot more pretty than mine. But this crazy thing, I've kind of laid out all these different kind of branches you can go down in terms of your learning and your building. And then I've kind of even distilled this down into kind of this tree here. So do Speed Run ethereum, get good at it. Then I would say the next thing that you should do is build your own command line tool. Even though a lot of people have already built their own command line tool, you need to build one for you. Build one that goes out and looks at a specific token, gets all the events, figures out what your balance is, but maybe finds the highest balance of that token or something like that.
00:37:48.840 - 00:38:31.358, Speaker B: Write a CLI that lets you dollar cost average from dai to ETH or something like that, where every week or every day it buys $100 or $10 worth of dai. And so over many months your script will kind of dollar cost average. I don't know. I don't really know anything about investing and stuff, so I'm not maybe the best person to talk about that. But you're building a tool and you're building a command line tool and this is going to get you exposed to kind of some of the lower level stuff. So build your own command line tool just because it's going to prepare you for a lot of other things. If you happen to build your own NFT mint or something like that, eventually you're probably going to need to build your own indexer.
00:38:31.358 - 00:38:45.110, Speaker B: And if you've built your own CLI, it's going to be really easy to build your own indexer. So build your own command line tools even though everybody's already done it. It's something for you to have as a tool and something to prepare you for a lot of the other challenges.
00:38:46.030 - 00:38:48.026, Speaker A: Austin, is this mirrorboard public?
00:38:48.128 - 00:38:54.602, Speaker B: And if it's oh, man, it really shouldn't be public, but here it is.
00:38:54.656 - 00:38:55.660, Speaker A: I think it's cool.
00:38:56.670 - 00:39:45.014, Speaker B: It's so messy. It's just like a lot of things that I think folks should build as they're getting to the point where they want to be an ETH dev. I feel like you need to get all the way out here before you start writing your own thing and trying to make something super unique. Just understand what we've tried already and maybe even try things that have been tried and have failed. Right? You'll notice I have a TCR here and a prediction market. We've tried prediction markets multiple times and we've tried TCRs multiple times, but there's something there and there's something interesting there and we just don't see enough of it. So I want to see more people building these kinds of things and innovating to maybe find something that actually could get some product market fit, token, multi sender, learn how to verify messages.
00:39:45.014 - 00:40:26.514, Speaker B: A lot of these are the challenges that you've already done. If you do kind of go down the CLI route, it's getting you closer to running your own node. Usually I have my own node right here at home, but I'm in my office, so I don't have my node here. But run your own node, you'll run something like Geth or neither mind for your consensus layer, and then you'll run something like Prism or Lighthouse. I can't remember the different execution layers. But you'll run a pair of nodes together that basically are sort of ETH one and ETH two together, but we don't say it that way. The execution layer and the consensus layer working together to run your own node.
00:40:26.514 - 00:41:14.918, Speaker B: And you can actually query your own node for things like if you're writing this CLI and you're trying to find all the balances, if you're asking Infura or Alchemy for the balance of each person, it's going to be slow and it's going to be a network call. If you're running your own node, you have like this local host box you can ask any of these questions to and it's going to be very fast. So as you start building your own index or as you start building some of these cool command line tools, it's really handy if you're running your own node at home. And then on top of all of this, if you start running a Validator, it's so cool. Being a home staking validator is the thing that makes Ethereum what it is. It's like the Home Validator is the thing that's really securing the network. And I think that we need more and more of those and I definitely celebrate those when I find them.
00:41:14.918 - 00:41:59.960, Speaker B: Then it gets way farther out. Right? We start getting into things like, okay, once you can get an Oracle price feed, then you can start lending. And if you can start lending, then you can start building leverage and all sorts of other things that we see in the DeFi world. If you have a simple proposal system and you start where is simple proposal system? Here it is. If you have a simple proposal system, this should probably be back farther oh, I'm not even editing. This should probably be back over here somewhere. Because I get into like, Moloch Rage Quit and other multi sigs and different Dows, but just with a simple proposal system, you can set it up so a group of people can make decisions and eventually check out Compound's Governor and some of these other Dows and how they've implemented it.
00:41:59.960 - 00:42:26.560, Speaker B: Mev is really interesting. Once you have written a good Dex, you can start learning what a sandwich attack is and you can sandwich attack that Dex. You'll notice that the Dex that we have for Speedrun Ethereum. Let's see if we can find it. Oh, it's locked. I can't go to the code right now, but technically all of these are open hold on, challenges. There we go.
00:42:26.560 - 00:42:52.838, Speaker B: There we go. Technically, all of these challenges are like all open source and they're here. I'm just going to paste them into the chat too. So you have them. But I wanted to look at the Dex challenge specifically to look at the smart contract. Let's see, because I want to show that it doesn't have oh, darn it. Okay, you'll have to fill this in.
00:42:52.838 - 00:43:29.918, Speaker B: Okay, so the Dex that you learn how to build does not have slippage protection. And you don't need to learn slippage protection yet. But as soon as you put that Dex on a public network for real money, people are going to start sandwich attacking all of your trades. And so you need to kind of learn how sandwich attacks work, learn how the Mem pool works, learn how front running works, and then eventually into Mev and NFT flashbot rescues and some of that stuff. These are more advanced topics that you'll start to learn as you get farther out here. And ZK stuff, right? ZK is so hot right now. Do the circom starter kit.
00:43:29.918 - 00:44:15.986, Speaker B: Do a Circom with a smart contract. Build a game where there's a map and people are moving around on the map in zero knowledge so you can't actually see where the map is and where people are. There's a lot of fun things there. And if you want to go the other route, you want to get down into auditing. There's so many good new like, this did not exist last year, right? Auditing was still kind of very slow and I mean, it's still slow and expensive, but it's getting better because of some of these folks that are launching initiatives like Code Arena where people can go and they can help out. They can help with an audit. They can find even like gas efficiencies and they can get paid for it.
00:44:15.986 - 00:44:53.006, Speaker B: And someone else can also post a job and have their own smart contract get audited by a bunch of people. So it's just a really good kind of community around learning and auditing and making audits more accessible. I think Immunefi is probably a starter spot there. There's this really good, like how do I let me send this to you. How do I get started as a smart contract developer or as a smart contract auditor. Yeah, a lot of links in here that you'll find and you can kind of dig around. I have a lot of these links in other spots, too.
00:44:53.006 - 00:45:16.334, Speaker B: If you kind of go down a different rabbit hole, you might find a different, like there's the secure stuff, lots of fun stuff here. Oh, shout out to EVM from scratch. Also from winter. I think it's just EVM from scratch. Let's see. Can I copy that link? Yes. So lots of places to go after you start tinkering and getting into this.
00:45:16.334 - 00:45:23.398, Speaker B: I could do like a small deployment. I don't know. Maybe we can even start tackling some questions and leave that open.
00:45:23.564 - 00:45:37.914, Speaker A: Yeah, let's do some of the questions, maybe that people have added. This one here, a really common one, was around gas optimization. We'd love to hear your thoughts on that.
00:45:38.112 - 00:46:23.174, Speaker B: So I'm not great at gas optimization and there's weird things like in a for loop. Let's see if we had I want to just make a for loop real quick that shows an inefficient way. Let's say we have this for loop and we have some array and we're looping over the array. I'll just say it out loud. If you're looping over the array and in the for loop, you're checking the length of the array every time. That's expensive and it's like not intuitive that what you need to do is create a memory variable that's the length of the array and you're checking that memory variable every time. It's not intuitive.
00:46:23.174 - 00:47:08.418, Speaker B: That's what you need to do. But you just learn to do that by kind of seeing other people's solidity and tinkering with solidity and kind of just like learning how other people do it and paying attention on crypto, twitter. Basically half of the little tweaks that I've learned about gas optimization came from some random tweet from someone that I checked out and then went in here and started tinkering with. We can see, let's see if I go I want to see gas used real quick. Here we go. If I say hello and I send this in, we're going to see a transaction happen here. So that's how much gas it used, right? It used like 46,000 gas.
00:47:08.418 - 00:48:02.906, Speaker B: Now what I can do is I can get in here and I can tinker this and I can say, okay, what if we don't update the counter? So if we're not messing with the counter, what is our gas savings going to be? And there's way better ways to do this, but this is kind of like an obvious trial and error type way. Now if I say hello, it was actually more because it was already set. But if I set it a second time, yes, it's going to be less there, right? It's almost 5000 less and almost exactly 5000 less, probably for not having to update this counter. Right. So you can tinker with code and you can try to make your code more efficient. I'm not like a huge optimizer, so I don't have a great answer on where exactly I've learned all the little optimizations. But start by making it work, right? Make the for loop, loop through the thing correctly and do what you need to do.
00:48:02.906 - 00:48:42.226, Speaker B: And then you can find some of these optimizations later, especially if you post up for an audit. They're going to go through a bunch of things. For instance, if I have a variable here, this variable being immutable, notice how this Immutable here on this owner. So that means that that is going to get set once and it's never going to change again. If I take this Immutable out, it's going to cost more gas. But if I'm only going to set this once, I can make this Immutable and it's going to get set right here and never change again. And that's going to save a lot of gas.
00:48:42.226 - 00:49:18.642, Speaker B: And so if I didn't have this here and I'm not updating this owner, as soon as I take this to an auditor, he's going to be like Yo. Or she's going to be like Yo. This immutable is not like, you need to make this immutable so you can save a little gas making the contract. Do what you want it to do. And then they're shaving off a bunch of gas, right? And so I would say don't get hyper worried about shaving off gas yet. What you need to do is learn how to build things and make things do what you want them to do. But then understand that underneath the abstraction, there's tons of little things you can do.
00:49:18.642 - 00:49:50.666, Speaker B: And you see people like drop all the way into assembly here just to save 100 gas. But if it's something that thousands and thousands of people are going to be using and they're going to be spending hundreds of dollars a day on gas, those little changes are huge. But for you, you're probably not going to be writing the next OpenSea. I hope you are. That would be awesome if you were writing the next big platform. But right now you're just getting started and you're trying things out. So don't get too hyper focused on gas.
00:49:50.666 - 00:50:23.542, Speaker B: I think that also crypto Twitter has a little bit of a kink for gas optimization. So if you're in the crypto Twitter bubble, you're, you almost get gas. Shamed a little bit. Don't worry about gas shaming right now. Just make the thing do what you need to do and understand that there is this whole world of optimizers. They're trying to make things so super efficient. And it makes sense that once you have this platform that thousands of people are going to use.
00:50:23.542 - 00:50:53.970, Speaker B: But right now, you're just prototyping. You're building a quick app. Make the app do what it needs to do. With the caveat, though. And I think we talked about this earlier. We're not building an app that stores an entire blog post on chain, right? You just don't want to store all that stuff on chain. So when you are thinking about this maybe not tiny little gas optimizations, but think about the overall kind of landscape of your app and think about where things are stored.
00:50:53.970 - 00:51:43.534, Speaker B: If you need someone's name and address for some reason that should probably be, first of all, encrypted, but second of all, in IPFS. And something that you load from IPFS and something that's not stored directly in the contract. The only things that you need to be stored directly in the contract are things that you need to look at to make logic. Like the only reason you would have the person's name on chain is if you wanted to only drop tokens to someone who has the name Austin or something like that, right? You never really want to have a name string stored on chain. You probably want to have that stored somewhere else and load it from somewhere else. And that's probably the more gas optimization you should be thinking about right now. Only store what you need on chain.
00:51:43.534 - 00:52:17.514, Speaker B: But don't hyper optimize yet at first. Just get good at building and then know that there are going to be these hyper optimizations and little things you can do to your contract to make them more optimized. But don't go too deep on it yet. You'll learn those things as you start to get into it. And I think the key is just paying attention on crypto, Twitter and watching what other optimizers are doing and what they're up to. Am I not giving enough credit to the optimizers? I think we should give lots of optimizer credit.
00:52:17.632 - 00:52:22.926, Speaker A: I think that's great. But if you're getting started, I don't think that should be like something you should be focused on right now.
00:52:23.028 - 00:53:04.940, Speaker B: Don't let it stop you from building something, right? Don't be afraid that if I build this thing and it's inefficient, I'm going to get dunked on so hard on Twitter that it's not worth like that sucks, but don't do that. Don't worry about it. Build the thing and get out there and try it. Try to get users. Security is another thing, right? Yes, security is super important, right? This is like an always on. Like as soon as you deploy your contract, it's basically there forever for anyone to attack for the rest of time. So you want to be pretty sure that it's secure, right? So building a secure app is really hard.
00:53:04.940 - 00:53:46.994, Speaker B: It's sort of like when we did that, we built that thing and we said only the boss could do it, right? And we tested that, like, okay, an account that's not the boss comes in here and it doesn't work, and an account that is the boss comes in here and it does work. And that's a good initial test, but you probably want, like, a whole test suite, and you want to check all those things before going to production. But again, this is another thing like optimizing. First, make your contract, do what it needs to do. Build the thing. You obviously want to have security in mind as you're building this, but build the thing to do the thing you need and then make all these tests and make sure it's secure. And of course, don't go to Mainnet with something that you don't think is secure.
00:53:46.994 - 00:54:12.954, Speaker B: But also we still need to be prototyping building and trying things. Don't be afraid to try something. I think that's the key here is make sure it's not completely stopping you from building something. Yes, you want to build something that's secure. Yes, you want to build something that's gas optimized. But don't let security and optimization get in the way of trying something. Maybe on a testnet.
00:54:12.954 - 00:54:38.410, Speaker B: Right. There are certain things where you don't want to try things. If it's a contract with a million dollars on it on Main Net, you need to be very sure that that's correct. Right. But if you're playing around with a new NFT and it's a low limit NFT and they cost $20 apiece and you're only going to sell eight of them, I say yolo it and try it out. Not financial advice, but you should. Let's see, what else do we have? Best faucets.
00:54:38.410 - 00:55:05.910, Speaker B: I think Paradigm came out with a recent really good Faucet, right? Where is that? Let's see the paradigm faucet. Yeah, the multi paradigm multifaucet. That's where I would start. Also, if you just go to Ethereum.org and ask for Faucets, I'll bet you there are a lot there. Let's see, maybe I should do testnets. Oh man.
00:55:05.910 - 00:55:20.170, Speaker B: Oh yeah, there we go. And I bet there's some faucets here. Yes, there's some faucets there. Yes. So I would say paradigm ethereum.org and then kind of like the third step is like ask a friend kind of thing.
00:55:20.780 - 00:55:23.480, Speaker A: Yeah, I have Gurley East if anyone wants me too.
00:55:23.550 - 00:56:02.288, Speaker B: Gorli and Sepolia, load it up and oh, that's an interesting talk. As you're deploying these things, sometimes you'll need to deploy to a network because it already has, like we talked about VRF earlier. Let's say you're building a VRF, an app that uses randomness and you're using chainlink's VRF. There's only certain testnets where they have their testing infrastructure deployed. So you may end up having to deploy to one test net versus another. We're trying to move people towards Sepolia. So if you can go to Sepolia because Gorely is more like a validator network, people need the 32 ETH to run an example validator.
00:56:02.288 - 00:56:44.880, Speaker B: So that ETH is hard to get, whereas on Sepolia it works different. The ETH is more readily available, but it kind of sometimes depends on other infrastructure that you need in place. This is an interesting one. I don't know the answer to this. Will gas fees ever become reasonable on Ethereum main net? First of all, that's. A little bit subjective, but I think that as we see other L two S, I think even Vitalik has said he tries to say gas is not going to get any better, even though it probably will. He says that so we understand that maybe Ethereum is more like a settlement layer and these other layers higher up are going to have cheaper faster.
00:56:44.880 - 00:57:45.110, Speaker B: So I don't know if Ethereum will be reasonable in terms of gas, but I do know that it's a lot cheaper to deploy on optimism or Arbitrum and you get all of the same security. So maybe this question is kind of like kind of not the right question. And maybe it's more like which network should I be deploying to? And that's a much cooler question because then you start thinking about, well, how much do I want my users to have to pay? How long do I want the block times to be? What kind of security concerns do I have? Then you're starting maybe asking the right network of do I need to deploy to mainnet Ethereum or can I put this on polygon? So those are answers that that's maybe a better question. I don't know. I'm a small brain builder. I don't know where the world of Ethereum will go in the next few years and what gas fees will look like.
00:57:46.120 - 00:57:51.720, Speaker A: We had a couple of questions in the chat. So how do you prioritize learning new tools?
00:57:52.060 - 00:58:23.552, Speaker B: Yeah, okay. So I'm always focused on like, I'm building. I want to make sure I'm shipping things. I want to make sure that I'm like tinkering and shipping and building. So I try to go explore things, but then I come back to whatever works. And every once in a while I explore something new, like Wagme, and it changes the way I work. Or I explore something like how does GPT work and it changes how I work.
00:58:23.552 - 00:59:13.730, Speaker B: So I would say maybe like 80 20, right? 80% of the time I'm using the tool that I know works and I'm focusing on getting the job done and shipping the thing and getting it out the door. But then there's always time to go try. There's not always time, but I always try to make time to explore new tools, explore new paradigms. If you're familiar with JavaScript, you know that a new kind of thing comes out for JavaScript every day and there's so many different tools that it's impossible to keep up with. So you can kind of extrapolate that. I bet we'll see that with Ethereum too. Or we already maybe see that with Ethereum where there's already so many different tools that it's more like think about getting the thing shipped and work backwards from that.
00:59:13.730 - 00:59:46.092, Speaker B: A recent thing is Wagme, though. We were using Ethers and I would say that the documentation for me was really hard with Ethers. It was always hard to do something. I would say like, okay, I need to go read from a contract. I need to go read all the events from a contract. I feel like I would spend 15 minutes trying to figure out how to do that in the Ethers Docs. And if someone can come up with a better product where I can just grab a hook and say, I want these events and paste it in and I have the events, then that is definitely an innovation for me.
00:59:46.092 - 01:00:06.532, Speaker B: And I'm looking for a tool that'll do that. So as I even have hard things that happen within my good shipping stack, I'm on the prowl for something that can replace that and make that process easier. So shipping is easier for me. I don't know if that really answers the question, but the follow up question.
01:00:06.586 - 01:00:10.704, Speaker A: For that was, are you updating old projects based on the ecosystem updates?
01:00:10.832 - 01:01:04.896, Speaker B: Yeah, for sure. Okay, so I think also there are certain tool builders who build a tool that works and then they just keep working on that same tool and they make it so complex and so thick and so much to it. If you build a good tool that works well, you should probably just have that tool ready to go and you should start focusing on maybe like the next iteration of the tool. And I think I do that a lot. Where Scaffold ETH worked really well, but it started to slowly get old and Scaffold e Two came out and it has like, a more modern stack. I'm definitely trying to refresh old things like Speedrun ethereum uses old Scaffold ETH, but we'll be carving that out and it'll use new Scaffold ETH. So when you come back through to Takes the Dex Challenge in a month, you're probably going to see that it's using Rainbow Kit and some of the more up to date tools.
01:01:04.896 - 01:01:27.624, Speaker B: But if you dive in right now, you're going to learn all the things you need to learn. But it's using a six month old stack, so you do need to kind of keep things up to date because things are moving so fast. ETH build is not ETH build is a slow one. Yes, I see it there. I wish ETH Build let's go look at it real quick. ETH build is a fun one. I wish this was a love project of mine.
01:01:27.624 - 01:01:41.264, Speaker B: I loved building ETH Build, but I have not updated it and it just is not something that I've applied a lot of that was probably a private key. Even haven't really applied a bunch. Oh, it's okay. It's a small private key.
01:01:41.302 - 01:01:42.528, Speaker A: Not anything important.
01:01:42.614 - 01:01:54.580, Speaker B: Don't worry. No, it's just a mint. If you do that, it takes you to a mint. Okay. I have not updated this. It was a love project. I really enjoyed building it.
01:01:54.580 - 01:02:35.924, Speaker B: This is a great way to kind of visualize. So in this case, we're generating a private key, and from that is a public address. And you can kind of see, like this is all it takes to create an account on Ethereum. And this is a really fun way to visualize how to maybe sign and recover some message, right? You can plug that private key in, you could plug some message in and then that'll go across the network with a signature and then that will get verified on the other side. If I say, hello world, let's see, let's just do it. Oh man, there's my message, there's my signature. If I plug those in, it goes across the network and I plug them in here, it's going to recover to the address that signed it.
01:02:35.924 - 01:03:18.220, Speaker B: Right? And if anything changes there, let's see. Sorry, this is definitely a side quest. Put this here and it's the same. But if anything changes, if I change that F to an E, you'll notice the address is different now, right? But if I go back to the F, then it proves that, sure enough, this address signed this message and here's the signature. And we can use cryptography to prove that. So long winded way of saying, no, I'm not updating ETH build, but ETH build is around for you to tinker. And maybe one day I'll get back in here and give this a refresh.
01:03:18.220 - 01:03:52.696, Speaker B: But I only have so much time and I'm focused mainly on dev onboarding education and building. And I think that scaffolding two does. That the best. But there are some of these other tools that I haven't really okay, this is a long question. Holy moly. Does Scaffold, Ether, any other framework, automate setting up a light client? I don't think so. Yeah, I don't think so.
01:03:52.696 - 01:04:15.228, Speaker B: I think running a client like, there are things like DAP node. DAP node that make running a client easier. But I don't know of anything that makes running a light client easier. Sorry, that's probably not there's probably more to that. That's a long question too.
01:04:15.394 - 01:04:19.876, Speaker A: We had another one. What's the difference or limitations of testing on Sepolio?
01:04:19.928 - 01:05:12.428, Speaker B: Oh, sure, yeah. First of all, when it's a test network and there's not real money at stake, you kind of don't get the real effect of a real network. You could put $100 of Sepolia in some private key and then you could share that private key on GitHub and your money is probably going to stay in there. Whereas if you had $100 on Mainnet and you shared that private key, it would disappear immediately. So there's certain adversarial aspects that you don't have on a test network. But also we kind of alluded to this earlier is also the infrastructure around you. When you deploy to Mainnet, you have all these different composable elements like DEXes and VRF and automation like Gelato.
01:05:12.428 - 01:05:34.224, Speaker B: You have all of these things running on a testnet. You may not have some of those things. Just diving into that VRF example again, let's just find out. Let's find out. Chain link VRF. What testnet? Right? What testnet does Chainlink have VRF support for? There you go. Sepolia.
01:05:34.224 - 01:06:18.432, Speaker B: It looks like Sepolia and Gorely, which is great. That's awesome of them to do that and not have it on a single test network. Because you can imagine that if it was just on Gorely and all these people are trying to build validators on Gorely and testnet gorli actually has financial value, it might be hard to get, and so that could make your development harder. So I think the limitations of Sepolia or one of these newer test networks is that some of this other infrastructure isn't deployed yet and it's hard for you to test something in the wild until you actually go and deploy it in the wild. But also, check this out. There's this thing called mainnet forking. Ardhat, main net fork.
01:06:18.432 - 01:06:59.088, Speaker B: This is so cool. Basically how I've spun up this network here, where it's a local host network. Instead. I could say Yarn Fork, and it's basically going to take Main net and it's going to give me a local main network. So I could do things like, let's grab a Dex that's already deployed to Mainnet, let's fork Mainnet, and then let's give me the address that has all the liquidity and play around with it or something like that. You can impersonate accounts, you can steal money from other accounts, all on your local host, so you can set things up. But it's using Mainnet as the structure so you can fork Mainnet and try things.
01:06:59.088 - 01:07:09.270, Speaker B: And that gives you a little bit more of that composability that you would get from a public network or a bigger network. Let's see any of these other ones.
01:07:10.280 - 01:07:13.256, Speaker A: And Austin, we just have a few minutes left, so if there's anything you.
01:07:13.278 - 01:07:58.708, Speaker B: Feel like yeah, I think my main takeaway is you can go to Speedrun Ethereum and find all of this stuff. If you go to the old Scaffold ETH, scaffold E two is right down here. I think my main takeaway is go get started and start tinkering. Like kind of really work through this phase if you haven't yet, where you're grabbing stuff from solidity by example and pasting it into Scaffold ETH and Tinkering. Learn the language, start building things that are bigger than just the speedrun, start showing them off on Twitter and just keep learning and keep building. And I think just get in a habit of shipping things and everything else will fall into place. Cool.
01:07:58.794 - 01:08:22.830, Speaker A: Thank you. That's super helpful. And then we also had yeah, that was awesome. And then a reminder, this is recorded so you can reference it later. Hit us up if you have any additional questions. Also, Sammy from Atlas, he offered to do office hours if you just want to reach out to him over Twitter. So that was really nice of him.
01:08:22.830 - 01:08:36.530, Speaker A: One thing that I just love about the Ethereum community is people are just so open to helping each other out and connecting so that's just never feel worried about asking people questions. Anything else?
01:08:37.460 - 01:09:07.244, Speaker B: I thought I would just like real quick show that you can deploy this to a testnet. Since we were talking about Sepolia and Gorely, I figured I would maybe try to deploy this to Sepolia real quick. So I'm going to use a punk wallet. This is at Punkwallet IO. It's built with Scaffold ETH, but it's basically just a wallet that you can have in your phone. And I'm going to send some Sepolia to a deployer address. So I did a yarn generate right here.
01:09:07.244 - 01:09:32.756, Speaker B: Generate basically creates a local mnemonic for you. You'll see some developers copy and pasting private keys around in environment files. You really don't want to ever touch that environment file or even show it off. So this Yarn generate kind of creates that env file in the background. And then I went and funded it with some Sepolia. So now I can do a yarn deploy. But now we're going to add one extra thing.
01:09:32.756 - 01:10:04.572, Speaker B: We're going to say network Sepolia. Okay, so now instead of deploying our app to our local blockchain, we're now deploying it out to a public network. And then what we'll do once this goes, I think we have like 15 2nd block times there. It deployed. If we go look at our app, it's still on hard hat because we need to go edit one other thing and it's this Scaffold ETH Config. Well man, I'm way zoomed in. Let me zoom out a little bit.
01:10:04.572 - 01:10:31.364, Speaker B: Okay, we're going to the Scaffold ETH config file right here and this is where we update the chain for our front end. And I'm going to change it to Sepolia. Wait, can I just do like tab completion? No, wait, yes. Chains. Oh man. The best part about TypeScript is it should just fill that in. Yeah, it did.
01:10:31.364 - 01:11:04.252, Speaker B: Okay, Sepolia and then if I hit save, the whole app that I've deployed now is on Sepolia instead of localhost. And now I'm going to connect in my MetaMask. Right, as soon as you go to a public network, you can start connecting in your MetaMask. So now our app is live on Sepolia and I can set the greeting, hello world. And I can actually send this on Sepolia with a MetaMask thing. There we go. And the last thing I would do is I would do a Yarn Versaille and I would put this out on Versaille.
01:11:04.252 - 01:11:41.096, Speaker B: It would take my next JS app and it would deploy it to Versaille. And I could give you a URL that you could go to. So yarn generate and yarn deploy out to Sepolia. Change that one file so our app points at Sepolia and then do a Yarn Versaille and push your front end out to Versailles. So then you can give someone a URL and you basically deployed your app. Obviously you probably don't want this UI for your end user. You'll end up building some kind of pretty UI where they can do the same thing, where they say, hello, world, and they make a transaction, but it just looks a lot prettier.
01:11:41.096 - 01:12:23.524, Speaker B: And you can do that with your Scaffold ETH as you go. But from the start, you can just use this for now and tinker around. But what I was showing, where I was tinkering, you're really just minutes away from going to a public network. If you want to, at any time, you create that deploy account and you yarn deploy it to whatever network you want. And then you yarn Versaille, and that pushes out your front end. And you'll have a URL that you can share with your friends. So as you're getting started with Scaffold ETH with Speedrun Ethereum, even though you're getting in this local host loop, it's really easy to deploy an app live and give them a URL where they can go interact with your smart contracts.
01:12:23.524 - 01:12:31.752, Speaker B: So go check it out. Try it out. Speedrun ethereum go be an ETH, Dev. Yes.
01:12:31.806 - 01:12:37.312, Speaker A: Hopefully this gets people excited to get started. Thank you so much, Austin. You're the best.
01:12:37.446 - 01:12:38.480, Speaker B: Thank you for having me.
01:12:38.550 - 01:12:47.200, Speaker A: In a year. I'm sure a lot will have changed by then. Cool. Well, I think that's it for now. Thank you, everyone, for your questions and for attending.
01:12:47.540 - 01:12:48.796, Speaker B: Thank you. Hearts.
01:12:48.828 - 01:12:49.116, Speaker A: Hearts.
01:12:49.148 - 01:12:54.670, Speaker B: Hearts. Okay, bye bye. Thank you.
