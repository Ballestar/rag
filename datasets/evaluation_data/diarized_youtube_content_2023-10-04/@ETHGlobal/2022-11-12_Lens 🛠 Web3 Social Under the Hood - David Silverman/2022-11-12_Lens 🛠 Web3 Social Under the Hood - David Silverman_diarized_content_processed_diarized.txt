00:00:06.570 - 00:00:06.906, Speaker A: GM.
00:00:06.938 - 00:00:07.920, Speaker B: GM, everyone.
00:00:09.410 - 00:00:10.160, Speaker A: Yeah.
00:00:11.010 - 00:00:41.494, Speaker B: So, I'm David, I'm a Product Manager from Ave Companies, where I work on our social products, including Lens Protocol, and want to talk to you all today to go a bit under the hood first into why we felt it was needed to build Lens. And the problem lens is kind of trying to solve why blockchain is really the only solution. We have a little bit about the Lens architecture and then closing out with the Lens API, which is one of the best ways to build with Lens and to build this new class of Web Three apps we call the experience layer.
00:00:41.494 - 00:00:54.366, Speaker B: Fancy marketing term. So the problem statement, web Two social media is fundamentally broken. Let's think about the login flow for the average app.
00:00:54.366 - 00:01:04.842, Speaker B: When you sign into Facebook, you're authenticating to Facebook. They're then kind of looking up your data in the database, taking it and rendering an experience. That data is centralized.
00:01:04.842 - 00:01:10.782, Speaker B: It is not portable. Facebook has no incentive to make it portable. It is their monetary stream.
00:01:10.782 - 00:01:43.946, Speaker B: All they really want to do is make sure they're getting more data they can then use to monetize further. And Snapchat has the same experience and LinkedIn has the same experience and YouTube has the same experience and TikTok has the same experience as does Rip Twitter. And the difference of what we're going for with Web Three is we want to kind of make it where you own your content, you bring it to an application so that it is fully portable and that really makes networks beholden to the users as opposed to users being beholden to the network.
00:01:43.946 - 00:02:04.558, Speaker B: In Web Three, in a Lens application, which is fundamentally different, you are not just authenticating with the application, but you are bringing the Identifier so that it can find your data, so you can bring it your data. I sign into an application by bringing it data and then, and only then, can it render experience. The data is in this kind of more public area, which means it is forkable.
00:02:04.558 - 00:02:12.034, Speaker B: I can switch experiences at will. Experience can specialize to different types of users. We've already started to see this in the Lens ecosystem.
00:02:12.034 - 00:02:34.000, Speaker B: There are apps that specialize for creators, people who create content, and there are apps that are specialized for people who are trying to curate content. And there are apps that are specialized people trying to consume content. And because it is a shared database that is user owned, it is not the same company, it is not the same development team building all of those which causes for better experiences for everyone.
00:02:34.000 - 00:02:53.086, Speaker B: So, in sum, Web Three social is about bringing power back to the user. So we are going to lower the barrier for developers by making it really easy to build social apps and tools on a composable decentralized social graph. And the key thing as a developer, you get to focus on the user experience and not customer acquisition.
00:02:53.086 - 00:03:08.438, Speaker B: The name Lens is named after this plant. Like the Lens Caleris, it fertilizes the soil, allowing other plants to grow alongside it. Lens apps want all of the apps in the ecosystem to do well because data generated on one app is available to a different application.
00:03:08.438 - 00:03:20.614, Speaker B: As long as you're in the Lens ecosystem, everybody wins. It is a collaborative game, not a zero sum game for creators. You get to own the links between yourself and your community and you are able to move anywhere with ease.
00:03:20.614 - 00:03:33.706, Speaker B: Pick the creator tool that you want and distribute to your users at the platform they are using, not just the one where your creator tool lives. So how are we actually building this? Well, we are on a blockchain. We are live on polygon.
00:03:33.706 - 00:03:44.078, Speaker B: Today we have a profile NFT. The profile NFT is minted and it has a publications array that you get to post to. We'll come back to Posts in a quick minute.
00:03:44.078 - 00:03:55.186, Speaker B: That profile NFT has this thing called a follow logic that emits follow NFTs. So you get a follow NFT by following me. David EV Lens and it gets dynamically updated with Posts.
00:03:55.186 - 00:04:08.054, Speaker B: You can always see the latest thing that I have published. The follow NFT includes built in governance and delegation so I can set up mini votes for my community. Maybe if you want to see me talk more about Lens, maybe you want to hear me give more hot takes about blockchain.
00:04:08.054 - 00:04:15.574, Speaker B: I get to pull my followers for what they want to do. Token IDs are based on the order of following. Bradley in the audience was my first follower.
00:04:15.574 - 00:04:28.414, Speaker B: Christina in my audience was my 10th follower and that has built in value if I pop off and they can be able to trade that in the future. Posts, comments and mirrors. They are part of my profile NFT.
00:04:28.414 - 00:04:39.234, Speaker B: They are part of who I am. As I move around with my profile, so does my content come with me. And they have this awesome thing called a collect function which allows them to be instantly monetized.
00:04:39.234 - 00:05:00.426, Speaker B: I can set the rules for how collect NFTs are minted from a publication and that gives me a way to determine my own as a creator, determine my own monetization logic. One of the key things and design principles of Lens is we are as agnostic as possible to give as much power to developers. Nowhere in any of this did I specify where you need to store your data.
00:05:00.426 - 00:05:18.066, Speaker B: We let you pick if you want IPFS, for example, shout out to the sponsor AR Weave or you can even go centralized links with S Three. We also don't enforce any particular encryption scheme. You as the developer or the user can pick privacy you want or you can leave things fully public.
00:05:18.066 - 00:05:31.058, Speaker B: The option is up to you. We are just providing a minimal spec to help organize the blockchain data into a social graph. And so far in our private beta, the community has really loved the Lensverse.
00:05:31.058 - 00:05:55.550, Speaker B: We have over 90,000 profiles, they have a closer connectiveness than most of the major social networks. And we are seeing this concept of collect really take off as creators like to experiment with brand new collection of user generated content and micro purchases. And there are tons of different people you can follow, from major content creators like GMoney to DAOs, like index cooperative to blockchains themselves like polygon.
00:05:55.550 - 00:06:14.302, Speaker B: Now, over to the Lens API, which is the fastest way to build your own social application or use Lens data at all. Now, to make it clear, Lens is entirely on chain. Anyone can access the data as they see fit your node directly through a service like Alchemy or querying something like the graph.
00:06:14.302 - 00:06:22.550, Speaker B: However, we all for our own API. With the Lens API, you don't need to worry about indexing, querying, reorgs or fetching data. That's all done for you.
00:06:22.550 - 00:06:33.034, Speaker B: You don't have to worry about prefilling contract data or validating it, or using weird with SIG methods. Our real goal is to offer something that is easy to approach for development. It looks and feels like a web.
00:06:33.034 - 00:06:40.906, Speaker B: Two GraphQL API. It is simple to interact with the protocol and there is really not a huge learning curve. You can just focus on the stuff you want to build.
00:06:40.906 - 00:06:54.734, Speaker B: In fact, some of the easiest things you can do to build is use a follow on Lens button, very similar to the kind of ones we have for existing social today. Or a sign in with Lens button. This wraps sign in with Ethereum, so you're still getting validation that the user owns the address.
00:06:54.734 - 00:07:06.514, Speaker B: But additionally, the Lens API will return all of the data it has on that user. Their Lens data, their ENS, their Poops, their proof of humanity or WorldCoin status. And more and plenty of people are using this today.
00:07:06.514 - 00:07:27.930, Speaker B: Here's, ETH Global on their homepage has a link to their Lens profile as well as a way to follow them through the Lens API. And it's a great way to see content such as this talk and many of the others for Ethsf. So what's next and where are we going on the middleware layer? We are going to be adding more and more data providers to allow you, as devs to build holistic experiences.
00:07:27.930 - 00:07:35.754, Speaker B: We already said enspot proof of humanity and WorldCoin. We have many more coming out. If there's a protocol you want, please stop by the table.
00:07:35.754 - 00:07:49.614, Speaker B: We really want to build it to help give you guys a powerful development tool for experiences. We have this really awesome concept called Dispatcher and Relay, which allow applications to pay for gas on behalf of the users. It allows seamless onboarding for the masses.
00:07:49.614 - 00:08:17.206, Speaker B: And already we have done four and a half million transactions since we released this feature in June, making the Lens API one of the largest EVM gasless relays. Additionally, we have plenty of teams that are working to extend the Lens contracts to support multi chain as well as off chain data to be read on polygon. Using really powerful protocols such as layer Zero and chainlink CCIP and Dbridge, you'll be able to read data from multiple chains onto polygon.
00:08:17.206 - 00:08:31.546, Speaker B: So you'll have the ability to say you can only comment on my post if you hold a board. Ape, you can only follow me if you hold more than 15 SDK. Ave and the real desire is we are trying to power this thing that we call the Experience layer.
00:08:31.546 - 00:08:58.098, Speaker B: This next generation of applications, the Lens API is stitching together data from Lens Live Peer Proof of Humanity, ENS WorldCoin Poop, Xmtp, Push and Aave itself in order to provide a data layer for Udevs to pick and choose what applications, regardless of chain, to put into the experience that you craft. Because at the end of the day, we have experiences. There are tons of different applications here, but they all want to have different UIs.
00:08:58.098 - 00:09:00.710, Speaker B: For Ave. You can go to app. Ave.com
00:09:00.710 - 00:09:10.150, Speaker B: zapper rainbow InstaDApp coinbase for Lens. There are a ton live today. Lens friends lensda lens tube favor orb Lenster.
00:09:10.150 - 00:09:22.842, Speaker B: There are plenty of different UIs that are all using the same contracts under the hood. And for us, this is kind of the evolution of experiences that we think is going to be coming to Web Three. Things started out with singular app single source.
00:09:22.842 - 00:09:43.190, Speaker B: You can see that on the uniswap application, right? The only thing I can do is interact with the uniswap system of contracts and it's only on a singular chain. There's more current experiences like the Ave UI, which add in a few apps together. For example, the repay with collateral function stitches in paraswap to allow for a slightly better experience, but it's still fundamentally single chain.
00:09:43.190 - 00:09:59.030, Speaker B: Here's a screenshot from one of a Lens application's Lenster. It is stitching together data from multiple applications across multiple chains. There's ENS on mainnet lens, on polygon WorldCoin, on polygon poop on gnosis chain, and many more just in this one frame.
00:09:59.030 - 00:10:12.522, Speaker B: That's not even the entire screen. And we really think that this is the future of Web Three applications. Additionally, we are upgrading our API to continuously provide powerful features to allow you to create Web Two native feeling experiences.
00:10:12.522 - 00:10:28.426, Speaker B: The first thing is we believe that Gas is an application cost. AWS bills are part of a business cost for an application, and Gas is the Web Three equivalent. We believe that you should be building it into your business model and therefore our contracts offer metadata as well as permit as well as this concept called dispatcher.
00:10:28.426 - 00:10:39.880, Speaker B: And many of the Lens apps have opted into this UX again 4.4 and a half million Gasless transactions through our API, representing an overwhelming majority of Lens usage. And it's not costing a lot.
00:10:39.880 - 00:11:07.150, Speaker B: We also have this thing called the Optimistic UI or the optimistic API, something we just released that causes users and apps not to know there is a blockchain running in the background. Apps are given an optimistic assumption that certain write calls succeed. If I follow you on Lens, on a Lens app using the Lens Optimistic API, then any app reading from the optimistic API will assume the follow succeeds and upgrade regardless of hard refreshing the session or otherwise.
00:11:07.150 - 00:11:28.098, Speaker B: This allows zero wait time to reflect state changes to users and gives an incredible feeling of responsiveness. And we are going to be expanding this to many more calls in the Lens system and hope that other developers use this on their contracts or their SDKs. Lastly, unified queries APIs that return data from multiple applications across multiple chains.
00:11:28.098 - 00:11:45.674, Speaker B: We've already integrated this into our profile function. With a singular call you can get Lens Poop, ENS, WorldCoin Poh, civil data and more in a singular call. Those contracts are on multiple different chains, including off chain data and that is something that we want to expand on more for developers.
00:11:45.674 - 00:11:58.500, Speaker B: You guys deserve contextual data regardless of where the source chain is and we hope to continue building on that path. So that is what I have to talk about today. Happy to have plenty of time for questions.
00:11:58.870 - 00:11:59.620, Speaker A: Awesome.
00:12:07.990 - 00:12:35.402, Speaker B: Any questions? Where can I go to get a Lens profile? If you want to get a Lens profile, you can stop by the booth. We are still in closed beta, but we have tons of spots left and want to make sure that anyone building today can get one. So the first question is where are the contracts deployed? Are we only on Polygon or will we go multi chain? So the Lens contracts are open source, they're EVM, they can go anywhere.
00:12:35.402 - 00:12:46.518, Speaker B: We have a deployment that we run on Polygon. We also have two testnets, both on Polygon Mumbai, one with zero permissions on it and one that mirrors the main net. We are happy on polygon.
00:12:46.518 - 00:12:58.200, Speaker B: It is a chain that is scalable enough to handle the load of Lens. It is a massive, massive number of transactions and Polygon has shown to be able to hold our scalability. We look forward to continue building there.
00:12:58.200 - 00:13:44.880, Speaker B: Yeah, so we have a creator program where you can email creators at Lens XYZ for creator grants and we have developer grants at ecosystem at Lens XYZ we want to help make sure that you help build awesome tools as part of this ecosystem. So the question was about closed beta. Closed beta for now just means the actual minting of profiles is limited for a variety of reasons.
00:13:44.880 - 00:14:08.322, Speaker B: But basically that means that once you have a Lens profile you can use any of the Lens applications in the ecosystem. On mainnet, however no, until the mint block is removed, you're presumably in closed beta as well. The devs are working their best to do things to relieve it.
00:14:08.322 - 00:14:12.100, Speaker B: We are hoping to end it sometime early in the next year.
00:14:16.310 - 00:14:17.060, Speaker A: Yeah.
00:14:25.380 - 00:14:30.484, Speaker B: So the Lens contracts themselves are and I'll go to kind of the side I think that shows it out.
00:14:30.522 - 00:14:30.772, Speaker A: Yeah.
00:14:30.826 - 00:14:42.810, Speaker B: So the Lens contracts themselves are built on polygon and there are ways in which you can extend them. We call them modules, collect module, follow module, and reference module. These are ways for developers to hook in their own contracts into the Lens system.
00:14:42.810 - 00:14:52.524, Speaker B: Lens does not itself specify any bridges for receiving or sending cross chain data. You can plug in any bridge you want. This follows the same design pattern we used in Jave V three.
00:14:52.524 - 00:15:06.064, Speaker B: So we know that there are active teams building integrations with layer zero. There are teams building integrations with chain link CCIP, another one of these messaging bridge protocols, as well as Dbridge and Stargate. So Lens is agnostic to the Bridging solution used.
00:15:06.064 - 00:15:32.456, Speaker B: Their teams. You, as the application developer, can pick which one you trust. So the roadmap, I think for us, the roadmap is more we're trying to be this kind of we want to be the social account, the account structure that is used.
00:15:32.456 - 00:15:44.888, Speaker B: We're just here to kind of provide a minimal structure to allow for anyone to build social graph powered applications. This could be as simple as including a little bit more contextual data when you sign in. So oh, here's a cover photo, a profile image.
00:15:44.888 - 00:16:00.452, Speaker B: I know what people follow, so I can maybe give better recommendations. I can see my positions or my friends positions or people's who I follow's positions in a DeFi app for an NFT project. It might be able to I can recommend what you might want to mint or what you might want to buy in a marketplace based on what you follow.
00:16:00.452 - 00:16:14.096, Speaker B: We're here to kind of provide information. And again, because Lens as a protocol is intentionally incomplete, it requires other things to be plugged into it. And so we're here for maximum integration, as we mentioned.
00:16:14.096 - 00:16:37.240, Speaker B: I think just this week we announced integration with Xmtp to allow end to end encrypted direct messages between Lens profiles, again showing kind of the extensibility of the project. Awesome. I think I'm at time Xmtp will be getting built into the API.
00:16:37.240 - 00:16:54.800, Speaker B: So the API kind of sits on top of it's not any contract, right? It just is a series of indexers and plugs into various different protocols. So at some point, Xmtp will be built into the API to allow applications to easily pull conversations and other relevant information based on an authenticated user.
00:16:55.780 - 00:16:56.530, Speaker A: Yeah.
00:17:00.710 - 00:17:08.194, Speaker B: I believe folks from developer Dao have built a subgraph that you can query. We also do recommend that you use the API is open. There is no key.
00:17:08.194 - 00:17:18.200, Speaker B: There is no nothing to query. It no account needed. It is able to kind of stay up to date much faster than a traditional subgraph to allow you to get real time information from the social graph itself.
00:17:21.070 - 00:17:21.820, Speaker A: Yeah.
00:17:37.110 - 00:17:48.054, Speaker B: So the question was about other Web Three social options. I would say that Lens is one of the few true Web Three social protocols that exist. We are directly on chain, we are directly interoperable with other protocols.
00:17:48.054 - 00:18:08.510, Speaker B: Some people have taken the approach of building your own blockchain or keeping your data off chain entirely. We believe that by being on chain, by being truly interoperable, by staying committed to Web Three principles, that is kind of the ethos behind Lens. And I don't think we have seen others build in that kind of mindset being fully decentralized on chain.
00:18:10.710 - 00:18:11.460, Speaker A: Yeah.
00:18:14.310 - 00:18:43.014, Speaker B: So we have an integration with ENS where through the Lens XYZ ENS name, you can query any data about our various data about a Lens profile. So I'm David EV Lens. If I want, I can query using ENS's off chain resolver Davidv Lens XYZ and I will pull up my profile picture on Lens, my cover photo, my avatar, my name, location, other various data that I have put into my Lens profile can be queried via ENS.
00:18:43.014 - 00:19:18.386, Speaker B: If you want an alternative to the API or if you're already using ENS resolvers in your project. And then there's also in the Lens API itself, there's an integration that will look up the profile holding a Lens profile and let you know what its ENS is. If reverse resolution is set or what other names resolve to it to set reverse resolution.
00:19:18.386 - 00:19:26.010, Speaker B: I would talk to the ENS team. You can find that out in their documentation. There's a simple contract call you can do on Chain.
00:19:26.010 - 00:19:27.850, Speaker B: There's a registry.
00:19:36.330 - 00:19:36.742, Speaker A: Yes.
00:19:36.796 - 00:19:48.940, Speaker B: The bounties we have there's a bounty for integrating the Lens API. Either sign with Lens, follow with Lens, the really simple integration. Let me see if I can find that example.
00:19:48.940 - 00:19:55.390, Speaker B: And then there are larger prizes for those that build the best kind of social application, the best use case with Lens.
00:19:55.890 - 00:19:56.254, Speaker A: Yes.
00:19:56.292 - 00:20:10.606, Speaker B: The easiest way to be eligible for prize is just very simply integrate either sign up with Lens, which is a wrapper of sign up with ethereum, or follow on Lens button. We even have visual examples and simple HTML links. I have to go back and look.
00:20:10.606 - 00:20:12.000, Speaker B: I don't know the top of my head.
00:20:17.080 - 00:20:17.830, Speaker A: Awesome.
00:20:18.200 - 00:20:24.640, Speaker B: Well, we'll be over at the booth, over by the hedges, by the main stage. And happy hacking, everyone. Bye.
