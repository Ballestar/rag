00:00:07.450 - 00:00:31.426, Speaker A: Awesome. Well, thank you all for coming. This is a talk on building with ERC six, five, one. It's going to be a little bit technically in depth. It's going to do we're going to chat a little bit about what ERC, Six Five One is, what you can do with it and then we kind of get hands on into how you can use it in your hackathon projects this week. So, yeah, obligatory intros. I'm Jaden, I'm one of the developers at Future Primitive, which is a Web three venture studio.
00:00:31.426 - 00:01:26.150, Speaker A: If you want to ping me this weekend for questions about, ERC, Six Five One that's my Twitter DMs are open, feel free to ask. Would love to help support anyone who's building ERC Six Five One related things. Yeah, we're feature Primitives, we build all sorts of crazy experiments with tokens. So we've done a lot of experimental NFT projects and ERC, Six Five One is a proposal that we proposed based on a lot of the work that we've been doing on trying to push the bounds of what can you do with NFTs? How can you give NFTs abilities beyond it just being an asset that's stored in your account and let them do things? So we've been doing a lot of crazy experiments with that and ERC, 66551 introduces a new concept called a token bound account. ERC Six Five One gives every single NFT that's ever existed, or ever will exist, its own wallet. Your NFT has its own unique wallet address and that means it can own other NFTs. It can own eat, they can own ERC 20s.
00:01:26.150 - 00:01:55.438, Speaker A: Your NFT can now own things natively because it has its own wallet address. It also means that you can use your NFT to interact with applications. Because your NFT has a wallet, your NFT can now do anything on chain that a wallet can do. So you could connect to OpenSea and trade NFTs as your NFT. Your NFT would own other NFTs that it buys and sells and trades on OpenSea. Or you can trade in coins or you can vote on proposals. Anything you can imagine doing with a wallet, your NFTs can now do too.
00:01:55.438 - 00:02:21.078, Speaker A: And this works with everything. Like these addresses you can see on my screen are real token bound account addresses for real NFTs. And I'll show you that real quick. So one thing if you want to start playing around with ERC Six Five One, that's really easy to do is if you want to see the token bound account address for an existing NFT, it's really easy. So this is the genesis CryptoKitty. This launched at ETH Waterloo six years ago, was when CryptoKitties launched. That's one of the first NFT projects.
00:02:21.078 - 00:02:44.498, Speaker A: So this is a really old NFT. Nobody's touched this NFT contract in ages. But this NFT has a token bound account via ERC six five one. And an easy way to find that is to just replace openc with tokenbound.org for any NFT, any, ERC, 721 NFT. And you'll find whoops I got to deal with viewport sizes or something. Here we go.
00:02:44.498 - 00:03:07.638, Speaker A: There we go. This is the NFT's wallet address. This is a unique wallet associated only with this NFT. And this wallet can only be used by the owner of the Genesis CryptoKitty. You can think of it like a Token gated nosa safe. Wherever the NFT goes, ownership of the wallet goes too. So this NFT owns this NFT via a Tokenbound account.
00:03:07.638 - 00:03:34.674, Speaker A: And so for any NFT you want to see the Tokenbound account up, you can just replace OpenSea with Tokenbound.org and you'll find it. So, yeah, every NFT from CryptoKitties onwards, the project you launched this weekend, it comes with a wallet. That means you can make assumptions that NFTs can own things that NFTs can do things, which is some really powerful things you can do in projects you're building. NFTs also have their own transaction history, which is kind of cool. You can see all the actions and NFTs done on either scan. So here's how it works.
00:03:34.674 - 00:04:10.650, Speaker A: So, ERC, Six Five One proposes a couple of new smart contract proposes a new smart contracts and a new account interface inside the EIP. So what you're seeing here, it's kind of like it'll expand as we go through it. But you're used to NFTs existing on chain, right? So NFTs exist as a smart contract. There can be many NFTs in one smart contract and usually there's a user that owns the NFT, right? So in this case, we have a 721 contract called Nftb and there's a Token with ID Four Five Six. And so this user owns Nftb number four, five, six. We're used to that. Everybody's kind of aware of NFTs are owned by wallets.
00:04:10.650 - 00:04:58.406, Speaker A: What ERC Six Five One introduces is a new smart contract called the ERC Six Five One Registry. And this registry is what gives every single NFT its unique address. You can query this registry with the Token contract and Token ID for any NFT and get back a unique wallet address that will be owned by that NFT. The Registry is a single entry point you can query for all of that data and it works with any NFT. The registry also deploys the smart contract at these addresses. So these Token bound accounts are really smart contract wallets that are owned by the NFT and that ownership by the NFT owner is enforced at the smart contract level. So when you ask the registry for an account address for your NFT, it'll give you back an account address that you know will only ever be owned by that NFT.
00:04:58.406 - 00:05:22.990, Speaker A: And so NFTs can own multiple accounts. In this case, token one two three on contract a owns two accounts. Token Four Five Six on Contract B owns one account and this account is managed by the holder of the NFT. So this user owns Token four, Five Six. That means that they have full root execution permissions on the account. They can do whatever they want with it, they can use it as a wallet. They can do anything you can do with a wallet.
00:05:22.990 - 00:05:52.330, Speaker A: But if they ever sell this token, everything in the wallet goes with the token. So when you sell the NFT, all of the things you've collected in the wallet go with it because it's really the NFT that owes the account. And then the final piece of this is the implementation. Every account is really just a proxy to an account implementation that implements a very minimal interface. And you can find all that in the EIP. But essentially the EIP provides a registry that everybody can query for account addresses for NFTs. And then it also provides a very minimal interface for implementations.
00:05:52.330 - 00:06:16.546, Speaker A: So that's it, it works on every EVM chain, wherever you're building. As long as it's EVM compatible, you can use it. You can also permissionlessly deploy that registry to the canonical address. It's fully decentralized, like we don't own it's in the IP. You can go nuts deploying it and it works with every NFT on every EVM compatible chain. And so you can now build applications, assuming that NFTs can own things and do things. From day zero, there's been lots of people who have been helping us build this out.
00:06:16.546 - 00:06:58.830, Speaker A: This kind of originated as a project that we were building on, but as we've started to speak with other folks and started to collaborate with other teams this is a list of a couple of the other companies that have been involved in helping refine the standard or building on the standard. We've got a working group of like 700 developers who are building on ERC, six, five one. If you want to join or ask questions, it's available to you this weekend. So, yeah, what you've seen already, there's a bunch of tooling that we've been building around ERC, six five one, that kind of core concept of NFTs having wallets. That's basically all you need to know to work with ERC, six five one. You don't need to do anything special on your NFT contracts. You can launch the most normal vanilla off the shelf template, NFT and it will come with a wallet.
00:06:58.830 - 00:07:20.994, Speaker A: That's all you need to know. All you need to know is your NFTs come with wallets now and there's a few ways that you can interact with them. One way you can interact with them is via the Tokenbound Explorer. So you saw this earlier when I went Tokenbound.org, when I replaced the openc URL. You can see on the Tokenbound Explorer the address for any NFT. So if I go back this tab here, this is the CryptoKitty.
00:07:20.994 - 00:08:03.846, Speaker A: I don't happen to own this CryptoKitty, but if I connect my wallet and go to my NFTs, you can see a list of NFTs that I own on chain. And so for any of these NFTs, I can go in here and I can see the account contents of the NFT. This is an NFT project that we released called Sapiens, which is one of the first collections to use this natively. But what happens is this Sapiens NFT owns these three NFTs and these three NFTs are actually clothing items that the NFT can equip. So you can see this background is an equippable item and this NFT has that background equipped onto its artwork. That's possible because this NFT owns this background token. But what's really cool is this NFT can own tokens that are from other collections, too.
00:08:03.846 - 00:08:39.722, Speaker A: So this NFT is not part of the clothing collection that we released. This is from a separate collection. But you can also equip this NFT as a piece of clothing onto your Sapient NFT. By giving NFTs wallets, we let NFTs own any assets. And you can build on top of this crazy composability layer like you can send any NFT you want to into another NFT. Another example here if I go and show you this is someone who've sent a whole bunch of stuff into their Sapiens NFT. You can see this NFT owns Azuki and it owns a doodle and it owns a moonbird, it owns a CryptoKit.
00:08:39.722 - 00:09:02.120, Speaker A: And this just works out of the box because the NFT has its own address and can receive any asset. Sorry, I got to fix a bug in the renderer currently on this page. But that's the ERC five by one explorer. You can go there, you can connect your wallet. You can think of it like Ether Scan for token bound accounts. For any NFT you can find its wallet address. You can see it here and that'll link you off to Ether Scan where you can see all the transactions it has done.
00:09:02.120 - 00:09:19.194, Speaker A: It'll also show you everything inside the wallets. And if you own the NFT, you can transfer things out. If I click this, I can transfer this NFT need to any other world. I can use this like a wallet through the Tokenbound.org interface. So that's one place you can go to start building on top of Tokenbound accounts. If you want to link out to this in your projects.
00:09:19.194 - 00:09:48.390, Speaker A: This is kind of like a good default place where people can play around with token bound accounts. But there's a hackathon. So we're going to want to build some cool, interesting new custom stuff this weekend. So we have a lot of tooling we've built to help you with doing that. The first and foremost is a Tokenbound SDK. So if you go NPM, install at tokenbound SDK that's the GitHub repo tokenbound SDK this is probably the easiest way to get started building front ends with ERC six, five one. You're just an NPM package away and you can query for the address.
00:09:48.390 - 00:10:17.220, Speaker A: For any existing NFT, you can deploy the smart contract at that address and you can interact with a smart contract at that address. If you're the owner of the NFT. So you can build all the experiences that you see on the Tokenboud site. You can build those into your DAP, and you can kind of build experiences on top of these wallets and use them as an additional wallet inside your DAP. So I can actually show you real quick. Let's see. Is this big enough for people to see? Can people kind of see what's going on here? Awesome.
00:10:17.220 - 00:10:43.560, Speaker A: So this is just a normal this is what you get when you do Wagme create app. Wagme is a great front end development framework. If you're bootstrapping a Web Three app, you can just run, I think it's NPM create Wagme and it'll spin you up this project. This is basically a super basic project, with the one exception that I've added, the Token bound SDK. I've done NPM install at Tokenbound SDK and now it's installed. So I just run this server real quick. Hello.
00:10:43.560 - 00:11:07.662, Speaker A: All right, so I'm running the development server. I should be able to spin it up locally, and fingers crossed that the Wi Fi works and it'll spin it up. There we go. So this is what you get when you just create a new Wagme project. It has some things out of the box. And you can see at the top, we've added this Token Bound account page. And so what you're seeing here is this is the address for the Sapiens project, the Sapiens that I showed you.
00:11:07.662 - 00:11:27.558, Speaker A: And this is the token ID. And this is the chain ID. So every EVM chain is a chain ID. Token Bound accounts are tied to a chain ID. And so with these three inputs, this is the address I get back from the Token bound SDK. So in here, in my react component, it's pretty easy. I just added in the Token contract the Token ID, and that's it.
00:11:27.558 - 00:11:52.598, Speaker A: It uses the chain ID of the provider I'm connected with. And down here, I instantiate a new Token Bound client, passing it in the provider that I'm working with. In the front end application, if you're using VM, it's really easy to grab that. It's got a nice little hook. If you're using Ethers or something, you can pass that in as well. So I instantiate the Token Bound client here and then it's one call away. I call Tokenbound Getaccount and this gives me back the Token Bound account address for this NFT.
00:11:52.598 - 00:12:27.974, Speaker A: And you'll see, this address here is the same address that you see in this little iframe here, sapiens number zero. And we're passing in Sapiens number zero, we get back the same Token Val account address. So you can query that address really easily without having to know anything about how Token Bound works or how ERC six five works under the hood. You can get that address information into your applications and then you can start using it. There are other methods on the SDK. We have a Docs page at docs tokenbound.org where you can see all the methods on the SDK.
00:12:27.974 - 00:12:54.370, Speaker A: You can deploy the account, you can execute calls against the account. It's all pretty much the same. You pass in the provider from your front end application and you can start executing against those accounts. So that's the SDK, it's an NPM installed away. You can start building 6551 related stuff into your front end without having to worry about how any of the smart contracts work behind the scenes. All that's taken care of for you. You can just use the NFTs that your application is already interacting with and interact with their wallets.
00:12:54.370 - 00:13:13.274, Speaker A: That's one way to build on top of the Token bounds. It's tokenbound SDK GitHub Another thing we provide is a wallet implementation. So in 6551 you can actually bring your own wallet implementation. You don't need to use ours, you don't need to use anyone's. It's fully decentralized. You can build your own wallet for your NFTs. We provide one that's out of the box.
00:13:13.274 - 00:13:48.030, Speaker A: It's got some of the nice things you'll expect from a smart contract wallet. Like four, three, seven support, 1271 support, so you can sign messages, some stuff around delegation and things like that. So it's kind of a fully featured extensible wallet that you can build on top of. And if you're using the SDK, you already are using this out of the box. If you're using the Total Mat Explorer, you're using this out of the box. But this is a fully open source wallet implementation that you can start using if you want to hack on building a custom ERC six five one account implementation. If you want to add custom features to the wallets for your NFTs, you can fork this and go nuts and build a custom implementation.
00:13:48.030 - 00:14:08.342, Speaker A: That's the repo for it. Token valid contracts. If you're using the SDK, you don't have to worry about it, but you can totally interact directly with this. I'll show you another demo of this if I just switch to my contracts directory. I'm not sure how many of you are familiar with Forge, but this is Foundry. This is Forge, the smart contract development toolkit. This is a script.
00:14:08.342 - 00:14:38.162, Speaker A: So this is a smart contract, but I'm going to run it locally. But you can use the same code inside of your smart contract accounts or inside of your smart contracts that you're building this weekend. So getting the Token mount account address for an NFT is as simple as using this ERC six five one account lib from the ERC reference repo and passing in pretty much the same data that you passed in the SDK. There's two extra parameters. One is the registry address. This is the canonical registry is deployed on every chain. So this is the registry address.
00:14:38.162 - 00:14:59.830, Speaker A: The second is a wallet implementation address. So this is using our wallet implementation. Again, it's deployed across chains. You can feel free to use it if you're going to do a custom implementation. You would pass your own custom implementation address here and then the rest is the details about the NFT. So a chain ID of one because it's on main net, the contract address of the NFT and the token ID which is zero. And then the final argument is assault.
00:14:59.830 - 00:15:31.478, Speaker A: And so by default this is zero. You can use the account with assault of zero. But if you're used to using wallets within MetaMask where you have one seed phrase but you can have many wallets, it's the same kind of thing. You can have one implementation for a wallet, but you can have many wallets for an NFT. Using that implementation, just change the value of salt. So these are the default values, these two for the registry and token bound account address and then zero for the salt. And then the middle three are your token information, the chain ID, token contract and token ID.
00:15:31.478 - 00:16:25.970, Speaker A: And so if I run this, all this is going to do is calculate the account address of the NFT locally and log it out. If I run this script using Forge, it'll run this and then it gives me back the same address xerox 5416 because we're calculating the address for my NFT and the same kind of thing. You can call directly into the account contract from your smart contracts and use the execute fault call functions or the other functions on the total amount account. So you can have smart contracts that are aware of NFTs, that are aware of the NFT's wallets and do really interesting things with them. One cool thing about if you're doing this with either the SDK or the Solidity library is you're not actually calling into any contracts. You're not making an RPC call when you calculate the address for an NFT. You're not making a contract call when you use Solidity to calculate the address because addresses can be statically computed by the client.
00:16:25.970 - 00:17:01.838, Speaker A: You don't actually need to make that network call, it just happens locally, which is kind of a cool benefit that you get with six five one anyways. So there's a client SDK that you can use in your front end apps. There's a Solidity SDK, you can pull it in from the ERC six five one repo. You can also pull in our wallet contracts and start building in your application. So that's talking about wallet. One other thing we have is an iframe. So you probably saw when I was playing around with the Sapiens NFT that there's this little thing in the bottom that shows you the contents of the wallet, shows you the assets it owns, it shows you the wallet address.
00:17:01.838 - 00:17:39.870, Speaker A: This is something we built for the Sapiens project because it's really useful if you're going to be on OpenSea trading NFTs to see the contents of the NFT's wallet and to see its wallet address. Like I can come in here and I can copy and paste the wallet and then I can go over to Whoops, I can go over to Etherscan, I can paste. It's really nice to have this information accessible in OpenSea. This is all open source, so if you want to use this iframe in your projects, it's really simple. There is a repo here, it's Tokenbauframe. I believe if you chat with Ray afterwards, there's also a URL that you can do it. What you do is when you're creating an NFT, you can pass in a custom animation URL field in the metadata and that can point to a full website.
00:17:39.870 - 00:18:11.874, Speaker A: So if you pass in an animation URL and you use the Token mount iframe you'll get the artwork of your NFT rendered, but this nice little account overlay that shows you the contents of the account and the account address within the NFT. And so that's a nice little know. In the interim, before OpenSea and all the other marketplaces support Tokenbound accounts natively, you can build in support for it at a visual level using the iframe. So that's at Tokenbound iframe on GitHub again, we'll be here all weekend, so come find us and we can walk you through using that. Yeah. Finally. Docs.
00:18:11.874 - 00:18:49.038, Speaker A: Tokenbound.org. So this is where all the information you'll need to work with Tokenbound accounts is. The contract addresses for both the Registry and for the implementations, some information on using the SDKs, the Iframe. So anything you want to know about Token bound accounts or using the Token bound tools is at docs turtlebat.org. And if you're interested in the actual EIP spec itself, you can look that up at EIP six five one. It should be on the EIP site and you can read through here. This is kind of a really in depth exactly how it works behind the scenes, deep into some of the theories of it and all of the ways that the smart contracts are structured for building launch update.
00:18:49.038 - 00:19:14.458, Speaker A: You don't necessarily need to know that, but you can go there and see it if you think that's cool. Finally, we've got some bounties we're giving out this weekend, so we're here. We would love to see people building on top of ERC six five one building on top of this concept that every NFT comes with a wallet now. And so we would love to see you all build crazy stuff with this. We have some ideas for you if you don't have stuff planned yet. We've got some prizes for the best use of it. Just best overall.
00:19:14.458 - 00:19:55.398, Speaker A: Got the best NFT use or NPC use case if you want to do some crazy stuff. Combining NFTs with AI controllers that do actions on chain, we think that's a really interesting use case. If you were around at Pragma yesterday, you saw a demo of Benny talking with an NFT via a Web Three chat app and that NFT actually executing on chain actions to send him stuff. If you want to do something similar in that vein where you're giving NFTs AI capabilities you can use, that's the NPC category. We'd love to see you build ups infrastructure. We would love to see some things built on top of this to make it easier to build with tokenbound accounts. So if you are building this weekend on top of ERC six five one, running into issues or just seeing things that you think should exist, like indexers if you want to build wallet.
00:19:55.398 - 00:20:41.346, Speaker A: Connect support if you want to build tooling for getting snapshots of a whole collection's token out account addresses, or even if you just want to submit a pull request to any of the open source tools. That's the infrastructure category we would love to see all of you build on top of ERC six five one and contribute to some of the stuff we're doing. Open source. Finally, if you're a little bit less technical and you don't want to do like some crazy solidity or front end stuff, we've got a prize for the best on chain media use case. If you're creating art using 6551, what happens if you have composable NFTs that change the artwork? Or if you want to do like some interaction design or some visual design around how do we represent this concept of NFTs owning wallets and those wallets owning assets, doing some visual stuff around, that is a category for that. So anyways, that's ERC six five one. Every NFT comes with a wallet.
00:20:41.346 - 00:20:48.040, Speaker A: Now, every NFT that you launch this weekend in your projects will come with a wallet and you can feel free to use that. So yeah, thanks so much.
