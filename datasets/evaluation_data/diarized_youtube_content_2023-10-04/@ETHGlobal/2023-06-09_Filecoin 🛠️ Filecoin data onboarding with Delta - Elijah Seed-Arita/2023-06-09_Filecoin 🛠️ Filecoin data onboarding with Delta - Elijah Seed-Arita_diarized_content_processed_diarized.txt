00:00:07.850 - 00:00:16.138, Speaker A: Hello, everyone, and welcome to the Hackfs workshop. Filecoin data onboarding with Delta. Joining us today is Elijah Cedarita, who will be taking us through this session.
00:00:16.138 - 00:00:19.280, Speaker A: And with that, I'll pass it over to Elijah to get the session started.
00:00:20.450 - 00:00:24.430, Speaker B: Okay, thank you. Hello everyone. My name is Elijah.
00:00:24.430 - 00:01:01.710, Speaker B: I am on the outer core engineering team at Protocol Labs, and we've been working on a set of tools called Filecoin Data Tools, and it's a collection of tools to help with onboarding data onto filecoin and we'll get more into it very soon. So I want to start off the talk, just talking about the current process today of onboarding data to filecoin yourself. So if you haven't done it before, it could be a bit of a tedious process.
00:01:01.710 - 00:01:17.986, Speaker B: If you have done it before, you probably already know that there are a lot of steps involved. And of course, that first step involves finding your filecoin client. That could be Lotus Venus, it could be something else like Fill Client.
00:01:17.986 - 00:01:47.070, Speaker B: There are a lot of options, but you got to download your client, read the instructions for it, set it up, fund it with your wallet, configure it, connect it to the filecoin network, et cetera. And of course, you will probably only be doing this once to be fair. However, just another stepping stone in the whole just process of getting your data onto filecoin.
00:01:47.070 - 00:02:04.130, Speaker B: Part two is data preparation. So you're going to be processing your data into the correct format, and that's just being car files. You got to split your data up into 32 gigabyte segments so that they can fit into pieces on your filecoin storage provider.
00:02:04.130 - 00:02:24.214, Speaker B: Following that, once you've prepared all your data, you're going to have to find your storage provider. So you're going to search for providers, providers. You're going to get information on chain listed, they're going to advertise their price, their piece size, et cetera.
00:02:24.214 - 00:02:46.190, Speaker B: You might also want to take into consideration some sort of off chain indexes, such as availability or reputation indexes and things like that. So once you find your storage provider, you can move on to part four, which is deal submission. And this is going to involve generating your deal parameters.
00:02:46.190 - 00:03:06.434, Speaker B: So you're going to have to specify your size of your deal, your duration, the max price that you're willing to pay. You got to prepare the PCID, the payload, CID, et cetera. So once you've got all these deal parameters put together, you've got to submit the deal to the storage provider.
00:03:06.434 - 00:03:17.914, Speaker B: The storage provider can then accept or eject your deal proposal. Then you got to check if it's been accepted. If it has been accepted, you can go ahead.
00:03:17.914 - 00:03:34.850, Speaker B: If it hasn't been accepted, you might want to retrieve with a different storage provider, different deal parameters, et cetera. And then once your deal has been accepted, you can prepare to transfer it to the storage provider. That might be over lib PPP, it might be over boost.
00:03:34.850 - 00:04:03.530, Speaker B: If you're doing an offline deal, then you might want to set this up yourself with a storage provider. And of course, after you make your deal, that is not all you need to keep track of the deal going forward. If it expires, if it fails, you're going to want to renew your deal with a different storage provider or with the same storage provider and just keep track of the deal and its health over time, et cetera.
00:04:03.530 - 00:04:10.800, Speaker B: So people do this obviously. This is how it's done, this is how it works. And you can do it.
00:04:10.800 - 00:04:25.438, Speaker B: It's just a lot, it's a bit tedious. This mainly comes from the issue of a fragmented tooling ecosystem. A lot of tools are split up between different teams.
00:04:25.438 - 00:04:48.620, Speaker B: You're going to be often cobbling together different pieces of technology. You're going to have one tool for preparing your data, another tool for uploading. It another tool you might have to be putting together your own scripts and often there's just a lot of knowledge involved and especially this becomes really prevalent as you're starting to get into uploading increasingly large amounts of data.
00:04:48.620 - 00:05:04.750, Speaker B: And this is specifically a place where we are looking to address the problem. Overall it works, but it could be simpler. So that is where we're looking to come in with Filecoin Data Tools.
00:05:04.750 - 00:05:17.330, Speaker B: Filecoin data tools. It's autocore engineering's solution to this data storage complexity. I wouldn't say problem, but something that can be improved.
00:05:17.330 - 00:05:31.490, Speaker B: It's a unified and coordinated set of Falcon tooling. So it's multiple tools and they've all been developed in a standardized way by our team at a core engineering. So it's got an opinionated architecture.
00:05:31.490 - 00:05:53.870, Speaker B: And since we have been building up multiple layers of this technology, that means that we've been able to work on optimizations that go really deep through the stack, through multiple layers of the stack. So on top of that, we're a dedicated engineering organization. So this is not a contract, this is not like a consulting engagement.
00:05:53.870 - 00:06:11.940, Speaker B: So it means that we're going to be continuing to update this, continuing to support this. It's not just a one off project that we're going to have to move on from later. So we're going to keep supporting this and we're going to keep pushing out updates and improving things as we go.
00:06:11.940 - 00:06:24.262, Speaker B: So we do have also a real SP on the team that's going to be JSON and Slack or Jason Shehelika. I hope I pronounced that name correctly. I've never actually asked him about that.
00:06:24.262 - 00:07:04.750, Speaker B: But he's representing our storage provider requirements and we've been able to have a very grounded view on the requirements on the storage provider side of making deals. And we've also got solutions architects, namely Bill Schreckenstein, and they're able to help with white glove data onboarding and we can help you out with getting your data on and just facilitating that process. So again, Filecoin Data Tools is a collection of tools and that includes Estuary, it's Delta.
00:07:04.750 - 00:07:30.010, Speaker B: Ptolemy. Delta is the main focus of this presentation, but there's a lot and we've got great docs at Docs Filecoindata tools and I'll visit that link very. So the actual component that's going to be making deals, which is the focus of this presentation, is Delta.
00:07:30.010 - 00:07:47.300, Speaker B: So Delta is filecoin data, tools, deal engine, microservice, and so it's API oriented, it's controlled through API. It's a demon. And it wraps up all the complicated filecoin deal making process into a single service.
00:07:47.300 - 00:08:05.240, Speaker B: One of our big focuses for this development of this application has been supporting large data, onboarding requirements. And right here you can see we've got our GitHub link to the open source project. You can download it, build it, run it.
00:08:05.240 - 00:08:21.550, Speaker B: I will mention that. So we've got a hosted option and we've got the open source version, same version. You can run it yourself if you want or you can use our hosted version.
00:08:21.550 - 00:08:38.018, Speaker B: So Delta's features that involves card generation, comp generation, piece commitment generation, deal making. We do both online and offline deals. So if you're going to do an online deal, we'll transfer the data to the storage provider for you.
00:08:38.018 - 00:08:51.110, Speaker B: If it's an offline deal, then we'll just set up the whole deal. We'll set up the deal basically. And then you can handle transferring the data yourself.
00:08:51.110 - 00:09:17.002, Speaker B: We also do deal repair, which is where if your data goes offline or if it's coming close to expiring, we can repair it. We've got deal status checking, very straightforward statistics, tracking of your deals, wallet management, so you can choose which wallet you're going to be using for making your deal, and storage provider selection, of course. So the architecture of Delta pretty straightforward.
00:09:17.002 - 00:09:30.814, Speaker B: We've got a Rest API in the front. The Rest API is just going to listen for user requests to make deals. And of course next to that we've got an IPFS node.
00:09:30.814 - 00:09:53.350, Speaker B: So if you want to transfer your data to Delta over IPFS instead of over HTP, that is an option. Behind that we've got the dispatcher job framework and this takes care of all the different types of jobs that Delta can do as I listed in the previous slide. So that's going to be peace, commitment, data transfer, deal proposal generation, et cetera.
00:09:53.350 - 00:10:14.110, Speaker B: And then behind that we've got a database, which I think is pretty straightforward. So when you upload a file to Delta, first thing that it's going to be done is it's going to compute a compi for your file. Then you have the option to provide a user provided wallet.
00:10:14.110 - 00:10:30.994, Speaker B: Otherwise if you don't provide that, then the default wallet will be used for Delta. You've got a suitable SP will be identified after that, and then a deal proposal will be created and submitted to that storage provider. Then the data will be transferred to the storage provider.
00:10:30.994 - 00:10:51.214, Speaker B: If the deal is end to end or online, if it's an offline deal, then we'll of course skip that step and you can handle yourself. So to note, there is a 1GB minimum size on files uploaded with Delta. However, that's not a hard limit because we have other tools in our stack are built to address this problem.
00:10:51.214 - 00:11:15.330, Speaker B: So I'll get to that very soon. So again, I mentioned we're able to do some unique optimizations based on having a more unified and coherent stack. And just two of those that I'm going to go over right now, the first one is going to be compi generation.
00:11:15.330 - 00:11:42.158, Speaker B: So back in Sri V one, the compi generation step was taking three to five minutes, which is not great to be fair. However, we have been able to bring that down to about 2 seconds on our dedicated hardware, which is a pretty substantial improvement. Of course, more optimization lies in the future.
00:11:42.158 - 00:12:00.014, Speaker B: We're looking towards hopefully getting to subsecond comp generation. And of course we're also a team within Protocol Labs as previously stated. So we do have direct access to the cryptographers that built the filecoin protocol.
00:12:00.014 - 00:12:12.950, Speaker B: We can exchange information, requests, et cetera. So here we've just got a graph. We've got delta over here on the right and gray.
00:12:12.950 - 00:12:33.600, Speaker B: And this is just comp generation times for different sizes of data, up to 16GB over here on the right. So we've been able to make a great improvement. And this is mainly to help facilitate in uploading large amounts of data.
00:12:33.600 - 00:13:01.670, Speaker B: The other optimization that I'll go over and of course there's more, but this is going to be our new filecoin data infrastructure or FDI. FDI is our hosted infrastructure platform that's been developed by our infrastructure expertise on the team. So we've got infrastructure and Kubernetes expertise and we're looking to build effective horizontal auto scaling to match our load.
00:13:01.670 - 00:13:26.110, Speaker B: The componentized architecture of course, also of delta allows the independent scaling of services so we can match our load very precisely. We have also learned from our previous project, our previous offering, SJV One, to be ready for the scale that's going to be involved. So that's why we've been putting a lot of focus on building up this dedicated infrastructure.
00:13:26.110 - 00:13:45.730, Speaker B: So with that out of the way, I'm going to go and give a quick demo of using Delta. Delta is very easy to get set up for yourself. I'm going to start with a demo of setting up a Delta demon instance.
00:13:45.730 - 00:14:05.526, Speaker B: So again, we've got the hosted instance and then we have the Demon, the local instance that you can clone for yourself if you want to use it. So let me just open up my terminal. So of course this starts with Cloning delta.
00:14:05.526 - 00:14:21.758, Speaker B: That's going to be delta as previously stated. I'm going to go into it, make it I've already built it because I don't want to wait for building the application on stream right now. But the configuration is really simple.
00:14:21.758 - 00:14:45.830, Speaker B: You're just going to be copying the example environment file into the actual environment file env. And then after that you're going to have to get an Auth token. You can do that really easily by just running CRL to the Auth SJ tech register newtoken endpoint.
00:14:45.830 - 00:15:00.458, Speaker B: And this will just give you SUA Auth token. So you can copy that, go into your N file. And I have my old token here, but we can just put in this new one and there we go.
00:15:00.458 - 00:15:12.170, Speaker B: And then you can run the demon. It's going to start up here. And there we go, running on port one 4114.
00:15:12.170 - 00:15:35.400, Speaker B: You can start making API requests to it and it's good to go. So for this presentation, I'm actually going to be using the we have a special hack FS hosted delta running right now and it's running on filecoin calibnet. So the deals aren't going to be actually on the main net.
00:15:35.400 - 00:15:44.490, Speaker B: Let's get to that. So making a deal with Delta very straightforward as well. It's a single API request.
00:15:44.490 - 00:16:05.406, Speaker B: So what you're going to be doing is you're going to be making a request to the API v one deal, EndToEnd, endpoint. And you just got to pass in your authentication token and your data as well as your metadata. So there's two options here.
00:16:05.406 - 00:16:21.240, Speaker B: You can send your data over Http, or you can also choose to send your data over Lib PTP if you want. And that'll involve giving yourself or passing in a CID and a host to the metadata. But we're just going to be using Http right now because that is simple.
00:16:21.240 - 00:16:51.450, Speaker B: So let's just make this so actually Zsh has already remembered all this. So we're going to be making this request to Delta API v one dealend. We're going to put our authorization header.
00:16:51.450 - 00:17:16.578, Speaker B: This is going to be our new token that we've just copied. And after that we're going to be passing in the form data, form data equals. And I prepared a file here called test file.
00:17:16.578 - 00:17:40.682, Speaker B: It's a 1GB file because again, Delta itself requires a 1GB minimum file size. So this is just a file of random bytes that I prepared with DD and the random source. Anyway, after that we can just pass in the metadata.
00:17:40.682 - 00:17:53.890, Speaker B: You don't have to fill out the metadata, but you do have to pass this parameter. So we can run this now. So it's going to take a bit to upload because this is a gigabyte of data.
00:17:53.890 - 00:18:22.590, Speaker B: But again, so if you want to use Lib PTP to transfer your data instead of using Http and the form data like this here, you just pass in the CID and the host in the metadata. There's other options available for your metadata as well. You can choose which provider specifically you want to upload with, you can choose a lot more of the deal parameters here and that sort of thing, et cetera.
00:18:22.590 - 00:18:32.174, Speaker B: So let's just wait for this to finish. After that we're going to be able to check status here. Status checking is really easy.
00:18:32.174 - 00:18:46.020, Speaker B: It's on the open endpoint or the open API instead of the V one API. And you do not need an authorization token to access this. All right, so here we go.
00:18:46.020 - 00:18:56.226, Speaker B: We've got our response here and inside of our response we're going to get CID. This is our content CID. I think request meta.
00:18:56.226 - 00:19:02.806, Speaker B: Yeah, CID. This is our content CID. And then here we've got our sorry, this is the content CID.
00:19:02.806 - 00:19:16.640, Speaker B: And then the content ID is local to the delta instance. It's 878. We can check the status of this content.
00:19:16.640 - 00:19:43.960, Speaker B: So girl get request to access coeuss three techopenstats eight, seven, eight. Looks like there's been four contents updated since I last ran this command. And here we go.
00:19:43.960 - 00:20:08.414, Speaker B: Yes. So moving on, if we want to do 1GB oh yeah, and here's that API address for the hack FS delta instance. So if you want to do 1GB files, this is great.
00:20:08.414 - 00:20:33.270, Speaker B: However, what if you want to do smaller files? What if you've got like, I don't know, a bunch of little tiny files? And so that's where Edgeur comes in. Edur is built on top of data delta and it's a content aggregator. So what it does is it'll take multiple different files that have been uploaded and basically pack them together and then make them all upload them all to storage providers in batch deals.
00:20:33.270 - 00:20:53.386, Speaker B: So those files are going to be aggregated into this bucket and then they're going to be just submitted to the storage provider. So again, this allows us to upload much smaller deals or much smaller pieces of data. And it also will immediately make the data available over Lib P.
00:20:53.386 - 00:21:16.760, Speaker B: Two P if you want to access it immediately, since the batch deal is not going to be made immediately, since it's going to wait for multiple pieces of content to be added. So making this deal, making a deal with Eduard, let's do that. So I've got my deals with Edge ur example here.
00:21:16.760 - 00:21:41.606, Speaker B: So we've got a hackfs instance for Edge as well. It's going to be hackfscoe SRA tech Edge instead of delta. So making a deal with Edge first let's switch to Edge and make a request.
00:21:41.606 - 00:21:51.290, Speaker B: Let's just LS here. I'm just going to make a deal for some little tiny file here. Let's just make it for the docker compose file of the Edge repository.
00:21:51.290 - 00:22:11.686, Speaker B: So I'm just going to curl host https hackapass C-O-U-S ray tech Edge looks like we've got an autocomplete here already as well. Contentad can add our authorization header. I lost my Authorization header that I just got.
00:22:11.686 - 00:22:35.470, Speaker B: I'm just going to reuse this one here our data. That's going to be we're going to do the docker compose YML and then the last piece of the request, the form metadata, that's going to be nothing because we're not selecting anything specific. So let's run this.
00:22:35.470 - 00:23:14.730, Speaker B: That happened really fast. We're not uploading a gigabyte this time so that was much easier. Again, we're going to get the ID content ID is going to be this here and we can use that again to look up the status dow we can curl to Acapes and then this time we're going to query to Edgeopenstatuscontententententententent and then we're going to paste in what was that ID here? 16817 and we've got our status here.
00:23:14.730 - 00:23:34.254, Speaker B: So our status success kind of cut off right there. But yeah, so this is going to be pinned now and you'll be able to access it over IPFS from the Edge IPFS gateway. So this is great, this lets us upload very small pieces of data.
00:23:34.254 - 00:24:14.026, Speaker B: Now on the other side of things, what about large data sets? So large data sets is something that we've really been focusing on because we want to be able to onboard very large pieces of data and we're talking like very large data sets on the terabyte scale. And so the way that we are doing this is with Delta DM. Delta DM stands for Delta Data Set Manager and it's basically a tool again built on top of Delta for managing massive data sets with potentially long running upload duration.
00:24:14.026 - 00:24:31.650, Speaker B: So it's not something that you're going to be wanting to do in one Http request. So this is able to replicate data to multiple providers. You can manage your upload configurations, you can filter which providers you want to be getting, which data sets, which wallets you want to be using for which data sets.
00:24:31.650 - 00:24:59.766, Speaker B: You've got a whole record of your actual deals that have been created and the best part about it I think is that we have an accessible UI which is very exciting. So the repository for this is applicationtasresearch delta DM. Again can build this yourself, check it out yourself, do whatever you want with it as it's open source.
00:24:59.766 - 00:25:14.270, Speaker B: So the data set upload process with Delta DM starts with creating a data set. Then you're going to attach contents. Contents are going to be you're going to have a file generated in an external program.
00:25:14.270 - 00:25:30.120, Speaker B: This is going to be Ptolemy or some other external program. Ptolemy is still in the works but this is going to be integrated into Delta DM. So this is going to be a completely end to end process in this one UI which is going to be very nice.
00:25:30.120 - 00:26:11.090, Speaker B: So you'll attach your contents, that lets you upload the actual data that you want to send to storage providers, possibly multiple. Then you're going to register your wallet and associate it with that data set because you're usually going to be having, if you have a fill plus grant, that grant is going to be for that specific data set. So you're going to want to associate that wallet with the data set that's designed for after that you can add whatever providers you want to be able to make deals with and then you can set up your replication profiles which will start automatically replicating these data sets to the providers that you've specified.
00:26:11.090 - 00:26:19.640, Speaker B: So let's just do a quick demo of this UI. I think I already have it running locally. Here we go.
00:26:19.640 - 00:26:31.578, Speaker B: So this is our UI. Very nice, very beautiful. So again, the first thing that you are going to be wanting to do is make a new data set.
00:26:31.578 - 00:26:46.670, Speaker B: Can call it whatever you want. So hack FS for example, you can set your application, count your deal duration and set that up. Now that's going to show up right here.
00:26:46.670 - 00:27:03.730, Speaker B: Then you can go in and attach content. I don't have any content to attach right now, but this is where you would attach a JSON file describing the content that's been generated in Ptolemy and again the Ptolemy is going to be integrated into this UI so that'll be very easy. After that you can go in and add a wallet.
00:27:03.730 - 00:27:32.042, Speaker B: I've already got a wallet right here but normally you would add a wallet via the CLI so that you're not potentially transmitting your wallet secrets through http unsecured so that'll be done through the CLI. But after that, once you've got a wallet you can go and manage and you can add which data sets you'd like to make deals with using this wallet. So if I wanted to add my hack FS data set we can have that here, save it.
00:27:32.042 - 00:27:46.958, Speaker B: And now that's going to allow hack FS to be done with this address. After that we can go into our providers, we can add whatever provider we want. If I want to add blah blah blah blah blah, hack FS.
00:27:46.958 - 00:28:30.750, Speaker B: Go there, manage it, change whether we want it to allow self service, which allows storage providers to come in and request data for themselves. And after that point, we can go into Replication Profiles. And this here you can choose, like stated before, which data sets you want to be replicated to which storage providers So if I want to replicate, for example, to the hack FS storage provider with the hack FS data set, we specify that and after that the daemon will start automatically making deals to this hackafes provider.
00:28:30.750 - 00:28:53.586, Speaker B: That's our solution for making very large deals with filecoin data tools. And with that I think that is actually all I have to present. So yeah, more info go to filecoindata Tools for great docs docs are really well prepared.
00:28:53.586 - 00:29:03.100, Speaker B: I'll actually pull that up right now. Docs Filecoinedata Tools, that's going to be this website here. Feel free to go check it out.
00:29:03.100 - 00:29:15.038, Speaker B: Yeah, I think that's it. So thank you very much for coming, thank you for listening. If there's any questions, we can answer that, but if not, then that'll be it.
00:29:15.038 - 00:29:16.480, Speaker B: Yeah, thank you.
00:29:17.330 - 00:29:19.006, Speaker A: Yeah, cheers. Thank you Elijah. Yeah.
00:29:19.006 - 00:29:51.282, Speaker A: If anybody has any questions, please feel free to type them in the chat or take yourself off mute. And if not, please remember that you can always go to the Data tools partner discord channel, where you can reach out to Elijah and Abais from the team and just the partner channels in general. If you have any questions specifically around the technology, thanks, Elijah, for the great presentation.
00:29:51.282 - 00:29:56.838, Speaker A: And thank you all for joining today. We'll be back tomorrow with a few more sessions, so cheers. Thank you all.
00:29:56.838 - 00:29:58.310, Speaker A: Have a great rest of your day.
00:29:58.460 - 00:29:59.730, Speaker B: Thank you. Have a good one. Bye.
