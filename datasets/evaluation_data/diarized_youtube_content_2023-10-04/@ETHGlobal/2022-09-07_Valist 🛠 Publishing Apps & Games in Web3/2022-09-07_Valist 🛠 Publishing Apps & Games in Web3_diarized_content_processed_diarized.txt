00:00:00.410 - 00:00:01.600, Speaker A: Thank you.
00:00:05.890 - 00:00:07.786, Speaker B: Hello. Hello everyone. Welcome to ETH.
00:00:07.786 - 00:00:10.366, Speaker B: Global ETH. Online. 2022.
00:00:10.366 - 00:00:30.770, Speaker B: I'm Alec from Vallast. I'm here with my co founder Zach, and we are going to teach you a little bit about publishing your apps and games to Web Three. So I'm going to jump in, give a quick presentation, go through a couple things on the just to show you the use cases and how to get started, and then I'm going to pass it to Zach for some awesome demos.
00:00:30.770 - 00:00:39.306, Speaker B: So let's get started. Vallast is a Web Three native app store and software publishing protocol. And right now Web Three is a big problem.
00:00:39.306 - 00:01:15.602, Speaker B: We're putting tons of energy into decentralization just to recentralize everything at the distribution level by taking our Web Three software and publishing it over Web Two platforms like GitHub, Steam, App stores, pretty much you name it. Honestly, this affects all of Web Three from the infrastructure side all the way to the wallets that the end users are using from all of the protocols all the way to really all of the DFI apps. So everything is either relying on Microsoft servers, Google servers, Amazon, GitHub, Steam, App stores, pretty much all Web Two gateways powering this stuff right now.
00:01:15.602 - 00:01:40.314, Speaker B: And there are lots of issues with this, some of which we've even seen over the past few weeks pretty aggressively. Things like risk of compromise, censorship, and availability risk. So if for whatever reason an organization chooses not to or is legally forced to take certain software down, that is definitely a problem for the protocols that we're building on.
00:01:40.314 - 00:02:04.158, Speaker B: Right? So we don't want those to be censorable. And then if you're using their centralized payment infrastructure, they're taking at least 30 plus percent, which is actually insane. They're taking that from your hard earned money and how did we even get there? So really, honestly, they own your products, they own your users, and your users don't even own anything at the end of the day since they control the whole distribution.
00:02:04.158 - 00:02:14.840, Speaker B: You don't even have a direct relationship with your customers. And then the things that they're buying aren't even actually theirs. They're not true digital ownership like we have with Web Three.
00:02:14.840 - 00:02:44.234, Speaker B: But it's a good thing we have the tools to solve this. And Vallast is a set of these tools that coordinate protocols together to make publishing software in Web Three super easy. Things like publishing fetching secure auto updates, and even really cool things like Dows coordinating software releases together as well as being able to monetize apps and replacing your app purchases in app purchases, game purchases, things like that with software licensed NFTs.
00:02:44.234 - 00:02:57.938, Speaker B: So this is kind of a Web Three native DRM system that you can use now. And what can we do now that we're in Web Three? Well, first, things look pretty familiar. Valus is a very similar look to things like versal and very friendly.
00:02:57.938 - 00:03:25.466, Speaker B: Other platforms you're already used to ported over common features. Things like version control publishing, fetching ability to update artifacts, as well as managing both team level access control and project level access control so that you can have different forms of security there and then once reported over, you're no longer relying on a single entity for distribution. The Valus Protocol runs completely independently of Valus IO, and then you can monetize your software directly via non fungible tokens.
00:03:25.466 - 00:03:56.040, Speaker B: So again, being able to replace your inapp purchases, your app purchases, with software licenses as NFTs instead of random access codes in some database and some web two platform somewhere that you issue via email. But Dows can now coordinate releases as well. So you can imagine things like new versions of Ethereum or Polygon being upgraded by a Dow community and everyone building and verifying the actual implementation together instead of just coordinating on the protocol spec.
00:03:56.040 - 00:04:11.434, Speaker B: And then you could also do things like secure auto update mechanisms powered by smart contracts and IPFS. So you can imagine a world where all of our infrastructure is updating itself through this global fabric that we're all powering together. And then we have built in public goods funding mechanisms.
00:04:11.434 - 00:04:45.480, Speaker B: So the built in protocol revenue that powers the storage and metatransactions, there's an additional two and a half percent community fee that you can opt into to help build the Vallus community treasury. And then everyone who's publishing on Valus and building this on chain reputation can help vote for funding, public goods, indie game dev, indie app development, you name it. So you can sort of imagine this as if the App Store took a portion of its revenue and reallocated it to the developers that are making the App Store the thing.
00:04:45.480 - 00:05:07.002, Speaker B: And so how does it work? Well, like I said, it ties together a bunch of web three protocols. This is a super simplified version of it, but these are essentially the base protocols that it's tying together. The developer publishes a release, all the software is stored on IPFS and archived for long term on filecoin, and a bunch of different miners, so your software is definitely not going to disappear.
00:05:07.002 - 00:05:30.198, Speaker B: And then all of this is then archived and the source of truth is stored on polygon smart contracts. So usernames project names, version names, and all the security around that is powered by a smart contract. And then the Vals clients are then tying all this together with metatransactions, passwordless, email login and everything like that to make it super easy for you.
00:05:30.198 - 00:05:39.410, Speaker B: So you can fetch the newest releases, publish new ones and so on. And you can use it with several different ways. We have different interfaces depending on your preferences.
00:05:39.410 - 00:05:58.602, Speaker B: We have a web front end app, Vals IO, and then we have this new sapphire launcher that we're actually unveiling here. That is your desktop Android client. So you could think of this as Steam or the App Store for your desktop and Android, and you could also publish with the CLI and GitHub action depending on your pipeline.
00:05:58.602 - 00:06:18.770, Speaker B: And if you want to get into the nitty gritty, build auto, update systems, things like that, there's the TypeScript and go SDKs for you. The web app looks again very similar to things like Versal Netlify shows all of your projects, allows you to manage releases and Zach will get into this in a bit. As well as the Sapphire Launcher, which is our cross platform game and app launcher.
00:06:18.770 - 00:06:41.418, Speaker B: This is super cool. Local IPFS node, everything could be stored and saved onto your local machine and then you can launch and play native web three games, web built games as well as regular web apps, all from a local installation. So this is true decentralization here.
00:06:41.418 - 00:07:16.918, Speaker B: And then your CLI allows you to run a super simple publishing command that you just say valus, publish the account name, the project name, you give it a version and then folder that you're trying to publish. And then the CLI also has some advanced configuration I'll get into later. And then the GitHub action is a super easy way to just insert this right into your existing GitHub action release pipeline and all it just requires is a signing key that has permission on that project and then you just tell it what version to build and the path to build and it will publish anything you need.
00:07:16.918 - 00:07:31.702, Speaker B: SDK super simple to use. You can programmatically, fetch and update everything about Valus is built from the Valus SDK. So you're using the direct implementation by using this here and you can find it at Valus IO that'll take you pretty much everywhere.
00:07:31.702 - 00:07:43.182, Speaker B: The Docs are really excellent resource and we are super stoked to help you out in the discord. So please join us there and share what you're working on. We'd love to help you out wherever we can.
00:07:43.182 - 00:07:59.430, Speaker B: And everything about Valus, from the smart contracts to the client, is open source available on GitHub and if you'd like to add support for other types of software, we'd love to see contributions. And thank you so much and good luck. I'm going to jump into just a quick Docs page and then I'm going to pass it off to Zach.
00:07:59.430 - 00:08:16.662, Speaker B: So the docs right here. Docs Vallus IO will tell you whatever you need to know and we'll give you a brief intro about Vallus, how things are stored, the way it works. It'll walk you through creating an account and project on the web dashboard.
00:08:16.662 - 00:08:29.582, Speaker B: And then the web dashboard has a few primary sections to check out. And then, of course, the sapphire launcher. We're working on a signed build for the community, but you can check out the features and you can even install a dev version here.
00:08:29.582 - 00:08:50.870, Speaker B: Super simply if you want to try it out or contribute. And then the CLI really easy way to set this up here allows you to generate a fresh key locally or import an existing key we recommend generate a fresh one and add that to a project just so that you can have separate signer keys. But publishing a release super simple as you can see.
00:08:50.870 - 00:09:07.100, Speaker B: And then for cross platform builds there's some advanced kit configuration that you can do with a valis YML file and you could of course download releases from there. And then lastly, but not least is the GitHub action. You can publish this.
00:09:07.100 - 00:09:22.878, Speaker B: We have working examples for various different types of projects. Here's a next JS one for example. Here that's building and publishing it live and then you could see some of the example workflows from there as well.
00:09:22.878 - 00:09:49.882, Speaker B: And then instructions for publishing web apps support next JS, any static web platform and the different ways to do that here are all shown and then things like binaries and executables. Zach will get into the uni stuff here in a second, but there's different instructions for how to do that as well as how to work with software license NFTs. And so this is just a quick example of what that looks like.
00:09:49.882 - 00:10:13.540, Speaker B: We actually have an example projects repo that is here that has all of this ready to go from a multiplatform go binary with multi platform releases configured next JS project react project as well as how to use the SDK in a node JS environment. So lots of different resources there for you. I'm going to pass it to Zach, but let us know if you need anything.
00:10:14.150 - 00:10:19.700, Speaker A: Awesome. Thanks so much, Alec. Let's jump into the web app here.
00:10:19.700 - 00:10:32.226, Speaker A: So this is the Vallus dashboard. You can find it by navigating to app Vallus IO. Right now I'm not signed in, so this is just the default onboarding flow.
00:10:32.226 - 00:10:45.466, Speaker A: And so with this there's three basic steps to get started with Vallus. You can connect your wallet, create an account and then create a project. So I am going to start by connecting my local MetaMask here.
00:10:45.466 - 00:10:56.720, Speaker A: And then you'll see upon logging in, I am greeted by my Valus dashboard. Hello and welcome. And I actually have my primary account selected here, web Game.
00:10:56.720 - 00:11:16.046, Speaker A: But we are going to go through the process of how I actually created this account. So I can click new account here and I will be prompted for some basic info. This is just your basic public account info so I can do an account image.
00:11:16.046 - 00:11:38.874, Speaker A: Normally for me, I like to use my Crypto coven shout out to Crypto coven just as my default profile photo and then I have my account name. So the thing about Vallus though, everything is decentralized, everything is on chain. So account namespaces are immutable, which means they cannot be changed, which means once I claim this account name, I can't change it.
00:11:38.874 - 00:11:53.034, Speaker A: I would have to create another one. So here I could just say Web game or you see that's taken. So then I could say Web game two and now that namespace is available currently on Valus.
00:11:53.034 - 00:12:14.920, Speaker A: Then for the display name, it's just like any traditional platform. I have my namespace, but then I have a bit more descriptive of a display name here, so I could make this my real name. Or if I have like a game studio or a dow or something like that, I could put something like that here.
00:12:14.920 - 00:12:40.158, Speaker A: I also can then enter my website for this account and then a brief account description, an amazing metaverse game studio, something like that. Sorry about my bad spelling, but so then members, Alec touched on it a bit here. On Vallus there are two different levels of access control.
00:12:40.158 - 00:13:11.642, Speaker A: There are the account admin level keys and then there are the project level keys, which we will actually talk about in a bit here. But on this page I can kind of just view a couple of quick bullet points of everything that this key is able to do on this account. And so this is again where if I had a Dao or a multi SIG wallet or some sort of governance system, I could even insert the ENS or the address for that here.
00:13:11.642 - 00:13:42.962, Speaker A: And I could even have my Dao or governance contract vote on what the next thing to be published or the next transaction that the community is signing off on. And that's really it here. You'll see, it actually takes my default Pelky ETH account from my MetaMask and I don't even have to really add a default account member, I could add any other members I want here, but I'm going to stick with that default Pelky ETH and I would be able to create for time here.
00:13:42.962 - 00:13:55.270, Speaker A: I'm just going to skip this create and I'm going to go back to the home screen. And so now we are greeted with our beautiful dashboard with our web game account. But now we have to create a project.
00:13:55.270 - 00:14:13.146, Speaker A: So I'm going to go through creating this example FPS project that you see that I have here. So if I click Create project, kind of the same thing here. Now for my actual project, I have the ability to select some basic info.
00:14:13.146 - 00:14:29.390, Speaker A: So I'm going to go to my desktop and my demo folder with all my images. Here I have a nice gamer oriented profile photo. So this is the photo that in the app library or the various parts of the marketplace.
00:14:29.390 - 00:14:47.754, Speaker A: I would see this app now appear with this profile picture and then I can actually add a name to this as well. This namespace is also immutable, so once you create it, you can't change it. So I'm just going to call this FPS and that's already taken again.
00:14:47.754 - 00:15:07.674, Speaker A: So again I could just say FPS two and then for a display name I could say in Epic, FPS game or really whatever, I want to describe that website, just a website. You can enter any website you want there, but then project type. So on Vallus.
00:15:07.674 - 00:15:15.330, Speaker A: There are actually three different types of projects. There's web, native and CLI. Right now we're creating a web project.
00:15:15.330 - 00:15:35.430, Speaker A: So this is any assets again kind of like Alex said, any static web content, gatsby sites, react sites, next JS sites, big fan of next JS shout out. But we also support native or CLI. So any CLI binaries, anything like NPM, Brew, any of those.
00:15:35.430 - 00:15:55.994, Speaker A: Act is a really great CLI used for GitHub actions. Any of those sorts of binaries you can publish under the CLI and then launch it natively through Valis. Or if you have a native exe for any kind of game, any kind of unity project, we support exes app files or again just any random binary artifact.
00:15:55.994 - 00:16:24.422, Speaker A: Like if you're on Linux upload it fully cross platform, full support for it. But so I'm going to click web here and then this is a game and my game also has NFTs. So I'm going to click NFT and so what this will do is on the Vallus marketplace when people are searching whether by tag or by category or browsing through the marketplace, this will allow them to much more easily discover my game.
00:16:24.422 - 00:16:50.990, Speaker A: Now whether they're searching for like a game or any NFT related project along with the name of my project. So if I continue along here, now my project has a short description. Again I could just put a quick short description and so this is what will show up when people actually search for your game on valids the description that will be displayed just as a quick short description.
00:16:50.990 - 00:17:29.290, Speaker A: But I actually have a full description here and I can actually write full markdown here. So if I do can add a markdown heading and then I could even just add some example text about my game and again just please excuse my spelling. And so then anything else you'd want to add here? Images, videos, bullet points, URLs, full markdown, copy and paste or README please if you're submitting for the hackathon please please add your README.
00:17:29.290 - 00:18:04.630, Speaker A: So now I continue to my access control on the members page. Once again, all of my different things that this project level member can do is add or remove other project members, update project info, or publish new releases. So this is once again if you had CI, CD or other signer keys you want to add here, you can drop them in as publishers to integrate with any existing release pipeline that you might have to have it sign off on these Valis transactions.
00:18:04.630 - 00:18:19.530, Speaker A: And my Pokey ETH is in there as well, listed as an existing account admin. But again, I could add any other keys I want here, any ENS name. Okay, so now we get to the really cool part.
00:18:19.530 - 00:18:29.840, Speaker A: Media. Everybody loves media, so especially gamers. You need screenshots, you need videos, you need all this amazing stuff to kind of showcase your software to the world.
00:18:29.840 - 00:18:44.014, Speaker A: You can paste in any kind of YouTube link you please, please if you have a video link of your demo, add it to your profile. It'll make it look so beautiful, it'll make it look so great. Please add your videos header image.
00:18:44.014 - 00:19:17.882, Speaker A: I'm just going to select in the same folder here I have this really cool image that I like to use and then of course my gallery images, my screenshots for my game so I have a couple screenshots here of my game and I can add both of those and then it would be the exact same thing. I would create this transaction, everything will be pushed to IPFS and filecoin and the transaction will be on Vallus. But for time's sake I am going to click this profile that I've already created.
00:19:17.882 - 00:19:35.774, Speaker A: And here is our screenshots, here is our amazing markdown rendered in there and here is my project member Pelky ETH that is rendered in there as well. So I can go back to this settings. You'll see all this info here's my two tags game NFT.
00:19:35.774 - 00:19:47.314, Speaker A: I can actually even click this. I forgot to mention to add any custom tags. So if you have a trending tag or something that you would like to add you can add it in it's fully discoverable on ballast.
00:19:47.314 - 00:19:58.326, Speaker A: And then here's just the rest of the pages again. And if I go back, you'll see there's actually this other button called Pricing. So every app and project on ballast is an NFT.
00:19:58.326 - 00:20:32.070, Speaker A: And what this enables again, like Alec had talked a bit about, is full on chain native DRM, which means I can token gate my application itself from the license perspective, or I can even token gate individual content inside of my application through valis for things like inventory items, DLCs really whatever you would want to token gate or do fully supported. So here by default we have a max license limit of zero. So this just means the limit is limitless.
00:20:32.070 - 00:20:51.206, Speaker A: As many people as they want that want to pay for the license, can pay it and mint a new one. But I could even set this to 200 or something if I wanted to have like limited edition licenses or something like that. And then we also support any ERC 20 token that is currently deployed on polygon.
00:20:51.206 - 00:21:05.620, Speaker A: Here are a bunch of the really cool default ones. We have a lot of people like to use USDC and Stablecoins but you could even add multiple to accept multiple payments. So if you want USDC or ETH or this or that you can add them all.
00:21:05.620 - 00:21:24.120, Speaker A: So then in terms of aftermarket sales or resells on game licenses and games maybe somebody bought a game, they had a lot of fun playing it, there was a limited amount of licenses, they resold it to somebody else. We have full support for the royalty standard. You can set your percent, you can set your address.
00:21:24.120 - 00:21:55.620, Speaker A: Any aftermarket sales on your NFT will go right to your royalty address and then of course, the withdrawal page. So directly through Vallus any licenses that are purchased, any ERC, 20 tokens that go to your account, you can withdraw them directly from here to any address or ENS. The withdrawler does need to be someone who is on that account project, but you can then withdraw it to anywhere you would like.
00:21:56.710 - 00:21:58.402, Speaker B: Account admin to be specific.
00:21:58.536 - 00:22:16.070, Speaker A: Yeah, account admin to be extra specific. So now that we've kind of gone through all the settings and stuff here, let's do a quick release. So I'm just going to do 0.2
00:22:16.070 - 00:22:33.098, Speaker A: because I already have a .1. I'm just going to say an example release to describe a little bit about this release. If you need an extended description, you can fill out the description field with, again markdown or any info you'd kind of like.
00:22:33.098 - 00:22:50.258, Speaker A: You can also add a release image just so that when you display this metadata in a wallet or something like that, it would display it. But I'm going to skip that as well. And then so for the upload it's just an easy sorry about that, easy drag and drop upload here.
00:22:50.258 - 00:23:12.890, Speaker A: I'm just going to pull up my finder window here and then I'm actually going to go to my build folder here. So this is my Unity game that I have that I would like to publish. And this Unity game has a build folder with an index, HTML and all of the Unity assets that I need.
00:23:12.890 - 00:23:34.674, Speaker A: So if I drag and drop that it's in the easy to view file list there, I can then create this release and publish it. And so what I'm actually going to do though, I'm going to go back to the main screen because I already have a release published. And if we take a look at that 0.0.1
00:23:34.674 - 00:23:56.374, Speaker A: here is my full metadata with the IPFS gateway to these Unity files and I can actually hit Launch to launch this web three Unity example game. So we launch in here and there's the portal to the metaverse and you're going to have to play the game to see where the portal leads. So check it out.
00:23:56.374 - 00:24:16.560, Speaker A: Check this example out on there, but something that I really want to demo. I know I'm running a little short on time here, but if I actually launch this, this is actually the native Vallus Sapphire desktop app. So we call it Project Sapphire, sapphire for short.
00:24:16.560 - 00:24:35.278, Speaker A: And you'll see I have my exact same flow here where I can browse all of my different projects and stuff that I've published. But now I also have some additional things like a library tab and some stuff like that. And so if I go in here and now I click Launch, sorry, it actually launched on the other screen.
00:24:35.278 - 00:25:02.666, Speaker A: It'll actually launch a native full screen window where I can then take any Unity game and play it in a native way. And so just to showcase this really quick from the Discovery page here, any DAP? Vallus has a full built in wallet. Any DAP? Anything here I can go and launch here's papers, a previous one that we had.
00:25:02.666 - 00:25:16.594, Speaker A: We also have a couple of games on the Discovery page. Please upload your descriptions, your images, everything. We would love to feature you on the Discovery page, any of your projects, upcoming game studios, please reach out upload as much as you can.
00:25:16.594 - 00:25:30.310, Speaker A: We would love to feature any hackathon winners on this Discovery page especially. But yeah, check out all the amazing games here and I'm going to pass it back to Alec.
00:25:31.610 - 00:25:38.790, Speaker B: Awesome stuff, Zach. Yeah, that's amazing. And yeah, we can't wait to see all of the amazing apps that are published.
00:25:38.790 - 00:25:58.320, Speaker B: And again, we have this microgrand program as well. We have this Valve partnership community. So if you are moving on past this hackathon as well to build out a game into a full application after this as well, definitely reach out to us.
00:25:58.320 - 00:26:11.966, Speaker B: But yeah, that is about it. There's one thing that I wanted to show real quick, just because I didn't get the chance to earlier, but this is just a CLI publish. I just wanted to show you how quick it is to publish with the CLI.
00:26:11.966 - 00:26:29.958, Speaker B: So I've got a multiplatform Go project here that I configured to build multiple versions of a Go binary. And then I configured a Valous YML file with this account, this project and this release version. I give it a path and then I named this Hello Go Binary.
00:26:29.958 - 00:26:43.738, Speaker B: Hello Go. And I told Vallast to the Darwin AMD version is called Hello Darwin AMD 64 inside of this folder and the other version, so on. And then Vallast can interpret that as such.
00:26:43.738 - 00:27:04.334, Speaker B: You type Vallast publish, it asks you what account to use, it uploads everything to IPFS and filecoin. It does a meta transaction for you. Again, every transactions outside of the software license NFTs on the platform are free of charge and powered by the protocol through the opengsn relays.
00:27:04.334 - 00:27:21.670, Speaker B: And so we could view this here as well as on the actual app and being able to and then the Val Sapphire application will also be able to interpret and install that build as well. So that will do it for us. Thank you so much.
00:27:21.670 - 00:27:30.842, Speaker B: We're so excited to again see what amazing things you build and we hope you have a great ETH online and we'll see you in the discord and in the docs.
00:27:30.986 - 00:27:32.014, Speaker A: Good luck everyone.
00:27:32.132 - 00:27:35.214, Speaker B: Good luck. Cheers. See you.
00:27:35.214 - 00:27:35.690, Speaker B: Bye.
