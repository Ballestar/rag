00:00:07.290 - 00:00:19.966, Speaker A: I am Greg with ENS, and today we're going to be talking about all things ENS. So before I get started, raise your hand if you have an ENS name. Okay, awesome.
00:00:19.966 - 00:00:29.446, Speaker A: Avanch, that's good. Sweet. So I'm going to be going through a few things for of all, what is ENS? Why it's important? Some of you guys sounds like will know this stuff already.
00:00:29.446 - 00:00:47.690, Speaker A: Then we'll get into more technical details, some of which you might know, some might not. How do people use it today? Our Bounties and all of that stuff. So first of all, what is ENS? ENS is a decentralized permissionless naming protocol that lives on Ethereum and is built to scale to the entire Internet.
00:00:47.690 - 00:01:08.290, Speaker A: DNS solves the problem of IP addresses to human readable domain names and we all use it. Today, ENS solves a similar problem but was even worse for crypto because Ethereum addresses are impossible to remember. And so ENS abstracts those IP addresses away and makes it into human readable names.
00:01:08.290 - 00:01:27.270, Speaker A: Cool. And the idea is anywhere you read or write an address today, you should be able to use an ENS name instead. So you'll see over here I have Luke ETH sending something to Gregscrow ETH, and then I have Gregskrill ETH sending something to a long random address which has to get truncated because nobody's going to remember it.
00:01:27.270 - 00:01:49.440, Speaker A: And if you ask me, the name to name is just a more enjoyable experience for everybody on shape. And here's another example of using ENS out in the wild. If I'm sending Ether to somebody in a MetaMask or any asset in basically any wallet, I'd rather send something to a name that I know rather than a long hex address that I'm not going to remember.
00:01:49.440 - 00:02:01.246, Speaker A: And so this really shows that ENS started as a Web Three username, right? Instead of an address, use a username. But over time it's becoming more of a Web Three profile. And in order to do that, we have two different types of resolution.
00:02:01.246 - 00:02:11.318, Speaker A: So forward resolution is what you just saw in the MetaMask example. I go in, I type a name, and that resolves to an address. But the thing here is I can have multiple names that resolve to the same address.
00:02:11.318 - 00:02:32.842, Speaker A: And so I can register a ETH name today that resolves to some of your addresses out in the audience. But really what makes it a portable profile is the opposite reverse resolution or having a primary name. And what that means is the controller of the address basically sets a name that they want to be their global Web Three profile.
00:02:32.842 - 00:03:05.702, Speaker A: And so in this case, my address Ox One Seven Nine, will reverse resolve to Gregscroll ETH because Gregscroll ETH is my primary name. So what this means is when I log into different applications across Web Three, I'm kind of greeted with this universal Web Three profile, right? I see Greg scroll ETH, I see my avatar, and it's just like follows me around and this is another view of that profile. I have a name, I have an avatar like you saw before and I also have all of these other text records as we call it.
00:03:05.702 - 00:03:25.614, Speaker A: So text records allow you to store any arbitrary data on an ENS name. We'll get into exactly where that works later on but it's just leaning into the idea that this is really a universal global Web Three profile. And all these websites on the bottom are just third party websites that people have created that kind of identify me as my ENS name.
00:03:25.614 - 00:03:31.118, Speaker A: That is my again, portable Web Three profile. Cool. So now we know what ENS is.
00:03:31.118 - 00:04:08.666, Speaker A: But why is it important? So it's cool, it's fun, it's portable, extensible MultiChain public good, it's decentralized, and most importantly, it improves the crypto user experience, right? And so if we look at Ethereum over here, the Ethereum logo ENS the entire ENS branding and logo is just a nice friendly wrapper on top of the Ethereum logo because it's a nice friendly wrapper around the user experience of web Three. So what are the different types of ENS names? And I think this is where we're going to get into some misconceptions. So a lot of people assume that ETH is ENS's only type of name, but that's actually not true.
00:04:08.666 - 00:04:22.766, Speaker A: And so you can use almost any DNS name as an ensname as well. So this means XYZ, IO or anything else. And then the MetaMask example that I showed before would work with any DNS name.
00:04:22.766 - 00:04:44.850, Speaker A: So for example, you can go to MetaMask and try and send something to Ensferry XYZ, which is a DNS name and it will resolve to an Ethereum address just like any on chain ethane. So there are a few differences between these two things. First of all, ETH is really the only blockchain native TLD in the ENS ecosystem.
00:04:44.850 - 00:04:55.318, Speaker A: So it lives on mainnet Ethereum. It is fully decentralized. The only way something changes about ETH is through an ENS dao proposal and successful vote.
00:04:55.318 - 00:05:13.394, Speaker A: So there is no single entity that can change any of the ENS. ETH core contracts and ETH names have a small annual fee each year to prevent name squatting and basically promote a healthy ecosystem. So this means if names go unused then eventually they will be recycled and somebody else can pick them up.
00:05:13.394 - 00:05:36.454, Speaker A: So this is ETH kind of the top dog in ENS in terms of decentralization. Next, we have DNS and ENS as a protocol respects existing internet infrastructure and it's like the realization that DNS works pretty well. All of us use it all across the web every day and so we want to allow DNS name owners to use that in the ENS world as well.
00:05:36.454 - 00:05:55.786, Speaker A: So using DNS names in ENS has no protocol fee, although in the past there has been a pretty substantial gas fee to use this. And the reason is because you're submitting a proof on Chain saying that you actually own the DNS name. Soon you'll be able to use DNS names in ENS completely for free, including gas.
00:05:55.786 - 00:06:23.778, Speaker A: And this will be powered by something really cool, which I will show you in a second. And it's powered by ENS names that are off main net, right? And so this is all powered by a cool standard called Ccipread. And before I dive into that with these off chain names, there is no ENS protocol fee, there is no gas fee, there is ultimate flexibility because the developer can really do whatever they want and read from any data source.
00:06:23.778 - 00:06:40.618, Speaker A: And like I said, CCIP Read is a Ethereum standard, not just an ENS standard to securely retrieve off chain data from smart contracts. And it gets verified on the front end level. And again, we'll dive into exactly where that falls into the ENS kind of flow in a few minutes.
00:06:40.618 - 00:07:03.678, Speaker A: And just to point out that these off chain names powered by CCIP Read are already used in production today by some pretty large teams like Coinbase, Lens, Eco and so on. And so here is a simple example of what that might look like in the wild. And I'll go back to the QR code after if you guys want to try it out, but basically let me make this bigger.
00:07:03.678 - 00:07:12.694, Speaker A: Cool. So this is what it could look like to register a free off chain ENS name. I'm just going to say testing like that.
00:07:12.694 - 00:07:35.634, Speaker A: And so I'm going to have testing offchaindemo ETH and I'm going to set my description, which is basically an ENS text record. And so this would normally be on Chain and cross gas to be hello, I'm going to press register here and just sign a message. So nothing on chain at all, I'm not paying anything whatsoever and boom, I just created a ensname.
00:07:35.634 - 00:07:57.960, Speaker A: And so if I press View in ENS Manager, you'll see that testing with a bunch of G's offchaindemo ETH just like works, right? And I can copy this name and go into MetaMask. And if I wanted to send Ether to this name, then it works right away. And that was free for me as a developer, free for the user and overall a great user experience.
00:07:57.960 - 00:08:18.330, Speaker A: So let me go back, I'll point out here that the docs on how this works, which I'll mention in a minute, and the exact code is linked in the footer. And so I'll leave this up just for a second if that's interesting to anybody. And you might want to do something similar as part of your hackathon project this weekend.
00:08:18.330 - 00:08:47.580, Speaker A: Cool. So, oops with all that, how does ENS work and where does this CCIP Read off chain stuff fall into the mix? So ENS at its core is just a registry on Minne and in that registry stores a name alongside a Resolver. A resolver is also a smart contract which basically stores everything all the data for a name.
00:08:47.580 - 00:09:05.060, Speaker A: So these text records that I've been talking about, the address that it points to and so on, is all historically stored in a resolver. So you'll see that the same name can have multiple multiple that the same resolver can be used for multiple names. So I'm Greg Shadith and we have recludith in the audience over here.
00:09:05.060 - 00:09:24.760, Speaker A: We both use the same resolver, ox 4976 and so on. But also you can have custom resolvers and anybody can develop their own custom resolver which has whatever custom logic they want. And so you'll see, offchaindemo ETH has a different resolver than the others and that's what allows it to do cool things like have that off chain registration.
00:09:24.760 - 00:09:50.684, Speaker A: So if we look at the default on chain resolver again, Ox 4976 and so on, basically this stores all the data for a name in just internal storage. So if I wanted to set the Ethereum address of Greg's ETH, I have to make an on chain transaction to this contract saying update my ETH address from Ox one, seven nine A to whatever else. And same with a text record and so on.
00:09:50.684 - 00:10:04.288, Speaker A: It's important to note that address and text are basically like objects. So text records, for example, support any arbitrary key value pair. And address records can be set for multiple chains.
00:10:04.288 - 00:10:25.416, Speaker A: And so that's another misconception that ENS is only for mainnet Ethereum, it's really for any layer two or even other networks. So you'll see right here, Rickmoo ETH has set an ETH address and a Bitcoin address. And so if you were to go to a wallet that supports this standard and you type in Rickmoo ETH, then it would allow you to send Bitcoin to Rickmoo.
00:10:25.416 - 00:10:44.848, Speaker A: And so that's pretty cool and something I think most people often miss. But now what is different about the offchain demo ETH resolver? And the answer is basically everything. So instead of looking at internal storage for addresses and text records and so on, it reverts with this off chain lookup.
00:10:44.848 - 00:11:00.580, Speaker A: And this revert is exactly what CCIP Read is. It's a standard that defines a custom error in solidity and it tells the client to do something different. So that something different is basically look off chain at a data source of your choosing.
00:11:00.580 - 00:11:16.670, Speaker A: This can be a database like how Coinbase does in Coinbase wallet. If you were to sign up as a new user, you can claim a free CB ID subname and that uses exactly this. And you could also use it to look at a layer two and stuff like that, which I will get to in a second.
00:11:16.670 - 00:11:40.580, Speaker A: CCIP Read works really well in conjunction with ensip Ten. Ensip is just an ENS improvement proposal and ten is the number for wildcard resolution. And so what that means is if a client attempts to resolve a name that does not exist on chain, then it will go up to the parent and basically ask that parent if it has a record for something below it.
00:11:40.580 - 00:12:01.852, Speaker A: So the name that I created before testing with a bunch of g's does not exist on chain. And so the front end client would then go to offchaindemo ETH, see the resolver of offchain demo ETH and then make a request from there basically to get the data wherever else it might be stored. And so again, it is a matter of internal storage versus reverting off chain to get the data from somewhere else.
00:12:01.852 - 00:12:27.252, Speaker A: And that is powered by CCIP Read and Ensip Ten. So if we just take a step further, how can ENS work with layer twos, which is a common question that we get, and really the answer is the same, right? This is exactly the slide that I had before offchain demo ETH revert with off chain lookup for each type of text record that we have. And what I want to point out is that that off chain lookup again, can be anywhere off of mainnet, including a layer two.
00:12:27.252 - 00:12:55.868, Speaker A: So how do these different approaches kind of change the resolution process? The first one is what you might know as ENS today, meaning everything being on chain. A client will go to the ENS registry and find a resolver and that resolver will have internally stored the data for the name and just return it, right? Very simple but somewhat limiting because it's just a main net ethereum contract. The next would be using CCIP read.
00:12:55.868 - 00:13:10.268, Speaker A: So a client like a front end goes to a resolver contract. The resolver contract says, actually I don't have the data, but if you go to this gateway, it will tell you where else to get that data. And then that gateway pulls in the data from a centralized database.
00:13:10.268 - 00:13:27.736, Speaker A: So again, this is what Coinbase Wallet does because they're not treating users as people who are obsessed with decentralization and need everything to be totally permissionless. We have options for that, but not everybody is of that mind. And so it's okay to have a database for a good user experience.
00:13:27.736 - 00:13:47.192, Speaker A: And then the database returns the data on chain and that resolves the name or returns whatever data you're requesting. The next approach would be basically just replacing the database with a layer two contract. So, same process, front end goes to a resolver on mainnet that goes out to a gateway.
00:13:47.192 - 00:13:58.508, Speaker A: The gateway then pulls the data from a layer two contract and returns the data. So on. The problem here is that the gateway in both the second and third example are basically fully trusted.
00:13:58.508 - 00:14:20.488, Speaker A: So if the gateway wanted to just not read from the layer two resolver, even though they said they would, they can do so. And so again, that's okay for some use cases, but not all. And so the kind of coolest approach to this and something that's being more actively explored recently, is adding a verification to that layer two state on main net.
00:14:20.488 - 00:14:28.536, Speaker A: So again, the client would go to a layer one resolver. The layer one resolver would go to a gateway. A gateway would go to the layer two contract.
00:14:28.536 - 00:15:05.076, Speaker A: And then once that data is returned to the client by the gateway, a contract on layer one verifies that that data is legit by checking basically the proof that the layer two deposits on layer one every x period of time depending on the layer two. And so what this gets you is a trust minimized gateway that cannot return bad results because you have a contract on mainnet verifying these results each time. So in the first case it is fully trustless but expensive, in the middle two use cases it is basically fully trusted but free.
00:15:05.076 - 00:15:25.790, Speaker A: And then in the last use case it is both free or I guess you pay layer two gas, but it's cheap and trust minimized. So the worst that the gateway operator can do is just shut it down and stop operating. Which of course isn't ideal, but they can't fully attack you by changing any data.
00:15:25.790 - 00:15:54.208, Speaker A: And yeah, so those are basically the different approaches and why you might want to do each one and why the last option is a cool one more recently. So now we have a good understanding hopefully of what is ENS, how does it work, why you might care, and different kind of extensions to make it work beyond ethereum. And so it's really just like how do people use these names? Like I said before, it's really a portable web three identity.
00:15:54.208 - 00:16:07.988, Speaker A: This is how I represent myself on chain and my usernames places. My display name on Twitter is Gregsville ETH because this is really just what I lean into and everything that I store in this profile is kind of officially me. On know.
00:16:07.988 - 00:16:38.340, Speaker A: Next would be communities. Communities have really taken a liking to ENS subdomains as a way to feel part of a community, right? So PCC ETH is a popular NFT project that only allows NFT owners to claim subdomains of PCC ETH. And so if you look on Twitter and you search PCC ETH you'll see a bunch of users that rep this name as their display name on Twitter and they feel part of this community and it's proving that they own an es name and part of your identity.
00:16:38.340 - 00:17:05.480, Speaker A: Next would be immutable text records. So like I mentioned before, ENS names can store any arbitrary Q value pair as a text record. And so uniswap somebody made a proposal to the Uniswap Dow to establish V three deployments Uniswap ETH, and on this theme they set a number of text records for basically official deployments of their uniswap contracts across different chains.
00:17:05.480 - 00:17:23.264, Speaker A: And so any user of Uniswap, if even front ends get hacked or anything like that, the only way that this name can get changed is by a Dow proposal. So it's really like an immutable record, an official list of their deployments. And so it's a very different use case for ENS but something that certainly makes sense.
00:17:23.264 - 00:17:37.988, Speaker A: It's just a generalized data store that can be used in any creative ways that you come up with. Next would be naming contracts. So a lot of this has been about identity and paying people personally or representing a single person on chain.
00:17:37.988 - 00:18:04.800, Speaker A: But also we deserve to have good user experiences around contracts as well. And so you'll see here under ENS ETH we actually use this ourselves to name a bunch of the ENS protocol related smart contracts. So if you were to go to Etherscan and search Registry ENS ETH it will bring you to the ENS Registry smart contract that I was talking about before, which is kind of like the home base for everything ENS and this would allow Wallets to basically display that.
00:18:04.800 - 00:18:30.536, Speaker A: Gregscroll E is interacting with Registry ENS ETH that is so clear and it makes so much sense and you don't need arbitrary labels per block explorer and so on. Again, it's just a way to improve the user experience of Ethereum and Web Three overall by way of ENS, next would be usernames. So ENS as a profile, ENS as a username really is just like the most obvious example I think.
00:18:30.536 - 00:19:00.400, Speaker A: And Farcaster, a decentralized social protocol recently took this and kind of did exactly that. Instead of having their own centralized username space, they allow you to bring your own decentralized ENS name and use it as a username across the protocol. And so I can go to different Farcaster clients and I can see that a username is an ENS name across the board and it's a cool example of connecting protocols across Web Three for something that actually has tangible use and people have seemed to really enjoy this.
00:19:00.400 - 00:19:16.488, Speaker A: So usernames are definitely one of the more obvious and just like cool examples of ENS, I think. And then last but certainly not least, Web Three messaging. So our friends at Xmtp are also here this weekend and they utilize ENS for a number of things.
00:19:16.488 - 00:19:47.904, Speaker A: This is what Xmtp looks like inside of Coinbase wallet and you can see I am messaging other addresses like Slobo E, a friend and you can imagine how if I was messaging Ox 1234 so on, it would just look ugly. ENS names make the user experience better by having human readable names for all types of crypto addresses. So now we have a good understanding of hopefully many things ENS and let's give you some resources to move forward.
00:19:47.904 - 00:19:59.332, Speaker A: So first we have a front end quick start guide. This will allow you to very easily get started with an ENS app on the front end side in just a few minutes. It is a full doc running you through things.
00:19:59.332 - 00:20:16.360, Speaker A: And also there's GitHub repo that you could just clone as a template and get off to the races. I'll point out that there's a QR code on this slide and the next one, if you want to scan that. But you'll see here that it's really just a few lines of code with any popular Web Three library and you are off to the races.
00:20:16.360 - 00:20:33.312, Speaker A: Next is the Thorn Design System. So this is actually a little bit detached from ENS protocol, but just a cool developer tool that we've been working on. And it makes it easier to build cool looking ENS applications very quickly, or just cool looking applications quickly.
00:20:33.312 - 00:20:43.328, Speaker A: It's a react component library that I've had a lot of fun using, and I think you might too. So really quick, the last thing I want to do is highlight the prizes. We have a range of them.
00:20:43.328 - 00:21:06.132, Speaker A: $2,500 to the best overall use of ENS, $2,000 to the best use of ENS subnames that could be on chain off chain layer two, like I described, the option is up to you. $2,000 to the best implementation of ENS with account abstraction. So think combining certain ENS transactions to the initial contract deployment and $1,000 to the best use of Thorin.
00:21:06.132 - 00:21:15.992, Speaker A: And then $500 to five honorable mentions so open to your creativity. It could be subnames, it could be account abstraction or anything else. It's up to you.
00:21:15.992 - 00:21:21.200, Speaker A: So, thank you. I hope this was helpful. We have a booth if you have any questions, we'll be there to help.
00:21:21.200 - 00:21:24.770, Speaker A: Or message us in discord and we'll be able to help you out.
