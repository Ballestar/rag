00:00:07.450 - 00:01:12.706, Speaker A: So this workshop is on Transaction Insights to give you a little background on what Transaction Insights is. It's a feature that we've exposed to the MetaMask snaps platform that allows snaps to render and insights on transaction data. So we make unsigned transaction payloads available to snaps that have this transaction insight endowment to be able to make these insights. So I just wanted to show you guys some links that I have available that you guys can read into to learn more about the API. So we have something called Sips, which are snaps improvement proposals. And so this Transaction Insights feature was specked out in sip three. If you guys want to just take a moment to jot down the link or whatever you can do.
00:01:12.706 - 00:02:08.440, Speaker A: So, and these sips are open to discussion. So if you guys feel like the API can be improved upon or you'd like to see new things inside of it, you can join the discussion. And another link that I'm providing here is for Cape, too. So we use this standard to basically identify different chains with. So there's this whole concept of namespaces and chain IDs that we're using under Casa, which stands for Chain Agnostic Software Alliance. And so we're using this standard for our chain IDs. Now to get started on the actual workshop itself.
00:02:08.440 - 00:03:02.970, Speaker A: So I would like for you to clone down this repo first. This is the template TypeScript Snap repo. So the first thing we're going to do is just get the link here, and we're just going to clone this down. Up a delay here. That's good.
00:03:03.120 - 00:03:03.820, Speaker B: Cool.
00:03:04.270 - 00:03:52.060, Speaker A: All right, so if you look on GitHub, it should be template TypeScript Snap is a repository. If you guys just want to take a minute or two just to clone that down. And then there's also a certain build of MetaMask Flask, which I'll ask you guys to install into your Chrome extension if you guys aren't familiar with Flask. Flask is basically our canary build of the MetaMask extension in which we've released the snaps platform. So I'll get you guys the link to that in a second.
00:04:09.870 - 00:04:10.330, Speaker B: Cool.
00:04:10.400 - 00:05:34.264, Speaker A: So if you go to this link here, you'll see this MetaMask snaps bullet guide, and it'll walk you through how to install Flask. So the build that you want to use is on this link here. If you just follow the steps. If you want to take a couple of minutes to do so, please do that. What's that? Oh, it's on discord. Okay, does everyone have this build installed already? Okay, so just take a couple of minutes to do that. Different from the regular? What's that? Is that different from the regular? Yeah.
00:05:34.264 - 00:07:45.820, Speaker A: We have the transaction inside API available in this build. We haven't cut a new release yet, so we're using this custom build. I'll give it another minute or two so people can catch up. So once you have Flask installed, please open up the repo that you just pulled down. So this is just a template, basic template TypeScript template for a Snap. And this is what we're going to work off of to create this transaction insight Snap. So what you first want to do is just run yarn install to install the dependencies.
00:07:51.060 - 00:07:51.810, Speaker B: Cool.
00:07:52.600 - 00:09:02.372, Speaker A: So you'll notice that we're importing an onrpc request handler. We have different handler types with the addition of this on transaction handler. So we're going to be pulling in that instead. And so the type of this will pull in a transaction and a chain ID. If you remember what I mentioned about Cape Two. This chain ID is a Cape Two chain ID. For demonstration purposes, we're not going to parse this chain ID or do anything special with it.
00:09:02.372 - 00:09:25.810, Speaker A: But I just wanted to let you guys know that this is the type of chain ID that you should be expecting when writing transaction insight snaps. So we want to be able to export on transaction so the.
00:09:42.640 - 00:09:43.340, Speaker B: Cool.
00:09:43.490 - 00:10:54.580, Speaker A: And then so we're just going to delete all this out of here. And so the return object is expected to be having an Insights key. And inside of this Insights object, you can add in whatever sort of key value pairs you'd like. So for demonstration purposes, we're just going to spit back the transaction chain ID. So you basically need to just save this and then we need to add in the permission for transaction insights, which I just need to double check what it is exactly. Yeah.
00:11:14.130 - 00:11:15.178, Speaker B: It cool.
00:11:15.284 - 00:11:40.162, Speaker A: So now you just save this and I think we should be pretty much there. You don't need to touch this index HTML file. It's already good to go. So it picks up on this Snap ID. Since this is a locally hosted Snap, we're not deploying it. It's going to use this local prefix. So everything is set up for you already.
00:11:40.162 - 00:12:37.450, Speaker A: You don't have to worry about touching this. Now the next thing we need to do is basically just build and serve this Snap and we'll do that here. So we need to do yarn build and yarn serve. So this is starting the server on localhost 80 80. You can choose to change where the server is hosted in Snap config JS. So you would just change the port if you wanted to. So now we'll navigate to localhost 80 80.
00:12:42.430 - 00:12:42.842, Speaker B: Cool.
00:12:42.896 - 00:13:44.450, Speaker A: So you'll see this prompt here? We're only concerned with the connect button because there is no UI interaction within the DAP itself. So transaction insights, they're displayed in the confirmation screen of MetaMask when interacting with contracts or even EOAS. So we'll first install the transaction insight Snap here and you can see that it's requesting certain permissions to be able to display a confirmation and then fetch and display transaction insights. So we're just going to approve and install it. And now it's good to go. Now we're going to test out this Snap and see if it works on uniswap.
00:14:00.340 - 00:14:00.800, Speaker B: Cool.
00:14:00.870 - 00:14:59.290, Speaker A: So you just connect your wallet and we'll do a simple ETH to wrapped ETH swap. Now, if you notice, there's an extra tab here that you wouldn't see otherwise. It has the name of the transaction insight Snap. Now, this snap only shows up because it has this endowment and it was able to do this because we gave permission to do so. Now, if you click on it, you'll see the transaction payload and the chain ID that was sent to the Snap and it basically just spit it back. And this is pretty much it. This demo was to illustrate how this works.
00:14:59.290 - 00:15:43.850, Speaker A: You can do a lot more interesting things with transaction insight snaps. You can use services like Tenderly to run a transaction simulation and get more insights. That way you can write transaction insight snaps to maybe detect phishing on different DApps. The world is your oyster with transaction insights. Yeah, this is pretty much it. If you guys have any questions, let me know and I will open this document back up. I have my telegram here, I have my discord here, and these links are here for you to follow if you need.
00:15:43.850 - 00:15:55.860, Speaker A: Yeah, this is it's.
