00:00:28.710 - 00:00:29.034, Speaker A: All right.
00:00:29.072 - 00:00:42.220, Speaker B: Hello and welcome, everyone, to the Filecoin Workshop making storage deals on Filecoin EVM. Joining us today is Zach Ayesh, who will be taking us through the session. And with that, I will pass it over to Zach to introduce himself and get the session started.
00:00:43.310 - 00:00:46.070, Speaker C: Hey, everyone. Yep. My name is Zach ayesh.
00:00:46.070 - 00:01:00.126, Speaker C: You might have seen me around on a couple of other filecoin coding demos. I'm a developer advocate with the Filecoin Virtual Machine Team at Protocol Labs. And today I'm going to go over programming on the Fevm.
00:01:00.126 - 00:01:24.234, Speaker C: And you might have seen this talk from me before at previous global events, but on this talk, we're going to do something a little bit new. We're going to go over towards the end how to make storage deals with smart contracts on the Filecoin Virtual machine. So this is a really cool new functionality we've been working on for a long time.
00:01:24.234 - 00:01:29.760, Speaker C: The engineers have been hard at work, and so I'm excited to go through this demo with you today.
00:01:36.530 - 00:01:36.990, Speaker A: Yeah.
00:01:37.060 - 00:02:09.174, Speaker C: So, quick story. One of my very first projects interacting with any of the Filecoin IPFS protocols was creating a dynamic NFT. And essentially it was like this nerdy shooting jerseys cat reference where you would mint an NFT box and it would use the chainlink VRF and randomly pick when you minted the cat to either be this attack cat or a sleeping cat.
00:02:09.212 - 00:02:09.414, Speaker A: Right.
00:02:09.452 - 00:02:36.478, Speaker C: And this was probably two years ago or so now, and little did I know I'd be working this closely with the filecoin stack and helping push things forward. So today we're actually going to be using this photo to store with filecoin storage providers using solidity smart contracts. You can find.
00:02:36.478 - 00:02:53.238, Speaker C: This is the actual photo of me trying to get this demo working. We actually first got this demo working for ETH Denver, and I presented at the Filecoin hacker base. It was quite the experience working with engineers late into the night.
00:02:53.238 - 00:03:07.260, Speaker C: They put such a phenomenal amount of effort into getting this working. And so, yeah, it was quite the herculean task. But I'm happy to be a little bit more well rested and presenting to you today.
00:03:07.260 - 00:03:33.006, Speaker C: And if you've seen any of my other presentations, you know I like to talk about Imposter Syndrome in a lot of my talks. And I just want to briefly mention that here, this is like me working with the engineers, trying to figure out how all of this works. I'm still figuring all of this out, too, so don't feel bad if any of this is confusing to you or feels overwhelming.
00:03:33.006 - 00:03:47.176, Speaker C: It is for everybody. I just like to put that in in all of my talks. All right, so today we're going to be going through just a short introduction on the Filecoin Virtual Machine.
00:03:47.176 - 00:04:22.250, Speaker C: I want to focus more on the coding side of things. We'll do a demo and remix deploying a very basic solidity contract, doesn't use anything special filecoin related in it. Then we'll show an example using the Filecoin Solidity libraries that gives you filecoin specific functionalities and then we'll move on to Hard Hat and making a deal on a storage deal on using Smart contracts, which is kind of the special thing we're demoing in this talk.
00:04:25.420 - 00:04:26.024, Speaker A: Right.
00:04:26.142 - 00:04:38.030, Speaker C: So what is the filecoin? Virtual machine. It is a virtual machine that lives on the filecoin blockchain, right. And it delivers on chain programmability to the filecoin network for the first time.
00:04:38.030 - 00:04:49.336, Speaker C: So the Filecoin Virtual machine is actually made in WebAssembly, but it was built to support multiple runtimes.
00:04:49.368 - 00:04:49.852, Speaker A: Right.
00:04:49.986 - 00:05:15.556, Speaker C: So you'll hear me talking about the Fevm, right? And that isn't running on Ethereum or anything like that, that is running on filecoin. And how it works is at the base layer you have the Filecoin Virtual machine, like running on top of filecoin nodes written in WebAssembly and that was designed specifically to be able to virtualize other runtimes on top of it.
00:05:15.658 - 00:05:16.116, Speaker A: Right.
00:05:16.218 - 00:05:40.328, Speaker C: So the first runtime the team targeted was the Ethereum virtual machine because everyone knows how to work with Solidity at this point in Web three at least, it's the most common language to use. There's tons of tooling remix, Hard Hat, MetaMask, everything supports it. So the Ethereum virtual machine is actually virtualized on top of the FVM.
00:05:40.328 - 00:06:09.364, Speaker C: And this Ethereum virtual machine, when you're interacting with it, acts like any other EVM chain you may be used to, whether it's Ethereum or polygon or avalanche or what have you. And so to you it shouldn't look any different and you should be able to use all of your tools in the future. This could be extended to other runtimes if they are developed and there is a roadmap for the team to develop.
00:06:09.364 - 00:06:30.394, Speaker C: What we call native actors are the ability to compile smart contracts to WASM and deploy those directly to the chain as well. If you like to program in any language that compiles to WASM WebAssembly, which is a lot. So, yeah, this is the new thing.
00:06:30.394 - 00:06:50.986, Speaker C: This is the big new deal, is creating a storage deal via smart contracts. This is a relatively new development even on the Fem and we'll kind of go over how it works. Essentially, we'll be emitting a event, a solidity event that boost storage.
00:06:50.986 - 00:07:06.760, Speaker C: Providers can listen to and store your data for you. But this is the FIP filecoin improvement protocol. You can find it in the Filecoin GitHub if you want to read up more on a little lower detail on how it works.
00:07:06.760 - 00:07:23.530, Speaker C: All right, so let's go ahead and let's just dive into the coding. Well, again, we're going to start with Remix and we're going to deploy a very basic contract called Simplecoin. You can think of it as a simplified ERC 20 contract, very basic.
00:07:23.530 - 00:07:35.114, Speaker C: And yeah, this is just going to show off the EVM compatibility. So let's start out first. Of course, you're going to need to download MetaMask.
00:07:35.114 - 00:07:42.960, Speaker C: You can get this at MetaMask. IO. It is one of the most popular Ethereum wallets you can get.
00:07:42.960 - 00:07:50.174, Speaker C: I use it as a hot wallet for testing development. Yeah. So you can download it on MetaMask.
00:07:50.174 - 00:07:51.666, Speaker C: IO and you see, I already have.
00:07:51.688 - 00:07:54.740, Speaker A: It downloaded right here, right?
00:07:56.710 - 00:08:08.870, Speaker C: And once you have MetaMask, it doesn't know about the File coin chain. It has some default chains. It knows about Ethereum and its testnets, but it doesn't default know about the filecoin chain.
00:08:08.870 - 00:08:24.346, Speaker C: And so we're actually going to point it to Hyperspace, which is the Filecoin testnet similar to Sepolia or Gurley before it became a whole for profit thing on Ethereum.
00:08:24.538 - 00:08:25.086, Speaker A: Right.
00:08:25.188 - 00:08:30.046, Speaker C: So to add hyperspace to MetaMask, we.
00:08:30.068 - 00:08:34.382, Speaker A: Can just go to Chainlist.org, click Include.
00:08:34.446 - 00:08:35.410, Speaker C: Testnets.
00:08:37.830 - 00:08:40.340, Speaker A: This out of the way, and.
00:08:41.430 - 00:09:01.902, Speaker C: Just type in Filecoin. And you'll see here, like all of the different filecoin testnets mainnet as well, we're going to click on Add to MetaMask for Hyperspace since that's what we'll be using for the remainder of this demo. Mainet for fevm support comes out on March 14.
00:09:01.902 - 00:09:13.282, Speaker C: So no EVM yet, but very close on Main net. So, yeah, you just click Add to MetaMask. A pop up will come up for MetaMask.
00:09:13.282 - 00:09:27.720, Speaker C: I already have it added right here. But yeah, that'll add Hyperspace to your MetaMask. And finally, you're going to need to get some testnet fill.
00:09:27.720 - 00:09:53.680, Speaker C: Just like Ethereum and almost any other blockchain you work with, you need to have currency to interact with that chain to prevent spam prevention and to pay the node operators for running all this computation. But on a testnet, you can just get this from a faucet, right? Because testnets have no value. Most testnets now I have to add.
00:09:53.680 - 00:10:10.526, Speaker C: So we'll click on hyperspace yoga. And this is the faucet you can use. Now, Filecoin has its own address scheme, which you'll see as like key addresses.
00:10:10.526 - 00:10:27.818, Speaker C: So like t four yada yada yada, or t one yada yada yada. But everything is actually compatible with Ethereum addresses, right? So if I just copy my account address and I paste it in there just the Ethereum address, we get to.
00:10:27.824 - 00:10:31.434, Speaker A: Go through this awesome captcha, which is.
00:10:31.472 - 00:10:43.230, Speaker C: Always a fun challenge to do live. Now click on the bunnies next. Usually have to go through two screens.
00:10:43.230 - 00:10:55.410, Speaker C: All right, cool. And click send. And Testnet fill from the faucet is on the way to my wallet.
00:10:55.410 - 00:11:14.310, Speaker C: It takes about a minute to get to my wallet. We'll kind of go over transactions on Filecoin in a second. All right, but with that, you have MetaMask, you have some Tfill, and we're ready to move on and deploy some contracts on Remix.
00:11:14.310 - 00:11:18.220, Speaker C: And I already have Remix open, so that's nice.
00:11:19.870 - 00:11:21.258, Speaker A: So once you come into Remix, you.
00:11:21.264 - 00:11:35.690, Speaker C: Know, Remix is an online IDE integrated developer environment. Basically just a quick and easy way for devs to test and interact with smart contracts. Some people use it for the whole dev flow.
00:11:35.690 - 00:12:07.502, Speaker C: We'll go over some hard hat a bit more complex tool later but for now we're going to go and Remix. And you'll see on the left here we have a little file Explorer and you should get some pre built smart contracts, storage sol. But I've imported these smart contracts, simplecoin is one of them and you can see it here, right? And all Simplecoin does is it's a very simple coin.
00:12:07.502 - 00:12:42.530, Speaker C: It takes a constructor you can pass in a value for the tokens you want to be minted and it will mint it to whoever deployed this contract onto the Fevm. And we just have a function to send that coin to other addresses and get our functions to get the amount of token held by a specific address. So we're going to come to the compiler tab, click Compile, Simplecoin Sol and everything is good.
00:12:42.530 - 00:12:48.802, Speaker C: I have autocompile turned on to make my life easier. And we'll go to the Deploy tab.
00:12:48.866 - 00:12:49.574, Speaker A: Right?
00:12:49.772 - 00:13:08.326, Speaker C: You're going to want to make sure that injected provider MetaMask is chosen. When you come in. It will default to Remix VM, that is a local VM within MetaMask and it doesn't interact with any blockchain anywhere, just this virtualized chain on your browser.
00:13:08.326 - 00:13:20.974, Speaker C: Injected provider MetaMask will tell it to send all transactions through MetaMask. And because my MetaMask is pointed to Hyperspace, it is going to go to.
00:13:21.012 - 00:13:24.174, Speaker A: Hyperspace and it looks like I got.
00:13:24.212 - 00:13:26.820, Speaker C: My five T fail added. So that's awesome.
00:13:28.310 - 00:13:29.060, Speaker A: Right?
00:13:29.750 - 00:13:51.740, Speaker C: So then you're going to want to make sure that the contract you're pointing to is the one you want to deploy. We're going to want to deploy Simplecoin and we're going to put in the constructor since that has to be filled out before we deploy it to 1200 tokens. That's how many I'm going to mint for Simplecoin and they will be assigned to me again.
00:13:51.740 - 00:14:01.950, Speaker C: If I click deploy, we'll see MetaMask comes up with a transaction. It's going to estimate gas fees. We're going to click confirm.
00:14:01.950 - 00:14:34.114, Speaker C: So if you're used to gas on ethereum, gas on filecoin is actually calculated a bit different and it does use filecoin gas and not the traditional EVM gas. So the gas calculations, you can find more detail in the docs but they're based on WASM time runtimes for all these computations as opposed to the hard coded gas values that you'll find in most ethereum runtimes.
00:14:34.162 - 00:14:34.760, Speaker A: Right.
00:14:35.610 - 00:14:45.254, Speaker C: And so that's going to take about a minute to deploy. It's going to take some time. So I have a pre deployed contract.
00:14:45.382 - 00:14:49.100, Speaker A: We can look at while that goes through.
00:14:49.950 - 00:15:08.878, Speaker C: So you can load any contract right here as long as you have the abi and the address is deployed at which Remix has the abi. Since we have the contract in here and we'll just click Add address and it turns out my contract deployed at the same time. So that's convenient.
00:15:08.974 - 00:15:10.754, Speaker A: We'll just go ahead and look at.
00:15:10.952 - 00:15:18.294, Speaker C: The contract we just deployed. All right, so if I copy and.
00:15:18.332 - 00:15:26.098, Speaker A: Paste my account in here and click balances, boom.
00:15:26.194 - 00:15:58.940, Speaker C: So I have 1200 I Minted to myself to initiate this token. That's simple coin, right? So this is just basic solidity working on the Filecoin EVM. But now I know that's cool, but why EVM on Filecoin, right? There's a million other EVM chains out there.
00:15:58.940 - 00:16:29.806, Speaker C: And remember, the history of Filecoin is that it was designed primarily for decentralized storage, storing the Internet's data. And I find that this is a very important part of the web Three stack, right? A lot of front ends for web Three DApps are actually hosted on centralized servers. And so Filecoin is kind of there for cold storage, right, which is a very important sector.
00:16:29.838 - 00:16:30.034, Speaker A: Right.
00:16:30.072 - 00:16:34.190, Speaker C: So we don't have to trust on any one centralized entity.
00:16:34.270 - 00:16:34.900, Speaker A: Right.
00:16:36.150 - 00:16:46.886, Speaker C: So the Filecorn blockchain actually monitors the storage deals, right. The metadata for the storage providers.
00:16:46.918 - 00:16:47.546, Speaker A: Right.
00:16:47.728 - 00:16:57.894, Speaker C: And so how can you access these storage deals? You can do them through these Filecoin solidity libraries created by our friends with the team Zondex.
00:16:58.022 - 00:16:58.554, Speaker A: Right.
00:16:58.672 - 00:17:15.470, Speaker C: So let's take a look at them right here. And I'm about to go into some more detail about storage deals in a second. Right, so these are basically solidity APIs.
00:17:15.470 - 00:17:38.426, Speaker C: You can't use these on any other chain because these are specifically for the Fevm and they again take advantage of these native actors, we call them, for interacting with storage deals. It is in beta at the moment, is being audited as we speak and should be ready very soon. But I just need to put that.
00:17:38.448 - 00:17:42.454, Speaker A: Disclaimer and yeah, you see, the README.
00:17:42.502 - 00:17:58.670, Speaker C: Kind of explains some things. If we look in the contracts directory you'll see here we have APIs. These represent APIs that were already open to Filecoin, but this opens them up to be used in solidity.
00:17:59.010 - 00:18:00.350, Speaker A: So if we look at the market.
00:18:00.420 - 00:18:20.054, Speaker C: API solidity contract, this actually opens APIs like a bunch of gitter APIs for getting information about a specific deal on chain, getting the actual PCID, getting the.
00:18:20.092 - 00:18:23.942, Speaker A: Client who asked for the deal, getting.
00:18:23.996 - 00:18:27.900, Speaker C: The provider the address of the provider who's storing the deal.
00:18:29.630 - 00:18:32.140, Speaker A: And so on.
00:18:32.830 - 00:18:42.830, Speaker C: Right, so using these in your DApps really opens up the world of the Fevm when compared to other EVM chains.
00:18:49.640 - 00:18:54.310, Speaker B: Hey, Zach, when you're in Remix, can you zoom in a little bit as.
00:18:54.680 - 00:18:59.332, Speaker C: Oh, yeah, sure, yeah, no problem. I'll make sure to do that when we go to the next contract.
00:18:59.476 - 00:19:03.560, Speaker A: Okay, yeah, appreciate that. Cool.
00:19:03.630 - 00:19:15.100, Speaker C: So I'm mentioning these deals, right? So let's talk a little bit more about them and how they're created in the past and how we're going to create them later on in the demo.
00:19:15.170 - 00:19:15.740, Speaker A: Right?
00:19:15.890 - 00:19:24.796, Speaker C: So if we go to Phil Fox, which is a block explorer for Filecoin, you can click on the blockchain tab.
00:19:24.828 - 00:19:28.770, Speaker A: Here and click on Deal list. Right?
00:19:29.700 - 00:19:38.080, Speaker C: And these are actual storage deals on chain. If we click on one. This deal ID right here you have the provider.
00:19:38.080 - 00:19:48.804, Speaker C: These are usually miners on the file coin network and their address, their ID, and you have the client, right. The address of whoever requested data to be stored.
00:19:48.932 - 00:19:49.610, Speaker A: Right.
00:19:50.460 - 00:20:05.292, Speaker C: The data that are stored here in this deal is 32GB. And you can see when it was stored and the PCID, aka basically you can think of it as the root hash of the data that's stored there.
00:20:05.346 - 00:20:05.950, Speaker A: Right?
00:20:12.640 - 00:20:27.892, Speaker C: So we're going to talk a little bit more about that root hash that I mentioned earlier, also known as the PCID or the comp. So you'll see this big graphic. It may look confusing, but it really isn't much.
00:20:27.892 - 00:20:58.060, Speaker C: Essentially, you take a file, let's say it's that cat photo that I showed earlier, right. And you want to prepare it to be stored in a firecorn storage deal, right? Well, one of the first steps is you're going to turn it into a car file, right? A compressed version of the actual file. And then you're going to want to compute what we call the IPLD Dag directed async graph.
00:20:58.060 - 00:21:22.500, Speaker C: Confusing. It's just like a tree. If you're familiar with the inner workings of Ethereum or Merkel tree or a binary hash tree, that's essentially what it is, right? So it's going to take that data, it's going to take that file, that compressed file is going to split it up into chunks and then it's going to hash each of those chunks and then create a tree hash all the way up until you get your root hash.
00:21:22.500 - 00:21:43.736, Speaker C: And this allows you to get like a hash that represents the whole data. And so that kind of just represents the raw file or the raw compressed file. We actually are gonna you're gonna want to pad the file to make sure it fits.
00:21:43.736 - 00:21:47.036, Speaker C: And there's tools that do all of this. We're going to use one later in.
00:21:47.058 - 00:21:50.380, Speaker A: The demo with some zeros.
00:21:50.720 - 00:23:04.178, Speaker C: And essentially when you send this to a storage provider, you're going to send this padded compressed file along with the IPLD graph or Dag, to the storage provider and they're going to confirm that your file does in fact hash to that PCID or that root hash. And that's going to be what represents your deal on chain right here, right? So, long story short, file, we create this graph, we get this piece of data that represents the file and that's what we send to the storage providers to store our files. So this is how deal making works at the protocol level and how it worked specifically before the FBM was a thing, right? Essentially, you, the client or whoever wants to store the data would decide what data you want to store.
00:23:04.178 - 00:23:23.814, Speaker C: You would use a tool of your choice to compress it and create that file that we talked about earlier. You would do some research on storage providers and what deals they're offering. Maybe, you know, a storage provider and you can negotiate with them either way you say, okay, you kind of find a deal that you think works.
00:23:23.814 - 00:23:37.382, Speaker C: You need to lock some funds in escrow so that the storage provider knows you have the funds to pay for the deal. Over time, you send what's called a deal proposal to the storage provider.
00:23:37.446 - 00:23:38.060, Speaker A: Right.
00:23:38.430 - 00:23:59.966, Speaker C: And the storage provider will look it over and make sure that that's what you all negotiated or what they deem as a fair deal. The storage provider would then say, okay, this looks good, we're ready to accept this and publish the deal. So then you need to actually transfer the data to the storage provider.
00:23:59.998 - 00:24:00.482, Speaker A: Right.
00:24:00.616 - 00:24:07.430, Speaker C: And all of these steps. There were tools to do this. There's marketplaces you can look to find storage providers.
00:24:07.430 - 00:24:23.194, Speaker C: But yeah, this is quite a manual process. There was also things like Web Three Storage and NFT Storage that do all of these steps for you and make it a lot easier. But yeah, you would transfer the data over.
00:24:23.194 - 00:24:34.154, Speaker C: They would make that check to make sure the data is actually the PCID that's in the deal. And then they would call a function on the file queen APIs called publish storage.
00:24:34.202 - 00:24:34.558, Speaker A: Deal?
00:24:34.644 - 00:24:55.694, Speaker C: And that would actually prepare them for storing the data. And so that's kind of the traditional way of making the deals and how everything worked with the FVM. I know that was a lot of information.
00:24:55.694 - 00:25:19.258, Speaker C: So I'm going to go ahead and check the chat to see if there's any questions about any of that before I move on. So, yeah, if you have any questions, feel free to drop them in the chat as we're going on and I'll try to make periodic checks like this.
00:25:19.424 - 00:25:26.780, Speaker B: Yeah, there was one question from Harsh how Fevin, Mainet would lead to.
00:25:29.010 - 00:25:30.474, Speaker A: Burning Phil.
00:25:30.522 - 00:25:47.166, Speaker C: Yeah. So Filecoin, just like Ethereum, has a similar implementation for EIP 1559. So every transaction that's sent to the filecoin blockchain, some of that fill is burned.
00:25:47.198 - 00:25:47.586, Speaker A: Right.
00:25:47.688 - 00:26:00.820, Speaker C: And so with the Filecoin virtual machine live, you would expect more transactions to be coming through now because there's more utility and that probably increase the burn of fill.
00:26:04.380 - 00:26:04.744, Speaker A: Yes.
00:26:04.782 - 00:26:10.128, Speaker C: And I see some feedback on zoom and in. We'll make sure to do that when we go back. Okay, cool.
00:26:10.128 - 00:26:12.750, Speaker C: So I think that answers all the.
