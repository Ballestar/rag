00:00:07.290 - 00:00:16.922, Speaker A: Okay, so today I'm going to be talking about Lens Protocol and I want to introduce myself. I'm natter Dabbit. I'm the Director of Developer Relations at Ave and Lens Protocol.
00:00:16.922 - 00:00:28.306, Speaker A: I've been a developer for about eleven years. I've been in the traditional space for about nine years, like non blockchain, and I've been in Web Three or blockchain for a little over two years. And today I'm really excited to just make a quick announcement.
00:00:28.306 - 00:00:49.286, Speaker A: We launched the Lens SDK, which is a really big deal for us. So the workshop that I'm going to be giving at the very end is a very short workshop, mainly because the Lens SDK lets me do this in just a couple of lines of code. If you want to try it out, you can check out some of the links that I'm going to share.
00:00:49.286 - 00:01:11.234, Speaker A: Later you can go to our Twitter and see the blog post that kind of goes over this huge team effort from everybody at Lens and Abe from design to engineering. So we're really proud of what has come out of this. And hopefully you'll really kind of like how it allows you to really quickly build and get started without a lot of code or without blockchain knowledge, which is a big deal.
00:01:11.234 - 00:01:31.302, Speaker A: And at the end I'm going to be doing a quick workshop that is a code along from scratch, building a full stack application with NextJS server side rendering, routing, everything. And it's a really great way to get started with Lens along with some of the tutorials that we have in our documentation. This is all the code that you'll need to build what I'm going to build.
00:01:31.302 - 00:01:56.654, Speaker A: So example code base is there along with the step by step guide. So with that being said, I want to talk about Lens and I want to answer the question of what is Lens? And I think the most succinct way to put this for the just general average person is it's the social layer of Web Three. But here I'm speaking to developers, so I want to describe it more from the terms of how you might build with this and with it being a social protocol.
00:01:56.654 - 00:02:31.998, Speaker A: We offer not only the actual underlying infrastructure at the blockchain level that you might assume would be there with a Web Three product, but also a suite of tools and APIs that allow you to really easily and quickly build social applications or integrate social features into your applications without a lot of code and without needing to manage the back end infrastructure. And this is a big deal because we talk about mass adoption in Web Three, but a lot of the use cases that come out are actually really targeted back at us. Like we're big blockchain maxis often and we like dealing with tokens and we like doing all this stuff.
00:02:31.998 - 00:02:49.202, Speaker A: But when we get outside of our bubble, we realize people just want to use highly polished applications that bring a big value proposition to them and therefore we need to kind of build for those people. And with social there are 4.9 billion people that are using social applications today.
00:02:49.202 - 00:03:10.118, Speaker A: So when you think of building for the masses, you need to think of a use case that will appeal to the masses. And this use case obviously resonates, but it's one thing to kind of have an idea and another thing to actually build and execute and have a product that allows people to actually use it and for developers to build on it. And that's really what Lens is.
00:03:10.118 - 00:03:30.798, Speaker A: And when we think about social applications, we're not only talking about Twitter, TikTok and all these other things that we consider social apps. When you start diving into the average application that you use on a daily basis, you start realizing that there are social features built into so many of the apps that we use every day. GitHub has a way for you to follow your friends and see the feed of the apps that they're building.
00:03:30.798 - 00:03:56.610, Speaker A: Things like stack overflow again, I'm speaking to developers, have social features and social components kind of built in. And instead of having to kind of build out all of those things from scratch, you can easily start integrating these things using a managed infrastructure like Lens, similar to how you might use Auth Zero to implement authentication in your traditional Web Two applications. Or you might use serverless functions to implement some type of custom executable code without running your own servers.
00:03:56.610 - 00:04:28.830, Speaker A: You can use Lens to implement social features without building or maintaining or dealing with any of the back end infrastructure. And that's what I want to talk about now, is like, how does this actually work? And really to kind of make this succinct, you could think of the base layer of Lens being a set of smart contracts deployed to polygon, but the value proposition really comes from all the things that have been built on top of that as well. Things like a really simple to use API that gives you a lot of flexibility on querying the data, getting different selection sets for the data that you want to present to your users.
00:04:28.830 - 00:04:49.526, Speaker A: GraphQL is what we use and this allows you to choose and filter and do sorting and pagination all these things that you need for a polished UX like Twitter. When you think of a smart contract, you're typically limited in what you can do there. You have a couple of API calls, but you can't say give me the last hundred users that have signed up that live in this city.
00:04:49.526 - 00:05:11.626, Speaker A: That first name starts with P that have all these different characteristics similar to how you might query a database. You can't really do that with traditional blockchain applications, but with our GraphQL API you can. We also have implemented gasless and signless transactions for users to use your application without having to pay gas and without having to sign transactions.
00:05:11.626 - 00:05:25.958, Speaker A: And those are like, the two, in my opinion, biggest barriers along with wallet. UX. For the average person to actually start using these applications, when you tell a user, hey, I launched an app, go use it, you could excite them about it.
00:05:25.958 - 00:05:43.338, Speaker A: But once they open the app and you're like, oh, by the way, you have to go and buy tokens, and then you have to transfer them to this network, and they have to be on the right network, and they have to be the right token on the right network, and then you have to create a wallet. This is a massive, massive barrier entry for most people. What if instead we were like, you can just go use the app.
00:05:43.338 - 00:05:55.598, Speaker A: I mean, that's kind of like, where we want to go. And in the past, this wasn't really possible because transactions cost a dollar or $5 or even ten cents per transaction. And at scale, that just doesn't make sense.
00:05:55.598 - 00:06:12.718, Speaker A: But with our infrastructure, we recently even rolled out a more scalable infrastructure called Momoka. The last 65,000 transactions have cost $26 combined, which is less than a single ethereum transaction on a bad day. So at that scale, you can start thinking of subsidizing transactions.
00:06:12.718 - 00:06:29.350, Speaker A: The same way that AWS and Google are being used to subsidize transactions on Twitter and Instagram. There is an infrastructure cost, but they're not offsetting it by asking the user to pay for it. They're dealing with that themselves, and the user gets to use the app for free, and everyone wins.
00:06:29.350 - 00:06:54.350, Speaker A: Signless transactions are also a big deal every time you make an interaction, you don't want to have to sign a transaction. With Lens, all these actions are covered and handled by a dispatcher, which you can enable and disable for non financial transactions, which are things that you shouldn't have to worry about. If you post something, it's not a big deal if it's just a comment or something, but it's not something that will ever enable a financial transaction on your behalf.
00:06:54.350 - 00:07:13.382, Speaker A: And then the developer experience. As a developer that's focused on devrel for a long time, this is the thing that I get the most excited about, because we focused a lot around developer experience, and we continue shipping new products and updates just like today with a Lens SDK. And I want to go over some of those things I mentioned.
00:07:13.382 - 00:07:23.914, Speaker A: The Lens API, which is just a really great way to query for your data at the very base level. Gives you a ton of flexibility. Pretty much anything you want to do, any selection set you want, for the most part, is available there.
00:07:23.914 - 00:07:38.282, Speaker A: And then to make that even easier, we've recently, as of today, officially launched the Lens SDK. And this is kind of how the Lens SDK fits into the stack. I mentioned the set of smart contracts, which is the Lens Protocol base layer.
00:07:38.282 - 00:07:50.626, Speaker A: And then we built a GraphQL API on top of that. But to use GraphQL, there is a learning curve for certain developers because you have to actually understand how to query for the data. You have to deal with setting up a client, things like that.
00:07:50.626 - 00:08:00.594, Speaker A: And also the queries can sometimes get kind of verbose. They can be tens of lines of code or even hundreds of lines of code. So the lens SDK sits on top of the GraphQL API.
00:08:00.594 - 00:08:14.762, Speaker A: So you don't need to know anything about GraphQL. And you can actually query the data from the Lens API with this many lines of code import call it query, you have the data coming back. And this is what we're going to be using in the tutorial that we do in just a moment.
00:08:14.762 - 00:08:28.138, Speaker A: We also have the react native Linux UI kit. Some of the most successful apps on Linz are mobile apps and we want to make it really simple for people to build mobile apps. So also with as few as two lines of code, you can start building mobile apps.
00:08:28.138 - 00:08:47.614, Speaker A: A couple of the apps that have been winning hackathons have started bootstrapping their app using the react native Lens SDK and have moved on to kind of continue building and iterating and even getting funding and stuff like that. So this is a really simple way to kind of bootstrap the mobile app with only a handful of lines of code. We also have a way to do integrations.
00:08:47.614 - 00:09:22.286, Speaker A: So the Lens SDK and the react native Lizuikit and the API are mainly done to actually build social applications, though they can be used for integrations, but the widgets are focused at mainly integrations. So if you want to say, I want to add a sign in with Lensbutton to kind of have this digital identity layer without having to build it myself, or I want to allow a Share to Lens button, so I can get a large number of people their eyeballs on the thing that I'm building without having to kind of build my own distribution channel. You can do this also with about two lines of code.
00:09:22.286 - 00:09:34.546, Speaker A: So we have Share to Lens sign up with Lens follow on Lens. We have publications that you can kind of drop in, similar to how the Twitter have twitter embeds all types of stuff there. You can embed profiles and a lot of things.
00:09:34.546 - 00:09:49.080, Speaker A: And the UI for this looks really nice. These are actual pictures of what it actually looks like when you render that. So there's a lot of pre built design in, but you can actually configure about passing in props and things like that.
00:09:49.080 - 00:10:17.578, Speaker A: And then finally, what we've been really excited about lately is the Lens BigQuery API and data set which was released a few months ago, that has all of the data from all the transactions and interactions that have happened on Lens available in a BigQuery data set with over 50 different tables that you could query from. So people are building AI and machine learning and all types of recommendation algorithms on top of Lens now using this. And the great thing about this is you don't have to really be an expert at anything to get started with this.
00:10:17.578 - 00:10:37.846, Speaker A: All you have to do is actually go to Chat GPT and say, hey, how can I create this query on BigQuery? It'll literally give you the code and you can paste it in and people are starting to build some really cool stuff. And another thing that we're seeing adopted a lot is direct messages that are encrypted using Xmtp. This is a really great protocol, you don't need a lot of code.
00:10:37.846 - 00:11:00.142, Speaker A: And the cool thing about this is all the messages are interoperable between all of the Lens apps using a special namespace that we have that has been adopted by most apps in the ecosystem. And people are even building like a unified inbox. So you can think of what if Twitter, Instagram and TikTok and all of these different apps all shared the same messaging protocol, so you didn't forget where the message left off.
00:11:00.142 - 00:11:11.774, Speaker A: Every day I meet someone and they're like, oh we talked. And I'm like, where do we talk? Telegram, Slack, I forgot and one of us forgot. But what if it was all in one place? And this is kind of what's happening with Xmtp and Lens ecosystem.
00:11:11.774 - 00:11:43.114, Speaker A: I would say beyond that I'm going to just talk about composability and extensibility a little bit because these are like a couple of core things that are not really Lens specific, they're more like Web three or blockchain specific, but they shine really well with Lens. So with Lens you can actually build in custom functionality into the protocol itself. Almost like if you wanted to send a pull request to Twitter and you knew that you could actually get a feature added, or if you wanted to add a feature to Instagram, that's kind of what's enabled through custom modules.
00:11:43.114 - 00:11:57.618, Speaker A: So a custom module really is wide open for anything on chain. So you can program things like you have to be following my friend to follow me, or you have to have collected one of my NFTs. There's a lot of stuff that you could think of that can go here.
00:11:57.618 - 00:12:36.970, Speaker A: So an example of what this might look like is this is an app that has implemented a few of these custom modules and you can program and specify all these different functionalities optionally for someone wanting to publish any type of publication to a Lens app. So in this example, you can optionally open this window and say, hey, the person that is collecting this has to be following me and it's going to cost a dollar and I'm going to limit this to 50 of them. Or with something like waves, you can say, I'm going to put $10 into a campaign and everyone that mirrors this gets one dollars but they have to have at least 1000 followers.
00:12:36.970 - 00:12:57.878, Speaker A: There's a lot of things that are happening there that are becoming really interesting. Another example is split revenue. So let's say you see someone has built something or you want to do a fundraise for someone and you both have split the work or whatever scenario you could think of, you could put all these different addresses into a publication and you can say I'm going to split the revenue from every collect here.
00:12:57.878 - 00:13:15.558, Speaker A: And all of that revenue gets split immediately when a collect happens because it's on chain, it's just all permissionless and there's no middleman and it's really simple. So beyond that composability. I'm going to speak about composability from the developer's perspective, but also the user's perspective.
00:13:15.558 - 00:13:27.006, Speaker A: From the developer perspective, I've mentioned this idea of managed infrastructure. I just want to underscore this. This is kind of huge because when you're building a startup, it's very expensive to hire devs today.
00:13:27.006 - 00:13:43.678, Speaker A: And it's also very kind of hard to find high quality devs. And most dev teams need a front end and a back end team at the least. And a back end team often includes infrastructure engineers, DevOps, back end APIs, like all of these are often separate skill sets.
00:13:43.678 - 00:13:59.990, Speaker A: But instead with a managed infrastructure like Lens, you don't need anything on the back end, you only need front end. And therefore you're eliminating a large number of devs that you need on your team. Or if you take that same number of devs you can focus more on building a higher quality polished front end.
00:13:59.990 - 00:14:20.346, Speaker A: So we have developer teams of one shipping amazing apps like Butterfly on Lens that are just really great and you would be blown away that there's only a single developer on some of these teams. So that's a big thing I wanted to kind of point out there. And also you inherit the existing user base and ecosystem of Lens.
00:14:20.346 - 00:14:39.954, Speaker A: So if you are trying to bootstrap an audience, it's often kind of hard. But with Lens, when you launch, you have that built in 100 x thousand number of users today. And then in the future, as we onboard a lot more and scale that up, you're starting off with a big number of users instead of having to kind of start from scratch, which is a big deal for a lot of developers.
00:14:39.954 - 00:15:04.334, Speaker A: And then on the user side, there's a couple of different things that go that are a big value prop not being able to lose your account because some random person decides that you said something wrong or your government shutting it down or whatever reasons. But the really cool part is that every single app that comes online, you're now bootstrapping that audience across that app. A good example of this is if you built a big audience on Twitter or YouTube and then TikTok came out, you're starting from zero.
00:15:04.334 - 00:15:20.862, Speaker A: But every time a new app on Lens launches you're starting from X number of followers and you're building upon that. And the outcome of this is that every time a new experience comes online, you can choose to buy into it or not buy into it. And you have a new way to be creative without losing your audience.
00:15:20.862 - 00:15:37.062, Speaker A: You could just try some of these apps out, see how you like them. There are around 100 or so apps that are live today that I would consider like somewhat high quality that you can try out next. I'm going to touch on the technology stack and then we're going to jump into a demo and then we're done.
00:15:37.062 - 00:16:04.110, Speaker A: So when I talk about the technology stack, I've already talked about that from the protocol level, I want to talk about more from the user. Like if you're a developer, what's your tech stack going to look like? It's going to look very similar to what you've probably done in the traditional blockchain space in some aspects, but you can also, again, abstract some of that away with like the react hooks SDK or the react native Lens UIKit. There is one area that you will need to deal with that isn't built in just yet, that I know of.
00:16:04.110 - 00:16:23.858, Speaker A: It's uploading metadata to store it in a permanent way, or to store it however you would like it. So if you're posting a publication, almost like if you're creating NFT, you have to publish the metadata that is for that publication somewhere. Most of the time we recommend using Bundler with RWE because it's very fast and it's permanent.
00:16:23.858 - 00:16:38.300, Speaker A: You could also consider using something like IPFS. We have a lot of apps building live video streaming or just video applications using Liveteer, and that's being adopted more and more. And that's something I would also recommend if you're looking to build a video application.
00:16:38.300 - 00:16:51.450, Speaker A: The traditional libraries for making actual contract calls are often used. So if you want to use Etherjs, Wagme, Rainbowkid, all that stuff works great. On the front end, we're seeing Flutter apps, we're seeing native iOS apps.
00:16:51.450 - 00:16:58.422, Speaker A: React native is a big deal. There's a lot of people building react native apps. So anything that you want to build on the front end is pretty much supported.
00:16:58.422 - 00:17:16.358, Speaker A: I don't think we really have a lot of Flutter support on our end, but we have a lot of high quality Flutter apps that are out there. They're just using existing libraries that facilitate API calls. So I want to touch over a couple of the major concepts and then this will be it before we do the demo.
00:17:16.358 - 00:17:35.678, Speaker A: So who here has used Lens, by the way? Okay, cool. And if you're a developer, by the way, and you want a Lens profile, come down to the booth, we'll get you set up. So the main cornerstone, I would say of Lens is kind of this idea of a profile, because the profile is what everything you end up doing is attached to.
00:17:35.678 - 00:17:51.358, Speaker A: And therefore you can kind of take this and move it around and have somewhat ownership over it. So the profile is like your username, and then the comments, posts and stuff are essentially attached to this profile. And then under a profile, you will create a publication.
00:17:51.358 - 00:18:05.782, Speaker A: And a publication is either a post, a comment, or a mirror. This is just data that you're publishing to the network. And this is essentially a content Uri that's attached to the publication that has all the content that's associated with that.
00:18:05.782 - 00:18:22.326, Speaker A: Again, I recommend something like Bundler with Rweave because it's permanent and immutable. But you can also use something like IPFS and you can do a lot with publications. One of those things is gated access built directly into Lens SDKs, or this ability to build out a gated publication.
00:18:22.326 - 00:18:36.994, Speaker A: So you can say all of my posts are public by default, but for this one, I might say, if you're part of developer Dow, you can read this, but everyone can. Or maybe you've collected my NFT and this is for my NFT holders. All that stuff is optional with the gated access.
00:18:36.994 - 00:19:00.150, Speaker A: And then collects are kind of how you take a publication and turn it into an on chain artifact. So every publication isn't actually like an NFT, but if someone collects that, then it kind of turns into an NFT and therefore you can add a lot of rules around collecting. You can say, I want someone to pay me a dollar to collect this, or I want you to be following this person, or whatever.
00:19:00.150 - 00:19:13.614, Speaker A: A couple of examples of really cool things that have happened recently on Lens. An artist that is a musician had an old MV three or something that he created five years ago. He was like, hey, I just want to put this out there.
00:19:13.614 - 00:19:21.758, Speaker A: If you want to support me, this is one of the songs that I made early on. It's a dollar to collect. He had like 3500 people collect that it took him five minutes to post.
00:19:21.758 - 00:19:37.182, Speaker A: He made $3,500. A really great way to connect to his audience and a really great way for the audience to kind of support the creator. And for the 3500 users at scale, you would think, oh, a dollar collect.
00:19:37.182 - 00:19:53.340, Speaker A: That's not a big deal because people are used to like $5,000 NFTs. But at scale, you can say something could be $0.10 or fifty cents, and you can actually have a reasonable amount of collects that would make up a value proposition for an individual.
00:19:53.340 - 00:20:02.086, Speaker A: So with that being said, I want to jump into the demo. The GitHub repo for this is@github.com dabba three lensprotocolworkshop.
00:20:02.086 - 00:20:14.178, Speaker A: It looks like this, and I'm going to just start off with this empty Next CS application. And what we want to do is we want to use the Lens SDK to build out a social feed. Oh, it looks like my thing is off.
00:20:14.178 - 00:20:18.482, Speaker A: Sorry about that. GitHub repo GitHub.com Dabbit three.
00:20:18.482 - 00:20:33.510, Speaker A: At the very top should be the Lens Protocol workshop. And this has everything you need to build out a NextJS app from scratch with server side rendering and routing and everything like that. And we're basically starting off from this empty Next JS application.
00:20:33.510 - 00:20:41.902, Speaker A: This is kind of what you might expect. And we want to just open this code base. And it is what you would expect from a TypeScript project with Next JS.
00:20:41.902 - 00:20:54.042, Speaker A: Nothing really going on yet. I want to start just by importing the react native I'm sorry, the react Lens SDK. One of the different APIs from there is called Use Explorer Profiles.
00:20:54.042 - 00:21:09.714, Speaker A: This will just return a recommendation algorithm type of preset for you to get a bunch of profiles, and by default, it will give you a selection set. You can also pass in props to identify, define what you want to come back. But at the most basic level, it's very simple to use.
00:21:09.714 - 00:21:50.500, Speaker A: You could say Const data, and then you also have this loading variable that you can use, and you could set that as Use Explore profiles. And then we might just log out this data just to kind of get a view of what this data looks like. And then one other minor modification I need to make is because Next JS recently moved to version 13, you have to define a client side application by saying Use Client.
00:21:50.500 - 00:22:02.648, Speaker A: All right, so our app is loaded. Obviously nothing's changed because we haven't updated our user interface. But already with two lines of code, we have this data that's coming back.
00:22:02.648 - 00:22:19.710, Speaker A: We have ten profiles that have come back from the recommendation algorithm, and we can even say, okay, I want to actually limit this to 25. And now when the app reloads, we should have 25 come back. Let's see if that works.
00:22:19.710 - 00:22:25.710, Speaker A: Maybe. There it goes. Okay, so we have 25 profiles coming back.
00:22:25.710 - 00:22:38.980, Speaker A: Now I want to actually render these profiles to the screen and show the metadata associated with each profile. So I'm actually going to go back here and delete a lot of this code. And we kind of want to start from scratch.
00:22:38.980 - 00:22:57.876, Speaker A: So I'm starting over, essentially from this empty component here. I'm going to go ahead and import a couple of things. We're importing that same use Explorer profiles API.
00:22:57.876 - 00:23:13.548, Speaker A: We're importing a link which allows us to link to pages from NextJS. And there's this format Picture utility which allows us to format an IPFS hash or an Rweep hash into a gateway. And actually, I think it would be nice for us to build this into the SDK at some point.
00:23:13.548 - 00:23:22.140, Speaker A: But for now we're doing it manually. But essentially it'll just say IPFS hash. Okay, we want to say IPFS gateway, IPFS hash.
00:23:22.140 - 00:23:34.000, Speaker A: It's just a very simple function. And then once we have all those things, we're going to create the body for this. And if you look at this entire component, it's 38 lines of code, including a couple of white spaces.
00:23:34.000 - 00:24:01.224, Speaker A: But to start off, we're just taking the data that we're getting back from the using Spore profiles and we're limiting that to 25. And then we're just rendering those in our app by mapping over the data, returning the profile image, and that's about it. So if I save that and I go back to my app and I reload, we now have a social app and the data fetching part of this was only three lines of code, including the imports would be four lines.
00:24:01.224 - 00:24:16.320, Speaker A: But we already have a very nice selection set of data coming back and there's a lot more data that's with this. So you have like the COVID image of the user, a lot of other metadata about that person. So that's the simple intro because I don't have a ton of time.
00:24:16.320 - 00:24:35.956, Speaker A: If you continue with this workshop, you can actually drill down and click on a profile and view the metadata in all those publications for that user. And I think I'm running out of time, so I'm not going to go into that. If you want to learn more about Lens, definitely check out the Lens documentation at docs lens XYZ.
00:24:35.956 - 00:24:50.300, Speaker A: If you want inspiration for other apps that are out there, you can go to Lens Xyzapps. If you want even more inspiration about what we want to see built, you can go to Lens XYZ apps and click on Lensverse. There's a hackathon entire section there.
00:24:50.300 - 00:25:06.044, Speaker A: There's a lot of ideas that we'd like to see there and there's even links to things like our grants program and stuff like that. If you want to see some of the most recent updates like we made, including the Lens SDK announcement, you can go to Mirror XYZ, lensprotocol E. And that's it.
00:25:06.044 - 00:25:07.990, Speaker A: Thank you so much for checking out my dog.
