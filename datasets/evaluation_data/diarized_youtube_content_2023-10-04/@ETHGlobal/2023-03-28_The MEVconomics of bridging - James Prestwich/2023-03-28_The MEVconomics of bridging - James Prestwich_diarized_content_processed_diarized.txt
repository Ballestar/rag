00:00:06.410 - 00:00:13.200, Speaker A: So we're going to move on now to James, who's going to be speaking on the meth economics of Bridging. How's it going?
00:00:13.810 - 00:00:56.590, Speaker B: Yes, I'm going to be talking about a specific Mev mitigation within the context of Bridging. I think I was required by Tina to put the word medkenomics in the title of the talk. So what we're really going to be talking about is using the structure of a bridge and partially ordering messages in order to mitigate mev in the crosschain context. So I'm James. I've been working on Bridging and mev since late 2017. Early 2018? I've been around the block a few times. You can find me on Twitter and GitHub.
00:00:56.590 - 00:01:46.110, Speaker B: Generally speaking, when we talk about a bridge, we're talking about two one way communication channels between blockchains from chain A to chain B and a separate system to go back from chain B to chain A. The general pattern that these work in is chain A will dispatch a message. Some off chain actors will pick up that message and deliver it to chain B. Chain B will do authentication and validation of the message and then deliver it to the application that receives it and handles it. So if you put it on a timeline, it looks a little bit more like this. Each of these steps is atomic on chain or takes a very tiny amount of off chain time. And then there's these big in computer time gaps between the actions.
00:01:46.110 - 00:02:52.622, Speaker B: It sometimes takes tens of seconds for an off chain actor to pick up a transaction from the blockchain, or they might wait several minutes for it to finalize in the proof of stake consensus. So these gaps between the origination of a message and its handling by the off chain actors can be minutes. And the gap between the off chain actors getting the message and its confirmation of receiving chain can be several minutes as well. As we probably know, Mev is a result of time gap between committing to what you want to do and that being executed. It's a result of people being able to insert, reorder or sandwich your transactions after you've committed before their process. And so crosschain bridging has a lot of opportunity for Mev to sneak in because there is such a long time gap from the perspective of each chain. So Mev in a sense is about early access to information and cross chain bridging.
00:02:52.622 - 00:03:41.730, Speaker B: That information is public so long before it gets acted on on the remote chain. So everyone has 10 minutes of warning on what this message does and what it's going to do when it hits the remote chain and how to front run that message most effectively. So from a perspective of the remote chain, the receiving chain, a message and a TX are equivalent. The message comes into the chain, someone off chain submits it and it kicks off some amount of computation or smart contract running or whatever. So a message at a transaction can be included in the block essentially the same as transactions. Reordering and Sandwiching for crosschain messages work just the same. But again, you have 10 minutes advanced warning instead of seconds.
00:03:41.730 - 00:04:42.262, Speaker B: So mev pushes the ordering of a blockchain towards the maximally extractable ordering. The ordering in the block which provides the most value to the searcher builder proposer supply chain. So everything gets shuffled, mev transactions get inserted and the proposer ends up making a bunch of money. So what we want to do is mitigate the impact that Reordering and sandwiching have on crosschain messages because crosschain messages are more vulnerable than the average transaction. So we're going to change the message flow a little bit that I talked about earlier. Rather than immediately dispatching to the other chain, we're going to accumulate on the first chain on the sending chain a batch of messages. And this should be a batch of messages that touches the same application or the same state.
00:04:42.262 - 00:06:06.210, Speaker B: And rather than committing each individual message, we want to commit to a batch. So you take all of your cross chain messages and you put them into a single unit and then you dispatch that batch and process the batch on the other end. So what does this get us as a mechanism? Why do this at all? When you are extracting value from the remote chains block ordering, putting it in a batch preserves the relative ordering of those messages. It prevents the miner or the searcher or whoever from extracting value by reordering the batch and it prevents the searcher from extracting value by inserting within the batch. They change to the semantic message handling of the bridge that mitigates the ability to extract mez by preventing insertion and reordering for specific transactions. And we do this by changing the bridge and the way it handles messages. This usually introduces a small amount of latency, but as a result, you can't be abstracted from it easily.
00:06:06.210 - 00:07:15.542, Speaker B: So we can extend this to reorder batches upon receipt. So when a batch hits the remote chain, the destination, we can reorder that batch on chain using a deterministic but difficult to predict ordering. This can be as simple as just shuffling based on the block hash of the destination chain. Usually you don't want to use a block hash for entropy because it is in some sense predictable and manipulatable. However, we're not trying to prevent manipulation, we're trying to make it more expensive. So what this does is instead of delivering all messages in the order they were dispatched, you can shuffle all of the messages using pretty bad randomness and then make sure that the messages are delivered in the shuffled order. And you might be thinking, can't a searcher just continually reshuffle until they get a good ordering that's more abstractable? And yeah, they can.
00:07:15.542 - 00:08:04.582, Speaker B: But we have a word for that. It's called proof of work. So the searcher now has to iteratively repeat some shuffle hash function and then try to extract upon that blob and it has to repeat that many times, trying to find the best shuffling. And so searching on these shuffled batches becomes a proof of work problem. It increases the cost to the searcher in a way that mitigates the amount of mev that the searcher can extract. It is less profitable to do this because the batches can be shuffled by the remote chain and because all we're trying to do is increase the cost. We don't need good randomness to do so.
00:08:04.582 - 00:08:34.674, Speaker B: We can rely on bad randomness that the searcher might be able to manipulate because manipulating the randomness is equivalent to doing the proof of work. It increases the cost of extraction. So there are a few pros and cons trade offs to this. It's easy to implement and very little on chain overhead. It mitigates specific extraction from crosschain messages. Like I said, the band aid. We're increasing the cost, we're not preventing it.
00:08:34.674 - 00:09:24.330, Speaker B: It's a mitigation, not a fix. And in order to be effective, it requires significant throughput. If all of the messages touch state, then shuffling the order has no effect on the outcomes. This only works if you have several messages, a significant number that touch the same state, so that shuffling changes the outcome of those messages. The other major con is that some applications want a specific ordering. They want to know that messages are received in the order they're dispatched and this does not preserve that property. So this is kind of a quick doodle on potential bridging mechanisms for me fee mitigation.
00:09:24.330 - 00:10:07.040, Speaker B: It is not a full solution and it does not work for every use case, but it's still interesting and fun to think about. So that brings me about to the end of my slides. There are a few things that I wanted to talk about, but this is a very short time slot, so I'm not going to get to. One of the things I wanted to say is that crosschain mev is almost exclusively statistical mev. It has risk involved because it plays out over multiple transactions. And mev is the cosmic background radiation in crosschain comms in that it is going from everywhere to everywhere all at once. Every chain is being statistically Arped against every other chain in every sex at the same time.
00:10:07.040 - 00:10:30.870, Speaker B: But you can't use that communication to carry any useful message. I really wanted to make a joke about ordering discretion and ordering indiscretion. So when you're ordering a block, you have discretion. And Tina politely asked me to say the word MEP economics towards the end of the talk. So this is me saying the word MEP economics and that is the end of my slides.
00:10:35.050 - 00:10:59.120, Speaker A: Awesome. Thank you very much for that. I think we have a minute before Shri Ram is coming on something vaguely related. I'm curious for your take on the kind of conversation around. There's been a lot in the last week about roll ups and bridges. Are they really defined by the bridge? Or is the roll up this completely separate thing from the bridge and it's all just chains communicating with each other?
00:11:01.650 - 00:11:50.320, Speaker B: So this is something that I fight about a lot. A roll up site definitionally includes a bridge to the layer one. The question that we fight about is whether the bridge determines the correct state of the roll up or whether the nodes determine the correct state of the roll up. And I land very firmly on the node side of things. I think that the bridge cannot force the nodes to accept any invalid block, but the nodes can force the bridge to accept anything. And as a result, I think that the nodes decide what the state of a roll up is. Great in the context of.
00:11:52.210 - 00:11:52.794, Speaker A: Keep going.
00:11:52.852 - 00:12:24.378, Speaker B: Sorry. Oh, I can keep talking if we're still waiting. I'm really good at having opinions in the context of bridging. In this sense, roll ups are special because they have this built in bridge and roll ups are a subclass of sovereign roll ups, which is a roll up without that built in bridge. So you take the sovereign roll up, you add an enshrined bridge and you have a roll up. We just came up with the terminology for these backwards, so the terminology is a little funky. Sovereign roll ups are the general type.
00:12:24.378 - 00:12:34.060, Speaker B: Roll ups are the specialized type with the built in bridge. Awesome.
00:12:36.110 - 00:12:50.366, Speaker A: I was going to say just in time. He through. Did just join the room. Since we are running a few minutes behind, we will go over to him. Really appreciate the talk. This was great as always. And we are now going to bring on true on.
00:12:50.366 - 00:12:54.860, Speaker A: For the next talk. He will be talking about restaking an mev. Thank you.
