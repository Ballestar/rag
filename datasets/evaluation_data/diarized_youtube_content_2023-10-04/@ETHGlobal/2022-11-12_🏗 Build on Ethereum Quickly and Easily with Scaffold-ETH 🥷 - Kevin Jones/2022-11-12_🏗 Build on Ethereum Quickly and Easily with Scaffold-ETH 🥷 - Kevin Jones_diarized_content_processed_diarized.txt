00:00:06.410 - 00:00:12.222, Speaker A: All right, guys, thank you so much for coming. Really appreciate you guys taking the time. Really excited to be here today.
00:00:12.222 - 00:00:16.954, Speaker A: This is kind of my hometown. Lived in San Francisco for five years. Now I live in Santa Cruz.
00:00:16.954 - 00:00:25.586, Speaker A: So right up the freeway. Really excited to talk to you guys today about building on Ethereum. And real briefly, my name is Kevin Jones.
00:00:25.586 - 00:00:39.206, Speaker A: I actually work full time for NGINX as a technical evangelist. Been there for a while, about seven years now. I'm focused on advocacy for Scaffold ETH, which is this awesome toolkit that I'm going to be showing you guys today.
00:00:39.206 - 00:00:53.750, Speaker A: I'm a member of the build guild. And yeah, Scaffold ETH is just this awesome toolkit that's going to allow you to build on top of Ethereum quickly and easily. I also have a nonprofit that I founded, and I also help out with a Solidity class for growic.
00:00:53.750 - 00:01:06.474, Speaker A: So if you're learning Solidity, it's a good kind of option to get started. And we actually utilize all of Scaffold ETH and a lot of the tooling that I'm going to talk about today. And then I'm also a photographer, filmmaker, so you'll see me running around Photos.
00:01:06.474 - 00:01:20.342, Speaker A: After this, I'm shooting the event, so if you want a photo, come grab me. This is all my contact info, by the way, on Twitter, I'm known as Crypto Mastery Underscore. And again, if you want to just find me and we'll chat about stuff later.
00:01:20.342 - 00:01:38.342, Speaker A: Today, Scaffold is again, it's this awesome toolkit. If you want to get started building on Ethereum, it's really the kind of de facto way to have everything up and running in a localized development environment. These are what you need to get started, really, to be able to check out the repository.
00:01:38.342 - 00:01:48.458, Speaker A: Obviously, it's in Git open source. You need node JS you need to have at least version 16 or above. I would recommend just getting the newest version, which is 18.
00:01:48.458 - 00:02:04.546, Speaker A: And then you need to have Yarn. Package manager Scaffold ETH utilizes Yarn because Yarn will install all the dependencies for you. And it will also has all the scripts written for you so that you don't have to remember all of the Hard Hat commands and react commands and different things that you would do.
00:02:04.546 - 00:02:26.870, Speaker A: You can just use simple Yarn commands that are already written for you, right? And so when you check out Scaffold ETH, you're going to get a copy of Hard Hat running locally on your local machine, which is like Ethereum virtual machine set up and ready to go. And then we also deploy react for you on Localhost 3000. And obviously everything I'm going to be showing you today is in Solidity.
00:02:26.870 - 00:02:43.690, Speaker A: Okay, what does it look like from the developer standpoint? So obviously you need to clone the repo. You do the Yarn install that's going to install all of your dependencies for you. You do a Yarn chain that's going to spin up your EVM and on a local host.
00:02:43.690 - 00:03:14.310, Speaker A: And then Yarn Start is going to spin up React for you and then you just do a yarn deploy and then it takes a copy of your smart contract and it pushes it to the blockchain that you're running. And you have this kind of like play Ether that's available in hard hat to start testing your assumptions on your application, right? If you're looking to kind of test your skills, I would recommend you guys check out Speedrun Ethereum. It's this awesome tool built by Austin Griffith and the Build Guild that allows you to kind of go through these challenges and kind of test your abilities.
00:03:14.310 - 00:03:24.966, Speaker A: And when you're done with the fourth challenge, you actually get invited to the Build Guild. And I'm going to talk about that in a little bit. If you need help along the way, I'm going to be here obviously.
00:03:24.966 - 00:03:32.794, Speaker A: Also, Austin Griffith is around so if you find him, he is like a wealth of knowledge and amazing. He's the creator of Scaffold ETH. But this is a good resource.
00:03:32.794 - 00:03:44.354, Speaker A: It has the Telegram channel, it has the GitHub, it has the README, it has pretty much everything you need in one contact card. And you can save this to your phone, so don't get lost. The telegram channel is awesome.
00:03:44.354 - 00:04:07.098, Speaker A: There's about 2000 developers in it that are building on Scaffold ETH. So I'm more of a fan of actually doing and showing how this works in real time. So again, if you do a search on Google, the first thing for Scaffoldeeth that's going to come up is going to be the GitHub repository and all of the steps that I kind of went through earlier and I'm going to go through right now are available here.
00:04:07.098 - 00:04:31.106, Speaker A: And then it kind of guides you through of how you edit your smart contract, how you can edit your React application, and then there's also some resources of how you could learn Solidity. If you're just getting started learning Solidity and then it actually guides you to Speedrun Ethereum where you can join the Build Guild. So this is some really good documentation and the link to the Telegram chat is also down here in the bottom and there's a great Docs page as well.
00:04:31.106 - 00:04:52.550, Speaker A: So there's a lot of cool integrations that we've done with the graph, which is a really cool implementation of the graph that runs in docker. So if you're looking to get a graph bounty, this is a great idea because you can just run your subgraph locally. We also have tenderly support like you can actually authenticate your smart contract through them or Etherscan.
00:04:52.550 - 00:05:13.470, Speaker A: And so this is a really good resource as well. If you get lost and you just want to kind of read the documentation. If you're getting started developing on ethereum and you're learning solidity, solidity by example is a really good spot because you can actually go there and kind of copy and paste snippets from various examples into your smart contract and kind of see how those work with scaffoldeth.
00:05:13.470 - 00:05:28.002, Speaker A: And again, this is what Speedrun Ethereum looks like. So you can connect your wallet here and you can connect to MetaMask. And then basically you can go through these quests and you can submit your work as you do it and it guides you through.
00:05:28.002 - 00:05:49.050, Speaker A: And like the first one that you do is you deploy a simple NFT, then you deploy a Staking app, then a token vendor, then a dice game, and you kind of have to hack the dice game. It teaches you a little bit about game theory on Ethereum and then you get invited to the Build Guild. So that's my shill for the Build Guild, which I highly recommend you guys do that path because there's a lot of cool stuff going in the Build Guild.
00:05:49.050 - 00:06:13.140, Speaker A: So far the Build Guild has streamed over 200 Ether to developers that are building in the ecosystem and doing things for Scaffold ETH. And there's about 584 builders in the system and there's over 500 builds of Scaffold ETH that allow you to do different things. So an example would be is if you go to the GitHub repo and you come up here to the top, you can actually do a search for whatever build you're looking for.
00:06:13.140 - 00:06:19.090, Speaker A: And so let's say you wanted to do an NFT. There's like tons of NFT examples. There's like a simple NFT.
00:06:19.090 - 00:06:45.014, Speaker A: There's a SVG workshop that you can do. There's a chain link NFT, a buyer mint NFT, where you can mint based off the buyer's interest in an NFT. So there's really cool examples for different standards that are already written for you, right? And so that's a really good starting point for a hackathon because you don't have to do all that work and kind of do all the different things and create the plugins and grab open Zeppelin contracts.
00:06:45.014 - 00:06:54.880, Speaker A: They're already there and ready to go. You can just check out that repository and then do a yarn install and you're set up as a starting point. And that's a perfectly viable starting point for the hackathons as well.
00:06:54.880 - 00:07:09.018, Speaker A: Okay, so let's actually get into demo here. So I'm using tmux, which is just a terminal multiplexer. If you're not familiar, it's really cool because it just allows you to have different windows open, but you can also just do this in different terminal windows.
00:07:09.018 - 00:07:25.354, Speaker A: You kind of always have like three windows open with Scaffold ETH. I've gone ahead and I've checked out the repository here and I've also gone ahead and I did the yarn install and installed all the dependencies. That takes about a minute for you to get up and running, but after you get up and running, you're good to go.
00:07:25.354 - 00:07:43.246, Speaker A: And then you can spin up your chain. So we do a yarn chain and that's going to spin up a copy of Hard Hat localized Ethereum virtual machine and then I'm going to come over to the second window which is in the same directory and I'm going to do a yarn start. So Yarn start is actually going to spin up React and it's going to run it on Localhost 3000.
00:07:43.246 - 00:07:50.606, Speaker A: That takes about a minute to start up. So we'll just kind of let that sit. And then on that last window is where you'll do your deploy.
00:07:50.606 - 00:08:06.310, Speaker A: So if you do a yarn deploy, it's going to take a copy of your smart contract. It's going to push it to Hard Hat deploy it for you. It's going to tell you the transaction hash, it's going to tell you or the transaction ID, and it's going to tell you where it was deployed, what the contract address is.
00:08:06.310 - 00:08:23.450, Speaker A: And you'll see that you're starting to see these console logs that are available in Hard Hat. So the smart contract comes with it already has Hard Hat console enabled, which I'll show in a SEC. And so you can print some stuff here and use that as kind of like a debugger for your contract.
00:08:23.450 - 00:08:35.186, Speaker A: And then it also tells you how long it took. We can see React started and we see some read calls that were made to the contract that we have. And first let's take a look at the smart contract and I'm going to blow that up.
00:08:35.186 - 00:09:01.626, Speaker A: In Atom, any text editor works if you're using Vs code, it will automatically, I think, spin up a copy of Hard Hat and it will automatically spin up React for you in the terminal window, which is kind of useful, but that can be a little caveat. Just you need to know it does that because you might try to open up another terminal and do that, but that last terminal you'll probably use to do your deploys. Okay, so this is kind of what the structure of Scaffoldeth looks like.
00:09:01.626 - 00:09:11.850, Speaker A: There's this packages folder and that's pretty much where you're primarily going to be working with Scaffold ETH. There's specifically a hard hat folder. And then inside there, there's a contract folder, right.
00:09:11.850 - 00:09:22.478, Speaker A: And then we have a copy of your contract which is just kind of like the Hello World starting contract. We can see here that we're defining what version of Solidity to use. We have a license obviously.
00:09:22.478 - 00:09:34.494, Speaker A: And then we are importing the Hard Hat console so that we have that console support over here in this terminal. And then you have the ability to do more imports which we're going to get to in a second. And then this is real basic smart contract.
00:09:34.494 - 00:09:50.706, Speaker A: It's emitting well, first it's setting up an event that keeps track of the address of the sender of the transaction and then it also keeps track of a variable called purpose. And then we have that kind of hello world building, unstoppable apps variable that we set. We have an empty constructor.
00:09:50.706 - 00:10:18.514, Speaker A: We're going to get to that in a little bit as well. And then we have just this function that allows us to update that purpose, right? And then we have just come these are like default so that the smart contract can accept ETH and that there's a fallback function in case that you call the contract with some ether and don't call a function, it will actually allow it to store that value, right, so that money doesn't get lost. But really this is kind of what we're going to be looking at is really the set purpose and then the actual function here.
00:10:18.514 - 00:10:49.114, Speaker A: So let's look at what it looks like. When you first get into Scaffold ETH, you'll see that there's these tabs here in the app home is kind of where you'll build your project. This is where you'll actually start to write react code and you can think of it as like an application or adapt that's inside of Scaffold ETH, right? And so eventually when you launch to production or mainnet, you're going to probably abstract some of this stuff and that just kind of makes it easy because you can build your app here and then it just kind of guides you, like, shows you where the contracts are, shows you about variables, stuff like that.
00:10:49.114 - 00:11:11.886, Speaker A: But what's the really cool stuff about Scaffold ETH is it has the Debug contracts tab. And what this does is it's basically taking your contract's abi and it's automatically building a UI for you to start testing your assumptions, right? So we can actually come here if we want to interact with our contract. We can come here and say ETH SF like this and we can try to send a transaction.
00:11:11.886 - 00:11:27.458, Speaker A: It's going to tell me that I don't have any gas, right? I need to pay gas to be able to change the state of that variable. So up here on the right hand corner, you'll see that there's this funds from the faucet button. You can just quickly grab some funds from hard hat and it's going to inject those into your burner wallet.
00:11:27.458 - 00:11:49.466, Speaker A: That's another cool thing about Scaffold ETH is it comes with this burner wallet support. So if you open up another tab and go to Localhost 3000 again, you'll see that we still have access to that wallet, right? Because that's inside of this browser session. But if I come over here and say new incognito window and go to Localhost 3000, then I'm going to get a new blocky dude right here, right, we have this kind of like purple guy and he doesn't have any funds.
00:11:49.466 - 00:12:06.846, Speaker A: But then I also have this kind of green blocky dude. That is what I want to use is like my permanent kind of burner account. We could connect MetaMask if we wanted to, right? But it's really easy just to use the burner wallet because you don't have to worry about nonce errors with MetaMask on a local environment.
00:12:06.846 - 00:12:15.734, Speaker A: And then we can also do things here, like we can export the private key if we wanted to. We can import a private key. We can also just send a QR code.
00:12:15.734 - 00:12:33.114, Speaker A: So if we want to send some funds on like a testnet, which we're going to get to in a SEC, we can change that to a testnet. Or we can also grab the address and then we can come here to this kind of like other wallet which has all the Hard Hat funds, which has about 10,000 ETH. And we can send some funds here.
00:12:33.114 - 00:12:44.874, Speaker A: So let's grab, I don't know, like $1,000 in ether. And we just did that transaction and now we'll see that our burner wallet updated with some funds from Hard Hat. So it's really easy, just you're up and running and ready to start testing.
00:12:44.874 - 00:13:07.542, Speaker A: So now if I actually have some funds in my wallet, I can change that state, right? I can pay the gas and do a transaction, but that's not like a super kind of interesting smart contract so we can kind of see what it would look to start developing some stuff. So let's go back to here and we already have this function and it's payable, which is cool because we can actually accept some funds there. We don't have a requirement there.
00:13:07.542 - 00:13:20.906, Speaker A: We'll get to that. But the first thing you might find out with Solidity or with Building DApps is you want to have some kind of access control. And so let's just set up kind of a hacky access control.
00:13:20.906 - 00:13:40.766, Speaker A: Let's define an owner and let's grab this public key from this burner wallet that we have, right? We've got access to the burner wallet and let's save that and then we can redeploy. So if you do a yarn deploy again, it's going to see that we have changes to our smart contract. And by the way, if you want to force your deploy, you can do a yarn deploy reset and it will force a new instance of your smart contract.
00:13:40.766 - 00:13:54.546, Speaker A: And you can keep doing this over and over again and you'll keep getting new instances of your smart contract. So we can see here we'll get a new one. And so that really allows you to just reset the smart contract and start testing your assumptions.
00:13:54.546 - 00:14:14.138, Speaker A: And so now we'll see that we have a new variable that we have defined. And now what we can do is say, okay, well, let's say we want to only allow the owner to set this purpose. So we could say something like this require message sender, which is the global variable that says who is actually signing the transaction.
00:14:14.138 - 00:14:19.934, Speaker A: We'll make sure that it's equal to owner. Or we say you are not the owner. Like this.
00:14:19.934 - 00:14:24.720, Speaker A: Boom, right? I don't know what I'm doing there. All right, safe. And then we'll redeploy again.
00:14:24.720 - 00:14:50.920, Speaker A: And so now if I come over here to this kind of like purple blocky guy, I've got some funds in my faucet or got some funds from the faucet and I want to come in here and say yo, what's up? Like this and hit send. It's going to tell me you are not the owner, right? So I've been able to kind of set up like access control, really basic access control, but that's actually not the proper way to do access control. So we can actually do it a little different.
00:14:50.920 - 00:15:12.158, Speaker A: Let's get rid of the require statement and let's get rid of this address and let's instead do inheritance of an Open Zeppelin ownable contract. So if you don't know Open Zeppelin, open Zeppelin is like the de facto standard for doing different implementations or standards and one of those is Ownable. So it has all that functionality in there for you.
00:15:12.158 - 00:15:33.010, Speaker A: So we can say your contract is and inherit that ownable like this. And then what we can do is because it's set up, we're inheriting all of the functions that are inside of this smart contract. Then we can actually get access to the modifier which is a part of ownable that is only owner.
00:15:33.010 - 00:15:56.080, Speaker A: So we can actually grab that modifier, save that there and then redeploy. And so now we've kind of done the same thing, but we've utilized Open Zeppelin's ownable contract and we'll see here now that we have a new function called renounce ownership, which is if you want to pull out ownership from a contract and make it live forever with no owner and then we have the transfer ownership function as well. And we have that address.
00:15:56.080 - 00:16:09.886, Speaker A: First of all, you'll notice that the owner does not match what I think you would want because you don't have access to this account. This is just some kind of random account. This is actually coming from Hardhat.
00:16:09.886 - 00:16:24.210, Speaker A: So Hard Hat utilizes the very first account as the deployer account. And we can take a look at what that looks like inside of the deploy script. So right below here we have the deploy script and we can see here this is how we're actually deploying our contract.
00:16:24.210 - 00:16:43.998, Speaker A: And we're setting up the settings for that. And you can see right here we're defining the deployer which is getting from Hard Hat all the named accounts it uses the first one and then we can say that it's actually using that deployer and then we can also see that we could pass arguments as well. So let's say you wanted to name your contract like, I don't know, say it's a cat's NFT or something like that.
00:16:43.998 - 00:16:59.650, Speaker A: You might be able to pass an argument in here like this and you could pass that in the constructor. We're not going to do that right now, but it's good to know that is if you want to pass a variable to the constructor, you can do that there. But what I want to show you here is that we get a copy of your contract here.
00:16:59.650 - 00:17:13.318, Speaker A: So const your contract and then we deploy the contract and we have access to it now inside of JavaScript. And so you'll see here there's automatically a thing that's kind of already written for you here. I'm just going to copy and paste that.
00:17:13.318 - 00:17:25.766, Speaker A: That allows us to call that transfer ownership function. So let's go grab that address here and then let's paste that in here. So we're going to do the normal deploy.
00:17:25.766 - 00:17:34.734, Speaker A: It's going to use that hard Hat account, but then it's going to call the transfer ownership function, right? So we're going to do a deploy reset. Boom. There we go.
00:17:34.734 - 00:17:53.794, Speaker A: And so now we see that we have access to the smart contract. Again, we have access control. But again, it's kind of like not a really interesting thing because why would we want to have a function that only the owner could call? So I'd rather show you kind of how you can start using the smart contract as a bank, right? So let's do something like that.
00:17:53.794 - 00:18:13.718, Speaker A: Let's open up the smart contract, let's close the deploy script and let's set a variable. So we'll take away the only owner modifier and instead we'll define a price variable. So we'll do a UN public and we'll call it price and we'll set it to whatever Ether we want.
00:18:13.718 - 00:18:23.546, Speaker A: So we'll do zero, zero, one Ether like this. And what this is going to do is it's just going to create a variable that has the value. And by the way, I have my ID set up.
00:18:23.546 - 00:18:32.890, Speaker A: So it tells me the calculation of how much Ether is to how much way. And I'll get to that in a second. But you could write way here or you could write Ether.
00:18:32.890 - 00:18:50.230, Speaker A: We're going to do Ether because it's easier to read. And then what we can do is instead do a require statement here that says, all right, let's require that the message value of the smart contract is equal to the price. Otherwise we're going to say you are broke.
00:18:50.230 - 00:19:03.590, Speaker A: Something like that and save that and then deploy that. And so now we already had this and it's important that if you're going to do that with a function, you need to make sure it's payable. But it was already payable.
00:19:03.590 - 00:19:21.102, Speaker A: So we know now that we can accept some value on this purpose. So if I come over here now and I want to change this to SF like this, and I try to hit send, it's going to tell me that I haven't sent any money. So now I can come here and I can do 0.1
00:19:21.102 - 00:19:31.506, Speaker A: Ether right here, click the little green button. And what this green button does is it just calculates the amount of way that I need to send in the transaction. So it just multiplies it by ten to the 18th power.
00:19:31.506 - 00:19:45.878, Speaker A: And so anytime you're deploying on or making transactions, you do it in way. So obviously you wouldn't want your user to have to type out way. So you would do that kind of calculation inside of your application using ethers JS, there's support for that.
00:19:45.878 - 00:20:06.334, Speaker A: And then now if we hit send, it's going to allow us to do that, right? And so now we see that the smart contract actually has some value, right? It's got a dollar 65, but at this point, it's kind of black holed. It's stuck in the contract because we have no way to really get the funds out, right? So the next feasible thing would be that you would actually write a withdraw function. So we can do that.
00:20:06.334 - 00:20:19.826, Speaker A: We can say function withdraw like this and we can make it public. We can do like set a boolean called success. Otherwise we will not.
00:20:19.826 - 00:20:39.286, Speaker A: And then we can do so again, message sender is the person that's calling the transaction, right, calling that function. And we can do what's called a call and we can set the value as the balance of the smart contract. So it's address this balance, I believe.
00:20:39.286 - 00:20:56.990, Speaker A: And then I think we need to do this boom, boom, boom. Okay, but we don't want anyone to be able to access all the funds, right? We own the smart contract. We want to make some kind of function and variable so we could actually here, we can use that only owner like this, right, and save that.
00:20:56.990 - 00:21:14.802, Speaker A: But you see, what we're doing was we're getting in this kind of mode where we're making changes to our smart contract. Inside of your solidity code. You're coming over here, you're deploying your smart contract, and then you're kind of like testing your assumptions, right? And so now we'll see we have this withdraw function.
00:21:14.802 - 00:21:25.782, Speaker A: So if I come over here and I'm this kind of like purple blocky dude and I'm using this DAP and I'm like, okay, yo, what's up? I'm going to send some value. We could just copy this from here to here and send. Cool.
00:21:25.782 - 00:21:39.494, Speaker A: I've changed the purpose to Yo, what's up? And then I'm like, oh, I want to grab all those funds so I can try to say send. And it's going to tell me that you're not the owner, right? Because we have the access control set up. But if I come over here, it's got funds in there, I can hit that withdraw button.
00:21:39.494 - 00:21:58.066, Speaker A: And I was able to withdraw those funds because I own this public and private key pair and I was able to call that smart contract. Okay. I want to show briefly kind of like the react code a little bit as well because I think it's very useful real quickly.
00:21:58.066 - 00:22:16.022, Speaker A: What I also want to show is all this stuff that we're doing here is like local host, right? At some point you probably want to deploy your application to maybe a testnet, especially if you're like you're in the hackathon and you want to do it to polygon, right? You might want to deploy it to polygon. So right now we're using the hard hat accounts. Right.
00:22:16.022 - 00:22:35.950, Speaker A: You wouldn't want to use that if you're deploying to a testnet because the public key or the private key could be compromised. So you would actually want to do what's called Yarn Run generate on here. And what that's going to do? Is it's going to spin up or it's going to create a mnemonic and it's going to store that in the root of your application here.
00:22:35.950 - 00:22:44.266, Speaker A: You can see I have a couple of them here. And so these are the root mnemonics. I'm not going to click on them because there's actually, like, the mnemonic, the password.
00:22:44.266 - 00:23:07.986, Speaker A: And then you can run yarn account like this, and you can basically get a QR code for your account. So it takes your public address, creates a QR account, and then it also goes out and checks the balances of different chains that you're on. Right? So what I always do is another cool tool that is actually built by the Build Guild and Austin Griffith is called a Punk Wallet.
00:23:07.986 - 00:23:23.254, Speaker A: So I just always have a Punk Wallet on my phone. And then it's got a little scan feature so I can say Allow. And what I can do is right now I could send just by scanning this, I got to redo it again, and I just have this preloaded with some testnet ether.
00:23:23.254 - 00:23:30.590, Speaker A: I also have some polygon Mumbai stuff on here as well. And so now I have access to that, and I could send some ether to it. Right.
00:23:30.590 - 00:23:48.520, Speaker A: And then I have a deployer account that is generated, and I'm able to deploy my account. And then if you want to deploy, like, I could deploy this right now to actually let me send some ETH for it first. So we'll go to Goreli and I'll send let's see here.
00:23:48.520 - 00:23:59.914, Speaker A: Let's do, I don't know, 0.1 E hit send. All right, looks like it's going.
00:23:59.914 - 00:24:06.460, Speaker A: So I was able to send some funds from my wallet. We should be able to see that Gorelia has some balance. Oh, not yet.
00:24:06.460 - 00:24:21.654, Speaker A: Try it again. It's not working. It's pending, so it might take a second.
00:24:21.654 - 00:24:28.474, Speaker A: But then we can do what's called a yarn deploy again. But we can choose the network. So we could do network Guerrero like this.
00:24:28.474 - 00:24:43.440, Speaker A: And just with that one command, let's see if it actually succeeds, it's going to try to send the transaction, and we are deploying our contract. It looks like it worked. I think it's thinking Guerreli is a little slow today.
00:24:43.440 - 00:24:57.902, Speaker A: Usually it's a lot faster. While that's doing that, I also want to show real quick in the UI, you might want to take your react app and update it to a testnet as well. So inside this app JSX file and then inside Views.
00:24:57.902 - 00:25:09.910, Speaker A: So app JSX is that kind of main component for Scaffold ETH. And if we scroll down, there's just this one section where we can change the default network to Guerrero like this. Save it, and then we can refresh our app.
00:25:09.910 - 00:25:20.534, Speaker A: And so now we should if it successfully deployed, which it's not, I'm not sure why it's not deploying. Live demos, sometimes they don't work. Yeah, I'm not sure why it's not working.
00:25:20.534 - 00:25:27.994, Speaker A: It could be that I'm not oh, there it goes. Finally went. So I deployed the smart contract to Guerreli, and now I have a copy of this smart contract, and I've refreshed my app.
00:25:27.994 - 00:25:34.190, Speaker A: And my app is also on Guerreli. So now I could actually connect my MetaMask. Let's do it.
00:25:34.190 - 00:25:40.942, Speaker A: Let's switch to Guerreli and switch the network. So now I have a bunch of guerreli ETH. Right.
00:25:40.942 - 00:25:52.340, Speaker A: Let's do it here. Let's set the purpose to Scaffold is awesome, actually. Let's do Scaffold ETH like that, and let's make sure we send some value.
00:25:52.340 - 00:26:15.606, Speaker A: Boom send. And then the next step I'm running out of time, but the next step would be that you would maybe want to ship your app to some other hosting service because right now we're running locally, and you can do that directly through here as well. You can do what's called Yarn Build, which is going to take a copy of your React app, and it's going to build it and make it optimized.
00:26:15.606 - 00:26:23.702, Speaker A: And then you can do a yarn. Sorry. CD projects ethereum scaffold ETH.
00:26:23.702 - 00:26:34.414, Speaker A: Then you can do a yarn toy blank. Right now you can do a Yarn Surge, which will put it on a Surge endpoint. If you're not familiar with Surge, it's kind of like a simple static hosting service.
00:26:34.414 - 00:26:45.300, Speaker A: Or you could also do it to IPFS with Yarn IPFS. So you have kind of some options of how you want to deploy your app, but this takes a while to do. So unfortunately, it's not going to finish in time.
00:26:45.300 - 00:26:53.320, Speaker A: But yeah, that's Scaffoldeeth in a nutshell. I do have a couple of minutes. I have 1 minute for questions, so I would love to see if you guys have any questions about it.
00:26:53.320 - 00:27:08.970, Speaker A: It's got to be one question. Come on. Yeah.
00:27:08.970 - 00:27:21.200, Speaker A: So under the docs, there's a Tenderly, kind of like walkthrough. There's like a video, and it tells you how to verify on Tenderly. Basically, you have to create this kind of script inside of your deployment script.
00:27:21.200 - 00:27:37.060, Speaker A: And I think you have to do pass like an API key, I believe, as well, so that the instructions are here. But the only really thing is that you're authenticating your smart contract through Tenderly at least. I think that's the only current integration.
00:27:37.060 - 00:27:53.610, Speaker A: You can also do with Ether Scan as well. So there's Ether Scan is a little bit easier because you can just do Yarn Verify and then pass the network here that you're using. And then you also think you have to update well, you should update your hard hat config also with your API key for Ether Scan as well.
00:27:53.610 - 00:28:03.256, Speaker A: Yeah, that's a good question. Any other questions? No? Awesome. Thank you, guys.
00:28:03.256 - 00:28:06.450, Speaker A: So much for coming. And I'll be around. So you need anything, let me know.
