00:00:06.490 - 00:00:19.294, Speaker A: So hello to the hackers in the house. It's really exciting to see so many builders who has arrived before the main event, you know, to build something cool. So thanks for making it a bit introduction about myself.
00:00:19.294 - 00:00:40.722, Speaker A: My name is Tonya, working as a senior blockchain engineer at Clayton. So I am part of the ecosystem team, so mainly building the peripherals of the ecosystem like bridges, wallets and explorers and SDKs and libraries. So today I'll be talking about what is Clayton and what is Clayton architecture and how does it look as a protocol.
00:00:40.722 - 00:01:03.082, Speaker A: And I'll also show the tech stack and some tools which we have in the ecosystem and a quick demo on one of the feature on Clayton. And also at the end of the session I'll provide all the resources which would be helpful for you to build for the hackathon. So since we are an ecosystem, we have many products running on the ecosystem, so if we are looking for a workshop, 30 minutes won't be enough.
00:01:03.082 - 00:01:21.878, Speaker A: So I'm going to provide you all the tools which we have and what all you can build on the ecosystem. So it should be helpful for the hackathon. So what is Clayton? So Clayton is an EVM based code base, mainly folk from Go ethereum before four years.
00:01:21.878 - 00:01:53.002, Speaker A: So since then it has been highly modified and streamlined in the EVM layer and the execution layer and the protocol layer, storage layer and the gossip layer. So Clayton is a service centric hybrid architecture, more like a POA or permissioned validator set in terms of generating blocks and validating blocks. So Clayton has a main net, which is a layer one mainnet and also a layer two service chain.
00:01:53.002 - 00:02:22.460, Speaker A: So service chain solution is also a blockchain where you can have independent validator set for generating blocks and validating blocks. It's mainly for scalability and we have achieved some interoperability between the layer two side chain and the layer one main chain as well in the protocol level and in the smart contract level. And Clayton has 1 second block generation and instant finality, which means a block is consensus upon and generated every 1 second, which is quite fast.
00:02:22.460 - 00:02:44.718, Speaker A: So here we are mainly concerned about the data consistency over data availability. If you're familiar with the Cap theorem, which is in the left end, just the picture which says about the Cap theorem. And since we are concerned about the data consistency, it is mainly useful for use cases like Bridging to port your sets.
00:02:44.718 - 00:03:22.114, Speaker A: And Clayton has a two second round trip transaction latency. So this is quite fast and we did some tests in the main net and here are some metrics and this is the statistics compared to the other layer one blockchains and it has a two second response time and the average transaction latency is very low. So what is the round trip transaction latency? The round trip meaning the time which you submit the transaction to the blockchain and it gets processed, it gets validated and added to the block and gets propagated to the entire network.
00:03:22.114 - 00:03:44.638, Speaker A: And it comes back to you as a finalized transaction, the receipt which you receive. So the entire transaction cycle, it only takes 2 seconds, which is quite fast and competitive in the industry right now. And this is really helpful in building use cases like MetaWars applications and gaming applications, which requires very low transaction latency.
00:03:44.638 - 00:03:58.910, Speaker A: And you can also build DFI applications and Arbitrage, et cetera. And Clayton can process 4000 transactions per second. So this is also based on the real world statistics in the main net and not in the testnet.
00:03:58.910 - 00:04:20.734, Speaker A: So it can do a send transaction and it can achieve 4000 transactions per second. And for the other smart contract transactions based on the functions, it might add some overhead, so it might vary. However, we were able to achieve 2500 to 2800 transactions per second in the main net for the smart contract executions as well.
00:04:20.734 - 00:04:37.570, Speaker A: And like I said, we have a service centric hybrid architecture. So we have this governance council which we call as the validator set. So we have some reputable node operators in the validator set, like binance netmarble and Makeadao.
00:04:37.570 - 00:05:01.770, Speaker A: And like I said, we have the service chain, which is the side chain, which is for scalability, and you can interrupt with the main chain. So next we'll see how does the Clayton architecture looks like as a protocol. So, since the beginning we have been on POS for block selection and particularly IBFT for consensus.
00:05:01.770 - 00:05:15.198, Speaker A: This is Istanbul bison fault tolerance. And this is mainly helpful for us to have 1 second block generation and instant finality. And we have a three node model architecture.
00:05:15.198 - 00:05:41.322, Speaker A: We have a consensus layer which is the core node, and we have proxy node which is around the consensus layer. And we also have the endpoint node. So you might ask why it would matter for any user, right? But in other blockchain protocols, if you see, no matter what job you do, you'll be running the entire core node architecture, but in Clayton it's little different.
00:05:41.322 - 00:06:01.534, Speaker A: So based on your job, if you are a validator, you can just run the core node and the proxy node. And if you are an endpoint node provider, service provider, like API service provider, you just have to run the endpoint node. So the core node is the consensus layer where the consensus mechanism takes place and where you generate the blocks and everything.
00:06:01.534 - 00:06:23.606, Speaker A: And the proxy node is like the century node, like a gatekeeper which protects the core node from resource exhaustion and from the wild internet. And this proxy node also helps the core node to generate the blocks in timely manner. And lastly, the endpoint node is the gossipers of the the.
00:06:23.606 - 00:06:40.054, Speaker A: This exposes the RPC endpoints. So if you are a developer and if you are interacting with the Clayton blockchain, you're more likely to interact with any one of the endpoint node. So you can submit transaction through the endpoint node and you can also retrieve the data through this endpoint node.
00:06:40.054 - 00:07:02.078, Speaker A: And we do first and first out transaction ordering from the mempool and we also have Clayton specific pre compiled contracts starting from zero x three FF and it goes down like Fe and so on. And we also support Ethereum precompiled contracts. So now we can see the unique features which Clayton has to offer when compared to the other blockchain.
00:07:02.078 - 00:07:22.698, Speaker A: So we have an external account model, meaning we have multiple key pairs connected to a single on chain account. So what's the difference is if you take in other blockchains you have a private key and a public key and address derived from this public key. So you have a single key pair attached to the on chain account.
00:07:22.698 - 00:07:42.662, Speaker A: But here we provide the option of having multiple key pair attached to a single on chain account, meaning it is updatable if you want to update the one single key pair. The private keys can also be updated and it can be removed and it can be added. So we have this option to have and maintain multiple key pairs.
00:07:42.662 - 00:08:29.290, Speaker A: So this gives us the ability to do native multisig support, but in other layers you have to do the smart contract level multisign nature and it also gives us the option to do role based access control with multiple key pairs. For example, let's say you can have one keeper to just update the permissions or to add or remove the keeper and you can have one keeper just to execute smart contracts and one keeper to deploy smart contracts. So this is quite helpful because everything is on chain, you don't have to write a separate layer of smart contract and we have support for multiformat transaction model, like a separate transaction model for execution and deployment and also anchoring transactions for the side chain.
00:08:29.290 - 00:08:50.930, Speaker A: And the best feature is the fee delegation which is on chain where you can delegate the fee to a different person. So if you're developing a D app and if you don't want the users to pay themselves for the transaction, it can be delegated to a different person. So if you take the other networks, they achieve this fee delegation using a relayer network.
00:08:50.930 - 00:09:12.102, Speaker A: So what they do is they write the logic in the smart contract and do some crypto signing magic and send to the network and the relayer network will pay the fee. So it is like a huge complex process but in Clayton everything is done on chain. So if you want to do a fee delegation so you can just sign the transaction and send to the fee payer.
00:09:12.102 - 00:09:30.850, Speaker A: The fee payer will in turn sign the deployed transaction and execute the transaction and pay the fee for it. I'll show a demo on this at the end of my session. So yeah, so we have this on chain fee delegation without having this complex relayer network and we also have cross chain checkpointing.
00:09:30.850 - 00:09:52.490, Speaker A: And another interesting feature is the dynamic and the deterministic gas model. So here, based on the network condition and the transaction rate, the price might go up and down by 5%, but in a single block every transaction will pay the same fee. So we want to be deterministic and as low as possible.
00:09:52.490 - 00:10:14.234, Speaker A: It's similar to the base fee of Ethereum, but in other network you have the option for tipping and you can tip for the transaction and prioritize the transaction and you can skip the queue. But because of this the price is very volatile. But in Clayton we do not have that tipping model because we wanted to keep it as low as possible and deterministic.
00:10:14.234 - 00:10:21.330, Speaker A: However, the range is between 25 to 750 stone. So Stone is something similar to guay. So you can see it's very less.
00:10:21.330 - 00:10:45.030, Speaker A: So for simple transaction like send transaction, you just have to do like 25 guay and for complex transaction it won't go more than 750. So for this is a very useful feature for the DApp developers, you can predetermine how much gas you will be using for a particular transaction. Now we look at the tech stack of the Clayton.
00:10:45.030 - 00:10:58.958, Speaker A: So the top layer is the DApp solution where you can build any applications you want DeFi NFT or gaming on metaverse. And the next is the dev environment. Here we can use all the SDKs and the libraries which you like.
00:10:58.958 - 00:11:12.702, Speaker A: We also support Ethereum DevTools on Clayton. And the next part is the blockchain core which has two interface, if you see. So one is the Ethereum equivalent interface and the other one is the Clayton specific interface.
00:11:12.702 - 00:11:38.490, Speaker A: So why we have two different interface is that in addition to the Clayton specific features like we saw before, we also support the Ethereum equivalent or Ethereum formatted transactions. So for example, let's say you're using ETH Get Balance or ETH sign in Ethereum network. You can use the same exact methods in Clayton network as well and you can use the same tools and same SDKs like web three JS and you just have to change the RPZ endpoints.
00:11:38.490 - 00:12:03.250, Speaker A: So yeah, it's very easy for a DApp developer who is building on Ethereum to port to Clayton and for using the Clayton specific features like on chain multisig or fee delegation or role based access. So you can use the Clay namespace which is the interface for the Clayton specific features. And for this you have to use a Kwajs SDK which is very similar to the web three JS.
00:12:03.250 - 00:12:25.930, Speaker A: We support multiple interface as well to communicate with the Clayton network. And yeah, we have pre compiled contracts for cliton network and we have a governance model with different rewarding mechanism and tokenomics. And below that we have the consensus layer and storage network.
00:12:25.930 - 00:12:49.630, Speaker A: So yeah, here are the tools which you can be using for developing your D app during the hackathon. So as a protocol, we don't want to be opinionated on what tools you should be using or what services you should be using. So we wanted to provide all the services and multiple options for you to build on Clayton.
00:12:49.630 - 00:13:13.580, Speaker A: So we have a few of the tools which you can use for the hackathon today. So the first part, the wallet, we have Clip, Kaikas Decent and Clayton Safe, which is a multisig wallet on Clayton. So here you see all the green boxes has Clayton support, and the ones in the green and blue has both Clayton and Ethereum support.
00:13:13.580 - 00:13:33.950, Speaker A: You can also use MetaMask on the D apps which you interact with Clayton. And yeah, these ones in the orange we are developing and the team is working hard to release it in Q Four, so it will be available soon. So, the open source tools, we have a subgraph surface subgraph service.
00:13:33.950 - 00:13:48.562, Speaker A: This is like an indexer solution similar to the graph, so you can use the subgraph to fetch the data very efficiently. And this is free. So you can build some interesting dashboards on Clayton as part of this hackathon using this subgraph surface.
00:13:48.562 - 00:14:02.006, Speaker A: And we also have dev sandbox. So this has all the boilerplate code for you to build something interesting. So the thing is, we have the boilerplate code to import all the contract library and deploy on Clayton network.
00:14:02.006 - 00:14:18.190, Speaker A: And we have also the front end boilerplate code which can connect to the MetaMask wallet or the in house Kaikas wallet. And we also have some boilerplate code to use the kver SDK and Web Three SDK. So you don't have to build everything from the scratch, you can just use the existing ones.
00:14:18.190 - 00:14:29.362, Speaker A: And you can just have to think of some good use case for this hackathon. And we have contract library and open source decks. And we also have IPFS in house integrated in Q Four.
00:14:29.362 - 00:14:35.700, Speaker A: And we have SDKs. Like I said, Caver, web three. And Web Three unity for gaming especially.
00:14:35.700 - 00:14:51.606, Speaker A: And we have explorer similar to Etherscan, clayton Scope and Clayton Finder. And we are also having an open source block Scout Explorer. So the good thing is you can download the code and if you want to propose a new feature, you can add it and get some Bounties.
00:14:51.606 - 00:14:59.980, Speaker A: Or if you want, you can also build your own feature and run it on your own network. It's fully open source. So this is a cool thing.
00:14:59.980 - 00:15:12.238, Speaker A: And we have Oracles, we have integrated with Chainlink and Witnet. So even using the Oracle services, you can build on the Clayton network. And we have workshops and demos on this Oracle service.
00:15:12.238 - 00:15:33.458, Speaker A: In our repositories, we had some workshops for all these how to use this on Clayton network, because that might take a long time, right? So 30 minutes is not enough to give a workshop on how to install and how to integrate with Clayton. So I'm just going to show all the tools available so that you can just go to the GitHub repository and just see the steps. It's very straightforward.
00:15:33.458 - 00:15:47.130, Speaker A: If you're a developer, you can just install and start integrating. And yeah, we also have RPZ API providers so you can find out some public RPC endpoints to interact with the Clayton network. And yeah, we have also bridges.
00:15:47.130 - 00:16:10.226, Speaker A: So our goal is to provide the best building experience for the devs. So we tend to make all the tools as open source, like wallets and bridges and SDKs if you want to build a wallet. But since all the wallets are already in place so you can just take the code and if you can think of a new feature which can be integrated with your wallet, like Play to Earn with Wallet or anything interesting.
00:16:10.226 - 00:16:39.478, Speaker A: So you can just use the code and you can integrate that feature and use it for your own. And like I said, we have high performing main net so you can build applications which require low transaction latency and it can be easily interrupted with other networks because we have support for bridge and Dexis and the last is the community support. We provide KGF and KR funds.
00:16:39.478 - 00:17:04.146, Speaker A: So if you have a very interesting use case, so we are also ready to support through funds and if you have some bounty programs as well, so you can contribute to the ecosystem. And yeah, so you know, now what is Clayton and how it looks like and how you can make use of the tools to build. But still, if you have some questions on why Clayton, I have so many other networks, right? So for this I'll give a very simple example.
00:17:04.146 - 00:17:30.838, Speaker A: So let's take all the messaging applications. So messaging is the same, but you have so many different applications for just the messaging, right? Messaging protocol, why do we have it? Because every messaging application has something unique to offer for you, right? And also based on the region, it has user adoption, different user adoption. For example, WeChat it's heavily adopted in China region and if you take Kakao Talk, it's adopted in South Korea.
00:17:30.838 - 00:18:00.550, Speaker A: So it has a very huge user adoption as well as some unique thing to offer. Similarly, Clayton also has some unique things to offer and also it has a huge user adoption in Korean region. So first we have better usability through this transaction latency and its stability and this on chain fee delegation this is something interesting or something unique which you can build some interesting use case and we are EVM equivalent meaning you can develop a D app and run it on ethereum network and without much changes.
00:18:00.550 - 00:18:20.166, Speaker A: Just by changing the RPZ endpoint you can deploy in Clayton as well. And regarding user adoption, since Clayton is well established in the South Korean market, so if you're developing an app, you can have more users, it's very obvious. And we have in house wallet.
00:18:20.166 - 00:18:44.846, Speaker A: So this is the first wallet which is integrated with messaging applications called Cacao Talk, so which has 50 million users already. This is a custodial wallet, so even non crypto users can be onboarded very easily and they can start using your application whichever you're building. And we also have a huge gaming company like Netmarble and Vmix running on our side chains, which is the service chain.
00:18:44.846 - 00:19:12.570, Speaker A: So, yeah, these are some reasons which you can build and run on Clayton. So now using one of the feature, the fee delegation, let me show a quick demo. So I'm going to make a use case like having a gasless transaction on Clayton, meaning if a user wants to deploy a contract, I'm just taking this example for today, but you can have any example you want or any use case you want to implement or to take advantage of fee delegation.
00:19:12.570 - 00:19:51.760, Speaker A: So in this example, what I'll do is a user wants to deploy a contract, but he doesn't have to pay for the transaction. So I'm just starting the application and I'm just loading this. So, yeah, actually I have to connect to the wallet, which I forgot.
00:19:51.760 - 00:20:03.072, Speaker A: So this is the Kaikas wallet, which I mentioned. So I connected to the wallet. So now we have a UI.
00:20:03.072 - 00:20:24.984, Speaker A: And here in the Kaikas wallet, what I want to show is I have a user and it has zero balance, but I'm going to deploy a smart contract with this user. So this is a sample abi and bytecode and you can have any smart contract and any use case using this fee delegation. So I've just used this because I want to show that he can do a transaction without paying fee.
00:20:24.984 - 00:20:36.940, Speaker A: So now when a user initiates this transaction, he doesn't want to pay for the transaction, so he can just sign it. So here you can see it's zero clay. And now you got the signature.
00:20:36.940 - 00:21:01.778, Speaker A: Now I am deploying this contract. So this signature goes to the back end and the deployer who is the fee payer, he will sign the transaction and he'll deploy the transaction. So in the code, so you can just see the fee payer, I have added in the env variable.
00:21:01.778 - 00:21:23.322, Speaker A: So this is the transaction which we signed from the front end. And here we are signing as a fee payer and then executing this transaction through the fee payer. So it's just like few lines of code we were able to do fee delegation, meaning execute a transaction from account which doesn't have balance at all.
00:21:23.322 - 00:21:42.914, Speaker A: So if you look at the code, I mean, here we have the code for that. So, yeah, some front end boilerplate code and some backend code on how to use the kver SDK and how to connect to the Clayton network. So you can just use this piece of code.
00:21:42.914 - 00:22:11.542, Speaker A: I'll also give the resources to all these tools so so next, as part of the sackathon you can build any of these use cases. We are mainly focusing on the MetaWars and gaming applications because we have very low transaction latency, which is good for that kind of applications. But still you can build any applications like Gamify Governance or DeFi NFT use case.
00:22:11.542 - 00:22:44.926, Speaker A: But today's problem statement is you can build an implementation for any one of the following in the Clayton ecosystem. Like you can build any tool for the core protocol and you can build any tool for the ecosystem using the subgraph service or any of the tools which I showed before. And you can also have a Dao or DeFi or NFT use case and you can also build some interactive applications using a low transaction latency because this is very much useful for interactive applications and it shows the advantage of using this Clayton network.
00:22:44.926 - 00:23:03.942, Speaker A: And you can also build any mobile centric applications. So we would expect you to build on the Clayton infrastructure, be it mainnet or testnet or local Clayton node or the service chain. So now you might be thinking what you can build and what resources you might need in order to build and achieve what you want.
00:23:03.942 - 00:23:19.130, Speaker A: Right? So here I have given a very simple picture for a DApp developer. If you are a DApp developer and if you want to build on Clayton, here are the resources. So the front end you can have it in React or next JS or anything you like.
00:23:19.130 - 00:23:39.378, Speaker A: It can be a web application or mobile application and it can have any of the wallet interaction like MetaMask or Kaikas or Webster Connect. So we have boilerplate code for all these to connect from the front end and we also provide this public API endpoints. So you just need the wallet and you didn't need a front end.
00:23:39.378 - 00:23:54.578, Speaker A: And for the back end you can use any of the SDKs like Web Three SDK or KVR SDK. And this in turn will deploy the transactions in the blockchain. So for all these tools we have the boilerplate code ready in our GitHub repositories.
00:23:54.578 - 00:24:25.890, Speaker A: So you just have to think of some interesting use case and use this to build. So if you want to build something other than the app, you can just scan this QR code which will lead to the GitHub repository of all the resources. And we also have Clayton Developer Hub website where you can look for the resources and yeah, we have some attractive prize amount and also all these winners will also get a biometric wallet, hardware wallet and I'll also show the GitHub repository.
00:24:25.890 - 00:24:58.890, Speaker A: This is too big, I can just yeah, so here if you see, we have some sample apps and examples for you to take it and build something on top of it. And we also have some starter kits. So these are the API service and the public RPC endpoints which you can use to interact with and the SDKs, which I mentioned, and the wallet code.
00:24:58.890 - 00:25:09.978, Speaker A: So for all these, if you click on the specific repositories, you have the sample code and you can also integrate with Oracles. Even for Oracles, we have a separate workshop in one of these links. You can just check it out.
00:25:09.978 - 00:25:14.480, Speaker A: So you so yeah, that's it. Thank you.
