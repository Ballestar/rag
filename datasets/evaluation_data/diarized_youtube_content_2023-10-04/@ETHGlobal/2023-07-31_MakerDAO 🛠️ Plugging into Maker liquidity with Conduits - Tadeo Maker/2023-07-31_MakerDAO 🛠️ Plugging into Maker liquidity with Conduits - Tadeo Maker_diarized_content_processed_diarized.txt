00:00:07.290 - 00:00:44.860, Speaker A: Hi everyone. My name is Tadeo and today I'm going to tell you a bit about conduits. I'll do a brief overview and then I'll have Lucas Protocol Engineering and the team go over more like details. Any questions you have, please just raise your hands anytime. Great. So from on Maker we've always had predictable rates, something I don't think we've really pushed as narrative that much. So instead of having variable rates that change on a block by block basis or fixed term rates that we're seeing now coming from other companies like Element and Sense, makers always had governance defined rates that change.
00:00:44.860 - 00:01:36.250, Speaker A: Not that often, but they do actually change. The nice thing is when they do change, it's through our governance process that's fully open and transparent, you get to see that process. And also once that is voted on, there's also time delay. So you always know exactly when they'll change and actually what the new value would be. So before you could only access those rates through Maker vaults or what we call NCDPS nowadays, we've kind of evolved to be able to offer those rates for different users. So if you're a borrower nowadays you can go to Spark lend, say, our new lending market where you're able to deposit your crypto collateral and actually get that predictable rate. You can also be a depositor and that case you'll be depositing your Dai in the Dai savings rate where you'll be actually earning that yield.
00:01:36.250 - 00:02:20.690, Speaker A: And we also have an ERC 46 26 representation of the DSR called as Die. And then finally, the one I really do want to talk to you guys today about is the conduits. So conduits are like an adapter between Maker and the rest of the ecosystem. A way for builders to actually deploy Maker capital directly into the protocols, whether they're fully on chain or a mixture of off chain with real asset protocols, for example. So just a little overview, the change of Maker rather than just being a single entity or single protocol. Now we kind of have like two levels. We have Makercro on the top and then we have subdos.
00:02:20.690 - 00:03:21.606, Speaker A: These subdows are the entities, the on chain entities that will essentially be providing this liquidity to your underlying protocol. As you can see here on the middle layer, we have Spark lent, we have univ three LP token positions as well as any other protocol that you may want. So how do subdoub actually push this liquidity into the market? This you can see in green, we have on the left hand side the VAT, which is the core accounting model from Maker. This is the old school system that is still pretty much still there. And then we have all this new infrastructure created to be able to support this delegated capital allocation. What we really want to talk about though is on the right, the actual conduits. These are contracts that are actually fairly simple, that will be able to standardize the way that Maker provides liquidity to any protocol on chain.
00:03:21.606 - 00:03:47.698, Speaker A: So you can think of as adapters. I quite like to think it's very similar to how Unisoft is developing hooks makers, developing conduits. So let me show you. This is the main interface. As you can see, it's extremely simple. And really the most important thing that you need to really take care about is inheriting this. And as you can see, it shows a deposit and withdrawal function specifically for the hackathon.
00:03:47.698 - 00:04:27.060, Speaker A: There's other stuff that we're not really needing to demonstrate effectiveness of your projects, including the different permissions that we have. Let me show you all the different permissions that we have coming from the Roth Singleton and also from the buffer contract. Now you can have any variety. You can plug into anything. Pretty much one of the most complex things you can apply to is webull assets because you have that off chain component. In that case, here's an example interface that basically inherits from the previous one where you can see that. I want to show you really the request funds function.
00:04:27.060 - 00:05:13.970, Speaker A: Essentially a way of asking the external entity, basically saying, hey, can I please have my money back? And then because they'll do their own off chain stuff and then actually basically pay back the money they own. I just want to finish before Lucas gets on top and saying conduit builders are part of this ecosystem. It's not just sub, DAOs and external protocols. This middle layer in the middle is a group of builders that we actually care about a lot and we want to incentivize feature building. So now I'm just going to bring Lucas up and he's going to walk you through a couple of examples. And if you have any questions, please raise your hands. Actually, before you do that, any questions on the overview? Well, good.
00:05:13.970 - 00:05:14.562, Speaker A: Awesome.
00:05:14.696 - 00:05:32.310, Speaker B: We'll take you away. All right. Hi, everybody. My name is Lucas. I work as a smart contracts engineer at Phoenix Labs. I'm currently working on one of the conduits. So just before I go into that, I'm actually just going to bring this up again really quickly.
00:05:32.310 - 00:06:22.802, Speaker B: So one of the really exciting things about MakerDAO where we're headed is this introduction of subdos and the ability for them to allocate Dai into DeFi into real world assets and to expand the supply of Dai and earn a yield on it in a really conservative and scalable way. And what I find really exciting about this is the introduction of conduits. So there's many different ways to deploy Dai into the DeFi ecosystem. You can market make the peg, you can add liquidity to a lending market such as Spark. You can deploy into real world assets. There's many different ways to earn yield. And what's really cool about this architecture is that individual developers can develop these conduits themselves and propose them to Maker governance.
00:06:22.802 - 00:07:07.170, Speaker B: And if they are deemed to be scalable, safe and reliable. They could be integrated into the core maker system. So what I'm going to do now is I'm going to bring up some code that I'm currently working on. So you can see this is my Ranger conduit, which I'll turn off my coverage monitoring for. And I'll also bring up the is this I'll probably do one more actually. Yeah, there you go. Okay, so what todayo brought up was the allocator conduit base interface.
00:07:07.170 - 00:07:57.218, Speaker B: And so this is what matters for any new developer working on a conduit. So essentially, you have just a deposit and withdraw function in terms of adding funds and removing funds from the conduit. And then you have two view functions, the maximum amount that you can deposit and the maximum amount that you can withdraw at any given time. So within that, the bounds are pretty open. Anyone who's working on a conduit can develop any kind of strategy that they want as long as it adheres to this interface. And it's important to note that it can deal in any asset that you like. So a common use case like for example, what I'm currently working on is USDC is typically what's deployed into real world assets because it's easily convertible to fiat.
00:07:57.218 - 00:08:43.934, Speaker B: So you can deal with multiple assets within a single conduit, which is important to note. So for my example, I'll just open the interface, keep it simple. So my conduit that I'm currently working on is dealing with real world assets. So the key difference, there's two sort of approaches that you can take to a conduit. You can either take the deposit in and then move it straight into a protocol or strategy or whatever it is. A good example of that is a spark conduit. So if we want to mint Dai, move it through a conduit, deposit it, the deposit function will actually atomically perform the deposit into the Sparklend protocol.
00:08:43.934 - 00:09:55.478, Speaker B: And so the Dai will just move through the conduit into that external protocol and live there. And the positions will be tracked within the conduit. However, for real world assets, it makes more sense to actually temporarily hold the custody of the funds within the conduit and allow for the arrangers, the real world asset entities that are deploying the capital into treasuries or whatever it is, to be able to come in and have a common place where they can just draw funds and allocate them. And what's interesting about the Arranger conduit is that it tracks positions for multiple entities using the same contract. So what this means is that for multiple allocated dows, they can all use the same conduit. And the real world asset Arranger that's dealing with this conduit just sees the aggregated available cash to be deployed. They can withdraw that, deploy it into Treasuries, and then add the funds back as they're requested by each of the individual allocators, and they can just come in and take their funds.
00:09:55.478 - 00:10:43.910, Speaker B: So all of the position tracking, all of the current outstanding positions, all of the relevant information to easily parse out all these transactions into dashboards or whatever it might be, is all going to be available on chain through these conduits, which is a huge improvement over the existing real world asset system where a lot of this stuff is done off chain. So that's one of the big benefits of using conduits. I'll stop there before I go into my testing suite to see if anyone has any questions, any questions about related to the hackathon, building a conduit, how to get started? Sorry, can you speak? Oh, there we go.
00:10:44.840 - 00:10:51.316, Speaker A: Just around like some practical stuff. Where can we find your repo and those type of things. Yeah.
00:10:51.338 - 00:10:55.430, Speaker B: So today you have some links that will be provided, I think.
00:11:00.400 - 00:11:22.560, Speaker A: Yeah, no, don't worry, everything is in the iflo dashboard. There you should see a link to basically hackathon bounties. You have an in depth description of all the different assets that you might need for conduits, as well as the example actually that Lucas is showing now on.
00:11:22.710 - 00:12:36.676, Speaker B: Yeah. So you can come on in. So I want to stress, from a hacker's perspective, this is genuinely one of the most exciting opportunities to write code that could potentially manage very large sums of funds very quickly. The maker system won't discriminate between any sort of developers as long as there's good code that is well tested and has gone through the proper due diligence process, has been proven out, has been audited. Whatever it is, it will be considered to be integrated into the core maker system and it's a pretty rare opportunity to come in as an external developer and contribute to such a substantial system which will be allocating massive amounts of capital. So if I was a hacker in this hackathon, I would most definitely be working on conduits because I think they're extremely exciting. So regarding the testing, I am working on production level integration testing currently, so I've done more than what's necessary for the hackathon.
00:12:36.676 - 00:13:44.044, Speaker B: The scope of what we're defining in the hackathon is going to be to deploy a conduit and then create you can just deploy your own ERC, 20 asset. In fact, that's what we actually recommend doing in place of Dai or USDC or whatever and regard like permissioning. We want to, for the scope of the hackathon, eliminate all of that dependency just so that we can focus on the core logic of what is actually happening within the conduit. Realistically, all of that access control logic is going to be relatively similar across all the different conduits, so it's not necessarily innovative to be implementing that during the hackathon. So we want to remove that from the scope and just make sure that what you guys are working on is what's important, which is the novel deployments of funds. So just a really quick example of a test here is coming in, minting some funds pranking as the operator. This is foundry.
00:13:44.044 - 00:14:53.644, Speaker B: If you guys are familiar, approving, asserting some balances, asserting some state, performing a deposit, and then making sure that everything is being updated both within the asset and the conduit contract state. And what I would recommend if you're doing any sort of protocol, like an example, is deploying into Spark. I would recommend warping through time to demonstrate the accrual of yields through the protocol protocols that have time based yield components. Any demonstration that you can prove out that yield is indeed being generated if you're using DeFi protocols, I think is something that I'd recommend, but real world assets are definitely also on the table, so it's really open ended to whatever you guys want to work on. Any other questions? Yes. So I think part of the requirement of the hackathon is to deploy to Gorely. Is that true? Oh, no, it's not.
00:14:53.644 - 00:15:39.406, Speaker B: Okay, because yeah, I'm working off of a local fork of Mainnet that's totally viable if you want to do that. In fact, we recommend it if you want to be testing against production deployed contracts. I think it's a good idea to fork Mainnet. It's a good idea to get into Foundry if you guys haven't gotten into that yet for testing as well. It's really easy to fork networks. Okay, I think we're all set. Unless there's anything else? No? All right.
00:15:39.406 - 00:15:40.060, Speaker B: Thank you.
