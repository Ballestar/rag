00:00:07.290 - 00:00:28.338, Speaker A: Welcome everyone. My name is Nick and today we will be mastering our development skills around building DApps specifically on the XDC network. So I have been working in as a software engineer for the last 14 years approximately.
00:00:28.338 - 00:01:01.322, Speaker A: And my first kind of interaction with the blockchain space overall was in around 2011 twelve through one of my mentors, Dioness in Dros. And today I am the CEO of Anosyst We're, a research and software development firm based all over the world, pretty much. Today's presentation will cover those four pretty much aspects.
00:01:01.322 - 00:01:45.550, Speaker A: So I'll give a brief introduction to XDC, I will share with you my observations and then we will all together start building a quick web application. For that you will need your laptop node JS installed and quite some patience so quickly about XDC the XDC network was founded and established in 2017 by a group of individuals which believed strongly in the blockchain technology. It's a proof of stake network.
00:01:45.550 - 00:02:17.994, Speaker A: It is quite fast, pretty robust and very cheap. And there is an amazing foundation and community behind the network for making sure that all the developers and community members are very happy within the environment. And now I will share with you some of my observations based on the companies established, our companies established the last three years.
00:02:17.994 - 00:02:49.746, Speaker A: So we have seen quite some DApps on XDC network, on Flare network where we are also building and so on. And seemingly there have been quite some problems with those DApps. Most of the times we have noticed that because everybody I believe in this room will agree that the onboarding of a user and the user experience in the web free is not the most easily understandable thing.
00:02:49.746 - 00:03:14.534, Speaker A: If I'll show a flow to my mom she'll probably freak out and not speak to me for a couple of days. So the one thing that I have personally noticed, especially in comparison to more traditional markets is that there is no user flow. We do not structure as developers our thoughts.
00:03:14.534 - 00:03:40.530, Speaker A: We usually go all in and we're like oh, this product should have those hundred features altogether at the same time and I should just throw them on the interface. The user will figure it out because he's smart and so that's usually not the way to go because the quite opposite happens. The user doesn't know where to click, doesn't know what to do, she's not even sure what the thing is doing and then she leaves.
00:03:40.530 - 00:04:06.730, Speaker A: So based on that, we're often giving either too much information or too little information. Most probably my mom, as I mentioned in example previously, doesn't know what is a throughput, doesn't care what it is, doesn't know what's a gas cost, doesn't care what is GUI. All those little things should not even be of her concern.
00:04:06.730 - 00:04:42.760, Speaker A: And usually there's tons of dead ends in user experiences around web free. What does that mean? You do one thing, the information never refreshed you now do not understand what you're supposed to do. Was the interaction you initially did ever completed? What did exactly happen? And for all those reasons users just leave your platform and most probably never come back.
00:04:42.760 - 00:05:08.000, Speaker A: So a very, very important tool is the user journey. It's very important to understand our users and that is probably something that we need to do better. One of the greatest tools of web Three is that we have a direct point of communication to our community.
00:05:08.000 - 00:05:46.778, Speaker A: And for the developers of the previous, let's say, decade, that would be just a tool like a golden, I don't know, shovel or something because you can do a B testing without doing any assumptions anymore. You have a direct feedback of the user to tell you exactly how they felt. And what is this about to you know, Bruce Lee famously said be like water which means listen to people in this case and be ready to make the change.
00:05:46.778 - 00:06:10.930, Speaker A: Not to be opinionated, you might be totally wrong about what you're assuming. And for that reason it's very, very important to create your flow. So in today's workshop we will be building a very simple DAP which is going to allow you wrap and unwrap a native currency.
00:06:10.930 - 00:06:26.674, Speaker A: A native currency is the main currency of the blockchain. For example, on ethereum is the ether or ETH token as most might know. And you can use deposit of withdrawal functions.
00:06:26.674 - 00:07:12.600, Speaker A: So some functions on the blockchain which allow you to create or take back your ethereum with this wrap native asset or in short, nut. So today we'll see that the user enters a web page and in this case I will in short show you how you can have your application interact with multiple networks instead of just one. And then the user needs to select a network on which they are connected to or they want to use the application, select a function which they want to perform in this app.
00:07:12.600 - 00:07:50.610, Speaker A: So they need to choose will they wrap or unwrap and then they can see the balance that they have available to perform that action and they can add an amount that they want to interact with and submit the transaction. That action would let them into two possible scenarios the transaction failed or the transaction was successful. If the transaction failed, we need to show the user an error message and in that case take them back to the step where they add an amount and submit the transaction.
00:07:50.610 - 00:08:21.222, Speaker A: And if the transaction was successful, we need to show now to the user the updated balance and to end the flow pretty much to tell them hey, your transaction was successful, good job, you have nothing more to do. Yeah, there's many steps in this flow as you will see from the code. I hope we will be able to finalize that in the next 20 minutes fully.
00:08:21.222 - 00:08:39.918, Speaker A: If we will not be, I will be right outside the code will be public on GitHub. Feel free to ask me any questions and to go through that right there. So that was our user journey.
00:08:39.918 - 00:09:04.406, Speaker A: It is very important when you're building something now that you're in this hackathon to sit down and go through the exact journey you want to deliver at the end of the hackathon. Because many times that's how teams kind of fail to focus and lose the deadline and never deliver something actually functionable. The template that I show is a default template by a tool called Figma.
00:09:04.406 - 00:09:33.966, Speaker A: You can find it online and you can use the Figma tool for free as an individual. For the next steps, you will need, as I said, node JS, any source code editor. We do not discriminate the choice of that a browser and a lot of patience because that's pretty much the main thing that you need to have as a Web Three developer.
00:09:33.966 - 00:09:59.900, Speaker A: So be prepared. And now let's go to the fun part, right? So I will show you some codes, but first of all, I will ask you some questions. So how many of you have actually built a front end decentralized application before? So two, three, four.
00:09:59.900 - 00:10:15.010, Speaker A: Awesome. And how many of you have interacted with at least one before this date? Okay, approximately the same amount of people. So awesome.
00:10:15.010 - 00:10:53.920, Speaker A: Today we will use technologies as Next JS tailwind CSS Wagme, which is a helper for Web Three related actions, and Rainbow Kits, which allows you to utilize the Wallet Connect. So let me open my editor. At this point of time, I will simply assume that you have your Node JS set up and that you have your Vs code open.
00:10:53.920 - 00:11:11.214, Speaker A: I will actually give you a couple of minutes to achieve that. Now, as I said, I will make sure that I will put all this content online. So don't worry if you miss something and go on your own pace.
00:11:11.214 - 00:11:34.620, Speaker A: So make sure that you are not trying to run after me. And one very important aspect, feel free at any point of time to interrupt me and ask a question that's very important for everybody to know that we're all following it and there is no reason to be shy. We all did something for the first time and that's how we all learn.
00:11:34.620 - 00:11:53.650, Speaker A: So to start with, we will create a new Next app. The command to do that is NPX create Next app at latest. And I will name this application ETHGlobal hackathon.
00:11:53.650 - 00:12:06.950, Speaker A: And now it will ask me several questions. Would I like to use TypeScript with this project? I definitely would. ESLint yes, definitely.
00:12:06.950 - 00:12:21.930, Speaker A: Tailwind CSS. Now, this is something that I personally usually choose no to. I personally write most of my CSS myself, but that's something that is up to you.
00:12:21.930 - 00:12:43.550, Speaker A: Would you like this project to use SRC directory? Yes. Now, for the upper router, because there is more documentation online on this solution, I will choose no right now. So anybody who's watching online or yourselves would be able to find more material online.
00:12:43.550 - 00:13:13.928, Speaker A: And would you like to customize the default alliance for the import? No. And this will now given that we're connected to the internet and yes, we are install all the needed tools and dependencies for our application to be able to run. Okay.
00:13:13.928 - 00:13:24.876, Speaker A: And that was indeed successful. And now I can run my application by running NPM run dev. Oh, that is not true.
00:13:24.876 - 00:13:39.260, Speaker A: I'm sorry. I will need to open actually. So right now I am in my computer's repository and now I will need to open the project that I created.
00:13:39.260 - 00:13:54.180, Speaker A: Wherever I created it should be yes, right here. So I'll open this folder with the Vs code. Yes, I trust the authors.
00:13:54.180 - 00:14:44.900, Speaker A: And now I can run NPM run devs. By running this, I can check in my browser that I can see the screen right here. So our next JS application has been successfully installed and now we need to install all the other tools that we potentially will need to interact with webtree, right? So the tools that we will need, as we said previously, are rainbow kits, wagme and one thing that we will barely use but it is needed under the hood is VM.
00:14:44.900 - 00:15:19.408, Speaker A: So those modules help again front end developers to interact much easier with the blockchain. Most of times the biggest problem that both myself and most people that I worked with had is the ability to refresh pretty much the data without initiating extra functions in our code. So this is something that wagme solves great time.
00:15:19.408 - 00:15:42.536, Speaker A: And Wallet connect or Rainbow kit in this case is something that allows us to let the user connect with any wallet they have. They might have a ledger, they might have a MetaMask, they might have a rainbow wallet. So they wouldn't need to care about the exacts of which wallets they need to use.
00:15:42.536 - 00:15:57.676, Speaker A: So now that we have everything installed, you will be able to see all the code base here. And our main folder that we will care about is the SRC folder. Most of our changes will be done here.
00:15:57.676 - 00:16:21.264, Speaker A: And to start with I will open the apps underscore apps TSX file which is the main file where everything starts. So everything that I have on my application, it is going through this file. In order to be rendered, I will add import pretty much the styles from Rainbowkit.
00:16:21.264 - 00:16:46.972, Speaker A: So it's at rainbowkitmerainbookitles CSS. And then what I need to do is I need to set up the Wagme configurations, I need to set up the rainbowkit provider and I need to make sure that I will say tell my app which are the networks that I want it to be connected to. So let's start one by one.
00:16:46.972 - 00:17:15.750, Speaker A: So first of all, we need to get the rainbow kids to import the rainbow kids into the application. So that is done by import rainbowkid provider so the get default wallets is not really necessary here. And then we will also need config chains and Wagmin config chains functionalities added here.
00:17:15.750 - 00:17:32.860, Speaker A: So you can see that I imported those three functions here. If you are wondering where did I find those, I found those by Googling Rainbow Kit. And on the website of Rainbowkit there is a view instruction website.
00:17:32.860 - 00:17:54.784, Speaker A: If you want to easier copy paste those additions, it's the easiest way. So now I have most of the needed functionalities or modules imported. Now, as I said, I will need to import the network which we will be connecting to.
00:17:54.784 - 00:18:20.404, Speaker A: And a provider, a provider is almost like an API handler I would say, which is allowing us to connect to the blockchain as an API. So there are several types of providers. In this case I will show you the public provider functionality, but there is also the Alchemy provider.
00:18:20.404 - 00:18:47.040, Speaker A: If you're connecting to the Ethereum network, you most probably want to use the Alchemy provider because it's much, much more reliable. So I have imported all the functionalities that I need at this moment and now I'll start writing my components. So now we know that the application the only thing that it does, it's returning any component that is passed to it through its pages.
00:18:47.040 - 00:19:21.310, Speaker A: And in this case I want to configure my chains. So the way to do that is the function from Wagmain configure chains and that returns to us an object with an object of array of the chains and the public client. Now, from there on, we will need to create the connectors, which is something that the Wallet Connect uses in order to understand which provider and which chains we're connected to.
00:19:21.310 - 00:19:41.190, Speaker A: And for this one, you would need to find an application ID, a project ID. To be more fair, the project ID can be found on the Wallet Connect cloud website where you need to create an account with an email and a passport. You do not need to connect any wallet and so on.
00:19:41.190 - 00:20:12.110, Speaker A: And last but not least, we need to create the Wagme config, in this case to auto connect, to use the connectors from the above and to use the public client as the client for the blockchain. So now all of our setup is done. We can see that there is no errors right now as the linter worked.
00:20:12.110 - 00:20:48.840, Speaker A: And once I will add here the two last bits, which is the Wagmi config and and to the Wagmigonfig that's on config equals Wagme config from right above. And this closing statement right here is wrong. So this is perfect.
00:20:48.840 - 00:21:15.120, Speaker A: And now I need to add the Rainbow Kit provider to our application. And I can do that by adding this function. And this needs to know now which chains we're using.
00:21:15.120 - 00:21:45.066, Speaker A: And you can identify that by the variable which we defined here, named chains. Now this looks very straightforward and this is what you would got to a point if you would have followed the Rainbow kit configuration setup. Now, there is a tiny problem here that if you will actually run this code, it will not work.
00:21:45.066 - 00:22:02.890, Speaker A: And I can actually show that to you, although there are no errors whatsoever on the code base. If I will try to run this, this is what I will get. Which is not what the Rainbow Kid website is telling me, unfortunately.
00:22:02.890 - 00:22:14.242, Speaker A: Sorry, Rainbowkit. No offense. But what I'm trying to say is that this is happening all the time in the blockchain space and you need to be ready for that.
00:22:14.242 - 00:22:44.214, Speaker A: That's why the patience in our case, I have found this morning what was wrong. And what happens pretty much is that next JS is running it's a server sides rendering type of framework. What it does, it's rendering what it has to pretty much create the UI based off on the server.
00:22:44.214 - 00:23:03.358, Speaker A: And then it only is serving what it rendered already to the user at the time that it's rendering. It doesn't have the FS module, which is the file system module for JavaScript. And that is why this thing breaks.
00:23:03.358 - 00:23:41.322, Speaker A: So now I need to give to the config some kind of fallback for what is happening if the file system is not available at the time that I was actually loading my code, and now that I added that fallback, you will be able to see that once I refresh this page, it will work. Right now that is a job for all of us to do in the space. When we find an issue like that, most times we need to open a GitHub issue, we need to talk to a bunch of developers.
00:23:41.322 - 00:24:11.190, Speaker A: Until like several weeks later, we will be able to solve our problem. So now that we have the Wallet Connect application set up, because I have quite a small amount of time, I will rush this quite a bit. So right now, what I need to do is I need to add a button which will allow me to connect my wallet.
00:24:11.190 - 00:24:41.410, Speaker A: And then I need to create a form which will wrap and unwrap my native currency. So I have pasted from the repository which is live this piece of code, which is tiny really. It is changing the title on the top left and on the top right it is adding a button which says Connect Wallet.
00:24:41.410 - 00:24:59.698, Speaker A: Right? And now if we'll go to this website, we will see how easy it was to add the Connect Wallet button. If I click the button, it allows me to choose from a selection of wallets. Very simple for any user.
00:24:59.698 - 00:25:33.140, Speaker A: It even tells the user how to get a wallet if they don't have one. And then since I do not have installed on this particular window of my browser MetaMask, I can choose Wallet Connect and I can scan this QR code and I can connect with my phone, for example, and use it through there. But for now I will actually open it on a wallet which I have in my MetaMask, which is the wallet right here.
00:25:33.140 - 00:25:51.426, Speaker A: And as you can see, I'm already connected, but I'm not connected to the Ethereum network. So I can disconnect and I can connect again. Once I connect again, it will automatically prompt me to switch to the Ethereum network.
00:25:51.426 - 00:26:06.294, Speaker A: And once I'm on the Ethereum network, I have my UI updated with all the information needed. Now that is pretty cool. And I am also able to show the chain status.
00:26:06.294 - 00:26:29.090, Speaker A: So if the user switches to the wrong network, they can see exactly that they're on the wrong network, which is pretty cool. But now let's actually dive deeper into some actual functions. So in this case, I will create a new folder which will be called Components in order to have our code base a bit cleaner.
00:26:29.090 - 00:27:11.450, Speaker A: And I will create a new component which is called form into this folder. This component this component will be a quite complex component in this case and it will do quite some things. So, starting from the top, we're importing quite some functions from Wagme, an Abi USTATE, some functions from VM, some spinners and a notifications pretty much library.
00:27:11.450 - 00:28:03.580, Speaker A: So what do we do? One thing that we do is we're asking for the developer to provide the type of transaction. Will it be a wrap or an unwrap transaction into Props? And then the user can set the action also from outside of this component. Now I will really quick install the remaining two dependencies and I will show you exactly how it looks or I will not really depends.
00:28:03.580 - 00:28:36.410, Speaker A: So I installed react spinners which will allow us to identify our loading state. And I am also installing this little notifications library. So the idea is simple that when a user clicks the button, there is a spinner coming up.
00:28:36.410 - 00:29:12.198, Speaker A: If the transaction is successful, the user should see a notification coming to his screen, right? Some very simple things use contract, prepare rights, very important function. This helps you to prepare the transaction before the user clicks any button. And that will allow you to make sure that there is no issues with either some maths that you're doing on the front end or some other kind of malicious behavior that your user can do.
00:29:12.198 - 00:29:52.580, Speaker A: You can disable it to him by saying when is this function enabled or not? And you can also provide a watch. So there is a watch function which you can set as true, which I will set in a second. What does it do? It allows the user to see in real time what is exactly happening with his balances and anything around his screen.
00:29:52.580 - 00:30:21.412, Speaker A: So I will add the form component here and as you can understand here, it will tell me to import it and I will also add the state which is the action. Awesome. And now there is something missing here, which is the Abi.
00:30:21.412 - 00:30:58.416, Speaker A: So the Abi is something very important and it's something that you and your fellow backend developers, or smart contract developers, however you would like to call them, you will have to fight a common language on this one. The Abi is almost something like a API document, if you wish. The Abi tells exactly to the programmer which functions are available for him to access through the blockchain.
00:30:58.416 - 00:31:29.400, Speaker A: And it's definitely not a Abi file, it's a JSON file. And now that I have added that here it, you can see constant Abi. Awesome.
00:31:29.400 - 00:32:38.992, Speaker A: And now we have this piece of code, which in our case should work, but it doesn't. Let's see what's going on wrong here and if somebody needs to yeah, I know what's happening here so the application tells us that it doesn't know what exactly is the use notification why is this happening? Is because we added a module which we haven't defined in the specifications of the application once I do add this property right here, which is notifications provider, it will allow me to render my application and now I can see this exact UI, right? It is a pretty simple UI. Shows me the balance that I have on e, and I can wrap or unwrap based on what I want to do.
00:32:38.992 - 00:33:04.890, Speaker A: But obviously those functions are right now based on my code, pretty hard coded. So the next step of what I need to do is to add the chain on which actually those functions are available. And this is something very important, as not quite documented, I would say.
00:33:04.890 - 00:34:12.520, Speaker A: So you can add custom definitions of custom chains. In this case, I have added several networks and you can see that I have to provide quite some information. What does this mean is that if Wagme or Walletconnect or anybody is not providing me that specific network or is providing me that specific network but RPC, the RPC set and I want to use our own internal RPC I can go ahead and override every single definition that there is even for Ethereum, right? And I can use my custom definitions with my custom networks to do that I need to create this little object here and then obviously to export it from this file and now in place of mainnet right here I can go and I can see XDC mainnet right? And it will bring it from the file that I just created and now you can see that I'm connected to the wrong network although it is bringing me the data from that network.
00:34:12.520 - 00:34:36.070, Speaker A: If I would go and switch from here, you can see that I just connected to the XDC network. I can wrap one XVC you can see here the white dot spinning, which is our spinner. If I reject it, it goes back to the default state.
00:34:36.070 - 00:34:47.908, Speaker A: I can confirm it. You can see that the wheel is spinning because the transaction has not been confirmed to the blockchain. Has not gone to the blockchain.
00:34:47.908 - 00:35:27.540, Speaker A: Now that it went there our balances should update and our input went to blank. I have been informed that we are out of time. So this is the last thing that I'm going to unfortunately show you and that is the fact that as you can see my balances were not updated and that is something extremely important for our users.
00:35:27.540 - 00:36:21.590, Speaker A: So in Wagme, which this is by the way for the website for Wagme one of the functions that I used is use Contract Treads. What use Contract reads or use Contract tread does it allows the user to read a specific point in a smart contract. This allows you to listen to updates on every single block so what you should really do is to either use Listener or use the watch function which allows you to literally watch for any changes on the blockchain that way you don't need to refresh and you do not need to pretty much do anything from there on.
00:36:21.590 - 00:36:44.170, Speaker A: I am very sorry that I wasn't able to show you everything that I wanted. Again I will be right outside we can go through in depth specific functionalities and functions would be very happy to help you during the hackathon and good luck everyone for whatever you want to build.
