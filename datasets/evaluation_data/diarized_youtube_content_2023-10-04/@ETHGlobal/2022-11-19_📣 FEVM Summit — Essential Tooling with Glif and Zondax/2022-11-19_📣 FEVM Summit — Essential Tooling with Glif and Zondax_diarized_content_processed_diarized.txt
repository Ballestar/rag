00:00:06.330 - 00:00:17.290, Speaker A: And up next I want to welcome our next speaker inoa to talk about and Zondex. And then John will be coming on shortly after to do the rest of the talk. So without further ado, let's welcome inoa.
00:00:17.370 - 00:00:19.946, Speaker B: Hi. Hi. Thank you Kartik.
00:00:19.946 - 00:00:26.946, Speaker B: Thank you so much. Let me share my screen. So we're here to hack and we are super excited.
00:00:26.946 - 00:01:03.114, Speaker B: I'm really happy to represent today the Thundecs team and the great work we have been building during the past week to really enable hackers build on top of ECVM. And very briefly, we are a team of really passionate people building a lot of tech solutions for the blockchain ecosystem in multiple areas. And like Sarah was saying, we are also contributing to FVM Foundry program and building on top of AVM things like Assembly, Script, SDK and many other great tools.
00:01:03.114 - 00:01:23.190, Speaker B: Like, we are also the team behind things like many ledger apps. But today we are here to talk about AVM tools and how you can use them in the hackathon. So I want to talk about the Devtool suite we are building on top of AVM.
00:01:23.190 - 00:01:46.682, Speaker B: This is conceived to be something holistic like tools to enable you to build, test, explore and interact with the blockchain as well as with the smart contracts you are deploying. There is still a lot of work to be done and a lot of iterations, but we're really happy to present you today the following three tools. The first one has been already introduced by Sarah.
00:01:46.682 - 00:02:25.526, Speaker B: She was talking about the Falcon Sol library, or more precisely the Solidity MOX library because there will be very soon but still work in progress. A Falcon Solidity library that will enable solidity smart contracts to call methods on Falcon built in actors and access Falcon specific syscalls. But since this is still work in progress, what we have created for the hackathon is a Falcon Mock Solbrary containing basically mocks for two actors, the minor actor dealing with storage, mining operations and collecting team proofs, and the market actor that manages storage and retrieval deals.
00:02:25.526 - 00:02:53.262, Speaker B: And we have built two smart contracts test smart contract that hopefully help you to perform these hard coded calls to interact with the FBM. We will put all the links later at the end of the call, so don't worry about that. We have a repository.
00:02:53.262 - 00:03:15.660, Speaker B: We have created also an NPM package so you can easily import that and use that in your project. But it's very important to note that these mocks are not really performing real cross contract calls or syscalls, but will enable to work with your smart contract. We kind of like hard coded some market deals for example.
00:03:15.660 - 00:03:41.060, Speaker B: And the second tool I want to present you is the Berricks Public API. This is an API that indexes the whole filecoin blockchain historical data and provides you a very simple, easy way to interact and ask for transaction account and tipSet data. And I will make a quick demo in a moment.
00:03:41.060 - 00:04:01.578, Speaker B: It's very easy to use. The only thing you need is your GitHub login account and the operations that we support are account tipSet and transaction. You can query by Balance, by info based in accounts, tipSet like by Hathe and latest tipSet and transaction by Hash, Hayth and Address.
00:04:01.578 - 00:04:39.620, Speaker B: And we're really happy to announce that we have also included support for wallaby so that you can also use it in this testnet I will show you very quickly how to go to it. So you can go to our documentation and go here to berks API and the only thing you have to do by scrolling here is to ask for a token. You get your token after accepting the terms and conditions here.
00:04:39.620 - 00:05:01.040, Speaker B: So you upset the terms and conditions and you get an API token and automatically with this API token you can query it. Let's wait a second. Should work.
00:05:01.040 - 00:05:19.346, Speaker B: Yeah okay, so here we are. So here we have our token. We can just copy it and add it into our code and this token has already been introduced here so we can also interact directly here and play around.
00:05:19.346 - 00:05:44.442, Speaker B: We can select between the Falcon mainnet network and the wallaby network. So here we are querying for example by balance and we can just try and get a response. And the same for all these operations we have also developed a client tool so that it's for you even easier to use it.
00:05:44.442 - 00:06:00.430, Speaker B: You have an NPM package here so that you can build on top of it. Coming back to my slides. So the next tool I want to present you is the BRICS Explorer.
00:06:00.430 - 00:06:51.840, Speaker B: We are also building a block explorer that interacts with the Falcon blockchain and also have recently add wallaby support. Yeah, I will show you how a bit okay, I will copy here so it's very easy, you just have to go to Barix Fundax PH and here we can paste for example we are here in okay, so this is a wallaby address sort address and we can search hopefully works. I will refresh just in case.
00:06:51.840 - 00:07:10.840, Speaker B: Okay, let's see. Okay, so it works. So here we see the response and for that address we have here all the transactions in Hath, by Hash, from et cetera.
00:07:10.840 - 00:07:33.280, Speaker B: Here if we click into for example one specific hash transaction we see here the data. We have conceived this really to be useful for the developers so you can easily save the response and export it in either JSON XML file or text. And for example I will export here in JSON file.
00:07:33.280 - 00:08:14.330, Speaker B: You can also here very easily filter for example here all the same you can filter by type by any of these columns. You can also move the columns as you wish. That's pretty it and similarly to Mainet for example similar to mainnet I can do the same go back I can do for example this short address so now we are querying main net.
00:08:14.330 - 00:08:28.172, Speaker B: So this is in mainnet and yeah, we don't have any transactions here. Okay. And the last thing I want to show you is a way to interact with your smart contract.
00:08:28.172 - 00:08:52.136, Speaker B: So let me copy here. I have contract, so if I go to this section, I can insert smart contract. This is an Ethereum address that I have deployed and it will decode it.
00:08:52.136 - 00:09:03.736, Speaker B: And you can check here the API, the information by bytecode, by operation and the methods. Okay. This is not coded.
00:09:03.736 - 00:09:08.350, Speaker B: Yeah. Okay. Yeah.
00:09:08.350 - 00:09:31.968, Speaker B: Well, that's pretty it. Yeah, well, I think yeah, that's pretty it. And yeah, I just want to thank you and say that there is still a lot of work to be done and we hope you can use these tools during the hackathon.
00:09:31.968 - 00:09:49.080, Speaker B: And here is the QR code with a link to all these tools. And we hope you enjoy the building and yeah, happy hacking. And you can contact us.
00:09:49.080 - 00:10:00.474, Speaker B: We'll be mentoring also during the hackathon, and we'll be available in Discord. And you can also contact us here at Hellosantex Ch. And thank you.
00:10:00.512 - 00:10:05.020, Speaker A: So yep, awesome. Thank you so much. I'm just jumping in for Kartik here.
00:10:05.020 - 00:10:10.640, Speaker A: John, I think is it possible that you had something else to jump in on for the rest of this?
00:10:11.730 - 00:10:15.726, Speaker C: Yeah, yeah. Welcome to the you. Thank you.
00:10:15.726 - 00:10:31.938, Speaker C: What's up, everyone? I'm John and Jonathan. I work on Glyph, and in case you haven't heard of Glyph, glyph is basically like an umbrella brand for a suite of filecoin apps and tools similar to Zondax. And that was also an awesome presentation.
00:10:31.938 - 00:10:52.410, Speaker C: Always very impressed with Zondax's work. So, yeah, I guess today I was going to just share with you. I've definitely done my fair share of hackathons, and so I was going to share with you, I think, some tools that I would use if I was participating this weekend, just to kind of help people get up to speed.
00:10:52.410 - 00:10:59.422, Speaker C: So I'll just share my screen as well. And I have a few things. Yeah.
00:10:59.422 - 00:11:15.806, Speaker C: So hopefully everyone can see Chrome here. I think it looks right to me. So the first and sorry if any of this is already repeat information, but the first is called Chainlist.org
00:11:15.806 - 00:11:32.550, Speaker C: and Chainlist.org. Just makes it much easier for us to add in a network into MetaMask. So I've actually already done this, but the idea is you want to search for filecoin, make sure that testnets are enabled, and then you can easily add the Wallaby testnet URL.
00:11:32.550 - 00:12:02.130, Speaker C: And so if you click add to MetaMask, I don't know what will happen if it's already added, but my MetaMask is connected to Wallaby, and I have a little balance here. I don't know if you can see that because my tab yeah, that might not go across screen share. But now basically, if I'm building any sort of front end application that needs to interact with the chain and write any transactions I'm just kind of like already set up there.
00:12:02.130 - 00:12:18.326, Speaker C: So that's one helpful tool. Another helpful tool for kind of exploring the JSON RPC is this Open RPC playground. And this should be on one of the hacker links that is made available to you.
00:12:18.326 - 00:12:43.610, Speaker C: But I'll put it in the chat here too. I don't know if this chat is going to make it all the way around, but it's basically this Open RPC playground where you just point the RPC to our wallaby node. And so the really cool thing about this is you can look through all the methods that are supported by the Glyph Wallaby API.
00:12:43.610 - 00:13:05.206, Speaker C: So this is a mixture of filecoin specific calls as well as ethereum JSON RPC calls as well. And so if you click into any of these calls, let me find a good one that hopefully will work well here. Let's see, like chain head.
00:13:05.206 - 00:13:28.414, Speaker C: Okay, so this filecoin chain head call, you see, it doesn't take any real arguments here. This is like a back end implementation thing and it will tell you what types I'm supposed to get back from this response. And then actually down here, there's an easy way for me to actually go ahead and try it out.
00:13:28.414 - 00:13:53.640, Speaker C: And so if I use control space oops, that didn't work. If I click the Play button, I should get back a sample request response here to help me design the architecture of my application. And so this is a really helpful tool, kind of like postman, but everything is just generated for you.
00:13:53.640 - 00:14:07.722, Speaker C: And I actually learned about this very early this morning. So I would have saved myself a lot of time in the past had I known about this. Okay, so that's two tools so far.
00:14:07.722 - 00:14:32.690, Speaker C: There's Chainlist for just making it easier to import Wallaby into MetaMask, which you've probably already done. There's this Openrpc Playground, which is another really helpful tool just for experimenting with the Glyph APIs and just generally like the Filecoin API and what is possible there. The next tool to show you is the Glyph Explorer.
00:14:32.690 - 00:15:11.070, Speaker C: I have this wrapped file coin ERC 20 implementation here, which I'll also put in the chat. And anyone can fork this or deploy it if you're working on any sort of DFI protocol, sometimes it's good to have a wrapped ERC 20. I'm not going to go into the details over what benefits this can give you, but if you do want to use an ERC 20 version of Filecoin on wallaby, you can go ahead and follow the instructions in this README.
00:15:11.070 - 00:15:25.780, Speaker C: And so I've actually already done that right before this demo. And I sent a couple of test transactions. So this is an example of a transfer, just like a simple token transfer from one account to another.
00:15:25.780 - 00:15:43.926, Speaker C: And that is an interaction with my wrapped fill contract. So I'm actually sending some wrapped fill tokens from one account to another. So if you have a transaction that you've submitted to Wallaby.
00:15:43.926 - 00:16:03.402, Speaker C: You'll either get back a CID, which looks like this Bafy string, or you'll get back like, an EVM transaction hash, which might look much more familiar. And so in the Glyph Explorer, you can go ahead and search by either one of these. So I can plug in this transaction hash, and I get back the transaction.
00:16:03.402 - 00:16:34.140, Speaker C: I can plug in the CID, which is a filecoin specific content hash, and I'll get this transaction detail view. And if I scroll down, you'll see there's a lot of meaningless data here, or not meaningless, but hard to make meaning from. So to make meaning from this data, you can go ahead and upload an Ethereum smart contract Abi, which if you're using a tool like Hard, Hat or Foundry, you should have no problem finding these.
00:16:34.140 - 00:16:59.122, Speaker C: They've most likely been pre generated for you if your contract is already deployed. And so here you can't really see this part of my screen, but I just clicked on the Abi box and I'm uploading the abi of wrapped fill, which I got from my wrapped fill repo that I shared a second ago. And once I upload that now, I can make meaning from this transfer event.
00:16:59.122 - 00:17:09.494, Speaker C: So it now no longer says unknown. I can see the event logs that fired, and those are parsed. So we can make some more meaning from those.
00:17:09.494 - 00:17:32.330, Speaker C: And these were the actual params of what I said, of what I sent. So I sent this address some funds. And now a thing that's awfully confusing about filecoin is that addresses look potentially a little bit different than what you might be used to in the Ethereum development world.
00:17:32.330 - 00:17:53.810, Speaker C: So let's inspect this smart contract. So this is an EVM contract, and you'll notice I have like three different addresses here. For the purpose of this hackathon, you can kind of think of these as all equivalent.
00:17:53.810 - 00:18:19.194, Speaker C: This is the ETH address that we see on Etherscan or on an Ethereum specific developer tooling environment like Hard Hat or Foundry. This address is the filecoin equivalent of an Ethereum address. So any address that you see that starts with like T 410, this is an Ethereum address.
00:18:19.194 - 00:18:37.278, Speaker C: And so we literally just do some different encoding to this address and we just plop it on right here. So this is basically just the file coin equivalent of this. And now the ID address is basically just like a sequential number, like a non that's assigned to your smart contract.
00:18:37.278 - 00:18:57.400, Speaker C: So the next smart contract that gets deployed to filecoin after this one would be 1068. And so this might be confusing if you have trouble understanding this, which a lot of people probably should, because it's quite complicated, I'll be in the discord. I haven't joined yet, but I will.
00:18:57.400 - 00:19:07.814, Speaker C: You can also Tweet at me or whatever. I'll post my links in here. That's my twitter, my discord.
00:19:07.814 - 00:19:32.420, Speaker C: I'll just hop in the chat. So feel free to ping me and I'll get back to you. And there's one other thing that I want to share, which is that at Glyph, our application that we're building and launching alongside the launch of the Fevm is called Glyph Pools and it's a staking protocol, kind of like rocket pool mixed with urine finance in a way.
00:19:32.420 - 00:19:48.760, Speaker C: And so if you are building, I'll show you a little teaser screenshot. Hang on. If you are building an app that needs yield, like a native source of yield through solidity APIs, definitely hit me up.
00:19:48.760 - 00:20:07.200, Speaker C: We will be providing mock contracts, probably not this weekend, unfortunately, so those won't be ready in time for the hackathon. But if you're serious about building an idea on the Fevm that requires native sources of yield, definitely hit me up. I can help point you in the right direction for how things will look.
00:20:07.200 - 00:20:20.450, Speaker C: And then we're also still learning about the needs of builders. So it would be really helpful for me and for the Glyph team to learn more about what your use case is. So definitely reach out.
00:20:20.450 - 00:20:28.340, Speaker C: And I think that was the time that I had. But yeah, I guess that's all I have.
00:20:29.910 - 00:20:42.434, Speaker A: Still have about ten more minutes, actually, so I'm going to try to fill a little bit of that gap. I'm just kind of curious. Well, first of all, seems like an amazing tool and seems super helpful for everybody building this weekend.
00:20:42.434 - 00:20:53.354, Speaker A: So glad that we got those resources. And I was kind of throwing everything over to the hackers as you're posting them in here too, I guess. Kind of curious, like you've had your head in this for a while.
00:20:53.354 - 00:21:06.340, Speaker A: What are you excited to see built this upcoming weekend or just in general? And what are some of the kind of cool tools that are out there? You mentioned what you're working on, but also other stuff that you'd encourage people to take a look at.
00:21:06.790 - 00:21:25.990, Speaker C: Yeah, that's a really good question. Well, a couple of thoughts on this. One is that there is, I think, sort of a natural competition among layer one blockchains and I think it's important to ground Filecoin in the right context.
00:21:25.990 - 00:22:02.260, Speaker C: Filecoin I see as a very complementary layer to other layer one blockchains in the sense that Filecoin is a really good place for storing data. And so while I think we've seen other EVM compatible blockchains come to market, especially in 2021, and there's a large appeal to just fork protocols from other EVM networks into new EVM networks, the ones that worked well. But I'd challenge the hackers who are aiming to do something like that to think.
00:22:02.260 - 00:22:36.074, Speaker C: I think there is value in that and I don't think that it would be a bad idea to do, but I think there's some interesting new primitives that are becoming available that if you get them right, it becomes a really interesting environment to build storage primitives and storage applications that simply aren't possible today. And so some things from the Ethereum world and the EVM world I think will be awfully important. Like, we do need native sources of yield.
00:22:36.074 - 00:23:06.120, Speaker C: So building a DeFi product in the FVM is important. But that DeFi product, it looks different than just, like, an Ave or a compound because the needs of Filecoin are much different. And when you take that kind of nuanced look into Filecoin and the fact that the miners that are running this network are actually producing real world work, there's some new things that can't be done on other chains that position Filecoin in just, like, a separate place.
00:23:06.120 - 00:23:22.330, Speaker C: And so I would urge you, as a hacker to start thinking in that area, like, what can I do on Filecoin that's simply not possible in other places? Because I think that's where you'll find some really interesting value and some really innovative use cases.
00:23:23.390 - 00:23:30.480, Speaker A: Amazing. Very cool. And then one question that came in from the audience, actually, as we're kind of chatting about this.
00:23:30.480 - 00:23:44.100, Speaker A: Somebody's asking if there's actually an API available for Glyph yet where they can grab the CID or grab any other info that you guys are making available on the UI in, I guess, a programmatic way.
00:23:44.950 - 00:24:09.514, Speaker C: If you're talking about transaction history, I'd actually recommend I think the Berry API is probably more stable, so I'd recommend going with Zondax's route for that. And our API would pretty much do the same thing that theirs is for an equivalent of Etherscan's verified contract API. That's not something that we have.
00:24:09.514 - 00:24:22.670, Speaker C: Like, when you store a contract in Abi in the Glyph Explorer UI, it's just stored in local storage for yeah, and if you find bugs too, definitely reach out and let me know because this stuff is all bleeding edge.
00:24:23.010 - 00:24:27.182, Speaker A: Totally makes a lot of sense. Awesome. Okay, great.
00:24:27.182 - 00:24:41.702, Speaker A: Well, thank you both for being here and being a part of this. Really excited to see all the new things that are being built on top of the Fem. And, yeah, really exciting to have, I guess, exactly the people who are working on the bleeding edge of this as part of this event.
00:24:41.702 - 00:24:44.580, Speaker A: So really excited to see what gets built.
