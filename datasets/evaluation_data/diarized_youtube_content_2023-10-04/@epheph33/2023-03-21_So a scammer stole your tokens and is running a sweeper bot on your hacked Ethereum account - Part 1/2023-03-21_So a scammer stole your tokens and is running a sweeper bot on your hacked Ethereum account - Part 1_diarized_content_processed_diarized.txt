00:00:00.250 - 00:00:56.426, Speaker A: Hello, my name is Scott Bigelow and today I'd like to talk about what happens when a scammer is running a sweeperbot against your Ethereum account using a compromised private key. In this talk, I'd like to discuss how your interactions with Ethereum have changed now that a scammer has access to your private key, what a sweeperbot is, and how to tell if your account or any other account has a sweeperbot on it using only Ether scan. Then run a live demo of a sweeper against my own account on Gorely. Then discuss the strategy you can use to rescue any assets that remain in your sweeperbot compromised account and three solutions you can use to implement this rescue strategy. Let's first explore how Ethereum works without a private key compromise in place. You have access to a private key or seed phrase which we are using interchangeably and that maps to an address on the Ethereum network. Using this private key, you can create a transaction and sign it and broadcast it to the network for inclusion.
00:00:56.426 - 00:01:41.606, Speaker A: You can do this over and over again using the exact same key, creating more transactions against this account. The same is true for accounts that have a compromised private key. You still have a copy of the private key, you can still sign transactions and you can still broadcast them to the network. The problem is that the scammer can do so as well, and when they do so, it will be the transactions they want to sign which are normally going to be taking all of the available ETH, ERC, 20, Tokens and NFTs. But just because they are sending transactions to the network doesn't mean you can't as well. You can continue to send transactions to the network in order to move assets around that have not been taken in this prior step. The problem is that when they steal assets, they are normally going to take all of the available ETH which is necessary for paying for transaction fees on the Ethereum network.
00:01:41.606 - 00:02:39.530, Speaker A: After the initial theft has occurred, they're going to transition to the next step of the scam, which is running a sweeper bot against your private key and Ethereum account. This is going to be a bit of software that is going to run all the time and its entire job is to take any ETH that lands in your account and steal it. And because you're no longer able to keep ETH in your account, you're no longer able to send transactions even though you actually have the private key to the account, because you cannot afford to pay the network fees even if you transferred them in just a minute ago. So a sweeperbot in this context is a bit of software that is running constantly using the private key of a compromised account every block. It steals absolutely everything that it can and it does so extremely quickly and it uses a very high gas price to prevent any sort of delay in getting their transaction confirmed. By running a sweeperbot, they've effectively prevented you from accessing your account and sending transactions even though you have the private key. There are many types of crypto scams that occur, and not all of them are related to private key compromise.
00:02:39.530 - 00:03:23.150, Speaker A: Just because your assets have gone missing in your account doesn't necessarily mean that you have a compromised private key. It's important to understand the method by which your assets were removed because they have different remedies. So you need to ask yourself two questions. One, is your private key compromised? And two, is there a sweeper running using this compromised private key? So to answer the first question, is your private key compromised? The best way to tell if you have a compromised private key is if you have transactions on Etherscan in the transactions tab that you did not create. I'm not talking about token transfers here. We'll talk about that in a bit. But under this transactions tab, do you have any out transactions that you yourself did not sign, either with MetaMask or with a ledger? If the answer is yes, then someone else has access to your private key.
00:03:23.150 - 00:04:04.202, Speaker A: Next, if you transfer in any ETH into your account, is that ETH taken immediately? In this screenshot, we can see that 0.9 ETH was transferred in at block 770 here, and in block 771, it was already taken and swept into this account. You can see that the transaction fee that was used was more than half of the payload that came in just 12 seconds prior. So now that we know what a private key compromise looks like on Ether scan, let's look at what a private key compromise does not look like. Here is a victim that fell prey to an approval scam. And the first thing that we can notice is that they have an ETH balance. They have 0.4,
00:04:04.202 - 00:04:31.326, Speaker A: which is plenty large enough to be swept. So because this has an ETH balance, we can tell pretty conclusively that it doesn't have an active sweeper running on it. Furthermore, we can look more into their scam and the way that they lost money. If you look at token transfers, 42 days ago, they lost 417 USDT. That's 42 days ago. But if you look back here, they didn't even run any transaction here. 59 days ago is the last Ethereum transaction that they ran.
00:04:31.326 - 00:05:01.818, Speaker A: So they ended up approving some third party to spend their tokens, and then a couple of weeks later, they did. But there's no out transaction here that they themselves didn't sign. They signed this approval thinking that they were entering some sort of a daily interest thing or something like that. And because they have done that, they have lost their funds at a future date. No out transactions were signed here that they didn't sign themselves. This is an example of a scam that occurred that was not related to private key compromise. So now that we understand what a sweeperbot is and how it works.
00:05:01.818 - 00:05:26.530, Speaker A: Let's go ahead and run one for ourself on Gorely. In this case, we're going to be using a very simple version of an ETH burner that I've used in the past. But I recommend that you make sure that you trust whatever source it is that you're getting the software from because it is very sensitive and we are going to be giving it private keys. So let's go ahead and check this out. I have here the code. It's on GitHub. And the first thing that we see is that this thing actually hasn't been updated in a really long time, about a year and a half.
00:05:26.530 - 00:05:54.746, Speaker A: And that just goes to show just how simple the software is that we're talking about. In fact, if we go and look at the bulk of the code, the bulk of the code lives in this burn file and it's just a couple of dozen lines. There really isn't a whole lot to how the system works. So let's go ahead and run one. I've already installed this before locally and it's very, very simple to do so and I am going to be running it against a private key that is obviously made up. And this is just a bunch of B's and A's. So please do not use this to store any real funds.
00:05:54.746 - 00:06:28.902, Speaker A: This is only for demo purposes. We're going to be giving this burner a private key to burn on and we're going to be giving it an RPC URL. This is the location that it is going to be querying for the balance of the ETH that is stored at this account and also where it's going to be sending the transactions that is going to cause the burn to get propagated to the rest of the network. We're using the infura endpoint for this, just for simplicity, although any RPC URL would work here if you're running your own. So let's go ahead and take this private key here. I'm copying this to my clipboard, popping over here to MetaMask. We're going to import this.
00:06:28.902 - 00:06:54.954, Speaker A: So we're going to say import this obviously fake Ethereum account, but it still works. And here we see that we have zero x eight five eight is the name. In fact, let's go ahead and rename this just to make this a little easier to demonstrate. So I'm going to say account details, name. I'm going to call this burned account. I've used this account in the past to do these demonstrations. So we're going to see this on Etherscan.
00:06:54.954 - 00:07:23.914, Speaker A: We have these accounts from eight minutes ago, but let's go ahead and hit enter here. So the first thing it's going to do is go out and say, hey, you know what, the balance is zero. So there's nothing to do, right? You can't burn something that doesn't exist. So let's go ahead and actually make that balance more than zero by transferring funds into the account. This is a very similar step that you would go through if you were trying to, let's say, fund this account in order to run other transactions from it. So I'm going to say send, I'm going to transfer it to this burned account. Let's just give it a small amount.
00:07:23.914 - 00:08:07.302, Speaker A: Let's say zero three. So we're going to send the burned account some Gorely ETH from my Gorely account one, a completely different address, and say, Confirm. Go over here and reload. We can see this transaction is currently pending from that account. It is coming in with zero zero three ETH. We see the burner bot has immediately noticed that there is something to burn here and it immediately fires a transaction that burns all of the ETH using the exact gas price that it needs to use in order to completely wipe out that account. And if we go ahead and refresh here, we see that in block 244, 0.3
00:08:07.302 - 00:09:18.766, Speaker A: ETH was transferred in, and in the very next block 245, almost the entirety of that was burned in a transaction fee. So when this burner bot is running on this account, it is impossible for someone to use the Mempool to conduct transactions from this account because the first thing that's going to happen is that the ETH is going to be burned way before anyone has a chance to use this account for anything else. We'll go ahead and kill that. I hope that you've seen from this quick demo that a sweeperbot is not a very complex or elegant piece of software. It's just something that has a singular purpose to destroy all incoming ETH and either steal it or burn it using a transaction fee, and in doing so, prevent the original owner of that account from accessing any resources from that account. What can we do to defeat a Sweeper bot and to rescue assets that are locked in a compromised private key account? To answer that, let's first consider what it's like interacting with any account that has zero ETH in it. The first thing you have to do is transfer in some small amount of ETH to pay for gas, and then you must run a transaction sometime later, after this transaction is confirmed, to actually perform the transaction you want.
00:09:18.766 - 00:09:56.874, Speaker A: However, because you have a Sweeper on your account, whenever you transfer in 0.1 ETH, it is immediately zeroed out 0.10. There's nothing you can do to avoid having zero ETH in your account in the next block. What we need to do is take the funding transaction and the transaction we want to execute and put them together in a bundle. This bundle will land on the blockchain at the exact same time with no blocks in between this transaction and this transaction. Now we can't get the sweeper off of our account. In fact, after this bundle lands, we're likely to leave a little bit of gas behind and that is going to be swept just like normal, but it's going to be swept here and not here.
00:09:56.874 - 00:10:40.566, Speaker A: And this move NFT or whatever action it is that we wanted to take place will have occurred without the sweeper interfering. In order to send a bundle, you can't just use regular MetaMask. You can't just use a standard JSON RPC like Infhera or any of the common ways of sending a transaction. You need to use a special relay. In this case, we are talking about the Flashbot Relay, which is an API that is publicly available, that allows for special inclusion rules when getting transactions onto the Ethereum blockchain. So when this is given to the Flashbots relay, it hands it to the validators of Ethereum and they know the rules that it is only included together or not at all. Now, there are several Flashbots products that are user facing.
00:10:40.566 - 00:11:21.622, Speaker A: There is the flashbots protect and the flashbots relay. The Flashbots Protect is a very useful, very easy to use service that allows you to use MetaMask with Flashbots for transaction privacy prior to inclusion. But this product is actually not suitable for what we're going for here because it does not have the ability to submit two transactions at the same time. With special inclusion rules, we need to be using the Flashbots relay. So how is it that we use the Flashbots relay? There's basically three ways to do it. Using the Flashbots relay directly takes a bit of technical know how, both in the ability to code and also in how Ethereum transactions are formatted under the hood. I have a video which I'll link in the video description if you're interested in trying yourself.
00:11:21.622 - 00:12:01.326, Speaker A: But I really don't recommend this unless you have a pretty good handle on a programming language and how Ethereum works, a lot of things can really go wrong. It can be pretty complicated, but if it's something you want to try, I have some resources for how to try it yourself. The other way that you can use the Flashbots relay is to work with someone that specializes in using the Flashbots relay for asset recovery. You need to be extremely careful about who you talk to about this. There are significant numbers of scammers out there. This often includes taking a fee and there's also minimum rescue amounts. So if it doesn't reach some sort of a threshold, a lot of times the White Hat teams will not take on the case and there won't be any real recourse for how to rescue these assets.
00:12:01.326 - 00:12:42.410, Speaker A: Here's a couple of trustworthy organizations that specialize in different types of asset recovery. Flashbots is one of them and I'm a part of Flashbots as well. So if this is the way you want to go, you can click on this link here, fill out the form and come talk to Flashbots on Discord. But be extremely careful in who you talk to. The last option I wanted to present is the Interceptor by Dork Florist. This is a project that I am working on with fellow White Hats, and this is a browser extension that aims to improve the security of interacting in Ethereum. It sits next to MetaMask, it does not replace it, and it enables simulation of multiple transactions prior to confirming them on Ethereum.
00:12:42.410 - 00:13:42.042, Speaker A: And we were able to take this ability to create what we were calling a simulation stack and convert it into a Flashbots bundle. So effectively you can use the GUI and use DApps that you interact with on a day to day basis to create a simulation stack, which is a set of transactions that you want to be included on Ethereum even though you're not broadcasting them yet. And instead of submitting them one by one we have created a service that allows you to take this simulation stack that you created using the DApps that you are accustomed to and to convert those into a flashbots bundle. To do a bunch of things at the same time without having to program, without having to give your private key to a white Hat or find a way to kind of navigate the White Hat ecosystem. There are no fees on the system and it's something that I invite you to try. I'll be creating a step by step of how to go through this, but I invite you to check out the Dark Florist Interceptor. It can provide a lot of features aside from recovery as well, including transaction simulation and malicious transaction detection.
00:13:42.042 - 00:13:57.300, Speaker A: And the service that allows you to bundle your transactions and turn them into a Flashbots bundle is called Bouquet and it's available here. And yeah, if you're interested in doing that, I'll have a link to the video right here and I will see you in the next video.
