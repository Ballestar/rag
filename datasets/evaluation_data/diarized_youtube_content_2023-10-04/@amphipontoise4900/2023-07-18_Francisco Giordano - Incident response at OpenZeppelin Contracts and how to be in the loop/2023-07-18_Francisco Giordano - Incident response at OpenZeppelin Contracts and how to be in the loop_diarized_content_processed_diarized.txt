00:00:00.170 - 00:00:19.700, Speaker A: Hello. Hi.
00:00:26.990 - 00:00:38.694, Speaker B: Hello, everyone. My name is Francisco or Frangio. I'm an engineer at OpenZeppelin, where my team and I maintain a number of open source libraries and tools.
00:00:38.694 - 00:01:07.026, Speaker B: Among them, OpenZeppelin Contracts, the most widely used library of smart contracts on ethereum and EBM chains today. And today I'm going to share with you some of our experience and learnings doing Incident Response for this project. So the library was launched in 2016 and our goal has always been to contribute to the security of the ecosystem by providing reusable smart contract components.
00:01:07.026 - 00:01:32.650, Speaker B: And we believe this can help by multiplying the efforts of the community in developing these features, testing them, reviewing them, auditing them, and potentially also in doing incident response for them. Since then, our ambitions have increased. The scope of what we want to cover has grown, and with that we want to cover governance DeFi, and with that comes increased complexity and risk.
00:01:32.650 - 00:01:59.398, Speaker B: So it really requires us to take a very disciplined approach to security, I like to think in framework. So I put it down into these four foundations that I think the project really has to maintain, which are engineering and open source best practices, secure design principles, multilayered reviews, as well as Incident Response. Sorry, incident Preparedness, which is the focus of today.
00:01:59.398 - 00:02:15.914, Speaker B: What does incident preparedness mean? It means that we're human processes can fail. Humans can fail. And so a bug may get through all of these other layers that we've put and we need to be ready to respond to that when that happens.
00:02:15.914 - 00:02:33.140, Speaker B: So we need to know what procedures we're going to follow, what people we're going to loop in, what tools we're going to be using and need. And in the past couple of years, we've had a few incidents at Open Zeppelin Contracts and we had some learnings from this and developed some tools. So let's talk about that.
00:02:33.140 - 00:02:50.146, Speaker B: An incident for us is a bug in the code. We will usually receive this as a report on Immunify, which is where we host our bug bounty. And there will be some initial screening initially because many of these reports are invalid.
00:02:50.146 - 00:03:00.922, Speaker B: 80% of them that we've received so far have been invalid. So we need to filter those out. But when we're in the other 20%, it's usually pretty clear that we're looking at something that is real.
00:03:00.922 - 00:03:19.534, Speaker B: And so we need to put in place here the response protocol that we've developed. The first thing that we have to do is understand the potential severity of what we're looking at. Here comes one of the first things that is peculiar about Open Zeppelin Contracts, which is that we put the code out and users download it and use it.
00:03:19.534 - 00:03:39.350, Speaker B: And they do that on their own, on environments that we don't know about, without our supervision, without our control. So we don't really know the way that these users are using the code. And what are some maybe tangential things about their environment that may make the particular bug worse.
00:03:39.350 - 00:03:59.574, Speaker B: So we have to get really creative and think about what is the worst possible scenario of this bug that we have identified. So what is the worst possible impact? We like to use this framework, which I think is pretty common, which is to separately evaluate the impact of an issue. That is, what are the consequences it might have.
00:03:59.574 - 00:04:38.842, Speaker B: Maybe is it stolen funds, frozen funds, denial of service, stuff like that. And separately to assess the likelihood, which is how easy or difficult is it to exploit that? Is there a profit motive why some attacker might do that? Does it require some prior access? And so we grade each of these dimensions from low to high severity and from that we get a combined severity which may be from critical to informational. So one example of this is in August 2021 we received a report about an issue in the timelock controller contract that we have.
00:04:38.842 - 00:05:01.850, Speaker B: It was a reentrancy issue that could lead an attacker to take over the contract. At this stage, we will very likely identify different sets of conditions that might lead to different tiers of severity. In this particular case, depending on the way that the timelorde controller was set up, it could land on the critical severity because anyone would be able to take over the contract.
00:05:01.850 - 00:05:29.798, Speaker B: Or it could land on the high severity, which was because of lower likelihood, which required someone with prior access that presumably was trusted to exploit it. And those are the kind of kinds of things that contribute to different grades of severity. So once we understand this, it's still hypothetical, right? We've done a thought experiment and try to come up with the worst possible thing that we can think of.
00:05:29.798 - 00:06:02.158, Speaker B: But then once we have that, we can't just do, okay, we'll do the fix, we'll publish a report with the right severity and be done with it because the code might be deployed on chain and so doing that wouldn't be responsible from us. So we have to really assess what is the real practical impact of this bug that we found. This is where the second thing that I think is peculiar about open sepln contract shows up, which is that we don't deploy the code right, our users do and they do that on however many chains they know and we never hear about those deployments.
00:06:02.158 - 00:06:36.346, Speaker B: So when we have an issue like in this case in the timelock controller, how do we know where are the instances that might potentially be affected? So we found two ways to identify these instances. The first one is by looking at events. In this particular case, in the constructor of the timelock controller, there was an event that uniquely identified the contract that we could look for by looking querying an RPC endpoint or some other kind of API and that way get a list of all of the instances of the code that we could find on chain.
00:06:36.346 - 00:06:57.378, Speaker B: Now, once we did this, we found a list of in this case it was about 300 instances, which doesn't sound like a huge number. We've actually seen larger numbers in other cases. But we have to think what will we have to do with the contracts in this list? And some of those things that we have to do, like get more information, maybe get contact information, are manual steps.
00:06:57.378 - 00:07:21.214, Speaker B: And 300 is quite a large number to go through one by one manually. So we have to also find ways to either filter or prioritize this list. In this particular case, like I said, there were different severity tiers and in fact, by looking at the events we were also able to identify for each instance in which severity tier it fell and to get that information.
00:07:21.214 - 00:07:42.126, Speaker B: So we wrote some tools, wrote some scripts, which we later sort of saved for future response, future incidents, to look for those events to generate a JSON or a CSV file, to dump it on a spreadsheet, which is what you can see right here, and then go through manually, one by one, to continue with the incident response.
00:07:42.158 - 00:07:42.740, Speaker A: Right.
00:07:43.110 - 00:07:53.910, Speaker B: But when we did this, the critical ones were very few, thankfully. And we were still left with a bunch of other contracts that we didn't really know how to go through. Right.
00:07:53.910 - 00:08:10.298, Speaker B: We wanted to prioritize them further. So one idea that we could have is, well, if we knew how much value is at each of these instances, we would know how much risk each of those instances has and we would be able to prioritize them and sort of go in order. It would be a lot more efficient for us.
00:08:10.298 - 00:08:21.806, Speaker B: But actually it turns out this is actually a really difficult thing to answer. You look at an address how much value is under the control of that address. You can't just look at the ETH that is held at that account.
00:08:21.806 - 00:08:42.006, Speaker B: You also have to look at, ERC, 20 tokens. Once you do that, you need to price them somehow to sort of put them in a common unit of account. And then you also have to ask do you look at NFTs? And what if the contract is the owner of another contract, that is, the contract that holds the assets and however many levels of indirection that you might want.
00:08:42.006 - 00:09:00.986, Speaker B: So this is a tricky part we haven't yet cracked and it would be great to get an automated way to do that. In some cases the event may not be enough. Like in this case, we were lucky, there was this uniquely identified event.
00:09:00.986 - 00:09:26.098, Speaker B: But in other cases it may be a more standard contract that is an ERC, there may be multiple implementations and it doesn't help us in that way. Or it may be that the bug was introduced in a later version and we would like to filter what contracts were deployed using that particular version or the versions have been affected and the event doesn't help us there. So the other thing that we have found that is useful is to look at verified source code.
00:09:26.098 - 00:09:48.730, Speaker B: Verifying source code is a very important part of our culture in this industry. So we can sort of rely on that for most projects. And if you're not verifying your source code, you need to understand that this is one of the consequences of that, right? You are not giving the information for security researchers or people like us who may need that to act on an incident.
00:09:48.730 - 00:10:10.926, Speaker B: Here I want to highlight one thing which is that this industry has benefited a lot from the open nature of blockchains. There are things like Dune that are amazing to do a bunch of analysis on the data, but source code is a little bit lagging behind because we rely mostly on centralized providers. So even though the data is there and you can get it, it's a lot harder.
00:10:10.926 - 00:10:32.060, Speaker B: You have to jump through some hoops and we've been able to do that, but it could be a lot better. So here what we have done is we scan all verified contracts and we are able to match them against our code that we know from the library. And in that way we're able to identify what features of the library they're using and what version of the library they're using.
00:10:32.060 - 00:10:52.074, Speaker B: And this gives us the information that we need to filter and sort of act on these incidents. So once we have this information, we will have this big spreadsheet that I showed you and now we need to act on it. We need potentially, like in this case in the timelock controller, to execute a mitigation on chain.
00:10:52.074 - 00:11:20.714, Speaker B: So what we did in this case was we put together a mitigation kit with very clear instructions that we sent out. We sent them out to the critical affected contracts first, then to the high severity affected contracts in the sort of staggered weight to sort of control more tightly how this information was disseminated. Because of the sensitive nature of it, it was quite hard actually to find this contact information.
00:11:20.714 - 00:11:56.390, Speaker B: For some projects we had to go an ether scan, sort of see who had deployed it, identify the project, maybe through some other connections on chain. And for some we found the project that they corresponded to, but there was no contact information, right? So if you are developing a project, it's really important to have very clearly available contact information for this sort of security communications. So once we have done this, we are clear the mitigations have been executed and now we can go ahead and publish the code, sorry, publish the fix and also publish an advisory.
00:11:56.390 - 00:12:41.060, Speaker B: The advisory part is really important and it's also the reason why we recommend installing using NPM and that is because there are tools like Dependabot or SNCC or stuff like that, that will scan these known databases of Security Advisories and let you know when you have a dependency that has an issue, a known issue in it. So we publish a security advisory for the NPM package and if you are using the dependency, you get notified very likely by one of these bots and you can act on it. One of the challenges here is that because Open Seblin Contract is a library that has a lot of features, maybe you're just using one of them, you're still going to get alerts for the contract that you're not using.
00:12:41.060 - 00:13:05.370, Speaker B: That's kind of one of the downsides. So we try to make it very clear in the title and in the description how to know which is the contract that's affected and also in the description how you can know if you're using that contract, whether you are affected. So making all of this communication very clear is key to us to deal with this issue.
00:13:05.370 - 00:13:13.280, Speaker B: It's like a lack of granularity of alerts. We're developing a tool currently that we call Dependency Checker. Not very creatively for now.
00:13:13.280 - 00:13:47.534, Speaker B: And the tool, what it does is it's able to scan your project, maybe your repository, or maybe even a contract that has been verified and is on a block Explorer and use this information that I mentioned before, right? What are the features that are in this contract, what version of the contract is using, and if there are any known security advisories for it in a very granular way that is able to distinguish the features that are actually in use. This is a thing that you are going to be able to install. Maybe we might do it proactively.
00:13:47.534 - 00:14:20.482, Speaker B: I haven't decided just yet, but I think it will be pretty interesting and valuable. So, finally, regarding the other security foundations that I mentioned, we've recently released a Security Center page where we share a bunch of relevant information about the security processes that we follow the audits we've done the test coverage that we have, the formal verification coverage, and some other relevant statistics. For example, we can't see it on the screen here.
00:14:20.482 - 00:14:37.720, Speaker B: But using this scanning technology that I told you about, we are able to get an idea of how many instances of the code that we have built and shipped are deployed on chain. And we can see that there are like hundreds of thousands of them. It's actually quite interesting and we can get really good statistics of that.
00:14:37.720 - 00:14:55.600, Speaker B: That data set, by the way, we're still working on the accuracy of it, but I would love to make that public at some point so that it could be hosted on Dion, for example, and you could use it against other data from the chain. I think that could be really interesting. So if that interests you, please let me know.
00:14:55.600 - 00:15:13.902, Speaker B: Finally, we've recently started doing some incident response training for clients. We teach how to react, mitigate, respond to security incidents, model threats, identify weaknesses, develop a plan, and also perform simulations. We've done this already with Compound and Sandbox.
00:15:13.902 - 00:15:25.654, Speaker B: It's not something I'm personally involved in, but the team in Open Zeppelin is doing this and I think it could be really interesting. Also, if this is interesting to you, you should reach out to us. And that's it.
00:15:25.654 - 00:15:30.140, Speaker B: Thank you. Hope that was interesting. There may be some time for questions.
00:15:44.690 - 00:15:51.390, Speaker C: Hi. Yeah, thanks for this great talk. I was just curious about the custom tag you had in one slide.
00:15:51.390 - 00:15:58.142, Speaker C: You had a custom security advisory security contract.
00:15:58.206 - 00:16:12.908, Speaker A: Yeah. Hi.
00:16:12.994 - 00:16:17.240, Speaker B: Okay. Yeah. So you asked about the custom security tag.
00:16:17.240 - 00:16:21.644, Speaker B: What is your question? Specifically? How do you use that?
00:16:21.682 - 00:16:22.076, Speaker A: Right.
00:16:22.178 - 00:16:29.936, Speaker B: So you develop your code. You would put this at the top of your contract. So in the Nat spec, right.
00:16:29.936 - 00:16:36.164, Speaker B: This is a Nat spec tag. So it could go next to the documentation. Once you deploy it and you verify it, it's going to be there.
00:16:36.164 - 00:16:53.688, Speaker B: And we're able to pick it up in the same scanning process that we do through all the verified contracts and have very easily available contact information. And sorry, it's not clear here, but you would put next to it the email, right? Or some other way to contact you. That's the important part.
00:16:53.854 - 00:16:55.850, Speaker A: Okay, thanks.
00:17:00.450 - 00:17:03.120, Speaker B: Okay, thank you very much.
00:17:08.690 - 00:17:10.620, Speaker A: Thank you. Thank.
