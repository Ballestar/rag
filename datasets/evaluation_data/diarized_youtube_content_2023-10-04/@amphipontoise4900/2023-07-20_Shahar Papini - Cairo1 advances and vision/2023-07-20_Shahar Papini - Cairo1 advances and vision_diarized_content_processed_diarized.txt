00:00:05.930 - 00:00:09.200, Speaker A: Okay. So I can start? Yeah. Okay.
00:00:09.200 - 00:00:37.074, Speaker A: Hi there. So I'm Shahar, I'm from Starquare and I'm working on the compiler team of Cairo One and I'm here to talk to you about advances and new stuff on Cairo. But I only have 15 minutes, so I decided to focus on the developer experience and how smooth it is to use Cairo today with all the latest features.
00:00:37.074 - 00:00:58.350, Speaker A: And I'm going to do a live coding session doing some kind of toy problem and showing you from scratch how smooth and easy it can be to write in Cairo. So the first thing we need to do to write Cairo is install Scarb. Scarb is the project manager for Cairo.
00:00:58.350 - 00:01:16.398, Speaker A: It's like cargo is for rust or NPM is for node. Then Scarb is for Cairo. There is this documentation which I'll share later about how to install it's.
00:01:16.398 - 00:01:27.078, Speaker A: One liner. So assume we have Scarb installed. So how do we start a new project in Cairo? We do Scarb init and voila, we have a new project.
00:01:27.078 - 00:01:41.930, Speaker A: What did we get here? We get a Scarb Tomo which is a configuration with dependencies and everything and a simple Cairo file. We get some dummy code which is fibonacci. We don't want fibonacci.
00:01:41.930 - 00:01:50.094, Speaker A: By the way, I'm planning to do a tic TAC toe game. So let's see how it will go. First things first.
00:01:50.094 - 00:02:17.240, Speaker A: Do know that Cairo is a general language for making ZK proof for your programs, not just for StarkNet. So to use StarkNet, we need to follow what Scarb says about activating StarkNet which is adding this line and this dependencies. This is about the only thing we need online.
00:02:17.240 - 00:02:40.526, Speaker A: This part is all the package dependencies which we know from other project managers. All right, so the first thing we want is to make a new contract. We can use the contract snippet we have built in in the extension and tried it.
00:02:40.526 - 00:02:53.390, Speaker A: We give it the name, let's say tic TAC toe. I think this is how it's spelled. And as you see, we need to annotate a model with this contract.
00:02:53.390 - 00:03:07.062, Speaker A: This belongs to the Stocknet plugin which adds all the things you need to make it a contract. And we get this storage which is all the storage we have for our contract. Okay, next thing I want to make a game.
00:03:07.062 - 00:03:31.994, Speaker A: So I prepared a nice package that can use called Cairo Lead. You can add packages not just from local path, you can add it from GitHub repositories and eventually we have from Registry like everything else. And there are a lot of public packages already existing.
00:03:31.994 - 00:03:48.170, Speaker A: But I have my dummy one, he's in this local path. Okay, now that I got my package, let's see what we have inside it. Let's try to use it.
00:03:48.170 - 00:03:59.996, Speaker A: Let's do some completions. And we can see we have Kyle Lit here and we'll complete some more. And we can see we have this Igame interface inside.
00:03:59.996 - 00:04:21.170, Speaker A: This is what we are interested in so we can import it and let's see what has inside. I do go to definition, I see what it has here and the I game is an interface for simple game. You need to say what turn is and you can apply move.
00:04:21.170 - 00:04:37.848, Speaker A: And I would want to make this is battery. Okay, everything is good. Yeah, we want to implement this for our contract, so let's see how we can do that.
00:04:37.848 - 00:05:15.276, Speaker A: We make an implementation and now we have its name, it's called Game implementation of the completions I game and what do we need to give it? If we do control click and put the mouse over, we can see we need to give it T state and T move. The state is the contract state, which we get by being a contract. It's already generated by the contract thing and we need to also provide it with a move to make pretty soon and this is how we make an implementation.
00:05:15.276 - 00:05:37.130, Speaker A: Now we get some diagnostics from the language server. Let's see, first of all, it says not all traits items are implemented because I do need to implement the churn and apply move and it says it doesn't know what move is. So let's start defining the move, let's call it a position.
00:05:37.130 - 00:06:09.270, Speaker A: I got some copilot completion there and I can have an alias type and complete and I'm defining this move. All right, this error is done and now I need to implement the rest of the things. As you can see, the things I wanted you to see is like I have completions, I have diagnostics, I have highlighting, I have cool stuff.
00:06:09.270 - 00:06:34.350, Speaker A: Okay? So let's quickly implement all this thing. T state becomes this now I have this side type which is required here, it exists inside my package, so I'll import it as well. Let's see what I have here.
00:06:34.350 - 00:06:49.930, Speaker A: I have this side. Okay, let's see what else I have here. Okay, not yet, let's move it here.
00:06:49.930 - 00:07:09.570, Speaker A: All right, move is move and result. I need to give it the correct result. I can do this by using as a new feature as game result.
00:07:09.570 - 00:08:01.808, Speaker A: So imported this result and I'll call it game result can change names of things and here I'll make some implementation. Okay, you can see Cairo is typesafe, so I'm getting this diagnostic they say we expected you to return result and we got nothing, we got units, so let's quickly return some result, get this completion error and I need to have the error game error here, so I'm implementing game error, I importing game error and get completions. I have these kinds of things.
00:08:01.808 - 00:08:20.868, Speaker A: Okay, let's say for now it's a bad move and put it in both okay? And I get another error. What is this error? It says value not dropped. If you're familiar with linear types, then Cairo has linear types inside.
00:08:20.868 - 00:08:42.396, Speaker A: What does it mean? It means that values can just be disposed of, can be created unless you specifically say they can be. And the way we say it in Cairo is using a derive. This line adds an implementation for drop, which means we can drop this value.
00:08:42.396 - 00:08:56.556, Speaker A: Linear types have a lot of useful applications, especially with enforcing invariance in a blockchain. I don't have time to show examples for this right now, but know it is possible. Okay, so this should compile.
00:08:56.556 - 00:09:04.728, Speaker A: I'm running Scarb test. Everything passes all the zero tests passes. But it compiles.
00:09:04.728 - 00:09:15.270, Speaker A: How can I make a test? We can make an inline test. Inside this module we have this snippet that makes a test. All right, let's call it test game.
00:09:15.270 - 00:09:31.708, Speaker A: Let's create a contract state for testing. This is done by complete let's see we have contract state for testing. This is auto generated by the contract as well.
00:09:31.708 - 00:09:39.712, Speaker A: All right, we also need to be mutable. This is how they define mutable in Cairo. And we can start calling stuff.
00:09:39.712 - 00:10:01.750, Speaker A: Let's call turn and let's do unwrap, which makes sure the result we got is okay and not error. As you can see, this completion added the trait we needed to call the method. Let's save and let's see what happens when we test.
00:10:01.750 - 00:10:22.640, Speaker A: Yeah, we got an error. Why did it get an error? It says on the unwrap unwrap failed because we turned an error, not an okay, so let's just do some very simple things. Let's return okay, and we need to return side let's return side X.
00:10:22.640 - 00:10:59.206, Speaker A: Now our test passes. Okay, let's make some more interesting logic than just returning constant value. How do we make a storage variable in cargo? So inside the storage struct I can add something like churn and this case I would want it to be let's say game result of side why did it do game result? Because I wanted to also represent the case that the game ended.
00:10:59.206 - 00:11:18.762, Speaker A: So either it's okay and we are in progress and it's someone's turn or the game ended and someone already won. So I'll do something like this. And here on turn, instead of returning this value, I read from my storage variable.
00:11:18.762 - 00:11:36.550, Speaker A: As you can see, I just did self dot and it completes me that I have the turn variable. And it also completes that it has a read method. If I want to see the signature, I do control click and put my mouse on this method and I can see it's a signature.
00:11:36.550 - 00:11:51.900, Speaker A: In this case it doesn't get anything except self. So I'll just save it and this seems to work. Let's run test and everything runs it's okay, good.
00:11:51.900 - 00:12:11.250, Speaker A: Let's do something really simple. Let's in apply move check that move is inbound, can do move X. If move x is greater than 20, one and two are okay.
00:12:11.250 - 00:12:21.620, Speaker A: So three is bad. And let's do some copilot completions. I'm getting an error, otherwise I'm returning an okay.
00:12:21.620 - 00:12:33.960, Speaker A: And we need to add semicolon here and let's make sure this is what happens. Indeed. So let's do some apply move.
00:12:33.960 - 00:12:55.290, Speaker A: I'm giving a position of, let's say, x ten y. So make it invalid and unwrap. And let's see our test indeed fails.
00:12:55.290 - 00:13:09.320, Speaker A: If we give it something valid. Yeah, it passes. Okay, so very nice.
00:13:09.320 - 00:13:21.034, Speaker A: As you can see, it's a quick feedback on your programming. If we were to complete stick Tactile, we'd probably need something like a mapping. Let's add a mapping.
00:13:21.034 - 00:13:39.090, Speaker A: We have a Snippet for that too. Let's make a board from position and make it to like option site to make sure something is filled. All right.
00:13:39.090 - 00:13:51.014, Speaker A: I don't have time to complete everything. I just wanted to show you that the basic flow of programming contract in Cairo that we have. Very nice.
00:13:51.014 - 00:14:01.002, Speaker A: Highlighting completions, quick testing, easy to like. It's one line install. Instead of saying up a project, you can publish it.
00:14:01.002 - 00:14:10.858, Speaker A: And we have definitions and control click and see stuff. Also we can look at the auto generated code, for example. This function was auto generated.
00:14:10.858 - 00:14:32.440, Speaker A: We can control, click and see the entire generated code for our contract. And we can see standard library things like in here, for example. Okay, so that was a very quick guide on how to start writing Cairo on your own.
00:14:32.440 - 00:14:47.862, Speaker A: Thank you. Do you have any questions? Yes. Blah, blah, blah.
00:14:47.862 - 00:14:49.866, Speaker A: Okay, thank you.
00:14:49.968 - 00:15:06.000, Speaker B: Nice presentation. Question is, do you think that for developer experience it's good to change Cairo syntax already few months? Because you change two times until now and probably to end of this year will be two more times.
00:15:07.250 - 00:15:26.998, Speaker A: Well, we did change the Contract syntax, but the reason for that was because the first version was compatible to car zero, the old version. And now we have the more mature version of contract syntax we want to have. So this is not planned to change and we are supporting it.
00:15:26.998 - 00:15:48.780, Speaker A: We commit to support it six months in advance that it will be compatible. So we will also introduce other ways, other additions like components, but the basic syntax won't be broken. Any other question? Any other question? No.
00:15:48.780 - 00:16:06.830, Speaker A: Okay, thank you. It.
