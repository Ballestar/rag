00:00:11.310 - 00:00:21.198, Speaker A: Okay, can you guys hear me? Cool. Let's get started. So today I will be speaking about scaling self custody.
00:00:21.198 - 00:00:36.278, Speaker A: For some reason, while converting from doc to PDF, my title got mixed up. But the second part of the title is why accounts action on l Two is critical for mass adoption. So I'll be talking about account abstraction, layer two, and basically the end goal is to scale self custody.
00:00:36.278 - 00:00:54.810, Speaker A: I'm Julian Isa, I'm one of the co founder of Argent and I will illustrate what I'll present through Argent X, which is a new product that we have released on StarkNet. So let me start with the obvious. Hopefully we all agree that self custody matters.
00:00:54.810 - 00:01:09.426, Speaker A: I mean, one of the benefits of blockchain is actually to enable true ownership. And of course, if you don't really own an asset, if you give custody over that asset to another party, you don't really own it. So self custody really matters.
00:01:09.426 - 00:01:30.870, Speaker A: And that's something, even if it's pretty obvious, that's something I believe we tend to forget in our ecosystem. And of course, the recent event have reminded us why self custody is important because of the market being done. I mean, I'm sure you've all followed that, but some centralized exchange became insolvent and that means that users could not withdraw their funds.
00:01:30.870 - 00:01:44.480, Speaker A: So again, some users that give custody of their funds to a centralized party suddenly cannot access their funds anymore. So obviously they don't have ownership. So I think that's a good reminder that self custody is important.
00:01:44.480 - 00:02:09.350, Speaker A: But of course, the question is, why do people rely on custodian solution? I'm sure if I ask the audience, most of us will have a non custodial wallet, but we also all have a coinbase, a Binance or FTX account. So even though we all believe in self custody, we all make the trade off of using custodial solution. And the reason for that is because self custody is hard.
00:02:09.350 - 00:02:27.054, Speaker A: Even though we've been working on this ecosystem for many years, self custody is really, really hard. And I mean, just looking at crypto Twitter every day will remind us that of that fact. There's every day people losing access to their fund, having their wallet being compromised and so on.
00:02:27.054 - 00:02:36.110, Speaker A: Even crypto experts. I mean, the example on top right is Yukes from Nexus Mutual. He's a well known founder of a DeFi project and he got hacked.
00:02:36.110 - 00:03:06.490, Speaker A: All this illustrate that self custody matters, but self custody is really hard. So the question is why? Why is self custody so hard? And why haven't we been managed to actually fix self custody and scale self custody? Because if you want to bring blockchain to billion users, it's not only sufficient to scale the base layer, the protocol to enable cheap transaction, we also need to scale the user experience. And that's why I like to talk about scaling self custody.
00:03:06.490 - 00:03:25.150, Speaker A: And personally at Me and at Argent, we believe the reason why self custody is still so hard lies in how account works in Ethereum. I like to call them the original sin. Just an analogy.
00:03:25.150 - 00:03:39.394, Speaker A: So you probably all know that. But I think it's good to remind how Ethereum account works and try to have a new perspective on that and trying to see how we can actually fix this problem. So, as you probably all know, there's two types of accounts on Ethereum.
00:03:39.394 - 00:03:56.566, Speaker A: You have externally owned account that typically users own and then you have contract account which can contain bytecode. An EOA has an address and a balance. And a user owns an EOA through a pair of cryptographic keys that we also call a signer.
00:03:56.566 - 00:04:16.842, Speaker A: And what's the link between the signer and the account? Well, the link is through the address of the account which is derived from the public key of the signer. And only the private key of the signer can actually trigger transaction and is authorized to make transaction on the account. And on Ethereum, this logic is very well defined to authorize the transaction.
00:04:16.842 - 00:04:29.430, Speaker A: The signature scheme is well defined, is hard coded, it's ECDSA. And even the elliptic curve that you need to use is also hard coded in DVM this SEC p. So all these details are not that important.
00:04:29.430 - 00:04:42.834, Speaker A: But what matters is that everything about accounts on Ethereum is hard coded. There's nothing that can be changed. And so, taking a step back, we can actually visualize account in the signer.
00:04:42.834 - 00:05:13.806, Speaker A: It lies in the user, which is the user part of the account. And then on the other side we have the EOA account defined on Ethereum in the EVM which contains the address denounced the balance and all the logic to validate and execute transaction. And as I mentioned, these two objects, they are actually two sides of the same coin, right? We can say that the signer which is the object that should only be there to authorize, to move your token is actually tightly coupled to the account, the object that holds your token.
00:05:13.806 - 00:05:35.420, Speaker A: But it's not a necessary condition, right? The signer should just be there to authorize transaction. While on Ethereum there are really two sides of the same coin. And what I mean by that is because the signer is kind of the account and the account is kind of the signer, that means that if you lose your signer, you lose everything.
00:05:35.420 - 00:05:55.822, Speaker A: If I have your signer, I have everything. And so the real problem with account, it's because of that coupling between the two because the signer is basically the account. And so we can say that on Ethereum we are building a system whose entire security relies on user protecting a single secret at all cost.
00:05:55.822 - 00:06:04.878, Speaker A: A secret that cannot be lost and cannot be compromised. And there's no safety net if you make one mistake. And of course we all know that humans never make mistake.
00:06:04.878 - 00:06:36.554, Speaker A: Everything is gone. And so of course we believe at Argent and I think people are starting to realize that we will never scale, blockchain and reach mainstream adoption based on this paradigm. So something has to change, right? And so the question is, can we do better? Is there a way to actually build accounts in a different way that would enable us to build these safety nets and to build that experience that is needed for users? And of course, for those who know Argent, we believe there is a solution.
00:06:36.554 - 00:06:54.670, Speaker A: That's why we've been focusing for the past almost four years now on building smart contract wallets. Smart contract wallets actually enables you to put logic at the account or at the wallet level, the account level. But the problem is that on Ethereum, smart contract wallet are second class citizen.
00:06:54.670 - 00:07:09.046, Speaker A: The ecosystem is still built for EOS. So even though there's a lot of stuff we can do, there's also limitation to being a smart contract wallet on Ethereum. And so what we believe is that actually layer twos are an amazing opportunity to fix this problem.
00:07:09.046 - 00:07:23.318, Speaker A: I think we've learned a lot with Ethereum the past six years. And so going to layer twos is actually the right moment to fix the few things that should be improved. And so, of course, we believe that there is a solution to that.
00:07:23.318 - 00:07:34.478, Speaker A: It's called account abstraction. Interestingly, account abstraction has been on the roadmap of Ethereum from the beginning. If you look at Vitalik, is basically publishing an EIP for account abstraction every year.
00:07:34.478 - 00:07:57.346, Speaker A: The problem is that there's so much at stake on Ethereum that it's actually such a big change that it becomes difficult to push. But so the idea of account abstraction is exactly that is to decouple the signer from the account. In practice, what that means is that the account, every account on chain is now a smart contract which can have its own logic to validate and execute transaction.
00:07:57.346 - 00:08:11.062, Speaker A: Okay? So that means that if you want, you can use a different signature scheme. Maybe you don't want to use ECDSA, or maybe you want to use a different elliptic curve. Or maybe you want to have multiple signer by default and have a native multi sigant in your chain.
00:08:11.062 - 00:08:35.518, Speaker A: Or maybe you want to have an account where your signer can be replaced or rotated based on some logic. All these become possible because with account abstraction, every account is a smart contract. And what I think is very exciting is that there's actually two leading layer two solution starquare with StarkNet and Mata Labs with ZK Sync that have decided to launch with native account abstraction.
00:08:35.518 - 00:08:58.582, Speaker A: So we actually have very soon in production two systems that are both ZK rollup so that can scale and that enable native account abstraction, which means that we can also scale the user experience. And of course, that's why at Argent we've been very excited about these two projects and that's why we've started building on them. So, of course, if every account is a smart contract.
00:08:58.582 - 00:09:11.162, Speaker A: That's fantastic. But it cannot be any smart contract. Of course, there needs to be some certain interface that the operating system, the EVM, the Kros, whatever, understand to interact with accounts.
00:09:11.162 - 00:09:22.910, Speaker A: And so we've been working with OpenZeppelin and Starquare on defining that interface in StarkNet. So I will illustrate the rest of this talk with StarkNet. But of course, a lot of it applied to ZkSync.
00:09:22.910 - 00:09:41.750, Speaker A: And so we came up with the following interface that every account needs to satisfy. So having a quick look again, PDF are not a great idea. But anyway, there's two important method on the interface of your account is a method to validate and a method to execute transaction.
00:09:41.750 - 00:10:07.358, Speaker A: The goal of the validate method is actually it's a way for the operating system dos or the sequencer to quickly validate that a transaction will be valid and that it will be paid on ethereum. This is typically done by DVM, by just checking the signature, checking the nons and making sure that you have enough ease to pay the minor fee. And that's why you typically pay 21,000 gas for that validation execution.
00:10:07.358 - 00:10:23.282, Speaker A: And so with account abstraction, you can actually program the rules of that validation. And once the transaction is validated, there's a second method to execute. So typically when you submit a transaction, the Kos in this case will call validate and then we'll call execute.
00:10:23.282 - 00:10:31.830, Speaker A: So these are the two central method of an account. There's a third one which I believe is very important. It's a way to verify offchain signatures.
00:10:31.830 - 00:10:52.686, Speaker A: If your account defines the logic of what a valid transaction is or what a valid signature is. Of course, if you sign an off chain message, like an EIP 712 for example, you cannot verify the validity of that signature locally using, say, EC recover. If you build a DAP, the only person or the only object that knows if the signature is valid is the account itself.
00:10:52.686 - 00:10:59.666, Speaker A: And so you need a way to contact the account. And that's why we build a method called doing is valid signature. For those who know it.
00:10:59.666 - 00:11:18.514, Speaker A: It's exactly? EIP 1271 in ethereum. So this has been designed for smart contract wallet, but on StarkNet it will be really at the interface of every single account. And the last thing that I find pretty exciting is, because we're starting from a blank page, we actually convinced StarkNet to put multi calls by default.
00:11:18.514 - 00:11:32.314, Speaker A: So that means that on StarkNet, every transaction can be a multiple. And I believe that's very, very exciting and I'll come back to that later. So if you're a dev, there's a few things that you need to remember about all the stuff that I've been talking so far.
00:11:32.314 - 00:11:44.030, Speaker A: The first one is that on a chain with account abstraction, account are smart contracts, which means they need to be deployed. That's something that wallet will take care of. But of course, if you build a DAP in a flow, you need to take that into account.
00:11:44.030 - 00:12:02.066, Speaker A: The address of the account will no longer be derived by whatever signer is authorized on the account, but because it's a smart contract, the address will be computed as the address of a smart contract. Transaction can have multiple signatures, so you shouldn't assume just one signer for your account. Maybe it's a native multisig.
00:12:02.066 - 00:12:18.300, Speaker A: And of course if you want to validate offchain signature, you should use is valid signature and ping the account directly. And finally you can and you should use multiples. And that's basically all you need to remember about account abstraction so far.
00:12:18.300 - 00:12:37.790, Speaker A: Okay, now let me be a little bit concrete and show some example of the cool stuff that we can do leveraging account abstraction. And of course I am biased, but I will illustrate them with Argentx, which is the wallet we've been building on StarkNet. So in a nutshell, Argentx is the first wallet on the StarkNet ecosystem.
00:12:37.790 - 00:12:53.670, Speaker A: It comes as a browser extension. You can have multi account, it works on testnet mainnet and it does everything you expect from a normal wallet. You can send and receive tokens NFTs, you can unwrap funds, you can interact with DApps and it's 100% open source.
00:12:53.670 - 00:13:04.598, Speaker A: A last slide of chilling. Actually it's been an amazing ride, right, StarkNet, it's still in alpha and we already have more than 200K downloads. So I think that's pretty exciting.
00:13:04.598 - 00:13:19.360, Speaker A: There's actually now a bridge from layer one to StarkNet, so you can actually on Ram, real funds, ETH die and so on. And so there's already more than a million being secured in Argent wallet. So this is growing very fast.
00:13:19.360 - 00:13:42.114, Speaker A: Okay, now how does Argentx works? Again, it works like you would expect from a wallet. While typically in Ethereum, when you think of a wallet, you think about the extension, the UI, and then the key that can sign transaction. Of course, in a world with account abstraction you need to think about the account contract that's actually being managed by that interface.
00:13:42.114 - 00:13:55.942, Speaker A: So when we talk about Argentx, you need to picture these different components. The UI that the user uses, the account being on chain, and then the keys or the signer that are authorized to sign transaction. And okay, very straightforward.
00:13:55.942 - 00:14:14.786, Speaker A: If you go to adapt, you connect your wallet, you click on a button, it will trigger the wallet to open. Just like MetaMask, you can approve the transaction. In this case, it will send the transaction, execute the transaction on the account, which will validate if whatever signature has been provided is okay according to the custom logic of the account.
00:14:14.786 - 00:14:37.618, Speaker A: And if yes, it will execute the transaction. So now multicoles, multicol is something that enables you to execute a sequence of transaction, a sequence of calls. Again, actually all the idea that I would present, we've developed them on L one with the Argent vault, but now they become native on StarkNet and that's why it becomes really powerful.
00:14:37.618 - 00:14:55.870, Speaker A: Sorry, that's an example of a simple multicol, right? Your DAPT, you want to do actually three action. You want to chain a sequence of three operation when you can bundle that in a multicol and the wallet will execute them in one transaction. So the account contract will orchestrate the execution of all these calls.
00:14:55.870 - 00:15:20.946, Speaker A: Why is that really cool? Because first of all, for the user it's only one signature. So the UX is much simpler if you think of the painful approve and call that we have on Ethereum. With multicol, it just happens in one transaction you can just tell the user I need to consume 20 die and you will make a multicol which will approve 20 die on the user's account and then execute whatever operation and pull these die.
00:15:20.946 - 00:15:32.826, Speaker A: So, for the user, it's much simpler to understand. So the UX is much better. But there's also a nice corollary is that on StarkNet the main cost of a transaction is actually publishing the state difference to L one.
00:15:32.826 - 00:15:52.810, Speaker A: So if you do a multicol and along the multicol, the state reach an intermediary state that is rolled back before the end of your transaction. You don't pay for that state change. If you think about the approve and call, you'll see that the allow and storage slot is modified, but it's rolled back at the end when the funds are consumed, if you manage to price it correctly.
00:15:52.810 - 00:16:09.594, Speaker A: So actually leveraging that, you can make complex operations that are actually much cheaper than what it will cost on l one, because you can play intelligently with the modification to your state. Okay? And here is just a simple example. With Argentics, you can actually trade some bat for some die.
00:16:09.594 - 00:16:25.530, Speaker A: And then in one transaction I can trade them, send part of it to a friend and the other part to another account. So multicolored really cool. Another thing that you can do with account abstraction that was mentioned in the previous talk is social recovery.
00:16:25.530 - 00:16:39.902, Speaker A: The idea of social recovery, or the goal of social recovery is to get rid of seed phrase. How do we do that? Because your account can be customized. You can have a main key that is the signer the owner, but you can actually add a second key to your account.
00:16:39.902 - 00:16:54.340, Speaker A: And you can actually program your account such that that second key cannot execute transaction. But it can actually do only one action is give you back access to your account if you've lost the main key. So say you've lost your computer.
00:16:54.340 - 00:17:15.002, Speaker A: What you can do, if you have a guardian, what we call a guardian, you can contact that guardian and say, hey, I've lost my computer. Can you reprogram my account and reset the ownership to this new key that I've generated? Of course, this guardian needs to be someone that you trust on Argentvault. So it's a protocol, it can be N of M person.
00:17:15.002 - 00:17:37.060, Speaker A: But you can also give that to a simple recovery service that you trust. And so now when you lose access to your Argentx wallet, you can contact that recovery service authenticate with email, SMS, whatever voice, you can go to the counter there and they will give you back access to your account. What's interesting is that you remain in control.
00:17:37.060 - 00:17:46.706, Speaker A: This guardian, this recovery service is there because you've selected, you've chosen to add it. You can remove it at any point. You can choose to go to another service.
00:17:46.706 - 00:18:03.274, Speaker A: It can actually be you with a hardware wallet if you want. So it's a great way to get rid of seed phrase while maintaining self custody. Playing with these ideas of customizing your account, you can again imagine that you add a second key to your account.
00:18:03.274 - 00:18:24.174, Speaker A: So you still have the main signer which I represent in yellow. But you can decide to add a second key and give that key to a service that will need to cosign every transaction that you make. And now that service, every time your RJX wallet needs to make a transaction, you can send the call data to that service, which can inspect that call data.
00:18:24.174 - 00:18:37.970, Speaker A: Because of course, we humans, even though we know that we should inspect and review every transaction, we usually don't go to the smart contract. And the smart contract of the smart contract being called this is for a human. It's complicated, but a service can orchestrate that much better.
00:18:37.970 - 00:18:53.802, Speaker A: So now you can imagine that every time you make a transaction, you send the roll call data to the service that will inspect the transaction based on some business rules that you have defined. Maybe you've decided to have a $100 daily limit. That service can know already.
00:18:53.802 - 00:18:59.126, Speaker A: You're looking at on chain data. You've already spent your $100. So this is maybe a bit weird.
00:18:59.126 - 00:19:07.242, Speaker A: Or you usually spend $15 and now you're transferring half a million. This is maybe weird. Or maybe you're pinging a contract that has been blacklisted.
00:19:07.242 - 00:19:31.974, Speaker A: So this service can, depending on the context of the transaction, the risk that it sees for the transaction, can decide to auto sign automatically, can decide to do nothing, or actually can decide to block the transaction. And when it does nothing, maybe it can ask you to prove who you are with two FA. So using this concept, you can actually reproduce the experience that you have in a modern online banking application.
00:19:31.974 - 00:19:43.734, Speaker A: Except that, again, this is fully noncustodial because you control who you use as a fraud monitoring service. So this is what I will illustrate. You're making a call on a DAP.
00:19:43.734 - 00:19:59.470, Speaker A: You believe that you're doing something that is legit, but actually the DAP is calling a malicious contract. The fraud monitoring service will detect and block. And if the service doesn't know what you're doing, maybe it's the first time you interact with that party, it will just ask you to confirm who you are with the second factor that you've chosen.
00:19:59.470 - 00:20:10.946, Speaker A: Another idea that we are developing on Argenx, which I believe is really cool, is the concept of session keys. Again, we've introduced that three years ago on Ethereum. We called them DAP keys way too early.
00:20:10.946 - 00:20:19.122, Speaker A: But now we believe that the timing is probably much better. The idea of session key is, again, customizing your account. So imagine that you want to play a game.
00:20:19.122 - 00:20:41.114, Speaker A: If you play blockchain game, one of the main problem is that every time you make a transaction, you need to sign the transaction and that makes the user experience very clumsy. Now imagine that the game at the beginning of a session generates a key locally in the DAP and associate that key to some policies. So it says this key will only be valid for 20 minutes and it can only call contract A and contract B.
00:20:41.114 - 00:20:59.858, Speaker A: And method one and two of this contract, you can actually take all that information, send it to your account and store it on your account. So now that key is authorized to make transaction directly only under the perimeter of the policies that you have defined. Why is that cool? Because now you can play your game.
00:20:59.858 - 00:21:26.246, Speaker A: You don't need to have a wallet anymore. Every time the game needs to make a transaction, it can actually directly send a transaction on chain and you have the guarantee that the transaction it makes is within the perimeter that you have defined and that your funds are still safe because the key can only execute the few things that you have approved. Another cool idea, I think I only have a few minutes is you can imagine, because your account is customable, you can choose to use a different elliptic curve.
00:21:26.246 - 00:21:36.778, Speaker A: So now you can start to put the key on your phone. In the secure enclave of your phone, we choose a different elliptic curve approved by denist. And now you can turn your phone into a hardware wallet.
00:21:36.778 - 00:21:53.182, Speaker A: And actually your key is in your phone. But you can put the logic to verify this kind of transaction on your account on Argentx. So now you can have an experience where you sign with your phone, the secure enclave of your phone, which makes the experience amazingly secure.
00:21:53.182 - 00:22:18.940, Speaker A: And if you combine that with social recovery, I think you are on par to have an amazing experience, use a hardware wallet, but you still have the benefit of social recovery if you happen to lose your phone. One last thing that we are building is the concept of plugin is to make the origin account a bit more modular. So letting third party developers build plugin that can bypass the validation so that you can create and customize your origin account.
00:22:18.940 - 00:22:34.330, Speaker A: Yes. So, in conclusion, I believe that account abstraction is really a game changer for the usability of self custody. I believe that it's the only way to scale self custody and we desperately need to, because if we don't, users will continue to rely on centralized parties.
00:22:34.330 - 00:22:59.118, Speaker A: Layer two is a great opportunity to actually fix that and push for account abstraction. We are very lucky that StarkNet and ZK Sing have decided to launch with native account abstraction, but I do think we should lobby to all other layer twos to make them adopt that technology because I think that's the only way to scale the ecosystem. And of course, Argenx, which I encourage you to give it a try, is the first wallet with native account abstraction.
00:22:59.118 - 00:23:01.420, Speaker A: And with this I thank you.
00:23:11.950 - 00:23:17.338, Speaker B: Hi. My name is Asta. Quick question about the argent guardian, which is used as a recovery mechanism.
00:23:17.338 - 00:23:35.890, Speaker B: Can you clarify whether the argent guardian that Argent provides by default has access to actually be able to retrieve keys like, say, if you were subpoenaed and in that case, if it were possible, then whether you can still say it's noncustodial?
00:23:38.650 - 00:23:59.334, Speaker A: Yes. So if you have one guardian, if you still own the owner key, you are still in control. So, yes, of course, if you use a centralized service as your guardian, so you can use a hardware wallet, but if you give it custody of that guardian key to a service, someone can force that service to actually either block you or do an operation.
00:23:59.334 - 00:24:21.422, Speaker A: But if you still control your account, that's fine because you can revoke that key. Actually, if that key is trying to do a recovery, you can still cancel that recovery. So I went a bit fast, but it's actually a complete protocol with a seven days time delay during which, if you still own the key, you can actually cancel whatever operation the guardian is trying to trigger and you can revoking and put another guardian.
00:24:21.422 - 00:24:34.018, Speaker A: So, yes, if you control the owner key, it's fully self custodial. You are in control. Of course, if you only have one guardian and you lose access to the key and the day you contact them, they decide to be rogue.
00:24:34.018 - 00:24:52.800, Speaker A: At that point you have a problem. But that's why on Argent, on L one users, which have a lot of funds, they choose to have three guardians or four guardians, or combine a centralized service for convenience with the hardware wallet that they use as a backup. So it really depends of where you want to put the threshold and how you want to configure your account.
00:24:55.570 - 00:25:10.850, Speaker C: Very interesting presentation. Thank you. Have you looked into scenarios where the user starts with a custodial wallet that's managed by the company that's going to welcome the user into web three and then the account is actually transitioned into a noncustodial wallet?
00:25:12.230 - 00:25:27.106, Speaker A: Yes, that's definitely something that we are considering, except that we don't want to start with something that's custodial at the beginning. I think that's something that we should avoid. The way we see things is that actually what matters is the form factor that you use to manage your keys.
00:25:27.106 - 00:25:39.050, Speaker A: So your keys can be on phone, they can be on mobile. Actually, an experience that we are thinking is what we call a cloud wallet. It's the idea that the user will go to a website and he can log in with email and password, for example.
00:25:39.050 - 00:25:51.694, Speaker A: Because in the end, users don't care about blockchain, they just want to have access to an application. So maybe there are people that will come to the blockchain through a game. What you can do is that they can log in with email and password for example.
00:25:51.694 - 00:26:08.180, Speaker A: And then you can encrypt the key with the password and then store that backup somewhere. There's other ways when we can own a key and the users can have the backup file encrypted that they control. So there's ways to make that self noncustodial, which are very simple.
00:26:08.180 - 00:26:20.914, Speaker A: It may be self custodial, but it may not be censorship resistant. So there's of course always trade offs in what you do. But if you start to only play a game, maybe it's okay because you only paytel dollars, you don't want to know it's blockchain.
00:26:20.914 - 00:26:31.162, Speaker A: And so you can start with that experience. But what's interesting is that you already have an Argent account, an Argent smart contract, a full Argent smart contract that is deployed. So we're thinking exactly about this kind of experience.
00:26:31.162 - 00:26:58.498, Speaker A: He's making a small libraries that say games can use. And then when a user has been playing the game for quite some time, maybe has honed some NFTs and now is the right time to actually tell him you know what, this NFT, you can bring it to a marketplace and maybe you can actually list it and sell it. At that point is a good moment to make them move towards a more secure and stronger censorship resistant wallet which may be the browser extension or the Argent app on mobile.
00:26:58.498 - 00:27:03.000, Speaker A: So yes, we really want to actually enable that flow for users. Yes.
00:27:09.070 - 00:27:22.110, Speaker C: When are we going to see micro payment direct debits utilized by web two companies utilizing micropayment direct debits?
00:27:25.250 - 00:27:38.334, Speaker A: That's a very good question and I don't think I'm the best qualified person to answer that. I do believe that it's coming payment. We all feel that payment is an important application of blockchain.
00:27:38.334 - 00:27:55.570, Speaker A: I think for many reasons it was not doable up to now. I think with layer twos and maybe layer threes, which are StarkNet is building. For example with Starkx I think we are approaching a system where micro payments can become interesting because they can be very cheap, which I think is necessary.
00:27:55.570 - 00:28:09.070, Speaker A: So you can still have payment and transfer of on chain which become very very fast and very very cheap. So I do think we are getting there and that's something that we are monitoring at Argent. But so far it was clearly too early, the technology wasn't there.
00:28:09.070 - 00:28:12.140, Speaker A: Yes, thank you.
