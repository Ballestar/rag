00:00:18.680 - 00:01:06.720, Speaker A: Security, non escrow renting, crypto mortgages, proof of trustless claim. Those are some use cases which you can get if you break the unbreakable rule that the owner cannot transfer a normal transferable token. My name is Naim Ashab. I'm a smart contract dev At Pawn and today I'd like to talk about tokenization of assets transfer rates. So let's start with the question, what's that? If we talk about asset transfer rates in general, that's the right to change the owner address of the asset. Currently, only the owner and the address approved by the owner can actually do that. In some cases, it can be a protocol.
00:01:06.720 - 00:01:53.528, Speaker A: For example ENS if you don't pay or don't pay your domain, it can be transferred from you. If we tokenize this right, it's still the right to change the owner's address. But now it belongs to the token holder, to the ATR token holder. And the owner is getting rid of this, right? So owner cannot transfer the asset without this token. You can think of it as a salt bound token with a key or like exclusive approval. This ATR token is a standard token. So any DeFi protocol know how to transfer it, how to store it, and only owner can mint this ATR token.
00:01:53.528 - 00:02:52.720, Speaker A: And we have only one ATR Token per one unit of asset. Why I'm saying per one unit of asset? Because it doesn't work just for NFTs, but also for semifungible and fungible tokens. So the advantage of that, the pros of that is that the ATR token is easily transferable and there is no need for additional role as a locker. And if you are familiar with the EIP 50 58 or 57 53, that's more or less exactly what they are doing. So why it's useful. Now, I'll talk about a few of these bus phrases I mentioned at the beginning, or you might see it at the beginning. So first is Ten X Security in GameFi right now you have to make a trade off basically not just for a GameFi asset, but with any asset with utility.
00:02:52.720 - 00:03:23.992, Speaker A: You can store it in your multisick or code wallet or in your hot wallet. In case of hot wallet, it's super convenient. You can sign whatever transaction with the click of a button. You can even do like several transactions per minute and it's still fine, but it's super insecure. In case of somebody can hack you, your private key is leaked, you lose basically whatever you had in the wallet. The other option is keeping that in a multisig. It's ten x secured.
00:03:23.992 - 00:04:04.520, Speaker A: That's cool, but it's very inconvenient to actually use the game or whatever utility the asset brings. With the tokenization of transferrite, you can have the best of the both world. What you can do is actually hold the asset in your hot wallet but keep the transfer rights in your multisig. So you can go that far. So you would even put the private keys to the game server to the project server and let them sign all the transactions. And you still know they cannot steal your stuff, because nobody with the knowledge of the private key can actually transfer it. So even in case of private key leak, nobody can steal your own asset.
00:04:04.520 - 00:04:44.288, Speaker A: Other use case is non escrow renting and lending. In these days, if you want to rent some asset, you have basically three options you can wrap it. In this case, the wrapper is the owner. So if there is an AirDrop or let's say NFT gated access, you won't be able to actually access this utility. The asset can have renting implemented natively. In this case, you are locked with one renting model and it little bit breaks the money Lego narrative we are building in this space. And the last one is provide extra collateral.
00:04:44.288 - 00:05:28.164, Speaker A: In this case, if you don't basically correlate the price of the collateral with the asset itself, you are risking a liquidation, which is also something you don't want. And you need the collateral, you need the extra collateral. So it can be a blocker for some use cases. In lending it's very similar. Basically you need to lock the collateral. So if I have some token with utility, I want to leverage that, I want some extra liquidity, I need to give up the utility of the collateral used in the loan. If we use ATR token as a collateral, rentings looks much better and lending looks much better.
00:05:28.164 - 00:06:24.980, Speaker A: With renting, the tenant is the still true owner, but the collateral is one to one correlated with the asset itself. Sorry, there is no risk of liquidation and the tenant cannot sell it or transfer it somewhere else. At the end of the rent, the asset is simply transferred back to the original owner and you are not locked with one renting model. In a lending case, the borrower still keeps the ownership of the collateral, he can use all the utility and everything is nice. In case of default, lender can claim the collateral. And yeah, it's like a proof of trustless claim. Let's say it goes down to the fact that ATR is the ultimate collateral.
00:06:24.980 - 00:07:05.612, Speaker A: It's very nice to use it in this non escrow renting and lending use cases. Other use cases could be subscriptions, trial periods, crypto mortgages, but it's not a silver bullet. It would not work for tokens with Mutable states unless there is a way how to lock the Mutability. For example, this unisop v three LP or token bundlers. I want just to disclaim that I was thinking about some use case for fungible tokens. I thought about vesting voting, something which I called vesting voting. Imagine a Dow with good old token voting.
00:07:05.612 - 00:07:57.996, Speaker A: All right, investor have some vested tokens locked, but if the tokens are vested, they don't have a voting power. Basically, if you tokenize the transfer rights and lock the transfer right into the vesting contract instead, the investors still can vote and get the utility of the fungible token, but they cannot sell it before the end of the vesting period. So that's one use case for the fungible tokens levitating cars. Yeah, in this case I was just curious who is actually listening. So yeah, we cannot do anything with ATR tokens in this case. But it would be cool though. So how we can build that? We have one approach with this, which is natively.
00:07:57.996 - 00:08:44.720, Speaker A: So asset contract supports MinTIC of the ATR token natively. This is the safest way you can even allow some non standard transfer. So let's say there is a project where you can stake your asset and if the project is able to guarantee that the ATR token holder is always able to transfer it back to himself, you can let the original owner to actually stake it and unstake it back to the original address. That's fine. The problem with this approach is that immutable legacy assets can never support this approach. There is another approach, which is smart Contract Wallets. This approach basically builds a contract wallet that can mint the ATR Tokens on the behalf of the owner and enforce the transfer constraints.
00:08:44.720 - 00:09:20.590, Speaker A: The good thing is that you can use whatever you want in that safe and you can use it right now. The problem is that it cannot revert transfer initiated outside of the wallet. So it has a big problem with approved addresses and with big problems. I mean, the wallet cannot allow you to actually approve the address. Because if the approved address initiates the transfer, that would be a transaction initiated outside of the wallet. And it cannot tokenize transfer rights of something which actually already has an approved address. So the wallet needs to track that.
00:09:20.590 - 00:09:52.310, Speaker A: Another issue is with ERC 1271. The is valid signature is taking two inputs, hash and signature. And from that hash you don't really know what the user tries to sign. So it could be another permit, it could be maybe a transfer, we don't know. So that's another big issue with that. So what we can do natively is great, but takes time to adoption. Smart Contracts has trade offs, but they're available now.
00:09:52.310 - 00:10:49.000, Speaker A: And by available now, I mean really now, because that's what we built. We built a smart contract which is built on top of safe wallet with the module and the guard, which allows you to tokenize transfer. It was announced at defcon and we already released the product. So you can play with it on the app Pond XYZ it's under tools and you can start tokenize transferrites and use them in the landing protocol. So what's next? Go learn more about the ATRs. I've built proof of concept that do the ATR build. ATR enabled tokens for ERC 27, 20 ones and 1155s go to my GitHub, the repo is called ATR.
00:10:49.000 - 00:11:11.768, Speaker A: And go check out the Ponsafe. The app, the repo. The code is publicly available. There is a YouTube video explaining all the important things about pawnsafe and ATR or tokenization of transfer rights in general. And check out this blog post. And that's it. My name is Naim Mashap.
00:11:11.768 - 00:11:27.910, Speaker A: I'm smart contract def at Pon. You can find me everywhere under this handle. Ashanai. Yeah. Follow Pon at Twitter Pondao. And if you have any questions, you can ask now.
00:11:49.160 - 00:11:56.660, Speaker B: Yeah, I was wondering why the ATR token is 1155 rather than 721. What the purpose of that is.
00:11:56.730 - 00:12:35.010, Speaker A: Yeah, because for fungible tokens, you can still keep some fungibility. It's not on the whole collection, but it's per owner. So let's say I tokenize some fungible token and you have some ATR tokens and somebody else has some ATR tokens, you can trade them freely, they are fungible between you. But if you are holding ATR tokens of the same asset but from two different owners, it's not the same thing. Right? If I give you the ATR tokens, it's not fair if you are taking them from somebody else. So that's why the 1155 helps here, because you have the ID and the amount.
00:12:35.380 - 00:12:44.688, Speaker B: Okay, so like, if you have five sorry, if you have like five wrapped ETH, you'd get 511, 55 ATR tokens.
00:12:44.704 - 00:13:25.310, Speaker A: Or something like that. Yes, under some ID, which, like for the 1155, if you are actually tokenizing the transfer rates of 1155, there is an ID. And now you need to include the owner somewhere in the ID. Right? So you can do it by hashing it and creating a new one, for example. But for the simple ERC 20 or like ETH wrapped ETH, whatever, the ID could be just the owner. Okay, cool. Thanks.
00:13:25.310 - 00:13:41.430, Speaker A: Thank you very much. It's.
