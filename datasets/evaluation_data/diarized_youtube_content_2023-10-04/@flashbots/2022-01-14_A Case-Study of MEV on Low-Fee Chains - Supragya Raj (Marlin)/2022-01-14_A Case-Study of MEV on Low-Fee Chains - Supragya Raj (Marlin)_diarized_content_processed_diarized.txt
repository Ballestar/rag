00:00:00.810 - 00:00:49.046, Speaker A: Yeah. So hello everyone. I'm Supragiraj, developer at Marlin and today I'll be discussing a case study of Mev on low fee chains with focus on Polygon POS chain. So just a general outline of the presentation, what I'll be touching upon as topics in this format. First, I think I'll be discussing on why we chose to analyze and help facilitate MEB extraction on Polygon POS chain and what was our motivation behind choice. Also, next comes a few stats we have regarding Mev on Polygon POS chain. Also, we'll be discussing a few modifications that we did to Mev Inspect Pi to help with our analysis of Mev on high throughput chain.
00:00:49.046 - 00:01:42.298, Speaker A: For us. That's polygon mev bohr. Our modification of Bohr client for Polygon akin to Mev geth in Ethereum to facilitate Mev extraction will also be discussed. Then we'll touch upon a few concerns that we have seen in Polygon with respect to the adoption of Map board. We further also discuss the steps that we are undertaking to alleviate all these concerns. And finally, I'll wrap up with how we think we'll be going forward and the next steps. So the motivation of trying to solve the mev problem analysis and facilitating the extraction of Mev on Polygon POS chain was primarily because there was a large DFI ecosystem currently standing strong on Polygon.
00:01:42.298 - 00:02:56.518, Speaker A: So Polygon POS has currently over 3000 D apps and around US dollar 5.5 billion logged in all of these endeavors. So in fact, a lot of well known D five platforms such as Ave Quickswap Balancer draw their direct parallels from Ethereum counterparts and Polygon peers is also EVM compatible. So Bot writers and searchers would have easier time porting their systems onto Polygon if they have already invested that time building on Ethereum. So how big is it? We know that out of all the mev that's extractable, a fraction of it is actually extracted, and yet another subset of that is identified by various method of analyzing transactions. So Flashbots methods implemented in Mev Inspect Pi and earlier the rest version of software also showed somewhere around $897,000,000 worth of Mev extracted over a period of two years from January 2020 to till now. So running a similar, albeit modified version of the same system on Polygon yielded us somewhere around $37 million worth of MEB since January 2021 till October 2021.
00:02:56.518 - 00:03:46.850, Speaker A: And that only includes uniswap V two based swap based arbitrages. So also TVL on Polygon primarily grew in May 2021 as Alex showed. So the 37 million is far underestimation of Mev that's been there and extracted on Polygon. So here's an example of what blocks and things look like on Polygon scan. Here we can see an example of these transactions on Polygon POS, all of which technically spam the chain in order to extract Mev, at least as of now. Since Polygon gas fee is quite low, successful extraction more than compensate for any reverted transactions or any unsuccessful Mev extraction attempts. So prima facie.
00:03:46.850 - 00:04:45.350, Speaker A: It's evident that spamming happens on polygon in race to extract Mev. So we can ask ourselves how big is this problem really, and how big is this problem really for platform as a whole? So we did some analysis to find numbers pertaining to this. For a lower bound, we tried to classify the transactions into whether they have interacted with contracts, which we know for certain have at least one successful chance of extracting the MAV using Arbitrages over a span of 100,000 blocks. And that's a lower bound. And that is around 40% of the transactions that we see in this 100,000 block span. On the upper end, we try to isolate accounts that have shown successful or unsuccessful transactions in at least three consecutive blocks means that they are spammers, and these totaled up to somewhere around 57%. So hence we can see these numbers 40% to 57%.
00:04:45.350 - 00:05:31.522, Speaker A: That's a huge spamming problem on Polygon POS chain resulting just from Mev extraction attempts. So, a few statistics that we want to share with you regarding Mev on polygon. On average, we see at least 120 thousand US dollars worth of Mev extracted every day. One of these images have been already shown to you. From Jan 2021 to October 2021, we see a cumulative extraction of over $37 million. And that's just for uniswap b two contract swap based Arbitrage. It does not include even the sophisticated methods like flash loan sandwiches, flash swaps, or use of other DFI products like Balancer.
00:05:31.522 - 00:06:09.022, Speaker A: So, all of this data is extracted from our event based Arbitrage detection system, which is a modification on top of Mev Inspectpi. So let's have a closer look on how we modified the Mev analysis system to get these stats on polygon. So mev. Inspect pi is a tool written by the flashboard team. Thanks to them, it helps us analyze the extent of Mev post hoc using a blockchain node. So it's much more involved than the block diagram I'm showing here. And it can do much more than swaps and arbitrages liquidation, et cetera.
00:06:09.022 - 00:07:18.858, Speaker A: But for the purposes of this discussion, we will limit ourselves to the high level design of the Inspect, as shown here. At the core, Inspect uses arrogant or parity based ethereum archive, and it calls its tracing RPCs, among other calls, to retrieve the block traces and transaction receipts to inject, and then further classify using trace classifier, and then classify the steps of the transactions into swaps, liquidation, transfer, et cetera. And swaps are then used to find cycles between tokens, and if positive amounts are seen after a cycle of swaps, then it's called out as an Arbitrage. So Flashwatch team have incorporated a few more changes to make this system even faster. For example, they have implemented a new RPC method on ethereum nodes to allow them to batch multiple blocks tracing requests into a single call, resulting in a lower Http overhead of request and response times. And also every time the tracing is done, they cache it into databases so that later on they do not have to do the tracing again. When we wanted to use this system on Polygon POS chain, we hit with a few problems.
00:07:18.858 - 00:08:00.310, Speaker A: Polygon doesn't have a Parity or arrogant implementation for it. Boar is go ethereum based and the tracing of Geth is not compatible with Parity traces. On a side note, a lot of EVM compatible chains are quite similar. They only give one implementation, such as Geeth or Parity for themselves, like optimism gives only Geeth. And we do not have choices whether we should take up Parity or Geet. Second, Polygon has a lot more transactions to analyze. Caching may just not be feasible as DBS tend to grow a lot bigger.
00:08:00.310 - 00:08:51.730, Speaker A: So, optimizations aside, the first course of action for us was to make MVP Inspect Pi works somehow for Polygon POS, and the basic need was to translate these Get traces to Parity trace. So by using Gets call Tracer, we were able to write a translation layer for Mev Inspectpi, and that actually translated the Get traces to Parity traces. And once this was possible, the rest of the system need not change much. So this translation layer basically based on Mev Inspectpi, worked on Polygon for us. It was able to detect arbitrages, et cetera, liquidations, et cetera. However, we faced a few practical problems while backfilling our data. So we ran an experiment for ourselves.
00:08:51.730 - 00:10:00.858, Speaker A: The archive node was running on Bare metal AMD system, and it was powered by 59 50 x CPU, which is 16 core 32 thread machine. And even on this system, when the tracing was invoked, all the hardware threads were fully pegged 100%. And we can still only manage around 1.5 seconds worth of tracing per block, when the Polygon POS still itself has the block time of around 2 seconds. So this resulted in a real issue for us if we wanted to get any kind of historical data from Polygon, for example, if we wanted to get around even six months worth of data, we had to wait four months just to extract it. And if we wanted to add any another inspection algorithm, since traces can't be stored in DB, because DBS themselves grow too huge, we have to wait another four months for six months worth of data, so we cannot really catch up to the head of the blockchain in that case. However, while the translation mechanism posed a practical problem for Polygon POS chain, in theory the system worked well.
00:10:00.858 - 00:11:08.750, Speaker A: So we saw a group of students at Columbia University tried our Gets translation layer on optimism. And since optimism is a relatively new system with little over 1 million transactions in the starting month, the team was able to detect MEB extraction in excess of 40,000 US dollar in just one month. That's November to December in 2021 for uniswap V three like contract swaps alone. The nice thing about it is that all of these MEB extraction arbitrages required the router for v three unisoft v three. This is also a good example to illustrate that the mev exists and is there on other systems as well. So in order to solve the practical issues of using the translation layer on polygon chain, we started to look for other ways to reduce the computation load. One way of doing this was to perhaps use events as Bloom filter such that only the transactions emitting a certain set of whitelisted events such as swap event, sync event, transfer event are traced, otherwise they are skipped.
00:11:08.750 - 00:11:58.738, Speaker A: We implemented this by modifying the code for bone. However, the results were still not very promising. We got a speed of around 30% going from 1.5 second per block to around 1.1 second per block in batch tracing mode. However, this was still not good enough for backfill. So eventually then we thought what if we restricted the kind of swaps that we can detect as a startup and we forget about other kind of results like liquidations for the time being? Can we then use events themselves which we were using for BloomFilter as the data source for swaps and then detect arbitrages from them? So if we concerned ourselves with only uniswap v two, at least we can do so by using just events it turned out.
00:11:58.738 - 00:12:56.210, Speaker A: Plus a few ETH calls were required then this is also results in us not needing a large archive node anymore. So we replaced the tracing component of Mev inspect Pi and implemented direct conversion of events to swaps. The results were quite dramatic. Not only did the size of polygon node reduce, we were also able to backfill the data for entire 2021 Jan to October in just around 36 hours. This is where our statistics stem from. However, as enunciated before, this system has limitations, the biggest one being if there are more complex mev extraction techniques, the component data of which may not be derivable from the event data, the system does not really work well, we are still working on it. Let's move on to the next part of our presentation on how Marlin attempts to facilitate extraction of Mev in fashion similar to how Flashbot fits in Ethereum ecosystem.
00:12:56.210 - 00:13:57.202, Speaker A: We modified Bore, the EVM compatible geth based component of polygon POS node setup akin to Me gets. We added support for bundles and brought forward the following features MAB Bore Promutes, the mapool transactions and bundles it receives from the relay for max profitability of validators such as can pay validators directly through the payments to coinbase addresses. And our Marlin private relay helps reduce spam in bundles arriving at validator nodes by simulating it first and then transmitting it ahead. Along with this, there is a nice thing about polygon POS chain that we were able to implement. So since we know that the polygon POS chain has a system of Sprint that allows us to know the validators responsible for signing the blocks beforehand. We can limit the recipient Validators for bundles we receive on a relay at any given point in time. So this increases the security of bundles.
00:13:57.202 - 00:14:53.980, Speaker A: And this is an additional feature we have implemented and is part of Mebbo right now. So with this, I would like to discuss a few practical differences between MEB Geth for Ethereum and MEB Boar for Polygon and how that shapes our trajectory going forward. So Ethereum has been around for a longer time than Polygon. The miners on Ethereum generally use a bit more sophisticated setups for mining. With this, for practical purposes, Miner can run flashbots Mev Geet in more of a supplemental format while mining blocks and thus reduce his or her dependence on Mev Geet. So in this slide, we can see one such setup. Conceptualized, the Miner runs two versions of Geet vanilla Geet and Mev Geet, and the candidate blocks generated by both these nodes are compared by a system before dispatching it for mining to the mining rate.
00:14:53.980 - 00:15:59.418, Speaker A: While this may look involved, it is interesting to note that even if Mev Geet fails in this format for any reason, the Miner system is not compromised and he or she does not lose the hash power, and the hash power isn't sitting idle. So the situation changes when we talk about POS chains like Polygon because there is no longer a separation of candidate block versus block that's mined eventually, so a single node is responsible for signing the blocks. Hence, the previous format of supplementing instances does not translate well into Polygon POS and hence Mev Bohr needs to offer a lot more guarantees. So we came across a few frequent concerns from Validators who were interested in our system. First of all, they were afraid of losing rewards. Remember, in Ethereum supplemental setup there was no case where the hash power goes to waste. However, since Mev Bore can only be a single instance, if it fails, there's no signing.
00:15:59.418 - 00:16:55.300, Speaker A: And Validators were afraid of losing rewards and eventually even their reputation in the network. Also, they wanted attestation from Polygon foundation. The proposition of replacing Bohr with Mev Boar is what leads to many asking for this. The troubling part here is, however, that every future version of Mev Bohr can't be guaranteed a foundation attestation, even if current version is attested and whether the Mev Bore double signs. While we made sure that the Mev Bore only adds in a contained way on how Bohr already works, we understand why this concern arises. And lastly, unlike Ethereum, the private key of Validator sits on the same system as Bohr and is accessed by Bohr. So the participants hence also want some surety of not having bugs that will leak such sensitive information.
00:16:55.300 - 00:17:40.240, Speaker A: So we worked on a few mitigation things. This leads us to think about a few mitigation steps to alleviate the concerns of the Validators. First of all, we are running the Loki testnet for polygon that is incentivized through pond our own token. So enterprising Validators can try MVP Bore without risk of losing Matic or block rewards. And we also want to touch upon an important design decision that we made sure to respect that we didn't change heimdall code that is responsible for staking rewards. Only the Bohr layer is changed. With MEB Bore going forward with all these already done, we believe this is how we should be moving forward.
00:17:40.240 - 00:18:19.258, Speaker A: We should continue improving our folk of Mev inspectpi and unravel more Mev as we go forward. We are also bootstrapping Me Bore front by running our own large Validator node based on Me Bore with a large enough stake on Polygon main net. So we are already working closely with Matic ops of Validator on Polygon POS chain to make this a reality. And on top of it, we already have 10 million Matic tokens committed to this setup. Once this is done, our RPC will soon be functional for people to submit bundles on. Our testnet is open. We welcome the Validators on Polygon to join us and run Mev board.
00:18:19.258 - 00:18:47.560, Speaker A: And we'll explore avenues to analyze and support Mev extraction on other platforms BSE, Phantom, et cetera. But that's a long term goal for us once we have experience building the same on Polygon. So that's all from my side. That's how I would like to conclude my presentation. We at Marlin would love to have you come to our discord and say hi to us. These are the QR codes you can take snap. Thank you.
00:18:47.560 - 00:18:59.430, Speaker A: All right, thank you very much. As I said earlier, we'll take questions at the end. So thank you for your presentation. That was.
