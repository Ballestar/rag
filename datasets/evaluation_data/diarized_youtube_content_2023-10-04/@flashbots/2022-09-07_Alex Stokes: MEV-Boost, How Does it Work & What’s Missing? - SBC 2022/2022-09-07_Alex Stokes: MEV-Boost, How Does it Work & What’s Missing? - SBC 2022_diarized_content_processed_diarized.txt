00:00:01.130 - 00:00:31.830, Speaker A: Okay, everyone, so, so far we've looked at a lot of different things, like mev broadly and how it affects crypto and just the landscape in general. Then we saw this great talk just now where Vitalik looked at some of the forward looking issues around how can we do this securely? What would that look like? And now we're going to zoom in to some of the very sort of out of hand developments, with Mev in particular, Mev boost. You've probably heard a lot about this, especially over the past couple weeks.
00:00:31.830 - 00:00:51.060, Speaker A: So I want to kind of give an overview of what it is, how it works and how it lines up with everything else you've heard so far today. So you hear all these words like mev, PBS, mev boost. Like, what is all this stuff? I'll assume you know what mev is.
00:00:51.060 - 00:01:16.264, Speaker A: And the bottom line is it's like this centralizing force, right? Because if you have actors who can extract mev better than others, then there's now this incentive you have, these economies of scale that puts pressure on the validator set to centralize. And this is not great, right, because it harms very directly the decentralization of the network. So this is like a very big, complex problem.
00:01:16.264 - 00:01:34.980, Speaker A: There's many pieces to it. One of them is just saying, hey, can we change something to help preserve validator decentralization? And the sort of very high level answer is you just separate them. And this is what we mean when we say PBS proposer builder separation.
00:01:34.980 - 00:01:45.370, Speaker A: In some sense, you're like, firewalling all this mev stuff into its own layer. People like blockchain layers. So now writing another one and yeah, that's kind of the high level idea.
00:01:45.370 - 00:02:02.892, Speaker A: So ultimately we want to enshrine something in the protocol. There's reasons that it would make a lot of things more efficient or more secure on different axes if this is actually part of the protocol itself. But as hopefully you'll come to see today, this is like a huge design space.
00:02:02.892 - 00:02:24.964, Speaker A: There's a lot of questions, so we don't want to just rush to enshrine something right now. And so in the meantime, what can we do? Well, mevboost is this thing is essentially this off chain implementation of PBS, which is what I said here. So like, the Flashbots Organization, in collaboration with many of the Ethereum developers, have been working on this thing.
00:02:24.964 - 00:02:31.284, Speaker A: Mavboost, there's a link here. This is sort of like the main landing page. I suggest you go there.
00:02:31.284 - 00:02:45.450, Speaker A: There will be, at the end of the talk like a huge link dump. There's a lot of material, but you can get started there. So mevboost is okay.
00:02:45.450 - 00:03:03.476, Speaker A: So, yeah, let's just talk a bit at a high level of what PBS is, right? So proposers and builders, they come together. You see this diagram here? The idea is that you have a blockchain. See these blue blocks? They're chained together with the arrows.
00:03:03.476 - 00:03:14.056, Speaker A: That's great. With the merge happening, now we have this consensus layer and this execution layer. And the idea with these little green boxes is that these are like the Execution payloads.
00:03:14.056 - 00:03:26.688, Speaker A: So this is where Lamev lives when you look at the system. I tried to communicate that some payloads have more mev and some have less with this gold border thing. So here's some nice cartoons for you.
00:03:26.688 - 00:03:41.076, Speaker A: And the question is now, okay, as a proposer, I'm making the next block in the chain. That's the one here at the end on the right. Proposers may want to sell this block space because, for example, some builder has specialized in this mev game.
00:03:41.076 - 00:03:55.640, Speaker A: And perhaps they're both better off if they can communicate. Builders definitely want to buy this block space because this is how they can actually sort of make their way in the world. So we have this problem, right? We need proposers to connect to builders.
00:03:55.640 - 00:04:19.474, Speaker A: And the question is, how are we going to do this? We'll just kind of start from scratch and just say they exist in the world and we need some way for them to connect. So it's not clear how because we've said nothing else about the problem. The solution is mevboost.
00:04:19.474 - 00:04:27.610, Speaker A: So mevboost is like a couple of things. One is like this network. So we'll see that there's going to be a network now that connects these two parties.
00:04:27.610 - 00:04:47.466, Speaker A: It's also like implementation a bunch of different software assets that we'll also look at a bit. So first we'll talk about boost as a network. And it's to solve this problem of connecting builders to proposers, right? So a sort of naive solution is we just say, okay, let's literally just connect them somehow.
00:04:47.466 - 00:05:02.680, Speaker A: There's a, quote, rendezvous service of mevboost, and that is what Webboost is going to do. And it's really just to solve this direct problem of I want a built block, a built Execution payload, and this is how I'm going to get it. Just like connect in some way.
00:05:02.680 - 00:05:15.878, Speaker A: So, yeah, how would this look like? The proposer comes along every slot. They again, can query this network for the best bids. They can pick the best bid and put that into their block.
00:05:15.878 - 00:05:24.218, Speaker A: So again, you see there's like different bids over here. Allegedly, the proposer would pick the most valuable one. And this one has like, the thickest border.
00:05:24.218 - 00:05:52.444, Speaker A: So they collect that one, put it into their block. There's a catch, though, because the way that I tried to communicate this so far is that any proposer can come do this, right? There's just this open network that anyone can use. And the issue is that this will lead to a problem because we want an Ethereum to have a very decentralized, validator set.
00:05:52.444 - 00:06:18.480, Speaker A: And this means that almost anyone can participate. And this is a problem then, because then these proposers, these validators, can see the contents of the block and we'd be concerned about them abusing this power in this setting. It means stealing the mev, right? So the idea is that as a builder, you make this valuable payload, you'll probably collect some of that value for yourself to compensate you for your efforts.
00:06:18.480 - 00:06:39.240, Speaker A: The rest of it probably goes to the proposer. And again, that's what this schematic shows here. But if we do what I've said so far, which is just have this kind of open network with some abstract rendezvous service, the proposer gets the block and it says, oh, here's like a juicy payload, I'm just going to collect all the value for myself rather than give any to the builder.
00:06:39.240 - 00:07:00.536, Speaker A: So we need to change this scheme somehow so that mevboost is actually secure. So yeah, there's a couple of things we could do. One of them is you just say we only allow trusted entities into our sort of rendezvous network here, right? So if we have proposers, they essentially are whitelisted in some sense.
00:07:00.536 - 00:07:12.674, Speaker A: We trust them to not steal mev from block builders. And that would work, but for a number of reasons, it's hard to implement. It also doesn't scale.
00:07:12.674 - 00:07:26.346, Speaker A: Again, right, we want any validator to be able to participate. Otherwise we're kind of going against the key point of this whole PBS in the first place, which is to allow anyone equal access to this mev game. Yeah.
00:07:26.346 - 00:07:57.202, Speaker A: And then it would harden decentralization again for these economies of scale that we keep seeing. So instead, let's say, okay, option two, we'll just remove the trust assumptions and the question is how do we do that and mevboost attempts to do this, right? So we want to support anyone to access this builder network. And the way that we're going to do it is rather than just have this sort of like open sort of game, we now have this commit reveal scheme where builders commit to what they're going to build.
00:07:57.202 - 00:08:09.994, Speaker A: Proposers have to kind of opt into this in a way you'll see in a second. And once they've committed to it in a binding way, then the builder can reveal the full payload. Yeah.
00:08:09.994 - 00:08:29.354, Speaker A: So critically though, this reveal bit is very important and we'll see for some of the security sort of reasoning around mevboost, this becomes an important point. So again, in a very schematic way, it looks like this. And the thinking is this will happen to every slot.
00:08:29.354 - 00:09:05.638, Speaker A: So you have a builder on the left, proposer on the right, and rather than sending this like exposed payload, right, so over here, previously, the idea is basically everything's sent in clear text, so then I can just take this and do whatever with it. For example, take all of the mev rather than just some so instead we're going to blind it in some way. How this works in practice is that rather than send the full block, you just send essentially a root, a hash of the list of transactions that goes to the proposer.
00:09:05.638 - 00:09:14.074, Speaker A: The proposer can verify everything else other than the batch of transactions. So you see it's still blinded on the right there. In the first part, they build a consensus block.
00:09:14.074 - 00:09:28.318, Speaker A: So now you have the full thing. We have this nice part of the cryptographic scheme within Ethereum that they can basically sign over this block, which commits them to it. And it's still a valid signature over the whole thing that's later unblinded.
00:09:28.318 - 00:09:36.942, Speaker A: So that's what they then send to the builder. The builder sees this as commitment, that they have in fact accepted the bid. They can then release the unblinded payload.
00:09:36.942 - 00:09:58.750, Speaker A: And that's what you see in the very last step. And now this is great, right? Anyone can join, anyone can participate. However, there's still this catch that I just pointed out where builders must do this last step, right.
00:09:58.750 - 00:10:25.436, Speaker A: If they don't, then what happens is that the proposer is committed to a block and if they turn around and try to make a different block, that would be a conflicting signature, they'd be slashed. That's no fun. So it's very important now that the builder releases the payloads and it turns out this is actually like sort of an attack vector here, right? Because if the builder doesn't do this, then, yeah, there's basically a liveness fault, meaning there's no block for that slot.
00:10:25.436 - 00:10:46.408, Speaker A: So if this were happened in a row, if this happened many times in a row, then that would look really bad. So we're going to add a trusted party now to fix that issue. And this is the relay, right? So again, the core issue here is that builders and proposers don't necessarily trust each other.
00:10:46.408 - 00:11:02.392, Speaker A: And that's to support the fact that anyone could be a builder, anyone could be a proposer. And so now we still need some way to have them work together. And there's a number of places where we're going to need to have someone do things that require some amount of trust.
00:11:02.392 - 00:11:10.844, Speaker A: That's where we introduced this relay. So relays do a number of things. They basically show the builders are doing their job, right? So that builder is only making valid blocks.
00:11:10.844 - 00:11:36.990, Speaker A: A builder, for example, could try to grief a proposer with an invalid block. That's not good. They also provide this availability guarantee, right? So builders are not necessarily trusted to do this step because the relays then make sure that they have the block, the full block, the clear text block, and when they have enough information that everyone has done their part, then the relay can release it.
00:11:36.990 - 00:11:58.440, Speaker A: So, again, builders trust relays to not leak mev, you can have many relays, which is nice and yeah, so here's an image. This is from the Flashbots blog and it kind of lays everything out. So you have many builders, they're competing.
00:11:58.440 - 00:12:24.240, Speaker A: You have one relay here, but again, you could have multiple of them competing. And again, kind of the more actors you have at each step, that's better for both fault tolerance, right? So there's no single points of failure and also just general competition to help things remain healthy. And then, yeah, you can see there on the right you have Mevboost, which is this component that's connecting the proposer here, the validator, to the rest of the network.
00:12:24.240 - 00:12:51.652, Speaker A: So, again, high level, that was the idea of how mevboost works generally how we start to build this out of Protocol PBS as this builder layer. Now, we'll talk a little bit about this software concretely, because there's mevboost this idea, but there's also the software that does all of this. The first thing I mentioned a few slides ago was the builder specs.
00:12:51.652 - 00:13:13.262, Speaker A: So this commit reveal scheme that I kind of drew out over here, this has been enshrined as like a set of APIs that you can find at this link here. And that's pretty cool, right? So now, anyone who wants to play this game just has to support the APIs. You can kind of experiment independently on each side of the API.
00:13:13.262 - 00:13:26.914, Speaker A: So hopefully this leads to less encumbered. It lets us more freely evolve the design over time. Importantly, all that consensus client is to support this builder API.
00:13:26.914 - 00:13:39.850, Speaker A: So that's pretty cool. And yeah, it's a great place to get started with some of this stuff. If you are looking to contribute, then separately, there's mevboost as like communication software.
00:13:39.850 - 00:14:00.986, Speaker A: Again, the way to think about it is like this relay multiplexer. So there will be a hopefully market of relays. And mevboost now has to say, okay, given all the relays who are aggregating all these builders, like, what's the best bid for my proposal locally, importantly, it was built with this, quote, sidecar architecture.
00:14:00.986 - 00:14:18.546, Speaker A: And this is nice because it's not on the critical path necessarily of block proposal in general. So there are fallback pathways in the event that something fails for some reason with the local proposal or like the proposal over the one slot. And also it supports client diversity.
00:14:18.546 - 00:14:39.280, Speaker A: If you guys are familiar with Washbots at all, you've heard of mevgeth that's basically taking the one client geth and making modifications to it. This is now client agnostic because any of them work with again the sidecar. So that's pretty cool and I think shows that everyone's work to kind of improve the situation as we go and kind of perpetually decentralize things.
00:14:39.280 - 00:14:50.522, Speaker A: And yeah, there's this nice architecture diagram here. This is from the Mevboost README. If what I'm saying is very abstract, hopefully this helps.
00:14:50.522 - 00:15:02.366, Speaker A: There's just again the network of everything you have searchers doing their job, perhaps there's private order flow. Those all go into builders. And again, many builders, multiplex onto many relays multiplex onto mevboost.
00:15:02.366 - 00:15:18.090, Speaker A: And you have your local ethereum node over there on the left. So now the question is like, what's next? The merge is happening soon, so then this boost network will be live. That's very exciting.
00:15:18.090 - 00:15:39.870, Speaker A: And what's next? Well, we can talk about what goes wrong right? So at a high level there's just general incentive issues. There are many parties here. When you see anything in crypto and there's all these diagrams with many boxes, you should start to be worried because people conclude there's like seldom interactions between all the different parties and how their interests align.
00:15:39.870 - 00:16:06.006, Speaker A: So it can get hairy pretty quickly. So that's one thing is just looking at the system and be like, okay, how could this be used? How can it be abused? How does that end up looking like in particular, builder Centralization is like a really key piece of this. See the previous talk, right, so we don't want to be in a world where there's one builder that is essentially the gateway into every validating node.
00:16:06.006 - 00:16:43.624, Speaker A: Here a big piece, right, is we kind of had to reintroduce this notion of a trusted relay and that's less than ideal, right? The relays do have a lot of trust and so there could be various types of faults both with respect to safety and Liveness where either through a bug or an actual sort of adversarial attack relays do something we don't like. For example, a relay could misrepresent the fact that some payload is valid and then if a proposer were to give it to it, that would essentially be the safety fault in the sense of like this block is just invalid. Now that's not good.
00:16:43.624 - 00:16:55.516, Speaker A: You could have liveness fault, right, where it's basically the relay doesn't make the payload available in time. And so even if the proposer did everything right, then still they don't have the block in their slot. There's some things we can start to do even today.
00:16:55.516 - 00:17:21.364, Speaker A: To help the situation here with the relays, I'll just plug a repo. I've started this relay monitor and the idea is very much to have a service that sits and independently watches all the relays that we're aware of and try to make sure that nothing bad happens. It's structured generally as this thing that will sit and just look at all the bids, every slot even act with proposers if they choose to opt in.
00:17:21.364 - 00:17:57.404, Speaker A: But essentially the idea is gather all the data you can and then just summarize that into essentially a scorecard that for example, a boost could use to say, hey, this relay over here has stopped producing blocks in the last hour, I'm going to stop using it. There's things we can do even outside the entire sort of this builder layer, this mev landscape. There's this notion of like a circuit breaker and this is even saying again before we even get to any of this mev stuff, just as a consensus node, if I see, for example, some number of blocks over the last couple of slots are missing, I should just stop using this entirely.
00:17:57.404 - 00:18:31.690, Speaker A: Maybe it has nothing to do with this, but we'll just be safe until conditions improve and yeah, then we can look a little more broadly and say, how can we improve this mechanism itself? We generally want to work towards something that we can put into the protocol and so this is a great way to kind of do that incrementally and also incorporate actual real world experience as the situation unfolds. You'll see a lot of talks later today about ways to improve. Yeah, I called it the integrity of the game.
00:18:31.690 - 00:18:53.714, Speaker A: So, for example, you could imagine like decentralizing order flow to avoid this builder centralization issue. There's a number of concrete things we can do probably even today. So, for example, I mentioned with safety faults with builders or relays, you could imagine instead of just having this thing presented to you that the proser kind of has to blindly sign.
00:18:53.714 - 00:18:58.806, Speaker A: There could be a proof of validity. Right? You could have like a committee that does this. You could have some sort of snark to do this.
00:18:58.806 - 00:19:16.394, Speaker A: There's different ways to think about it, but that would be sort of a strict improvement over the status quo. Another one is payment proofs. So right now you have these bids for a given payload and you just have to trust that the builder and relay have properly validated that this is actually the case.
00:19:16.394 - 00:19:28.590, Speaker A: Otherwise you could just send a bid through with the max way and always get on chain. But then suddenly you're the only builder and that's not great. Right, so I linked to this GitHub issue here.
00:19:28.590 - 00:19:40.366, Speaker A: I'll put these slides on Twitter later so you can find it. But yeah, there's designs around payment proofs, so there's some sort of verification that the bid is correct. And then also payload availability.
00:19:40.366 - 00:20:12.362, Speaker A: I keep hammering that this is like a huge problem with the relays. It's just like if they were to not make payloads available in time and you can imagine some kind of data availability committee ideas like this where there's some, again, trusted set, trusted entity, but maybe it moves from a single party assumption to like a threshold assumption where now, again, it's just less trusted, less concentrated trust. And yeah, we want to work towards generally decentralizing this relay functionality.
00:20:12.362 - 00:20:30.770, Speaker A: And the hope is that this moves us towards some understanding of what in protocol PBS would look like and what makes sense. And then just generally yeah, there's so many questions here. A good place to dig in would be just the issues on the Webboost repo.
00:20:30.770 - 00:21:09.454, Speaker A: There's a lot of good stuff in there to give you a flavor, hopefully to pique some of your interest. There's a question of even the auctions here, right? Should the bids be sealed or open? And this is referring to as a proposer. When I go to get my bid from the network, basically, can I see all the other bids or does the relay somehow package them in a way that yeah, they can't be seen? The reason you want this is because if bids were open, which they are right now, then as a builder, I can go and before I submit my bid for a slot, I can see all the others and then I can bid out, bid just a little bit more.
00:21:09.454 - 00:21:24.180, Speaker A: So you get this sort of like PGA, this gas war type behavior just at the relay layer. But then if we do see the bids, there's a question of how does this affect incentives? And yeah, I'll point you to the issue if you want to see the conversation. There.
00:21:24.180 - 00:21:59.550, Speaker A: Another big one is like PBS broadly, like, how does it affect the protocol? So one thing here is if you have builders colluding with proposers, they can start playing these games where, for example, the builder is here, the builder starts to build a valuable block. It wants as much time to do this because, again, just in general, the more time you have, the more effort you'll be able to put to build a very valuable payload. And that's fine for the builder, but it's not great for the network because what it means is you're incentivized to wait until the very last minute.
00:21:59.550 - 00:22:32.586, Speaker A: And generally this harms network health if you were to imagine every block comes in at the absolute last second. So again, there's this incentive issue and, yeah, there's a bit of an open question, so I'll just do this as like a final call out. How do you want to contribute? If you want to help with the code or the specs? Again, there's a flashbots repo there's the builder specs I mentioned if you want to get started as a user, so you can run mevboost if you have your home set up going, the merge is upon us.
00:22:32.586 - 00:22:40.470, Speaker A: So you can go to boost flashbots net. You could take a more involved role in the ecosystem. You could run a relay or a block builder.
00:22:40.470 - 00:22:49.646, Speaker A: These are, again, very sort of involved tasks. So just think carefully before you act. But if you want to learn more about that, there's some links here.
00:22:49.646 - 00:23:01.060, Speaker A: And, yeah, I'll tweet these slides out so you can actually get to the links and things. You don't need to worry about writing down all this text. And, yeah, that's a link to my Twitter profile if you want that.
00:23:01.060 - 00:23:08.040, Speaker A: And that's all I have for now. So if there are any questions, I can take those.
00:23:16.010 - 00:23:23.398, Speaker B: I have a question. First of all, thanks for the really nice and clear talk. And I especially commend the use of excalidra for graphics.
00:23:23.398 - 00:23:36.894, Speaker B: Love it. My question is about these relays. Are they different from inter blockchain technologies that we already have? Some of them deployed, like IBC in the Cosmos ecosystem, we have layer zero.
00:23:36.894 - 00:23:42.800, Speaker B: I'm from chainlink, we're building CCAP and we've talked about it. Any difference?
00:23:43.990 - 00:23:52.850, Speaker A: Yeah, so we all like to use this word, relay. I think it's used a bit broadly here. Yeah, I don't know.
00:23:52.850 - 00:24:21.130, Speaker A: To me, a relay in this setting, the more broad setting you're talking about is one where it's like we need something perhaps happening off chain, and then there's just this hole in the space to fill and the relay steps in to do this. Here, relays very specifically have a task around, again, gathering blocks from builders, making sure everything looks right, providing that to proposers, facilitating the auction, making payloads available. And, yeah, just all these very specific tasks.
00:24:21.130 - 00:24:23.130, Speaker A: Was that helpful?
00:24:23.290 - 00:24:26.960, Speaker B: So you're saying it's a subset of what?
00:24:27.330 - 00:24:32.362, Speaker A: Well, like an IBC relay, I think. I mean, they have different tasks.
00:24:32.506 - 00:24:44.818, Speaker B: IBC, I would agree, but layer zero, for example, all they do is take messages or events that are emitted on one blockchain and reliably securely attest that. They're posting it to another. Is there a difference?
00:24:44.904 - 00:24:48.310, Speaker A: Yeah, I would just think they seem different to me.
00:24:48.380 - 00:24:48.710, Speaker C: Okay.
00:24:48.780 - 00:24:49.400, Speaker A: Yeah.
00:24:52.970 - 00:24:57.698, Speaker D: Hi. I got two questions here. So the first one is a bit technical.
00:24:57.698 - 00:25:22.670, Speaker D: So in post, we have all these validators, right? And they build blocks in turn. So I wonder if the relayers needs to kind of keep the communication with all the proposers all the time, or you hop, like, you can predict who's the next proposer and then just connect to specific proposals.
00:25:24.130 - 00:25:33.700, Speaker A: Right. Okay. So I think generally the question was, is there an issue with knowing proposals ahead of time? And if builders can abuse that somehow, and they may.
00:25:33.700 - 00:25:43.858, Speaker A: So right now, on Ethereum, we do know the proposers with some amount of look ahead. There is work around. Like, you might have heard of Ssel or secret single leader election.
00:25:43.858 - 00:26:03.238, Speaker A: And that changes us a bit. But, yeah, you could imagine now that if the builder knows the next, say, 32 proposers, they could connect to them directly. There's privacy reasons a proposer might not want to do this, because then if I'm like, hey, I'm like this validator, and this is my IP, then suddenly they open themselves up to Dos.
00:26:03.238 - 00:26:21.042, Speaker A: So it's not, I think, the smartest thing to do. And, yeah, part again of these open questions around this design generally that I'm trying to gesture towards is just, like, understanding the incentives and how different actors might collude and what we can do, what's important to mitigate, how we can mitigate it. And, yeah, there's a lot going on.
00:26:21.176 - 00:26:30.034, Speaker D: Okay, thank you. So my second question is more like a design question. So at the moment, you adopt the sealed beat auction mode.
00:26:30.034 - 00:26:44.890, Speaker D: So I was wondering why you do not kind of publish the beats after the auction has finished. So in a sense, it's more transparent and everyone can check whether there's anything like fishy or malicious going on.
00:26:45.040 - 00:27:05.330, Speaker A: Right. So right now, the auction for mevboost is open bid, as in anyone can go see them, that are made available by any relays. So, yeah, I mean, as soon as the bid is there, there's a lot you can say around, like, is this a valid execution payload? The only thing you don't really have is the transaction set again to prevent this mev stealing.
00:27:05.330 - 00:27:21.154, Speaker A: But, yeah, there's a lot you can do. You could even imagine looking over time, you could query many bids and see if this relay is for some reason offering bids much more valuable than another. There's a lot you could do to ensure the market itself is healthy.
00:27:21.154 - 00:27:28.920, Speaker A: And, yeah, again, I think there's a lot of questions around the exact auction mechanics and if you're interested, you should please take a look.
00:27:29.710 - 00:27:30.700, Speaker D: Thank you.
00:27:31.870 - 00:27:45.966, Speaker E: I guess this one's somewhat related, but maybe on a more philosophical level. So maybe if I'misunderstanding your product, but the way that I understand Flashbots is a neutral, decentralized platform, right? Censorship, resistance, same as bitcoin Ethereum. Right.
00:27:45.966 - 00:27:50.880, Speaker E: That's important. But I also understand the spirit is to improve the space. Right.
00:27:50.880 - 00:28:21.980, Speaker E: So how do you contend with these two maybe conflicting principles that are neutrality, decentralization, but also protecting users and morality, right. In a fully decentralized ecosystem, how do we as users, as builders, how do we self regulate against unethical mev like sandwich attacks, front running, back running, liquidity Sniping? Because institutions are not going to come in, the mainstream adoption is not going to come in until we solve these issues. So how do we self regulate this?
00:28:22.670 - 00:28:42.202, Speaker A: Yeah, I mean, you're asking all the big questions. I can't speak for Flashbots directly, but just from what I can say as a contributor to Ethereum, it's really important. There's a lot of different places in the stack where we can, I think, improve the state of things like you mentioned users and user harms and this notion of perhaps an ethical mev.
00:28:42.202 - 00:28:53.038, Speaker A: So there I would say users should demand better from their applications. Right. So, for example, there's this slippage notion in uniswap.
00:28:53.038 - 00:29:08.082, Speaker A: Well, actually, my thing with Uniswap is I think they should focus more on mev rebates. And you'll hear it later today, I think, about this notion. But there's ways you could imagine where you provide some of the value, like recapture some of the mev that the application exposes and passes that back to the user as like a rebate.
00:29:08.082 - 00:29:27.774, Speaker A: And again, it's like a very big open question about how you do this in general. But, yeah, I mean, generally just demand applications to be aware of mev and have them provide answers that are helpful. Then there's more protocol level concerns you mentioned around the health of the network, citrus resistance, things like this.
00:29:27.774 - 00:29:33.822, Speaker A: And that will be an ongoing conversation. Yeah, we just have to keep talking about it. Awesome.
00:29:33.876 - 00:29:34.254, Speaker E: Thank you.
00:29:34.292 - 00:29:35.600, Speaker D: Yeah, we catch up later.
00:29:37.750 - 00:30:03.158, Speaker C: Hi. So after the merge, essentially, builders relayers, validators, all can front run each other, right? So my question is, because of the math boost mechanism, that in the end, validators get to choose which block to go for it. So if the block reward is low, then this block won't get picked.
00:30:03.158 - 00:30:14.570, Speaker C: So I think the builders have to meet initially to need. A lot of transactions before adding the builder its own transactions. Right.
00:30:14.570 - 00:30:49.370, Speaker C: So we're kind of the profit maximizing play for the builders. And I feel like the likelihood of builders to collude with Validators is really high. And I want to know who are the trusted Validators so far on the market? Are they all working with Lido right now? And also is decentralizing the builder roles is really good thing, or we should just go for the reputable builders.
00:30:51.470 - 00:31:04.858, Speaker A: Right. There were many questions there, but I think generally you're just asking about to what extent, what does the market look like today? And again, it's very big. I don't know if I can give a nice overview.
00:31:04.858 - 00:31:19.540, Speaker A: Just like right now, something you touched on was like, is it even worthwhile to decentralize these different functions? And I think very much so. Right. Even if we start where we are today and make incremental progress over time, that's better than doing nothing.
00:31:19.540 - 00:31:33.974, Speaker A: I do think it is like I don't know, I would be worried if we get to a world where to use Ethereum, you have to go through one, two, three builders. So, yeah, I think decentralizing all these functions should be like, our top priority. Yeah.
00:31:33.974 - 00:31:42.066, Speaker A: And then again, there's just like so many pieces, it maybe touches everything. So there's obviously a lot more to say, but yeah, hopefully that's helpful.
00:31:42.178 - 00:31:42.740, Speaker C: All right, thanks.
