00:00:00.250 - 00:00:08.590, Speaker A: Hi everyone. Good afternoon. My name is Janik, I'm from Shutter Network.
00:00:08.590 - 00:00:34.630, Speaker A: And what we usually do, or what our main mission is basically is mev minimization. So we want to reduce the mev available but we do acknowledge that this is limited. We can't minimize to zero, there will always be some left and we need to make sure that the remaining mev will be extracted efficiently and without many big externalities.
00:00:34.630 - 00:01:15.300, Speaker A: And therefore we've been looking into these techniques like PBS and in particular Mev Boost more recently and just to check how they work. And we realized that a technique we use for minimization, namely threshold encryption can work very well to improve these proposals and make them more secure and less trusted. Yeah, and this is what I'm going to talk about basically and it's general about PBS, but now in particular about Mev boost because this is kind of the most concrete proposal but we hope that it will also inform like future PBS proposals as well.
00:01:15.300 - 00:01:34.266, Speaker A: But yeah, for the talk I will focus on mevboost. So to review the problem, we already heard about it today a couple of times. We want to separate builders and proposers and Mev Boost now adds an entity called the Relay to reduce trust assumptions between them.
00:01:34.266 - 00:01:54.320, Speaker A: Because without them, one naive way to separate the two would simply be to let the builder produce a block and send it to the proposer and the proposer would then sign it. But then the proposer could do a so called mev stealing attack. They could just look in the block, see what mev was extracted and redirect the rewards to themselves.
00:01:54.320 - 00:02:07.640, Speaker A: This means this would only work if proposals are trusted. But unfortunately there's lots of proposals or fortunately there are lots of proposals. So this is just no way this would work.
00:02:07.640 - 00:02:35.760, Speaker A: Maybe a smarter way to do it would be for the builder to not send the full block to the proposer but only send the header. Then let the proposer pick a header, assign it and once the builder sees the signature, only then the body will be revealed. Then mev stealing wouldn't work anymore because the proposer doesn't see the content of the block before they already committed to one.
00:02:35.760 - 00:03:02.450, Speaker A: But unfortunately there's another attack possible here called block withholding the builder can simply not release the body of the block meaning the slot will stay empty and the proposer will lose money and they will not earn anything during that slot. So this does only work if builders are trusted. There's less builders than and there's probably going to be only very few builders.
00:03:02.450 - 00:03:19.740, Speaker A: But still we don't want to trust builders because we want to have it. It should be very simple, very easy to become a builder and if you need trust then this will be much more difficult. So therefore mevboost adds this relay in the middle, kind of as an Isolator for trust.
00:03:19.740 - 00:03:30.510, Speaker A: With the relay the process looks like this. The builder basically combines the two approaches. The builder sends the full block to the relay and the relay does this header signature body game with a proposer.
00:03:30.510 - 00:03:57.638, Speaker A: This is nice now because builders and proposers don't have to trust each other directly, but they do have to trust the relay because now the relay can basically do these kinds of attacks. But yes, so this kind of fixes the immediate problem but it also has some side effects and it's not very beautiful in a way. So we would like to solve these problems.
00:03:57.638 - 00:04:17.600, Speaker A: Basically, we don't want to allow the relayer to perform these kinds of attacks mev stealing and block withholding. We also don't want to allow them to censor like in this setting, you can see the relay is right in the middle. They can censor blocks from the builder and not relay them to the proposer depending on, for example, which transactions are in there.
00:04:17.600 - 00:04:40.274, Speaker A: It's also probably a very heavily centralized position, the relay in principle, again, it's an open system, anyone can become a relay but they need to convince both builders and proposers to trust them. So this will be very hard for new relays to do if there's already competing ones. And also it requires proposers to pick a relay to trust, which is not a very easy decision.
00:04:40.274 - 00:05:02.794, Speaker A: So at least it's much more difficult than just starting a shell script which is running or operating a node. Right now the question is can we do better? And I think we can by adding another kind of an abstract machine for now, we will fill this in this later. But for now let's think of an decryption machine and what this decryption machine does.
00:05:02.794 - 00:05:21.794, Speaker A: It provides it's very simple, it provides encryption keys and decryption keys on request. And then we can build a protocol that looks like this. In the beginning, the decryption key releases, the decryption machine releases encryption keys, the builder takes one and whenever they build a block, they encrypt the body of the block using that key.
00:05:21.794 - 00:05:59.806, Speaker A: They then send the header and the encrypted body to the proposer. And then the proposer picks one block, signs, it sends the signature to the decryption machine and once the decryption machine saw this signature, they will give or return that decryption key for that particular block. And now this fixes mev stealing because the proposer doesn't see the content of the block, they only see an encrypted blob and it also fixes block withholding because the builder already in the first step basically gave the whole block to the proposer so they can't withhold anything.
00:05:59.806 - 00:06:24.520, Speaker A: There's kind of a variant that's possible though of block withholding. Namely the builder could encrypt an invalid block which would have basically the same side effect, same effect as withholding the whole block, namely that the block would be rejected by the network and that this lot would stay empty. Fortunately that's provable or we can cryptographically prove that this happened.
00:06:24.520 - 00:06:47.946, Speaker A: And we can counter that using either a ZK solution or an optimistic solution, very similar to how ZK rollups or optimistic rollups work. So in a ZK solution, the builder would simply attach a zero knowledge proof that the block is valid and the proposer would, of course, only accept blocks with these zero knowledge proofs. Unfortunately, for now, this is impractical.
00:06:47.946 - 00:06:56.670, Speaker A: These proofs don't exist yet, or at least very difficult to generate. So not an option for now. But fortunately, we can rely on optimistic solution.
00:06:56.670 - 00:07:14.840, Speaker A: Basically how optimistic rollouts work. We can slash builders after the fact by providing a fault proof kind of an interactive faultproof game. And this is already a practical solution as demonstrated by all these live, very beautiful roll up implementations out there.
00:07:14.840 - 00:07:32.830, Speaker A: So now we have to fill in this hole of the decryption machine. How does it work in practice? This is where the Threshold Committee comes in. It's basically a committee of nodes that performs this job of generating encryption and decryption keys.
00:07:32.830 - 00:07:43.402, Speaker A: And it's fault tolerant. Only some of those nodes, namely the Threshold, needs to be honest and online for the protocol to be secure. That's why it's called a Threshold.
00:07:43.402 - 00:08:07.510, Speaker A: Only the Threshold number of nodes need to be honest. And this makes it more secure because even if there's some red nodes in here who try to cheat, the system still works. Well, unfortunately, if you do it naively, this would be very inefficient because they would have to generate a new decryption key and encryption key for every block that a builder wants to propose.
00:08:07.510 - 00:08:27.086, Speaker A: And this could even be a DDoS vector or Denial of Service attack vector. Basically, you can spin up a million builders and they would then spam the Threshold Encryption Committee give me keys. And they could do that because it's too much work.
00:08:27.086 - 00:08:42.974, Speaker A: So we need another ingredient, namely identity based encryption. And identity based encryption is a very interesting mechanism. It allows encrypting a message not for a public key or for a symmetric key, but for an identity, which can be an arbitrary string.
00:08:42.974 - 00:09:19.982, Speaker A: And then afterwards, the decryption key corresponding to that encryption key to that encrypted message will be generated by a committee like this, like a Threshold Committee. And yeah, the way it works like this, like assuming Alice wants to send a message to Bob, the process would be that the committee generates first kind of a master encryption key and distribute it to everyone. And now Alice would encrypt a message to Bob using the master key, but also the identity of Bob, for example, his email address.
00:09:19.982 - 00:09:30.034, Speaker A: Bob@ethereum.org and Bob would receive this message. They couldn't decrypt it immediately because they don't have a decryption key, they don't have anything, basically.
00:09:30.034 - 00:09:38.618, Speaker A: And they would ask the Threshold Committee to provide them the key. So Bob would say I'm Bob. I own Bob@ethereum.org.
00:09:38.618 - 00:09:59.750, Speaker A: Please give me the key. And they would then send the key in the form of key shares to Bob and then Bob could decrypt this message using that key. How do we apply it? In our protocol, we use the block hash to recall the builder wants to send a block to the proposer.
00:09:59.750 - 00:10:13.490, Speaker A: And the builder will now encrypt the block using the block hash as an identity. This means that all the blocks can be decrypted independently from each other. So only one block will always be decrypted.
00:10:13.490 - 00:10:25.986, Speaker A: It's also very efficient because you only need to run this DKG phase once. So only one key has to be generated ever, basically. And for decryption key, it's also very efficient.
00:10:25.986 - 00:10:56.174, Speaker A: It's basically just a linear message over it basically only threshold nodes, only T nodes of this committee have to send a message for the decryption. Okay, so putting it all together now, these different techniques, starting with the threshold committee, they will in the beginning generate a key, broadcast it to everyone. Bob will receive the will, not Bob, the builder will.
00:10:56.174 - 00:11:24.834, Speaker A: All builders will build blocks, encrypt the blocks using this encryption key, using the hash of the block as identity, send the header and the encrypted body to the proposer. The proposer will pick one based on who pays the most, whose bid is the highest. They will then sign it and send the signature to this committee, the special committee.
00:11:24.834 - 00:11:48.590, Speaker A: The committee will respond with the decryption key shares and now the proposer can decrypt the block and send it to the network and everyone is happy. And on the side we have this builder slashing contract that will hopefully never be used. So we need to look into this is the protocol, how it works, but we should look into things how they could go wrong, basically misbehavior by the committee.
00:11:48.590 - 00:12:07.586, Speaker A: And again, they can do these two types of attacks, block withholding and mev stealing. Block withholding would in this system look basically like refusing to decrypt the or refusing to release the decryption key. But now this cannot be done by a single entity like the relay.
00:12:07.586 - 00:12:24.406, Speaker A: It can only be done by a certain fraction of the whole committee. And you need concretely, you need N minus T nodes could be, for example, depending on how T is chosen, one third of the nodes. There's little incentive to do so, fortunately.
00:12:24.406 - 00:12:47.330, Speaker A: And it's potentially mitigatable by the builder. So the builder could if that were to happen, the builder could simply send the plain text body to the proposer, assuming, of course the committee doesn't collude with the builder. So this attack we're not so scared about, of course the more dangerous one is mev stealing.
00:12:47.330 - 00:13:06.498, Speaker A: This would look like basically that the committee now decrypts a block they're not supposed to and before they're supposed to do that. And that's very scary. But fortunately this is very difficult because it requires more than the threshold of nodes to attack more than two thirds of all nodes.
00:13:06.498 - 00:13:28.410, Speaker A: For example, there's high incentive for it because they now can make money out of that by, of course, stealing the mev. And it's potentially we were very happy when we found this out, potentially we can slash for this kind of attack. But as we will see later, there's also a counter mechanism.
00:13:28.410 - 00:13:59.740, Speaker A: So it's not all perfect. So how would the slashing work? The idea is basically that an honest committee member will only release a decryption key share when they see the signature for a block header, which means we can slash them basically by providing a decryption key share. And when they cannot respond with a corresponding block header, we slash them.
00:13:59.740 - 00:14:27.940, Speaker A: So this works, but it requires an informant among the attackers. So basically, if the committee of attackers would collude perfectly and not leak any information outside, then this would never be detectable even. But if there's even one node who gets access to these shares and releases them to the slashing contract or to the public, then this slashing mechanism might work.
00:14:27.940 - 00:14:51.974, Speaker A: And I think that's not a very strong assumption because if the committee is large, imagine there's like 200 nodes in that committee, making sure that there's not even one good guy among the attackers is very difficult. But unfortunately there's, as I said, a counter strategy. The committee could select a coordinator and now they would only send the decryption key shares to this coordinator.
00:14:51.974 - 00:15:14.610, Speaker A: And now, of course now this coordinator could slash everyone, but they can opt into another slashing contract. They could say I get slashed whenever any of the keepers or any of the committee members get slashed. And now this is now a situation of basically mutually assured destruction.
00:15:14.610 - 00:15:25.398, Speaker A: Both the attackers can slash the coordinator and the coordinator can slash the attackers. But no one would benefit. They would all basically punish themselves.
00:15:25.398 - 00:16:03.254, Speaker A: So this might be a mechanism to keep themselves honest, which basically means that this slashing mechanism might not work as well as we had hoped. But fortunately, it's still a very difficult attack to pull off because you need so many collusion in this, so big collusion in the committee. So a big question now is, of course, who's in the committee? The process, how such a committee would be formed would basically be permissionless like similar to the situation in Plane Mev Boost.
00:16:03.254 - 00:16:14.210, Speaker A: Anyone can launch a relay now. Anyone could propose a committee. The only challenge would be, of course, to convince builders and proposers to accept this committee.
00:16:14.210 - 00:16:30.066, Speaker A: I think in practice, a good solution would be to start with trusted community members or organizations similar to these organizations that would run relays today. For example, flashbots boxroute. Maybe the Ethereum Foundation.
00:16:30.066 - 00:17:00.900, Speaker A: They could form a committee that would in the beginning be very small, but it could grow over time to make it more secure. And at some point we could switch basically from hard coding the members to an open process and then the proposers and builders would only have to trust the process and not the individual members. Yeah, but it's a bit of an open question how this would work, but I think it's easy to figure out over time.
00:17:00.900 - 00:17:42.480, Speaker A: One important thing to look at is latency. So the reason is that ideally, blocks leave the builder as late as possible because it means that the builder has more time to collect transactions and more time to optimize the order of those transactions and eventually, as a result, extract more mev. So for both for builders and proposers, it's beneficial if this process between the builder sending the block and the proposer, signing it and sending it to the network is as short as possible to give people a lot more time before.
00:17:42.480 - 00:18:01.190, Speaker A: And another reason why low latency is nice is because it lowers the confirmation time for users. So how does latency look in both Mev Boost and in this adjusted Mev Boost proposal? So, at the top here is plain Mev Boost. We can just simply count the number of interactions.
00:18:01.190 - 00:18:25.530, Speaker A: First the builder sends the block to the relay one, then header to the proposal two, signature to the relay three, and body to the proposal four. So it's four messages, basically. And if we compare this to this new proposal, we will only have three interactions, basically header and encrypted block to the proposal, signatures to the committee, and key shares from the committee to the proposer.
00:18:25.530 - 00:18:42.286, Speaker A: Just free. So it looks like it might even be lower, but unfortunately they're not very comparable because if we don't have the relay is also like a network relay. It's a centralized entity that can open direct connections to all the participants in the network.
00:18:42.286 - 00:19:19.774, Speaker A: Whereas in our case, we need basically peer to peer gossip broadcasts, which might be lower, might be much slower. So that's another kind of open question we have. How slow are these broadcasts in practice and how does it compare to plain mev boost with direct connections? How would we implement it? We already implemented the Threshold Encryption Committee for our other projects for Mev Minimization, so that part would already be done.
00:19:19.774 - 00:19:39.414, Speaker A: What would be missing would basically be integration into builders and proposers and the slashing contracts. If we would implement it, we could probably reuse the existing APIs that have been already defined for the relays in Mev Boost. So we would probably not need any protocol changes.
00:19:39.414 - 00:20:09.642, Speaker A: But we would have to implement these kind of proxy contracts that look like a relay to build and proposer, but perform all these networking and slashing steps. Yeah, so in summary, what we proposed here is adding a Threshold encryption mechanism to get rid of relays and to remove trust in them. And all in all, increase security of the protocol at the cost of latency.
00:20:09.642 - 00:20:25.426, Speaker A: Probably it's implementable today for Mev Boost, but hopefully also informative for future proof of PBS proposals. You can read more on it on ETH research. We've got a proposal.
00:20:25.426 - 00:20:32.680, Speaker A: There in text form and also check out our other projects if you're interested in mev minimization. Thanks.
00:20:43.660 - 00:21:23.780, Speaker B: Hey there. Sorry if I missed this, but how do the in the decryption machinery, how do the committee members agree or come to consensus on the encryption key together such that you don't have, like, a nefarious user who basically just front runs the other ones and says, this is the encryption key and this is the decryption key? Such that if that person is also running a is the proposer, they could effectively know immediately if they're able to. Basically if they are this front runner, they give the encryption key that they already have the decryption key for.
00:21:23.780 - 00:21:33.368, Speaker B: They give that to the builder and then when the builder sends over the encrypted block data they are able to decrypt it as the proposer. Does that make sense?
00:21:33.454 - 00:22:01.132, Speaker A: Yes. I think if I understand correctly, basically this committee generates a key as a whole and they can just sign it. Basically they can sign the key and then of course proposers and builders first have to select a committee so they can then check or authenticate basically the key against them to make sure that it was created by them.
00:22:01.132 - 00:22:09.556, Speaker A: And as I said, this only has to be done once. So it's not a process that has to be repeated very often. And then the decryption key can of course be validated against the encryption key.
00:22:09.556 - 00:22:24.340, Speaker A: So that's then not a problem anymore. So basically signatures. Cool.
00:22:24.340 - 00:22:25.250, Speaker A: If there's no other questions.
