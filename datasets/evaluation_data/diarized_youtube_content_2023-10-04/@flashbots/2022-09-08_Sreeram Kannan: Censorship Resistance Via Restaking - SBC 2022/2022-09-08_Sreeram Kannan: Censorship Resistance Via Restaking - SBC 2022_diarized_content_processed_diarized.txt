00:00:00.650 - 00:00:22.700, Speaker A: I'm sriram from eigen layer. Today I'm going to talk about censorship, resistance and decentralized relay via restaking. Let me get started.
00:00:22.700 - 00:00:45.400, Speaker A: What we're going to propose today is a mechanism to do mev management using Eigen Layer. I'll explain what Eigen Layer is as we go on. This talk is joint work with Shawikteb and Gautam Anand who are both at the Eigen Layer project.
00:00:45.400 - 00:00:54.680, Speaker A: The rest of the Eigen Layer team is also shown here. And special thanks to Dankradfaced and Alex Obadia for feedback. That improved the talk.
00:00:54.680 - 00:01:38.710, Speaker A: All right, let's start with what is mevboost and why we want to improve it. So the core aspect of mev boost is to ensure that proposers stay decentralized the core aspect of mev boost is to ensure that proposers stay decentralized while being able to extract mev at the best possible market rate. And how it accomplishes it is by having three different players block builders who collect transactions and create new permutations of these transactions in which they can potentially extract mev.
00:01:38.710 - 00:02:02.330, Speaker A: There is another entity called the relay which takes transactions from builders and helps them send it to the block proposers. Block proposers are what we would normally call validators in the protocol. So in the Ethereum protocol, there is a bunch of nodes who have staked and they are able to propose blocks that's a block proposer.
00:02:02.330 - 00:02:25.510, Speaker A: So the three entities are block builders who are creating the blocks relay who's helping connect the block builders with the proposers and the block proposers. The relay itself is a doubly trusted entity. The relay is trusted by the block builders and the relay is also trusted by the block proposers.
00:02:25.510 - 00:02:42.010, Speaker A: Okay, I'll explain how mevboost works. Now. Block builders take transactions from either public mempools or private order flow that they may have and create blocks.
00:02:42.010 - 00:03:08.450, Speaker A: They send such blocks here, called execution payloads to the relay. The relay collects these blocks. They check whether the bid of how much mev the builder is willing to propose to the proposer is it computed correctly? Is the block valid? And after checking these two conditions, the relay stores the block.
00:03:08.450 - 00:03:25.800, Speaker A: Okay, till now, the block builder has not revealed the block to the block proposer. Why we haven't done this is if the block builder reveals the block to the block proposer, the proposer may engage in mev stealing. They look at the block and say, hey, here is a nice mev opportunity.
00:03:25.800 - 00:03:36.234, Speaker A: Let me catch the mev instead of giving it to the block builder. You don't want such behavior in the market. So you don't directly expose the block from the builder to the proposer.
00:03:36.234 - 00:03:49.490, Speaker A: So the relay is acting as an escrow. It's acting as an escrow. The block comes to the relay and the relay only sends the header to the block proposer.
00:03:49.490 - 00:04:03.182, Speaker A: The block proposer blindly, just looking at the header. And the bid selects the most valuable bid. Why is the block proposer able to do this? It trusts the relay.
00:04:03.182 - 00:04:22.170, Speaker A: The block proposer trusts the relay. So the block proposer says okay, if the relay says this has 20 ETH mev which is being paid to me, that's pretty good, so I'm going to take it. The block proposer signs the header and returns it back to the relay.
00:04:22.170 - 00:04:48.542, Speaker A: The relay says okay, now the block proposer has committed to signing on this block because it has signed on the header, I am going to send the block to the block proposer. Proposer says okay, now I got the block, I can send it to the network. So all of this activity is happening off protocol, right? It is not happening inside the Ethereum protocol, it is happening off protocol.
00:04:48.542 - 00:05:05.082, Speaker A: As far as the protocol is concerned, somehow the block proposer proposed the block. That's all the protocol knows. Okay? And that's the core architecture of mev boost it is added on to the core path of how blocks are being made.
00:05:05.082 - 00:05:21.440, Speaker A: It is optional. Block proposers can choose to exercise this market, may not even accept the highest bid, may only choose to accept bid from certain builders who operate in certain ways. All of these are parts of the degrees of freedom for what the block proposer does.
00:05:21.440 - 00:05:47.126, Speaker A: Okay? So before we go there, let's first see what is the benefit of the system. The benefit of the system is any block proposer can participate in this market and therefore get access to the best possible mev opportunities. Since all proposers have access to roughly the same mev opportunities, they are all making money at the same rate.
00:05:47.126 - 00:06:11.230, Speaker A: And this keeps block proposers decentralized because you don't have to collude, you don't have to go and be in cahoots with the block builders in order to actually make money. You have a fair, transparent, open market on which you can actually do this transaction. This is very important because one of the core value propositions of Ethereum is decentralization.
00:06:11.230 - 00:06:37.860, Speaker A: And what does decentralization useful for? Censorship, resistance. Because if you do not have a decentralized committee you cannot be sure if you do not have a decentralized network you cannot be sure that transactions are all getting included as they came in. However, there is a problem.
00:06:37.860 - 00:07:11.170, Speaker A: Mev boost ensures that block proposes can remain decentralized but mevboost does not ensure that the decentralized proposers can exercise any agency. So suppose I'm a block proposer and I get a bid from the relay. The block proposer cannot exercise an agency to add on few transactions or do anything else after it has signed off on the header.
00:07:11.170 - 00:07:25.718, Speaker A: The block proposer continues to have agency to not participate in the market. They can say no, I don't want to do mev boost, I'm just going to simply propose transactions that came in the public mempool. They can do it.
00:07:25.718 - 00:08:07.410, Speaker A: But what they will be giving up is the economic incentives and the economic opportunities available in the MAV market. They have to choose between the economic opportunity and maybe their ideological position. So what this does is it makes it possible, even though the proposers remain highly decentralized due to the fair and open market in which they can participate in the Mev opportunities, block builders and relays are fewer, far fewer in number and may be located in jurisdictions which are extremely technologically advanced.
00:08:07.410 - 00:08:48.178, Speaker A: So it is possible for the few block builders and the relays or even just all the block builders or all the relays to fundamentally engage in censorship. Whether such censorship occurs for extortion, for regulatory reasons or otherwise, there is a possibility that such censorship can occur. So why did this limitation arise in the first place? Why didn't we design Mev Boost to make sure that transactions can be added even after you receive a bid? Maybe you receive most of the block from the block builder and you can still add a few transactions at the end.
00:08:48.178 - 00:09:12.950, Speaker A: Why wasn't this possible? It's not that this was not possible because the team didn't think carefully through this. It was not possible because Mev Boost was piggybacking on a core feature of Ethereum slashing. What is slashing? So if you have a given slot, there is a block proposal for each slot.
00:09:12.950 - 00:09:37.798, Speaker A: If a given block proposer engages in signing two headers for the same slot, such a block proposal can be slashed. This is a core protocol feature of Ethereum. So equivocation, which is just the fact that you're signing two different things at the same block number is considered penalizable in Ethereum.
00:09:37.798 - 00:09:58.310, Speaker A: So the whole Mev Boost architecture had to work very hard to shoohan itself into the one slashing condition available. If you double sign a header, you will be slashed. That's the root of trust that Mev Boost is piggybacking off of.
00:09:58.310 - 00:10:29.878, Speaker A: That's why the relay released the block after getting assigned from the header. Because if after that, like for example here, if you get a block header from the winning builder and you go ahead and propose a completely different block header, you will get slashed. So this is the core trust that Mevboost was able to extract.
00:10:29.878 - 00:11:18.590, Speaker A: And since this trust is not programmable, since this trust is non programmable, you just have the one slashing condition of Ethereum, if you double sign a block header, you will get slashed. So that is why Mevboost, which needed to piggyback on the slashing condition, could not make it more flexible to actually perform block building. Okay, so can we somehow modify this architecture to add content to the block to enable the proposer to add content to the block without requiring a governance upgrade on Ethereum? Of course, if Ethereum upgrades the protocol, then clearly it can incorporate any feature that we're talking about into the protocol.
00:11:18.590 - 00:11:38.742, Speaker A: PBS proposer builder separation is a proposed path for integration of some of these Mev Boost ideas and powerful censorship resistance into Ethereum. What we are going to talk about is can we do something in the meanwhile? Protocol upgrades take time. They have to be casually vetted to do this.
00:11:38.742 - 00:11:56.566, Speaker A: I'm going to introduce a concept that we've been working on also the name of our project Eigen Layer. Eigen layer is the ethereum restaking collective. What does it mean? You have block proposers are staking.
00:11:56.566 - 00:12:14.622, Speaker A: Normally in Ethereum, they take their money 32 E and put it into the Ethereum staking Smart Contracts. When they stake their money in the Ethereum staking contracts, you can specify who is allowed to withdraw this money. And this is called a withdrawal credential.
00:12:14.622 - 00:12:38.266, Speaker A: And you can set the withdrawal credentials to the Eigen Layer Smart Contracts which are eigen layer has a series of smart contracts on Ethereum. You can go and set your stake to be withdrawable by the Eigen Layer Smart Contracts. What you're doing is you are fundamentally transferring some power instead of you controlling the power to withdraw whenever you want.
00:12:38.266 - 00:13:13.000, Speaker A: Now, Eigen Layer Smart Contracts have the power to withdraw and what you can do inside the Eigen Layer Smart Contracts is specify which other services that you're opting in to provide. Eigen Layer is a mechanism by which you can reuse your stake, which you have staked in Ethereum to do other things to provide validation for other kinds of services. And when you opt in, you can specify which other sets of services, which subset of services that you want to actually provide service for.
00:13:13.000 - 00:13:39.470, Speaker A: Okay, that's the context. Why is this relevant to what I was talking about? Eigen Layer can be thought of as a meta slashing protocol or a programmable slashing protocol. It lets block proposers, stakers validators, take an opportunity to opt into new services and potentially get slashed in other ways if they violate their commitments.
00:13:39.470 - 00:13:55.746, Speaker A: Slashing is a mechanism by which we can get credible commitments. You say something and you don't hold to it, you will get slashed. Okay, so what is the core idea that we are trying to do? Essentially, it's very simple.
00:13:55.746 - 00:14:23.558, Speaker A: We want to make a block where there is a portion of the block which is sent by the builder. There is another portion of the block which the proposer creates. So you get some bid, you accept the builder part, you sign off a special message saying if I violate including this as the prefix as the first portion of my block, then please slash me on Eigen layer.
00:14:23.558 - 00:14:36.142, Speaker A: That's what you can opt into. And what that means is you now have freedom to include whatever other transactions you want in the rest of the block. So let's just go over the flow again.
00:14:36.142 - 00:14:46.658, Speaker A: Block builders come up with a block. They send the builder part to the relay. The relay basically takes some kind of a commitment of this builder part.
00:14:46.658 - 00:15:15.402, Speaker A: It stores the transactions and sends the merkel route of this builder part to the block proposer. Block proposer sends, selects the highest valuable bid. Here we have another feature on Eigen Layer is Mevboost Plus, which is that this block proposer can also commit to what we call as a backup block in case some assumptions are not met.
00:15:15.402 - 00:15:40.222, Speaker A: The block proposer is saying, if I don't propose what I was supposed to propose, here is an alternative that I've pre committed to, and I'll propose this pre committed alternative. So it has a backup block in case some of the process fails and it signs the merkel route of the builder and the commitment to the alternative block. It sends this to the relay.
00:15:40.222 - 00:15:58.822, Speaker A: It says, okay, now I have some assurance that the block proposal is going to behave. How does it have the assurance? Because it has this signed message from the block proposer committing that they will include this builder portion. So now they send the builder portion out.
00:15:58.822 - 00:16:12.606, Speaker A: The block proposal takes it and says, okay, I got the builder part, now I can create the rest of the block and send it out. So fundamentally, back to the two part architecture. There is a builder part and a proposer part.
00:16:12.606 - 00:16:41.830, Speaker A: And essentially you are committing as a block proposer that you're going to include the builder part and you can add on whatever things you want after the builder part. You can ask the question, now, how much should be the builder part and how much should be the proposer part? Should it be 50 50? It should be 80 20. There is a very nice answer to this, which we got from Dankrad, who noticed that we do not have to commit to a prefixed ratio.
00:16:41.830 - 00:16:59.710, Speaker A: You say, let the builder build whatever size they want. Let the builder build whatever size of the block that they want. The proposer can add on an arbitrary if there is any space in the block, the proposer can add on to the rest of the builder part.
00:16:59.710 - 00:17:18.194, Speaker A: You may wonder, why would the builder not fill the block all the time? Because it may be profitable for the builder to do it. But the reason they will not be able to fill the block all the time is how the gas fee structure works. In Ethereum, due to 1559, the fee keeps escalating every time the block is full.
00:17:18.194 - 00:17:30.006, Speaker A: So if every block was full, the price would go to infinity. So blocks will not be full. They will be equilibrating around half the block size, half the maximum block size.
00:17:30.006 - 00:17:47.070, Speaker A: So there is always extra space, at least on an average, there is extra space in the block. And proposers can exercise the freedom to sneak in new transactions into the block. Okay, so that is mevboost plus.
00:17:47.070 - 00:18:10.162, Speaker A: And what we get from this is censorship, resistance. Fundamentally, what we're getting is block proposers can exercise their agency to include whatever transactions that they want in addition to the transactions that the builders and relays are giving them. All right, now we saw this, but there are also other things.
00:18:10.162 - 00:18:27.898, Speaker A: I'm going to skip past it, but the main thing that we do not have is we are still trusting the relay. Relay is still a central point. While the relay is not a point of failure for censorship resistance, the relay is still trusted for some of the other things.
00:18:27.898 - 00:18:51.054, Speaker A: For example, the relay is trusted for data availability. Can we somehow get rid of this? Can we decentralize the relay? Instead of having a single relay, can we have a decentralized escrow? The relay was performing two important functions. It was certifying to the builder that they are private.
00:18:51.054 - 00:19:28.250, Speaker A: Their block remains private till the proposer has signed off on it. It was also certifying to the block proposer that the block remains available. Can we somehow do this in a decentralized escrow? So what the block builder does is it takes its block, creates some kind of like a secret shared version of this block, splits it up into many chunks, and encodes it in such a way that no one chunk exposes information about this block and sends it to a decentralized escrow.
00:19:28.250 - 00:19:44.610, Speaker A: There are many nodes. It sends one chunk to each of these nodes. So each of these nodes then sends back a signature saying that they have received a share corresponding to this commitment.
00:19:44.610 - 00:20:16.510, Speaker A: That goes back to the block builder, who then signs off on that commitment, saying that, hey, I have a certificate from the Data Availability Quorum that I have dispersed my data to this quorum. You take an aggregate signature and send it to the block proposer. Block proposer then says, okay, I'll choose the highest possible bid I can get, which also has a certificate from the DA layer, and I'm going to send a signed message back to the DA layer.
00:20:16.510 - 00:20:37.086, Speaker A: Once the DA layer sees the Data Availability layer, sees the signed message for a specific header, they then release that particular block. They release the chunks of that particular block. It's secret shared, which means everybody holds some portions of the block.
00:20:37.086 - 00:21:01.206, Speaker A: But together, once you get all the different chunks, you can reconstruct the entire block. And then the block proposer goes ahead and proposes it. Okay? So essentially what we did is we took this one entry called one entity called the relay and fragmented it into many entities who have to work together in order to break these guarantees.
00:21:01.206 - 00:21:15.626, Speaker A: So we call this Mev Boost Plus Plus, which basically has two features. It brings censorship persistence back to proposers. It allow proposers to add content to the block.
00:21:15.626 - 00:21:35.510, Speaker A: But it also makes sure that you do not have to trust a single entity, a relay, to actually perform this task. But we do need a new entity called a Data Availability layer. Where is such a data availability layer? We have built one called Eigenda.
00:21:35.510 - 00:21:55.530, Speaker A: Eigenda is an ethereum restaked data availability layer built on Dong Sharding. Dong Sharding is the data availability mechanism proposed for upgrade into Ethereum. What features this data availability quorum has It is fundamentally built on Eigen layer.
00:21:55.530 - 00:22:15.938, Speaker A: So it is Ethereum stakers who are actually running this Data Availability service. It is a hyperscale data availability layer. You can write data at a rate of 15 megabytes per second, which is much higher than any existing service, as well as proposed upgrades.
00:22:15.938 - 00:22:30.700, Speaker A: In Ethereum, it has very low node requirements. Even though the system achieves 15 megabytes per second, each node only needs to touch and download 0.3 megabytes per second.
00:22:30.700 - 00:22:47.700, Speaker A: So this is because remember, in the previous picture, each node is not downloading the entire data. It is only downloading a secret shared chunk. Because each node is only downloading a small chunk, you can actually do not need each node to download everything.
00:22:47.700 - 00:23:18.710, Speaker A: This DA layer is also native network latency because you are fundamentally relying on you have to send the chunks to them and you get the signature back from the network. This Data Availability Quorum does not perform any consensus ordering or other extraneous things. It only does Data Availability guarantees and it has very low cost basis.
00:23:18.710 - 00:23:34.474, Speaker A: The total amount of cost incurred in storing a given data in Eigenda is just two times a single node downloading the data. It's just two times a single node downloading the data. Extremely low cost basis.
00:23:34.474 - 00:23:48.414, Speaker A: Even though it's a decentralized system, we have very low cost basis. And finally, we need to support shamir secret sharing, which people do. Okay, so just going back to this picture, I just want to say why you need some of these features.
00:23:48.414 - 00:24:00.354, Speaker A: Because every block builder is getting signatures from the quorum. You need this Data Availability layer to be working at high performance. Every block builder is committing data into the Data Availability Quorum.
00:24:00.354 - 00:24:18.590, Speaker A: So this needs to be done at low cost. Otherwise you will be paying a huge amount of cost because you're storing a lot of builders data which never ever gets used. So Eigenda is a perfect mechanism for doing this, integrating it with mev boost.
00:24:18.590 - 00:24:32.770, Speaker A: Okay, so that concludes the talk. You can use Eigen layer to build programmable slashing mechanics on a variety of different systems. This is just a starting point and an initial proposal.
00:24:32.770 - 00:24:47.506, Speaker A: A lot of people have very interesting ideas today. Morning Vitalik mentioned how you can use Eigen layer to actually do distributed block building. You can have many builders build different portions of the block and integrate them on Eigen layer.
00:24:47.506 - 00:25:05.760, Speaker A: So there are a variety of new ideas that we can all explore together as a community. I invite you all to participate in this collective thank you. Any questions in the couple of minutes I have left?
00:25:10.730 - 00:25:17.030, Speaker B: Thank you very much for the talk. I wonder how your Data Availability layer guarantees availability.
00:25:18.890 - 00:25:34.170, Speaker A: If you assume a majority are honest and the data is dispersed in such a way that even if half the nodes go down, the remaining half of the nodes have enough information in the erasure code. It's a mixture of erasure code and polynomial commitments.
00:25:34.610 - 00:25:38.880, Speaker B: And what if they are not sending the data even though they have the data?
00:25:40.290 - 00:25:56.318, Speaker A: You are relying on a majority honest assumption. If a majority of the nodes are honest, they will send the data. You can relax this assumption from a majority being honest to only 10% being honest by adjusting their issue code rate, which we allow in our layer.
00:25:56.318 - 00:26:06.470, Speaker A: If you assume a 10% of the quorum is honest, you will have the data available. But you do need that assumption. Without that assumption, you do not get any guarantees.
00:26:07.210 - 00:26:10.354, Speaker B: Okay, so they can be bribed and not share data?
00:26:10.412 - 00:26:14.186, Speaker A: Yes. That's why it needs to be a decentralized quorum. Yes.
00:26:14.288 - 00:26:15.146, Speaker C: Okay, thanks.
00:26:15.248 - 00:26:16.060, Speaker A: Thank you.
00:26:16.670 - 00:26:19.322, Speaker C: Hello. How's it going?
00:26:19.376 - 00:26:20.330, Speaker A: Hi, Logan.
00:26:20.670 - 00:26:26.400, Speaker C: Hello. What's the plan to ultimately scale past 15 megabytes per second?
00:26:26.930 - 00:26:36.686, Speaker A: Oh, our system basically gets N over two times the per node bandwidth. We have 100 nodes. 100 by two is 50.
00:26:36.686 - 00:26:45.042, Speaker A: 50 times 0.3 megabytes per second is 15 megabytes per second. So that's how we get 15 megabytes per second.
00:26:45.042 - 00:26:59.714, Speaker A: As we scale this to more and more nodes, you will get more and more scale. There are some limitations because we have to write these signatures on Ethereum. We use BLS aggregate signatures and some more upgraded methods.
00:26:59.714 - 00:27:10.410, Speaker A: But there is a limit on how much signature aggregation we can do. So these are extraneous to the core data availability layer. These are Ethereum gas constraints that we have to deal with.
00:27:10.480 - 00:27:12.058, Speaker C: That makes sense. Thank you.
00:27:12.144 - 00:27:28.238, Speaker A: Thank you. Hi. Can you talk about the extra returns from Staking on eigen layer and where they come from? Is it just from the extra transactions that you can include? Is that the main source? Each of these new features that people build have some utility.
00:27:28.238 - 00:27:38.834, Speaker A: Like for example, the Mev boost. The builders may pay a small fee for every time they get a commitment. So that's the fee that goes to the e.
00:27:38.834 - 00:27:50.102, Speaker A: Three stakers who are working on eigen layer to provide data availability. For example, each new service that is built on top of eigen layer can have its own economic model. You may pay in a different token.
00:27:50.102 - 00:28:02.862, Speaker A: It's a free market, so stakers can opt in to different risk reward portfolios, thus expressing their heterogeneity. Cool. Thank you.
00:28:02.862 - 00:28:17.304, Speaker A: Thank you. Any other questions? Okay. If not, I'll conclude just by saying one more thing.
00:28:17.304 - 00:28:36.748, Speaker A: We had a design also for how to incorporate something like a shutter network protocol for including threshold encrypted transactions in addition to so maybe I'll just show one picture. Just this picture is enough. You can have a block which has three different portions.
00:28:36.748 - 00:29:01.832, Speaker A: One portion which comes from free market builder, another portion which is a sandwich protected portion from a threshold encrypted quorum like the one shutter network is building, and a proposer freedom portion where a proposer can propose arbitrary transactions. So there is a variety of designs we can build on top of these core ideas. Looking forward to see how we can work together.
00:29:01.832 - 00:29:02.230, Speaker A: Thank you.
