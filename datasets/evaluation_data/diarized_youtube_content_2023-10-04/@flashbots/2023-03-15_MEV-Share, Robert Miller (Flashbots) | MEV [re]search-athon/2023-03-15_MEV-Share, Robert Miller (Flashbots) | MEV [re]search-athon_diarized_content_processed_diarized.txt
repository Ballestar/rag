00:00:03.050 - 00:00:49.580, Speaker A: So this is a talk that I gave yesterday on commitments and privacy in the mev supply chain. It talks a little bit about our design for an orderful auction at Flashbots, but it's more about how we think about the mev supply chain and how we think about keeping it specialized, keeping it permissionless, keeping it efficient. So more about sort of system design rather than our ofa specifically. And I'll move over here if you're interested in looking on with my slides. I like a good mev specialist copied James and I have a tiny URL, so it's tinyurl.com slash mevsc like supply chain or smart contract HH like hard hat or hackerhouse. So let's get started.
00:00:49.580 - 00:01:29.554, Speaker A: I assume at this point you all have seen the mev supply chain like several times. So I'm not going to reintroduce the idea. But roughly this is what we would like to see in the mev supply chain, which is to say this flat supply chain where you have specialization across many different roles within the supply chain. So if you are a Validator, you don't also need to be a block builder or also need to be a searcher. You can just play the role of a Validator proposing blocks to the network. And we want that because the job to be done for a Validator and a builder are very different. If you are a Validator, ideally you just are able to run software off the shelf.
00:01:29.554 - 00:02:24.278, Speaker A: You don't need really complicated kind of searching infrastructure, you don't need the infrastructure to simulate merge bids, you don't need connections with searchers, all these things because that would raise the bar of becoming a Validator much higher compared to what it is today. So we want the supply chain that's flat, we want specialization of roles between them and we want many different parties at every different part of the supply chain to be playing each role and them to be competing to provide value across the mev supply chain. Lastly, we don't want any enshrined or privileged actors so that doesn't need Flashbots, no Flashbots and enshrinement, no enshrinement of any other sort of central third party in this supply chain. And the alternative is mev Dystopia, where the user, instead of interacting with this modular supply chain that's flat with many different specialized actors, is interacting with sort of one entity or a small group of entities that's vertically integrated and owns.
00:02:24.294 - 00:02:25.898, Speaker B: The whole stack end to end, from.
00:02:25.984 - 00:03:28.014, Speaker A: Validating to searching and maybe even the wallet. And again, I'm kind of rushing through this because I assume you all have engaged with this content a little bit before. But we don't want this because it gives a place where censorship can be introduced, where rent can be extracted and it's opaque and kind of breaks down a lot of the properties that we care about in public blockchains. So how do we get to mev utopia? How do we prevent from mev mega fund black box from happening and make sure that we have this kind of modular specialized supply chain with a lot of competition in it. And the convention that we have at Flashbots is that we need to enable trustless collaboration between different parties within the Mev supply chain and allow for the maximum amount of competition to happen at every step in the way. This is quite hard because parties don't naturally trust each other in this supply chain and I have the example of Mevboost and sort of why collaboration is difficult between builders and Validators. In Mevboost, a Validator wants to propose the blocks that has the most profit inside of it.
00:03:28.014 - 00:04:54.774, Speaker A: But again, we want this world where a Validator doesn't necessarily need to have the sophisticated infrastructure to figure that out themselves. They would like to outsource that job to a specialized party, a block builder who has that infrastructure. But if a Validator can see the builder's blocks in the clear, they can steal mev, they can front run users that are inside of it, right? So if you have clear text kind of sharing of builders'blocks with Validators, the consequence is builders are sharing their blocks with Validators that they trust pure lido, rocket pool, coinbase finance, et cetera of the world and not parties like solosakers, your small folks of the world. And this is a bad equilibrium because then you have differentials in the amount of money that our large stakers are able to make compared to solo stakers and it's quite a bit of money, it's like 100% extra APY from using meth boost. So what you should take away from this is that for these two parties to collaborate together, builders need privacy, they need their blocks not to be seen by Validators before they're included on chain. So what happens if we introduce privacy into this system? If you imagine that builders are only sharing block headers as an example with Validators in that case, then Validators have trouble trusting builders because builders could lie to Validators about the contents of their block if they're only seeing the block header. So a builder could construct a block that's not Valid, they could lie about the profit and they could withhold block bodies too if Validators do sign the header of this block.
00:04:54.774 - 00:05:37.762, Speaker A: So privacy is not alone, it's your necessary condition, but it's not sufficient. Builders need privacy but Validators need commitments from builders in order to feel comfortable collaborating with builders and the builder needs a commitment from the Validator that they are actually committing to a block before they're willing to withhold the body to. So you need these dual things. First, privacy, but also credible commitments. And how we address this in mevboost with this protocol that uses a trusted third party called a relay. We're looking to decentralize in the future that acts as a commitment device that both builders and Validators are using. And it also helps manage privacy in sort of three easy steps.
00:05:37.762 - 00:06:32.906, Speaker A: So first, builders build blocks and they send them to the relay. This third party sitting in the middle of builders and validators. The relay will leak a little bit of information to validators so they share the block header and its profit and the validator will commit to the most profitable header that they get from a relay and do that by signing the header and returning it to the relay. After that the relay will reveal the block body. So it's this kind of simple two step commit reveal process that uses the relay as a commitment device in the middle. And why does this enable these two parties to work together? Sort of what are the properties that we're looking for in this and why are they useful? So first we have privacy. So again, builder blocks are hidden until the block header is signed and that means that builders are comfortable with their block headers being shared with anyone because they know that their mev can't be stolen, users can't be front run inside of it.
00:06:32.906 - 00:07:20.550, Speaker A: But validators have this guarantee which is really interesting around data revealing. So they know if I sign this header the block body is actually going to be there, it's actually going to be revealed and they have enough information, it's not kind of absolute privacy, it's selective data sharing too. They have enough information for validators to make competent decisions to know which header to sign, but not enough to front run this kind of interesting middle ground. And lastly, you are using builders and validators are using this party, the relay to commit to blocks. So first, builders by submitting blocks, second, validators by submitting signed headers. And the net result is that any builder is comfortable submitting blocks to the system, any validator is comfortable outsourcing blocks to it too. So you get this permissionless quality and we keep the mev supply chain unbundled.
00:07:20.550 - 00:08:21.782, Speaker A: And we asked ourselves after the merge at Flashbots, what's the next step, what do we want to focus on next? What part of the mev supply chain do we think needs unbundling the most? And the answer that we came to was we needed to focus on the relationship between wallets and searchers or searchers and users too. So focus on order flow and users and ensure that that part of the supply chain could interact trustlessly and it didn't centralize or vertically integrate. And it's from the simple premise users create mev, searches capture that mev today, can we create a system that lets users capture mev instead and it's permissionless ideally. So we further unbundled the supply chain and the way that rather first. So why is that difficult? Because if users are sending their transaction in the clear to searchers, you can get front run. Your transaction can be messed with in multiple different ways, but even if you trust the searcher that you're submitting your transaction to, there's no way necessarily for you to internalize that mev. Just sending assigned transactions.
00:08:21.782 - 00:09:06.294, Speaker A: You don't have bargaining power in the system. And if you do even manage to get a searcher to pay you some value in your bundle, some sort of relationship, there's no way to enforce that payment downstream, the mev supply chain. So imagine the searcher is willing to pay the user, but the builder front runs the searcher even still. So you need some way of enforcing payments even beyond the searcher user relationship. These kind of three issues are making it difficult for users and searchers to collaborate. And the solution ends up looking somewhat like Mapboost, and it uses a lot of similar properties, which is what I want to get across you today. We again introduce this trusted third party called the Matchmaker that both the users and searchers use to collaborate.
00:09:06.294 - 00:09:57.206, Speaker A: And the user submits their transaction to the Matchmaker, who again selectively shares information with searchers who can use that information to construct partial bundles. This is something like the Matchmaker saying, hey, a user here wants a swap on the ETH USDC pool. I'm not going to tell you how much, Mrs. Searcher, but I'm just going to tell you there's someone that's interested in swapping on ETH USD. And the searcher will reply with a backrun or intended background and say, hey, Matchmaker, please place me behind this user who's interested in the ETH USDC pool. I don't know exactly what their transaction is, but I'm optimistically trying to backrun it with this partial bundle. The Matchmaker will fill partial bundles with the user's transaction and send it on to the builder if it extracts any mev with a condition that the builder needs to pay the user back the mev that it extracts.
00:09:57.206 - 00:10:27.554, Speaker A: And so, again, this system uses a lot of the same kind of properties and concepts that Mapboost does. It relies at the core on privacy. User transactions are hidden from searchers, which means they're comfortable with interacting with any searcher on the other end of the Matchmaker. But it's not absolute privacy, it's programmable. You have selective data sharing. Just enough information is shared with searchers to help them optimize, but not too much to get front run. And finally, you're using this middle party, the Matchmaker, for commitments across the mev supply chain.
00:10:27.554 - 00:11:08.706, Speaker A: So searchers are committing to certain backgrounds optimistically, and you're using these bundled validity conditions to ensure users are paid their mev. And the net result again, is this unbundling of the mev supply chain, where users are comfortable submitting their transactions and any searcher can interact with the system and extract mev. But it's many of the same kind of concepts and ideas as mevboost. This is what the mev supply chain looks like after this is introduced. So we now have this interface between Wallets and Searchers or user and searcher too. We have this interface between builders and validators that's trustless. But you have these gaps clearly and there's also obviously more work to be done.
00:11:08.706 - 00:11:45.610, Speaker A: So in particular, I think an important gap here that we're going to be focusing on at Flashbots is the interface between a searcher and a builder. Because right now, searchers with their bundles have to trust builders not to unbundle you, not to front your mev. And that limits the amount of places that you're comfortable sharing your order flow with. And you have the same trust assumption in mevshare as well. And you actually heard this earlier from Danning in sort of conversations around where to send transactions to and which builders. Ideally, we have a system where anyone is comfortable sharing a bundle with a builder and there are no trust assumptions in that process. You have permissionless, access to order flow.
00:11:45.610 - 00:13:12.306, Speaker A: Call it order flow sharing. At Flashbots, you can do this with SGX. We just announced yesterday that we have our builder inside of an SGX we're running on Sepolia. We're lending actual blocks on the Sepolia testnet with an SGX builder which is pretty cool and maybe you can do it with crypto economics as well. These are all sort of potential paths for this Nebulous thing that I'm calling Mev Build between the searcher and builder and there may be something also between the user and wallet but this seems less pressing than other things downstream in the supply chain we're also not comfortable here just introducing more and more repeated trusted third parties in this process the intention is to build decentralized systems instead of just introducing more trusted third parties so at Flashbots what we're doing here is we're trying to build this decentralized platform for programmable privacy and credible commitments in the Mev supply chain that is kind of an abstract layer that allows you to express your preferences and privacy and economic commitments both for the case of mev share, mevboost eventually Mev Build and other parts of mev supply chain that's kind of the future and how to think about that in the bigger picture of what we're doing. Hope you enjoyed the talk we started with. Kind of the picture of what we want with Mev, Utopia and Dystopia looked at how it breaks down without trust and privacy and how you can introduce privacy and commitments back in order to make sure that this trust isn't needed and keep it permissionless.
00:13:12.306 - 00:13:21.520, Speaker A: And again, we're trying to build this decentralized system for privacy and commitments in the Immavity supply chain. That's all I have for you today. Happy to take some questions.
00:13:26.530 - 00:13:28.126, Speaker C: Alex, can you go back to the event?
00:13:28.148 - 00:13:29.306, Speaker D: Share slide?
00:13:29.498 - 00:13:30.240, Speaker A: Sure.
00:13:34.150 - 00:13:44.740, Speaker D: How does the user know that the search that they're transacting is shared with doesn't use that information, run them with it.
00:13:45.590 - 00:14:10.960, Speaker A: So we have the notion of programmable privacy in this design where the user is sending their transaction to the matchmaker with either some set privacy preferences or some reasonable default set by matchmaker that chooses the selective information to share with anyone who's listening. So if you're swapping on uniswap V two presumably you're not going to tell the searcher what the slippage is. Maybe you'll tell them the pool as an example.
00:14:12.770 - 00:14:14.990, Speaker D: I think this isn't really your fault.
00:14:15.970 - 00:14:16.880, Speaker B: Oh, boy.
00:14:18.770 - 00:14:36.130, Speaker D: This feels like at the point where you're negotiating for a transaction, like negotiating it to be back run on a deck, something has gone wrong, there's value leaking all out of that. It feels like these are parties should be able to trade with each other or something, right?
00:14:36.200 - 00:14:36.626, Speaker B: Yeah.
00:14:36.728 - 00:14:57.302, Speaker A: So this starts from the premise of users are going to make regular transactions and we just have to deal with those consequences because this is what our partners are telling us. But ideally, if you could have some magical signature scheme or something that wallets and users are using, that would be much better. But people nonetheless do all sorts of things that create mev and we have to deal with those consequences at Flashbots.
00:14:57.366 - 00:14:58.170, Speaker B: Unfortunately.
00:15:02.190 - 00:15:04.510, Speaker D: Between the volume condition.
00:15:07.970 - 00:15:48.490, Speaker B: Yeah. This is probably the largest unknown in this design right now, to be frank. So the notion is that the matchmaker is only willing to share bundles with builders who are going to respect paying some mev that is paid to the fee recipient, which is the builder, to a set of addresses that are attached to the bundle, which we're calling a validity condition. How this is enforced, it's either by trust, like you have some relationship with the flashbox builder or maybe V 69 or Rsync or whatever, you'd put it inside of a code and run it in SGX, maybe crypto economics too. But initially we're just assuming the trust relationship between the matchmaker and builders.
00:15:49.310 - 00:16:24.126, Speaker D: Jordan, one other technique you can use here is that the commitment doesn't need to be enforced for that block or the search or whatever. They can have some bond put up somewhere and after the transactions have landed in the next block, if that condition that was specified was not met, you can slash them. So you can say, my transaction should have been fifth transaction block and can have an escort, for example. My transaction was not there. So slash the builder. How do you determine the size of the blog?
00:16:24.238 - 00:16:24.622, Speaker B: Sorry?
00:16:24.696 - 00:16:27.560, Speaker D: How do you determine the size of the bot? Yeah, that's pretty good.
00:16:28.830 - 00:16:54.580, Speaker B: You need like an extra step of communication. I think the hard thing about that is how do you give a commitment for something without sharing information about it with the builder yet? So if the game is like, you don't want to share the bundle with someone who's not making commitment, then how do you get the commitment before you share the bundle? You know what I mean?
00:16:58.310 - 00:16:59.940, Speaker A: Open question. Yeah.
00:17:00.630 - 00:17:26.810, Speaker D: Does the matchmaker commit to any specific auction mechanism or does he just choose? Because I imagine you have N user transactions and F or K have bundles and you might not be able to use all the optimal ones for all the optimal transactions, then you have to commit to some selection tier.
00:17:27.310 - 00:17:30.506, Speaker B: Yeah, I think one important thing to.
00:17:30.528 - 00:17:53.650, Speaker E: Note here is the Matchmaker is not actually selecting anything. It's only acting as a sort of relayer. So its job is not necessarily to pick the best combination of user transaction with searcher bundle. It's only to apply the user transaction inside the partial bundle and then forward that to the builder. So the actual option itself you can think of as taking place on the builder.
00:17:53.990 - 00:18:12.558, Speaker B: And the reason for that is very non intuitive, is that builders may have some other set of information that leads to better outcomes in some cases than the Matchmaker is aware of with its set of information. You may have some state that comes before that the Matchmaker is not aware of that leads to better execution.
00:18:12.674 - 00:18:48.878, Speaker D: Let's say one searcher submits one partial bundle that turns out to be like the best partial bundle for all user transactions, but the searcher is only willing to take one particular user's transaction as part of the bundle. Then the Matchmaker is the searcher. I guess the question is, then how do you decide which one goes into the list? Right? That one gives user the best kind of welfare boost, who receives the best one and then who gets the we're.
00:18:48.894 - 00:19:04.682, Speaker B: Playing around with different allocation rules. So if you're interested in writing an allocation rule for the Matchmaker, I'd love to see that. Okay, but for now for now, the Matchmaker is like designating individual transaction hashes. They're like, all right, this transaction hash corresponding to this selective data sharing is the one that I want to back.
00:19:04.816 - 00:19:09.450, Speaker D: So each participle transaction corresponds to exactly one user.
00:19:09.790 - 00:19:40.534, Speaker B: Yeah. There's a way that it may work in the future, which is a searcher says, here's an empty entry and you can try and insert any possible transaction in this that you have access to. And I'm interested in this kind of transaction. I'm only interested in transactions that touch crypto punks as an example. So try anything that, you know, matchmaker that touches crypto punks. But in V zero, it's just like transaction hash. So it's more relevant in the MC entry set.
00:19:40.534 - 00:19:42.120, Speaker B: And I think that's an open question.
00:19:47.370 - 00:20:22.350, Speaker D: In an MEB utopia. Theoretically, you want to have the minimum amount of gas usage, the max amount of MEB captured. It seems like this kind of moves a lot of the computation on chain for optimizing a bundle, since you're having to pre provide the transactions that are going to need to be matched to transactions. So do you think that we move a lot more gas usage on chain, plus the addition of having to add in a ton of more payments to even more parties in the supply chain?
00:20:22.690 - 00:20:54.430, Speaker B: Yeah, I think Mev is all about trade offs, and I think at the moment, the trade off of enabling permissionless interaction between users and searchers is worth the extra gas on chain in the long run. You'll probably have searchers colocating their code inside of an SGX or using magical MPC protocols that mean we don't have to do any of this stuff. So you'll move that computational. But this certainly does add inefficiencies that you don't have when all information is public. When all information is public, then you don't get any of the internalization.
00:20:55.250 - 00:20:56.000, Speaker D: Yeah.
00:20:59.970 - 00:21:01.840, Speaker B: We'Ll go right to left.
00:21:02.930 - 00:21:11.394, Speaker D: In the case that there is like a cow of some sort, this design would cause a searcher to submit back money transactions for both and then just.
00:21:11.432 - 00:21:12.770, Speaker A: Crop out that spread.
00:21:13.110 - 00:21:13.860, Speaker D: Right?
00:21:15.190 - 00:21:23.238, Speaker B: Yeah. You probably do it otherwise if you made the matchmaker smarter. But at the moment, Matchmaker is going.
00:21:23.244 - 00:21:25.158, Speaker D: To definitely stay dumb, right?
00:21:25.324 - 00:21:27.206, Speaker A: Well, no, this is just at the.
00:21:27.228 - 00:21:34.460, Speaker B: Beginning of the design, so I would love for you to write the cow design. You had a question.
00:21:35.150 - 00:21:39.270, Speaker D: Is there an incentive for searchers to spam the matchmaker?
00:21:39.430 - 00:21:40.300, Speaker B: Yeah, absolutely.
00:21:40.930 - 00:21:45.550, Speaker D: And what's stopping them from optimistically trying to sandwich transaction?
00:21:46.850 - 00:22:07.742, Speaker B: So there is an incentive. Like part of the design is that you don't necessarily know exactly what the private transactions are that a matchmaker has. And so you optimistically construct a lot of things that you think the matchmaker may have access to. Right. Again, maybe someone is trading on ETH, USDC and Uniswap V two and I'm interested in that. So construct an empty bundle and send it. All right.
00:22:07.742 - 00:22:14.546, Speaker B: And the Matchmaker is like this highly specialized party that has software that can either handle that through something like reputation.
00:22:14.578 - 00:22:16.600, Speaker A: Or payment or whatever.
00:22:17.450 - 00:22:20.354, Speaker B: And your second question was what's stopping.
00:22:20.402 - 00:22:22.570, Speaker D: Someone from watching a screech on a sandwich?
00:22:23.310 - 00:22:46.138, Speaker B: Yeah. So initially I thought you're raising your hand. Initially the system will probably be background only. I think in the long to medium run, we have the perspective that you can't really prevent that from you can't prevent sandwiches from happening in the system. You just need to help users internalize the mev from the sandwich.
00:22:46.234 - 00:22:47.406, Speaker A: The kind of caveat that I have.
00:22:47.428 - 00:23:10.300, Speaker B: About that is that if you're sandwiching a user and you're just paying back all the value from the sandwich, seems like you're losing some amount of money to the LPs that you would get by just back running the user and kicking back the background instead. Yeah. So I think long run you probably can't prevent the sandwich from happening. You just have to help the user internalize on mev. Jordos, you had something to say?
00:23:11.150 - 00:23:15.900, Speaker D: It seems that a wallet would be like you to circle and try to do this.
00:23:16.750 - 00:23:17.500, Speaker B: Yeah.
00:23:19.230 - 00:23:32.670, Speaker D: Do you think any wallet is willing to be a bit more ruthless than existing wallets, which have sort of been correct, let's say, versus this might end up becoming a bit more start offering more investments.
00:23:37.830 - 00:23:40.786, Speaker B: Is your question like will people integrate with this or is your question are.
00:23:40.808 - 00:23:43.700, Speaker D: They going to vertically run it without.
00:23:45.770 - 00:24:14.350, Speaker B: Doing it themselves? I think if you wanted to do something yourself, you wouldn't design the system like this. Probably. So the matchmaker is designed from this design goal of being permissionless for searchers. And that means to Larry's point, that you're going to get spam. It's like a huge amount of load that you're going to get from Searchers. Like the flushbook builder today that you need to handle. And wallets are not in the business of running giant amounts of simulation.
00:24:14.350 - 00:24:38.100, Speaker B: You run giant amounts of simulation to get permissionless searcher sets, which we think drive better user outcomes, which is why we're doing it. But if a wallet wanted to do something, then maybe you run the matchmaker with no. Privacy and a permission searcher set. And I wouldn't be surprised to see someone do something like that or opt into one of the other of a designs that has a permission searcher set.
00:24:40.230 - 00:24:47.634, Speaker D: Number of things that you can submit into these matchmakers. Since you have limitations to how much.
00:24:47.692 - 00:24:57.786, Speaker B: Computation, probably I don't have a number for you. We'll have to cap it at some point. The question is, how do you deal.
00:24:57.808 - 00:25:03.610, Speaker D: With simple searchers that are just keep on having more and more and more computation?
00:25:04.110 - 00:25:36.614, Speaker B: We dealt with it in the fleshbox. Builder with the notion of reputation. So you can like, searchers if they land bundles over time, build up reputation, and we separate searchers who have no reputation from those who do, and different simulation clusters. So if we get DDoS by a bad actor, that takes down one simulation cluster, but all the good actors are in some other one. So we handle it with a plus plus. Builder I think it's worth exploring part of the payments for this instead. Like having searchers submit a micro payment per bundle, something like that.
00:25:36.614 - 00:25:41.066, Speaker B: There's many ways to solve this problem. You can do bonds also, how big.
00:25:41.088 - 00:25:50.140, Speaker D: Of a problem is Dos? Actually we know how to do horizontal systems very well already so what's the actual concern here?
00:25:51.710 - 00:26:05.442, Speaker B: How big of a problem is Dos? I think it's like can you design a system where Dos is not a problem when you move to decentralized? But in practice it was a very big problem for us in the first six months of flushbots and not really.
00:26:05.496 - 00:26:10.850, Speaker E: Since then who is going to be operating the Matchmaker?
00:26:13.590 - 00:26:38.826, Speaker B: Yours truly and we hope you the code will be open source and anyone can run the Matchmaker the question is just can you get users to trust you and send transactions to you and can you get searchers to listen to the information that you're sharing in submit bundles? It's probably more a question on this side than searchers so it seems like.
00:26:38.848 - 00:26:49.920, Speaker E: It'S going to be like a quite sensitive place in the flow because it has previous knowledge like it has anticipated your going to happen on the market.
00:26:51.650 - 00:26:52.400, Speaker B: Yes.
00:26:54.930 - 00:26:57.338, Speaker D: That'S going to be you that's.
00:26:57.354 - 00:26:59.410, Speaker B: Going be to you me personally.
00:27:01.430 - 00:27:06.290, Speaker D: But you mean the user trust the matchmaker otherwise.
00:27:08.870 - 00:27:11.880, Speaker B: Searcher is connection layer of trust.
00:27:14.410 - 00:27:29.530, Speaker E: Would it make sense to, for example, consider that since the Wallets already have this sort of position, like they already captured the user intent, they could be operating that part of the flow?
00:27:30.030 - 00:28:29.534, Speaker B: So we thought about that to some extent, like can you run some software locally at the wallet? And our friends have taken other design trade offs in their systems too that look at something like that. Ultimately, we decided to take different architectural trade offs largely because we think the matchmaker will play an increasingly complicated role that requires specialized infrastructure, like being able to handle searcher Dosses as an example, or maybe being able to handle different allocation rules. Because some users may want an Mev kickback, some users may just want the best price possible on their trade. So we think the matchmaker role is somewhat complicated. It'll require a specialized infrastructure and for that reason a specialized entity makes a little bit more sense rather than software on a local software wallet. And the other thing to note is that this is designed with the notion that in the future it'll transition to the magical decentralized blockholding network that we're creating in the future too.
00:28:29.572 - 00:28:30.718, Speaker A: So this is just a job to.
00:28:30.724 - 00:28:33.380, Speaker B: Be done by Swab at some point in the future.
00:28:35.670 - 00:28:54.790, Speaker D: For now, this objective with the selective data sharing purely to maximize value for the user. And if that is the case, and the way to do that would be to share all the data, would that change your guys'roadmap on a bunch of builders?
00:28:55.530 - 00:29:30.130, Speaker B: I think to begin with, we'll probably be more permissive with the data and use some simple heuristics on when to not share data. So as an example, anytime someone touches Unisoft V two or it's forks, you have to throw up a wall there and not share that information. But if someone is interacting with Openc, it's probably less important, right? So I think to begin with it'll be more permissive and over time you'll figure out where it makes more sense to layer on privacy with the goal of giving users the best execution possible.
00:29:30.280 - 00:29:36.386, Speaker D: Do you think there will be a global optimum for swap transactions on uniswap?
00:29:36.498 - 00:29:37.654, Speaker B: What do you think?
00:29:37.852 - 00:29:50.940, Speaker D: I think, yes, I think it probably looks something like zero X transaction relay RFQ style and just sharing everything, but I'm not sure. But I'm curious, if that were the case, would that still require this?
00:29:51.550 - 00:30:01.566, Speaker B: I'm sure you would love that everything given your place in the NVD supply chain. I know none of our users feel the same, but I would love to.
00:30:01.588 - 00:30:10.240, Speaker E: Figure out that optimum also meta transactions in this case.
00:30:13.890 - 00:30:20.400, Speaker D: Why do you think sharing the rule that skin touched is the best piece of information to reach to get the better deal?
00:30:20.710 - 00:30:49.258, Speaker B: I don't know, but I think it's an example that people can drop, so I use it. But if you have the pool that's being touched. You don't know the direction. So it's a little bit like it raises the risk of if you're trying to front run that trade outside of the system, it's one thing, but you could construct two optimistic back runs in either direction, whether they're selling one direction or the other, and submit both to the matchmaker in that way. So I do think it's kind of.
00:30:49.264 - 00:30:51.706, Speaker A: Clever, but I'm not sure it's the best thing to do.
00:30:51.888 - 00:30:53.246, Speaker B: We're going to figure that out.
00:30:53.348 - 00:31:03.506, Speaker D: So if you don't announce which pool your order is going to touch, then you expect the searchers to submit back runs for every pool, every pool they.
00:31:03.528 - 00:31:09.060, Speaker B: Care about within the parameters of how many partial bundles we allow.
00:31:10.310 - 00:31:11.810, Speaker D: Shitload. Simulation.
00:31:12.710 - 00:31:14.530, Speaker B: Welcome to the flashlights builder.
00:31:16.970 - 00:31:24.150, Speaker D: Did you consider making the searcher pay the user directly instead of having to go to the builder?
00:31:24.570 - 00:31:24.982, Speaker B: Yeah.
00:31:25.036 - 00:31:31.740, Speaker D: And is there some advantage to your mechanism with having the builder do it that I'm not working on?
00:31:32.270 - 00:31:56.590, Speaker B: The advantage is one, the integration is just much easier. So searchers out of the box can just pay as they do now to the fee recipient. You don't need custom integrations. Like everyone can use the contracts as they are now. It's more capital efficient that way. Two, I have this much more handmade loose notion that this is how it's going to work in centralized lock building network, but that's not an actual reason. Intuition.
00:31:56.590 - 00:31:59.170, Speaker B: So it's really just for easy integrations for searchers.
00:32:01.190 - 00:32:07.110, Speaker E: Also the searcher would have to know the user benefits to pay for this may be some privacy considerations.
00:32:09.370 - 00:32:27.926, Speaker D: Connecting this to the graph in Quintess, where there's that box that's not transparent fully. Do I think of these searchers as within the box or outside of box? So in the first step, every single searcher would know there's a transaction in that actually Quintess.
00:32:27.958 - 00:32:28.474, Speaker B: What do you think?
00:32:28.512 - 00:32:40.880, Speaker C: I would say that the matchmaker is the box and that what the computation happening. The little box inside the box is whatever scripts being submitted, whatever code is running inside. So it's like a bundle to simulation happening there.
00:32:44.390 - 00:32:46.580, Speaker D: Does that make sense? No.
00:32:51.030 - 00:32:51.902, Speaker B: Incredible.
00:32:52.046 - 00:33:11.574, Speaker C: I said that inside the box you have some version, some action being taken by someone on behalf of the searcher. You can think of that as the simulation happening, as the matching part inside the matching the selective data sharing part.
00:33:11.612 - 00:33:13.320, Speaker D: Is sharing within the box.
00:33:14.090 - 00:33:14.502, Speaker B: Yeah.
00:33:14.556 - 00:33:49.170, Speaker C: So I guess I was simplifying a bit that's like before the part I was talking about, because when a searcher submits some bot to act on their behalf inside of a box, they can sort of make that bot more efficient by having an idea of what the auction will be like that's the selected data share. And then what this bot inside of the box is doing is whatever the math data computation is doing. So it'll be like an expression here. I want to match all these kind of books so it's very limited.
00:33:51.850 - 00:34:02.120, Speaker D: I guess the reason I'm asking is if the first select data sharing part is like crossing the wall, then technically these guys can fill from it depends what information.
00:34:02.490 - 00:34:27.986, Speaker C: So that's a hard question. The question is, how do you get sort of economic efficiency by having this operation inside of the box? Be conditioned on ample information without having information that is exposed, be exposed at the detriment of the user. And it need not be that simple. It doesn't have to be like, oh, I release this information, I don't release that. You can think of very complicated scenarios. We have Nested boxes and all these.
00:34:28.008 - 00:34:29.186, Speaker B: Kinds of different things.
00:34:29.368 - 00:34:30.900, Speaker D: But I think the high level.
00:34:33.190 - 00:34:35.800, Speaker B: I'll keep on taking questions until someone tells me not to.
00:34:37.690 - 00:34:45.960, Speaker E: One more question. And also there is a whiteboard for a purpose. So if there's boxes need to be drawn, go ahead, talk to yourself.
00:34:47.210 - 00:34:48.406, Speaker B: One more question.
00:34:48.588 - 00:35:10.320, Speaker D: If it tends to have additional logic play out from the searchers, then why would you, instead of not sharing the direction of the trade and saying submit a dot run to both directions, which like a lot of simulation, why not just allow searchers to submit conditional? That says that if this trade is this large, I want this back run.
00:35:10.770 - 00:35:31.000, Speaker B: That's the intention too. For what I sort of searches submit what we call hints, which hints to us what trades, what they want, where exactly? You may say, I only want the back burn behind trades if it's notional size. And then you don't necessarily need to do simulation on everything. It's like a matching process.
00:35:37.850 - 00:35:48.102, Speaker D: Of interest or something where it kind of sounds like we're covering fix and how to express intentions in somewhat cryptic ways.
00:35:48.236 - 00:36:05.500, Speaker B: Only people that want to drop it's an interesting notion. Okay, thank you so much for your interest questions. Feel free to talk to me about it. One last thing. We have an API that we want testing and feedback on, so if you're interested in that, talk to Shay. Thank you so much.
