00:00:00.720 - 00:00:04.516, Speaker A: You. Okay, I'm just going to get going.
00:00:04.538 - 00:00:04.676, Speaker B: Okay.
00:00:04.698 - 00:00:52.720, Speaker A: What's up guys? Okay, there we go. I have a 50 minutes talk and was told I have 30 minutes, so there might be a little bit of skipping over things. Just save your questions for the end. Or if it's very pressing, I guess you could just raise your hand throughout. Anyway, what's up? I'm Quintess and today I'm taking you through a treasure map. What does that mean? Well, the idea is that the treasure at the end of the sort of on this map somewhere is some improvement on the current mev landscape, some new design that changes things in some way and we'll go into what changes we want. But today I'm not going to show you where the treasure is, I'm just going to show you what I think is the map and try lay it out.
00:00:52.720 - 00:01:42.292, Speaker A: And the idea is that hopefully at the end of the day, we all have a similar idea of what the map is and in doing so can speak a similar language and hopefully agree or come to some agreement on what the best outcome will be. And so the talk is structured sort of first just looking at what auctions are very quickly why we care. And a lot of that has been said already, so I'll be quick about it. And then more specifically, what order flow auctions are trying to do. Then a couple of archetypes and some properties of those that we care about. So to start this talk, I guess the question is what is an auction? And it's a bit of an annoying question, but the reason I ask it is because I think at least for myself, I often find myself with preconceptions. I think of an auction, I think of like this specific thing with an auctioneer doing something.
00:01:42.292 - 00:02:21.036, Speaker A: But then like Max pointed out earlier, you call a central limit order book a dual auction. And so actually maybe a bit more than that. And today I want to use the definition that an auction is a mechanism of price discovery through competition, right? And price discovery implies that we don't know the price. So that there has to be some degree of uncertainty. Easy. Why? Well, if we sort of come to the sort of fundamental interaction and blockchain, we have a user and a blockchain here I put ethereum. It could be any blockchain, could be some collection of blockchains.
00:02:21.036 - 00:02:50.052, Speaker A: Whatever the state of the world they want to change and they have some intent, right? Some desired change they want to accomplish. But the blockchain is complicated. There's many smart contracts. The actual workings of it are very impenetrable, even for me. I work in crypto. I'd imagine for many other people it's even more impenetrable. Additionally, this process of interacting with the blockchain is complicated, right? There's many other messages floating around the mempool.
00:02:50.052 - 00:03:41.224, Speaker A: There's latency, there's many different RPC providers to reason about. Yada yada, yada, it's very complicated. And so if you're the average Joe and you're not hyper specialized with a fantastic in the mempool and lots of advanced scripts and all these kind of different things, it's not exactly clear what you can get out of this, what the best way to satisfy your intent is. And so this uncertainty I argue is a justification for why we want why an auction is appropriate, right? And so it's appropriate for kind of two things. The one is discovering the price of realizing your intent. You're trying to do something in the blockchain, but what is the lowest amount you can pay to do this? And a related question which is sort of more like fixing the price. You're saying, okay, well what is actually the best approximation of this intent? Not every intent necessarily has a solution to it.
00:03:41.224 - 00:04:15.270, Speaker A: I just want to trade at the best price. How can we get this best price, this best approximation of our intent? Okay, and so steps one and two are done. Maybe I will finish in 30 minutes. So what are order for auctions? And I guess as the highlight supposed to indicate that in order to define order for auctions we should define order flow. And like I said earlier, we're talking about these intents. But another way to think about these intents is credible commitments. And that's how I like to think about it.
00:04:15.270 - 00:04:54.300, Speaker A: And so an example of this would be like a commitment that says I want to do something on chain, right? So a transaction satisfies this. Obviously my do something that I'm calling a swap function with certain inputs could be an Oracle update, but it also need not be a transaction. Something else we can think of is like a conditional payment. If something happens, I will pay an amount. This transaction could do this, you could run the transaction and check the chain. If something happened, then it'll pay. But really you could be running this in a different chain.
00:04:54.300 - 00:05:55.396, Speaker A: It's just a credible commitment. In the abstract, I'm trying to break away from this very specific instantiation of how we think about things. There are other ways of doing it having maybe like a payment conditional on some variable execution, right? I'm wanting to give a tip for price improvement as a function of price improvement or something that transactions can't do at the moment is condition on state that's not available? Maybe within an execution environment, if my transaction is first in a block or whatever, I'm willing to do something about it. And that's a rough idea. What are order flow auctions then? Now that we have defined order flow, price discovery for order flow is that the two definitions combining should make sense. But again, to be absolutely clear, we find ourselves talking about this in the context of other auctions which exist already, right? We're talking about introducing one component into a larger system. So what is this larger system you might be familiar with, you might have seen this diagram before, or diagrams like this.
00:05:55.396 - 00:06:42.816, Speaker A: We have Mev Boost, where we have builders submitting blocks to a validator to try and get blocks on chain. And then we have additional auctions with searchers trying to compete to get bundles into specific blocks, which then compete in the later auction. But this is all sort of part of one system that is distinct or a component of the system that is distinct from the order flow auction. This is looking at value, that just looking at getting blocks on chain and competition to get treats. Competition over state looks for competition over state and the value accrues to a proposal. The order flow auction, logically but not necessarily in the implementation, can be thought of as preceding this. So you might implement this completely differently.
00:06:42.816 - 00:07:31.792, Speaker A: But my point is that the order flow auction happens earlier on in the supply chain where value accrues to users. Now here I've drawn one big green rectangle for the Ofa, but that's again just an abstraction. Maybe the Ofa in the bigger scheme of things we end up with ends up being like ten different order flow auctions, each serving a different function and in aggregate doing this sort of value accrual to the user. Maybe we end up with one specific order flow auction. Maybe it's not a separate component at all and it's an activity that happens in the space of this larger auction. Again, the separation is more to think about, like what is the functionality here? So hopefully that's clear. Right now we have a new paradigm of thinking.
00:07:31.792 - 00:08:45.130, Speaker A: Before we were thinking about how to deal with competition over block space, how do we maximize revenue for the validator, but now we have a component that is trying to do something else, right? It's trying to empower users, which is not a very concrete term. So maybe we can define user empowerment as their utility, which is a sum of the function of the outcome of the satisfaction of their intent, like how good is their execution or whatever. And a payment, right? Maybe the payment is them paying a gas fee, but it might also then be receiving a rebate because someone wants to background them or whatever it is. But I put two Asterisks here because this is actually not a great way of thinking about user empowerment. Users, I think many of us in Blockchain agree, actually think about more than that. For example, users care about the security of the system they're using, even if it's implicitly, right? If there's some small risk that the exchange you're trading on completely rugs you and takes all of your money, that should be priced into this latency, should be priced into this, and it's UX and all sorts of other things that come into this. So this is like a first approximation of what users care about.
00:08:45.130 - 00:09:40.684, Speaker A: Okay, so that's what order flow auctions are. I would argue. And again, the point here was to keep it as abstract as possible, as wide as possible, trying to take into account as many different approaches as possible. Okay, so let's move into archetypes. And in doing this talk, Tina said tina asked me, it would be very useful if you could segment everything into a couple of different archetypes and then we can reason about just these categories. And this is actually really hard, or it was really hard for me, and I've been supposed to be thinking about this for a while, so hopefully it's hard for other people as well. And the reason is that I think the properties of these different auctions really depend on very small changes.
00:09:40.684 - 00:10:25.960, Speaker A: Two auctions or two designs might resemble each other in many ways, but small tweaks actually change outcomes in some certain dimension drastically, I would argue. So take what I'm saying with a pinch of salt. I've put things that are very different into the same category and things that are very similar to different categories, but this is my best attempt. So we get this kind of design which I call upriori, right? And the UPRI refers to temporal component, obviously. And the idea is that whatever the auction is deciding on has been decided even before the user intent has been formed. The user doesn't even know what they're trying to do. So we see this in traditional finance with paid for order flow agreements.
00:10:25.960 - 00:11:24.030, Speaker A: Robinhood has signed a deal with Citadel, or like they've auctioned Citadel, whoever, way before anything has happened. And Nitesh couldn't be here. Like Dflo is building something similar, although the Time Windows is very much up for debate. Then another design, which I've called auction house, for a lack of a better term, and there are two kinds of designs in this auction house space. This is like the thing that comes to mind when someone says auction, right, there's something being sold, bunch of people placing bids, and then eventually, according to some rule, like maybe the highest bid or whatever is chosen and the allocation happens like that. So you can have the single transaction case, like, hey, here's a transaction, take all the physical transaction it's allocated. But this isn't necessarily that economically efficient because as a searcher, you might want to execute on multiple orders in multiple intents, match them together, whatever.
00:11:24.030 - 00:12:16.348, Speaker A: And having uncertainty because each is being auctioned off separately, means that you can't bid as high as you would. So a different approach, which is quite well studied in literature, although not for this application, are combinatorial auctions, where you can submit a bid to a subset of orders, right? So there are ten orders and I can choose for orders two, three and five, I'll pay this much, and for three, four and seven, I'll pay whatever much. And rook, at least the last time I checked, is an instance of this. Another example, which is actually kind of related to the combinatorial auction is a batch auction, and I'm distinguishing batches from combinatorial auctions in that batches are fixed. So, like cal swap, we have a fixed number of orders, fixed set of orders. And the allocation rule is like a one or done. Like is a one and done or one or nothing.
00:12:16.348 - 00:13:03.676, Speaker A: One person gets whatever the allocation is and everyone else gets nothing. I shouldn't say final because there are definitely things outside of this, but another archetype that we can think about is like Dutch auctions, right? We have a price that changes over time, like a fee escalator. So the idea is that within the semantics of an order, of course you don't have to do it like this, but an example would be within the semantics of an order, like of your transaction or whatever, we encode a price that changes with time. So at block one, I'm willing to maybe I'd require a payment of like five e for someone to execute this. Block two, I require a payment of three e. Maybe at some point I'm willing to pay for it. The idea is that eventually you discover your price.
00:13:03.676 - 00:13:29.008, Speaker A: And there are many, much discussions we had about this pros and cons, yada yada, yada. But that's like the mental model. And now after I've given you this, I'm going to say it sucks. And there's a reason that it sucks. It doesn't take into account actually what is being transferred. It's missing a dimension, actually. It's missing a couple, and one of them is what is being transferred.
00:13:29.008 - 00:14:22.736, Speaker A: So we can maybe break this up into two questions, right? Like, what is being transferred from the seller? I e the user, to the bidder, to the buyer, and vice versa. What's being transferred the other way? And we can give some first approximations, first answers to this, which is maybe what's being transferred to the bidder is a right to control the conditions of execution. Someone is trying to submit a trade and you want to bundle them. That's an example, right? I want to like my front run, I want to back run or whatever. And these conditions now become part of the execution of this transaction as I submit them to the rest of the sort of like mev supply chain. That's one way of doing it. Another example of the right to determine the aspects of execution is I can fold this, right? Someone has put out an order they want to trade into Ethan.
00:14:22.736 - 00:15:02.260, Speaker A: I can take the other side of that and we can compete for that. That's another example. And an example of what's being paid, transferred from the bidder is a very obvious example would be payments, right? And execution guarantees. I'll pay like $10 for this transaction. If I pay more than everyone else, I get it. Or maybe I give an execution guarantee. I will give this order execution price of at least six or whatever it is, right? And again, no, this, I think, is an answer that I give sometimes, but I think we can actually be a bit more nuanced about it, or significantly more nuanced about it.
00:15:02.260 - 00:15:45.264, Speaker A: And in order to explain this nuance, I will tell you a story about Schrodinger's other cat. So they're one and a half cats, I guess. And so we have a box. In the box we have an auctioneer denoted by the HAP, and something which we're auctioning off. And now, again, we keep it very general. Maybe it's a bunch of auctions transaction orders or whatever. Maybe it's one we have this thing we're trying to auction off, and outside of the box we have bidders, right? Bots is really about the best mental model to use here, searches, whatever, and they're represented out here.
00:15:45.264 - 00:16:53.780, Speaker A: The importance of the box is that Schrodinger's other cat, the auctioneer, controls the perimeter of the box as a permeable barrier. They control what information flows in and out, right? So what happens in this example is that the auctioneer allows these bots to send emissaries, perhaps like clones of themselves, whatever. They have little people working for them inside of the box, biding on their behalf. The point I'm going to be making with this example is that control over the permeability of this barrier actually changes the auction, and having different rules for what can enter and move through this barrier changes the auction in itself. And this is like a privacy point, obviously. So imagine this auction happens and bot number three wins, places the highest bid, of course, within the box. The information of what's being auctioned might be completely known.
00:16:53.780 - 00:17:18.652, Speaker A: But consider once a scenario in which only the winner is allowed to know about the information that whatever happened in the box, right, so only the winning bidder inside is able to transfer information to the outside. I'm going to argue that this is qualitatively different from a scenario in which everyone knows about this, in which the barriers are completely transparent. Does that make sense?
00:17:18.706 - 00:17:18.924, Speaker B: Yeah.
00:17:18.962 - 00:17:43.430, Speaker A: Evan's Nodding. Great. So, okay, very abstract. Let's make it a bit more concrete. So, for example, let's say we have a really big trade and that people want to be able to execute or whatever, and we run this auction. And perhaps how this auction works is that the bidders are offering some execution guarantee. They're saying, hey, I'll give you this price, give you that price, I'll give you this price.
00:17:43.430 - 00:18:44.596, Speaker A: If it happens that everyone is aware of what information of what happened in the auction, the winning bidder finds itself in a very difficult position because everyone else knows about this big trade, right? This big trade is going to move a price, for example, and they can act in this information as well. They can price it in. The winning bidder now has to compete with all of these other actors to be able to make good on this offer that they gave within the auction. The end result here is that the bidders have to price in this competition later on in their bids, meaning the bids will be lower, which is different from the scenario where only the winning searcher is aware of what happened inside the box. Which means that's the example and so the user gets better offers in the scenario where only the winner is aware of what's being executed. Another example is an Oracle update. And so some Oracle updates.
00:18:44.596 - 00:19:01.368, Speaker A: This is kind of like not that obviously interesting for so imagine we have an Oracle update, we have a sports betting platform, and the game is finished and the Oracle is about to update what the score was. That's not that interesting. We all watch the game, we kind of know what happened, right? Of course there's like edge cases and maybe like Oracle's lying.
00:19:01.464 - 00:19:01.589, Speaker B: What?
00:19:01.589 - 00:19:07.410, Speaker A: What? But maybe a more interesting example is yeah, go ahead.
00:19:08.100 - 00:19:10.944, Speaker C: So the winning bidder knows key.
00:19:11.142 - 00:19:11.552, Speaker A: Yes.
00:19:11.606 - 00:19:12.316, Speaker C: Everyone else knows.
00:19:12.348 - 00:19:20.224, Speaker A: They didn't want everyone else know they didn't win and they know about the big trade. This barrier is completely transparent.
00:19:20.272 - 00:19:23.316, Speaker C: No, I'm saying in a case that you make it's not.
00:19:23.418 - 00:19:48.192, Speaker A: Yes, so in the case where it's non transparent, you can do many things. But the example I'm using is saying like, okay, we make a rule that the only information that's allowed to leave is allowed to leave. The only entity that's allowed to have information exit the system is the winning bidder, right? And so presumably what they do is they just give all of the information they have to themselves in the outside world, right?
00:19:48.246 - 00:19:49.676, Speaker C: These people don't know about the trade.
00:19:49.708 - 00:20:36.508, Speaker A: At all unless they tell them, which seems counterproductive cool. So let's take a different Oracle example. Imagine that we have, a couple of months ago, a lot of price movement in a downwards direction, and a lot of liquidations may or may not happen, perhaps in some low liquidity tokens. And these liquidations can move the global price, they can move the market price. And the Oracle update is coming in right on the barrier. Maybe there's a liquidation, maybe there's not. In the scenario where the auction is happening in the clear and this barrier is transparent, every bidder on the outside is aware of this information and they can all act on it.
00:20:36.508 - 00:21:16.750, Speaker A: Okay, there's no liquidation. Maybe the price is slightly too low, I can act on it. Or there is a liquidation, in which case let's sell, or whatever it is. Of course the winning bidder can still execute the transaction, and they can have first execution rights on that specific domain as an example. But if this information is contained only to the winning bidder, they have an additional reason to bid, right? They have an additional value they gain from the auction, which is edge in the market. They are the only entity that knows. Well, not the only entity, but in this example, they are the only entity that knows that this price, Oracles, has been updated at this specific price.
00:21:16.750 - 00:22:07.128, Speaker A: And they can act with an edge over their competitors that everyone seems to be following. Okay, cooling is I had a lot of other stories, but I was told they were less applicable, so I took them out. Tell you about my other pets. Okay, so what better answers can we give than the answers that I tried to give earlier? So what is being transferred from the user to the bidder or from the seller to the bidder? I would argue it's information and the ability to act on it. So yes, it is about action, it's about back running, it's about being able to execute in full disorder or whatever it is. But it's also about knowing that this is happening. Yeah, that's the basic point.
00:22:07.128 - 00:23:17.740, Speaker A: And what we achieve here, we achieve protection of the user in that what the user is trying to do isn't broadcast everywhere and they're not inciting competition, but it's also monetization of information. The user has some information which might be useful to someone else and they can capture this value. What's being transferred from the bidder, payments and commitments, which is I think, different than what I was saying earlier. And I'll tell you why. So of course you can have a straight up payment like, hey, here is my transaction and after you have paid me, like, whatever, I will offer you the transaction. But in reality, what many of the designs that have been considered and that we've thought about look like is that actually it's a commitment to something, right? It's a commitment to pay or perhaps get slashed, that the transaction is ordered ahead of time. And the question is, what do the incentives look like of the auction? How credible is this commitment for the payment to actually happen? What if you have a very large, very large transaction being auctioned off, like very valuable, perhaps it's worthwhile for someone to take the slashing and not pay for it commitment to execute.
00:23:17.740 - 00:24:02.930, Speaker A: Perhaps someone is willing to pay and then censor a user. This is not something we want necessarily. How credible is this commitment to share revenue, et cetera, et cetera, commitment to a certain price or something like that. Or you could just have no kind of commitment whatsoever from the bidder and have all of the auction logic be contained within the item that's being sold. That's the fee escalator example. Ask me about it afterwards if it doesn't make sense. And so when we look at these archetypes, we have to think about how within each category, within each design, there's also this additional dimension of what information is being communicated, what's being transferred from the bidder to the seller as well.
00:24:02.930 - 00:25:12.260, Speaker A: And so that's my attempt at communicating the archetypes. And like I was saying earlier, we might want to posit that revenue maximization for the seller is our goal in the auction but there realistically are other properties that we care about and these properties are interrelated. And so I'll try to highlight some of the important ones. But again, maybe there are other ones that I haven't highlighted that are also important or I haven't thought about. So what are these properties? So one of them is civil compatibility, right? And I say civil compatibility instead of like civil proofness or civil resistance, because as we all know, we operate in a world where we have cheap pseudonyms, right? It's very easy to make a fake account, a new EOA, a new whatever, and all of our auctions will exist in this kind of world unless we implement some mechanism to prevent it. And so I say civil compatibility, because civil proofness implies, or has been used to imply that is not to create any sybils. But that's quite a strong requirement.
00:25:12.260 - 00:26:02.310, Speaker A: I would say the requirement should be that the auction operates well, even in the presence of civils and I'll get into more details in a second, right? So one problem is civil bidders. You never know if all of these bids are coming from one entity or many entities. But another problem is civil sellers. So it might be the case that the item which is being auctioned or that which is being auctioned off was submitted by one of the bidders themselves. You might ask why that is a problem and I'll give an example in a second. So what about like a sealed bid first price auction, which is like vanilla auctions, right? I think that's fine. I think there's some results which that's fine for the civil bidders case and for the civil sellers case.
00:26:02.310 - 00:26:52.928, Speaker A: I don't think that anyone's going to bid on something that they don't want to actually execute. But what about a combinatorial auction? Actually, there's a bunch of literature, there's some literature on this, I would say. And one result, for example, is that we know that efficiency is impossible in the presence of civil bidders in a combinatorial auction, which is not what we said we care about. What we said we care about is revenue maximization. And so it's not a direct result. But what this result shows is that actually, in the presence of civil bidders, it's more complicated to run this auction and we can't get the same guarantees. But what if we add a civil sellers as well? So, for example, in a combinatorial auction, if I'm a bidder, calcswop is an interesting example.
00:26:52.928 - 00:27:35.568, Speaker A: If I'm a solver, I can submit ahead of time, I shouldn't use calsop. It's a combinatorial auction. No, it's slightly different as well. But if I'm a operating a combinatorial auction and I'm a bidder, I submit my own transaction, assuming that as a seller of the transaction, I will get some of the payout or some of the revenue generated by this transaction. Then instead of bidding on items A, B and C, which I care about, I bid on items A, B and C and my own transaction. And what this does is that it makes my bid look larger. But some of the value of that bid is actually flowing back to me and this can skew the results of the auction.
00:27:35.568 - 00:28:54.140, Speaker A: And actually we know that this is a problem and Max, who was here earlier, he's busy looking into this, so I recommend speaking into him. But it's not pretty and it's very hard to do. So let's hope someone figures something out soon. Batch Auctions I don't know, that's the cowswap example actually, and I don't have a steering for you, but I would imagine that depending on the design, this is a problem and speaking to some solvers, this is something that people have thought about at least. And it definitely adds another dimension which the auctioneer has to reason about. And so we have to think about these things when we design our auctions and of course we can design mechanisms to resist sybils, right? But then if we require stake, if we require KYC, these kind of things, these change other properties of the auction we like, perhaps it reduces the competitiveness, perhaps it allows for easier collusion, these kinds of things. Another property which we should all be very familiar with is trust assumptions, right? I think we get different flavors of trust assumptions, right? So of course the question is on a very high level is like the auction is guaranteeing me some sort of thing, some sort of property or set of properties.
00:28:54.140 - 00:29:56.476, Speaker A: What trust assumptions do I have to make for that to be true? One is credibility, which Tarun was talking about earlier. What is the incentive of the auctioneer? And here when I say auctioneer, I really mean the auction system. Perhaps it's literally like the flashbot server or someone's server. Maybe it's a decentralized network of people, maybe it's some other mechanism that doesn't bootstraps like the existing validator set, et cetera, et cetera. Right? But what is the incentives? Is someone actually going to execute on the auction as they promised? And on top of this, you should think about how easy it is to deviate. Does deviation require solving some NP hard problem which only gives marginal returns? Or is it low pickings for Google or for whoever? Then another question obviously decentralization the number of parties involved. Where is the mev? What can people do to screw the auction and then the failure modes.
00:29:56.476 - 00:31:12.250, Speaker A: If trust assumption A fails, what happens? Do I lose all of my money? I get a slightly worse price? Can I tell whether did happen or is it very hard to detect? A quick example to illustrate why these are important. You could think of a trusted auction house example, right? So there's one item and we have many bidders and we allocate it and we have a trusted auctioneer which manages the system, gives an item to the highest bidder, or we have in this. Example a fee escalator, right? In the example of a trusted auctioneer, this auctioneer can pretend he didn't see any of the bids except one and have that one bidder bribe it on the side. Allocating this item for effectively nothing and capturing money on the side. Whereas a fee escalator where the auction is baked into the semantics of the transaction relies only on this transaction being seen or this order being seen by multiple parties and the price discovery of the Dutch auction then working. And so the trust assumptions that you need for a fee escalator are much better than an auction house model but the question of how you implement privacy for the fee escalator is of course much more difficult than for the auction house model. So these are things to keep in mind.
00:31:12.250 - 00:32:23.520, Speaker A: So a trusted auctioneer needs to collude with only one bidder whereas for the fee escalator to work, for it to completely break, you need all of the competitive parties to collude which seems like a much higher barrier. And then of course there are other considerations when we think about this like latency and economic costs. If you decentralize the system, you have to expect that it's like somewhat slower than a centralized system, right? And there might be additional economic costs because you have to incentivize all of these actors participating. Great, that's perfect timing. Okay, so properties of an ofa I'm just going to give you a summary of things which I think are important from what I've said and a couple of things I didn't talk about but I just want to briefly mention. So the first property that I mentioned earlier is like what is being transferred, right? So what is the informational property of the item being transferred? How general is your auction? Does your auction work only for certain kinds of orders like swaps basically or does it work for pretty much anything? I think this is a philosophical question as well. There's a degree of value in specialization now because mev is mostly concentrated in swaps and whatever in the status quo.
00:32:23.520 - 00:33:19.810, Speaker A: But from my personal perspective, a lot of the value proposition of blockchain is that it's supposed to change many facets of life, introduce, reduce trust assumptions. In all of these different places we have monopolists and very powerful coordinators. And if that's what we're trying to do, then I think we should design auctions as much as the constraints allow a wide range of possibilities. Because not only are we trying to improve what's happening to not only are we trying to improve the outcomes of users in the current applications. We are also trying to enable other and better applications to be implemented. Right? Security and trust assumptions sybils fall under this auctioneer like trusting the auctioneer falls under this revenue. Of course this is like one of the big things we care about.
00:33:19.810 - 00:34:22.704, Speaker A: UX. What latency does a user incur? How much complexity does the user have to suffer to act with a system, acting system and in sustainability is something I didn't mention, but I think it's actually really important. Right. Revenue relies on some degree of competition on the other side of the market. If the market tends to centralize with time, can you expect this revenue to stay at the same level? If latency races are very important, and we believe that latency winning a latency race relies on hardware investments and that these kinds of hardware investments sustain only a handful of parties, do we expect the same degree of competitiveness in ten years time, et cetera, et cetera. And then other things I didn't mention truthful bidding, that's something that some people care about. I don't know if it's that important, but it does make the playing field much flatter for searches, which does increase competition.
00:34:22.704 - 00:35:27.304, Speaker A: And then accuracy of redistribution, combinatorial auctions, batch auctions, all these kinds of things. Auction multiple orders at the same time, and there's some value allocated. How do you redistribute this value? Do you send it to MetaMask? Do you distribute it equally among the different orders? All of those actually have? Especially distributing equally among the orders has its problems, especially when it comes to security concerns. So I'll leave it at that. And the final message I'd like to leave you guys with, and I appreciate your attention, given the sort of relentlessness of today, is that there's a pixelated utopia that we're all aiming for, right? And not only are we trying to sort of mitigate things that we don't like about the current system, but we're trying to design something that's better than the status quo, better than TradFi. And so I think it really makes sense to really explore the corners, the nooks, and the crannies of the design space to see what lies outside of our mental models, what lies outside of our assumptions. Yeah.
00:35:27.304 - 00:35:46.050, Speaker A: So that's the content of the talk. And then I'll finish off with a very basic thing, which is an illustration of the value of information sharing. I present you with two QR codes. One presents you with an opportunity to troll me. The other is me trolling you. And you're welcome to scan if you like or not.
00:35:49.060 - 00:35:57.940, Speaker B: Question what do you think is the optimal outcome of what are you trying to optimize?
00:35:59.640 - 00:36:01.364, Speaker A: I guess this is an interesting question.
00:36:01.482 - 00:36:29.680, Speaker B: If you're thinking about just the order flow auction component, if you're thinking about the logic, the question came up earlier, like, where does the value accrue? How much value needs to flow to validators for this to be like a stable equilibrium or whatever? I think that's a really hard question, but I think a heuristic for trying to answer to say okay with the order flow auction with some constraints on security assumptions and generality of order flow.
00:36:30.020 - 00:36:31.488, Speaker A: Maximizing for revenue, I think.
00:36:31.494 - 00:36:46.070, Speaker B: Is a really good heuristic revenue for the seller, obviously. Especially because, like Thomas pointing out, you're competing with other implementations we really might not like.
00:36:46.920 - 00:36:47.830, Speaker A: For example.
00:36:51.800 - 00:36:56.788, Speaker B: It makes sense to maximize permission.
00:36:56.884 - 00:36:57.656, Speaker A: Oh, really?
00:36:57.758 - 00:37:19.180, Speaker B: Okay, so I can only troll you. But there was a question. How do you see us battling better trust for the upcoming rows?
00:37:22.560 - 00:37:24.944, Speaker A: Yeah, so that's something I was supposed.
00:37:24.982 - 00:38:31.220, Speaker B: To say, but I said but obviously if you just really focus on good revenue, it's easier to make some soft assumptions. It reduces cryptographic load, you don't have to read as many hashes, whatever you don't have to send. But that's a problem that we're trying to address before. And so privacy is part of it and part of it also is just like a feedback process between block construction and the order flow. And ideally, it's not exactly clear how to do it, but ideally we can have some feedback process between block construction and the order for auction, so that when the auction takes place in place, the auction is happening with as much information as possible. I guess another answer also is that it's an aggregate process. Right? So if you have a decentralized process, you can allow heterogeneous parties that have different views and different strategies to collaborate.
00:38:31.220 - 00:39:01.564, Speaker B: And even though you incur some cost from decentralization, it might be that the aggregation of all these different strategies ends up being more valuable than that of any individual could do. And perhaps that outweighs the latency and decentralization cost. So it's always been yeah, but any.
00:39:01.602 - 00:39:10.136, Speaker C: Ideas ensuring that we either take salts.
00:39:10.168 - 00:39:15.510, Speaker B: Or so you're asking what is sustainable, what has become what it takes? Yeah.
00:39:16.440 - 00:39:18.470, Speaker C: Are the ideas to come back?
00:39:19.720 - 00:40:06.196, Speaker B: So I think the very high level answer is that you want the market to be as competitive as possible over time. And what that means is that you want to have low barriers of entry and these kinds of things, but you also want the rewards within the system to be distributed in a way that isn't just concentrated on the single actor. And so if you think about blockbusting, which is really the other side of the searching of the order flow users and searches Blockbusters, on the other side, if you allow blockbusting to be like a decentralized process where many actors are benefiting from it. That's better than a world where only a single block constructor is taking all of the value in a single spot. And because that value that they extract implies that no one else is able.
00:40:06.218 - 00:40:08.870, Speaker C: To access that value, some research inside.
00:40:15.080 - 00:40:16.230, Speaker B: Some sort of.
00:40:17.960 - 00:40:43.488, Speaker C: Decentralized searching, that's an idea. But if you have this execution market and only there are specific individuals that in five to ten years are able to live off the very small margin. So there's a notion that dynamic seems to still exist there, even if it's very easy to get in.
00:40:43.654 - 00:40:45.984, Speaker A: Right? Yeah.
00:40:46.102 - 00:40:49.280, Speaker B: What you're saying is easy to get in, but there's a huge competitive edge.
00:40:51.460 - 00:40:52.608, Speaker A: I don't have a full answer for.
00:40:52.614 - 00:41:28.540, Speaker B: You, but one interesting thing to think about is like, what is the dimensionality of your what are people bidding over? Is everything you're biding over the exact same thing? Is everything like a swap and everyone just competing for swaps and you have this one bot or you're competing for everything, maybe look very different. And maybe a swap is already kind of like a multidimensional thing. So if you think about these auctions that happen way ahead of time, what you're betting on is an expectation. And an expectation is a very like expectation of all things. There's no conditioning no conditioning information to condition your expectation.
00:41:30.960 - 00:41:31.960, Speaker A: Single dimension.
00:41:32.040 - 00:41:43.732, Speaker B: But if there's more information to condition your bid on oh, I know what pair it is. Maybe it's not even a swap. If there's more information to condition your bid on, you actually have like, a market of many different dimensions that people are competing on.
00:41:43.786 - 00:41:45.284, Speaker A: And that allows for niches to form.
00:41:45.322 - 00:41:46.660, Speaker B: A different type of actors.
00:41:47.080 - 00:41:53.030, Speaker C: Those niches compete controlled by actors. So I'm trying to do all the good.
00:41:58.600 - 00:41:59.170, Speaker B: Like other.
