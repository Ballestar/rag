00:00:00.170 - 00:00:12.000, Speaker A: Censorship resistance. The title doesn't suggest it, but this is actually going to be an Mev talk. So it turns out there's quite a lot of intersection between mev research and censorship resistance research.
00:00:12.000 - 00:00:39.094, Speaker A: Okay, so just first of all, why is censorship resistance important? And in my opinion, it's kind of one of the foundational pillars for systems like Ethereum to be successful in becoming kind of settlement layers for the internet of value. And the reason is that there's this Mimetic chain which starts with sensitive resistance and ends with things that we really want. So what is this chain? It goes through credible neutrality.
00:00:39.094 - 00:00:57.520, Speaker A: Without resistance, you can't have credible neutrality. Without credible neutrality, you can't have legitimacy. Without legitimacy, you can't have this idea of monetary premium, which is the asset maybe having value above and beyond its raw utilitarian value.
00:00:57.520 - 00:01:17.160, Speaker A: And then without monetary premium, you can't have the trillions of dollars of economic security that we need and the trillions of dollars of economic bandwidth that we need in the context of DeFi. Okay? That's the only motivation slide. I guess the rest is more focused on the topic at hand.
00:01:17.160 - 00:01:50.314, Speaker A: Okay, so first of all, I guess what is censorship? I guess one of the good things is that in Ethereum we have a very clean way of defining censorship. And this is kind of an underappreciated feature of EIP 1559, which is basically that with EIP 1559 we have dynamic blocks. What does it mean? It means that we have this target gas price, sorry, gas, of 15 million gas.
00:01:50.314 - 00:02:07.010, Speaker A: And we have the gas limit, which is twice that. And blocks can vary up to the limit is twice the size of the target. And so what that means is that most of the time there will be free and unused space in the blocks.
00:02:07.010 - 00:02:40.350, Speaker A: And actually there's a statistic which I looked up, which is that 80% of blocks have at least 1 million gas unused and 1 million gas is enough to put through even some fairly large transactions. Okay, so we have this free space. Why is it useful? And the reason it's useful is because if there's free space and simultaneously there is a transaction which is pending in the Mempool and is not making it on chain, then that's kind of this sign that there is censorship.
00:02:40.350 - 00:03:05.640, Speaker A: And the reason is that as a builder, there's no reason why I wouldn't include this transaction, right? I have free space and it's a fee paying transaction. So it should be in my rational best interest to include that transaction. And basically this is how we can just simply define censorship, which is the non inclusion of transactions when there is available space.
00:03:05.640 - 00:03:23.722, Speaker A: And I guess kind of two edge cases are if the block is full, then that doesn't count as censorship. And the reason is that your transaction might not be the most valuable one to include right now. And it's not sufficient to look at the tip.
00:03:23.722 - 00:03:44.770, Speaker A: You also need to take into account the mev. So there could be transactions with lower tips than yours that are still getting included before you. And if there's no block whatsoever, if it's a so called empty slot, then that also doesn't counter censorship because basically the validator is potentially offline.
00:03:44.770 - 00:04:09.206, Speaker A: Okay? Now one of the things that I think is important to clarify in our mind is like these two different concepts, because people talk about censorship and they get the two concepts mixed up. So there's this notion of weak censorship and this notion of strong censorship. And really the topic at hand today is weak censorship.
00:04:09.206 - 00:04:26.674, Speaker A: But let's distinguish the two. So weak censorship is this idea that some of the blocks will be censoring. And so as a user, I kind of have to wait extra time for my transactions to get included on time.
00:04:26.674 - 00:04:35.518, Speaker A: So not all the blocks are censoring, just a subset. And let's take an example. Let's say that 90% of the blocks are censoring.
00:04:35.518 - 00:05:02.990, Speaker A: That means that the average inclusion time for transactions goes up by a factor of ten. And so we go from an average of twelve second inclusion time to 122nd inclusion time, which is roughly two minutes, which is kind of suboptimal. But in a way it's not this other notion of censorship, which is strong censorship, where your transaction simply doesn't make it on chain.
00:05:02.990 - 00:05:41.100, Speaker A: And the reason why there's this separation is because the cause of the censorship is very, very different. So with weak censorship, it all comes down to block production, right? We have this very complicated pipeline or mev supply chain that leads ultimately to blocks, and somewhere in this pipeline there could be censorship, and that leads to some fraction of the block censoring. Whereas on the other hand, strong censorship is something that originates from attesters, and there is basically a 51% attack.
00:05:41.100 - 00:05:51.634, Speaker A: So in this talk, we're going to kind of ignore the strong censorship. Now, let's look at the problems of weak censorship. One of the obvious ones is UX degradation.
00:05:51.634 - 00:06:25.570, Speaker A: I want to make a transaction is being censored, I have to wait longer, which is obviously not great, but even in this fairly extreme example that I gave, where 90% of the blocks are being censored, in the case of Ethereum, you still get this two minute inclusion time, which is still five times faster than Bitcoin. So maybe UX degradation is not so much of a systemic risk. I guess the other problem is this idea of extracting mev by delaying transactions.
00:06:25.570 - 00:07:03.810, Speaker A: So you might be delaying Oracle updates on chain, you might be delaying liquidations, or you might be delaying some type of for example, if you want to pump a specific asset, you can just delay all the sell orders and only include on chain the buy orders. And so that's something that's not good. And something that's also very important to me is this idea of perceived censorship resistance even though Ethereum itself is not censoring, it's kind of these individual participants in the supply chain that are censoring.
00:07:03.810 - 00:07:22.060, Speaker A: People don't really make the distinction and so they think Ethereum itself is censoring and Ethereum itself is kind of losing this legitimacy which is not good. And strong censorship is pretty obvious why it's bad. It just breaks permissionlessness, self sovereignty and other things that we care about.
00:07:22.060 - 00:07:41.566, Speaker A: And in terms of the solution space here, one of the reasons why I'm here I guess, is because I'm very optimistic about being able to solve weak censorship. I think we have the technology basically to effectively fully solve weak censorship. And this is what this talk is about.
00:07:41.566 - 00:08:17.702, Speaker A: Without any humans being in the loop, we're just incrementally improving these auctions that are basically the foundations of the block production process. Today we might have censorship, but in 510 years we just won't have this weak censorship. Okay? And I guess one of the interesting things here is that a lot of the tools that are going to present around solving weak censorship are actually tools that were developed in the context of mev.
00:08:17.702 - 00:08:50.210, Speaker A: So for example, there's this gadget which is called mev smoothing. And the reason why we researched it is we wanted to solve the reward volatility as a validator. Because as a solo validator, every once in a while, maybe once every few months, you get really lucky, you get to build a block and then you get to extract all the mev in this one slot and you make a lot of money in just a small amount of time, but that leads to very spiky returns.
00:08:50.210 - 00:09:26.254, Speaker A: And the question was, can we smooth the mev so that basically all the validators have this non volatile rewards. And it turns out that smoothing actually is a way to address proposer censorship, right? So it's kind of surprising that there's this connection between volatility and proposers, but that's the way it is and I'll explain it later. Another interesting thing is this idea of encrypted mempools.
00:09:26.254 - 00:09:55.130, Speaker A: So those were designed to try and prevent front running and like various forms of so called toxic mev where basically you're in a way exploiting a user transaction. And it turns out that this can be used to address builder censorship, which is kind of also this somewhat maybe counterintuitive relationship. And then this idea of censorship resistance lists which also address builder censorship.
00:09:55.130 - 00:10:17.454, Speaker A: And as I mentioned, it also addresses delaying, right, these kind of strategies in mev where you're just delaying transactions. Okay, so let's kind of really quickly refresh this block production pipeline. It's been mentioned many times, but the way I present it is kind of a very linear and may be useful.
00:10:17.454 - 00:10:39.766, Speaker A: So it starts with the user has some sort of intent and they're going to use an interface. This could be MetaMask, it could be uniswap website and the interface is going to generate a transaction. The transaction is going to get broadcasted to the mempool, the searchers are going to see it and they're going to include them in bundles.
00:10:39.766 - 00:10:59.390, Speaker A: It could be even just one transaction bundles, which is basically just the transactions. And then these bundles percolate to the builder. The builder produces blocks, those blocks goes to the relay, and then the relay sends these block headers to the proposer.
00:10:59.390 - 00:11:23.990, Speaker A: And so some people call it like an mev supply chain. I mean, I mentally think it's more of as a linear clean pipeline. And then basically the question is, there could be censorship at every layer of the stack here and how do we address every single layer? The user.
00:11:23.990 - 00:12:24.934, Speaker A: This is something that we don't have too much control over because basically the foundations are in civil rights, like the right to property rights, for example, or freedom of speech. If you live in a country like North Korea, then censorship resistance is not even an option to you because you're censored at this top layer. In terms of the interfaces, I think I'm optimistic that we can get censorship resistance through technologies like ENS avoiding the Coms, things like IPFS avoiding AWS, and technologies like the graph as well, which hope to become decentralized searchers, in my opinion, are not too much of an issue just by design, right? Like the searchers, what they do is that they observe the mempool and their job is to order and insert transactions.
00:12:24.934 - 00:12:44.574, Speaker A: It's not really to remove transactions. Like once the transaction has been broadcast, there's no kind of way for the searchers to just remove it because the main thing they're doing is observation and insertions and ordering. But the builders and the relays can censor.
00:12:44.574 - 00:13:03.190, Speaker A: So let me skip those for now and work backwards to the proposer. As I mentioned, smoothing is kind of this way to effectively completely remove proposer censorship from the equation. And the way it works is basically it canonicalizes block production.
00:13:03.190 - 00:13:16.726, Speaker A: So the proposer basically has no choice in selecting a block. He must choose the highest biding block. And that removes kind of any discretion that the proposer might have in censorship.
00:13:16.726 - 00:13:28.510, Speaker A: I'm going to discuss this a bit more later. Relays, they're just a temporary piece of infrastructure. They're going to go away with so called enshrined PBS or native PBS.
00:13:28.510 - 00:14:15.274, Speaker A: And so really the big problem here to try and address is builder censorship. And we have these two technologies which I mentioned, which are encryption, namely Encrypted mempools and to this idea of inclusion lists. But before diving into the fancy stuff, let's talk about super low tech technology to address censorship, which is what I call altruistic self building, is this idea that you just build blocks in the same way that blocks used to be built in the early days, where you just have GEF or some other execution.
00:14:15.274 - 00:14:43.490, Speaker A: Clients naively order the transactions in the mem pool by tip, and then that's how you build your block. Even as a solo validator. And the nice thing about altruistic self building is that there's no censorship and moreover, there's no sandwiches and there's just much less toxic mev.
00:14:43.490 - 00:15:03.550, Speaker A: And the reason is that if you're working directly with this public mem pool, sandwiches have this issue where they can themselves get sandwiched. And so if sandwichers use the public mem pool, they are actually exposed. There's this like salmonella attacks and whatnot.
00:15:03.550 - 00:15:27.414, Speaker A: And so not only are you kind of addressing censorship, but you're also partially addressing this toxic mev problem. And this kind of leads to good vibes in the short term. And so this is one of the reasons why I intend to be self building, at least in the early days.
00:15:27.414 - 00:15:39.590, Speaker A: And there is a sacrifice. This is where the word altruistic comes in. It's like there's this financial sacrifice that you're making, which is that you're reducing your income as a validator.
00:15:39.590 - 00:15:53.050, Speaker A: You might lose this 1% extra Apr. You might go from 6% to only 5% Apr. But ironically, this might be a rational move kind of financially.
00:15:53.050 - 00:16:32.890, Speaker A: And the reason is that if many, many people are spreading these good vibes by self building, well, the value of your 32 E principle might go up. And so you're sacrificing a little bit of income, but you're basically potentially increasing the monetary premium of the asset that you're staking with. And then maybe another rational reason to be self building, at least in the early days, is that if you're not running infrastructure like mevboost, then you won't be exposed to bugs, software bugs in the PBS infrastructure.
00:16:32.890 - 00:16:46.298, Speaker A: Okay? But that's kind of the only piece of short term stuff. The rest from now on is going to be kind of long term fundamentals thinking. So I mentioned this idea of smoothing.
00:16:46.298 - 00:16:57.890, Speaker A: What is it? So just as a quick recap, we have this market of builders. They produce blocks. Some of them are censored and some of them are not.
00:16:57.890 - 00:17:20.730, Speaker A: And the proposer has full discretion to choose which blocks they include. And one of the things that they can do is say as a proposer, I only want to be working with builders that are compliant, let's say. And so they will be focusing their attention on these blocks which have censorship.
00:17:20.730 - 00:17:55.426, Speaker A: The idea of mev smoothing is that we're going to basically ask the proposer to take all the blocks that are being built by builders and to order them by their bid. Basically every block has a bid which basically says how much money the proposer will earn if they include the block. And so in a way, we're kind of forcing the proposer to maximize their own revenue, which a rational proposer should be doing.
00:17:55.426 - 00:18:15.334, Speaker A: And the way that we enforce that is actually with attesters. So we ask attesters to do the exact same thing to observe this block building market, to order by bid, and to only attest to the block that the proposer chose. If that happens to be the highest bidding block.
00:18:15.334 - 00:18:38.126, Speaker A: And so if the proposer chooses one of the centered blocks which is not at the very top, then that block wouldn't make it in the canonical chain. So here there's only one choice, one arrow that the proposer can choose. Now the other technology is encrypted mempools.
00:18:38.126 - 00:19:14.378, Speaker A: And now that we've kind of fully addressed, in a way, the problem of proposers, let's look into builders and encrypted mempools is like surprisingly simple idea, which is that you have a transaction, and before you broadcast it on the public mempool, you encrypt it. And so that gives you a sense of privacy while your transaction is in the mempool. The second step is that your encrypted transaction gets included on chain, it gets decrypted after it's included on chain and then it also gets executed.
00:19:14.378 - 00:19:49.158, Speaker A: And so you can see here this idea of encrypting the transactions makes it more difficult to censor because the process of block building is all about the second step, this inclusion step. But those who are participating in blockbuilding don't have information about the content of your transaction and so you're making it harder for them to censor. And so basically there's this two step process off chain and on chain and the on chain stuff can all happen in one single slot.
00:19:49.158 - 00:20:14.690, Speaker A: So that doesn't actually affect the user experience in terms of adding additional latency because it all just happens in one shot. Now, why is encrypted mempools important basically when it comes to censorship? And the reason is that it fundamentally changes the economics of censorship. So let's take the perspective of a censoring builder.
00:20:14.690 - 00:20:30.546, Speaker A: There are various types of transactions that come in. There's transactions, the green ones where I could have an edge as a builder over other builders. This is where all the sophisticated mev lies.
00:20:30.546 - 00:20:55.146, Speaker A: It could be the sandwiches, it could be the arbitrage, whatever. Then there's what I call neutral transactions. Neutral transactions are transactions where extracting the maximum amount of mev is trivial and that includes for example, transfers, ERC, 20 transfers, eve transfers, NFT transfers and the reason is that the only amount of mev is the tip, there's nothing more to extract.
00:20:55.146 - 00:21:27.926, Speaker A: And so you're going to be equally as competitive including those transactions versus other builders. And then from the perspective of a censoring builder, there's basically this economic handicap which is that if you've chosen to not include certain types of transactions, you're not going to be able to benefit from the tips that these transactions provide and so you're going to be economically handicapped. And if you remember with mev smoothing we're kind of trying to include blocks that maximize mev.
00:21:27.926 - 00:21:56.222, Speaker A: And so being handicapped puts you at a fundamental disadvantage. And so the simple equation here basically is that we want to be looking at the difference between the edge and the handicap. We want the edge to be as small as possible and the handicap to be as large as possible and ideally, we want for censoring builders for the handicap to be larger than the edge.
00:21:56.222 - 00:22:20.186, Speaker A: And if that's the case, then it doesn't even make sense rationally to be participating in block building because you'll just be losing money all the time. Now, pre encryption, we could expect that the fraction of transactions that are being centered is tiny, let's say only 1%. And so your handicap is really, really small.
00:22:20.186 - 00:22:37.482, Speaker A: And so that's not much of a handicap, which is bad. And one of the things that we want to do is basically increase that handicap. Okay? So one of the things I want to highlight here is that there's two types of edge transactions.
00:22:37.482 - 00:23:12.842, Speaker A: There's basically mev opportunities that arise from the environment, they're just available in a latent fashion, and that's things like arbitrage, they don't require a user to make an action for mev to be extracted. And then there's this second type of fancy mev, which involves specifically reacting to a user transaction and front running them. And basically what I'm arguing is that encryption does two things.
00:23:12.842 - 00:23:48.414, Speaker A: One is that it dramatically, by roughly 100 x, increases the handicap and it also reduces the edge that a builder can have, and so let's say by a factor of two. And so there's this roughly like 200 x improvement in the economics of sensoring builders. Now, the reason why the handicap grows by roughly a factor of 100 is because as a censorer, I don't know which encrypted transactions I need to censor.
00:23:48.414 - 00:23:56.294, Speaker A: And so I need to go censor all the encrypted transactions. I'm kind of forced all or nothing. Either I include all the encrypted transactions or I include none of them.
00:23:56.294 - 00:24:25.294, Speaker A: I can't just discern which of the encrypted transactions I do want to censor. And so if I am going to censor, I need to basically forego all this bottom part of the block and have a huge handicap. And in terms of the edge that I could have, I have to basically forego my edge is reduced because I can't see the content of user transactions.
00:24:25.294 - 00:24:45.834, Speaker A: And so it makes it very, very difficult to do these sandwich attacks. Okay, great. Now it's all well and good to kind of work at the economic layer and really economically force out censorship.
00:24:45.834 - 00:25:25.690, Speaker A: But what if we're in a very, very extreme situation where every single builder happens to be censoring? And here this is where we're, we're introducing this notion of transaction inclusion lists, which is basically a constraint that the proposer is setting on the builder and it's a constraint that's kind of enforced on chain. So the proposer says to the builder, hey, I want these specific transactions to be included on chain. I believe these transactions are being censored and the builder has no choice, if they want to have their block be included on chain to respond with a block which contains these kind of mandatory transactions.
00:25:25.690 - 00:25:53.670, Speaker A: And so, so long as we have a minority of proposers that are willing to not censor, then we'll be in a position where at least some fraction of blocks will be non censoring, even if 100% of the builders are censoring. And that's the end of my talk. There's this whole other topic of strong censorship, but not the subject of today.
00:25:53.670 - 00:25:55.240, Speaker A: And thank you.
00:26:02.330 - 00:26:29.860, Speaker B: Hi, quick question. How do you think about block space markets potentially enabling weak censorship via toxic mev? For example, you could propose multiple full flashbots blocks in order to exploit a TWAP oracle, which may not be totally economic, but with stuff like block space futures markets, you could definitely see it happening. Are there tools to mitigate against that, or is that not as big of an issue as I think?
00:26:31.270 - 00:26:52.630, Speaker A: Right, so one thing that does help on the whole multi block mev story is this idea of single slot finality. And that helps kind of removing reorgs. And that's one way to kind of get these multi block mev opportunities in which we kind of remove.
00:26:52.630 - 00:27:09.758, Speaker A: And that's arguably like a form of weak censorship. Now, in terms of, I guess your question was about future blocks, not so much about reorgs, but looking into the.
00:27:09.764 - 00:27:12.062, Speaker B: Future more just like futures markets for.
00:27:12.116 - 00:27:38.280, Speaker A: Block space right now. One of the I guess, features about the beacon chain is that the proposers know in advance that they're going to be proposers, unlike proof of work. And so that's actually one of the fundamental security degradations versus a proof of work where you fundamentally don't know.
00:27:38.280 - 00:28:11.838, Speaker A: Even the proposer himself doesn't know that he's going to be the next proposer. To be honest, it's a good question. I don't have a good answer off the top of my head, other than I guess it's a battle to be fought, first of all at the application layer to make sure that you're minimizing the mev but also encryption.
00:28:11.838 - 00:28:24.930, Speaker A: At the protocol layer, making it much, much easier for applications to design. Applications that don't lead to lots of mev and therefore don't give a lot of leverage to people who want to exploit these futures markets.
00:28:25.010 - 00:28:28.182, Speaker B: Okay, that makes perfect sense. Thanks for the answer.
00:28:28.316 - 00:28:50.640, Speaker A: I mean, the other thing maybe worth mentioning is that it's possible that the inclusion list kind of throw a wrench in the whole mechanism because that's kind of maybe a source of uncertainty, I guess maybe the proposers can pre commit to not using inclusion lists. So maybe that's easy to work around.
00:28:53.170 - 00:29:00.930, Speaker C: Hi, great talk. I was just wondering whether the encrypted mempool requires redesigning the transaction fees that are paid by the users.
00:29:01.350 - 00:29:16.870, Speaker A: Yeah, it does. So basically you need to solve the denial of service problem with the encrypted mempool. And so basically you need to have a zero knowledge proof that you have enough funds to pay for the base fee.
00:29:16.870 - 00:29:45.630, Speaker A: This can totally be done. Another thing that kind of needs to be done is that you need to pay for the base fee, regardless of whether or not the transaction is valid, once it's decrypted, it is definitely possible to do. And actually, I have a whole talk on all the complications of actually implementing that.
00:29:45.630 - 00:29:50.754, Speaker A: So you can find online, I think it's called MEVN cryptography. Okay, cool.
00:29:50.792 - 00:30:10.914, Speaker C: And one more thing. So for the inclusion in the block in terms of gas, do you need to make it available in the encrypted version of the transaction? Because you have to know how much transactions you can add to the block. So you need to know the gas cost of the transaction.
00:30:11.042 - 00:30:15.560, Speaker A: The gas limit. Yeah. So that's a good question as well.
00:30:15.560 - 00:30:39.360, Speaker A: There's various designs here, but one of the things that you can do is basically just simply make the gas limit public. But then the question is, does this gas limit leak information? And so one of the things that you can do here, for example, is just force very low granularity on the gas limit, for example. It has to be a power of two.
00:30:39.360 - 00:31:05.910, Speaker A: And so the gas limit falls within one of a few choices. You can also use very fancy cryptography like fully homomorphic encryption to basically work on the transactions themselves to build blocks in such a way that the transactions don't leak their gas limit and are still within the gas limit of the final block.
00:31:06.070 - 00:31:07.580, Speaker C: Okay, great, thanks.
00:31:14.270 - 00:31:22.054, Speaker D: So I guess you can imagine that part of a builder's edge might be like, being really good at ordering transactions, right? Let's say you have a lot of.
00:31:22.112 - 00:31:23.338, Speaker A: Can you speak a bit louder?
00:31:23.434 - 00:31:33.234, Speaker D: Sure. I was saying part of a builder's edge might be being really good at ordering transactions. So you could have a lot of large buy and sell orders, for example, with some limit price.
00:31:33.234 - 00:31:50.680, Speaker D: And if you're a really good builder, you might alternate them so they all work and they all succeed. But if everything is encrypted and you order them in some average way, then a few of them will succeed and you'll kind of destroy a lot of value by not ordering things properly, right?
00:31:54.090 - 00:31:55.270, Speaker A: Sorry, can you repeat the question?
00:31:55.340 - 00:31:59.718, Speaker D: Sorry. So let's say you have a bunch of memple transactions that each want to.
00:31:59.724 - 00:32:02.490, Speaker A: Like, can you speak slower as well, please?
00:32:02.560 - 00:32:29.550, Speaker D: You have a bunch of memple transactions to buy and sell something, and they each want to buy and sell something. And if you're a builder, maybe your edge is being really good at ordering these transactions. So you order the buys and sells so that you have like, buy, sell, buy, sell, and they all succeed, right? If they're encrypted, you give up all of this, right? So you end up with some average ordering, in which case some small number of them will succeed.
00:32:29.710 - 00:32:47.160, Speaker A: So one of the things worth mentioning, I guess, is as a builder, part of the transactions will be totally unencrypted. There will be your transactions that you put at the very beginning there will be your priority transactions. And so if you're only doing Arbitrage, then encryption changes nothing.
00:32:47.160 - 00:32:54.390, Speaker A: Really? Encryption only helps whenever you're dealing with user transactions that are being exploited.
00:32:55.690 - 00:32:57.690, Speaker D: Yeah, I'm saying these are user transactions.
00:32:57.770 - 00:32:59.520, Speaker A: User transactions. Okay. Yeah.
00:32:59.520 - 00:33:15.800, Speaker A: Okay. I'm out of time. But happy to discuss this with you're.
