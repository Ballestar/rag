00:00:00.330 - 00:00:04.974, Speaker A: You. Hi everyone. Glad to be here.
00:00:04.974 - 00:00:26.950, Speaker A: Thank you Flashbots, for the invitation. I just want to spend 15 minutes to tell you about Pepsi, what it is and some of the open problems that we are considering and get some feedback from you guys and potentially some interesting research directions. So this is the situation today in Ethereum.
00:00:26.950 - 00:00:58.910, Speaker A: The Ethereum protocol has some amount of control over the validators. It sees a couple of things that the validators are doing, but it doesn't see everything that the validators do. And in particular it doesn't have so much control over the way that validators are building their blocks which led in the recent past to the separation between the role of a proposer, which is the validator staked in the Ethereum protocol, and the builder which makes the block on behalf of the validator.
00:00:58.910 - 00:01:22.280, Speaker A: The reason why this separation exists is because to make a very good block, it's kind of difficult. You have to be very sophisticated, know where the arbitrage are, potentially get some exclusive order flow. And so validators figured out that if they wanted to optimize their payoffs, they might as well delegate that function to parties that are specialized in doing that.
00:01:22.280 - 00:01:44.560, Speaker A: So I was working on that topic quite a bit last year. The more I was working on it, the more I felt that there could be dangers with this approach. So whenever something escapes the boundaries of a protocol, us protocol designers have this tendency of saying well, we should just enshrine it and then we can just solve a problem.
00:01:44.560 - 00:02:25.974, Speaker A: But enshrining PBS is enshrining a lot of things at the same time it's enshrining the fact that builders exist and that they provide some service to the network. This is perhaps less controversial after the vitalik blog post on the endgame, but it's also enshrining a very specific way of doing that, contracting between the builders and the proposers. So the builders build the whole block for you and that may be too course a mechanism to have in the protocol and why this mechanism may be too course because, well, if the auction is very bundled, the builder centralization might get worse.
00:02:25.974 - 00:02:34.334, Speaker A: And so I wrote this fairly long post about the topic just before defcon. So not many people read it. This was pretty much the reaction that I got.
00:02:34.334 - 00:02:58.242, Speaker A: But I was trying to make the case that we should think about unbundling PBS and potentially look at this system that I call protocol enforced proposal commitment to recover some of the flexibility that PBS was lacking in my opinion. So I'll get into that. I want to give you a quick intro to what this Pepsi system is.
00:02:58.242 - 00:03:19.690, Speaker A: Most of this talk is taken from a recent post that I have the Pepsi FAQ. The link will be in the slides and then I want to give you some sense of where we are going with this and what we're trying to think about as research problems. First, a little intro and some disclaimers.
00:03:19.690 - 00:03:25.054, Speaker A: Pepsi is discussed. Now a bit more. I want to say that Pepsi is not real.
00:03:25.054 - 00:03:37.434, Speaker A: It's not something that exists yet and that is in production. It's something that we're still thinking about. One of the big blockers is that it cannot be real until at least enshrined PBS is real and enshrined PBS is not real.
00:03:37.434 - 00:03:56.834, Speaker A: We are still working on this very hard. There are a lot of people that are thinking about this topic, but we need more time to think this through and we need basically most of the research that we're currently doing on EPBs to ship something like Pepsi. But the good news is that it can be instantiated without being protocolized.
00:03:56.834 - 00:04:24.442, Speaker A: So we can still try to enjoy some of the flexibility of the PBS auction with the Pepsi lens without going the full step of having such an infrastructure in the protocol. And for instance, these are some of the topics I will discuss, these diet Pepsi flavors that allow us to try out this system without making very invasive protocol changes. It's still an active area of research in my opinion.
00:04:24.442 - 00:04:30.994, Speaker A: So it's not a roadmap item. I don't think people are really planning on it. It's not a foregone conclusion either ways.
00:04:30.994 - 00:04:49.660, Speaker A: There could be good ideas that come out of this that eventually we decide are important and that we want to take on forward. But yeah, at this point I'm just trying to try and see if this is not a waste of time of everyone and if there isn't any fatal flow in that mechanism. So hopefully you can tell me.
00:04:49.660 - 00:05:07.230, Speaker A: And coke is better anyways. That's just a fact. Okay, so what is the motivation behind Pepsi? What is it trying to do here? I'll stay a bit more high level, but to me, Pepsi really satisfied two intents.
00:05:07.230 - 00:05:33.106, Speaker A: The first intent is really this generalization of entry in PBS. So having a system where builders are enshrined as, let's say, a core function of a protocol, but having some flexibilities in the ways that we might engage with these builders. So the principle of proposal builder separation is essentially to provide this fair exchange between a proposer and between a builder.
00:05:33.106 - 00:05:54.122, Speaker A: So the builder makes the block on behalf of a proposer and the proposer appends the signature if the builder did the thing correctly. And this fair exchange is pretty difficult to put in there. And so the idea of Pepsi here, the intent is to generalize that fair exchange and to say, well, we don't need to just fair exchange a whole block in exchange of some payment.
00:05:54.122 - 00:06:19.830, Speaker A: We can do things that are more flexible, such as partial blocks. So having different builders make different parts of a block or even having the proposer make one part of a block and a builder making another part or making blocks with different specifications. So these specifications, for instance, could be inclusion lists which are censorship resistance mechanisms that we are considering or things that have to do with ordering like FCFS or other things that could come from some committee.
00:06:19.830 - 00:06:48.650, Speaker A: The second intent, and really the reason at the time why I wrote this post was to try and move some of the use cases of Eigen layer from an optimistic failure mode to a pessimistic failure mode. So in Eigen layer you enter into some commitments as a validator and if you don't satisfy these commitments, you get slashed by the Eigen layer smart contract. It's pretty nice, it buys you a lot of economic security, but it's still some sort of exposed penalty.
00:06:48.650 - 00:07:12.070, Speaker A: You can still do the bad thing and get away with it by getting slashed. And if the bad thing earns you a greater revenue than what you expect to lose by getting slashed, you might still want to go ahead and do it. And I foresaw that for some of the use cases of Eigen layer we could do better and we could in fact prevent entirely the proposer from doing the bad thing by enshrining these commitments in the protocol.
00:07:12.070 - 00:07:35.494, Speaker A: So the difference between optimistic and pessimistic is getting slashed after the fact or not having the possibility to even make a block that is invalid and doesn't satisfy these commitments. I synthesize that with this Ven diagram. So Pepsi is neither a full generalization of EPBs nor completely englobing Eigen layer.
00:07:35.494 - 00:07:59.380, Speaker A: To me it sits a bit between the two. It aims to generalize some parts of PBS and it aims to provide a bit more security for certain use cases of Eigen layer. So first intent of generalizing EPBs is the idea that we've enshrined PBS where the proposer expects a full block from the builder.
00:07:59.380 - 00:08:19.432, Speaker A: We write directly into the consensus logic that this is what we expect. We write that we only accept full blocks from the builders and we check that validity condition every time the full node executes the state transition. And so the consensus logic is checking the validity based on this global setting that says we expect a full block from the builder.
00:08:19.432 - 00:08:46.550, Speaker A: And so the approach of Pepsi is saying what if instead of having this globally set in the consensus logic, what if we had some kind of generic evaluation function that could take in any argument that was provided by the proposer at the time of block creation. So the proposer would say my block will be valid if it satisfies this and this and this condition and if it's not, the consensus will just ignore it. So the rest of the nodes on the network will just forget about it.
00:08:46.550 - 00:09:04.684, Speaker A: So the name I gave to this idea of a generic function is it's a bit like a proposer hook. So it's a way for the proposer to inject a bit of programmability into the state transition function of ethereum. This is a schema of what this could look like.
00:09:04.684 - 00:09:30.388, Speaker A: For instance, this is adapted from the two slot PBS design. In the first slot, the proposer makes a commit block that contains consensus data such as the votes from the attestors, and it contains a template payload. So the proposer here would say I commit to building a block that uses two parts, one part given to me by builder A and one part given to me by builder B.
00:09:30.388 - 00:09:54.676, Speaker A: That's what happens during the commit phase. The block commit is finalized and during the reveal phase, the builders are expected to then reveal the parts of a block that they are making for the proposer and they are matched to the template that the proposer has made during the commit phase. That was for the first intent.
00:09:54.676 - 00:10:12.572, Speaker A: So, Generalizing PBS a bit more about these Eigen layer use cases. I took this from a podcast that Sriram did recently with Bell Curve where he explained that for him there's three main use cases for Eigen Layer. The first one is economic security where you just want to have as much money as possible behind a commitment.
00:10:12.572 - 00:10:35.210, Speaker A: So saying if this commitment is broken, a billion dollar will just evaporate. The second type of use case has to do with decentralization, where you want to have as many people, as many logically distinct entities behind a commitment that's useful. For instance, if you're running an NPC and you don't want the parties to collude, so you want the set of parties to be as wide as possible.
00:10:35.210 - 00:11:05.520, Speaker A: And the third type of commitments is proposers making commitments about the block that they are building and they are getting slashed if these commitments are not satisfied. And I feel like what Pepsi addresses is really the point number three. So having this facility that allows you to make commitments that are unbreakable, that are just making people ignore your block if you don't satisfy these commitments and disallowing you to do the bad thing that you could do from breaking this commitment.
00:11:05.520 - 00:11:20.402, Speaker A: Okay, so that was a bit of Pepsi philosophy. I just want to give some news. I think we have some interesting directions that we are pursuing myself, people in my team and also other people that we are collaborating with.
00:11:20.402 - 00:11:42.810, Speaker A: So I want to give you some ideas of what these are. The first idea is something we call Pepsi Boost and it's essentially using the current infrastructure of mev boost and having the relays of mev boost encode the proposal commitments. So the relay would be the one that checks the validity of these commitments.
00:11:42.810 - 00:12:18.338, Speaker A: Why we think that might be useful. This is motivated by something that many people have observed in the current mev market, which is that the top of the block is very valuable because that's where people want to lend their sex decks arbitrages and the rest of the block might have some interesting interactions with the top of a block. And so what we are aiming at here is saying that what if we divided the block between one part where we auction off only these slots for the sex decks arbitrages and the rest of the block part which can be built more generically by any other builder.
00:12:18.338 - 00:12:45.674, Speaker A: And we have some theoretical idea that this might make the auction more competitive, this might force integrated builders to unbundle these two functions and compete more fiercely for both parts. This is a paper by the SMG folks which were here earlier and we're thinking about that. We're trying to do a bit more research on that with Philippe who's an EPF fellow and trying also to develop a prototype.
00:12:45.674 - 00:12:57.694, Speaker A: So take a relay from mevboost and try to code this auction mechanism here. This is work with Barrat. Another flavor of Pepsi.
00:12:57.694 - 00:13:01.934, Speaker A: Again. Diet Pepsi. So out of protocol is the idea of Pepsi DVT.
00:13:01.934 - 00:13:25.318, Speaker A: And here hat tip Diego who's in the audience. And the idea now is instead of having the relays from Mavboost encode proposal commitments now you have distributed validator technology nodes that encode these proposal commitments. So distributed validator technologies is a way for you as a validator to essentially have a multisig that controls your signature capabilities.
00:13:25.318 - 00:14:02.120, Speaker A: So you say I'm a validator but I'm going to have other nodes in my network that needs to sign on a message before I can sign on my block. And if these other nodes, for instance, could be tees, are the ones that sign only if a commitment is satisfied by your block you can have this sort of game between the proposer so the DVT network preventing the proposer from proposing a block that doesn't satisfy the commitments made by the proposer. This is very interesting, Diego just posted about this yesterday so I encourage you also to check it out.
00:14:02.120 - 00:14:25.042, Speaker A: Another cool idea that comes out of our Pepsi research and it was one of the main criticism at the beginning is how do you burn money with Pepsi? So in Ethereum we like to find mechanisms that burn as much money as possible. We had the clue that EPBs would allow us to do this mev burn. How do we do that with Pepsi? That was not clear.
00:14:25.042 - 00:14:54.294, Speaker A: If you have general programmability of the proposal commitments, how does the protocol manages to tally up the value of the block that the proposal is making? That seemed like a hard problem, but we think we found a way to have this mechanism. It uses what's called as the parallel proposer mechanism proposed by Domophy for the commit block. So the idea here is you have every slot, a set of proposal.
00:14:54.294 - 00:15:12.622, Speaker A: Imagine 15 or so each proposer has to make the best possible commit block. So it has to figure out which is the best set of commitments that returns them the most value possible. So they make this commit block, they attach a bid to it and they say okay, this is the bid that will maximize the value that this block is making.
00:15:12.622 - 00:15:33.270, Speaker A: And once the proposals have made that the testers will enshrine or make Canonical the commit block that returns the most value to the protocol. And this allows us to essentially have a credible signal of what the value is for the block made by the proposer. So the status of that is we're still trying to think through whether this mechanism works.
00:15:33.270 - 00:15:53.466, Speaker A: But there is a long chain of dependencies. We first have to figure out EPBs and Mev burn for EPBs before we can be convinced that this really works. Okay, so there's a ton of flavors of Pepsi and I just wanted to have a bit of fun with it because I keep hearing this word and I'm the first one getting bored.
00:15:53.466 - 00:15:59.614, Speaker A: But we are planning this expansion of the Pepsi cinematic universe. We'll have Prof. Pepsi in November 2023.
00:15:59.614 - 00:16:07.010, Speaker A: We'll have the PE and the PC in February 2024. We'll have Pepsi two electric bugaloo. Look forward to that.
00:16:07.010 - 00:16:22.886, Speaker A: August 2024. Pepsifs first served cold. FCFS is very popular here march 2025 and finally Pepsi in September 2025 and many more hopefully if you guys can help us figure this thing out.
00:16:22.886 - 00:16:42.340, Speaker A: So thank you for your attention. Check out our work from the read and get in touch. It's been a long day.
00:16:43.850 - 00:17:05.402, Speaker B: Hey Barnaby, thanks for the talk. So I'm curious in the sort of last discussion about Domathy's Mefbur's proposal we're talking about having multiple proposals but also having these proposers engaged in potentially different kinds of commitments. And I can see the appeal in that that you have now sort of like a market for commitments and it's very interesting.
00:17:05.402 - 00:17:19.706, Speaker B: But is there not also some risk in that you make the market very complicated for the other side of the market and in doing so imposes like technical barriers to entry for people trying to sort of interact with the blockchain?
00:17:19.818 - 00:17:25.038, Speaker A: Yes. So by the other side of the market you mean the proposers would have to deal with that complexity?
00:17:25.214 - 00:17:27.474, Speaker B: Not the proposers, everyone else builders, everyone.
00:17:27.512 - 00:18:01.440, Speaker A: Else user facing tech. So today the way this market is sort of operational is via Mevboost which is a piece of software that does something pretty complicated but that you just run as something that sits behind your node as a proposer. I wouldn't expect that proposers if we have, I don't know, a thousand different proposals on the network that they'll all hack their different commitments, et cetera, I would expect that you would start to find pretty quickly which are dominant strategy commitment or market structures that you want to commit to.
00:18:01.440 - 00:18:27.106, Speaker A: I do think that it's nice to have this flexibility in a way that doesn't rely on hard forking ethereum every time we want like a different market. But I do worry also about the complexity of having this. This is why our approach is to be more incremental and to say let's find small use cases that we can try to work out and prototype.
00:18:27.106 - 00:18:52.270, Speaker A: So for instance, this Pepsi Boost, which is not a tiny change, but it is incremental to what we have today and then over time as we get more comfortable with different commitments. So, for instance, prof is another way to add extra things to your block. I feel like within a year or two we'll start understanding what should be the shape of the block and how should it be segmented for maximal.
00:18:52.270 - 00:18:58.330, Speaker A: Yeah, but there's a tension for sure. Thank you. Hey, Sam.
00:18:58.330 - 00:18:58.798, Speaker A: Hey.
00:18:58.884 - 00:19:23.462, Speaker C: Thanks Barnaby. This is great. So for this Pepsi Boost initiative, it seems to kind of run in contrast to recent trends in the kind of relay supply chain where we're kind of moving more optimistic and kind of trying to decrease the latency as much as possible.
00:19:23.462 - 00:19:47.742, Speaker C: So we're doing some additional validation here and it seems like there does need to be some coordination across relay implementations to actually get this to work. So curious how you're thinking about that. And if you actually deploy one Pepsi relayer and only everybody else is doing fully optimistic relays, you might not actually work.
00:19:47.876 - 00:20:01.810, Speaker A: Yeah, that's a very good question. So the idea of the optimistic relay is that it doesn't need to validate the block that it receives and the builder has some collateral. And if the block is invalid, the builder collateral would be given to the proposer.
00:20:01.810 - 00:20:30.060, Speaker A: The optimistic relay is a way to incrementally move towards this idea of EPBs. And to me the idea of EPBs bundles the idea of proposals as being just very passive and just taking in whatever is given to them. So yes, the Pepsi relay would definitely go in the opposite direction in being more opinionated and in having a different way of thinking about the market around it.
00:20:30.060 - 00:20:48.446, Speaker A: Yes. So I would say it's not as much attention between the Pepsi relay and the optimistic relays as it is a tension between monolithic EPBs and something like Pepsi. But to talk a bit about optimistic relays, I'm not actually clear that Pepsi relay can't be optimistic.
00:20:48.446 - 00:21:06.258, Speaker A: I think there might be possibilities to make it optimistic. And so then you could have something that is competitive with other relays in that the Pepsi relay would still allow a very fast pass through of the beads to the proposal. But we need to do more research on this and this is something we are considering.
00:21:06.258 - 00:21:07.000, Speaker A: At the.
00:21:09.070 - 00:21:16.540, Speaker D: Time you mentioned that the proposal commitments can be thought of as a hook, as a validity function.
00:21:18.670 - 00:21:18.986, Speaker A: That.
00:21:19.008 - 00:21:41.570, Speaker D: Is evaluated as part of the consensus. And then I think you described a few different constructions for how that could be instantiated. But I was wondering maybe from a slightly higher level, what are some of the kind of design constraints on this hook? If you were so, what would be some things that you could reasonably express on the hook? And maybe also are there interesting examples of things you could not reasonably express?
00:21:42.230 - 00:21:50.274, Speaker A: I see. Yeah. So the hook would not be the commitment, but the hook would be the thing that evaluates the commitment.
00:21:50.274 - 00:22:18.986, Speaker A: So the hook in the same way as like these uniswap hooks where you can inject something into the pool and the hook is the constraints on that. And this is also something that I left a bit open ended in the original post, is how do you write these commitments? My approach was say, well, we have an EVM, it works, people know how to develop with it. Can we just make commitments be EVM programs? That would be, in my opinion, the simplest.
00:22:18.986 - 00:22:39.910, Speaker A: Another design consideration is whether the space of commitments shares the same state space as the space of contracts, like the execution layer of ethereum. I think it should, because it'll be much easier to make these types of commitments. But you could also have different constraints, like commitments cannot write to the state, they can only read stuff, et cetera.
00:22:39.910 - 00:23:07.214, Speaker A: And the third constraint or something that we need to have more answers on is how do you meter the computational use of these commitments? So one advantage of reusing the EVM is that you get gas metering for free and you need to think through well, are there ways for the proposal to dos everyone by making them compute a commitment that just never terminates? So you have to protect against these things as well. Does that answer your question? Yeah.
00:23:07.252 - 00:23:07.742, Speaker D: Thank you.
00:23:07.796 - 00:23:09.150, Speaker A: Yeah. Thanks, Lawrence.
00:23:11.010 - 00:23:15.746, Speaker E: Hi, Bernabee. Hey, thank you for the talk. I have a quick question.
00:23:15.746 - 00:23:32.678, Speaker E: I think, following along similar lines, you answered some part of it, but just on a high level. If I'm a consensus researcher now, my validator can do arbitrary things, commit to arbitrary things. How do you think, as a consensus person, when I'm designing new protocols or reasoning through them, how should I think about them?
00:23:32.844 - 00:23:34.822, Speaker A: Can you repeat the last part? Sorry. Yeah.
00:23:34.876 - 00:23:48.986, Speaker E: So if I'm a consensus researcher, I want to design a new protocol, but in my protocol, my validator or proposer can make arbitrary commitments. How should I reason about the safety, liveness and all the properties about my consensus protocol?
00:23:49.178 - 00:24:07.570, Speaker A: I see. So the safety here would still this is what I was saying when I was saying that Pepsi has a direct dependency on EPBs. So the questions that we are having on EPBs is the questions around safety and around atomicity of the exchange between the builder and the proposer.
00:24:07.570 - 00:24:36.940, Speaker A: I think you would want, ideally to, for instance, in the two slot design, to me, there's a fairly clear separation between the safety and liveness of your consensus protocol and this sort of interface between the application and the consensus of your chain. So the safety and liveness would still be preserved by the fork choice and your finalization gadget. I don't think it would add any extra constraint to that, but I could be missing something.
00:24:36.940 - 00:24:40.470, Speaker A: Thank you. Yeah, thanks. Let's thank Barnabay.
