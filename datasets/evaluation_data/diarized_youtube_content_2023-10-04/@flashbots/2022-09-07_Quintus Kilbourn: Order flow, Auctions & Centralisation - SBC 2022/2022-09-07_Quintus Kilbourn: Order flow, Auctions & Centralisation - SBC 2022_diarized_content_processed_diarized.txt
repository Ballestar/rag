00:00:00.730 - 00:00:15.440, Speaker A: Hello everyone. My name is Quintus, I'm on the Flashbots research team and today I'll be talking about order flow, auctions and centralization. And the main point I'm trying to get to today is that this is a warning or I'm trying to communicate a warning rather.
00:00:15.440 - 00:00:39.160, Speaker A: So what is order flow and what is order flow in blockchain on ethereum? Well, roughly it's the way we take a user's intention, communicate it in some message. So the message being the order and get that on chain. Right? And now you think a message that changes the state of the chain, you think a transaction, it's a little bit more general than that.
00:00:39.160 - 00:00:59.562, Speaker A: You can think of like an intent in the account abstraction sort of way of thinking about things, but a transaction is a perfectly fine way of thinking about it. But as we all hopefully know, the creation of this transaction, of this order isn't just someone on their own, it's someone using a computer, using some software. And this is happening at scale.
00:00:59.562 - 00:01:19.266, Speaker A: Hence order flow like a collection of orders. And so the question is how does order flow, these streams of orders? How does that get onto the block, onto the chain? And that's sort of the topic of today's discussion. And the usual culprits show themselves here, searches, public, mempool, miners.
00:01:19.266 - 00:01:34.634, Speaker A: But part of the reason I'm speaking to you guys today is because that's changing. And now we have these new two roles, the builder and the proposer. So just a little bit about how I'm thinking about this.
00:01:34.634 - 00:01:52.080, Speaker A: I'm keeping in mind mevboost is my model as I go through today because mevboost is the most sort of immediate implementation of PBS that we'll be seeing. But I think the criticisms that come out today are relevant to most implementations of PBS. But yeah, mev boost is what I'm thinking.
00:01:52.080 - 00:02:07.510, Speaker A: Okay, so I'm going to show that some bad things happen today. And in order to show that some bad things happen or can happen, I want to show that we want you to establish what we mean by bad. And so we should establish some desired properties of PBS.
00:02:07.510 - 00:02:43.120, Speaker A: Now the first and most obvious is that we want PBS to be an approximately dominant strategy for the proposer. I don't have a very rigorous meaning of approximately dominant, I just mean that either using PBS is a dominant strategy for the proposer or whatever their best response is, it yields approximately the same returns as what using PBS would yield. And the reason we want this is to reduce centralizing, to minimize the centralizing effect of mev on the validator set.
00:02:43.120 - 00:02:51.090, Speaker A: And I'm not going to go too deep into that. Hopefully that's relatively obvious or it's been established earlier today. Then the second is censorship resistance.
00:02:51.090 - 00:03:07.480, Speaker A: I don't think we'd want censorship resistance to be any worse given PBS. And I think one thing I'll dive into today is ideally we'd want censorship resistance not to come at the cost of the validator. We don't want it to be there to be some opportunity cost for doing the right thing.
00:03:07.480 - 00:03:35.202, Speaker A: Then another property, which might be controversial, although I think it shouldn't be, or at least among many people it isn't, is no rent seeking. And what I mean by this is that the value that's extracted by builders and searches doesn't remain or the majority of it doesn't remain with the builders and the searchers, it flows back to the rest of the ecosystem. Where in the ecosystem it should flow is perhaps controversial and should go to a different talk, go into a different talk.
00:03:35.202 - 00:03:52.886, Speaker A: But the obvious culprits are validators users, DApps, perhaps wallets. And then another property which is not really a requirement, but would be quite nice. Alex's talk after this, really elaborates on this, but Talek mentioned it a bit this morning.
00:03:52.886 - 00:04:16.122, Speaker A: We have this new sophisticated role being introduced into the ecosystem and really we'd like to leverage that. Many of the validator set is intentionally resource constrained because we try to keep everything as decentralized as possible. But the builder role really offers a whole new swath of functionalities or could and hopefully we can get that out of PBS.
00:04:16.122 - 00:04:52.406, Speaker A: And so this is my picture of PBS. The rough idea here is that as we should all be familiar, is a proposal is accepting blocks from builders. But what about this system makes PBS and ORderflow a relevant topic? The first is well, before I go into this, I should mention that in some sense order flow has been an important topic or has been potentially important topic and just hasn't been explored that much in the current mev landscape.
00:04:52.406 - 00:05:15.998, Speaker A: And so, organically we are getting to a point where the competition pushes us in the direction of where builders and searches, or rather searches compete over order flow. But now with PBS we have this builder role and that changes things. And it changes things partly because of this winner takes all dynamic because there's only one block in a slot or only a finite number of blocks in a certain time period.
00:05:15.998 - 00:05:30.014, Speaker A: The success of one builder implies the lack of success for the rest of the builders. Only one block can be included, whereas with bundles that's not the case. And the second dynamic or second characteristic is that PBS relies on competition.
00:05:30.014 - 00:05:46.646, Speaker A: It's an incentive based mechanism. And so the presence and absence of competition really changes the character of the system. And the combination of order flow and the winner takes all property really does have a large impact on whether there's competition in PBS.
00:05:46.646 - 00:06:14.430, Speaker A: So what does this look like? How do the orders flow through this system? Well, again, the obvious culprits searches in the public mempool, but how orders get to the builders actually is a relatively there's a wide variety of ways this could happen. Obviously the public mempool is still there. But really, how is one builder gaining an edge over another because of the dynamics of order flow.
00:06:14.430 - 00:06:38.810, Speaker A: The most obvious is these non public sources of order flow. And here I left it blank intentionally because I think there's actually many agents that can fit into this role or many sources that can fit into this role. But the obvious here being like Wallets or DAP UIs, and then we have this other kind of advantage that a builder can draw is when a searcher chooses to submit their bundles only to that builder.
00:06:38.810 - 00:07:00.286, Speaker A: A variety of people have brought this up, I think, in public discourse, and there's some reasons for why this would happen. And I'll get into that later, right? And so I framed this as a warning and I've described the system so far. But where's this danger? And the classic blockchain example or blockchain answer is centralization.
00:07:00.286 - 00:07:25.094, Speaker A: In centralization, there's the danger. But if you're like me and centralization and PBS come up in the same conversation, then your mind tends to Vitalik's endgame article. And in the endgame, just to sort of summarize, it came up earlier today, vitalik says, well, there seem to be inevitable centralizing forces on the validator set or on the blockchain network, one of these being mev.
00:07:25.094 - 00:08:00.020, Speaker A: And the consequence of this centralizing force, if not addressed, is a centralized network, which, as we all know, sort of defeats the point, or at least in my opinion, one way of dealing with this. And what Vitalik proposes is to separate out the centralizing roles in the network from the non centralizing roles so we can preserve a decentralized set of Validators in this case and allow the accept that the builder set will become centralized. And the reason we're okay with this is because we can use all these different kinds of mechanisms to bootstrap the properties that we want from the network from the decentralized validator set.
00:08:00.020 - 00:08:37.874, Speaker A: And in doing so, we can accept that we have a degree of centralization around the boulders. What I'm going to argue today is that the centralization that we may be willing to accept, according to this argument is qualitatively different to the centralization that arises from order flow, and in particular exclusive order flow, right? And so maybe we should run through some examples, bearing in mind that I'm not talking about centralization, I'm talking about and so we could use a wallet as an example. But again, here we can think of many different potential agents, like Adapt UI, for example.
00:08:37.874 - 00:08:58.386, Speaker A: And who does the wallet serve? Well, ultimately, the end users are its customers. And what do the end users want? Well, one of the things the end users want is execution of their orders. But another thing that they'd also want is some features around these orders, the most obvious being like time to execution, right? You don't want to wait a couple of days for your transaction to be included.
00:08:58.386 - 00:09:22.522, Speaker A: And so if this wallet, for whatever reason, is choosing to send their order flow to only one builder, they have a bit of a dilemma on their hands. If they send the order or the order flow to only one builder, that order flow will only be executed once that builder lands a block on chain. And so in a competitive market, this might not even make sense for the wallet because there'd be such a delay imposed.
00:09:22.522 - 00:09:49.130, Speaker A: However, once a builder gains an upper hand over the other builders and has a higher inclusion rate, the decision becomes a lot easier for the wallet and the obvious positive feedback loop ensues. Right, now, before I go forward, I think I should mention here that when we're talking about a dominant builder, it need not be a single builder. It could also be like an entity that consists of maybe like a ring of biding, ring of builders.
00:09:49.130 - 00:10:21.250, Speaker A: But just a single builder is also fine to think about for now. Actually, on this point, before I get into I've said this is centralizing, but I have not argued why it's qualitatively different to the centralization we're willing to accept according to the endgame. One thing to note here is that part of why we're willing to accept centralization according to the argument at the endgame is that we have these mechanisms to bootstrap the properties we want using the decentralized validator set.
00:10:21.250 - 00:10:34.166, Speaker A: But these properties are not yet fully developed. Censorship resistance mechanisms have been proposed. There's lots of ideas, some easy implementations we can do in the short run, but I don't think we've fine tuned these.
00:10:34.166 - 00:10:43.130, Speaker A: And so we'd like to delay centralization as possible. Clearly this positive feedback loop is centralizing, but I'd argue that it has the potential to be extremely centralizing. Right.
00:10:43.130 - 00:10:58.170, Speaker A: If we think about some of the big players in the space MetaMask, inferra uniswap, these actors control a very large fraction of the order flow and a very valuable fraction. I think. I've heard some estimates that infura has more than 70% of the network's order flow.
00:10:58.170 - 00:11:15.300, Speaker A: If one of these entities decided to enter a deal like sell their order flow to a builder, this would effectively centralize the builder market in a finger snap. And so this is a real threat. But now let me argue why the centralization is even worse than the fact that it can happen so quickly.
00:11:15.300 - 00:11:44.720, Speaker A: So coming to this picture, we imagine there's one builder that does have a dominant fraction of the order flow. The obvious consequence of this is that their blocks are at least an expectation, a lot more valuable than the blocks of other builders. The dominant biding strategy or the smartest bidding strategy says that you only outbid your best competition incrementally, which means that the proposer only receives a little bit of money, right? And now this already is bad.
00:11:44.720 - 00:12:04.302, Speaker A: Coming back to the original property, it seems like there's rent seeking creeping in here. But now you might look at this and say but hey, I'm not taking into account the fact that this builders is potentially paying these wallets to send an exclusive order flow. But I don't think that this is actually a good argument.
00:12:04.302 - 00:12:34.014, Speaker A: And the reason for this is consider this new challenging smaller builder entering the market, competing against this entity, this biding ring, or this large builder, if it wants to compete meaningfully, it needs to acquire a large or significant fraction of the order flow. In order to do so, it has to convince this wallet to hey, switch to me. But this wallet can't really do that because if it did that, it would be committing its order flow to this very meek and mild builder that has a very low inclusion rate, meaning that its users have to wait a very long time.
00:12:34.014 - 00:13:02.550, Speaker A: And so this wallet is sort of trapped with the dominant builder, which means the dominant builder doesn't have to compensate the origin of its exclusive order flow very fairly. And there's a couple of other reasons why I don't think they'd be competent fairly. Clearly this would be alleviated if the wallet could send their order flow to everyone, because then the smaller builder could compete on the same order flow and the difference between the blocks likely to be much, much smaller.
00:13:02.550 - 00:13:32.560, Speaker A: But if the wallet's business model is to sell exclusive order flow, for example, this can't happen. Similarly, it might just be that a wallet sort of integrated with a dominant builder and they'll leave it like that because the builder's dominant, it controls 95% of the blocks or something like that. And why would they integrate with this new smaller builder when it doesn't really improve their rate of inclusion? And so we're stuck in the situation where this likely becoming worse and worse over time.
00:13:32.560 - 00:13:49.186, Speaker A: Yes, that is the meme that summarizes it very well. Something I didn't say here is that just like to characterize, this is probably the most important slide. We have three things to notice here.
00:13:49.186 - 00:13:58.646, Speaker A: The proposals being paid less, not good. The wallets being paid less, not good. The builders, the reason that this dynamic is arising is because there's no way for the smaller builder to compete with the larger builder.
00:13:58.646 - 00:14:10.566, Speaker A: It's a lack of competition. And this arises from the exclusivity of order flow. And another thing that happens because of this is a lack of competition on user features.
00:14:10.566 - 00:14:32.690, Speaker A: Earlier I said that a bonus feature would be that these builders sort of develop user features which really improve the user experience of the network, et cetera. But really this dominant builder has no incentive to do so because it already has all of the order flow. But now I also mentioned censorship, resistance, right? And really, actually this can be generalized to honest behavior.
00:14:32.690 - 00:14:58.374, Speaker A: And if we run through an example and we can think of Cr lists, if you're familiar, as an example of what could go wrong here. So proposer pushes an honest requirement of the network, saying like, hey, this is the list of transactions which must be included in the next block. Then one of the builders or set of the builders could say, hey, I want to censor these transactions, I'm not going to submit a block or I just want to discourage this behavior, whatever it was, by the proposer.
00:14:58.374 - 00:15:20.260, Speaker A: I'm not going to submit a block as a way of griefing them or punishing them. If the network is competitive sucks for them, someone else is going to submit a block of nearly equal value and that's fine. But if the network is very centralized, or rather the order flow is very centralized and a handful of bullets are the only ones able to produce valuable blocks, this means that the proposer is now stuck with a difficult problem.
00:15:20.260 - 00:15:39.980, Speaker A: Either you choose to be good, to enforce incentives, resistant, be honest, whatever it is, or you choose to be rational. And we'd like to minimize the difference between rational and honest behavior for two reasons. One is you'd like to incentivize honest behavior, honest used very generally here.
00:15:39.980 - 00:16:02.062, Speaker A: But the other is that we don't want rational builders to over time outcompete the honest proposals because they have larger return on their stake and with time they sort of reinvest that. Reinvest that and you have this positive feedback loop and the honest proposals are being competed out of the network. We have this problem.
00:16:02.062 - 00:16:18.658, Speaker A: I've sort of painted you or sketched you a problem with order flow capture. What do we do about this? Right? I think there are three causes and perhaps there are more, but there are three causes we can sort of think about to start addressing this. And I should say that Flashbots has been thinking about this and hopefully we'll have some ideas public soon.
00:16:18.658 - 00:16:27.158, Speaker A: But just sort of like generally to paint the picture here. And obviously we had the discussion earlier about having a distributed builder and decentralized builder. That's one way of addressing it.
00:16:27.158 - 00:16:49.950, Speaker A: But looking at the incentives, we have this first problem paid for order flow, right? And this need not be monetary payment. It could be like payment with some feature saying, hey, if you send your orders only to me, I can offer this feature to you, but likely it's going to be some monetary payment. The classic example being like I'll give you X a month, send your order flow to me.
00:16:49.950 - 00:17:03.490, Speaker A: This is bad. And I think one of the reasons that we might see this arise is because there's no clear business model for wallets. And so if we can provide a better way for wallets to monetize and capitalize on the value of their service, this becomes less of a threat.
00:17:03.490 - 00:17:32.110, Speaker A: Then we have this searcher trust problem searchers when they submit bundles to builders, at least at the moment, have no real way of ensuring that their mev strategies are not being stolen. Right? And so this might discourage them even though they want their bundles to be included from sending their bundles to every builder in the network, because that increases the chances of their bundles being stolen. And so what we can do is provide some mechanism through which searches find it much easier to detect bundle theft.
00:17:32.110 - 00:18:06.002, Speaker A: And thirdly, which might seem small, but I think is potentially one of the largest issues is defaults. Like I discussed earlier, this situation in which a wallet maintainer group that was a very poorly phrased. Like MetaMask or someone integrates with a handful of builder OPCs and don't want to have the overhead of integrating these constantly challenging new builders, their new features or whatever, because, hey, we're integrated with the dominant builders anyway, and we'll just leave it at that because we're not losing anything by not integrating with the challenges.
00:18:06.002 - 00:18:33.070, Speaker A: The downside of this is this is effectively exclusive order flow, paid for order flow, except you're not being paid, which kind of sucks. And so making it easier for maintainers to switch between different builders, integrate the new features, I think should be a short term goal. And I should emphasize here that I don't think all non public order flow is bad.
00:18:33.070 - 00:18:46.646, Speaker A: And that's sort of a knee jerk reaction we might all have. You might say, okay, well, we'll force all transactions to go through the mempool, and in doing so, we might even out the competition between builders. But I don't think this is the right way forward for several reasons, I think.
00:18:46.646 - 00:19:06.214, Speaker A: One is probably not feasible. Perhaps it is, but two others is that if we want builders to compete in user experience and user features and really innovate in that area, there needs to be a way for orders to express or for users to express their preference. Oh, I want my orders to go to this builder, not to that builder, because they have this feature.
00:19:06.214 - 00:19:33.854, Speaker A: If your order goes to all builders, there's no incentive to innovate. But another, and this probably requires a bit more work, but another is it may end up being the case that if a Boulder algorithm is dominant, that means that for any input, any order flow it outcompetes or produces a more valuable block than a weaker algorithm. What this would mean then is that if all builder algorithms had the same input, that there would only be like one or two algorithms that dominate.
00:19:33.854 - 00:19:54.780, Speaker A: And you can extrapolate that and say, oh, well, actually, the builder blocker can only sustain a very, very small number of builders. However, if there's some randomness, some variance, some stochasticity, I don't know what word you want to use in how the order flow is distributed between builders. This would mean that potentially the builder market can sustain a much larger number of builders, reducing how centralized it is.
00:19:54.780 - 00:20:20.414, Speaker A: And so, moving forward, I think there's obviously a problem and there are a couple of ways we can start solving these. And I'd like to propose sort of a goal that we can all work towards, and I challenge you either to propose a better one or to figure out how we can move towards it. But the rough idea here is that every order flows to every builder which supports a feature that is required.
00:20:20.414 - 00:20:42.220, Speaker A: Right? So if I'm sending an order because a builder implements some feature, like account abstraction or, I don't know, pre confirmation or whatever it is, then my order should flow to all of the builders which implement this. Right. I'm out of time, but I think it relates quite clearly to all three of the previous points.
00:20:42.220 - 00:21:01.416, Speaker A: So that's my talk. I included some formulae in case my mom watches the recording, but yeah, that's it. So if anyone has any questions what.
00:21:01.438 - 00:21:05.256, Speaker B: Are some examples of wallet monetization you think are sustainable?
00:21:05.448 - 00:21:16.830, Speaker A: I'd say keep your eyes open for a post coming soon, but I think there's some ways that are already available right now. Yeah, I'll leave it at that.
00:21:18.420 - 00:21:34.128, Speaker B: Just to understand. I think this is a very important question, but do you think that having private order flow is useful for the users, or are they basically being taken advantage of by the wallets or other people who are privatizing their order flow?
00:21:34.224 - 00:21:35.910, Speaker A: You mean in a piece?
00:21:36.920 - 00:21:44.150, Speaker B: Would a user, ordinarily you think, get better execution from their order being publicized to everyone in your model?
00:21:44.460 - 00:21:57.156, Speaker A: I think it probably depends on the order. Right. But if it's like some uniswap transaction or something, obviously in the current model, there's no real benefit to the user apart from sort of like a high chance of inclusion.
00:21:57.156 - 00:22:11.216, Speaker A: That might change, though. It might be that there's some other way in which your order is effectively public, but you're in some way protected, or there's some incentive to to have your order be public. Yeah, I think you get the point.
00:22:11.216 - 00:22:22.640, Speaker A: But at the same time, there might be some bulls that offer, like, front running protection credibly. I don't know how you measure that. So I think it's more nuanced, but I think it need not be that the public mempool is the place where you get eaten alive.
00:22:22.640 - 00:22:27.620, Speaker A: Cool, thanks.
