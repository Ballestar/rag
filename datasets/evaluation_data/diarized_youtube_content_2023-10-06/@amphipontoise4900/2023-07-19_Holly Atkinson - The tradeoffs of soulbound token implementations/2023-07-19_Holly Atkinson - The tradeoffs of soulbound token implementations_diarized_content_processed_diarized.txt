00:00:18.250 - 00:01:06.770, Speaker A: Hi everybody. Good morning. I'm Holly Atkinson. Amongst other things, I'm blockchain architect at the Sandbox and I'm going to be talking to you this morning about the trade offs of soulbound token implementations. Why Soulbound tokens? Well, it's big news since last year, right? These are just some recent examples. We have some retail drops using solebound tokens with Louis Vuitton Nike. We've seen KYC Soulbound Tokens through, for instance, Binance, and more recently than that, we've seen Ethereum France's membership NFT soulbound tokens have come up for me as part of my R D at the Sandbox and other projects.
00:01:06.770 - 00:02:30.330, Speaker A: But what is a soulbound token? Well, in its most simple format, it's a non transferable token. And if you go to the EIP website, you can stick in the word soul and a bunch of different standards will come up detailing various interfaces and options for implementing soulbound tokens in your project. But what are the differences? Because they all relate to soulbound tokens or souls, but there are some very key differences between them that I want to put across to you today. So to kick off, we have this very minimal soul bound token interface that you find in 5192 and that lets you lock or unlock tokens under certain conditions. So the idea here is that your admin role or your owner can lock or unlock someone's tokens. And this relates to seven two ones, and if they try and transfer their token when it's locked, it's going to fail, you're going to get an error, and that's pretty straightforward. Similarly, we have other kinds of nontransferable tokens where they're nontransferable except for instance, being burned.
00:02:30.330 - 00:03:47.270, Speaker A: We have this in the consensual soul bound token standard 5484. But this also brings in this idea of consensual tokens where there's some form of agreement between the receiver and the issuer of the token. We have other ideas that people have brought in so that other kinds of data can be attached to tokens. So for instance, the semantic soulbound token approach 6239 allows to build on 5192 where you can add in RDF triple data. And for those of you like I did who didn't know what this is, it's adding in kind of like social relationships, which is actually super useful for building the social layer and that allows you to add in Uris with that social data as well. In a different vein, if you don't want to allow any sort of admin or owner functionality within your contract, if you don't want any transfer flexibility, you can look to five 1114 for a focus more on immutable data. So let's say you deploy a contract and you don't want anybody to be able to transfer their tokens or change any data ever.
00:03:47.270 - 00:04:54.326, Speaker A: You can make sure that you're using decentralized platforms for your storage and simply don't allow any transfer mechanisms as part of that. Coming on to a different approach now with Five 5116, there's this idea of a handshake approach to receiving tokens, kind of similar to a consensual idea where there needs to be consent and there's this option to claim or reject. And this also factors in recovery mechanisms. There are other drafts in the system at the moment and they may or may not change. Obviously, semifungible soulbound tokens bring in this idea of soul bound lifecycle functions. So imagine you don't just want to lock and unlock your tokens, but maybe you want to have different features within your smart contract for different purposes throughout your project's life or different governance stages. And you also want to factor in recovery mechanisms.
00:04:54.326 - 00:05:43.078, Speaker A: You can look through those interfaces and choose what applies. And this token standard can be applied to a bunch of different kind of kind of types. So it's not just necessarily limited to seven two ones or 1155. So I'm actually interested to see what happens with this one. And lastly, on Linus, there's a similar kind of standard to 5192 where again, tokens can be locked and unlocked but in single and batches and that relates to 1155s. But they're all called solband token standards effectively. So what's the difference? So the distinguishing factors really at a higher level relate to things like owner and admin rights.
00:05:43.078 - 00:07:12.754, Speaker A: So how much flexibility do you as a project or a business want to factor into your project? The token type obviously is a key difference. So depending on the sort of token drop that you want to issue, you may want to look for a standard that's seven, 2111, 55, or something that caters for a number of different things there. And do you want to have any kind of structure around consent to transfer? Or do you want to spam your users with a token that they may or may not be able to burn? And then again, this concept of token lifecycle where maybe you want to add or remove properties from a token throughout its lifecycle. So really catering to business logic, governance mechanisms, recovery and varying levels of fungibility. One thing that I found interesting as well was how much input do you want your users to have? For instance, if you agree a burn off with your user. But what happens if they then don't want to burn the token? What if they would receive a replacement token that is less favorable to them? For the use case, it's super important to think about the users and their perception and engagement levels. Okay, now a reminder of DSOC.
00:07:12.754 - 00:07:58.802, Speaker A: Everyone is familiar with this paper, right, from last year. This paper like you're not supposed to be able to read the details, but this is where this concept of soulbound tokens really came from last year. It's the trigger for all of this building. And really the paper actually doesn't just talk about soulbound tokens, it talks about how soulbound tokens are these composable elements as part of a codetermined sociality. So there's this idea of plural network goods where there's richer data provided by users through their soulbound tokens. And users might have multiple soulbound tokens within one profile. You might also be able to look at aggregated profiles.
00:07:58.802 - 00:08:42.100, Speaker A: So until very recently we've been limited to one solbound token per user, as in an EOA, an ethereum address. But now with account abstraction we can have some very clever things being built. So I think actually with all of these composable products, we're really well on the way to a decentralized society. We just need to build the stuff, the fun stuff. So I've put some stuff on here. We've got the soulbound tokens, account abstraction, we also have this recent AI explosion. We have zero knowledge and let's not forget digiphysical goods to actually tie this in with real life a bit more.
00:08:42.100 - 00:09:46.470, Speaker A: And this really is quite exciting when you think about the possibilities for the future metaverse. It's really going to be a very inclusive place in theory in this pluralist future. Really building on decentralized governance, looking at your cross platform reputation and not necessarily just your in project or in game reputation, and really using this idea of richer data to enable shared rights, maybe fairer returns based on the properties relating to your tokens in your profile. And that can really be used in this virtuous cycle of community engagement. In theory, if it's done well, we need to build this stuff now. So how do we get to DSOC? We are getting there. We have so many composable elements, we can layer those in a project and we can aggregate across projects to give this pluralism as a feature.
00:09:46.470 - 00:11:13.826, Speaker A: And so as a result, we can build on things like account abstraction and really enhance this near term. And near term is important here because I think there's a lot of protocols, there's a lot of vision, but actually there are some quite, I guess, simple things that can be built now that are within our grasp now that we have all of the composable elements. I've touched on some here. So thinking about proof of liveness so not just proof of humanity, right? So not just proving you're a human, but actually checking in on, for instance, a gamer at various points during their kind of user lifecycle. You can check, maybe stick a streaming link into a soulbound token profile and then look at that with account abstraction and stick in some AI, you can actually have AI making your KYC process for instance, a lot more fun. You can make it relevant across profiles and you can check that your game is being played by real players who continue to be alive. Other things like getting new users involved in a system, maybe your profile tells a lot about who you are as a user, maybe you want that, maybe you don't, depending on kind of how anonymous you want things to be.
00:11:13.826 - 00:12:37.200, Speaker A: But nevertheless, there are some data points here that can be aggregated in a richer way such that you can be guided more on your interactions and if you need help getting to know a system, this guidance can be tailored more to the user. And so on other hand, how about in real life? Perks. So thinking about you've got all these NFTs in your wallet, like, nothing new there. But now think about that with your profile at a broader scale and add in some NFT chips into your physical items and you've got some really interesting collaborations that people can work on that are really relevant at multiple events, multiple places, with multiple ecosystems. Moderation is a key one for something like the sandbox, where we have user generated content. Thinking about having a profile with a reputation score isn't anything new, but using that to really get your users involved in moderating other users and providing rewards based on reputation attached to a profile could be pretty key here. And similarly encouraging creation and gameplay curation you could do a similar thing with like scoring and going back to user generated content.
00:12:37.200 - 00:13:30.830, Speaker A: We have no code tools for creators to build in their lands, but what if those creators don't just want to build in the Sandbox? We could have this idea of creatorship across multiple platforms and that provides incredibly rich data from a royalties perspective. And finally, it would be remiss of me not to talk about 6551 where you can make this even more interesting by adding in self evolving assets and having those linked to a profile as well. So, to conclude, I see so much iterative potential for us to build on and now it's just time to go and build. Thanks everyone for listening. Thank you.
00:13:30.900 - 00:13:31.760, Speaker B: Any questions?
00:13:41.580 - 00:13:43.050, Speaker A: Thank you. Holy thanks.
00:13:46.320 - 00:14:00.320, Speaker B: Cool. Thanks for the presentation. Really interesting. A common question when talking about SVTs can you maybe talk about privacy a little bit? And also how reputation works across different platforms.
00:14:00.900 - 00:15:05.688, Speaker A: Privacy is an interesting one because it depends on the application and actually there are a lot of legal implications, right? So depending on what the project is, your profile will need to give away different kinds of data. So you may or may not be able to be private by default. You can actually tie in zero knowledge, obviously with soulbound tokens. So an interesting one here was the Sismo badges, which it can allow you to attach multiple accounts effectively to your profile without doxxing other accounts that might hold interesting assets, for instance. So there's a lot of functionality to be provided by zero knowledge from a privacy perspective. I think also making platforms a non friendly is something that there's a lot of interest in, but it's this fine balance of privacy versus legal requirements. Thank you.
00:15:05.688 - 00:15:05.830, Speaker A: It.
