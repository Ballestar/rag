00:00:00.570 - 00:00:09.406, Speaker A: Hi everyone, and welcome to this video that accompanies section 22.2 of the book Algorithms Illuminated, part Four. This is a short section about the.
00:00:09.428 - 00:00:12.330, Speaker B: Three sat problem and the Cook Levin Theorem.
00:00:12.490 - 00:00:35.170, Speaker A: So in the last video, we saw a simple two step recipe for proving that problems are NP hard. So if you apply this recipe thousands of times, you will find yourself with an inventory of thousands of NP hard problems. But how does this whole process get started in the first place? Where does that first NP hard problem come from? From one of the most famous and important results in all of computer science.
00:00:35.250 - 00:00:37.110, Speaker B: The Cook Levin Theorem.
00:00:38.650 - 00:00:51.914, Speaker A: The formal statement of the Kuk Levin Theorem is simply that the seemingly innocuous three sat problem satisfiability with the most three literals per disjunction. The seemingly innocuous three sat problem is.
00:00:51.952 - 00:00:54.000, Speaker B: In fact an NP hard problem.
00:00:54.530 - 00:01:25.574, Speaker A: As you could have guessed, this theorem was proven by Stephen Cook and Leonet Levin. They're proved independently on opposite sides of the Iron Curtain, both sort of ballpark. 1971, Stephen Cook was at Toronto, Leonid Levin was in Moscow. And it took a while for Levin's work to become widely appreciated in the west. So if you look at old textbooks, you'll see the Cook Levin Theorem actually referred to as Cook's Theorem. But really both of them proved that both of them deserve credit for it. So they both proved that the three sat problem is NP hard.
00:01:25.574 - 00:02:12.514, Speaker A: And they also hinted at the possibility that perhaps lots and lots of other problems are NP hard as well. And that prophecy was really fulfilled by Richard Carp in 1972, who was directly inspired by Cook's work. So Carp really showed the full power of NP hardness by applying the two step recipe we've been talking about over and over again. So CARP's original list of 21 NP hard problems, which includes many of the ones that we're going to be discussing in this chapter, that really made it clear that NP hardness was the fundamental obstacle that was preventing progress in all kinds of different fields on lots of different famous problems. Like, for example, the traveling salesman problem. Cook and Carp both received the ACM Turing Award in 1982 and 85 respectively. If you haven't heard of the Turing Award, you should have heard of the Turing Award.
00:02:12.514 - 00:02:51.518, Speaker A: It's the equivalent of the Nobel Prize in computer science. Levin again, his work was kind of really fully appreciated only later, but he was recognized in 2012 with the Knuth Prize. In case you're wondering where the three in three sat comes from, again, we'll define the problem on the next slide. Disjunctions of the most three literals. Basically, the reason for the three here is that that's the smallest number for which the problem is NP hard. So perhaps you've actually seen at some point the tusat problem, where you have disjunctions of either one or two literals that can actually be solved in linear time. There's several ways to do it, but one way is a reduction to the problem of computing the strongly connected components.
00:02:51.614 - 00:02:53.410, Speaker B: Of a suitable directed graph.
00:02:53.750 - 00:03:25.454, Speaker A: Now, just a few videos ago, we were talking about Satisfiability in the context of Sat Solvers semirelible magic boxes that actually have some success of solving the Sat problem in practice. Now, keep in mind, the semirelibility of Sat solvers is in no way in contradiction to the Cook Levin Theorem. The Cook Levin theorem is saying you cannot have a guaranteed, fast and correct algorithm for the three Sat problem. And in fact, Sat Solvers do not give you a guaranteed correct and fast algorithm. They give you a sometimes correct and fast algorithm for the Sat problem, which.
00:03:25.492 - 00:03:28.554, Speaker B: Is not the same thing in this chapter.
00:03:28.602 - 00:04:08.294, Speaker A: We're not going to worry about why the Cook Levin Theorem is true. We're not going to worry about its proof. We're just going to take it on faith in this chapter. So the plan is more to stand on the shoulders of these giants and assuming that this one problem three Sat is MP hard, to then generate via reductions 18 additional NP hard problems. If you're curious about how you'd ever prove the NP hardness of a problem from scratch, as was done in the Cook Levin Theorem, we'll discuss the high level idea behind the proof in the videos corresponding to the next chapter, to chapter 23, I should say the proof. I think it's worth seeing at least once in your life. But almost nobody remembers the gory details of the Cook Levin Theorem.
00:04:08.294 - 00:04:36.754, Speaker A: Most computer scientists are content just to be educated clients of the Cook Levin Theorem, using it along with other NP hard problems, the same way that we're going to in this chapter as a tool to prove the problems that you care about are NP hard. To conclude this video, let me just make sure we're all crystal clear on exactly what the three Sat problem is. If you watched that video a few videos ago on Satisfiability Solvers, there won't be anything new to see here. But if you haven't, I just want to make sure you know exactly what.
00:04:36.792 - 00:04:38.100, Speaker B: Problem we're talking about.
00:04:38.470 - 00:05:15.566, Speaker A: So the input to a threesat problem consists of variables and constraints, and both are of a super simple form. So all of the decision variables have to be boolean, so they can take on only the values true or false. So for a given collection of N boolean variables, there's going to be two to the N possible truth assignments, possible assignments of each variable to either true or false. The only constraints we're going to bother with are disjunctions of literals. So a literal is either a decision variable, an xi or its negation, not xi. And disjunction just means logical or. So A or B is true if A is true, or if B is.
00:05:15.588 - 00:05:17.780, Speaker B: True, or if both A and B are true.
00:05:18.150 - 00:05:53.706, Speaker A: When we were talking about sat solvers. We allowed our disjunctions of literals to have any number of literals, an arbitrary number. For the three sat problem, it's going to be the special case where we restrict each of the constraints to have at most three literals. The goal then is exactly what you'd expect. So out of these two to the N possible truth assignments, we're curious whether any of them satisfy simultaneously all of the constraints, all of the disjunctions of at most three literals. If there's no such assignment, we'd like an algorithm to report that fact. If there is a satisfying truth assignment, we would like an algorithm that returns.
00:05:53.738 - 00:05:55.710, Speaker B: One to us on a silver platter.
00:05:56.050 - 00:06:37.302, Speaker A: So, for example, consider the following eight constraints. And just to be clear on the notation, this V that appears between each pair of literals, that just stands for logical or, which is what disjunctions are all about. And whenever you see that upside down l in front of a variable, that means we're looking at the negation. So here in the upper right of the constraints, there is a not x two and also a not x three. So if this was the input, if the input was these three variables, x one, x two, and x three, and these eight clauses each with three literals, this would be an unsatisfiable three set instance. There's no satisfying truth assignment. Indeed, there's eight possible truth assignments for the three boolean variables.
00:06:37.302 - 00:07:12.358, Speaker A: And each of these eight constraints rules out exactly one of those eight possible truth assignments. So there's none left, so it'd be unsatisfiable. On the other hand, if we deleted any one of these eight constraints, we would have a satisfiable instance of three sat. Because there'd only be seven forbidden assignments to the three variables, there'd be one left over that would be satisfying. So in general, when there exists a truth assignment satisfying all the constraints, we call it a satisfiable instance. Otherwise, we call it an unsatisfiable instance. That's the Cook Levin theorem, and it gives us our first NP hard problem.
00:07:12.358 - 00:07:25.190, Speaker A: Three sat is NP hard. Now, building on this fact through reductions, we will spread NP hardness to 18 other problems. In the next video, let's get oriented about exactly what all of those problems.
00:07:25.260 - 00:07:28.290, Speaker B: And all of those reductions are going to be. Bye.
