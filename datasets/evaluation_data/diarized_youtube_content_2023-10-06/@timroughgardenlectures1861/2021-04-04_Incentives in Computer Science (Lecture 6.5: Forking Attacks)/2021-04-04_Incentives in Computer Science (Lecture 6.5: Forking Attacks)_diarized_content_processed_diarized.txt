00:00:00.570 - 00:00:40.470, Speaker A: On the last slide, we talked about forks. So how miners, even when they're just playing by the rules and following the bitcoin protocol as intended, sometimes by chance, two different miners will happen to discover eligible blocks at roughly the same time. Then we talked about the longest chain rule, which is what bitcoin uses to resolve the ambiguity when you have a fork in the blockchain. Now, I want to turn our attention to incentive issues so much more in the kind of spirit of this course. So remember, we've already seen how incentives pop up in bitcoin. Miners are incentivized through both, principally through the block, reward the 6.25 bitcoins, but also some additional transaction fees.
00:00:40.470 - 00:01:48.138, Speaker A: They're incentivized, they get monetary rewards for solving these crypto puzzles, for adding eligible blocks to the blockchain. And so that's good. That's clearly going to motivate the miners to do this work we want them to do. But whenever you introduce incentives like this into a system, it introduces potentially opens a whole new can of worms. And you have to ask yourself, by having these incentives built into the system, are we actually incentivizing miners in this case to behave in some way we weren't expecting? So what we really want to do now is put ourselves in the shoes of a miner and ask if we were sort of devious, and we were potentially going to deviate from the prescription of the Bitcoin protocol. Is there any way we could do so where we'd be better off? Where, for example, we would garner more rewards than we would have had we followed the protocol? Honestly, those are the kinds of vulnerabilities in a protocol we would like to detect. Let me start just with some good news, which is a potential attack by miners that we might be worried about, but which actually is completely ineffective because of the proof of work nature of bitcoin.
00:01:48.138 - 00:02:41.582, Speaker A: So it's something that's known as a civil attack. It's so called after a 1973 book called Civil, which was about a woman who had what at that time was called multiple personality disorder. And so then a civil attack in a computing system that involves inventing multiple identities for yourself and trying to use your multiple identities in concerts to somehow make yourself better off. And for an open system like bitcoin, it's very important that you're robust to civil attacks because civil attacks are incredibly cheap to mount. So remember, in Bitcoin, the users are identified only through one of these public keys, which is part of a public key. Secret key pair has nothing to do with your Social Security number or any other identifying information. And you can generate for yourself as many secret public key pairs as you want.
00:02:41.582 - 00:03:52.290, Speaker A: You can generate 10,000 of them very easily. So for all we know, when we look out in bitcoin and we see all these users, for all we know there are 10,000 different public keys that all actually correspond that are all owned by the same miner. But this is sort of one of the magical properties about proof of work, right? So all of the miners are kind of cranking through all these possible nonces sort of spending all their computational cycles trying to find an eligible block. And if you think about it, just because everybody basically is just doing random guessing, remember, that's the state of the art. No one knows how to find an eligible block in a way that's smarter than just randomly guessing nonsense. So because of that, that means the probability that you're going to be the one that a particular ID is going to be the one to find the next block, that's going to be proportional to how much of the overall computational power you possess, right? So like, if there are 100 miners and you're one of them, and all of you have the same amount of mining power, so you're 1% of the overall pool, then there's a 1% chance that you'll be the lucky one that happens to find the next block. If you're a bigger miner and you have, say, 5% of the overall computational resources invested in Bitcoin, you're going to have a 5% chance of being the next one to find an eligible block.
00:03:52.290 - 00:04:36.818, Speaker A: And so the point to realize here is just that the probability that you get a block, that you authorize a block, and remember, that's exactly where the rewards come from. They come exactly from authorizing blocks. The probability is proportional to your share of the computational power. So it doesn't matter if you have 10% of the computational power all sort of invested in a single public key, or if you split it into two different identities, each with 5% of the overall computational power, it doesn't matter. So still the probability that the next authorized block will be from you, meaning one of your public IDs that'll just be proportional to your overall amount of the computational power. So there's really no point in creating multiple IDs in the sense that it cannot get you bigger rewards than you could get with just a single ID. So a lot of systems do not have this so called civil proof property.
00:04:36.818 - 00:05:25.570, Speaker A: A lot of systems, cheap identities is sort of a really big problem. But Bitcoin, really, from the beginning, it was built in to be robust to civil attacks, which is a really nice property. For the rest of this slide, I want to talk about attacks that are based on deliberate forking. So we talked about how forks can happen accidentally, but if a miner wants to be devious, they can purposefully introduce a fork, right? So if you know that the last block of the blockchain is, say, B three, and the second to last block on the blockchain is B two, as a minor, you can pretend like you never heard about B three. From the peer to peer network and say, oh, I thought the last block was B two. And then authorize a block B four, extending B two, thereby creating a tie with B three. So creating a fork on purpose by extending a block other than the one which you know to be the last block.
00:05:25.570 - 00:06:26.616, Speaker A: Now why would you ever do this, right? Because if your block is not on the longest chain, you're not going to get any rewards for it. So what's the point of just sort of creating some new block that's basically going to be orphaned? Well, let's examine the situation a little bit more carefully. Here's how something known as a double spend attack might go. So imagine we've got some blockchain. So let's say that the currently last block in the blockchain is B zero and then there's a bunch of blocks that come before it. And now let's say that one party Alice pays another party Bob in a transaction that winds up getting added to the blockchain in the next block in block B one. So the little green circle labeled TX, that's meant to indicate the transaction which is a transfer from Alice to Bob.
00:06:26.616 - 00:07:24.744, Speaker A: That's one of the say, 1000 transactions that appear in this block B one which is now added to the blockchain. As we saw on the last slide, you don't want to regard a transfer as complete immediately when the transaction shows up on the blockchain because you're worried that maybe some other miner in parallel came up with a block B two that's going to be competing with B one. And then maybe it'll so happen that some minor will wind up extending b two with a new block B three before any minor extends the block that my transaction is in B one. So you want to wait until more blocks get added after your transaction. So let's say another block B two gets added. And let's suppose Bob is feeling very impatient. Bob says, you know what, now it's clear that this transaction is unequivocally on the blockchain.
00:07:24.744 - 00:07:52.774, Speaker A: It's been extended by some other block B two. All of that stuff is on the longest chain. So I'm going to go ahead and ship whatever good I owe Alice. I'm going to ship that to her now that B two has been added. So suppose that happens. Well, now what Alice can try to do is effectively rewrite history. So deliberately create a fork.
00:07:52.774 - 00:08:48.410, Speaker A: So create a new block B three which rather than extending B two as she's supposed to do, alice will create an eligible block B three that extends b zero. Now this in and of itself seems like a waste of time, right? Because Alice created this block B three and it's not on the longest chain. So this is a block that was sort of orphaned at birth. And so in particular, no rewards are granted. And it doesn't change the fact that the transaction from Alice to Bob has been authorized. But suppose Alice is persistent and keeps trying to mine new blocks, extending the blocks she's added before. So she's going to try to mine a block, an eligible block, b four, extending B three, and then hopefully get lucky again and find yet another block, b five, extending B four, before any of the other miners successfully find a block, extending the actual longest chain before they extend b two.
00:08:48.410 - 00:09:33.380, Speaker A: Notice that if Alice gets lucky in this sense, being able to create three new eligible blocks before anyone else finds one, then in fact this would orphan the blocks b one and B two. The longest chain would switch to being this magenta chain with the blocks b three, b four, and B five. And that would mean once B One is orphaned, that means that transaction is no longer regarded as authorized. So really Bob no longer owns those coins. Alice still owns the coins. But unfortunately, if Bob ships the goods after b Two is added to the blockchain, alice will both have the goods and get to keep her coins. And so that's known as a double spend attack.
00:09:33.380 - 00:10:41.170, Speaker A: Why is it called the double spend attack? Well, it's because Alice can basically reuse the same coins she allegedly transferred to Bob, use exactly the same coins for a transaction to some other party, to some Charlie in one of the blocks b three or B four or B five. So she really gets to, in effect, spend the coins twice, once in the transaction in B one, and potentially again in some transaction in what winds up being the longer magenta chain. So what's the likelihood of a double spend attack like this working out? Well, it's going to depend on what fraction of the overall computational power is possessed by Alice. Remember, because all the miners are basically just doing random guessing, the probability that Alice winds up being the next miner to come up with an eligible block, that probability is just going to be equal to the fraction of the overall computational power that she possesses. So if she controls an alpha fraction of the overall power possessed by all the miners, then she has to get lucky. Getting lucky once that has probability alpha, finding an eligible block. And to pull off this particular double spend attack, in this example, she would need to get lucky three times in a row.
00:10:41.170 - 00:11:24.456, Speaker A: So three times in a row to beat out all the other miners in finding the next eligible block. So that's going to happen with probability alpha cubed. So alpha for each of the times she has to get lucky. So the success probability depends on alpha. And the smaller alpha is, the less likely such an attack would be to succeed. And if you're just talking about like a single individual, a solo minor, as they're called, their alpha, is probably going to be quite small. So even 1% would be a lot to be possessed by a single solo minor, you might expect a couple of order magnitudes less than that.
00:11:24.456 - 00:12:03.860, Speaker A: So in that case, if it's just one individual trying to execute this attack, probably it's going to be very, very unlikely to succeed and not worth even trying. One thing that does complicate the matters a little bit is there are these things known as mining pools. And this is where lots of different solo miners join forces. So they basically work in tandem, trying to authorize a new eligible block. And then if anybody succeeds in coming up with an eligible block, they split the proceeds amongst all of the participants in that mining pool. So why do miners do this? They do this so that they get a more steady payout. So it's not winning the lottery once every ten years.
00:12:03.860 - 00:12:59.664, Speaker A: Rather, you're getting a little bit every single day. That's the purpose of the mining pools. And they get pretty big. It's not uncommon that a single mining pool would control 20% or maybe even 30% of the overall computational power, because a lot of these miners get together in a single pool. So if an entire pool decided to collectively try to execute a double spend attack, then this alpha cube still wouldn't be that big, but it also wouldn't be that small either. So you'd start having a nontrivial chance of pulling off a double spend attack if you managed to get a whole mining pool to kind of agree to try to do it. Now, if you're worried about a double spend attack, if Alpha cubed is still too big for your, you know, as Bob, as the seller, you do know something under your control, which is? Remember, this cartoon was for a very aggressive Bob who was happy to ship the good after its transaction was extended by just one block on the blockchain.
00:12:59.664 - 00:13:58.328, Speaker A: So the transaction is in b one, and it was extended by b two. And if Bob wants to be more conservative, bob can wait until K blocks have been tacked on after b one before shipping the goods and then sort of to execute the double spend attack, this magenta block is going to need to be that much longer. It's going to need to be of length K plus two. If Bob waits for K blocks to be added after the transaction, and then that probability is going to be alpha raised to the K plus two. And remember, alpha is a number less than one. So as this exponent gets bigger and bigger, this number is approaching zero very quickly. So, in fact, even if you did have a deviant mining pool with 30% of the overall computational power, if you took K equal to six so if you waited for six blocks to be added on top, which is sort of best practices generally for people sellers who are using Bitcoin, then the probability of pulling off this double spend attack getting lucky eight times in a row, that would already be roughly one 100th of 1%.
00:13:58.328 - 00:14:47.464, Speaker A: So a one in 10,000 chance of succeeding. And with that lowest success probability, no one's even going to try. Now, from the way I've discussed this double spend attack, it seems like you should be okay even if alpha was a half or more, right? You just take k big enough and then alpha to the k plus two is pretty small. But I'm sort of assuming that the deviating minor is trying to do a double spend attack just by getting lucky. K plus two times in a row. And once alpha grows bigger than 50%, actually, by being patient, you can always execute a successful double spend attack, right? So if you have more than half of the overall computational power, you are going to be on average creating blocks faster than everybody else combined. And so that means you just start growing this magenta chain, b three, b four, b five.
00:14:47.464 - 00:15:32.432, Speaker A: Maybe the sort of other miners are getting lucky sort of in between your efforts. So they will extend the blue chain, they'll add on to b two, but more frequently you will be the one adding to your magenta chain than all the other miners could possibly be adding to the blue chain. So if you're patient enough and you wait a long enough period of time, no matter how big a deficit you started with, eventually your magenta chain, because it's growing at a faster rate than the blue chain. Eventually the magenta chain will take over the blue chain, and the magenta chain will become the longest one. So there's really kind of a phase transition when alpha hits 50%. So below 50%, the ODS are stacked against you like gambling at a casino. And you have to get lucky to successfully orphan the blue chain.
00:15:32.432 - 00:16:19.812, Speaker A: But all of a sudden, when alpha is bigger than a half, that's like you're the casino, the ads are in your favor. You know you're going to make money, and you know eventually you will be able to execute this double spend attack. So this specific case where alpha is bigger than a half, that actually has its own name, that's known as a 51% attack. So a 51% attack, if a single minor or a single sort of colluding party of miners control more than 51% of the overall computational power. That's really kind of the epic failure mode for an open blockchain like bitcoin, because if one entity has more than half the computational power, they actually have total control over the blockchain. So they actually can act like a centralized authority. Now the one thing you can't do, even with all of the computational power is you still can't forge transactions.
00:16:19.812 - 00:16:52.636, Speaker A: So you can't literally steal other users bitcoins that would require forging their cryptographic signature. And that you can't do no matter how much computational power you have realistically. But what you can do, for example, is censor users of bitcoin. You can freeze their assets, prevent them from ever spending their coins. How would you do that? Well, whenever they try to spend their coins and a transaction gets added to the blockchain, you do this forking attack. You grow this magenta chain to make sure that that block gets orphaned. So you never include their transactions in your own blocks.
00:16:52.636 - 00:17:29.916, Speaker A: And because you create blocks faster than anyone else, kind of, you have all of the say about which transactions wind up on the blockchain. So, really, a blockchain is viewed as broken if you have one person with more than 51% of the computational power. So you should always think about nobody having more than 49%, and really, even nobody having more than hopefully 20% or even less than that of the overall computational power. These kinds of forking attacks, they're important to know about. Definitely. Satoshi nakamoto already recognized the possibility of these forking attacks. In the original white paper for bitcoin, it was asserted that you don't have any.
00:17:29.916 - 00:18:10.720, Speaker A: The only way you have problems if someone has more than 51% of the overall computational power. Otherwise, you should be good. And my interpretation of that assertion in the bitcoin white paper is that nakamoto was thinking about kind of double spend attacks of this type. So thinking about forking, you know, there's actually other ways you could deviate from the bitcoin protocol that are not just pure forking attacks of this type. So more clever deviations, which apparently were not anticipated by nakamoto in the original bitcoin protocol. And so, in the last slide on the last video, I want to tell you about the most famous such attack, a very clever attack known as selfish.
