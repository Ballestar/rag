00:00:00.730 - 00:00:46.074, Speaker A: Let's move on to the second property we care about, which is eventual liveness. And remember what we mean by eventual here, we really mean after Global Stabilization time, after GST, that's when we expect liveness to return. So once the network is operating normally, at that point the protocol should also be giving you everything you want, in particular liveness. So let me just remind you actually what liveness means for state machine replication. It's been a while since we talked about it formally and in fact actually we're going to be proving a slightly weaker definition of liveness than the one I gave you several lectures ago. So remember in state machine replication, on the one hand we have our nodes that are running the protocol. On the other hand we have these clients that are just submitting transactions.
00:00:46.074 - 00:01:46.394, Speaker A: They want to be executed as part of the protocol. And back in lecture two, we defined liveness as the property that as long as a transaction is known to at least one honest node running the protocol, as long as one honest node knows about it, eventually that transaction is going to appear in everybody's local history. And notice that with this definition, it's not just that they're requiring that the protocol make progress, it's also sort of a sensor resistance type property, right? So it's like honest nodes can't prevent your transaction from appearing as long as you can communicate it to at least one honest node. So that's sort of the Liveness property, frankly, you'd really want. It actually turns out that the tendermint protocol, at least the basic version I told you about here, actually doesn't quite satisfy that definition of liveness. So if a transaction is only known to a single honest node, it is possible, depending on how things work out, it is possible that that transaction will be censored, that it will actually never be added to everybody's local history. So instead, we're going to make a slightly stronger assumption.
00:01:46.394 - 00:02:24.762, Speaker A: We're going to consider a transaction that is known not just to one honest node, but is known to every honest node. And under this assumption, we'll show that the transaction capital T actually does get added to all of the nodes local histories. So this is a slightly weaker definition of liveness than what you might want. And that what we had back in lecture two. The academic in me wants to be fully honest about this. And also it's sort of actually helpful to just get practice appreciating these subtleties. But I also don't want to make too big a big a deal of it, right? I mean, it's easy to imagine that the honest nodes are communicating via some gossip protocol, sort of exchanging information about what transactions they've heard about.
00:02:24.762 - 00:03:03.370, Speaker A: And if they're doing that, then as soon as a transaction is known to one honest node, it will soon be known to all the honest nodes as well. Alternatively, if you just wanted to directly get the stronger liveness property where only an honest node needs to know about a transaction. You could make some tweaks to the tenderman protocol to achieve that property. Now, moving on under this slightly stronger assumption about who knows about this transaction, we want to prove liveness. So we want to prove that this transaction will eventually be written to everybody's local history. Now, in thinking about liveness, there's kinds of two obvious obstructions that we have to deal with. Obstruction number one, right, is we're in the partially synchronous model.
00:03:03.370 - 00:03:51.446, Speaker A: So there's going to be this sort of initial period prior to Global Stabilization Time where literally, for all we know, no messages are going to be delivered whatsoever. So presumably we're not trying to prove anything about liveness in the asynchronous phase before the Global Stabilization Time. So you should expect the proof to sort of start by saying, let's fast forward up to sort of GST where at least we have a hope of having liveness. If you think about it, there's also a second obstruction to liveness, which is Byzantine nodes, specifically rounds in which a Byzantine node is a leader, right? Because if I'm a Byzantine node in a round, I can just propose nothing. I can just give the rest of the nodes the silent treatment. If you go back to the pseudocode, if there's no proposal in the first phase, there's no votes in the second, third or fourth phases, literally nothing happens. The round is just completely wasted.
00:03:51.446 - 00:04:24.530, Speaker A: So you should expect the proof to say fast forward up to the point after GST to some round with an honest leader. In fact, we're going to look at an even stronger assumption. Let's fast forward to the first time after GST that we have two consecutive rounds both with honest leaders. And in fact, as we'll see, it's convenient to actually assume we're at least Delta Time steps after Global Stabilization Time. But in any case, two consecutive rounds, both with honest leaders. Call the round numbers r one and R two. They're honest leaders, l One and l two.
00:04:24.530 - 00:05:13.646, Speaker A: Now, you should have an immediate reaction here, which is to say, like, well, are we so sure there's going to be rounds with consecutive rounds that both have honest leaders? And if you think about it, the answer is yes. We're going to have lots of times when there's going to be two rounds in a row, both with honest leaders, assuming we're doing round robin rotation among the nodes as leaders. Because how would it be possible that you literally never had two honest leaders in a row? It would have to be that you'd have to basically perfectly alternate between Byzantine and honest leaders. Right? So Byzantine honest, byzantine honest, Byzantine honest, you can never have two honest nodes in a row. But that would actually only be possible if 50% of the nodes were Byzantine. Again, assuming we're doing sort of round robin leader rotation. So our standing assumption is that less than a third of the nodes are Byzantine.
00:05:13.646 - 00:06:11.000, Speaker A: So there's certainly going to be plenty of times where we're going to have two rounds in a row that both have honest leaders. So why can't we just look at a single round with an honest leader? Why do we need to look at two consecutive such rounds? There's a bunch of details, as we'll see, but the rough idea is that in the first round with an honest leader, basically any kind of foolishness that Byzantine notes had been up to are going to get flushed out of the system. And then in the second round with an honest leader, you'll kind of have like a clean start, a fresh start, and that will just proceed in lockstep and culminates with a commitment to a block proposed by an honest leader. In particular, a block that includes this target transaction capital T, assuming it hasn't already been included in some previous block. And that's what we want for liveness. So let's start with a lemma. So remember we've said many times that we have to be prepared for different nodes to be working on different block numbers, some to be working on block number nine, others to be working on block number eleven, whatever.
00:06:11.000 - 00:07:04.422, Speaker A: And when we said that, we were probably thinking mostly about the asynchronous part of the partially synchronous model prior to GST, sort of hoping that once things are synchronous, hopefully all the nodes just proceed in lockstep. Unfortunately, even after GST, different nodes might work on different block numbers. But the dilemma is going to say it can't be the case that you have one node working on block number nine and another working on block number eleven that really there's only sort of two different block numbers that all of the honest nodes might be working on at the commencement of the first of these rounds. R one. So there will be some block number H, such that all of the honest nodes are working on either block number H or block number H plus one at the start of round R one. To see why this is true, there's really no substitute for just going back and looking at the protocol pseudocode. So what I actually want you to do is I want you to rewind delta time steps from the beginning of round number one.
00:07:04.422 - 00:07:51.238, Speaker A: Now remember, we assumed that round one began at least delta time steps after Global Stabilization time after GST. So even after we rewind by delta time units time steps, we're still at or after GST. So that puts us in the previous round, let's call it round knot and it puts us in the fourth phase. So in the pseudocode we're sort of in the bottom right and we're looking at the fourth phase of the round R zero that precedes the round R one. And what I want to do is at this time, so delta time units before the start of r one, I want to look at the highest block number that any honest node might be working on. Okay? So maybe some nodes are working on five, some are working on seven, some are working on nine. If that's the case, then the parameter h is going to be equal to nine.
00:07:51.238 - 00:08:41.894, Speaker A: So the biggest block number that any honest node is working on at the start of the fourth phase of round R zero, the one right before R one. And the claim is going to be that by delta time steps later, by the end of round R zero, in fact, every honest node is going to be working on at least block number nine, if not some higher block. So why is that true? So there's some honest node at the fourth phase working on block number nine. That means that honest node has already committed blocks one through eight. And as we see in the fourth phase, pseudocode, you only commit a block if you have a stage two quorum certificate supporting that block. So by virtue of working on block nine, by virtue of already having committed blocks one through eight, this honest node I must have in its possession at this time at delta time units before round r one. It must.
00:08:41.894 - 00:09:18.638, Speaker A: At that time, possess stage two quorum certificates for each of the blocks. That it's committed for each of the blocks. One, two, three. All the way up to eight. Okay? So that's one thing to notice. The other thing to notice is that whenever a node either sort of assembles itself or hears about a new quorum certificate, it echoes that quorum certificate to all of the other nodes. So we see that, for example, in the second phase on the left, when the case that a node receives sort of a QC from the leader more recent than the one they already knew about, they echo that to all of the other nodes.
00:09:18.638 - 00:10:01.658, Speaker A: We see that in the third phase, right? If you see a supermajority from the first stage vote, then you go ahead and broadcast to that sort of newly assembled QC. Same thing in the fourth phase. If you manage to assemble a stage two QC, you broadcast that to all of the other nodes. So the upshot is whenever you learn about a new quorum certificate and sort of reset your local variables, you also broadcast that quorum certificate to everybody else so that they're aware of it as well. And so here's where this is going to pay off, right? So we had this node delta time units before round R one. It had stage two quorum certificates for blocks one through eight. Either at that time or at some previous time, it will have echoed those stage two QCs to all of the other nodes.
00:10:01.658 - 00:11:05.522, Speaker A: Now, because we are at this point at or after Global Stabilization Time, we know that all those echoing messages are going to be delivered within capital delta time steps. So in particular, by the end of this round, by the end of round R, not all honest nodes will be in possession of stage two QCs for blocks one through eight. That means that in the sanity check step, this is now on the lower left part of the slide. In the sanity check step, every single honest node is going to be processing all of those stage two QCs if it hasn't already figured out those blocks. And so all of the nodes are going to be caught up, all of the nodes will be caught up at least to be working on block number nine after having processed in the sanity check the stage two QCs it heard about for blocks one through eight. So that shows that every honest node will enter around R sub one working on a block number nine or higher. The other part of the claim is that no honest node will enter round r one working on a block eleven or higher, right? Because to be working on block number eleven it must be that you committed block number ten.
00:11:05.522 - 00:11:37.546, Speaker A: You must have had a stage two quorum certificate for block number ten, which means there must have been some honest nodes voting on something that was at block number ten. But remember, block number nine was by definition the highest block number that any honest node had ever been working on up to the round r zero. So none of the honest nodes had even made it to working on block number ten. Certainly none of them were voting for any block number ten s proposals. And so certainly there were never any quorum certificates for block number ten. So certainly nobody ever committed block number ten. So nobody has advanced yet to block number eleven.
00:11:37.546 - 00:12:27.566, Speaker A: And round R sub one, every honest node is either on block number nine or block number ten. Unfortunately, it is possible for a Byzantine node to force some of the honest nodes to work on block number nine in the first round and some of the in the round r one and other honest nodes to work on block number ten. I encourage you to think through the details. But the basic idea is that a byzantine node can keep secret, can keep private to itself a stage two quorum certificate that only it knows about for block number nine and it keeps it secret until sort of toward the end of this round R not. And at that time, kind of just before the sanity check step, it selectively forwards that stage two quorum certificate for block number nine to some but not all of the honest nodes. So the honest nodes that do receive it will receive it in time for the sanity check step. So they will process it.
00:12:27.566 - 00:12:56.174, Speaker A: It's a stage two QC for block number nine. They'll say, great, well I'll commit block number nine, I'll move on to block number ten. That's what I'll start working on in round R one. The rest of the honest nodes who didn't hear about the stage two QC yet, they're actually going to start round R one working on block number nine. Even after the Global Stabilization time, it is possible that honest nodes are slightly out of sync on the block number. They can't be very far out of sync, but they can be out of sync by one block number. So we'll have to deal with that in the rest of our liveness proof.
00:12:56.174 - 00:13:40.230, Speaker A: All right, so to organize the rest of the proof, let me make a definition, a definition of sort of like initial conditions for a round, such that if those initial conditions hold, everything proceeds in kind of a very orderly manner. So the notion is going to be that of a clean round and it's a round that satisfies four properties. The first two properties are kind of ones we've already sort of met just by fast forwarding appropriately. So property one is that we're sometimes after GST, as we are with our rounds R One and R Two. The second property is that we have an honest leader as we do with rounds R One and R Two. The third condition is something we know might not be true. The third condition will assert that all of the honest nodes begin the round working on the same block number and that may or may not be true.
00:13:40.230 - 00:14:30.566, Speaker A: The final property is a little bit tricky. It basically asserts that the leader of the round should be at least as up to date as any of the other honest nodes. A little more precisely, you might recall that in the pseudo code, if the node is a leader in the very first phase, one of the things it does is update its local variables before making a block proposal. So as a reminder, here's the pseudocode we're looking in the first phase. So in the upper left notice it says that the leader is supposed to update its local variables b sub l and QC sub l. Update to what? To the most recent quorum certificate that it knows about for the block that it's currently working on. And remember, this includes sort of quorum certificates produced for this block number, possibly before this leader was working on it itself.
00:14:30.566 - 00:15:17.962, Speaker A: So remember in the bottom right of this slide in the background at all times as a node, you are remembering and putting in your back pocket any quorum certificates you hear about for future blocks. And if you just all of a sudden switch to start working on block number ten and then you find out you're the leader of the next round, well, the good news is you have all of these quorum certificates possibly produced by other nodes for block number ten in your back pocket. And so then once you sort of update yourself in the upper left in the first phase, you're going to be good to go. So formally, the property is going to say that the leader of the round, not necessarily at the very, very, very beginning of the round, but the leader of the round immediately after doing the update. That happens in the first phase. At that point, the leader should be at least as up to date as any other honest node. All right? So that's a bit of a mouthful.
00:15:17.962 - 00:15:56.938, Speaker A: But the good news is that if a round is clean, it proceeds in very straightforward fashion. And moreover, it concludes with all of the honest nodes committing as block number H, committing whatever block the leader happens to propose in the first phase of that round. To see why this is true, let's go ahead and have a look at the pseudocode. So assume all four of these properties are true and let's trace through what happens in the tenement protocol. All right, so we start at the upper left. Now, remember, our first assumption is that we're post GST, so all messages are going to arrive within capital delta time units. Also, the second property is that we have an honest leader.
00:15:56.938 - 00:16:20.066, Speaker A: So the honest leader, it's going to do what it's supposed to do in the first phase. This is in the upper left. So first of all, it's going to update its local variables. So any quorum certificates it's heard about the block that it's currently working on, block number nine, it'll make sure its local variables are up to date, as far as it knows. And then it will propose whatever block is supported by that most recent QC. That's going to be the first phase. We're post GST.
00:16:20.066 - 00:17:08.550, Speaker A: So all of the leaders block proposals arrive at the other honest nodes by the start of the second phase delta time steps later. Now, remember, we had this fourth property which said that after the update, in the first phase, the leader's QC is at least as recent as that stored locally at any other honest node. So that property four directly means that this if condition will be satisfied for every honest node, right? That's literally our assumption. In a clean round, everybody satisfies that if condition. So all of the honest nodes are going to be broadcasting first stage votes for whatever block the leader proposed, and then all of those are going to be broadcast. We're post GST. So all of those first stage votes will arrive at their destinations by capital delta time steps later, by the start of the third phase.
00:17:08.550 - 00:18:09.690, Speaker A: Because at least two thirds of the nodes are honest nodes and all of those nodes voted for the block B sub l. And all of those votes arrived on time, every honest node will, in the third phase see firsthand a quorum certificate for the block proposed by the leader by the exact same reasoning, right? So they will all then broadcast their second stage votes. All of those second stage votes will arrive at most capital delta time steps later in time for the fourth phase. Because you have at least two thirds honest nodes, the number of such votes that will be received is a supermajority. That is again for the block B sub l that was proposed by the leader in the first phase. So all of the honest nodes, we'll see all of those sort of second stage votes by other honest nodes, all for the block B sub l that was proposed at the beginning of the round. And then with that if statement satisfied in the fourth phase, all of the honest nodes will proceed and just directly commit that block B sub l that was proposed by the leader back in the first phase.
00:18:09.690 - 00:18:43.026, Speaker A: So that's what I meant when I said if you have a clean round, if all four of these properties are satisfied at the beginning of the round, then everything just proceeds in the most straightforward way possible. All of the honest nodes just proceed in lockstep. All of them receive the exact same block proposal. In the second phase, all of them vote for that proposal. All of those first stage votes are received in the second stage of voting in the third phase. So all the honest nodes cast a second stage vote for that exact same block. And then in the fourth phase all of the honest nodes in fact commit that same block that was proposed by the leader back in the first phase of the round.
00:18:43.026 - 00:19:27.074, Speaker A: All right. So from here on out, to finish the proof, unfortunately we have to resort to a sort of case analysis depending on which nodes enter round one working on block number H and which ones wind up working on block number H plus one. Case analysis is all sort of a last resort but that's what it takes to prove liveness of the tendermint protocol. The really easy case just to sort of get us warmed up is if it just so happens that all of the honest nodes begin that first round R one, working on the same block and moreover working on block number H plus one. So in this case I claim that the first round R one already is clean. And as we'll see that basically means we're going to be done. Why is it clean? Obviously the first two properties hold just because we fast forwarded to a point in time where both of them hold.
00:19:27.074 - 00:19:56.170, Speaker A: Obviously the third property holds because all of the blocks are working on block number H plus one. Like block number ten. Why does the fourth property hold? Well, remember how we defined H, h was the sort of sort of biggest block number that any honest node was working on in the previous round, in round R. Not so that was like block number nine. If all of a sudden around r one everybody's working on block number ten. Well, I guess just like all the nodes literally just committed block number nine in the previous round. All of them just sort of reinitialize their local variables.
00:19:56.170 - 00:20:36.422, Speaker A: In particular, they all have a null QC and everybody's just starting round R One, working on block number ten with a clean slate. And so because all the honest nodes just have null QCs, that means they're all going to accept the block proposed by the leader in the first phase of the round. So the round is clean, they will proceed through it in lockstep, whatever the leader proposes. The honest leader of round R One proposes that's what's going to be committed by everybody at the end of the round. So why are we then done? Let's remember what we're trying to prove. We're trying to prove that this target transaction capital T is eventually included in some block. And so actually, I claim it's going to be included in this block, the one committed in round R One, if not earlier.
00:20:36.422 - 00:21:33.194, Speaker A: So remember, we sort of fast forwarded from a moment in time where all of the honest nodes knew what this transaction was, so that was true in round R One. And remember, honest nodes, when they sort of like assemble a new block from scratch, they do it with all of the not yet executed transactions that they're aware of. So if the target transaction capital T hasn't already been included in one of the first H blocks, like one of the first nine blocks, well, then the leader of this round, R One, is going to put that target capital T in its initial block, which is going to be the block that it proposes in the first phase. So that's why we're done. Not only does the leader proposal get committed at the end of round R One, but that block proposal includes the target transaction capital T, if that transaction wasn't already included in one of the earlier blocks. Case two. Suppose all of the honest nodes enter round R One, working on block number eight.
00:21:33.194 - 00:22:22.794, Speaker A: So, like block number nine, I claim that even actually in this case, it is also true that round R One is clean, although it's a little less obvious. In this case, the first three properties are all obvious. Right? We're after GST, we have an honest leader, and by assumption, everybody's working on the same block block number H. But so why is it that the leader after that update is at least as recent as all of the other honest nodes at the start at that round? So to see why that's true, to see why property four holds, let's revisit the pseudocode. So the first part of the argument, it's really kind of the same as the proof of our first lemma back when we argued that entering round R One, all of the honest nodes are going to be working either on block number H or on block number H plus one, just to remind you how that went. So we sort of rewound delta time steps from the beginning of round R One. So we rewound back to the fourth phase of the preceding round, round R zero.
00:22:22.794 - 00:23:36.578, Speaker A: Remember, we set things up so that itself would be at or after Global stabilization time. And now, remember we had that discussion about echoing quorum certificates, right? Whenever an honest node sort of hears about or forms sort of resets its local variables, it also broadcasts the new QC that it used to all of the other nodes. And so what that means is that every single QC known to any honest node at the start of the fourth phase of round R zero, all of those QCs will have been echoed and received by every other honest node by the start of round R one. So in particular, the leader l l one of the round R One will know at the start of that round about all of the QCs that any of the other honest nodes would have known about delta time steps earlier at the fourth phase of the previous round. And so that means that once the leader l one processes this update in the first phase, once it sort of updates its local variables according to the most recent things it's heard about, its QC will be at least as recent as those of all of the honest nodes. It's even possible that the leader has received some even newer QCs from Byzantine nodes in the meantime. But that's fine.
00:23:36.578 - 00:24:28.162, Speaker A: The point is just that the QC that the leader is going to propose in the first phase, that's going to be at least as recent as the locally stored QC of any honest node delta time steps earlier. That's not quite the statement we want. Right, property four says that the leader's QC after the update in the first phase should be at least as recent as any QCs stored locally by the other honest nodes at the start of that round. But if you look at the pseudocode, you'll see that the QCs locally stored by the other nodes at the start of round R One, they are the same QCs that they were delta time units earlier. Nowhere in the pseudocode would you be updating your QC strictly after the start of the fourth phase of the previous round and up to and including the start of the current round. Now, we're actually not done. We were done in case one just arguing that round R One is clean.
00:24:28.162 - 00:25:28.534, Speaker A: We're actually not done in case two. So what's the difference? Well, in case one, not only was round R One clean, but also it sort of just was a complete clean slate at the beginning of that round R One, right? Literally all of the honest notes had just committed to block number H in the previous round and round R not. So they all started round R one with the sort of null QCs. And in particular, the leader assembled the block from scratch, including. All of the transactions it knew about, including transaction capital T in case two. That's not true, okay? So if all of the nodes begin round R one, working on block number H, some of those nodes actually were working on block number H previously as well. And so what that means is that the leader of Round R one so if you think about what block it proposes, it may not wind up assembling its own block from scratch, right? Because it may actually have, like, say, a stage one quorum certificate for some block for being block number nine, in which case, it's going to propose that instead.
00:25:28.534 - 00:26:26.186, Speaker A: So that's the big difference in round R one. In case two, the leader might propose a block which it did not itself assemble, that what might have been proposed might have been inherited from some previous round, in particular, maybe some previous round with a Byzantine leader. So, while it is true that Round R One will lead to a commit, and in fact, to a commit to whatever block the leader l one proposed in Round R One, we cannot guarantee that the target transaction capital T is in that block. That block that might have been inherited from a previous round, but not a big deal, because now, in Round R Two, it's exactly the same as it was in case one. Okay? So all of the Yanis nodes just figured out what block number H is in round R one. They all start round number R two with a clean slate. So just like in case one, they're going to conclude by committing a block that was assembled from scratch from round R two's leader, which again will include transaction capital T if it hasn't already been included somewhere else.
00:26:26.186 - 00:27:02.518, Speaker A: All right? So case number three, this is the case where the leader is lagging behind. So the leader l one of round R one. Suppose it's working on block number nine, but at least some of the honest nodes have forged ahead and are already working on block number ten. All right? So let's think this through looking at the pseudocode. So here's the pseudocode. Remember, we're thinking about the case where the leader enters round R one, working on block number nine, and at least one honest node is working on block number ten. So a couple of things are going to be true, right, which really are kind of variations of arguments we've already seen, right? So first of all, by the end of round R one, nobody's going to still be working on block number nine.
00:27:02.518 - 00:27:41.950, Speaker A: Everybody's going to be working on at least block number ten. Why? Well, one honest node, by assumption started this round working on block number ten. As usual, it's going to echo whatever stage two QC it had for block number nine. We're post GST, so all the other nodes are going to be seeing that stage two QC for block number nine. And that's going to get processed, if not earlier, at the sanity check at the end of round R one in the bottom left part of the slot. So if nothing else, all of the other honest nodes will just sort of hear about whatever stage two QC led sub honest node to commit some version of block number nine. They're going to hear that during this round and then they'll commit that same block themselves by the end of the round.
00:27:41.950 - 00:28:37.010, Speaker A: The second claim is that literally nothing interesting has happened at height h plus one by the conclusion of round R one. So why is that true? Well, first of all, remember, no honest nodes were ever even working on height h plus one until this current round, until round R one. That was how we define h in the proof of that first liveness lemma. So certainly prior to round r one, there were definitely no quorum certificates for height h plus one blocks because no honest nodes were voting at height h plus one round r one, because there are some nodes that are working on height h plus one. In principle, those nodes would be willing to vote on block proposals which could form quorum certificates at height h plus one. Except remember, in case three, the leader of this round r one is still stuck at height h, like block number nine. So the leader is going to issue a proposal for a block number at height nine.
00:28:37.010 - 00:29:15.898, Speaker A: And so that's also not going to lead to any quorum certificates at height ten. Those will have to wait until the next round r two. So what did we learn from that exercise? We learned that starting in round R two, all of the nodes are going to be working on block number h plus one. And not only that, no action has yet happened at height h plus one. Nobody has any quorum certificates, for example, for any block at height h plus one. And so what that means is round R two of case three is going to look exactly like round R one did of case one in particular. It's a clean round and all of the nodes are going to be starting with just sort of the null quorum certificate.
00:29:15.898 - 00:29:54.714, Speaker A: The honest leader is just going to assemble a block from scratch about whatever transactions it knows about that haven't been executed yet, because the round r two is going to be clean. That's just going to be committed. So by the end of round R two, in case three, the target transaction will be included either in the block committed to at round R two, if it hadn't already been earlier in the fourth and final case, then case four that's we're going to be. Conversely, the leader has gotten ahead. So the leader node of round r one is working on block number h plus one. But there's still some honest nodes still working on block number h. So most of this argument is just variations on things we've already said.
00:29:54.714 - 00:30:41.900, Speaker A: So while it's true that entering round r one, you know, some of the nodes are on H plus one, some of the nodes are stuck black on, you know, block H block number nine. Certainly by the end of round r one, everybody will be on block number H plus one, block number ten or higher. Right? Because if nothing else, the leader node knew a stage two quorum certificate for block number nine prior to the start of round r one. That's why it was working on block number ten in round r one. It of course echoes that's all the other honest nodes were after GST, so they'll all hear about that echoed corn certificate, stage two, corn certificate for block number nine. So after the sanity check in round r one, if not earlier, all the other honest nodes will have proceeded onto H plus one. So definitely when we get to round r plus two, all of the nodes are going to be on block H plus one or higher.
00:30:41.900 - 00:31:27.622, Speaker A: So what could possibly happen in round r one now? Well, this is the first round in which any honest nodes have been working on height H plus one on block number nine. Right? Remember that's how we defined H last round, round R. Not nobody had made it to block number ten yet. So that means the honest leader of this round r two, the node l two, it's going to start with a clean slate. It doesn't have any sort of non trip, non null quorum certificates stored in its sort of local variable. So at the beginning of round r one, leader l one will just assemble honestly a block meaning of all of the transactions that it knows about that haven't yet been executed in a previous block. So in particular, it'll assemble a block that includes the transaction capital T, if that hasn't already been included.
00:31:27.622 - 00:32:16.714, Speaker A: So there's two possibilities for sort of what happens in round r one. One possibility is that it leads some honest node to commit to a block number ten. And if any node commits to a block number ten in round r one, well, there's only ever been one height ten block proposal, which is the one made by the leader l one of this round r one just now, which was this honestly assembled block. So this is a great case for us, right, if any node in round r one actually commits block number ten, well, we know what block it was. It was the one assembled by this leader with the target transaction. So we're done. So the other possibility is that actually none of the honest nodes commit block number ten in round r one and we proceed to round r two with all of the honest nodes still working on block ten.
00:32:16.714 - 00:32:53.254, Speaker A: But now, of course, we actually are going to have a clean round. Right? So again, the first two properties are just hold by assumption. The third property, remember, all of the honest nodes are working on block number ten. So that's the third property, which is now satisfied. The fourth property is going to be satisfied for the exact same reason it was satisfied for round R two, in case two. So basically, whoever the leader of round R two happens to be, they will have heard about all of the honest nodes most recent QCs because they were echoed in the previous round. So the honest leader of the round R two, it's going to propose a block supported by a QC at least as recent as anything any of the honest nodes have heard about.
00:32:53.254 - 00:33:45.960, Speaker A: And that's exactly property four. So what that means is that the second round R two, this is going to be a clean round. So either, again, block number ten already got committed in round R one, in which case we're good, or it's going to get committed in block number ten will be committed in round R two, in which case we're also good, because the block that gets committed in round R two, there's only two possibilities. Either it was the block produced by the assembled firsthand by the honest leader of round R one, or conceivably, it could have been a new block assembled by the honest leader l two of round R two. But it doesn't matter. Both of those blocks were assembled by honest leaders at points in time after which they knew about the target transaction capital T. So no matter which of those two things happen, a block number ten gets committed by the end of round R two, which includes the target transaction capital T.
00:33:45.960 - 00:34:32.482, Speaker A: Phew. That's all for the cases that's the proof of liveness quite tricky, really depends on the fine details of exactly how the tenement protocol works. Again, I really can't imagine coming up with this liveness proof or with a protocol without really doing both at the same time. Really just having sort of parallel notepads where you're working out the protocol and the liveness proof and then also potentially the consistency proof as well. So that's it. Protocol always consistent, eventually live as promised. One final pretty short video for lecture seven, where we ask the question that every good engineer, every good computer scientist, should always be asking themselves, can we do better? Can we improve over tendermint? So that'll be the topic of the next video.
00:34:32.482 - 00:34:34.350, Speaker A: I'll see you there. Bye.
