00:00:00.490 - 00:00:47.446, Speaker A: Hi everyone, and welcome to this video that accompanies section 23.4 of the book Algorithms Illuminated, part Four, a section about the famous P not equal to NP conjecture. So way back in the fourth video of this video playlist, we gave an informal definition of the P not equal to NP conjecture. We said that it basically means that checking someone's work, checking an alleged solution to a computational task, can be fundamentally easier than coming up with your own solution from scratch. So we are now finally in a position to define that conjecture formally. We know now exactly what the NP stands for when we talk about the P not equal to NP conjecture. Those are the search problems with efficiently recognizable solutions.
00:00:47.446 - 00:01:28.406, Speaker A: So what about the P in the P not equal to NP conjecture? Well, those are just the problems in NP, the problems that not only have efficiently recognizable solutions, but in fact can be solved in polynomial time. We've seen plenty of examples of members of this complexity class P. So for example, if we think not about three Sat, but we think about two Sat. So Satisfiability, where each constraint is the disjunction of, at most two literals, that problem, we know, can be solved in polynomial time, even in linear time. One way to do it is via a reduction to computing the strongly connected components of a suitable directed graph. Or think about the minimum spanning tree problem. Now, on the one hand, the MST problem is an optimization problem.
00:01:28.406 - 00:01:53.082, Speaker A: And remember, NP, that's only search problems. And here we're defining P as a subset of NP. So P is also only search problems. So we wouldn't say that the MST belongs to this complexity class P, but we would say that the search version of the minimum Spanish tree problem belongs to this set P. That would be a correct statement. So now we know what the P and NP stand for in the P not equal to NP conjecture. NP are the problems with efficiently recognizable solutions.
00:01:53.082 - 00:02:28.170, Speaker A: P are the problems of NP that can be solved in polynomial time. And so what does the conjecture say? The conjecture says that these two sets are different, that P and NP are not the same set of problems. Now look, by definition, every problem in P also belongs to NP. So P is a subset of NP. So what the conjecture says is that subset inclusion is strict. In other words, the conjecture is that there's at least one problem in this complexity class NP. There's at least one problem with efficiently recognizable solutions that is not, in fact, polynomially time solvable.
00:02:28.170 - 00:03:10.518, Speaker A: As depicted in the cartoon on the slide, there are two possible states of the universe, and again, we actually don't know which one we're in. Each one is technically possible, although most people have an opinion about which one is correct. So if the P zero equal to NP conjecture is true, that says that there exists some problem with efficiently recognizable solutions that cannot be solved in polynomial time. So that would be like on the left part of the figure. So we have some problems we can solve in polynomial time, like the minimum sanity problem or the two Sat problem. But then there'll be other harder problems within NP like three Sat and the Travis Halesman problem, which cannot be solved in polynomial time. That's the state of the world, if in fact the P not equal to NP conjecture is true.
00:03:10.518 - 00:04:12.086, Speaker A: And just to be clear, when I write MST and Tsp on the slide, I'm referring to the search versions of those two problems so that it type checks to speak about them being members of the complexity class NP. On the other hand, if in the sort of less plausible case that P and NP coincide, where the only prerequisite for polynomially time solvability is to just be able to efficiently know a solution when you see one, then we have this case on the right where P and NP become the same thing. And in particular, P is not just confined to the MST and two Sat problems. P grows to capture everything in NP, for example, including the three Sat and the search version of the traveling salesman problem. Let's note that if you ever had a polynomial time algorithm for an NP hard problem, you would be refuting the P not equal to NP conjecture. If you remember all the way back to our opening sequence of videos corresponding to chapter 19, this at the bottom of the slide, this was actually our provisional definition of an NP hard problem. We hadn't formally defined the P not equal to NP conjecture, but just without informal understanding, we used this provisional definition on this slide.
00:04:12.086 - 00:05:08.350, Speaker A: Now that we have formal definitions both of NP hard problems and of the P not equal to NP conjecture, this is now a precise mathematical statement. The claim is that a polynomial time algorithm for any NP hard problem would refute the P nut equal to NP conjecture. Why? Well, for the usual reasons. Suppose you had a problem like the Tsp that was NP hard. What does that mean by definition? What it means is that every single problem in the complexity class NP, every search problem with efficiently recognizable solutions, every NP problem reduces to that NP hard problem reduces, for example, to the Tsp now reduction spread tractability. So if you had attractable algorithm, a polynomial time algorithm for the hard problem for the Tsp, that would immediately translate into attractable into a polynomial time algorithm for all of the search problems in the complexity class NP, that would imply that P equals NP. And that's what it means to refute the P not equal to NP conjecture.
00:05:08.350 - 00:06:19.400, Speaker A: Let's conclude this video by talking a little bit about the current status of this P not equal to NP conjecture. So this conjecture is rightfully viewed as possibly the deepest open question in all of computer science and one of the most important questions in all of mathematics. For example, back in the year 2000, the Clay Institute identified seven Millennium Problems, which they thought were sort of the most important problems moving forward to the 21st century, and they offered a reward of $1 million to anybody who could solve one of these seven open problems. And the P zero equal to NP problem was one of the seven on that list. If you're wondering about the other six, they were the Riemann hypothesis, the Navier Stokes equation, the Poncaret conjecture, the Hodge conjecture, the Berchin Swinertin Dyer conjecture, and the Yang Mills Existence and Mass Gap problem. So, as of the time of this recording, which is in the year 2020, only one of the seven Millennium Prize problems has been solved. And that was the Ponchore conjecture, which was proved by Gregory Pearlman back in 2006, who also, as you may have heard, famously refused the $1 million in prize money.
00:06:19.400 - 00:07:05.810, Speaker A: Now, speaking of the $1 million, I mean, I don't mean to belittle it. Obviously that's a lot of money, but I still actually think that amount undersells the importance to both science and society of making progress on these open questions. The leap in humankind's understanding in order to resolve questions of this depth is very hard to put a price on that kind of advance in scientific knowledge. Now, while nobody actually knows whether or not the P not equal to NP conjecture is true, almost everybody has an opinion about it, and almost everybody thinks that the conjecture is true. So I've written here the majority belief is that P is not equal to NP, but it's not a 51% majority. It's more like a 90 something percent. Majority of theoretical computer scientists fully expect this conjecture to someday be proved.
00:07:05.810 - 00:07:41.902, Speaker A: One quite notable figure who placed a bet in the opposite direction was the famous logician Kurt Girdle. Maybe you've heard, for example, about girdle's completeness or incompleteness theorems. This is the same girdle. So in 1956, he wrote a letter to John von Neumann, maybe the most accomplished mathematician of the 20th century. This is in 1956, a little bit before von Neumann passed away. In this letter, Gertle was talking about whether you could, in an automated way compute proofs proving statements that are not too much longer than the shortest possible proof. And this turns out to be equivalent to the P versus NP question.
00:07:41.902 - 00:08:35.620, Speaker A: And Girdle actually conjectured that there should be an automated procedure for coming up with short proofs when they exist, which is equivalent to the conjecture that P equals NP. So who knows? Girdle aside, most experts, 90 some OD percent of experts believe that P is not equal to NP. Where does that belief come from? Well, first of all, humans seem really crafty at coming up with efficient algorithms when they exist. And we've seen many, many, many examples in this book series. So if there really was some efficient algorithm out there for something like the traveling salesman problem, it would be pretty surprising that somehow, with all the human ingenuity with designing algorithms, we haven't yet figured that out. On the other hand, humans seem quite bad at proving impossibility results for proving limitations on what algorithms can do. So in the event that P is different than NP, it's maybe not so surprising that we haven't yet figured out how to go about proving it.
00:08:35.620 - 00:10:02.372, Speaker A: The second reason is just the prospect of PNNP being the same, of efficient recognition, being sufficient for efficient search, efficient solvability just kind of doesn't really jive with our experience in reality, right? We all know from firsthand experience tasks where checking someone's solution appears to be much easier than coming up with your own from scratch. Even just kind of like a difficult Sudoku puzzle I would put in that category. But if P were to equal NP, that would in effect say that the creativity that appears necessary to solve difficult problems, that that creativity can be efficiently automated. So, for example, if P equals NP, then at least in principle, you could generate a proof of Fermat Last Theorem automatically in time polynomial and the length of the proof. But what if everybody's wrong? What if actually the conjecture is false? NP equals NP One point that doesn't get discussed often enough is that there's really kind of two different versions of P winding up being equal to NP. The first version is that maybe it's the case that all NP problems can really be solved quickly in the real world by practical algorithms, so that I find a much more implausible scenario. If it were to transpire, that would have huge consequences for society.
00:10:02.372 - 00:11:02.456, Speaker A: Not least, it would mean the end of modern commerce as we know it, which is based on the hardness of problems like factoring and the discrete logarithm. And if P equaled NP with practical algorithms, then you could immediately break all of the world's crypto systems. The second scenario, which is not quite as implausible, is that P happens to equal NP, because every NP problem can be solved by an algorithm that technically runs in polynomial time, but is too complicated or slow to ever be implemented and used in the real world. This is a scenario that Donald Knuth himself has even speculated about. If that were the case, there'd be few to no implications for the real world. Rather, it would just indicate that polynomial time solvability, that's too liberal a definition for what we really wanted to capture, which is solvable in a reasonable amount of time by a concrete algorithm in the physical world. So in 1956, Gertle conjectured something equivalent to P equals NP.
00:11:02.456 - 00:12:03.230, Speaker A: In 1967, Edmunds conjectured something equivalent to P not equal to NP. Which of them is right? Who's right, Gertle or Edmunds? You'd hope that as the years go by, we'd be getting closer to a resolution of the P NyQuil, then P conjecture one way or the other. But instead, as more and more mathematical approaches to the problem have been proven inadequate, the solution to the conjecture seems to be receding further into the distance with each passing year. And we definitely have to be prepared for the reality that we may not know the answer to this conjecture for a long time. Years, definitely decades, probably centuries. Who knows? The next video will continue this video's theme of unproven conjectures, and we'll be looking at two interesting, stronger versions of the P, not equal to NP conjecture called the exponential time hypothesis, and then also the strong version of the exponential time hypothesis. I'll see you there.
00:12:03.230 - 00:12:04.520, Speaker A: Bye.
