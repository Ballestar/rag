00:00:00.410 - 00:01:04.026, Speaker A: All right, so this is going to be the second of the three different versions of the key takeaway of this lecture that in general deviating from long from the longest chain consensus protocol can boost the rewards of a node. So last video we saw that in sort of this extreme case where you had a really big node with more than half of the hash rate, where obviously a lot of other things go wrong as well. And we're going to see in this video that actually under our current assumption of worst case tiebreaking by honest nodes among competing longest chains. Under that assumption, actually, it does not matter how big you are, no matter how small you are as a node, it will in general be profitable to deviate from longest chain consensus. Then in the next video we'll do the third and most difficult argument, which is where we show that a version of that key takeaway is true even in the case that honest nodes tiebreak in the best possible way for themselves. So the deviations from honest behavior that we're going to be talking about sometimes go by the name selfish mining. Selfish here just meaning that the nodes are doing profit maximization rather than just obediently following a protocol.
00:01:04.026 - 00:01:25.190, Speaker A: Mining is just referring to the usual name for block production in a proof of work blockchain. And indeed this work we're going to talk about on selfish mining. This video and next video, it actually dates back pretty far. It dates back to 2013, I believe is when it was first kind of disseminated, formally published, I believe in 2014. This is by AOL and Surrey.
00:01:29.290 - 00:01:30.726, Speaker B: So at the time that they did.
00:01:30.748 - 00:02:35.450, Speaker A: That work, right, 2013 or so, bitcoin was for the most part almost the only game in town. So naturally they were going to focus on Bitcoin in particular Nakamoto Consensus. And as we'll see the attacks we're talking about, selfish mining is pretty specific to Nakamoto Consensus these days. People also sometimes use the word selfish mining in a much broader sense, which is just kind of any deviation from intended behavior by block producers that's motivated by increasing their revenue. So for example, deviations that sort of increase the amount of transaction fees that a block producer might collect or the amount of revenue they get from the application layer, which sometimes goes by the name Mev. So sometimes selfish mining is sort of this broader connotation of just any profit motivated deviations from honest behavior. But in this lecture we're going to focus on sort of the original narrow meaning of the phrase selfish mining, which is the specific deviations identified by AAL and Surur specifically for boosting the share of block rewards that a node earns in Nakamoto Consensus.
00:02:35.450 - 00:03:16.826, Speaker A: There's actually a fairly famous result, at least in the academic sphere. Last time I checked, this paper by AAL and Surir actually had a higher citation count than any other kind of formally published paper concerning blockchains, like the Bitcoin White paper has a higher citation count. But if you're talking about sort of formally published research papers, last I checked, this one was number one on the leaderboard. Also, on a personal note, when I saw this work at the time, it definitely made a big impression on me as well. I was aware at that time of the Bitcoin protocol. Certainly thought the Bitcoin protocol was cool. I don't know that I'd really started thinking about it as like a bona fide research area in its own right.
00:03:16.826 - 00:04:19.360, Speaker A: And then when this paper by A Al and Surreyer came along, I realized that sort of especially on the game theory side, maybe there's a lot more depth here than I had originally realized. All right, so let's get into it. So like in the last video, we're going to be thinking about the case where some portion of the hash rate is honest and just doesn't think about profit maximization and just obediently follows the protocol. And then a single node is going to be contemplating whether or not it should also be honest along with everybody else, or if there's some deviation that would boost its share of the block rewards. Now, unlike in the last video, this node that we're contemplating, node A, that's going to have some hash rate alpha, which is less than one half. So again, in game theory language, we're going to be proving that obediently following longest chain consensus does not constitute a Nash equilibrium. There will in general be an incentive for nodes to unilaterally deviate from that outcome.
00:04:19.360 - 00:05:11.768, Speaker A: So as in the previous video, if node A just kind of conforms and also like the other nodes follows the protocol honestly, right, then the chain is just going to grow in a very orderly fashion. Node A will have proportional representation of the blocks produced and therefore of the blocks on the longest chain. So it will get an alpha fraction of the block rewards if it is honest. So the question is, is there any other strategy that would boost its share of the pie to a fraction bigger than alpha? To see that, the answer is yes. Let's talk about a strategy which is very much motivated by the same strategy we used in the 51% case in the last video. Let's think about a strategy where node It's trying to sort of accomplish two different things. So first of all, for the blocks that it produces, it obviously wants as many of those to get onto the longest chain as possible, right? You only get block rewards if you're on the longest chain.
00:05:11.768 - 00:05:51.248, Speaker A: So node A, ideally it gets all of its blocks on the longest chain. That was certainly true in the last video in the 51% case. And then secondly, so in addition to sort of having as many blocks as possible on the longest chain, it also wants there to be as few other blocks as possible on the longest chain. That's how it maximizes its share of blocks on the longest chain, which is its share of the pie. And so that means it needs to fork, it needs to orphan as many honestly produced blocks as possible. Now, last video in the 51% case, we had a strategy that actually was able to orphan all of the honestly produced blocks. None of them got under the longest chain with a smaller node, that's no longer going to be possible.
00:05:51.248 - 00:06:01.776, Speaker A: But still you'd like to approximate that to the extent that you can. So as much as possible, you'd like to orphan as many honest blocks as possible off of the longest chain while making sure all of yours get in.
00:06:01.798 - 00:06:02.950, Speaker B: So that's the plan.
00:06:03.480 - 00:06:15.210, Speaker A: Before I sort of write down formally what this strategy is, let's actually just talk through how it's going to work. In an example. I think once you sort of see the example, it'll be kind of pretty clear what the more general strategy is.
00:06:15.980 - 00:06:17.544, Speaker B: So let's assume we're just kicking things.
00:06:17.582 - 00:06:20.200, Speaker A: Off with a genesis block Bnot.
00:06:22.300 - 00:06:24.164, Speaker B: So now we're doing Nakamoto Consensus.
00:06:24.212 - 00:06:49.650, Speaker A: All the nodes winning the protocol just keep trying to solve the hard crypto puzzles. And by the random oracle assumption, your probability of being the next leader of producing the next block is proportional to your hash rate. So in other words, there's an alpha chance that the next block is going to be produced by node A. There's a one minus alpha chance it's produced by someone else, which would be an honest node. So let's for the example, assume that the next block is produced by an honest node, which again is a better than 50% chance, a one minus alpha chance.
00:06:51.060 - 00:06:51.536, Speaker B: All right?
00:06:51.558 - 00:07:24.830, Speaker A: So that's the block B one. Okay, so that's an honestly produced block and we would like to orphan it from the longest chain if possible. How would we orphan it? Well, node A would try to produce its own alternative block, also extending the genesis block. So once B one is announced, all of the honest nodes, obviously they're just going to be trying to extend the longest chain. They're going to be trying to extend B one. This node A is going to try to extend the genesis block. And again, there's an alpha chance that node A does in fact extend the genesis block before any of the honest nodes extends B one.
00:07:25.840 - 00:07:27.708, Speaker B: So if node A in fact succeeds.
00:07:27.724 - 00:08:00.136, Speaker A: And produces an alternative block B one prime, extending the genesis block B zero, then again, this is because we're using adversarially chosen tiebreaking by honest nodes. As soon as you have a tie between an H block B one and a block B one prime at the same heights, the adversary can just arrange that. Anybody. So node A or an honest node is going to wind up extending the A block B one prime. So if node A successfully produces b one prime, then B one is orphaned. But remember, node A only has alpha fraction of the hash rate. So this definitely may not happen.
00:08:00.136 - 00:08:07.790, Speaker A: And for the example, let's actually assume that the next block is also produced by an honest node. So that's going to be a block B two extending B one.
00:08:09.280 - 00:08:10.636, Speaker B: Now, if this happened in the last.
00:08:10.658 - 00:09:07.432, Speaker A: Video when node A had 51% of the hash rates, remember there basically node A was unwilling to tolerate even a single honestly produced block on the longest chain. So in the last video, node A would just keep on even though now b two was created, it would still keep trying to extend the genesis block B zero to orphan all of the honest blocks, including B one. And it could get away with that because it had 51% of the hash rate and it was producing blocks faster than all of the honest nodes combined. Now that is not true in this video, right? So node A, it's actually producing blocks less frequently than the collective of honest nodes, which means that once it's behind, right in the way, now it's behind by sort of two steps on the sort of honestly produced chain, there's a real chance that it will never actually catch up. And so that would be a bad strategy to just keep trying to extend b zero. So instead here node A is going to be like, all right, fine, I'll concede the honestly produced block B one. Let's allow that to be in the longest chain.
00:09:07.432 - 00:09:26.100, Speaker A: But let me at least try to orphan off this more recent honestly produced block B two. And so what that means is that the node A is going to switch from trying to extend B zero to trying to extend B one, trying to produce an alternative block B two prime extending B one, thereby orphaning B two if it succeeds.
00:09:27.320 - 00:09:29.076, Speaker B: And let's now assume actually here that.
00:09:29.098 - 00:10:03.440, Speaker A: Node A does succeed. So let's assume that the next block produced is produced by node A. So that's going to be a B two prime extending B one. And as we discussed, because we're assuming adversarial tiebreaking by honest nodes, once b two prime shows up, it's as if b two doesn't exist, right? So node A, of course it will extend B two prime itself just by choice. And then any honest node, the adversary can just say, oh well, break ties among these two equally longest chains in favor of B two prime. So b two never has a shot at ever being extended again. Obviously it's not going to wind up on the longest chain, it gets orphaned.
00:10:04.820 - 00:10:05.216, Speaker B: All right?
00:10:05.238 - 00:10:43.580, Speaker A: So now from this example, you should have pretty strong intuition about one of the ingredients into this strategy, this deviation from honest behavior. But there's also a second really important ingredient which actually we did not have in the last video we did not need when node A was 51%. And the rest of the strategy is really going to take advantage of the ability of a node to delay block announcements. And we talked about this back in the context of consistency and liveness. In lecture eight, we said, okay, well, back then we were thinking about Byzantine nodes. We're like, what could Byzantine nodes do different than the longest chain consensus? They could choose a predecessor that's not the end of the longest chain. They could sort of produce empty blocks or just sort of censor transactions.
00:10:43.580 - 00:11:21.880, Speaker A: And they could, if they wanted, not announce their block immediately. And in lecture eight, the only purpose that served was kind of to make our proofs more annoying, right? In our consistency and liveness proofs, we wanted to handle Byzantine nodes that delayed block announcements because that's something they could obviously do. So we certainly wanted our proofs to handle it, but it didn't actually affect sort of where the threshold was. We still got consistency and liveness. As long as you had more than 50% honest hash rate here, we're going to see that the ability to delay block announcements is really going to matter. And it's actually really directly useful for nodes that want to boost their share of the block rewards.
00:11:23.260 - 00:11:25.240, Speaker B: So to see how this works in the example.
00:11:25.390 - 00:11:43.216, Speaker A: So at the moment, all of the nodes are trying to extend B Two prime, right? Node A just sort of by construction of its strategy, all of the honest nodes by sort of adversarial tiebreaking, everybody's trying to extend B Two prime. Someone's going to succeed. Let's assume it's node A that succeeds in creating a block B.
00:11:43.238 - 00:11:44.320, Speaker B: Three prime.
00:11:46.020 - 00:12:35.090, Speaker A: So Node A, if it wanted, could go ahead and announce this block B Three Prime as soon as it's created. But there's actually something more strategically clever it can do. So in this strategy, actually, what Node A is going to do is going to keep quiet, keep private the fact that it created this block B Three prime. That's why the block is kind of in a dotted line and the predecessor arrow is in a dotted line. That means that Node A is actually keeping to itself that it created this block B Three Prime. All right, so why is this helpful to Node A? How is it beneficial to keep private the existence of block B Three Prime? Well, let's think about sort of the world where it's private and the worlds where it's public. So imagine that actually that Node A did just sort of broadcast B Three Prime immediately to everybody.
00:12:35.090 - 00:13:15.550, Speaker A: Then what would happen? Everybody would know about this sort of full magenta entry and everybody would be trying to extend block B Three Prime, right? That's the end of the longest chain. So that's what the honest nodes are going to be trying to extend. Node A, of course, will also be trying to extend its own block. And that means that if an honest node succeeds in extending the publicly announced block B three prime. That's going to be a block B four which goes at the end, which is going to be the new end of the longest chain. So that B four would be an honestly produced block that has a legitimate shot at winding up in the longest chain at the end of the day. And remember, the point of this strategy is to keep honestly produced blocks off of the longest chain as much as possible.
00:13:15.550 - 00:13:45.460, Speaker A: So suppose instead node A actually did keep B three prime private. How would that change things? Well, node A would be doing exactly the same thing either way. Node A knows about block B three prime either way. It's going to be trying to extend its own block either way. But if B three prime is private, if honest nodes do not know about it, then they're only aware of the blocks up to B two and B two prime. And again by adversarial tiebreaking they're all going to be trying to extend B two prime. And so that is wasted work.
00:13:45.530 - 00:13:46.160, Speaker B: Right?
00:13:46.330 - 00:14:40.120, Speaker A: You have tricked the honest nodes at this point into trying to extend a chain which is not the longest, which means any successes they might have, you are in a position to just completely waste, to completely sort of cancel out. So to see exactly how this works, to see exactly how node A is basically going to nullify any honestly produced blocks in this case, let's actually assume that the next block created is also by node A. So that's going to be a block b four prime, extending B three prime, which again that node A will keep private from all of the other nodes. So once this happens, node A will keep trying to extend its own latest block so it'll try to privately extend B four prime. The honest nodes at this point do not know about B three prime or B four prime. So they're going to extend the end of the longest chain that they know about breaking ties adversarially, they're going to be trying to extend B two prime. And now suppose that is actually the next thing that happens.
00:14:40.120 - 00:14:47.000, Speaker A: Suppose some honest node does successfully create a block which is going to name as a predecessor block B two prime.
00:14:49.710 - 00:14:51.194, Speaker B: So now is the moment in time.
00:14:51.232 - 00:15:20.110, Speaker A: Where node A can say ha, I tricked you. You were trying to extend something other than the longest chain. Yes, you produced a block, but I can make sure that it gets orphaned. So as soon as some honest node announces B three, node A is just going to announce its competing block at the same height. So it's block B three prime. And then again you're going to have a tie for the longest chain by adversarial tiebreaking honest nodes, given the knowledge of both B three and B three prime are going to work to extend B three prime. B three will never get extended, it will never wind up in the longest chain.
00:15:20.110 - 00:15:23.650, Speaker A: So b three gets orphaned by the announcement of b three prime.
00:15:24.950 - 00:15:26.178, Speaker B: So let me now actually sort of.
00:15:26.184 - 00:16:02.814, Speaker A: Write down the strategy. But again, the strategy, I think you're going to know exactly what this is just from talking through this example. Again, there's sort of two main ideas. So one idea is that like in the 51% case, we're going to try to orphan honestly produced blocks off of the longest chain, but we're not going to be as stubborn as we were in the last video because we don't have the sort of advantage of having 51% of the hash rate. And so node A is only going to try to, if the longest chain concludes with multiple honestly produced blocks, node A is only going to try to orphan the most recent of them. So that's idea number one. And then idea number two is a sort of delayed block announcements.
00:16:02.814 - 00:16:36.620, Speaker A: So if node A is actually creating blocks that get it ahead of the honestly produced blocks, it's going to release the announcement of those blocks only on a need to know basis in order to make sure that all honestly produced blocks during that period wind up getting wasted. So the strategy is going to have two cases depending on, in effect, who's ahead, whether node A is ahead or whether the honest nodes are ahead. So what do I mean by that? Well, let's let h, little h denote the biggest height of any block that's been produced thus far.
00:16:42.210 - 00:16:44.126, Speaker B: And again, remember by block height we.
00:16:44.148 - 00:17:13.930, Speaker A: Just mean the number of steps since Genesis. So like in our example, at the bottom of the slide, b zero has height zero, b one has height one, b two and b two prime have height two, and so on. So among all the blocks have been created, and again these may or may not have been announced, right? There's blocks that everybody knows about, there's blocks that only node A knows about. But among all of the blocks that have been produced, little h is the highest block height of any of them. So for example, in the bottom slide, little h would be equal to four because of the secret block b four prime.
00:17:14.830 - 00:17:16.618, Speaker B: So in case one we're thinking about.
00:17:16.704 - 00:17:46.200, Speaker A: Node A is in the advantageous position, node A is ahead, meaning that there exists a block at height h that was produced by node A. So for example, that is the case at the end of the example that we talked through because b four prime was produced by node A. And of course in this case the strategy for node A is obvious. It should just try to extend its own block, right? It's already winning. It's already kind of got the tip of the longest chain, so it may as well just sort of make that even longer.
00:17:51.860 - 00:17:53.056, Speaker B: This is also the part of the.
00:17:53.078 - 00:18:04.070, Speaker A: Strategy where you delay block announcements. So in case one if node A succeeds in producing an A block at an even higher height, it keeps that quiet for now.
00:18:04.920 - 00:18:06.596, Speaker B: So in our example, we saw this.
00:18:06.618 - 00:18:16.680, Speaker A: Part of the strategy in action. For example, when block b three prime was created extending b two prime, and similarly when b four prime was created to extend b three prime.
00:18:17.500 - 00:18:19.176, Speaker B: So the second case is where the.
00:18:19.198 - 00:18:33.390, Speaker A: Honest nodes have the advantage. So the highest block height was produced by an honest node. So for example, very early in our example, we just had the blocks b zero and b one where b one was honestly produced. So that would be an example of when you're in this case too.
00:18:42.350 - 00:18:43.894, Speaker B: So at no point do you worry.
00:18:43.942 - 00:19:31.130, Speaker A: About blocks at heights lower than little H, little H minus one, little H minus two, et cetera. There may well be honestly produced blocks at those lower block heights that belong to the longest chain now and forever. And that is just sort of something node A has to accept because it doesn't have 51% of the hash rate. Because it has less than that, it has to resign itself to some honestly produced blocks getting into the longest chain. But node A will always be trying to orphan the tip of the longest chain if it was honestly produced. How does it do that? It tries to produce a competing block at the same height little H, extending the same block that the honestly produced block does. And then if it succeeds right again using adversarial tiebreaking, that's going to wind up orphaning at least that most recent honestly produced block.
00:19:31.130 - 00:19:44.560, Speaker A: If node A does succeed in this case too, there is absolutely no reason to delay the creation of its block. It should announce that immediately because that has the desired effect of orphaning this other honestly produced block at height H.
00:19:45.810 - 00:19:47.486, Speaker B: So to complete the description of the.
00:19:47.508 - 00:20:17.674, Speaker A: Strategy, we just have to say for the blocks created by Node A while in case one of the strategy, when do those blocks in fact get announced? They don't get announced immediately. So when do they get announced? And this you already see from the example they're announced on a need to know basis. So as part of case one, node A creates some block at some block height little H. It waits until the honest nodes create a block at that same height little H. And then, and only then, does node A announce its.
00:20:17.792 - 00:20:20.090, Speaker B: Previously private height h block.
00:20:29.550 - 00:21:17.102, Speaker A: Having described the strategy, let's proceed to its analysis. So remember the comparison we're interested in, right? Node A, if it wanted to, could obediently follow longest chain consensus. And we're contemplating instead this alternative strategy, this deviation, and we know what happens if it sort of obediently follows longest chain consensus. Then there's going to be no forks, all blocks produced are going to wind up on the longest chain, and node A is going to have an alpha fraction of those blocks. And so the question is whether or not this strategy boosts node A's fraction of blocks on the longest chain to something bigger than alpha. So that's what we want to understand. So the analysis is going to have, it's going to have three steps, and I want us to focus on a sequence of some reasonably large number capital N of rounds.
00:21:17.102 - 00:21:50.302, Speaker A: So capital N blocks in a row that get produced, some of these are going to wind up on the longest chain, some of these may not wind up on the longest chain. So just capital N, consecutive creations of blocks and think of capital N. I don't know, think of as in the thousands, say. All right, so the first observation is if we think about these capital N blocks, again, some may be on the longest chain, some not. But we don't worry about that. We just think about these capital N blocks. We expect an alpha fraction of those to be produced by node A and a one minus alpha fraction of those to be produced by the honest nodes.
00:21:50.302 - 00:22:22.750, Speaker A: And this is just the exact same argument we used in the Civil Resistance or proof of work. Using the random moroccal assumption, the probability that you're the next one to create a block is proportional to your hash rate. So that's an expectation, an alpha fraction of the blocks we're expecting from node A, one minus alpha fraction from the honest nodes. But if capital N is decently large, then with high probability, the actual numbers are going to be very close to these expectations. That's basically the same kinds of proportional representation arguments that we made back in lecture eight when we were analyzing sort of randomly chosen leaders.
00:22:23.410 - 00:22:24.478, Speaker B: So there'll be a little bit of.
00:22:24.484 - 00:22:28.750, Speaker A: Variance around these expectations, but we're just going to ignore that for the sake of this argument.
00:22:29.650 - 00:22:30.946, Speaker B: Now, steps two and three of the.
00:22:30.968 - 00:23:29.964, Speaker A: Analysis, they go back to our intuition that we had a long time ago about what this strategy is trying to do. On the one hand, get as many A blocks into the longest chain as possible, ideally all of them, and then orphan as many H blocks as possible, ideally all of them. But perhaps if you don't have 51% of the hash rate, just do the best that you can. So step two is going to be the observation that on the first of those goals we do as well as we could do, that every single block created by node A will in fact be guaranteed to wind up on the longest chain. All right, so why is that true? Well, maybe the first observation is that by construction of this strategy, whenever node A announces one of its blocks, at that moment, at that moment of announcement, the announced block is in fact the end of some longest chain. So let's go back to our example, the magenta blockchain in the lower left. So two cases.
00:23:29.964 - 00:24:01.800, Speaker A: So first of all, block B two prime, that was the first block created by Node A. So at that point we were working in case two of the strategy. So the honest nodes had a lead. Block B two had already been created by some honest block and node A was just trying to orphan it with its own height, two block, B two prime. In that part of the strategy, you announce the block immediately upon creation and you'll see that block B two prime when it was created, when it was announced, it was indeed the tip of one of the longest chains. There was another longest chain ending in B two. But B two prime at the time of creation and announcement was the end of a longest chain.
00:24:01.800 - 00:24:51.896, Speaker A: Now B three prime and B four prime. So those were blocks that Node created and it was getting ahead of the honest nodes. So at the time of creation, if they were announced, they actually would have been the tip of a unique longest chain when B three prime was created, when B four prime was created, those would have been the unique longest chain had those blocks been announced. Now they weren't, those announcements were delayed, but they were still announced in time for them to be the end of some longest chain at the time of announcement. So for example, B three prime got announced by Node A at the time that B three was announced. So you'll notice that if both B three and B three prime exist, it is the case that B three prime is the tip of some longest chain. So given that property, given that every block created by Node A is the tip of a longest chain upon announcement, what that means is that that block will be on the longest chain forevermore.
00:24:51.896 - 00:24:57.208, Speaker A: Every single subsequent block is going to extend the chain that includes that A block.
00:24:57.304 - 00:24:57.708, Speaker B: Why?
00:24:57.794 - 00:25:27.012, Speaker A: Well, node A obviously it extends its own blocks, it doesn't extend anybody else. So no problem there. And then for the honest nodes, again, we're going to rely on the adversarial tiebreaking. So if you have a tie in the longest chains, we can adversarially arrange for honest nodes when they create blocks to also extend that A block. So at the tip of some longest chain at the time of announcement and in the longest chain forevermore. All right, so mission accomplished. As far as getting A blocks into the longest chain, they all wind up there.
00:25:27.012 - 00:25:53.280, Speaker A: What about the second goal of orphaning as many honest blocks as possible while they're not all in general going to be orphaned? So like in our example in the lower right, you'll notice that the block B one was honestly produced and does in fact wind up in the longest chain. But what you can say is that a lot of h blocks do get orphaned. In fact, for every single A block, every block that Node. A creates, you can point to an honestly created block that gets kicked off of the longest chain.
00:25:57.520 - 00:25:58.812, Speaker B: So if we look at our example.
00:25:58.866 - 00:26:47.556, Speaker A: The magenta block chain in the lower left, you can definitely see this. So the A block B two prime has the effect of orphaning the honestly produced block B two. Similarly, B three prime at the time it's announced has the effect of orphaning the honestly produced block B three. At some later point in that example, honest nodes will eventually create another block B four that's going to be extending some longest chain that they know about. And by adversarial tiebreaking that, B four will be extending B three prime. And so then the subsequent announcement of B four prime will knock out that honestly produced block B four from the longest chain. And in general, the only time an A block ever gets announced is because there's an H block at exactly the same block height, right? And two blocks at a given height, only one of those can get in the longest chain.
00:26:47.556 - 00:27:19.180, Speaker A: And because we're assuming adversarial tiebreaking, it's always going to be the A block that gets in the longest chain, it's never going to be the H block. So each announcement of an A block will orphan one H block. So those are the three main conceptual steps of the argument. Now let's just do some simple calculations to figure out as a function of alpha, exactly what fraction of the pi you get with this strategy.
00:27:19.920 - 00:27:21.228, Speaker B: So let's just think about the blocks.
00:27:21.244 - 00:27:42.500, Speaker A: That get on the longest chain. Let's just look at how many of those were honestly produced, how many of those were produced by node A, and then look at the proportions thereof. Well, A blocks, it's quite simple. We know the total that was created. That's going to be ballpark alpha times N. And by step two of the argument, every single one of those gets on the longest chain. So roughly alpha N A blocks on the longest chain.
00:27:43.000 - 00:27:44.476, Speaker B: So what about the H blocks?
00:27:44.528 - 00:28:18.340, Speaker A: Well, we certainly have a handle on how many are going to get created overall during this period. It's going to be a one minus alpha fraction, roughly of the capital N blocks. The question is how many of those wind up on the longest chain and how many get orphaned. And by step three of this argument, we see that the number that get orphaned is going to be the same as the number of A blocks, which again is roughly alpha n. So one minus alpha quantity n h blocks get created. But alpha N of those wind up not on the longest chain, leaving you with quantity one minus two alpha times N h blocks on the longest chain.
00:28:26.970 - 00:28:28.406, Speaker B: So now we can just look at.
00:28:28.428 - 00:28:33.990, Speaker A: The fraction of the blocks on the longest chain that were created by node A and compare that fraction to alpha.
00:28:36.950 - 00:28:38.754, Speaker B: So the numerator is going to be.
00:28:38.792 - 00:29:22.846, Speaker A: The number of A blocks on the longest chain, which is going to be roughly alpha N. The denominator is going to be the total number of blocks on the longest chain, which is the same thing as the total number of blocks which are not orphaned. And since an alpha N number of blocks are orphaned, that leaves one minus alpha quantity times N on the longest chain. Then of course, the N's cancel and leave us with the ratio of alpha over one minus alpha. So that wraps up the analysis culminating in this fraction alpha over one minus alpha. How should you interpret this? The key point is that for any alpha positive, no matter how small for any positive alpha, one minus alpha is going to be less than one. So alpha over one minus alpha is going to be bigger than alpha.
00:29:22.846 - 00:30:37.752, Speaker A: In other words, no matter how small you are, no matter how little hash rate you have, you will get a boost in the size of your slice of the pie by using this strategy rather than obediently following longest chain consensus. So, for example, you could imagine a node that has, say, a third of the overall hash rate. So alpha equals one third. Rather than merely getting one third of the block rewards as you would by obediently following the protocol with this deviation, you're going to get 50% of the block rewards as usual, assuming that all of the other nodes behave honestly and that ties are broken always in your favor. Similarly, if you have a 20% hash rate node, so alpha equals one fifth, you again get a boost. It's not as big a boost, but you still get a boost from 20% of the block rewards under sort of obediently following longest chain versus 25% of the block rewards, which is what you would get following this deviation. Now, the fact that selfish mining helps no matter how small you are, I got to be honest with you, that is to some extent an artifact of the tiebreaking assumption that we're making right here that node A basically as it deviates, can also kind of dictate how the other nodes break ties.
00:30:37.752 - 00:31:45.728, Speaker A: In the next video, when we look at sort of the more difficult but also more satisfying scenario where actually node A can't make any assumptions about how the honest nodes break ties, there we'll see that selfish mining does help if you're sufficiently big. So if you have 1% hash rate, then actually selfish mining doesn't help you. But if you're big enough, turns out bigger than a third, then in fact, despite the fact that the honest nodes are sort of tiebreaking in a way to mess you up as much as possible, it's still helpful to do this kind of deviation away from just straightforward longest chain behavior. There's also a neat connection I want to point out to you between this analysis we just did and our analysis of the chain quality of longest chain consensus back in lecture number eight. So, I don't know if you remember, but in lecture number eight, we were talking about the consistency and liveness properties of longest chain consensus originally in the permission setting, but those extend to Nakamoto Consensus as well. And we were saying, oh, could you have a stronger version of liveness? And the stronger version of liveness that we looked at was proving lower bounds on the chain quality. What's chain quality? Chain quality is the fraction of the blocks on a longest chain that were produced by honest nodes.
00:31:45.728 - 00:33:00.040, Speaker A: And for liveness, you definitely want a chain quality of bigger than zero, because if all the blocks are being included by Byzantine nodes, for all you know, all those blocks are empty. So the only way transactions are guaranteed to actually enter the blockchain is if honestly created blocks wind up getting included in the longest chain. So you certainly want a chain quality bigger than zero. And then the question is, as a function of sort of alpha, the fraction of Byzantine nodes or Byzantine Hash rate as a function of alpha, how high is the chain quality going to be? And we proved in lecture number eight a kind of neat strengthening of liveness, which is that we showed that if the Byzantine Hash rate or the Byzantine fraction of nodes is only alpha, then you're guaranteed a chain quality of at least one minus two alpha divided by one minus alpha. Now, back in lecture number eight, when we proved this guarantee, on the one hand we were pretty happy because it strengthened liveness. It gave us better lower bounds, quantitative lower bounds on chain quality for all alpha less than one half. On the other hand, we were kind of annoyed that we didn't get the higher number one minus alpha, right? So if a one minus alpha fraction of the nodes or the Hash rate is honest naively, you might hope that you'd have proportional representation of the blocks on the longest chain.
00:33:00.040 - 00:33:32.340, Speaker A: And that's not what our proof showed. Our proof showed only a weaker lower bound on chain quality, a number smaller than one minus alpha, namely quantity one minus two alpha over one minus alpha. So that kind of bothered us at the time. But we mentioned back then that in fact, you cannot prove any better lower bound on chain quality than one minus two alpha over one minus alpha. The problem was not with our proof. The problem, or at least this is what we promised back in lecture number eight. The problem is actually there is a strategy for a Byzantine node that pushes the chain quality down to this lower number one minus two alpha over one minus alpha.
00:33:32.340 - 00:34:22.200, Speaker A: And this here on this slide, this is the strategy that pushes the chain quality down to that lower number down to one minus two alpha over one minus alpha. So in this lecture, we came to this strategy, not really thinking about a Byzantine node like we were in lecture eight, rather just a sort of profit maximizing node that wanted to boost its share of the block rewards as much as possible by maximizing the fraction of its blocks that get on the longest chain. But if you think about it, that's the same goal as trying to minimize the chain quality, minimize the fraction of honestly produced blocks in the chain. And definitely this strategy is one thing a Byzantine node can do if it wants. So we can now reinterpret this strategy as something a Byzantine node could do to push the chain quality down to this lower number one minus two alpha over one minus alpha.
00:34:22.620 - 00:34:24.600, Speaker B: So in that sense, our chain quality.
00:34:24.750 - 00:35:03.472, Speaker A: Guarantee for longest chain consensus back in lecture number eight is tight. The number that we proved for all alpha cannot be improved further for that protocol. So it is actually an apples to apples comparison, our chain quality guarantee from lecture eight and this analysis on this slide, in both cases we are working in the sort of supersynchronous or instant communication model. In both cases, we are allowing arbitrary tiebreaking by honest nodes among competing longest chains. Right back in lecture eight, talking about chain quality, that's basically a liveness guarantee. We certainly didn't want guarantees that were sort of an artifact of some very delicate tiebreaking rule. We really wanted guarantees on chain quality that held for any possible way of breaking ties.
00:35:03.472 - 00:35:33.660, Speaker A: Which means that here, when we're proving that no better result is possible, we are free to assume arbitrary tiebreaking. Which, of course, is what we did in the analysis of the strategy to get the matching lower bound of one minus two alpha over one minus alpha. All right, so that's it for that digression. But I thought that was just sort of a really neat connection between basically our liveness analysis of Longoshank consensus back in lecture number eight. And here basically the game theory of Nakamoto Consensus with block rewards. It turns out those two things fit together quite neatly.
00:35:34.160 - 00:35:35.516, Speaker B: So looking ahead to the rest of.
00:35:35.538 - 00:36:08.600, Speaker A: Lecture number ten, there's going to be two more videos. The next video, the fifth video, that's going to be easily the sort of most difficult one. So you should regard it as optional. I mean, look, these are just free videos on YouTube, so in some sense they're all optional. But if you're not excited about seeing some sort of interesting mathematical analysis, I would definitely skip the next video. Conversely, if you do like sort of interesting mathematical analysis, you definitely should check out the next video. That's really kind of the heart and for someone like me, the really interesting part of Selfish Mining and the paper by AAL and Surre.
00:36:08.600 - 00:36:29.056, Speaker A: So whether or not you watch the next video, the fifth video, I definitely encourage you to watch the 6th and final video of lecture number ten that's going to be a reasonably brief discussion of these selfish mining results. How should you interpret them? Do they matter in practice? Practice? All that good discussion is going to be in that 6th video. So whichever one you go to next.
00:36:29.238 - 00:36:30.940, Speaker B: I'll see you there. Bye.
