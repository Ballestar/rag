00:00:00.410 - 00:00:33.894, Speaker A: Hello. Okay, so in this video we will prove the notorious Lemma Two, which really is sort of the heart of the argument of the FLP impossibility results. Okay, so remember what it is that we're trying to prove. We're starting from an ambiguous configuration, which we're denoting by C sub i. We pick an arbitrary message R comma m and C sub I s message pool. What we need to show is that it is eventually possible to deliver this distinguish message r comma m while remaining ambiguous. Now possibly delivering a whole bunch of messages before we get around to delivering R comma m.
00:00:33.894 - 00:01:25.654, Speaker A: But eventually we can deliver R comma m and go to an ambiguous configuration. So we're going to need to do a little bit of setup in the proof, a little bit of terminology before we get to the most interesting part of the argument. So for starters, let's just fix this arbitrary, ambiguous configuration, c sub i, and this arbitrary message r comma m in C sub I's message pool. Now, our life would be really, really easy if only we could deliver this message r comma m right now at the configuration C sub I and transition to another ambiguous configuration. If that were the case, we'd be done. The issue, of course, is that delivering this message right now might remove the ambiguity. It might take us to either a zero configuration where the output is going to be forced to be all zeros, or it might take us to a one configuration where the output is then forced to be all ones.
00:01:25.654 - 00:02:02.198, Speaker A: So for the rest of the proof, let's focus on the hard case. Let's assume immediate delivery of R comma m doesn't lead to an ambiguous configuration. Rather, let's assume it leads to a zero configuration. If instead it leads to a one configuration, use exactly the same argument we're about to do, just with the rules of zero and one reversed. So now we come to the main definition I'm going to need on this slide. Really just some terminology that we're going to use in the next couple of slides of the proof. Now remember, we've already defined these three types of configurations.
00:02:02.198 - 00:02:51.950, Speaker A: Zero configurations where no matter what the adversary does, all the honest output nodes output zeros one configuration. No matter what the adversary does, all the honest nodes output all ones. And then ambiguous configurations which the adversary has one strategy that forces the all zeros output and a different strategy that forces the all ones input. And remember, those three definitions are with respect to our fixed protocol Pi. A given configuration may be, for example, ambiguous under one protocol pi, but not ambiguous under another protocol pi prime. So now we're going to introduce sort of another set of three types of configurations. And now it's going to be not just with respect to the protocol Pi, but also with respect to this message r comma m that we've singled out so precisely we're going to call a configuration zero star if it satisfies the following two properties.
00:02:51.950 - 00:04:06.930, Speaker A: So first, we insist that this configuration, capital C, is reachable from our initial ambiguous configuration C sub I, so reachable by a sequence of delivered messages, and moreover, that none of those messages delivered are R comma m, so it should be reachable from CI, even while the message R comma m just hangs out in the message pool all along. So, for example, in the upper right picture of this slide, sort of illustrating what Limit Two is trying to do, that squiggly line going from CI to CI Prime that's basically showing that CI Prime is reachable in this sense, from CI notice without delivering R comma M. R comma m is only delivered after arrival at CI Prime. So think of this kind of reachable from C without delivering RM. Think of that as the squiggly line in the upper right corner. And secondly, if you just tack on one additional message delivery, the delivery of this message R comma m, at that point, it takes you to a zero configuration. So another way to think of this definition is that a zero star configuration is a predecessor of a zero configuration, where that sort of last state transition is the delivery of this one particular message, R comma m.
00:04:06.930 - 00:04:36.874, Speaker A: So zero star means if you deliver RM, you get to a zero. So we'll define one star and ambiguous star configurations in exactly the same way. A one star configuration is, on the one hand, reachable from C sub i. And the final delivery of R comma m would lead you to a one configuration. So, again, it's sort of a predecessor to a one configuration. And similarly, configuration will be called ambiguous star if it's reachable from C sub i. And furthermore, delivering that message R comma m at the end takes you to an ambiguous configuration.
00:04:36.874 - 00:05:14.874, Speaker A: So ambiguous star is sort of a precursor, a predecessor of an ambiguous configuration. All right? So just as a quick sanity check, let's ask ourselves how sort of these three definitions compared to the existing three definitions we have. So what's the difference between zero and zero star, et cetera? And the key thing to remember, as we've said before, is that throughout the sort of execution of the protocol, ambiguity never gets introduced, right? It only gets resolved. So you can never transition from a zero configuration or one configuration to an ambiguous configuration. You can only do the reverse. One set of zero always at a zero. One set of one, always at a one.
00:05:14.874 - 00:05:47.810, Speaker A: So a zero star configuration, on the one hand, it might be a zero configuration. It might be that the output has already been forced to be all zeros. In which case, of course, delivering R comma m doesn't change that fact. It's still a foregone conclusion that the output is all zeros. On the other hand, a zero star configuration may well be ambiguous. It might be that from that configuration the adversary has a strategy that forces all ones. But if you deliver the message R comma m right now all of a sudden those routes to the adversary are closed down and the adversary has no choice but to force all zeros.
00:05:47.810 - 00:06:48.390, Speaker A: Similarly a one star configuration, maybe it's a one configuration, maybe the all ones has already been forced or maybe it's an ambiguous configuration and it's just that the immediate delivery of R comma m would then force the all ones output. So ambiguous star if you think about it, I mean so that's really a predecessor of an ambiguous configuration by definition. And remember, predecessors of ambiguous configurations must themselves be ambiguous because again, ambiguity is never introduced, it's only ever resolved. So in other words, an ambiguous star configuration. It's the special case of an ambiguous configuration that remains ambiguous after the delivery of the message R comma m. Okay, so to start convincing you that this terminology is helpful, let's note that it allows us to very crisply state two other points that are mentioned on this slide. So first of all, the statement the conclusion of Lemma Two is actually equivalent to the assertion that there exists at least one ambiguous star configuration.
00:06:48.390 - 00:07:35.862, Speaker A: So remember, Lemma Two's promise is that whatever the message R comma m may be it's possible to deliver a sequence of messages such that you can then deliver R comma m and remain ambiguous. But that's exactly the same thing as saying you can reach an ambiguous star configuration from C sub I because by definition that's one where delivering R comma m you remain ambiguous. Now secondly, let's actually just sort of rephrase the part of the slide that says easy case in this new terminology. So previously we said easy case is delivering RM now yields an ambiguous configuration. So we can now rephrase that as saying the easy case is where CI is already itself ambiguous star. So not merely ambiguous but actually more strongly ambiguous star remains ambiguous after the delivery of R comma m. So that's the easy case.
00:07:35.862 - 00:08:01.950, Speaker A: If CI already fits the bill, we're done. So we're assuming that CI is something else and in particular we're assuming that delivering R comma m leads forces all zeros. Again, the other case is completely symmetric. And again in our new terminology that's just saying our current standing assumption is that the configuration C sub I is a zero star configuration. So it's ambiguous. But delivery of R comma m would force all zeros. So it's a zero star configuration.
00:08:01.950 - 00:08:43.756, Speaker A: Okay, so that's the proof setup we need. Things will get a little bit more interesting starting on the next slide where we start going hunting for an ambiguous star configuration. All right, so let's keep our eyes on the prize. Remember what we're looking for to prove limit two, we're looking for an ambiguous star configuration, a configuration that not merely is ambiguous but remains so after the delivery of the message R comma m. And remember, our standing assumption is that we're starting from a zero star configuration. So I encourage you to think about our hunt for an ambiguous star configuration as running a graph search algorithm. Like I said, breath first search in the sort of really big graph we've been talking about.
00:08:43.756 - 00:09:18.972, Speaker A: So the directed graph where the vertices correspond to configurations, where the directed edges correspond to state transitions caused by the delivery of a single message. So in that graph, we are starting at this configuration, C sub i. So that's a vertex in that big graph. And then I want you to think about doing breadth first search from that vertex. You also never traverse an edge that involves the delivery of R comma m. Remember, we're thinking of R comma m as staying in the message pool as we do this search. So you do BFS out of all of the possible message deliveries except for the delivery of R comma m and you see what you find.
00:09:18.972 - 00:10:00.250, Speaker A: You're hoping you'll eventually going to discover an ambiguous star configuration. Now, one thing to notice, a simple but important observation is that it cannot be the case that the only thing breath for a search ever sees is zero star configurations. It must at some point encounter a configuration which is not zero star, which rather is either one star or ambiguous star. So why is this true? This actually follows from the ambiguity of the configuration C sub i. So let's talk that through a little bit. So imagine actually it was the case that you did this breadth first search out of C sub I and all you ever saw were zero star configurations. You never saw anything else.
00:10:00.250 - 00:10:48.344, Speaker A: Well, that's going to be a problem for the adversary if you think about it, right? Because the adversary doesn't have to deliver R comma m right now from C sub i. But it has to deliver R comma m eventually. And if literally every configuration you can reach at a CI is zero star, then the adversary has no choice but to deliver R comma m at a zero star configuration. But by definition of zero star, that means it's going to transition to a zero configuration. In other words, no matter what the adversary does when it eventually delivers R comma m, it's going to force the all zeros output. But if you think of the bat, that means the all zeros output is already forced at C sub i. The adversary literally has no strategy that avoids forcing all zeros because it has to eventually output R comma m, right? But that's not true.
00:10:48.344 - 00:11:11.724, Speaker A: Zeros are not forced at C sub i. C sub I is ambiguous. So a logical consequence of that is that you can't only see zero stars. You have to see something else. So that's progress. We know we're not stuck with all zero stars, but remember, we're really looking specifically for an ambiguous star configuration. So now the worry is that somehow you do this breadth for search, you see zero stars and one stars, but you don't see any ambiguous stars.
00:11:11.724 - 00:12:10.960, Speaker A: That would be a problem for us. So let's try to think through if that actually could happen. Could it really be the case that you have zero stars and you have one stars, but somehow you do not have any ambiguous star configurations? So to think about that, go back to this breath first search that we're doing and run breath for a search until you encounter for the first time an ambiguous configuration that is not zero star, that is either ambiguous star, in which case we're done, or one star, in which case we're not done. So in other words, we know that there exists some sequence of messages that eventually takes you to a configuration that is not zero star. So I'm just saying consider the fewest number of messages required to escape the land of the zero star configurations. If there's ties, if there's sort of multiple nonzero star configurations equally close to C sub I, just choose one arbitrarily. We're also going to be interested in Y's predecessor.
00:12:10.960 - 00:13:07.810, Speaker A: We'll call that vertex, that configuration capital X. So let's go ahead and draw out this path, the shortest path from C sub I to this nonzero star configuration, Y. So CI, remember, is a zero star configuration. Y, by definition, is not a zero star configuration. And because Y is the closest configuration to C sub I that is not zero star, it must mean all of the predecessors on that shortest path are zero star because otherwise we would have chosen one of them instead of Y. And let me remind you, when we do this breadth first search, we're only considering message deliveries that are not the target message R comma M. So R comma M needs to stay in the message pool throughout along this entire shortest path.
00:13:07.810 - 00:13:42.394, Speaker A: One other little piece of notation I want to sort of single out the message that's delivered at X that takes you to the nonzero star configuration, Y. So we're going to call that message R Prime, M Prime. And remember, that message has to be different from R comma M. And the final claim. Now, which is going to be sufficient to prove Lemma Two and which we'll prove on the next slide, we're going to argue that Y cannot possibly be a one star configuration. Now, we already know that Y cannot be a zero star configuration. It's sort of the closest configuration that satisfies that property.
00:13:42.394 - 00:14:31.658, Speaker A: So the only remaining case is it must be that Y is in fact ambiguous star. And that's exactly what we're hunting for in Lemma Two. So the final output of Lemma Two is actually this configuration, Y, a shortest closest nonzero star configuration to the initial ambiguous configuration. All right? So when we prove this claim on the next slide, we're going to be zooming in on these last two vertices, capital X and capital Y. So the things to remember from this picture as we move to the next slide is first of all, X is zero star, Y is not zero star. You can go from X to Y through the delivery of a single message, a message we're calling R Prime, M Prime. And remember, that the message, the sort of given target message, R comma M that's in the message pool this entire time.
00:14:31.658 - 00:15:13.254, Speaker A: So in particular, R comma M is not the message being used to transition from X to capital Y, but R comma M is in the message pool of both capital X and of capital Y. It was in the message pool of C sub I, and it stays there along this entire path. All right, so let's prove the claim. We're going to proceed by contradiction, right? So the claim is that Y, this closest nonzero star configuration, cannot be one star. So to get the contradiction, we'll assume that in fact, it is a one star configuration. Let's now redraw the box from the previous slide that we're zooming in on. So why in the last slide, we already knew it was not zero star.
00:15:13.254 - 00:15:50.930, Speaker A: For the purposes of this contradiction, we're actually going to assume it's one star. We'll see that that can't possibly be the case, but that's what we'll be using as our sort of assumption throughout this slide. Now, remember, R Prime, M Prime is the message that gets delivered that causes the transition from X to Y. And the final thing to remember is that the target message, R comma M, that's been staying in the message pool this whole time. So it's in X's message pool, and it's also in Y's message pool. And so now we get to what is really kind of the neatest part of the argument. So we're going to do sort of a thought experiment of sort of different things we could be doing from X and Y.
00:15:50.930 - 00:16:18.154, Speaker A: So first of all, imagine at capital Y, we finally get around to delivering the target message R comma m. Well, we're assuming that Y is a one star configuration. That is, the immediate delivery of R comma M leads you to a one configuration. And guess what? We just immediately delivered R comma M. So Z must be a one configuration. So from Z, we know the output is forced to be all ones. Now, here's the rest of the thought experiment.
00:16:18.154 - 00:16:55.190, Speaker A: Let's imagine, starting from the configuration, capital X, we delivered these exact same two messages, but in the opposite order, r comma M first, followed by R Prime, M Prime. Both those messages are in X's message pool. So that sequence of message deliveries is totally a possibility for the adversary. So first we deliver the message, the target message R comma M, from capital X. Now, capital X is a zero star configuration. What does that mean? That means exactly that. The immediate delivery of R comma M, like we're doing right now, leads us to a zero configuration.
00:16:55.190 - 00:17:22.914, Speaker A: Now, at this point, the output of the protocol is a foregone conclusion. We know it's going to be all zeros. But just for kicks, just to complete the thought experiment, imagine we went ahead and delivered the message r Prime, M Prime. From this point, from this configuration, capital W. Well, remember, once a zero configuration, always a zero configuration. From W, everything's a foregone conclusion. Doesn't matter that we delivered R prime m prime? We, of course, arrive at another zero configuration, which we're calling here capital V.
00:17:22.914 - 00:18:11.040, Speaker A: So this is pretty interesting, right? I mean, this says the relative order of these two consecutive messages r comma M and R Prime M Prime coming from configuration capital X. The relative order of those two consecutive messages completely determines the output of the protocol. So flip them and you go from a guaranteed zero to a guaranteed one. So this should maybe start sounding a little implausible, and it should also maybe start reminding you of sort of how our arguments worked in Lemma One. So remember Lemma One, that was like our base case. We were just sort of trying to figure out an initial ambiguous configuration. And so how did we do that? Well, we had one configuration that we knew was a zero configuration, the all zeros input.
00:18:11.040 - 00:18:51.024, Speaker A: We knew that the all ones input was a one configuration. And then we just transformed the former into the latter, right? By flipping zeros to ones in the private input bits, moving one by one from left to right. At some point, we know we transitioned from a zero configuration to something that's not a zero configuration. The worry back when we were approving Lemma One is that you jump straight from a zero to a one configuration. And what we showed is that actually you have to have an ambiguous configuration in between. Because if you jumped straight from a zero to a one, that would mean there's a single node that's sort of single handedly responsible. Its private input bit is pivotal single handedly determines what the protocol's output is supposed to be.
00:18:51.024 - 00:19:09.000, Speaker A: On the other hand, we're like, well, maybe that node is Byzantine. Like. We can never know what its actual private input is. And so that's how we argue that there was that ambiguous initial configuration here. It's quite similar. Okay, so we're saying, well, we're worried about the fact that maybe we transition X to Y. We go directly from a zero star to a one star.
00:19:09.000 - 00:19:55.632, Speaker A: That would be a problem for us because we're looking for ambiguous star. But what we're now seeing is that if that were true, if you could get just with one step from zero star to Y star to one star, then in fact you can identify a pair of messages who are consecutive and whose relative order has dictatorial power over the output of the protocol. And so this should again seem, yeah, but what if one of these nodes is Byzantine and sort of lies about message order? So that should be the intuition you have. Now let's actually sort of really nail it and make it precise. So we're going to want to look at two different cases depending on whether both of these messages have the same recipient, that is, whether R equals R prime or whether the messages have distinct destinations. R not equal to R prime. Now, the easy case is where these messages are destined to different nodes.
00:19:55.632 - 00:20:31.344, Speaker A: So where R is different than R prime, then we don't even need an adversary at all. We don't even need any Byzantine nodes. Just remember what a protocol does. A protocol tells a node what to do as a function of what it knows. What does a node know? It knows its private input and it knows the sequence of messages that it itself received. It has no idea about the order of messages that were received by any of the other nodes. And so if you take two consecutive message deliveries that were destined for different recipients and you flip their order, literally not a single node will notice because every node's local sequence of received messages will be exactly the same.
00:20:31.344 - 00:21:08.760, Speaker A: And that completely determines their behavior and in particular, completely determines their output. So in case one, we get an immediate contradiction, right, these two messages, because they have different recipients, if you reverse the order, no node's behaviors change, nobody's output changes. So the node's common output has to be the same in both cases. So it can't possibly be that one is a zero configuration and one is a one configuration. All right? So that's case one. So again, our initial assumption for the purposes of contradiction was that capital Y, in fact, is a one star configuration. From that assumption, we deduced that there's this pair of messages whose relative order determines the output of the protocol.
00:21:08.760 - 00:21:54.968, Speaker A: And we now see that can't possibly be true if R and R prime are different because reversing the order literally has no effect on the protocol whatsoever. So the slightly more interesting case in the case that's more reminiscent of Lemma one is case two, where the same node is the recipient of both of these messages. So that node at least is perfectly aware of whether it received M or M prime first. But now we're going to use the fact that we do have little F equals one. There could be a Byzantine node out there. And if that Byzantine node happens to be R, what's to stop R from misrepresenting that local ordering to everybody else? So suppose the node R is indeed Byzantine and consider two different scenarios. So the first scenario will focus on the first of the two message orderings.
00:21:54.968 - 00:22:54.844, Speaker A: So we'll be thinking about this Byzantine node R receiving the message, little M before it receives the message little M prime. And actually we'll think about the Byzantine node as just following Pi Honestly in this scenario. And so remember, with this order of message delivery with M arriving before M prime, our Green star implies that that's supposed to take us to a zero configuration, meaning that no matter what the adversary does, the final output of all the honest nodes will be zero. In particular, if the adversary happens to follow the protocol Pi Honestly the output of all the honest nodes will be zero. In the second scenario we're going to think about the other order of message delivery. So R receiving M prime before it receives M, but now we're going to have that node act in a Byzantine way, okay? And follow Pi Honestly as if the messages had arrived in the other order because again, this node is the only node that actually knows what the order of those two messages was. And so now we can derive our contradiction.
00:22:54.844 - 00:23:49.116, Speaker A: So I hope it's sort of intuitively clear that scenarios one and two, no honest node is going to have any idea which of these two scenarios is the actual reality, right? Because the node R is the only one that actually is privy to the relative order of the two messages. That node is Byzantine and so it can act to disguise that order to keep that secret from all of the other nodes. If you wanted to be a little bit more formal about it, the argument would be the same as it was in case one. So remember, the behavior of a protocol, the behavior of a node depends only on what that node knows, namely its private input and the sequence of messages it has received thus far. And in scenarios number one and number two, the node knows exactly the same thing either way. That's the same private input either way. And the adversary ensures that in the two scenarios every node sees exactly the same sequence of received messages.
00:23:49.116 - 00:24:16.520, Speaker A: So because all the honest nodes will be operating identically in both scenarios, they must in particular have the same output. So either they output all zeros in both or they output all ones in both. But that exactly contradicts what we derive from the Green star and double Green Star statements. It's supposed to be output zero in one case, output one in the other. On the other hand, by indistinguishability it's got to be the same. Boom, we've got our contradiction. So just sort of, sort of unpacking how it got to this point.
00:24:16.520 - 00:24:46.864, Speaker A: So remember we did this breadth first search in the graph of configurations, hunting for a non zero star configuration. We found that that's our capital Y. If it happens to be ambiguous star, we're done. That's exactly what Lema Two is looking for. So we were just concerned that maybe actually it was one star that maybe sort of with a single message delivery, you'd jump from a zero star to a one star configuration. So then we proceeded by contradiction, and that's the claim that we're proving that we proved on this slide. So we assumed, oh, well, maybe Y is a one star configuration.
00:24:46.864 - 00:25:16.540, Speaker A: Then what would be logical consequences of that? And from that, we were able to derive this contradiction. On the one hand, all of the honest nodes are supposed to output different things in these two different scenarios. On the other hand, by indistinguishability, they're also supposed to output the same thing in both of the two scenarios. Those can't both be true. So our initial assumption that Y is one star has to be false. So Y must in fact be an ambiguous star configuration. And so that's why this completes the proof of Lemma Two.
00:25:16.540 - 00:25:56.988, Speaker A: Our responsibility was to come up with an ambiguous star one, and we showed how to do it. Do breadth first, search out of the initial configuration CI and look at the first non one star configuration you ever find. It's got to be ambiguous star. That is a suitable candidate to return as the output of Lemma Two, thereby extending the sequence of ambiguous configurations that we were constructed when we combined Lemma One and Lemma Two to approve the FLP Impossibility theorem. Okay, so that's a brief recap of this last part of the proof that concludes this video. But stick around for the next one, which is a lot shorter. What we'll discuss is this theorem and its consequences and where we're going to go next.
00:25:56.988 - 00:25:58.600, Speaker A: See you there. Bye.
