00:00:00.570 - 00:01:03.678, Speaker A: Last slide, we talked about forking attacks whereby a miner deviating from the bitcoin protocol deliberately creates a fork by adding an eligible block to the blockchain that extends a block other than the longest one. Why would you ever do that? Well, we saw that you have some chance, perhaps, of executing a double spend attack. And of course, if you have 51% of the computational power, then through these forking attacks, you can really just take over the blockchain. For example, censor anybody else, freeze anybody else's assets. We also saw, however, why as long as you can keep anybody's computational power sort of well below one half, maybe the double spend attack isn't that big a deal, right? Because whenever a transaction gets added to the blockchain, you can just wait some number of k of blocks to be added, extending the block that includes that transaction. And once k is modestly large, even, say, something like six, the probability of anyone pulling off a forking attack leading to a double spend is very small. So double spend attacks are the reason why you wait in bitcoin multiple blocks before you regard a transfer as complete.
00:01:03.678 - 00:01:59.022, Speaker A: But as long as you do that, as long as you wait, say, an hour or 2 hours, if you really want to be safe, you should be fine from double spending attacks as long as nobody has 51% of the computational power. If you go back to Satoshi nakamoto's original white paper on bitcoin, it sort of suggested that sort of, this is the key incentive issue in bitcoin bigger than 50% system doesn't work less than 50%. Well, then, just because you have more blocks being created by honest miners than by any deviators, you should be fine. So on this slide, I want to talk about a more clever genre of attacks which involve block withholding. So the bitcoin protocol, it says you should be trying to find these eligible blocks if you're a miner. And of course, it also says as soon as you find one, you should immediately broadcast that to everyone else in the peer to peer network. But there's no way to enforce that as a miner, if I find an eligible block, if I want to, I can keep it secret.
00:01:59.022 - 00:02:52.322, Speaker A: I can withhold the block from all the other miners. Now, why would you ever do this? Right? You should be really excited if you find a block and want to tell the world about it, because blocks are how you get rewards. So by publishing your block to the blockchain, by telling everybody about it, you're going to collect your 6.25 bitcoins, you're going to collect the corresponding transaction fees. So why would you ever keep that secret? Well, here's the intuition. The intuition is that by secretly, by keeping your own eligible block secret, you can then covertly try to extend this block that only you know about, where meanwhile, all of the other miners are trying to extend the most recent block that they've heard about, which is different than the secret one you're hiding from them. And in effect, they're going to be trying to solve a crypto puzzle, but working on the wrong problem, trying to extend the block, which actually is not the current longest one.
00:02:52.322 - 00:03:45.586, Speaker A: You only know about the block that should be at the end of the longest chain. So let me show you how this would work in a little more detail. So suppose we've got this blockchain and sort of everyone agrees on what it looks like right now, and the last three blocks are B One, b Two and B three. Now suppose you're a miner and you're diligently working to extend the blockchain, tax something onto the end of B Three. And let's say you succeed, you actually come up with an eligible block, let's call it S One, where the S here is for secret. So let's suppose the miner of this block, let's call her Alice, the minor of this block S One. Let's suppose that instead of telling all the other miners about it, alice privately works to try to solve another crypto puzzle to authorize another block an S two, extending this block that only she knows about, extending S One.
00:03:45.586 - 00:04:08.710, Speaker A: While she's working trying to solve a crypto puzzle to extend her secret block S One. The other miners who don't know about S One, they're going to be working to try to extend the last block they know about, which is the block B Three. So at this point, the race is on. So Alice Is trying to extend S one. Everyone else is trying to extend B Three. One of them will succeed first. So there's really two cases.
00:04:08.710 - 00:04:40.726, Speaker A: So first, let's suppose Alice does not get lucky. And in fact, the next thing that happens is that some minor finds a block B four extending the block B Three. So this is definitely the bad case for Alice. Alice basically got scooped, right? Had Alice immediately broadcast her block S One, that would have been on the longest chain and she would have gotten rewards for it. But then everyone else sort of someone finds B four, broadcasts that to everybody. And now Alice is in trouble. She could sort of rush to now, say, announce her secret block S One.
00:04:40.726 - 00:05:36.360, Speaker A: But probably almost all the miners will hear about B Four first. And so for that reason, remember that miners are supposed to break ties according to which block they heard about first. So once B Four is announced, even if Alice announces S One, after that s One is going to be orphaned. And so that is rewards that Alice could have earned, but she gave up because she made this risky strategy of trying to privately extend her own block. But in this case, she got scooped and gets nothing. So in that first case, Alice discards her secret block, S One and just sort of restarts and goes back to trying to extend what's now the block of the longest chain, namely trying to extend b four and trying to come up with a new version of s one, one that extends before. The good case for Alice, obviously, is when she finds yet another block s two, extending her secret block s one, before any other miners find b four.
00:05:36.360 - 00:06:11.102, Speaker A: Now, in this case, Alice actually has two secret blocks. So she has a lead, in effect, of two over the chain that everybody else knows about. And so at this point, she can now, with impunity, continue to try to extend her block. So she has her secret block s one or secret block s two. No one else knows about them. Alice is going to privately work to try to extend s two to get to s three, see if she gets lucky yet again. And she continues to mine secretly on her chain until she starts running a risk of her entire secret chain getting scooped.
00:06:11.102 - 00:06:57.022, Speaker A: That is, if the lead ever drops to one, then she stops and just cashes in her chips and announces her private chain. So, for example, suppose Alice not only found the secret block s one, but then successfully found a secret block s two, extending s one, and then also found a secret block s three, extending s two, all before any other miner managed to extend V three. So in this very advantageous case where Alice has a lead of three over the chain that everyone else knows about, she keeps trying to extend s three. Now, maybe before Alice can find an s four, some other miner finds a b four and extends the light blue chain. So at this point, Alice still has a lead of two. So she's still safe. She's like, you know what? I still have a little room to maneuver.
00:06:57.022 - 00:07:41.002, Speaker A: So Alice can continue to keep trying to extend s three even as the other miners try to extend b four. But if Alice gets unlucky again and the other miners do find b five, that extends b four. Now Alice is ready to take action. At this point, Alice's chain is only one bigger than the chain that everybody else knows about. So if some other miner now all of a sudden found a b six and extended b five before Alice had any more secret blocks, then Alice would just be in a much worse version of our first case. Remember, in our first case, that's where Alice got scooped and she lost all her work on this one block here. If she gave other miners the time to find a b six, extending b five, now all of a sudden, you'd have a tie between the two chains.
00:07:41.002 - 00:08:05.654, Speaker A: And again, all the miners would have heard about the blue blocks before the magenta blocks. So all of the magenta blocks would have been orphaned. So Alice's work on three different eligible blocks would all just go poof. So rather than take that risk, as soon as the lead drops to one, that is, as soon as B Five is announced, alice is like, okay, cash in my chips. Hey, everybody, I've got this block S One. I've got this block S Two, and I've got this block S three. She tells everybody else about it.
00:08:05.654 - 00:08:33.438, Speaker A: And now the magenta chain is the longest chain. It's one longer than the light blue chain. So if the miners are just following the protocol and they observe S One, S Two, and S Three, they're like, oh, I guess this is now the longest chain. I should forget about B four and B five. B Four and B Five are just going to be orphans. So that is the selfish mining strategy, right? And it's clearly a deviation from what Bitcoin's developers intended. You were supposed to announce blocks immediately, obviously keeping them secret and working on them yourself.
00:08:33.438 - 00:09:16.798, Speaker A: That's a deviation. Now, is this a helpful deviation? Is this a deviation we should be worried about? Well, there's sort of a cost and a benefit of this strategy, and it's not a priori clear which outweighs which. And in fact, as it turns out, which one outweighs the other depends on exactly how big the minor is, what fraction of the computational power they have. So what's the cost of this strategy? The cost is in that first case where you get scooped, there's some chance that you're basically going to have this secret block S One that you could have collected a reward for. You forewent that reward in hopes of getting even higher rewards. But in that first case, you wind up losing it all because some other miner comes up with a B Four before you come up with an S Two. And then your S One just gets orphaned and you get nothing from it.
00:09:16.798 - 00:09:48.646, Speaker A: So that's the cost. You definitely lose out. You're worse than you would be with honest mining in that first case. In the second case, you wind up better off. And the reason you wind up better off is because in the long term, your rewards are going to be proportional to the fraction of useful computational work that you perform. So if you look at sort of all of the blocks on the main chain on the longest chain, so all of the authorized transactions, remember, that's where all of the rewards come from. So if you've got all the blocks of authorized transactions, you want your fraction of those blocks to be as high as possible.
00:09:48.646 - 00:10:54.830, Speaker A: So if you're getting 25% of the longest chain or blocks that are authorized by you, you're going to be getting 25% of the long run rewards. So that's really your goal, to boost the fraction of the blocks on the longest chain that were authorized by you. And so the reason you benefit in the second case is by tricking all the other miners and working on the wrong blocks you wind up getting their blocks orphaned kind of all over the place. So even if you only had, say, 25% of the computational power, because you tricked the other miners into wasting some of their computational power, they in effect, have less computational power than they did before, or at least they're investing less than all of their computational power into the longest chain, which are the only blocks that matter. So even though you have 25% of the overall computational power, you might find yourself overrepresented on the longest chain, you might find 30% of the blocks on the longest chain would be authorized by you. And again, the reason being is that the other miners who normally would have had that extra 5% on the longest chain, you tricked them into putting that energy into blocks that were ultimately going to be orphaned. So that's the cost.
00:10:54.830 - 00:12:03.874, Speaker A: Sometimes you get scooped, and that's the benefit that you wind up boosting the fraction of blocks on the main chain that belong to you. Now, which of these is more powerful? Well, it turns out there's a phase transition where alpha, alpha remembers the fraction of the overall power controlled by a minor or by a group of colluding miners that are acting in concert. So there's a phase transition when alpha is equal to a third. And if alpha is bigger than a third, if this cartel controls more than a third of the computational power, then in fact, selfish mining is a win. The benefits you get from wasting others work, and the extra rewards you therefore get that outweighs. The rewards that you give up from the cases that you get scooped, it's not at all obvious why alpha equal one third is the magic number. Why that's how much computational power you need for selfish mining to be profitable.
00:12:03.874 - 00:12:51.414, Speaker A: But that it's a calculation that shows that, and it's a calculation that has been done. It was in a paper by itai ayal and immin gunser from relatively early days in bitcoin, formally published in 2014. You might be wondering, is selfish mining actually a big deal? I mean, after all, at least currently, in late July 2020, bitcoin seems to be doing just fine. The exchange rate is $10,000 per bitcoin, and it still processes lots of transactions. And it's just selfish mining hasn't really been that big a deal for bitcoin, in part just because it's so difficult to get even. It's so expensive to get even one third of the overall computational power. But selfish mining attacks have happened on smaller blockchains, where there are much fewer miners, much less computational resources devoted to them that we have seen.
00:12:51.414 - 00:13:51.080, Speaker A: So it is an attack we've seen in the wild, if not in the biggest of the blockchains. But even for bitcoin, selfish mining makes an extremely important point, which is that in the original bitcoin white paper, definitely, incentives are a key part of that white paper, but the incentives sort of addressed only a particular genre of attacks, the forking attacks, like the double spend attack that we discussed on the last slide. And so selfish mining shows that the space of attacks of deviations from the protocol is really quite a bit richer. Right? So here we have block withholding and in fact that once you allow those kinds of attacks, the conclusions of the original Bitcoin paper are actually not correct. It's not true that bitcoin is secure if just everybody has 49% or less of the computational power. It really sort of forcefully argues that in Bitcoin you want to make sure that no party has anywhere close to 50% of the computational power, certainly the most 30%. And really, ideally, hopefully, no one has even 20% of the computational power.
00:13:51.080 - 00:14:35.346, Speaker A: And that, my friends, brings us to the end of this online short course on incentives in computer science. So thanks very much for joining me. Hope you've had fun. Just to sort of jog your memory, I mean, in the last several hours we've actually learned, at least in my opinion, a ton of cool stuff. So let me just sort of prove that point by recapping what we've seen. So in the first module, we just pointed out how markets are omnipresent in modern technology and so therefore economics and computer science have a lot to say to each other. So applications that are obviously very central in computer science and companies, for example, where lots of computer science undergrads are going to go work at after graduation, incentives really matter in a lot of those platforms and a lot of those systems.
00:14:35.346 - 00:15:32.650, Speaker A: And so it's really useful to be able to look at things through an economic or game theoretic lens when you need to, to understand what are the likely consequences of different design decisions that you might make. In our second module, we talked about the most famous example in all game Theory, probably the Prisoner's Dilemma. And again, one of the huge strengths of Game theory is how just with extremely toy examples that you can write down on a cocktail napkin, you somehow actually gives you a very powerful lens through which to look at real world situations. And indeed the Prisoner's dilemma, this conflict between the individual incentives and the collective good that shows up all the time. And so we saw how in repeated versions of the Prisoner's Dilemma, you actually can get cooperation. So for example, using the very nice tit for tat strategy start optimistically, punish quickly, forgive quickly. And then we saw how that influenced actually a key design decision in the BitTorrent protocol, which is the dominant paradigm in peer to peer distributed file systems.
00:15:32.650 - 00:16:41.338, Speaker A: In the third module, we talked about asymmetric information, specifically adverse selection, for example, in the market for lemons and in the health insurance market and also in online advertising platforms we talked about another form of asymmetric information, the moral hazard problem, which is when you don't have karmic retribution for taking bad actions now. And we used these concepts to understand what it is. Reputation systems in platforms you're familiar with, like Amazon or Uber or Airbnb, whatever, we recognized these are some of the key problems that reputation systems are really designed to solve. And then we had a careful look at how ebay's reputation system evolved over the years. As a case study in our fourth module, we talked about auctions. So we talked a little bit just about auctions 101 single item auctions, and then specifically singled out the second price or victory auction, which has this nice truthfulness property, that truthful biding is a dominant strategy. And then we applied those lessons learned to understand how auctions work in online advertising, and specifically in sponsored search auctions, most notably at Google, which is how Google makes to this day most of their revenue.
00:16:41.338 - 00:17:42.734, Speaker A: And so there it was more complicated because we didn't have one item, we had multiple slots on a search results page, but we saw that you could use the same kinds of ideas to come up with good sponsored search auctions. And in particular, we learned how the generalized second price auction works, which forms the basis for real systems that are deployed today. Module five was about crowdsourced democracy and sort of relatedly why computer scientists have been thinking about voting in recent years. And specifically we talked about participatory budgeting, and we saw that the sort of easiest thing to implement with a paper ballot, k approval voting is okay, but it has some problems. And we looked at a cutting edge newt solution called napsack voting, which really, you really kind of need technology to implement in a practical way. But of course we now have that technology and holds the promise of making better decisions for public budgeting decisions than the k approval voting system, which is widely used. Finally, we talked about bitcoin, the world's most famous cryptocurrency and most famous blockchain.
00:17:42.734 - 00:18:24.730, Speaker A: We learned how it worked and we saw that incentives play a really important role. So that's how miners are motivated to do work on behalf of the protocol and actually authorize transactions and add blocks to the blockchain. That's also how money gets minted in bitcoin, so there's no centralized authority like a government to print money. So it happens inside the protocol, and it happens exactly when miners authorize new transactions. And we saw that because of those incentives, it can entice miners to behave in unexpected ways. So we looked at forking attacks, like double spend attacks, and then we concluded with selfish mining, which is this very clever block withholding attack on bitcoin. So we've covered a ton of ground.
00:18:24.730 - 00:18:48.180, Speaker A: I hope you found that this was a useful use of a few hours for you. And again, this is really just a teaser for a 30 hours course that I teach periodically on campus at Columbia University. And so for of you that are Columbia students, hopefully I'll see you sometime. Hopefully not too long from now, in person and on campus and maybe even in one of my own courses. So thanks very much for joining me. Take care.
