00:00:00.490 - 00:00:46.460, Speaker A: So as we've seen in Permissionless Consensus, you need some kind of civil resistance mechanism. You need to make it economically costly for a node to increase the amount of power they have over the consensus protocol. We've seen two ways of doing that and these are the two dominant approaches in practice currently. We talked about proof of work back in lecture number nine, specifically Nakamoto Consensus. And obviously all of this lecture, lecture number twelve, Solve, has been about the alternative approach to civil resistance proof of stake. Now, whenever you're confronted with two or more proposed solutions for the same problem, you obviously have to ask which one is better? So that's often a controversial question. And man, talking about proof of work versus proof of stake super controversial question.
00:00:46.460 - 00:01:32.038, Speaker A: The answer is complex and nuanced. And in this video and the next, I'm going to tell you probably more than you ever wanted to know about this question. So as usual, I'm not here to advocate for one of these solutions over the other. I'm just here to clarify, clarify the pros and cons of these two approaches to civil resistance, clarify the common points of debates, and also what are the most common arguments you'll hear on each side of that debate. You might recall we already talked about this issue some all the way back in part one of lecture twelve. So back then we had a video which mentioned the three biggest advantages of using proof of stake civil resistance as opposed to proof of work. And we did that back then for two reasons.
00:01:32.038 - 00:02:24.490, Speaker A: One is I was asserting at the opening of lecture twelve that we'd seen a migration over the past five or so years with new major blockchain protocols almost never using proof of work civil resistance, most commonly using proof of stake civil resistance instead. So I wanted to give you some context about why I thought that migration was happening. And the second reason was just to make sure that we had our proper motivation for lecture Twelve, right? We did a lot of hard computer science in parts two and parts three of this lecture. So back in part one, I wanted to make sure that you knew what the payoff of all that hard computer science was going to be. So to kick off this video, let's just briefly recap those three advantages we talked about way back in part one. So to some extent this will be review for those of you that remember that video. On the other hand, having sort of walked through all of the details about how proof of stake blockchain protocols actually work, we're in a position to actually understand these three advantages sort of much more concretely.
00:02:24.490 - 00:03:41.838, Speaker A: So the first one, and certainly the one you hear the most about in sort of mainstream discussions of this topic, is that proof of stake blockchain protocols tend to use much less energy than proof of work blockchain protocols. So what makes proof of work blockchain protocol so energy intensive? Well, remember, by definition, the point of a proof of work protocol is to give power to a node. For example, the likelihood that it's selected as the next block proposer power to a node proportional to the fraction of the overall hash rate that node owns. And fundamentally, the issue then is the unobservability of the node's hash rates by the protocol, because there's no way for the protocol to magically know how much hash rate a node is bringing to the table. That node basically has to always be proving how much hash rate it has. It has to turn on all its computers, turn on all its asics, leave them on all the time, just so it's continually convincing the protocol that it has a certain amount of hash rate and therefore, for example, should have a certain likelihood of being selected as the next block proposer. So because of this, with nodes keeping their machines or asics on all the time proof of work protocols, or the big ones anyways, certainly Bitcoin will inevitably use orders of magnitude more energy than we're accustomed to from an internet protocol.
00:03:41.838 - 00:04:25.626, Speaker A: Now, people do kind of debate whether the amount of energy used by, say, Bitcoin is sort of big enough to worth worrying about. Different people have different opinions about that. But everybody agrees that, for example, Bitcoin uses far more energy than a protocol like, say, the BGP routing protocol with proof of stake civil resistance. Meanwhile, the control that a node has over the protocol, like the likelihood of being elected as a black proposer, is supposed to be proportional to how much stake. So usually in the blockchain protocol's native currency, how much stake has been locked up in a staking contract, which is part of the state maintained by the blockchain protocol. And so that's very different than the proof of work case, right? Proof of work hash rate is the key resource. It's unobservable by the protocol proof of stake.
00:04:25.626 - 00:05:31.094, Speaker A: Stake in a staking contract is the fundamental resource that is directly observable to the protocol. So none of the nodes have to be proving anything. The protocol does in fact automatically know how much stake each of the nodes has locked up. And so for this reason, because nodes don't have to prove anything about themselves to the protocol, proof of stake blockchain protocols use energy comparable to what we're used to from other internet protocols. Now, maybe you remember from that video back in part one, proof of work proponents do have a number of counterarguments they like to make against this critique about the energy consumption of such protocols. For example, some of them just argue that given Bitcoin's unique position as this sort of relatively battle tested global permissionless payment system, maybe that's an important enough thing that it's actually justified to spend a significant amount of energy maintaining it and securing it. Proof of work proponents might also point to the fact that at least in the case of bitcoin, a decent chunk of the energy that's going into the bitcoin mining does in fact come from renewable sources, which is great.
00:05:31.094 - 00:06:35.020, Speaker A: I mean, you do really need to have this sort of broader discussion about what's the overall impact on sort of the energy markets, the overall impact on fossil fuel consumption of bitcoin mining. And that probably there needs to be a more detailed analysis than there's been so far. But these are the kind of points that reasonable people can debate over proof of work protocols, all right, so that's sort of environmental advantage of proof of stake protocols over proof of work protocols. Next, I want to talk about a performance advantage. I want to talk about the fact that proof of stake protocols can offer better latency and finality guarantees than Nakamoto Consensus. And remember, what I mean by latency is the time that elapses between when a transaction is submitted to the blockchain protocol and the time at which it is confirmed that it appears in some block which is considered finalized. So the fundamental issue here is that if you choose to use proof of work as your civil resistance mechanism, that unfortunately pushes you into a fairly restricted part of the consensus protocol design space.
00:06:35.020 - 00:07:16.518, Speaker A: Indeed, if you look at all of the major deployed proof of work protocols, they all look a lot like bitcoin, so they all use longest chain consensus. All of those proof of work protocols are more specifically Nakamoto Consensus protocols. You can, in principle, have proof of work blockchain protocols that are sort of better and more sophisticated than Nakamoto Consensus. And there are, in fact, some academic proposals out there of proof of work protocols that have better latency guarantees than just straightforward Nakamoto Consensus. As far as I know, none of those have been deployed at scale. But in principle, you can go beyond Nakamoto Consensus within the proof of work protocol design space. On the other hand, there's also limits of how far you can go.
00:07:16.518 - 00:08:08.434, Speaker A: Right back in lecture number nine, we actually saw a fundamental weakness of proof of work civil resistance. It's literally impossible, no matter how smart you are, it's impossible to guarantee consistency in the partially synchronous setting where you can have network outages and denial of service attacks, something that we know is possible, as we've seen, with proof of stake blockchain protocols. If you're talking specifically about Nakamoto Consensus, which again is what pretty much all the major deployed proof of work blockchain protocols use, then you suffer sort of multiple performance drawbacks. So first of all, as we saw all the way back in lecture eight, for longest chain consensus, you got to have a security parameter K. So it's not all of the blocks on the longest chain that are considered finalized. It's only the blocks that are sufficiently deep on the longest chain. The last K blocks are always considered tentative and still under negotiation.
00:08:08.434 - 00:09:07.050, Speaker A: So because of that, because your transaction needs to not just go in a block, needs to not just get added to the longest chain, but then also has to be extended by K further blocks. That's why kind of latency is just always pretty big in Nakamoto Consensus protocols, maybe in the minutes, depending on the implementation, maybe even in the hours. So that's the latency issue, which seems sort of unavoidable with Nakamoto Consensus. But then also you have issues with finality. So first of all, even if you have a well behaved communication network, even if you're in the synchronous setting, nakamoto Consensus finality is always going to be probabilistic, right? So even if a block is K deep on the longest chain, it's conceivable that you'll get very unlucky with the next sequence of leaders and they'll all be Byzantine and they'll grow some alternative chain that rolls back this block that you thought was finalized. That's unlikely. Admittedly, more and more unlikely the bigger you take the security parameter K, but nevertheless, the finality guarantee is necessarily probabilistic.
00:09:07.050 - 00:09:55.526, Speaker A: And finally, in the partially synchronous model, where you might suffer network outages or denial of service, attacks of unbounded delay, then finality just completely goes out the window. You just simply don't have it at all, even if all of the nodes are honest. And as we saw in that impossibility result back in lecture number nine, that's actually not a critique of Nakamoto Consensus per se. It's actually a flaw of all proof of work blockchain protocols with proof of stake civil resistance. Meanwhile, as we saw in part three, nothing is stopping you from coupling it with a BFT type consensus protocol like tendermint. And if you do that and you implement it properly, you will be overcoming these performance drawbacks, right? You will get finality basically immediately. As soon as a block has a stage two quorum certificate, you can consider it finalized.
00:09:55.526 - 00:10:40.354, Speaker A: You don't need any further blocks to come later. And what's the claim to fame of Tendermint? It remains consistent even in the partially synchronous model. This is, of course, under the usual sort of assumptions about the power of Byzantine nodes. Like, for example, more than two thirds of the stake maybe should be controlled by honest nodes. So while you probably hear the most about issue number one, the energy consumption issue, when people talk about proof of work versus proof of stake, in my experience, probably the primary reason for the migration we've seen from proof. Of work over to proof of stake over the last five years is driven by this second point is driven by performance issues and the desire to have stronger finality properties and lower latency. All right? So that's an environmental advantage of proof of stake protocols.
00:10:40.354 - 00:11:29.826, Speaker A: That's a performance advantage. And then the third one will be in some sense a security advantage of proof of stake protocols, which is the use at least you have the option of using slashing, which opens up the possibility of having programmatic recovery from 51% style attacks. So here remember, we want to think about a blockchain protocol that unfortunately just suffered, let's say a double spend attack. Maybe it was a Nakamoto Consensus protocol and an adversary captured 51% of the hash rate. Maybe it was a proof of stake BFD type protocol and an adversary captured 34% of the stake. And the question then is, what should you do? Should you just sort of give up and sort of just sort of go home? And indeed, like the traditional academic literature, that kind of is their attitude. It kind of is like, look, you need less than a third or less than a half, otherwise you're toast.
00:11:29.826 - 00:12:15.858, Speaker A: But in practice, you say, okay, well, what if this does happen, at least temporarily? Is there some way we can recover from it, sort of reboot the protocol or programmatically, kind of get rid of the attacker so that we can proceed nonetheless and with a proof of work protocol, it's really not clear what you can do. If an attacker captures 51% of the hash rate, you can go for the nuclear option. I mean, you can try to do a hard fork of the protocol. Hard fork means basically like an upgrade to a new version of the protocol code. So you could do a hard fork that changes the cryptographic hash function. Why would that be helpful? Well, asics because they're so specialized, they're good for evaluating one cryptographic hash function but not any of the others. So if you switch your cryptographic hash function, that makes all of the asics for the old hash function useless.
00:12:15.858 - 00:12:50.434, Speaker A: So that's like burning all of the hardware that the 51% attacker owns. Unfortunately, it also burns all of the hardware of all of the honest nodes as well. It hurts them just as much as it hurts the 51% attacker. With the proof of stake blockchain protocol, meanwhile, you have the option of slashing. You are not stuck only with the scorched earth approach. You can also try to surgically confiscate economically valuable resources from the attacker. Now, for this to work, you need to be able to identify the attacker, but in some cases, you can do that.
00:12:50.434 - 00:13:20.454, Speaker A: For example, in tendermint, the only way you can have a double spend is to have sort of two different blocks finalized at the same block height. The only way you can have that happen is for a third of the stake to vote on each of the two. And that's a deviation from honest behavior. That's a smoking gun. So you could slash the stake of everybody who voted on two different two conflicting blocks at the same block height. So the very coarse way of doing this would be just through a hard fork. So again, this requires solving this large scale coordination problem amongst stakeholders of the protocol.
00:13:20.454 - 00:14:00.460, Speaker A: You got to get kind of almost everybody to agree to upgrade to a new version of the protocol. But if you can do that, then in that new version of the protocol, you could just zero out the stake of everybody that you caught voting for conflicting blocks. An alternative approach should be to just do in protocol that is programmatic slashing. Then of course, you need to not just sort of detect the deviation, you need not just detect the attacker, but include evidence of the attack in the chain itself. That's what's going to trigger then the programmatic slashing of, for example, the double voters staked assets. Now, we had an entire video about slashing. That's how we kicked off part four of this lecture of lecture twelve.
00:14:00.460 - 00:14:44.594, Speaker A: And as we discussed there, there's lots of disagreements between the major proof of stake blockchain protocols about to what extent to use programmatic slashing. The best practices there are really kind of still unclear. We're going to have to watch how things play out over the next several years. But you at least got to admit, at least it's an option in the design space, right? So with proof of work blockchain protocols, there's no option to slash at all, either programmatic or through a hard fork. All you have is this sort of nuclear option, this scorched earth approach, whereas with proof of stake protocols, at least you do have this option of surgical confiscation. So that's the third advantage that we talked about of proof of stake protocols back in that video in part one. So people don't really debate whether or not proof of stake protocols do have these three advantages.
00:14:44.594 - 00:15:20.770, Speaker A: I mean, they do. Those are the facts on the ground. If you look at sort of the major proof of stake blockchain protocols, they really do use way less energy than the Bitcoin protocol. As we discussed, all of the proof of work protocols that are kind of out there in practice are based on Nakamoto Consensus, which doesn't have very good latency or finality guarantees. And some of the proof of stake blockchain protocols out there do have pretty good latency and finality guarantees. And while there's no proof of work protocols that have any analog of slashing, it's not clear what that would even mean. There are deployed protocols, for example, postmerge ethereum, which do indeed make use of programmatic slashing.
00:15:20.770 - 00:16:28.146, Speaker A: And pretty much everyone also agrees that all else equal, these are good things, right? Like all else equal, why not use less energy? All else equal, why not have better latency and finality guarantees? All else equal, why not have more options for how to recover from 51% type attacks? The rub, of course, is that it's not all else equal if you use proof of stake civil resistance, there are some drawbacks, some disadvantages relative to proof of work. So the debate is really over. Do the benefits of proof of stake outweigh the costs? That's the topic on which much blood and ink has been spilled over the past decade or so. As I said at the outset, I am not interested in taking sides. I'm interested in putting you in a position to have your own informed opinion on these matters. So with that in mind, I want to highlight the key points of debate, the arguments on each side of those points, and then also to clear up some common confusion that you find on this topic. A lot of the discourse on proof of work versus proof of stake is sort of, let's say, muddled at best and downright misleading at worst.
00:16:28.146 - 00:17:19.730, Speaker A: So I want to make sure you have a clear view on all of these issues. And speaking of common points of confusion, one really common one is to see people conflate sort of a methodology, something like proof of work or proof of stake with a specific embodiment of that methodology, like a protocol that makes use of proof of work or proof of stake. This is somewhat forgivable on the proof of work side. I mean, you shouldn't conflate proof of work specifically with the Bitcoin protocol, but it would be understandable if you conflated proof of work with Nakamoto Consensus. That is, if you just sort of assumed that the protocol was using a longest chain rule to figure out which blocks are finalized. Again, let me emphasize that is not, strictly speaking, true. There are some interesting academic prototypes more sophisticated than Nakamoto Consensus proof of work protocols with better latency guarantees, like one you could look up would be Prism.
00:17:19.730 - 00:18:03.526, Speaker A: Prism. So we should remember that in principle, proof of work goes beyond Nakamoto Consensus. But given that all of the major deployed proof of work protocols use Nakamoto Consensus, again, I could forgive someone for conflating those two concepts. Now, with proof of stake civil resistance, on the other hand, as we've seen in this lecture, proof of stake protocols come in many different flavors. That's true both in theory and it's true in practice. If you look at the major proof of stake blockchain protocols, they differ in a lot of different design decisions. So if someone's criticizing proof of stake, I will say, oh, maybe they're really actually just criticizing specifically proof of stake ethereum, or maybe they're specifically criticizing solana or whatever.
00:18:03.526 - 00:19:04.570, Speaker A: So it's important to also be clear in your mind, is the criticism of a protocol or more generally of the proof of stake approach? As usual, I want to focus on principles, not protocols. So now we're going to proceed to disadvantages of proof of stake, and I want to talk about disadvantages that seem fundamental to the methodology so drawbacks that are going to be suffered by any blockchain protocol that uses proof of stake civil resistance, no matter how the rest of it might be designed. So next I'm going to talk through three different disadvantages that appear to plague proof of stake blockchain protocols fairly generally. Also, there are three disadvantages that I think are uncontroversial I think even the strongest proponents of proof of stake protocols would admit that they do suffer from these disadvantages. What is controversial, of course, is whether the advantages outweigh the disadvantages or not. So let's leave that aside and let's just understand what are the key compromises you have to make if you're going to use proof of stake civil resistance. So the first advantage is that proof of stake blockchain protocols seem to be more complicated.
00:19:04.570 - 00:19:57.050, Speaker A: Now, this, of course, is not a theorem. I'm not saying that fundamentally proof of stake protocols must be more complicated than proof of work protocols. But again, it's just if you look at the facts on the ground, if you just look at the major blockchain protocols that are out there, the proof of stake protocols are in fact quite a bit more complicated than Bitcoin or Nakamoto Consensus. This additional complexity, of course, is not unrelated to exactly how long lecture Twelve is. There's just a lot to talk about getting these protocols right. It's also, of course, not unrelated to why it took the Ethereum community many years before they were comfortable switching over from proof of work to proof of stake. Now, so what you might say, why is this extra complexity like such a bad thing? Well, yeah, there's a few things, but the simplest is just that the more complicated a piece of software right, the harder it is to get it right, both in the design phase and in the implementation.
00:19:57.050 - 00:20:48.650, Speaker A: Because I got to tell you, even the simplest of distributed protocols are actually quite tricky to implement correctly. If any of you have taken a course on distributed systems, you know that experience firsthand. And so once you start talking about relatively sophisticated distributed protocols, well, now there's a lot of opportunities for bugs again, either in the design or in the implementation. And of course the worry is that those bugs are only going to be found kind of in the wild once the protocol has been running for a while and the stakes are very high. So most people, all else being equal, I think, would quite reasonably view interacting with a simpler protocol as a less risky activity than interacting with a more complex protocol. The second drawback of proof of stake protocols is in some sense a consequence of the first. With the additional complexity comes, unfortunately, entirely new attack vectors.
00:20:48.650 - 00:21:31.622, Speaker A: Now, again, this is not a theorem. I'm not saying I have a mathematical proof that any extra complexity in a protocol automatically leads to some kind of new attack vector. It's more of a sort of heuristic. But if you look at proof of stake blockchain protocols, there's no question that they are vulnerable to a wider class of attacks than proof of work protocols. Most of these additional attack vectors stem from this property of costless simulation that we've mentioned a couple of times. The fact that in a proof of stake blockchain protocol, a node can very quickly and cheaply fabricate an entire alternative history. This plagued us most recently, just in the last two videos when we were talking about long range attacks, which so far are just kind of basically an academic attack, but they do seem potentially serious.
00:21:31.622 - 00:22:27.210, Speaker A: We'll see as the future unfolds. But long range attacks involves this costless simulation sort of generating using sort of stolen old keys or purchased old keys, a long fabricated history, something you would not be able to do with a proof of work protocol, because proof of work has only costly simulation. Now, if you remember, there was actually another place where costless simulation sort of caused us a lot of trouble, which was at the end of part three. That's when we were coupling proof of stake civil resistance together with Longest Chain Consensus. And we were dealing with this sort of nothing at stake problem, the idea that a node might be able to extend kind of all branches of the blockchain all at the same time. And what we saw was that depending on the details of the implementation, this nothing at stake issue could actually degrade the security properties of Longest Chain Consensus. So normally, longest chain consensus is consistent and live as long as you have 51% of the participation being honest.
00:22:27.210 - 00:23:21.350, Speaker A: And again, depending on the details of the implementation, the nothing at stake problem can make it so you need much more than that, something more like 74% of the participation being honest. So those are the first two disadvantages I want to mention of proof of stake protocols, at least as we understand them today, more complicated than their proof of work counterparts and not coincidentally, vulnerable to a wider class of attacks. So these two points definitely contribute to the viewpoint of many kind of more risk averse, more conservative folks who view proof of stake protocols as kind of like experimental technology, just as not very battle tested, at least compared to proof of work protocols. And specifically bitcoin. If you think about it, there's sort of two different things going on. One is just that Bitcoin has been around a lot longer. It's been around somewhere like six to ten years longer than any of the major deployed proof of stake blockchain protocols.
00:23:21.350 - 00:24:24.202, Speaker A: But the other thing going on is that even if all of these launched exactly at the same time, it would probably take you longer to get an equal amount of confidence in these more complicated proof of stake protocols than it would to get the same level of confidence for Nakamoto Consensus, right? So whatever confidence ten years of Nakamoto Consensus gives you, maybe you would need to watch a proof of stake protocol running for something like 20 years before you felt equally confident in that. Now, I don't want to make too big a deal of it. Many major proof of stake blockchain protocols have been happily running along for years now. So things so far I think are going quite well. But for someone on the risk averse side, I hope you can understand why they might view proof of stake protocols as sort of a relatively nascent technology. The final disadvantage that appears to be fundamental to proof of stake protocols, it's actually sort of related to the second one, which is just that because of the wider class of attacks you need to worry about, you actually need to make stronger trust assumptions to guarantee consistency and liveness. We talked about this at length in the last couple of videos in the context of long range attacks.
00:24:24.202 - 00:25:28.050, Speaker A: So just to briefly remind you, one really cool property about proof of work protocols, if you're a new node, like, you just sort of show up and join the party, and you hear about multiple competing chains, there's an objective criterion by which you can decide which one to follow along and start extending yourself, right? In Nakamoto Consensus, every block, and therefore every chain, is annotated with the expected amount of work that went into producing it. And so a node confronted with multiple competing chains can just use the one that has the largest amount of work devoted to it in a proof of stake protocol. Meanwhile, because you have this costless simulation, a long chain does not, in fact, indicate a large amount of economic investment into producing it. And so for that reason, in a proof of stake protocol, when you're confronted with multiple competing chains, it's not obvious which one is the real one. Which one should you be extending yourself. So you need to kind of phone a friend or use a trusted checkpoint, or use one of the techniques we talked about in the last couple of videos to figure out which of those chains you should be following. So that's a stronger trust assumption than what you need for Nakamoto Consensus.
00:25:28.050 - 00:26:07.586, Speaker A: Like I said earlier, I think all three of these disadvantages of proof of stake protocols, or at least the proof of stake protocols we know up to this point, I think they're all pretty uncontroversial. I think everybody would agree with them. The question is, how big a deal is it? And so for strong proponents of proof of stake silver resistance, they would argue, okay, yeah, fine, they do have these drawbacks, but like, so what? These are all sort of not that big a deal. For example, for the first disadvantage, additional complexity. They may say something like, well, yeah, that's what it takes to get additional functionality, right? Each of your smartphones is more complicated than the last one. Each of your computers is more complicated than the last one. Each of your cars is more complicated than the last one.
00:26:07.586 - 00:26:41.610, Speaker A: That's because they have more features than the previous models. So they might just view this as sort of actually a sign of technological progression. For the second disadvantage, a wider range of attack vectors, the response might be like, okay. Fine. It's a harder computer science problem, but we're getting better and better at sort of blockchain protocol design. So let's just take it to the next level. Let's just anticipate all of the possible attacks that people could launch on proof of Stake protocols and then introduce ways of dealing with it, like anticipate the fact that there could be longer range attacks, and then outline the menu of options for how to make sure they don't mess up your protocol.
00:26:41.610 - 00:27:33.318, Speaker A: Now, this argument honestly, is a little bit weak, right? Like, I don't know how you'd ever convinced yourself that you'd literally thought of every single attack vector that any bad actor might ever be able to think of in the future. That takes some hubris to think that you've done that. And so, again, I think to have really a lot of trust in proof of Stake protocols, we're going to have to watch them get battle tested in the wild, but that's exactly what's going to happen as the 2020s proceed. As for the third disadvantage, the proof of Stake protocols seem to need stronger trust assumptions than Nakamoto Consensus. Here, the proof of Stake proponent might argue that, okay, technically that's true. But if you look at Nakamoto Consensus in practice, everybody running it is sort of making comparably strong trust assumptions anyways. If you're operating a node which is participating in, for example, the Bitcoin protocol, you had to get the code for running the protocol somewhere.
00:27:33.318 - 00:28:28.640, Speaker A: You had to get the correct version of the code. You had to get the correct genesis block, and so on. And somehow you had a sort of out of protocol means of doing that, presumably from a trusted source or a collection of sources, many of which are trusted. And so if you're already making that trust assumption to get the protocol in the first place, what's the difference between also making that assumption to get, for example, a recent checkpoint if you went offline for a long period of time? So that would be sort of the counterargument people would give proof of Stake proponents would give. On this third point, let me briefly just tell you a bit about my personal sort of view of these three disadvantages. And again, I encourage you to disagree. But from my vantage point, these first two disadvantages, the extra complexity and the extra attack vectors that go along with them, to me, that's an indication that proof of Stake blockchain protocol design is a fundamentally harder computer science problem than proof of work blockchain protocol design.
00:28:28.640 - 00:29:09.722, Speaker A: That said, there's nothing I've seen up to this point as a computer scientist that makes me believe that this is going to be impossible. I see no fundamental barrier to having protocols that are proof of Stake very good security guarantees, very good performance guarantees, operating quite reliably in practice. I think that is a realistic goal. And every year we're making measurable progress toward that goal. Proof of Stake blockchain protocols just keep getting better and better as the years go on. Now, if you're kind of very much on the risk averse side, I think it's reasonable to regard proof of stake blockchain protocols as much less battle tested than Nakamoto Consensus and the Bitcoin protocol in particular. So I get that.
00:29:09.722 - 00:29:53.880, Speaker A: But even then, you do want to keep an eye on the developments in the proof of stake world. And the hope would be that as the years go by and they get more and more battle tested, we're going to have more and more confidence that these proof of stake protocols really do have all of the security and performance properties that we're expecting them to. Finally, as far as the third disadvantage, the stronger trust assumptions, some people are really bothered by this aspect of proof of stake protocols coming from sort of an ideological or philosophical point of view, but just kind of, as I say, things play out in practice. This just really does not seem to be much of a compromise. Personally, I have a hard time seeing this third disadvantage as being any kind of impediment to the adoption of proof of stake blockchain protocols going forward.
