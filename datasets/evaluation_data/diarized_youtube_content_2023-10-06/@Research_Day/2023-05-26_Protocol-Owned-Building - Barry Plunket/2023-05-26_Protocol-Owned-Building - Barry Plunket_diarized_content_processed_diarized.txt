00:00:09.900 - 00:00:59.856, Speaker A: Hi everybody. My name is Barry. I'm one of the co founders of Skip. We build mev infrastructure and protocols for the Cosmos ecosystem and for app chains and roll apps more broadly polyge. Guys, for changing my talk last night, I was going to talk about cross chain mev, and then I saw that everybody else was talking about crosschain mev and I realized nobody was talking about app chains and that's mostly what we do. So I figured better talk about that and this idea that we've come up with we call protocol owned building, which is about the vertical integration of a protocol into its block building process for many, many reasons, some of them being UX, some of them being mev. And we're going to talk a little bit about a product that we're building around this idea.
00:00:59.856 - 00:02:13.720, Speaker A: But the purpose of the talk is really to get you guys thinking about the kinds of things you can do with the appchain stack. So many of you are much smarter than I am in this room, so we're going to talk about what Skip is doing. But I really want to encourage people to think about when your application can be very opinionated about how its blocks are built, what that allows you to do in terms of building truly better applications. I think it's generally underexplored right now. But something that we believe very fundamentally at Skip is that one of the best reasons to build your own blockchain for an application in the way dYdX is doing or Osmosis has done, or many other roll apps are. Doing now is that it allows you to control MEB in new ways that are just not possible when you're on a more generalized platform. So we're going to talk about why we've come up with these ideas around protocol owned building and the setting that we operate in and then what our tool chain is, which I think is really interesting, and then just walk through the roadmap and talk about where it is today and the kinds of tools that we're making available to app chains and rollups.
00:02:13.720 - 00:03:03.464, Speaker A: So the motivation is what we call sovereign mev. That means a bunch of different things. But basically app chains have given us this list of kind of extreme demands for how they want mev markets to operate on their chain. So first they want to be able to control who profits off of mev. So in many existing mev systems on Solana or Ethereum, the ultimate beneficiary is the validator set and the proposer of a particular block in particular. But the chains we work with, they want mev to go elsewhere. They want it to go to LPs if they're a Dex chain, they want it to go to the community pool.
00:03:03.464 - 00:03:32.740, Speaker A: They want to be able to burn it. They want to be able to give it to smart contract devs, even if that's not the most well advised thing in the world. But they have these really strong stories, these reasons that they are unique, that they have built every inch of their stack around. And they want mev to also reflect those reasons. The second thing that they want is no centralized off chain block builders. They don't want any one party to be able to build an entire block by itself. And that includes us.
00:03:32.740 - 00:04:14.948, Speaker A: For those of you who are familiar with our journey. Our first product was basically a centralized block builder that we shipped as a service to 510 different Cosmos chains. So required them to trust us and it also required us to run a bunch of infrastructure. But another way of thinking about this is that app chains and roll ups, they want something that allows them to start recapturing mev right away, like batteries included. They don't want somebody to have to spin up these complex off chain block building systems. If there are a few searchers on their chain who are sophisticated enough and who are familiar with their protocol that they can extract mev, they just want it to just work, start. And then the second thing they want is they want it to make a lot of money, obviously, but they don't want it to make money in bad ways.
00:04:14.948 - 00:04:59.660, Speaker A: So there's these broad notions of what constitutes toxic mev around front running or Sandwiching generally just requiring users to pay their worst price possible. And what we've seen is app chains, really. They don't want this, probably not surprisingly. They want to provide a good user experience to retail users who draw other kinds of users to their platforms. And then they also want these things to be censorship resistant. So they don't want the proposer to be able to enter into off chain agreements with other parties that may pay them directly and undermine whatever kind of revenue split that they have come up with or desire as a part of their protocol. They want that to kind of be off the table.
00:04:59.660 - 00:05:51.196, Speaker A: So they don't want folks to be able to, for example, censor bids in an auction that we might run. And then lastly, they want this to be resistant to mev ceiling. So in addition to it maximize revenue, they don't want validators to be able to just copy searcher strategies. So pretty simple list of requirements. Obviously hard to get all of these, but we work on systems that work up the stack and try to give them more and more of these things and can work as soon as possible. So the setting is the Cosmos ecosystem, which some of you are very familiar with, some of you less so. It's this ecosystem of many different blockchains, all of which have the same underlying technologies.
00:05:51.196 - 00:06:53.824, Speaker A: They use tendermint for consensus. The implementation is now called Comet BFT for legal reasons. They use the Cosmos SDK to actually build these applications and function as the VM a lot of times with various customizations and then each of these chains is built, as I've implied, to do one thing and do it well. They're really optimized top to bottom to be purpose built. And so that means sometimes they're Dex chains like Osmosis. There are these chains that are trying to be everything to DeFi. So injective say, dYdX is now launching a Cosmos chain, and they're NFT marketplaces basically any application you can think of, people are trying to build blockchains to emulate and but we want to work on technologies and ideas that we think can generalize nicely to any kind of chain that has a permission route.
00:06:53.824 - 00:07:48.820, Speaker A: Robin, proposer set and fast finality. Tendermint is the best consensus algorithm for this today. So I'm going to talk about the interface between Tendermint and the Cosmos SDK or the application, because I think this is really critical to understanding why app chains can give developers better tools for integrating consensus into the block building process. So this is ABCI 1.0. ABCI is the application blockchain interface. And basically what happens here is Tendermint is responsible for consensus, the application manages state, and Tendermint is really dumb, doesn't know what the application is, doesn't know what the application cares about or wants. Just come to consensus on a set of transactions.
00:07:48.820 - 00:08:43.050, Speaker A: And then once we've come to consensus, tendermint gives the application those transactions one at a time. So there is not much opportunity for Tendermint to or for the application to actually express any kind of block building preference. There's not an opportunity to do what we're trying to do, which is vertically integrate the protocol into the block building process. It's just very dumb. But thanks to the work of informal and a lot of leadership from the Osmosis team, there is a new version of this interface coming out that allows a lot more sophistication that allows the application to actually be very opinionated about what blocks are valid and what blocks aren't, based on the transactions that they contain, based on the ordering of those transactions, based on any rule that you can come up with in this framework. Each of these steps is kind of important. So I'm going to spend a little bit of time on this.
00:08:43.050 - 00:10:23.880, Speaker A: The first one, Tendermint Mempool Prepare proposal, has a bunch of transactions, and it gives them to the application, and it says, is this okay? Can I put these into a block or candidate block and send it around to the rest of the network? Application has the opportunity then to return different transactions, new transactions, reorder them, apply any kind of arbitrary rules it wants to and give them back. And then in process proposal, once the proposal has been gossiped around to different validators, each validator has the opportunity to ask the application, is this okay? Did this validator create this block according to the rules that you wanted them to? So does this meet whatever your criteria are? So if you're a Dex, for example, you could say, does this block actually have sort of global clearing prices for all assets. And if not, we can reject it as a part of consensus. We can tie liveness to the quality of our block building process if we want to. And then during the voting phase of consensus, the validator set also has an opportunity to attach additional votes or additional data that's this extend vote verify vote stuff to their votes on a block. So what that means then is that when there's a quorum and the proposing validator for the next block is making a block, we can guarantee the availability of that data. We can guarantee that when the proposer is making that next block, they have access to two thirds plus one stakewave of data, which is going to be useful.
00:10:23.880 - 00:11:29.128, Speaker A: So what we try to do here then is build a general system that can just be plugged into any Cosmos SDK chain off the bat and hopefully in the future, other kinds of blockchain SDKs that allows them to capture mev right off the bat. So the very first version of this just uses this prepare proposal phase where we just make the mem pool function like an auction. So in this case, we add a native bundle type transaction so searchers can specify a bid that they want to pay for top of block and then a bundle of transactions that they want to include. And then during the block building process, the validator finds the highest one in their mempool, pulls it out, puts it at the top of the block, and in the process proposal phase, we make sure, okay, is there only one top of block transaction there. So what does this give us? It just works, which is nice. We don't need to run any infrastructure. Nobody needs to run any infrastructure.
00:11:29.128 - 00:12:07.610, Speaker A: You have immediate mev recapture on every chain that runs this. But it's also bad. It's not censorship resistant. So the proposer can freely just censor bids if they want to. We have no guarantees about them not doing that. We don't know what was in their mempool, and we can't credibly direct revenue away from the proposer as a result because they could just enter into some agreement with someone and then decide, oh, I actually didn't see all of those high bids. And it's also not at mev stealing proof, but we actually cut this version today, I think.
00:12:07.610 - 00:12:51.796, Speaker A: So Pob 1.0 is out. It's live. It's going to be integrated with Barachain and Osmosis in the next couple of months and then probably on many other Cosmos chains going forward. So this is going to be a replacement for a lot of the skip centralized block building in these blockchain ecosystems. And the nice thing about this is you may be thinking, okay, well, like in Ethereum, all these validators then are going to immediately go back to sealing mev. Cosmos Validators have a nice social contract with the chains that they operate on and we have done a lot of data analysis, including over the period of time where Terra was very active, looking for any evidence that even during those extremely lucrative times is there any misbehavior.
00:12:51.796 - 00:14:04.492, Speaker A: And we've really found very, very little. So we're not super worried about this being an intermediate solution and it's something that gets these chains started, but we want to make it better. So we are moving this auction that we run into consensus to give it censorship resistant properties using this vote extension stuff. So when I'm voting on a block now as a Validator, I'm going to look in my mempool and I'm going to see these auction transactions and I'm going to pick the one that has the max bid and I'm going to include this in my vote extension. And then what that means is when the proposing Validator is building their block now in the proposal, we can include each of those transactions and bundles and bids that came from the quorum of Validators that we know had to give this Validator these votes because we have gotten finalization on the previous block. And then in process proposal, we can guarantee, hey, the Validator actually ran the auction correctly. So we can't guarantee with respect to 100% of input bids, but with respect to two thirds plus one, we know that this auction is now revenue maximizing.
00:14:04.492 - 00:14:55.436, Speaker A: We know that we've done a pretty good job and we can't guarantee censorship resistance of a higher portion of these without affecting liveness of the chains. But that's something that chains can configure, so it still just works. But now you can actually direct revenue wherever you want and now it's also censorship resistant. So Validator tries to enter some kind of off chain agreement, say they'll take a lower bid from someone under the table that pays them more directly. Well, now we can actually catch that in consensus and prevent that block from ending up on the chain or punish the Validator after the fact if we wanted to. But right now it ties directly into liveness. So if the Validator tries to do this, we just skip them as the proposal, we move on to the next proposal.
00:14:55.436 - 00:16:00.388, Speaker A: It's an invalid proposal. So some problems with this still are that it's not mev stealing proof. So the Validator could alternatively look at whatever transaction, whatever bundle paid them the most and just copy those transactions, right? And then they have to bid higher so the chain still gets higher revenue. But now the searchers are having a shitty experience and potentially this is a centralizing force. It's also higher latency. So because the bids need to be in the available during the voting phase of the previous block, as a searcher, you're committing to your bid for a longer period of time, which if you're trying to do sextex ARB, is not an enjoyable thing. So what do we do? Well, for now, we ignore that latency problem and we just encrypt the bids and we have the chain run a DKG as a part of consensus as well.
00:16:00.388 - 00:16:47.312, Speaker A: So when we're doing vote extensions, we have visible bids. So each validator can still pick the highest one out of their local mem pool. But now they actually don't know what the transaction is, they don't know what the searchers bundle is. So the proposing validator can't do anything except for pick the highest one and just leave it there. And then during the voting phase on the block, each validator also contributes their decryption key shard for the key at that height. And then once we have two thirds plus one, we can decrypt the top transaction in the proposal and run the proposal as normal. So now we are mev stealing proof.
00:16:47.312 - 00:17:40.916, Speaker A: We're censorship resistant, we can direct revenue anywhere we want and it still just works, which is really nice. There are some other drawbacks for these chains, which is that running a DKG in consensus is kind of a pain in the ass, requires a lot of bandwidth, and it's higher latency. And potentially this is not revenue maximizing either, because we couldn't encrypt the actual bids. So we have a first price auction and people aren't biding honestly for us. So to give some sense of where we're at, the mempool auction is done. The consensus auction will be done in about a month and a half. And then the encrypted auction, we're going to be working with the Osmosis team to implement Furvio, which I think the Anoma folks are here today have developed, and that'll probably be available for Cosmos chains in four to six months.
00:17:40.916 - 00:18:43.400, Speaker A: So this is going to be the reality for appchain mev, which feels pretty good. It's not a full block building solution yet, so that's another problem with it. But it is a really strong starting point and I hope it demonstrates that there's a lot of interesting things you can do with mev when you have better control of your application from the consensus perspective and then beyond this, mostly in a design phase. But the thing we're increasingly looking at is trying to attach a very, very fast, very dumb side chain to each of these chains that the validator set runs, that can just run a very simple commit reveal scheme for this auction. It can finalize it more than twice the speed of any of these chains because, again, it has to do very, very little. And it doesn't even have to run the DKG. We can move the reveal step out of consensus and just move it on to the searchers being responsible for revealing their own bids.
00:18:43.400 - 00:19:25.670, Speaker A: This is nice because we can be very flexible with how we integrate it. So it can be a commitment that a proposer enters into themselves. It can be a commitment that the entire validator set of a chain enters into and that we require as a part of consensus. So there can be a liveness dependency or not aliveness dependency, and it's something that the chain can then add additional kinds of commitments to that they might want their validator set to agree to. It's like every chain having its own little very fast beacon chain. And what's nice about Tendermint and the Cosmo SDK is we can run this very easily as a sidecar process. This is probably where we're going.
00:19:25.670 - 00:20:22.200, Speaker A: This is nice because now we can actually run a second price auction. We can get honest bidding as well, so we have a lot of really nice properties. For mev, the drawbacks though are that this requires pretty deep integration to consensus. You only have a single chain's perspective. Now if each chain is running their own commitment chain for mev, and that's I think a good place to stop for future work. I think where we'd like to go is to see this kind of commitment surface area be available for chains enter into as a part of consensus or for individual validators trend to into on a per validator basis and to potentially link together these different side chains. So you can have a single chain where folks are able to make credible commitments to one another using commit reveal schemes.
00:20:22.200 - 00:21:26.376, Speaker A: I think the other thing that we'd like to do though, it's really not necessary for app chains and roll ups today, is to grow from this being a system that is mostly facilitating top of block bids and single bundles per block to something that can support whole blocks when it's required. Right now, the vast majority of mev on app chains is just captured with a single bundle. There's very, very little that slips through. But you can imagine in the future when these systems get more complex and we have more revenue moving through them, that will change. But like I said, I hope that this gives some alternative perspective to the flexibility that you have around mev when you can actually take more control of your stack. I think there's a researcher today who was giving a talk about Matthias, about how you can order transactions for a Dex that guarantees that you have minimized mev within some bound and can also verify it. So that's exactly the kind of thing that you can do when you have control of consensus.
00:21:26.376 - 00:21:48.930, Speaker A: You can actually say, okay, we're going to order transactions for our decks firstly, so we minimize mev and then for everything else. And so I think there's a big design space here that you can access around, just building mev aware blockchains as opposed to trying to attach mev awareness to protocols after the fact, which I think is pretty interesting. I will stop there.
