00:00:10.840 - 00:00:29.872, Speaker A: Hello. Right. Okay. So if you thought the last talk was too theoretical sorry. Although this one has less haskell, I promise. So it's a little bit more hopefully a little bit more intuitively, easy to grasp. Often I get questions like, well, in intense centric architectures, you still have mev.
00:00:29.872 - 00:01:06.412, Speaker A: Right. And my answer to those questions is unequivocally. Yes. So intense centric architectures do not magically solve any mev problems. In fact, what I'm going to be talking about in this talk is an Mev problem that I think we haven't even really considered yet, that basically everyone has and I think we probably should talk a little bit more about, which is why I'm bringing it up today. But yeah, I also just want to clarify know, Guillermo and Tarun and all of these brilliant mathematicians keep proving many things impossible and I am promising to do none of the impossible things, including the impossible things that were proved in the last two months of papers which I haven't read yet because I'm a little behind. Okay.
00:01:06.412 - 00:01:51.980, Speaker A: So I'm going to talk about the edge of mev, which is a sort of metaphor both in the kind of sense that it's like the edge of the current Mev research discourse, I think, and that there's an interesting graphical representation of the whole question, which I'll get to at the end. Particularly something which I think we should be thinking about related to switching costs and something I've taken to calling the slow game. So let me first kind of just situate this talk because I think it will be helpful. Thanks to particularly Nikheta and Chin from Flashbots for the conversations in the past few weeks. It's a speculative talk. It's like there are not mathematical proofs yet would be very interested in collaborating. If it's all wrong, then that would be an interesting impossibility result.
00:01:51.980 - 00:02:26.436, Speaker A: So at least there's like, something that you'll get out of it. Yeah. I have a confession to make which that I still don't know what Mev is. It seems to lack a certain conceptual unity and we keep discovering new things which seem related to mev. I mean, mev is like maybe first and foremost a community and a research discourse. And I guess in that spirit, I think the things that we've talked about under the name Mev can be to me can be kind of classed in four groups, perhaps not exclusively. And the one I'm going to talk about today is supply side price fixing.
00:02:26.436 - 00:02:37.756, Speaker A: And I'll explain why I call it that and what it means. But first, let me just talk about the things which I'm not going to talk about. Okay. One no one really oh, no, these slides are out of order. Okay. I wanted it to be reordered. This one's first.
00:02:37.756 - 00:03:17.332, Speaker A: Okay. No one really talked about too much about, like, cross domain a little bit from Skip, but I want to see the auction math. But no one talked too much about cross domain, maybe today. Yet cross domain stuff is hard because of heterogeneous security and heterogeneous clocks. Those both produce gray hairs and in their intersection they produce the square number of gray hairs. And I'm not talking about this in this talk next thing information flow, asymmetry most of what originally went under the term mev, I think is in this class. Basically this all stems from users somehow having less information at the time of intent creation or whatever they're signing.
00:03:17.332 - 00:04:32.924, Speaker A: Then operators and here I group validators and builders and searchers everyone into this other class of operators. Users have less information and maybe don't want to spend as much time doing compute when they send their intent when compared to when operators make ordering decisions or make block conclusion decisions or stuff like this. And so order flow, auctions, encrypted mempools, batch matching, commit, reveal schemes like blah blah blah basically all try to address this class of problems by changing the information flow or like adding an auction mechanism so that it's less bad. And most of the current sort of bad mev that we seem like we don't want falls into this class right then maybe the class of good mev is oh yeah, and I'm not talking about this. And maybe the class of good mev is where cases where like alluded to in, UM's, talk earlier, users really kind of want and zaki's users want to delegate the hard work of doing the computation, particularly the stuff that's in NP or even just like polytime and requires data or whatever to a third party. So metatransactions account abstraction, specified builder algorithms to some degree, I would say, or like fairness criteria fall into this class. And most of this we would consider good or sort of desirable MUV.
00:04:32.924 - 00:05:12.268, Speaker A: And I'm also not talking about this, okay? I am talking about supply side price fixing. And supply side price fixing is really quite simple and I think maybe it's so simple and has been kind of neglected so far because it doesn't seem like an interesting research question. But I think in some ways that it is. So supply side price fixing is merely that just a fact. Interdependent transactions, if we want them to touch parts of the shared state, parts of state which are shared and compose must be ordered in one logically central location. So not all transactions are interdependent, of course. Intense transactions here are pretty funtable as words.
00:05:12.268 - 00:05:51.492, Speaker A: But where they are interdependent, you have to order them in the same place. That location typically has an operator set. And the fundamental reason why it has an operator set is that we don't want to make a liveness assumption of users. So you can avoid, if you want there to be only one class of participant in the system. So like users equals operators, then the users need to be online. And typically the whole reason why we do this, like blockchains and cloud computing and blah blah, blah, is that people don't like being online all the time, right? So that's the basic reason. So we want to delegate Liveness, which requires delegating custody, delegating the ability to sign, to do something with our assets on our behalf, perhaps subject to some other requirements.
00:05:51.492 - 00:06:20.790, Speaker A: There's some operator set and that operator set fundamentally just by the very fact of delegating Liveness. That operator set chooses what to include. And as they choose what to include, they can always set a price. So you can try and create norms around what prices they set, but they're always going to have the ability to choose whether or not to include a particular intent or transaction or whatever. And they will always be able to accept side payment or in some other way set prices. Right. Okay, cool.
00:06:20.790 - 00:06:57.336, Speaker A: So in particular, I've chosen to use this term price fixing and price fixing. Maybe this is not the end all be all term, just like a candidate term. We could also choose other terms, but price fixing has a long standing background in at least like colloquial economic discourse. And that background implies a cartel. And this choice of wording is intentional because I think we should expect operators in general to form a cartel. And by cartel I'm not casting judgment, just saying that operators, it's very easy for operators to coordinate. We've built all these fancy BFT consensus mechanisms that literally make it easy for them to coordinate.
00:06:57.336 - 00:08:06.390, Speaker A: They know the public keys, they know the voting powers operators are going to coordinate, right? And also here I've been a little bit like hand wavy with the definitions, but mostly here when I say operator and throughout the remainder of the talk I mean validators and people who have custody of assets. So builders and searchers and all of these other parties have interesting relations to the information asymmetry kind of mev. But the supply side price fixing only has to do with whoever ultimately controls inclusion in a block, right? Or inclusion in the logically centralized ordering location that users want to coordinate on. And one, as far as I can see, this kind of I'll explain in a SEC how it might, you know, why it's sort of an Mev like problem, but just this very character of the system where operators for a particular ordering location can set a price is independent of all of the other kinds of mev. This is just like they're ordering things in a place and they accept some kind of payment for ordering there and they can choose what that payment is. So something like EIP 1559 is of course an algorithmic price setting tool. Like it's a way that operators coordinate to set a price.
00:08:06.390 - 00:08:34.920, Speaker A: But operators could always choose to accept some other kind of payment, right, or together add transactions or something to make the EIP 1559 P controller do whatever they want it to. Right? Okay, so why should you care? Maybe this sounds like dull, but I think it is not. So I mentioned a little bit already. But we should expect operators to coordinate. Operators can set prices for inclusion. Operators. We can expect to be rational.
00:08:34.920 - 00:09:12.090, Speaker A: Like they want to maximize their profit depending on what they expect to happen. Sometimes maybe it's a repeated game, sometimes it's the one shot game. But we should expect operators to be rational. And critically, operators have custody. As in if you want to delegate liveness, you have to in effect like if you issue a token, right, if you are circle or something, I think it makes this example very clear. You are the person who controls the redemption path of this token. You're bringing the value into the system but you are delegating custody typically to the ethereum blockchain or somewhere else so that you don't have to be live or involved in the block construction process or whatever.
00:09:12.090 - 00:10:13.884, Speaker A: And I think this is important because there are a lot of reasons to expect that users kind of need or want to agree on where they order things or where they order particular kinds of transactions. This agreement on one logical ordering location for interdependent transactions is what makes atomic composition possible, even if you have we also do like heterogeneous paxos and stuff and that helps a little bit fuzzing on the boundaries of heterogeneous security atomic composition. But you still need a lot of overlap and you still need to choose. Like even if you're doing some heterogeneous security composition you need to choose there's still a logical single location, right? You need to choose where that happens. And users must need to give up custody to avoid needing to be live. So suppose that users don't coordinate. Suppose that users just like send their transaction somewhere and don't talk to each other very much, right? And assume that there is some surplus from coordination as in the users benefit from using the system in the first place.
00:10:13.884 - 00:11:10.928, Speaker A: If they didn't benefit, they wouldn't be using it. Then I argue in a world where users don't coordinate, the operators can charge like almost as much as the surplus from coordination before it becomes individually rational for users to leave. This is basically like a coordination problem. Like I as a user, if I benefit from using the system and the operator charges me like $5 to send every transaction, not because it costs $5 to run the computers, but because they know that they can charge me $5 and I'll still send the transactions, then that's like the individually rational equilibrium, right? If the users don't coordinate, I think also this comes into play. So maybe like the nice easy setting is where there's a repeated game between the operators and the users and the operators want future revenue from future user transactions so they don't want to stiff the users too much because they might leave. But if operators expect users to leave, it changes the game theory. Then it's a one shot game.
00:11:10.928 - 00:12:02.908, Speaker A: So if I am the validator set of, let's just say, the Ethereum blockchain and I see everyone is taking their assets over to some roll ups or some other logical ordering locations, maybe they have decentralized sequencers, they have basically sovereign custody. And if I think that, well, maybe people will stop sending me transactions now, maybe it's not a repeated game anymore. Maybe the users are going to go somewhere else. But the users right now have their assets under my custody, then the rational action for me is to charge basically as much as the assets themselves are worth to allow the users to exit. Right? So the rational action for an operator is to see oh, this transaction is like sending this asset over this bridge. It's probably never going to come back. Maybe it's USCC and Circle already does the smart cross chain thing where they'll accept your asset on the other chain natively so it never needs to be sent back to say Ethereum anyways.
00:12:02.908 - 00:12:47.224, Speaker A: It's unfair to pick on Ethereum. It's just like the easy example. It doesn't apply uniquely to only Ethereum. So if I as an operator and I as a coordinated set of operators expect users to leave I should charge them as much as possible because this is the final round of the game, right? And as soon as they've left I'm never going to get any more revenue. So I should charge them as much as possible as soon as I see a bridge withdrawal transaction. And I think basically we don't see this yet but it seems to me that we should expect to. Yeah I think that also this category of mev is another strike in the coffin against the conceptual unity of mev as a concept because it is unrelated.
00:12:47.224 - 00:13:46.672, Speaker A: As in you can do all the cryptography you want. You can do like nice privacy preserving intent centric architectures. You can do suave, you can do tees, you can do order flow auctions and it does not help one wit with this problem. Maybe the only asterisk is that if users have sort of heterogeneous security preferences such they're willing to accept multiple ordering locations, then maybe you can do some coordination between the users in the counterparty discovery layer, in the intent layer. But that only helps with better balancing transactions across a set of different logically ordering different logical ordering locations. It doesn't help with a bridge withdrawal tax or just with the basic price fixing. Also one thing you might think is that oh, these systems might make it harder for operators to figure out what users are doing and I think to some extent that's true but operators can easily just test different fee levels and see what users are willing to pay.
00:13:46.672 - 00:15:03.480, Speaker A: Right? And still if users don't coordinate they will individually be willing to pay just under whatever the system usage of the system is worth to them in the first place. So I think one kind of danger in just the applied mev research discourse is that we want to be careful that we don't build systems that only solve the problems that we see right now because some of the problems won't happen until things are widely adopted. Like for example Ethereum Validators are like they're nice, they post pictures on Twitter of their validator setups. They go to conferences, they know you, they're your friend, they don't want to screw you too much. There are these sort of side social channels of interdependency and I'm not saying these are wrong, they're great. But if we look at sort of the real world outside the blockchain ecosystem, I mean, who extracts the typical Silicon Valley business model has not only ended up kind of exploiting switching costs it's often explicitly designed to maximize switching costs, right? And they are kind of analogous to the operators in this scenario. So I would expect that in the long run if operators see that people are leaving or something like that, they're going to have some pretty simple algorithms to recognize those kinds of transfers and charge hierarchies.
00:15:03.480 - 00:16:24.804, Speaker A: So then I propose that we need something and in fact in some sense we already have just not codified something called the slow game. And by the slow game I mean the coordination process amongst users to select perhaps plural but logical ordering locations as in however it is and you could do this in different ways but however it is that users agree on where they want to send interdependent intents and transactions which need to be ordered together. I think this includes splitting up non interdependent flows between operators so that you avoid high prices due to demand exceeding supply for one particular location if you didn't need interdependency. And I think it also includes I think users need the ability to make a credible commitment that they will switch away from it, that they will basically fork out extractive operators in a way that is sufficient to change the game theory. So this is maybe just a new word and I think the slow game is already happening. It's just happening socially as opposed to in a more algorithmic way by using particular applications on particular chains. That's a kind of affinity of certain kinds of intents or perhaps assets to certain logical ordering locations by moving to roll ups with lower know.
00:16:24.804 - 00:17:02.880, Speaker A: Luckily I think Ethereum Validators are not doing this kind of like exit tax price discrimination yet. So it's still pretty easy to move off the system. If you're complaining on Twitter that fees are too high and that you will leave. You are playing the slow game because you're making a little bit but not a coordinated threat, but like a little bit of a threat to the operator set that if they charge such a high tax or don't optimize. Kind of like the operator set charging a high tax versus not optimizing their software so they can process more transactions at some squint level. These are kind of the same thing. You're already playing the slow game.
00:17:02.880 - 00:17:29.704, Speaker A: But the way it is currently played the slow game is sort of messy. It's like social. It's subject to propaganda. It's not very efficient especially with all of these heterogeneous protocols, heterogeneous systems, websites. They're pretty high switching costs. So I have a modest proposal just what seems like to me an interesting avenue of research. Bonus points to anyone who knows where this screen cap is from.
00:17:29.704 - 00:17:56.716, Speaker A: But when faced with the coordination problem which you want to kind of ritualize, often a good solution is to craft perhaps both tech and culture for a protocol. So if we kind of reduce this problem to its essence here all we are talking about in terms of operators as I mentioned is custody. So operators custody assets, their signature is required. They can deny providing that signature. That's why they can extract in this way. Then we make a liveness assumption of them. Clearest example ethereum balance.
00:17:56.716 - 00:18:31.820, Speaker A: So what do we want in playing this low game? It seems to me like as users and I'm presuming that we are the users here designing for the users, you can also design for the operators. But usually the question is framed in this way. We as users want to delegate to operators. That's like why we're doing this in the first place. We don't want to be online all the time but we don't want the operators to charge too much in some hand wavy way that is hard to exactly quantify. But we want to set prices. And I think that if users coordinate, users have the ability to set prices because they bring value to the system by choosing to use it.
00:18:31.820 - 00:19:25.640, Speaker A: If we assume that mostly these distributed systems are used as accounting techniques to track things going on in the external world, users choose to create that correspondence between the external world and the accounting system by using it. So ultimately they have the negotiating leverage. Operators want their tokens in other words. And users want to negotiate. And I think users could do this by periodically demonstrating the credible ability to coordinate and potentially like agreeing on or negotiating prices to pay operators. And in particular I think in order to avoid this bridge exit tax problem users need to be able to make credible commitments so they will fork out any operators trying to extract value and exit. Great news is that we perhaps don't need to invent anything super complicated to solve this because we're already working on this research field that includes consensus protocols.
00:19:25.640 - 00:20:09.820, Speaker A: So what if we just run consensus but slowly? Slow gain consensus is the opposite thing that you typically think of when you think of fast blockchains. Mostly we work on making the blockchains faster. We work on optimizing transaction processing. We have, I don't know, solana validators who probably optimize their data center colocations. I'm just guessing here. Slow game consensus does not care about this. All we need to do is periodically demonstrate the ability to coordinate signal to other users to make it easier to coordinate on which operators will be used and credibly threaten when necessary to fork out operators who try to extract too much perhaps like setting price guidelines and stuff will just make things more efficient.
00:20:09.820 - 00:20:37.188, Speaker A: Yeah. So the slow game is slow. There are consensus protocols typically have at least n squared message latency running consensus amongst we're talking about millions of users, billions of users. That's not going to happen in 10 seconds. We're talking days. And we'll need a bunch of cryptographic techniques like BLS signature aggregation. We probably don't want a proposer, we just want to aggregate individual data but that's fine.
00:20:37.188 - 00:21:28.468, Speaker A: The slowdown can be slow, could be daily, monthly even less frequently users and operators typically typically apart from the kind of like exit case users and operators are in a repeated game operators want future revenue so all users need to do is condition that future revenue on them not setting prices too high. Then any operators who want to show up claim that revenue can do so. If the user set it too low. No operators will come. They can kind of iterate on negotiation until they get to a mutually agreeable level. I mean I think I don't discuss the kind of particular economics but I think the concept of a solver Dow or a builder Dow is sort of very relevant to this. Like if you expect operators to coordinate as a class and perhaps there's some composition subgroup coordination within there but that class and users as a class are going to end up negotiating in particular.
00:21:28.468 - 00:22:30.712, Speaker A: I also think it's helpful to have the ability to run this slow gain consensus on demand. So suppose that an operator suppose that like next week the ethereum validator set decides that oh shit, they're screwed. Everyone's going to move to the bridges and they're going to move to the roll ups and they're never going to come back and they decide to set all of your bridge withdrawal prices at 95% of the tokens. So if you want to withdraw to Arbitrum or optimism or ZkSync or some of the other roll ups they will say oh, like ERC 20 transfer you must give zero point 95 if you're transfer to me the validator and maybe it's like socially distributed amongst the validators. Right? And in order to deal with this, we need the ability to run this slow game on demand. Or at least we need to demonstrate that we could do so such that if Validators tried to do that, you can run the slow game and basically agree to basically what you would do is you would agree to copy the state of this particular location and change the operators so you would copy the entire state of the ethereum blockchain. That's the accounting history that you want to preserve who owns what tokens, stuff like this.
00:22:30.712 - 00:22:56.048, Speaker A: That's the valuable history embedded into the system. You would copy that to a location and set different operators. And because this is a coordination problem you need to do it atomically. So you need to run consensus amongst the users because you want to switch all of your you don't want two forked ethereums competing with each other. You want to just switch all the state atomically to a new location. Yeah. So I mean, in some sense this is nothing new.
00:22:56.048 - 00:23:36.724, Speaker A: We're already doing consensus. People are already like talking amongst themselves about where to send transactions but we don't have a protocol. And I think a protocol would make the threat more credible and provide kind of a periodic test that we actually have sovereign networking infrastructure and the ability to fork out operators if they are too extractive. And luckily it's like maybe not even that hard because we're just running consensus with a lot of people. So I promised I would get back to this part at the end of the talks. The edge of Mev okay, I haven't fully figured out the best graphical representation. This one obviously is a little bit ad hoc.
00:23:36.724 - 00:24:19.230, Speaker A: But I think one way of thinking about things is that users are the large. If they are not coordinating they're disconnected dots. But if they're coordinating they're a circle. Users are the large circle at the edge of the system and they interface between the system and the outside world and they ultimately control. If they coordinate, they control the constraints over what can happen inside the system. Right now if users don't coordinate the mev gets kind of sucked into the center, right? The center are the red operators like small group coordinated. But if users coordinate the center is paid some amount that is negotiated but effectively fixed by the users and everything just keeps going.
00:24:19.230 - 00:25:28.012, Speaker A: One question which needs more mathematical formalization that I've not provided is what does the end state equilibrium of this system look like? And I think there are a lot of complexity, dimensions of complexity and sort of multivariable preference optimization that I've completely and criminally glossed over. And they're not trivial such as locality, physical locality, low latency trust. Users might just trust completely different groups of operators for other reasons or privacy reasons. But in general I think we want to and kind of should aim to move towards a system where users coordinate and in their coordination they set or perhaps with several rounds of negotiation a fixed margin for operators and users here we're assuming have multiple variables that they care about. So they might not want like race to the bottom margin competition for certain reasons. In particular, users might want resilience of operator sets. And if you put everyone in race to the bottom margin competition to some extent you're going to select against resilience.
00:25:28.012 - 00:26:23.360, Speaker A: So users may want to include more variables in how they select operators, basically. But still, I think you would probably expect that prices will go down slowly over time as compute gets cheaper, as the protocols become more standardized, as the system just becomes more streamlined. And it seems to me like if you can reach this equilibrium, everyone is roughly happy. Some operators are paid some constant cost. It's like a multiple of their hardware costs, networking costs, bandwidth costs. Users still have control over the system and no more than some finite amount of mev, quote unquote, in this sense, is extracted by the operator class. But I think if we don't have this credible coordination game, even if we solve all the other mev problems, it's going to be a big deal, especially once operators realize that to some extent people are paying them because they're assets for custody, not because they explicitly trust the ethereum validators hat.
00:26:23.360 - 00:26:53.624, Speaker A: And the sort of as protocol standardized. The market for operators just by default becomes more competitive. So one area of collaboration that we're interested in is like reasoning about this in some more formal ways than I did in this talk. Three takeaways. If you only remember three things, remember these three things. One mev is more than information asymmetry order flow, compute, delegation, or even cross domain concerns. Part of mev is just fundamentally about delegation of custody.
00:26:53.624 - 00:27:32.920, Speaker A: And it will happen if users or there is the potential for extraction if users don't coordinate. We haven't seen this part of mev yet in the world, but I think that we probably will. And it's a very dangerous kind because you usually don't see it before a system becomes extremely embedded. But once a system is extremely embedded, it's like where the extraction happens and if the switching costs are too high and users don't know. We see this with the real world where Google has physical fiber lines. I don't know if your adversary ends up controlling the physical network infrastructure you're sol, that's the end. So you want to design against this before it happens by accident.
00:27:32.920 - 00:27:58.070, Speaker A: Users takeaway two. Users decide what is valuable, and ultimately they have the winning position in this game. But in order to prevent the operators to whom they delegate custody and agency from extracting that value, users must coordinate. And coordination requires consensus, social or otherwise. Slow game consensus doesn't need to be fast, it just needs to be credible. And a credible commitment, I think, is enough to change the equilibrium. Thanks.
00:27:58.070 - 00:27:59.170, Speaker A: That's it.
