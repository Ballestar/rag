00:00:09.810 - 00:01:11.500, Speaker A: Hey, I'm Zucky, and this is basically an intense talk and maybe a dumbed down version of, uma's, talk, but that's sort of I've been trying to figure out. So, I mean, who am I've been doing blockchain protocols and cryptography since 2014. I've been interested in consensus protocols, interop smart contract VMs application, specific blockchains, mev and DFI. I built an end user protocol application, a DFI protocol sommelier. It's a digital asset manager. One of the things it does right now is it generates the best e denominated yield using Cosmos tech. The reason I bring this up is I'm somewhat unusual and someone who's built, like, a bunch of core protocol stuff and end user applications, but I've been doing this for ten years, and every time I want to use the systems that I've been building for the last ten years, it takes an hour.
00:01:11.500 - 00:02:11.870, Speaker A: And when I started this and I wanted to use Bitcoin, it took an hour. And in many ways, the systems are now much more expressive, but it still really sucks. And when we've been building sommelier and looking at end user applications, users are constantly frustrated and placed in situations where they don't really understand what's going on, and they are exploited by more sophisticated actors on chain. So the common wisdom is that if we had better account abstraction, better key management, better wallets, we will be liberated from this bad place. And so in Cosmos, we built account extraction two years ago, some form of account extraction two years ago. Key management still sucks, and there are lots of companies out there that are trying to make it better. And wallets are really hard.
00:02:11.870 - 00:03:24.226, Speaker A: And we keep hoping that a better wallet will liberate us from this, but it's not going to fix this problem, which is debugging a failed transaction is terrible, right? Like, no user can make sense of ether scan error message of what's going on. When I make routing mistakes and I built all of this, I still get money stuck in the wrong chain. And it takes, like, 20 minutes to unwind the Bridging sequence that I strung across, like, three Bridging protocols to get where I was trying to go. And the control flow problems and the exception handling problems of all of the ways in which we use blockchain are just a nightmare for the most sophisticated people at this. And I don't think this is solvable within the paradigm of what we've been doing for the last ten years. So this is not the way. What I'm imagining is what we're doing right now is we're specifying execution paths across protocols with heterogeneous infrastructure.
00:03:24.226 - 00:04:42.480, Speaker A: And you need the context of, like, an economic actor. You need the context of being a power user, of understanding, of being able to look at different prices on different markets, understanding market depth, understanding. There's just, like, a huge amount of domain expertise that is required to actually say, I'm going to turn the wheel to execute a transaction. And what we've been basically doing with the way we've been architecting the end user facing side of blockchains is we've been expecting our user base to be able to be, to work in the same ways as whales and market makers do when they function. We don't have enough information and they don't have enough context to do that. So what I've observed and the reason I've been running around pilling people on the intense discourse is because the best teams are doing something different. So what I would observe is if you want to see probably the closest glimpse I've seen of all the protocols out there of what I think the future looks like, use one inch fusion, like install a VPN, use one inch fusion, it's worth it.
00:04:42.480 - 00:05:30.426, Speaker A: What is one inch fusion? Basically you sign a statement that gives the one inch smart contracts the ability to take funds out of custody, out of your custody smart contracts and then says here are a set of constraints on a trade. And then it just goes out and tries to find something, some solver who will solve it. Calswap similar. It's essentially like a primitive intent system. Anoma we all stand on the shoulders of Chris Gohs and Chris was telling me about intense three years ago. I had no idea what he was talking about. Here I am now, shilling It and mev.
00:05:30.426 - 00:06:24.190, Speaker A: Share is another really good example of an intense system in production. So I think it's relatively clear where the future is going. We have these examples of real systems that you can actually use today and play with and they're so much better. It is so much better to use one inch fusion. You don't pay gas fees, you don't think about slippage, you don't do any of this nonsense that you deal when you interact with uniswap directly. And it totally makes sense for something like sommelier, like a sommelier strategist a market maker to actually deal with one inch directly. I'm not saying that no one is going to use blockchains, I'm just saying that the kinds of users who successfully use blockchains today are probably the kinds of users who are going to successfully use blockchains in the future.
00:06:24.190 - 00:07:15.550, Speaker A: And the solution is to build an abstraction that is not sign a transaction on a chain. So yeah, these are the common elements of what I think is the future. So users, we still have to stay in a world of not your keys, not your crypto. If we don't have self custody, we have nothing. So CDFI is obviously a disaster and is the thing to avoid. People need to be able to sign over a set of constraints that describe their goals and then all of the things that are a nightmare need to be handled by off chain actors because trying to embed control flow and exception handling into our smart contracts and into our protocols is probably, if not difficult, if not impossible. It's super difficult.
00:07:15.550 - 00:08:18.500, Speaker A: You're going to end up in a situation where it's like the user wants to do. I want $100 of Pepe and then like 10,000 lines of exception handling code. This is not a viable way of working at least and evolving things on chain. So mostly by moving away from the current notion of transactions, we actually potentially can solve all of these things that seem unsolvable within the current paradigm, which is, how do you actually share profits from mev? How do users actually benefit from the mev that their order flow generates? Routing is super hard, like which decks should use. No one can make any sense of this. There are probably new ways of doing transaction privacy in this sort of non transaction world. I know the Enoma team has thought a lot about it, and IBC is amazing from a security and trust point of view, but it sucks to use.
00:08:18.500 - 00:09:10.240, Speaker A: And really what you want is basically to say, I want this asset on this chain, or I want to be staked on this chain, and here's some money. These are the things that you would just want to be able to declaratively, say, and we have the underlying technology to provide low trust settlement of all of this because of all the bridge and interop work. But what we don't have is a way of saying these things in a sort of general way. So, to conclude, my statement is transactions are not going to make it and we should give up. We should basically give up trying to build, like, transaction systems, and we should try and build a new abstraction for end users. Otherwise we will just repeat the sins of the last wave of mass adoption in the next Bull Run. So thank you very much.
00:09:10.240 - 00:09:15.220, Speaker A: Thank you.
