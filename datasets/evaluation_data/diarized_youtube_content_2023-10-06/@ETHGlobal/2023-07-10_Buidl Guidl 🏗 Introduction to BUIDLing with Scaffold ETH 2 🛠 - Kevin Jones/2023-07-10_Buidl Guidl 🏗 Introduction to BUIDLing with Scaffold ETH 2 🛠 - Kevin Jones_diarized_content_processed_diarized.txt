00:00:07.290 - 00:00:39.510, Speaker A: All right, we're going to get started right on time because we're going to get through a lot of cool stuff today, guys, thank you so much for coming. My name is Kevin Jones. I'm a developer relations engineer working for Edge and Node, working on the graph, and I'm also a advocate for Scaffold ETH, part of the Build Guild or the Biddle giddle. As you might have heard. Today I'm going to be talking about scaffold etho. It's basically this kind of awesome toolkit that kind of gets you up and started quickly for building DApps. So it's really, really useful for hackathons because it is just a really good starting point.
00:00:39.510 - 00:00:57.440, Speaker A: This is all my contact info. Feel free to connect with me on whatever you prefer. I'm on Twitter, Telegram. I'll be here around too as well. I'll be at the graph booth. So if you guys have questions about the graph or about Scaffold ETH after this, be happy to help you guys out. So please connect with me.
00:00:57.440 - 00:01:20.210, Speaker A: I don't have any slides. We're going to pretty much do like real time demo here. But first I kind of want to talk about Scaffold ETH. There's two versions of Scaffold ETH. I'm going to be mainly focusing today on Scaffold E Two, which is the newest flavor of Scaffold ETH. There was a lot of cool improvements that have been made to the project. And more specifically, it comes with Next JS.
00:01:20.210 - 00:01:41.994, Speaker A: It kind of revolves around TypeScript. It also uses rainbow kit and wagme. And it also uses hard hat. We're in the process of making a cool build that actually might support Foundry as well. But for everyone here, this is kind of what you get with it. It's a GitHub repository. So if you just search Scaffold Two, it's going to show up as the first kind of thing.
00:01:41.994 - 00:02:11.714, Speaker A: You can come in here, you can template this and kind of copy it over to your own GitHub. That's usually what I recommend. And then you can kind of use that as kind of like your project for the hackathon. So we're just going to kind of get started. So I'm using tmux, which is just like a terminal multiplexer. It kind of always has the ability to have multiple windows in one kind of console, but you could just use multiple windows. You kind of always need three windows with Scaffold because you have your back end, which is running hardhat.
00:02:11.714 - 00:02:51.906, Speaker A: Then you have your front end which is running NextJS React, and then you have this kind of like third window where you're doing your deploys and kind of pushing your changes, right? So I've gone ahead and just checked out the repository already ahead of time. And I've also gone ahead and did a yarn install. So you do yarn install. It's going to basically install all of the dependencies for you and get you up and running. Once you're ready to go, you just do yarn chain so Yarn Chain is going to spin up again a copy of Hard Hat. It's going to give you these kind of like hard Hat accounts that are available for you to toy around with and start messing around with the EVM and start testing your smart contract. And then in the second window, we're going to run our front end so Yarn Start.
00:02:51.906 - 00:03:10.450, Speaker A: Okay, so Yarn Start is going to do exactly that. It's going to start up next JS on Localhost 3000. We'll open that up in a second real fast. Huge improvement over Scaffold ETH. One which use just straight react. Next JS is just really fast and awesome. And then same thing in this third window we're going to use for all of our deployments.
00:03:10.450 - 00:03:41.874, Speaker A: Okay, so we're going to do a yarn deploy. Now what that's going to do is actually Scaffold comes with a smart contract so we can see that our contract got deployed. We did a transaction, we created our contract and it tells us how much gas we use because we're console logging that stuff into Hard Hat, which is really cool. And we also see that Scaffold or Hard Hat mined that block, right? And then we see like, yeah, we can optimize our contract based on gas because we know that's there we see our contract address. Let's take a look. First of all, I'll bring up Vs code. We'll get to that in a second.
00:03:41.874 - 00:04:02.694, Speaker A: But let's go ahead and load up the application. So we're going to use see where's it at. Scaffold ETH. Here we go. So scaffold ETH is like I said it's. Next JS So this is kind of what you get when you launch Scaffold ETH. And one of the things you'll notice is that we got this kind of wallet that's automatically integrated.
00:04:02.694 - 00:04:19.946, Speaker A: So Scaffold ETH has this concept of burner wallets. So you don't necessarily have to use MetaMask. You can just use the burner wallet. It's ready to go. And we have this kind of identity that we can start testing with. So I can grab some funds from the faucet by just clicking that. That sends some funds from Hard Hat into my burner wallet and I'm ready to start interacting with my contract.
00:04:19.946 - 00:04:50.066, Speaker A: So where's my contract? Well, it injects, it automatically here into debug contracts. So it basically takes the Abi for the smart contract, which is kind of like the interface, right, that tells your smart contract and your front end how to talk to each other. And it creates and populates all these fields for you. So you can start doing testing against your kind of functions and you instantly get an output on your variables, right? So you see like, all right, cool. We have a greeting variable, looks like a string. We have an owner variable, which is an address. We have a boolean that's set to false.
00:04:50.066 - 00:05:10.254, Speaker A: And then we have like a counter. And then we have these reads functions as well, we also see our contract address here. We see if it has any funds. We see what network we're on and we can come in here and say like, all right, well, let's change the greeting. So we have this Rake contract. So we can tell right now there's a set greeting function in our smart contract and I can change it to whatever. So FUBAR and hit send.
00:05:10.254 - 00:05:37.138, Speaker A: And now I've updated the state of the contract. So we have this kind of like it's a Hello World contract, really basic. Let's take a look at what it looks like. So let's go ahead and load up the directory for Scaffold ETH. Mainly, the beauty of Scaffold is everything revolves around yarn. So there's like a package JSON file that has these kind of commands for you to just navigate and do stuff in Scaffold ETH. But more importantly, there's the two packages.
00:05:37.138 - 00:06:00.158, Speaker A: It's a mono repo. So you have a Hard Hat repo and you have a NextJS repo. So we can go right into Hard Hat and we can go into our contracts and go into the Year contract, and then we can see our contract. So this is kind of, like I said, the Hello, World contract and we can kind of start hacking away our contract. So I just kind of want to show you guys how this works. So we see here that we have this owner variable. Let's go ahead and dump that.
00:06:00.158 - 00:06:29.570, Speaker A: I always like to kind of gut the contract. Let's also get rid of the constructor because we're going to make like an empty constructor and we're also going to get rid of this modifier. And let's just say you made all these changes, right? We're also going to get rid of this withdraw function and we're going to save that. And then we could try to do a deploy now. Now, if we wanted to, we could do a yarn deploy. If it sense changes in the contract, it would give you a new contract. But we're getting an error.
00:06:29.570 - 00:07:03.854, Speaker A: And the reason why I want to highlight this is we had this constructor and we were passing some arguments in it. And because Scaffold ETH uses Hard Hat, we also need to fix the deploy script. So if you take out this constructor, which I did, I kind of ripped out the contents of it, made it empty. We also got to go into the deploy script and look at the actual deployment. So if you're not familiar with Hard Hat, it's a JavaScript. Basically it uses Ethers to deploy our contract. And we'll see here that we're getting a copy of our contract, or we're actually deploying our contract here, which is called your contract.
00:07:03.854 - 00:07:39.854, Speaker A: And we're using some arguments that we're passing into the constructor. So it's basically complaining about that. So I'm just going to wipe that out because we were using the deployer count to set a variable in the constructor. So I'm just going to save that and kind of redeploy again. So if you ever want to force now it was successful, if you ever want to force your contract to deploy as well, if you do a yarn deploy again, it's going to see that, well, you don't need to actually redeploy the contract because it's the same. But you can also force a contract by doing yarn deploy reset and it will basically force a new contract to be deployed. Okay, so let's take a look now.
00:07:39.854 - 00:08:33.114, Speaker A: So now our UI is automatically changed, right? We've gotten rid of this owner variable, we've gotten rid of the withdraw function and now we're kind of in this new state where we can start kind of like building out whatever we want, right? So we could see what that might kind of look like. So let's close the deployer script because we're not going to mean to really mess with that at all. But we could actually, instead of using earlier we had this modifier and we had this concept of access control. That's one of the things you learn when you're building on Ethereum. You need to have some kind of access control for certain functions. Well, you can just actually import the existing ownable smart contract, which is an Open Zeppelin contract, just by importing it like this. And then we can take our contract and then inherit that, right? So we import onable which is just this Open Zeppelin contract.
00:08:33.114 - 00:09:38.818, Speaker A: If you're not familiar with Open Zeppelin, it's kind of like a collection of contracts that are for different use cases and they're kind of like vetted and widely adopted and then we can just import that and use it here or sorry, inherit that as here and then save that. So when we make those couple changes again, we're going to do our change and then deploy a change and see if it goes through which it was successful. And then you're kind of in this feedback loop with Scaffolds, you're editing your front end with your editor, you're deploying your changes using hard hat and using the yarn command and then you're coming in here to the UI and reflecting and seeing your changes. And so you can start to do interesting things like maybe we want to see now that we have access to the ownable, we also have this transfer ownership function. So we might be able to call that in our deploy script. Like let's say if we want to transfer ownership to another address or we want to renounce ownership of the contract, we can call the renounce ownership which allows you to throw away the contract. So you can kind of use composable contracts that are already available from Open Zeppelin to kind of start your project.
00:09:38.818 - 00:10:13.546, Speaker A: So if you're going to use ERC 20 Token or create an ERC 20 Token, then you can get the Open Zeppelin one. Or if you're going to do an NFT, you can get 721 or import those and they'll just show up here in Scaffold E. And then we have this example UI, which is pretty cool. It just gives you some examples. Like, one thing I always hear hear from developers is like, all right, I'm really good at writing Smart Contracts, but I don't know the front end components. So we're going to dive a little bit into that and show you kind of what that looks like. But there's a lot of components that are already written for you that make it easy to build your DAP.
00:10:13.546 - 00:10:52.446, Speaker A: And this is just a really good example of like, all right, well, we have this kind of window. We have this greeting option. We can actually say hello, world, here like this and hit send. And it will update that by sending some transaction. And then what we'll notice here is our counter increased, right? We get our new state kind of coming over there. And then if we go back to Debug Contracts, we can see that now we've been able to actually send some ETH into the contract because this example UI, not only does it allow us to change the state, but it also has a value that it attaches to it, right? So we're actually sending in some value. We're paying for the gas, and we're kind of creating this interesting function.
00:10:52.446 - 00:11:47.166, Speaker A: It's not that interesting, but it's cool just to kind of see how it works. And so let's dive a little bit more into the code of Scaffold ETH's front end. So again, if you're editing your contract, it's in your hard hat contracts, your contract, you can kind of come in here and do whatever you want. If you're new to building on Solidity, what I always tell people do is go to Solidity by Example. Solidity by Example is just a really cool place to get examples. So an example would be you want to get like a mapping, right? You can come in here, grab the mapping, paste it into your Smart contract right here, right? Copyright tab, boom. Save it, deploy like and then we'll see that we got a new copy of our contract, and then we'll see that we have this new mapping available in our front end, right? Here it is.
00:11:47.166 - 00:12:24.566, Speaker A: It's a my map. And then we can check this balance or something like that, like grab this and see if there's some kind of map to a value. There's none, but maybe you do that in the constructor, right? Maybe at the time you deploy something, you set a value. So you can start doing interesting things just by grabbing examples from Solidity by Example and kind of pasting those in your contract. Okay? So solidity by example is great. Let's go a little bit more into the UI. So like I said, the magic to Scaffold ETH is it builds that Debug Contract tab for you, which allows you to kind of get up and running start doing some testing.
00:12:24.566 - 00:13:17.946, Speaker A: You can also do something like this where you say like, all right, new incognito window, go to localhost 3000 and then you get this new identity. So you not only do you have this kind of like burner wallet here, but you also get access to burner wallet here and you can start kind of testing different personas that are using your DAP. So that's really useful because the burner wallet is actually stored inside of the browser session. So if I was to come here and close this again and then also open up another incognito window, we would get this kind of new identity and a new burner wallet, right? So you can really kind of toy around with like access control or whatever kind of functions that you want with another identity. Okay, so let's look at the front end. So next, JS is awesome if you're just good with Solidity. And it can be kind of a little bit challenging when you start writing your front end.
00:13:17.946 - 00:13:57.282, Speaker A: But the cool thing is under pages we have this kind of example UI, which references the components example UI. And then we have this contract data which allows us to get all of the contract data from our smart contracts. And there's kind of some examples in there and then also like a contract interaction as well, which shows you how to do like use Scaffold ETH Write, which is like a hook that you can use. And so you can come in here and kind of use this. You can see with Scaffold ETH we have these hooks, so we have one for using this contract, reading the contract, subscribing to events or seeing the event history. So there's all this kind of interesting stuff. And then again we use Wagme.
00:13:57.282 - 00:14:36.018, Speaker A: So let's kind of start hacking away at a front end so you can kind of see what we would do. So what I always tell people is if you're building an app, use the index TS file, which is this kind of like a home thing which originally just set up to kind of show you where you should go to do stuff. Oh, also real quick, there's a Block Explorer, which is really interesting. It's new, but it also shows you all your transaction history, which is really cool. You can see what you called, what function was called. It's just kind of interesting to see the history of that. But yeah, so if you want to edit this thing, this is index TS, right? So we can come in here and we can just kind of wipe out some of this stuff.
00:14:36.018 - 00:15:19.902, Speaker A: So let's get rid of this and save that. So if we save it, we get this kind of like clean slate. So you could kind of think of it like you're building your DAP inside of this home folder and it's going to be available inside the middle section, but you still get access to all everything, the trap ground, scaffold ETH. Okay, so let's just say that we want to do something like this. We could say like, I don't know, we'll do const and then we say like, all right, address. We want to get the address of the smart contract from Wagme. So we can use sorry, not from use account, right? And my IDE basically automatically imported Wagme for me here, so I'd have that enabled.
00:15:19.902 - 00:15:51.030, Speaker A: So we can see that we have use account access and then we're able to access that. And so one example would be like, let's use one of the components that comes with Scaffold is called address. So we can say address. We say address equals address like this and then close it off and save that. And what did I do? Address equal oh, I need to import that. Yeah. So let's see, we can go from poets example UI.
00:15:51.030 - 00:16:08.234, Speaker A: Think it's under user retype black. Say that again. Oh yeah, maybe it'll pop up. Yeah. On where. Yeah. Retype to last.
00:16:08.234 - 00:16:24.194, Speaker A: But has. Oh, here. There we go. Thank you. I'm still learning like Vs code. I mean, I'm like a terminal kind of guy, so I'm using Vim. So this is all new for me.
00:16:24.194 - 00:16:47.880, Speaker A: Okay, so that's just example. So here we can see we got access to the count, which is like just a component, right? And so we can get that. We can also do something like grab the balance. So we can say like, all right, well, const, let's grab the balance. And by the way, I'm not a front end guy either. I'm still like pretty much green. So we can say use account balance, right? It's going to also import that for us.
00:16:47.880 - 00:17:04.780, Speaker A: And then we can also create another one. So let's be slow here and see if it actually takes it. There we go. Did it. And the same thing. We can pass the address in here. Boom.
00:17:04.780 - 00:17:37.796, Speaker A: Still learning this AI stuff too. Like I have this autocompletion. Didn't I spell that? Didn't close it right? But you get the idea. So there's some components are available. So now we have the address here and then we can also get access to the balance, right? So there's all these interesting components in there. I'm not going to get too far into it because it takes a while to build out a full UI, but I would say go into the examples here, into the contract data, contract interactions, and then you can start kind of doing some stuff. But I also want to showcase one other thing.
00:17:37.796 - 00:18:26.548, Speaker A: So as you guys know, I also work for Edge and Node, working on the graph. And so I wrote this blog post, which is also quite interesting because there is a bounty available for the graph. And so if you want to use Scaffoldeth and you also are interested in using the graph, the graph is kind of like this API layer. I wrote a good blog post that walks you through how to set up Scaffold ETH. And there's a special package of Scaffold ETH, or I should say a special branch called Subgraph Package for Scaffold Two. And inside of here, there's a complete dockerized version of the graph that you can set up. And so my blog post actually walks through basically all the stuff with Scaffold that I went through, at least the basics of deploying your contract, making some changes, but it also goes into how you actually spin up the graph and how you create a subgraph using the command line stuff.
00:18:26.548 - 00:18:53.310, Speaker A: Again, there's also these yarn commands written for you. So make it really easy that you can generate a subgraph based on your smart contract. So if you write your smart contract, all you got to do is just run these yarn commands and it will generate all the subgraph information for you. And then you can publish that to docker. So the one caveat to this solution is it runs in docker. So if you want to use Scaffold ETH and you want to run it locally, this is a really cool way to do that. And then you don't have to deal with the Internet connection if there's any issues.
00:18:53.310 - 00:19:24.388, Speaker A: But you can also take your subgraph at some point. Oh, that's what I want to show you guys next. So let's say that you want to deploy this to a testnet, right? Everything we've been doing kind of is local. The next thing you might want to do and which time do I have? I got ten minutes. The next thing you might want to do is actually do a yarn generate and actually generate a deployer account. So you don't want to use Hard Hat accounts to deploy your smart contract because everyone has the private key, right? So you need to generate a new private key. So we store that in an environment file locally.
00:19:24.388 - 00:20:23.996, Speaker A: And then you can just do a yarn account and you can fund this account so you get access to the address and you can just fund it. Like you could just go on your phone. Like if I pulled this up right now, I could send some testnet ETH there and then you can do a yarn deploy like this network and Sepolia or go airli or whatever testnet you want, right? So that's really useful because you can use Hardad as that catalyst just to push your contract to a testnet. And then you could use, if you stop by the graph booth, there's a sheet that walks you through how to deploy a subgraph using the CLI and you can deploy it to a testnet as well. So there's this kind of like seamless and options for you on how you deploy your smart contract. And then on top of that, you can come into the front end. And if we go to the next JS directory and we go to this Scaffold config there's a target network key or setting so I could change this to whatever I want.
00:20:23.996 - 00:21:15.320, Speaker A: So if I want to switch this to Sepholia like this, hit save and then go to my UI again, it's going to tell me that, well, first of all, it's going to get rid of my burner wallet because we don't have access to the burner wallet anymore. So then we're going to say after I actually connect to MetaMask, so we have that option and we can see now that I have my MetaMask connected, I got ten Sepolia ETH and now my DAP is hooked to spoil. Right? So it's that easy. You just deploy your contract to the testnet using the deployer account, update your UI, then you can take your application, your front end, and you can do a yarn Versaille, yolo, like that. And basically it'll take your thing. And if I did it right now, it would say like, all right, well, you need to authenticate. Oh, I already did it earlier.
00:21:15.320 - 00:22:15.588, Speaker A: So then it's taking my contact, uploading it to Versaille, and then I have my front end available so that my team can start interacting with it. Right, so it's this kind of full seamless solution where you Scaffold ETH to kind of do everything. So what else can I show you guys? Okay, so one thing I would say too, is I don't know if you guys are familiar with Speedrun Ethereum, so this Shameless plug, but Speedrun Ethereum is an awesome way. Like after the hackathon, if you kind of want to get more involved in the Ethereum community and the building community, speedrun Ethereum is this kind of like set of challenges where you can go through and do different projects and deploy different things. The first one is like an NFT. Then you create a Staking app and then you create a token vendor and then eventually you actually get invited to the Build Guild which the Build Guild is kind of this collection of developers or group of developers community that are all kind of working with scaffold ETH and helping the community grow forward. And so far there's about 770 builders.
00:22:15.588 - 00:22:56.320, Speaker A: There's been 784 builds of Scaffold ETH one and Scaffold e two. And then on top of that, we have certain developers that want to be really involved in the community. And you can actually get a stream and you can actually be funded as a developer to create and use Scaffold ETH or promote Scaffold ETH or build on top of Scaffold ETH and help the ecosystem. So that's a really cool thing. I also have a PO op, so I would love for you guys to get my Poop after this. Yeah, so I think right now, I think maybe we can open it up for questions and see if anyone has questions about scaffoldeth or anything that I showed. Got to be at least one question.
00:22:56.320 - 00:23:31.438, Speaker A: Yeah. So we are working on the core developers of Scaffold Two are working on a kind of a cool choose your own adventure style thing where you might check out the repository and say, oh, I want to actually use Foundry, or I want to use, I don't know, whatever different component. Right. So we're looking to do more stuff like that and that's in the works. So that'll be coming soon. Oh, I didn't really actually tell Test show as well. There are yarn tests, so we use hard hat.
00:23:31.438 - 00:24:05.118, Speaker A: So there's some yarn tests that you can do. At least there was. Maybe they got rid of them actually. So maybe that's part of the plan is we're going to use Foundry tests or something like that. Yeah, I think that's a great question. So the question was about the branch being behind on the main branch. Yeah, that's something probably I need to work on merge it all up.
00:24:05.118 - 00:24:23.860, Speaker A: But I haven't gotten a chance to do it. I didn't actually write that branch. Simone from Edge and Node wrote it, which is super awesome. But yeah, it's okay to use it. It's missing the Block Explorer and I can't think of anything else that's really drastically changed. Everything else is very close in commits. It's not that far.
00:24:23.860 - 00:25:22.306, Speaker A: Yeah, so yeah, the question is we utilize an older style of deploying next JS app and create next JS app. I don't think there's an option that I know of to change that. That would be something that we would look to the community for people that want to be involved. Maybe that's something, you know, be part of the Build Guild and help with something like that. But I can't think of anything that you can do right now. Maybe in the future we'll switch everything over. Scaffold Two is kind of in a really fast prototyping mode right now.
00:25:22.306 - 00:25:52.466, Speaker A: There's a lot of developers working on it, so they're doing a lot of feature stuff, but maybe that's something that's coming that I just don't know about. Another question. Do people in Build Good do client projects, like work for clients? Yeah, absolutely. Yeah. So if there's certain projects that you need help know, we can work with you on that kind of stuff. Just come find me afterwards and I can get you in touch with someone that can help you with that. Thank you.
00:25:52.466 - 00:26:42.036, Speaker A: I thought it's another question. Yeah, I love it. Thank you. That's awesome. Mina. Cool. Yeah.
00:26:42.036 - 00:27:02.890, Speaker A: And it's also worth noting that Speedrun Ethereum right now, all the challenges are actually written with Scaffold E One, so you might notice there are some differences if you're going through like what I did. But the good thing is there's like tons of videos online for just Scaffolding version One that will walk you through that stuff. Awesome. Any other questions? No. Thank you guys so much for coming. I appreciate it.
