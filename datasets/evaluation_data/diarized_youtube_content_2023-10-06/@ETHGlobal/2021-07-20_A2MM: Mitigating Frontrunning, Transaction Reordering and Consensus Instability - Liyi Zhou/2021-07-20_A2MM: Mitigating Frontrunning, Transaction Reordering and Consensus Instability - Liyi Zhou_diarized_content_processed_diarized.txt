00:00:00.410 - 00:00:45.100, Speaker A: All right, so thanks for the introduction, Tina. So today we are going to talk about a two Mm, which is an application layer solution we propose to mitigate mev. This is a joint work with Kaifua and Arthur. So to start, I want to discuss why maximizing mev, even in a decentralized way, might be problematic sometimes. So let's consider a simple scenario where we have two miners. One is honest and the other one is malicious. So both of the miners are trying to append to block B one, and they both observe some mev opportunity on the network layer and they are trying to extract them.
00:00:45.100 - 00:01:35.770, Speaker A: So let's assume that the honest miner succeeds in mining the mev opportunity. Once the malicious miner receives block B two from the network layer, it will need to decide whether to forfeit the mev opportunity or not. So there are two cases. In the first case, the malicious minor forfeits the mev opportunity. So it jumps onto B two, just like following the standard ethereum protocol to mine on the longest block blockchain. However, mining on the longest chain might not be the optimal strategy because the miner can choose to keep mining on block C two in an attempt to fork the blockchain. If the malicious miner is lucky, then the forked chain can catch up to B two.
00:01:35.770 - 00:02:54.350, Speaker A: And then this forking behavior is actually quite dangerous because it's going to waste the computational power of the honest minor and it's also going to increase the stable block rate, which makes the game easier for the adversary to do double spending attacks and selfish mining attacks. So how does the malicious miner decide whether to fork or not? So there are many factors he needs to consider. What's the average block reward was, the mev reward, what's the hashing power he controls, and how long does it take to switch from mining the old block to the new block. So in order to quantify this problem, we have modeled the entire thing as a Markov decision process. So based our finding in this paper, we find that if the adverse rail miner owns 10% of the hashing power, the rational behavior is to fork the blockchain if the mev is four times larger than the average block reward. But four times is nothing. We have observed mev opportunities exceeding 874 X of the average block reward.
00:02:54.350 - 00:03:48.818, Speaker A: This is actually the BDX attack in the past. So here is the critical takeaway message. When the mev is big, even small miners would fork the blockchain in order to steal the mev opportunity from the other miners. So although we have not seen substantial efforts indicating such behavior at moment, according to our quantifications, this is actually the optimal strategy to do so. Why the miners are not doing it at the moment? Remember, one year ago, miners are not extracting mev. So I believe this is basically because miners do not have the setup at the moment to help them fork the blockchain. I really hope I do not see this kind of forking behavior in the future because this is definitely going to be a disaster.
00:03:48.818 - 00:05:01.450, Speaker A: And I hope Flashbots can also be aware of this risk and try to mitigate the problem. Is there any simple way to reduce the mev to kind of mitigate the risk? So when I think about this problem, I always ask myself the following two questions so, who is the creator of the mev? And if the creator can close the mev itself? So this is very similar to what Tom said about the unionized idea which implemented by the B protocol. So I will give a different example here. So let's think about an arbitrage opportunity. Let's say a user makes a trade on uniswap in this transaction here. This will cause an arbitrage opportunity between uniswap and SushiSwap. So what we observed previously was mev searchers will try to backrun this opportunity with the backRunning arbitrage transaction.
00:05:01.450 - 00:06:15.118, Speaker A: So if the mev is not extracted just in time within the same block, then the searchers will try to front run in the next block with the arbitrage transaction. So here comes the core idea of a two Mm. So instead of leaving the money on the table, why don't the trader, the blank trader here in Orange, why doesn't the trader atomically close the mev themselves by performing the arbitrage atomically in one single transaction? So what's the pro and cons of a to Mm? A to Mm will minimize me. It is backward compatible, so it doesn't require any changes to the Ethereum implementation. And it's a decentralized solution. It doesn't require any additional trust assumptions, which is different from other like for example, background me services where they rely on private communication channels with the miners. A to Mm also have some financial benefits, but it also has some cons.
00:06:15.118 - 00:07:20.940, Speaker A: So Ethereum has this block gas limit. So sometimes it's impossible to extract all the mevs in a single transaction, which means some mevs will be left for the next block and searchers will do front running in the next block. It's not trivial to determine optimality on chain sometimes, so especially if the underlying pricing formula is complex. For example, it's quite hard to determine the optimal parameters for arbitrage between uniswap and curve. Also, a two Mm only mitigates some types of mev, not everything. So here I give one example of one type of mev that cannot be mitigated by hmm this is actually inspired by retailic's comment on our Medium article. So in a sense, there is a contract which rewards any caller after a certain block number.
00:07:20.940 - 00:08:11.734, Speaker A: So the creator of the MEB opportunity actually wants the opportunity to appear in a future block in a way that it doesn't want anyone to close the MEB opportunity atomically. Therefore, a to Mm will not be able to mitigate this mev. This is something different from A to M. But I also want to mention in our previous paper, we have actually proposed a simple application layer solution for sandwich attacks. So here we show a concrete example. This is Uniswap version one, easter to side market at block number nine minute. So on the x axis, we have the Easter transacted by the victim, and on the y axis, we have the Easter transacted by the adversary.
00:08:11.734 - 00:09:10.150, Speaker A: The color here indicates how much revenue the adversary can gain. What's interesting here is there is this threshold, which we call it the minimum profitable victim input. If the victim transacts an amount that's below this threshold, then no matter how much the adversary trades for the savage transactions, it's always not going to be profitable. So there's no incentive for the attacker to attack. So, yeah, so basically there is application layer solution for sandwich attacks. And I hope in the future we can see some AMM protocols implementing this solution. So, to summarize, let's minimize mev to reduce the risk of poking.
00:09:10.150 - 00:09:12.940, Speaker A: Thanks. That's it.
