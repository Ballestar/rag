00:00:08.550 - 00:01:56.554, Speaker A: Let me start by observing that because you have come to this workshop, you probably already have some notion somewhere in your head that there's something secret somewhere in the ecosystem of your DApp and you're trying to keep that secret across nodes within the politics of your distributed application. And if that's true, that's great. Whether or not that's true, what I want to explore with you over the course of the next 25 minutes is, in addition to that, the how and why secrets exist in DApps in the first place. In other words, you don't have to identify as a security application or a privacy application, as an application with sensitive data or in some sort of controversy wherein one party has to keep a secret as part of the essence of the app. That the kinds of secrets that you have in your D app are not a function of the feature set of your D app at all, but instead are sort of very rudimentary, mundane secrets like wanting to be able to share keys, wanting to be able to share access to files. Or maybe in game elements if you happen to be building a game where the strategy is ruined if other characters don't know them. So the reason we call this workshop, the reason that we call the workshops that we do handling secrets in your DAP with Newscyper is because we are looking to serve DApps that are doing things that we haven't even thought about.
00:01:56.554 - 00:03:02.260, Speaker A: And we think probably there are secrets to be handled in all kinds of distributed applications, not just the ones that maybe rush to our mind thinking about developing new cipher. So with that in mind, my name is Justin. I'm in a school bus here in Portland, Oregon. I don't know if I'll give you a four second tour of my surroundings. This is my home and I am surrounded by various distributed technology here and musical instruments. And I spend a lot of my days thinking about the ways in which we can bring cryptography and particularly novel cryptographic primitives to usability, and particularly mainstream usability for distributed applications. Give me just 1 minute here.
00:03:02.260 - 00:03:42.468, Speaker A: I'm not super used to zoom the software here and I'm often forgetting how to do how do I share my screen? The green button, green in the middle. You're all still there, right? Yeah, I think I heard something like a yes, there we go. How's that? Can you all see that? Now you see the new cipher slide? I'm sorry, I know this is awkward. I'm just not very used to zoom. Yes, we do. Yeah, great. I'm not going to do a ton of slides.
00:03:42.468 - 00:04:16.980, Speaker A: Decks are not my thing. I'd like to show code a lot more than I like to show a deck. But I do want to just walk you through a few things. So here's essentially our vision at News Cipher. We think privacy is a fundamental human right and we build the tools that developers need to make privacy preserving applications. And again, with the perviso that I just went through, that privacy preserving applications don't need to be privacy preserving applications as we know them. They also can be applications where privacy is only an issue, sort of on the side as part of the mechanics rather than part of the feature set.
00:04:16.980 - 00:05:28.108, Speaker A: Today, I'm going to talk to you about our initial tech offering, our Ursula character. And Ursula provides data privacy and access layer control for DApps and Blockchains using Threshold Split Key proxy re encryption at a high level. Understand that what we do at New Cipher is we dredge the world of cryptographic primitives, particularly the academic papers from the past 20 years or so. When we find something that's interesting and that's never really made its way to the forefront, we ask ourselves, in a collusion resistant, Byzantine fault atmosphere like the Blockchain, can this cryptographic primitive be useful in a way that it wasn't useful before? The answer for this particular cryptographic primitive, again, Threshold Split Key Proxy Re encryption, we believe, is yes. And when we find the answer to be yes, we build a character that has the power of that cryptographic primitive. And when I say a character, I'm talking about a friend of Alice and Bob. You probably all know Alice and Bob in the traditional public key infrastructure narrative, alice sends a message to Bob using Bob's public key, and Bob can retrieve the message using his private key.
00:05:28.108 - 00:06:14.412, Speaker A: So we've expanded this narrative of characters by thinking about beyond simple public key infrastructure, what happens when you have different characters interacting, each of whom has different powers? So, for today, because we're going to talk about our proxy re encryption offering, I want to talk to you about these four characters, alice, Bob, and Rico and Ursula. Alice is the authority. Alice decides who is and is not Bob. Alice makes a policy public key. Everybody that encrypts in the new cipher cryptology. While the new cipher proxy encryption cryptology encrypts not for Bob, not for the public key of an individual, but for the public key of a policy. Alice decides who can and cannot decrypt items that are encrypted with that policy public key.
00:06:14.412 - 00:06:40.420, Speaker A: Okay, and then let's go down to Enrico in the lower left corner. Enrico is the encryptor. Enrico encrypts the data. Enrico just continues to dispassionately encrypt data for the policy public key. Enrico never knows who Bob is, never knows how many Bobs there are, doesn't know when Bob was granted access, when whether Bob was revoked access. So Enrico just continues to encrypt for the policy public key. In a totally permissionless.
00:06:40.420 - 00:07:16.412, Speaker A: Enrico has write permission, but not read permission from other Enricos. Bob. Or we say Robert the retriever can retrieve secrets on the New cipher network, but only those to which he's been granted access. And you could also subsequently say only those to which he's been granted access and not revoked. And then the interesting one in the lower right corner, Ursula. Ursula, the untrusted re encryption proxy. Ursula is capable of re encrypting data without ever seeing the plain text from having been encrypted for the policy public key to being encrypted for Bob's private key.
00:07:16.412 - 00:07:49.690, Speaker A: So only Bob only all of the Bob's are able to decrypt data that's encrypted. This way, Enrico encrypts for the policy public key. Ursula re encrypts so that Bob can decrypt it with his private key. Okay, and this is just a very quick overview glance of proxy re encryption. I'll give you about 20, not even 15 seconds to just sort of take in the directionality of this diagram. And then we'll walk through it. You see Ursula in the middle, kind of the star of the show.
00:07:49.690 - 00:08:16.556, Speaker A: We say RK there for re key. Alice gives a piece of cryptographic material called a re key to Ursula, actually, to N Ursula's, because this is an M of N scheme. But that's not necessarily important for your hackathon this weekend. But we'd love to talk to you about it. If you want to understand more of the mechanics, then Ursula is able to take a secret and re encrypt it. For here we show Bob and Charlie. Charlie is not a character in the new cipher.
00:08:16.556 - 00:08:49.160, Speaker A: Cryptologies, just as often is the case a word that we use for another Bob. You might imagine, for example, a decentralized Netflix. I don't want to get so deep into this because I don't want to prejudice what might be your use case, but you can go back through and watch this talk and take a look at the slide. It's pretty simple. Here's our website, our GitHub, our docs, and our discord. We'd love to see and hear from you on our discord. Let's see.
00:08:49.160 - 00:09:16.836, Speaker A: At E. Berlin. Just now, we did not get any solid submissions, and that made us sad. So if you're sitting in the room, you must be considering the case. We are really hoping to get some interesting projects this time. Feel free to jump in the discord, even if you end up not hacking. That's fine.
00:09:16.836 - 00:10:39.968, Speaker A: We'd really love to talk about new cipher and about what we think are interesting, not just interesting use cases, because that's your creative angle. But what we think are the interesting advantages of this proxy re encryption offering over the public key infrastructure of Storms has been on my mind a lot recently because you know the illustrious and highly effective leader of our state. I don't know if you heard this recently drew with a sharpie the path of the hurricane that he insisted was going to hit Alabama. Modifying the path so that it would indeed hit Alabama. And there's something about that. It's sort of as arbitrary as making it rain by playing an Ocarina, right? Except that this is a grown man. Okay, let's look at some code.
00:10:39.968 - 00:11:08.808, Speaker A: This is the fun part. You're all still with me there, right? Yeah. Awesome. So $2,500 bounty for the coolest thing or things sometimes we divide it up that are made with new cipher. We have a few different ways that you can go about that. We have a browser extension that we're in the middle of rolling out right now. So if what you're making is browser based, definitely hop on into our discord and we will support you in getting the browser extension filled out.
00:11:08.808 - 00:11:37.152, Speaker A: We have interprocess communications interface, standard IPC interface, if you're doing sort of guest stuff. Oh, wait a minute, I forgot to switch that's right. I need to do zoom to switch you over to you can't see my code, right? You still see the we do. We see your code. Oh, you do? Now we see you. Let me get you over here. There.
00:11:37.152 - 00:12:06.872, Speaker A: You see my Pi charm now? Yes. Yeah. Good. Okay, great. So the reason I bring up the bounty now is because we'd love to have people building on our new browser extension. And that lets you retrieve secrets. So you can load a web page and you can click on something that is a new cipher secret, which is to say, encrypted by Enrico.
00:12:06.872 - 00:12:40.660, Speaker A: And then you can load the web page as Bob click on it, and then behind the scenes, it connects to the new cipher network and retrieves that secret. And so that if that's your angle, we'd love to talk to you about hacking on that. We also have IPC, standard interprocess communication. We have a JSON. RPC. Endpoint. And then we also have probably our sort of cleanest and most feature rich interface is the one I'm going to show you right now, which is our Python API.
00:12:40.660 - 00:13:37.044, Speaker A: So here we call this our Finnegan's Wake demo. We will re encrypt one line at a time, the James Joyce novel Finnegan's Wake. And let's get we've just got sort of some boring setup stuff up here, so let's get down to here. Here's where, again, sort of the star of the show. Actually, you know what, I do want to mention to you because I showed you that the chart there of the four characters. Are you still seeing my PyCharm or do you see my browser? Okay, am I the only one who doesn't like zoom? Okay, now you see I wish I could see what you see on my screen. You know what I mean? Do you see my browser? We did the this is just a screenshot from our ETH Denver.
00:13:37.044 - 00:14:17.936, Speaker A: This is all on our YouTube. This is a screenshot from ETH Denver where I walked through the CLI interface. And as you can see there, I put Alice in one window, bob in another, enrico in another, and Ursula in another. So if you're thinking about hacking with new cipher and you want to sort of dig down into the actual CLI commands, which gives you a really good overview of sort of which data is needed for each character. You might go back and watch this ETH Denver demo. And I just wanted to mention that because the little chart that I had in the slide is sort of the same shape there. And so here's a way that you can actually get a CLI view of that super simple chart on the slide.
00:14:17.936 - 00:15:02.352, Speaker A: Okay, let's hop over to PyCharm. Now, you all can see my PyCharm, right? I have a green box running, so I assume that's a yes. Here's Ursula, the untrusted re encryption proxy in this particular Python module. What we're simulating here on line 47 is the existence of our test network. Now, in the real world, we have a test net running on Gorely that's been pretty solid, and we invite you to hack using that. You'll find that the documentation in our hackathons channel of our discord invites you to use that testnet, and we can also help you to use that. It's actually super duper simple to do the testnet that way.
00:15:02.352 - 00:15:45.488, Speaker A: And that allows you to ignore, to not even need to do anything comparable to what you see happening on line 47. But here what I'm trying to show you is sort of the full gamut of how the Python API works to share these secrets. Here's some policy details. We're going to say, hey, five days from now is going to be our end time. Our M and N values are going to be two and three, which means that Bob Alice will give fragments of that rekey to three Ursulas, and Bob needs to visit any two of them. And so, in a way, this is sort of reminiscent of Shamir's secret sharing, if you're familiar with that technology. But again, to be super clear, ursula never sees the plain text.
00:15:45.488 - 00:16:09.924, Speaker A: Neither those two Ursulas, nor all three, if they collude, are able to see the plain text. So it's different in that sense from Shamir's secret sharing. And here we have a label. We say secret files and stuff. And for these purposes, I've made it look like a file path, because I think that's sort of an interesting way to use a label. So shares are per label. Alice grants Bob on one label that doesn't give him access on another label.
00:16:09.924 - 00:17:00.072, Speaker A: So thinking about it like a file path, this means that you can share one file path with Bob one and two and five, and a different file path with Bob two, three and four and so on. Here we have Alice. Alice takes network rest middleware domain, which we're actually deprecating now that our domains, I think, are probably just going to follow testnets, we say she already knows about Ursula. Again, in the real world, our testnet serves there. And for the purposes of this demo, and perhaps if you're using a Python API and trying to sort of tune things, you can tell Alice whether to discover nodes on the same thread that's an example of sort of the sort of performance knobs that we have in the Python API that aren't available elsewhere. And here we say federated only and Federated only means that Alice doesn't have to pay and the nodes are just sort of altruistic. That's not how it is in the real world.
00:17:00.072 - 00:17:47.320, Speaker A: But if you want to grab a repo and run this particular demo, it's easier to run it this way since you can run all the characters locally without needing a blockchain node. Now Alice can get the public key even before creating the policy. In other words, before Alice has any notions of granting anybody access on the network, alice can get the public key that all the data sources again, who we call Enrico will need to use to encrypt. So here you see we get the public key by doing get policy encrypting key from label. Okay, once again, that label, which is kind of like a file path, a different label will produce a different public key for the policy. And later we'll see Enrico use that. Here's Bob.
00:17:47.320 - 00:18:19.650, Speaker A: Bob takes essentially all the same arguments as Alice. Nothing interesting there. Alice starts discovering the network in our CLI and JSON RPC and browser extension. This happens automatically. But in the Python API you get to decide when the nodes start discovering each other, which is maybe know that's not an easy thing really to do via the CLI because you have to sort of double dip. I don't know, we haven't found an interface that we love for that. And now Alice grants this is sort of the first interesting thing.
00:18:19.650 - 00:19:05.648, Speaker A: Alice grants access to Bob on the particular label for those values of M N we had and the policy expires at the policy end date time. Two things I want to point out here at this line. The first thing is that this makes a network call which does a whole bunch of interesting things. It goes out and sees which Ursulas are staking the new cipher token in the proper amounts to be able to hold the policy. It finds end of them, it sends the Kfrags out and gets receipt. Know there's sort of a lot going on packed into this grant command, but we've tried to make it feel like it's just access management as you know it. The other interesting thing I think to point out here at this stage, now that we've gotten this far is that Alice and Bob these are actual classes in our code base.
00:19:05.648 - 00:19:55.276, Speaker A: And we think this is really an ideal way to abstract cryptographic primitives in a way to make them useful. And we'd love to hear from you about how we're doing in that respect. Here we have our lawful characters, new cipher characters, lawful PY we have here you can see Alice and Bob and Ursula and Enrico are our four main lawful characters. Again, they each have different powers stemming from different cryptographic primitives. We also have unlawful characters. So we have sort of an alignment structure borrowed from classic tabletop role playing games. Here we have Vladimir that serves as an unlawful Ursula.
00:19:55.276 - 00:20:43.052, Speaker A: Vladimir tries to break the rules of the network in some either a selfish or destructive way. And so when we think of an attack that can be performed by one of our nodes, we put that attack here on this class. And so you can feel free to sort of read what this character is capable of doing and how we prevent those attacks on the network. That's something that I think is really important for anybody that is ostensibly working on privacy tech. I think it's really important for them to wear on their sleeve how an attack works. And particularly I think it's important to codify that attack in a way that mirrors the proper functionality of the network. In other words, this is essentially a mirror.
00:20:43.052 - 00:21:16.824, Speaker A: This class is essentially a mirror. This cloud, I think it's very important. It's something we're proud of and we invite you to take as deep a dive as you like. So back to the narrative. Here we've got Alice granting we make a quick assertion. We show that the public key on the policy object is the same as the one that was returned here. Now Alice puts her public key somewhere for Bob to find later, right? Takes the bytes of her personal public key, which we call a stamp, and then we say she just disappears.
00:21:16.824 - 00:22:01.400, Speaker A: Disappears from the internet. Starting with line 92, you're going to see something that public key infrastructure cannot do, right? Think about this. If you're using public key infrastructure, the same party that has the secret, looking at the secret, ready to encrypt it for the recipient, they have to be online at the time that it's encrypted, right? Here, we don't have that. The party that decides who gets the secret can leave, never to be seen again. And yet still devices that are maybe under Alice's control, sometimes we imagine Alice controlling Enrico, sometimes not, can continue to encrypt for the policy. So here line 95. Some time passes.
00:22:01.400 - 00:22:50.084, Speaker A: Little song of time to get our time passing. And now we have Bob doing sort of the interesting part and say here on line 103, Bob the Biddler. Because we imagine that what happens in the next few lines is sort of what happens in the internals of your app. This is the interesting part where your user gets a secret and can do something within the context of your distributed application. So the first thing we do here for Bob is we have him join the policy. This is another step that you'll see in the Python API that is not in the others, in the other APIs Bob just retrieves and it's sort of all in one step. But here we show the granularity of our Python API.
00:22:50.084 - 00:23:25.824, Speaker A: Breaking it down again. Just to be clear, I'm talking up the Python API because we think it's cool. But our CLI interface, our IPC interface, our JSON RPC, our browser extension, they're also all fully featured. And we are happy to put development investment time into whichever one is gaining traction at a particular hackathon. So over the next couple of days, if you are wanting other features built into those other interfaces that aren't there, let us know. We're constantly working on these things. We're really excited about each of the interfaces, but I'm showing you the one that's the most mature.
00:23:25.824 - 00:24:06.112, Speaker A: Of course. Okay, now that Bob has joined the policy, we're going to show how Enrico, the encryptor, can share data with the members of this policy and how Bob retrieves it. We say here we only read some lines in this demo. Yeah, it is limited to 25 lines because we were having people run this and encrypting the whole book starts to get computationally expensive. When you run this demo, we only do 25 lines, but of course, you can change that number. So here we're going to enumerate the entire book and iterate through it with each line as plain text, and we make a new Enrico each time. So, in other words, you don't have to do that.
00:24:06.112 - 00:24:41.804, Speaker A: You can use the same Enrico over and over again and check that signing key if the source is in some way important to you and represents some element of validity, but you don't need to. You can make a new one for every line. And here we encrypt the message and we leave the public key. And now we delete Enrico, just like we deleted Alice. Now let's go back to Bob. Okay, Bob was going to reconstruct Enrico from its public keys. Again, just to show that what's happening here is we've deleted this object, but Bob can still reconstruct it using the policy public key, which, of course, Bob needs.
00:24:41.804 - 00:25:17.832, Speaker A: And using this is essentially the public part of its signing key, which we're trying to push the words verifying key for. And now Bob can retrieve the original message. So Bob somehow restores Alice's pub key from an ancient scroll wherever in your side channel of your app. You've got that? And then he gets the clear text by here, Bob retrieve. And he gets the single passage here and asserts that it indeed it is the same original plain text. And again, other than in the Python API, you only need to do Bob retrieve. You don't need to do the join policy step.
00:25:17.832 - 00:26:06.356, Speaker A: That also means that you don't have as much control over when the network traffic happens. So there you get a sense of the new cipher narrative. We are just about out of time. So I'd love to quickly switch gears to questions. And if I may put a question to you, I'd love to hear what it is that will if there's anything we can do in 30 seconds or less, what can we do to really get you hacking on News Cipher? We'd love for a cool project to come out of East Boston again, partly because we now have a browser extension, a CLI interface IPC, the JSON RPC, the Python API. We'd love to start seeing these get used now that they're really ready. New Cipher hasn't really been ready for the big time until recently.
00:26:06.356 - 00:26:44.816, Speaker A: Now we have our Gorely testnet up and we have all of this tooling. So again, I'd love to hear questions from you and I'd love to hear from you what we would need to do to get you hacking. Oh, I'm told we're actually out of time. I'm sorry, I went a little bit over. Please do hop into our Discord discord Newscypher.com really look forward to talking to each of you and we definitely will be around to support you hacking all weekend long. If you have any other questions, that's a great place to take them up.
00:26:44.816 - 00:27:01.110, Speaker A: We also can switch over to do Voice on Discord a little later if you like. But thank you very much for your time and we look forward to seeing your projects again. $2,500 bounty for either the best one or maybe we'll divide it across a couple if there are a couple of good ones. So thank you.
