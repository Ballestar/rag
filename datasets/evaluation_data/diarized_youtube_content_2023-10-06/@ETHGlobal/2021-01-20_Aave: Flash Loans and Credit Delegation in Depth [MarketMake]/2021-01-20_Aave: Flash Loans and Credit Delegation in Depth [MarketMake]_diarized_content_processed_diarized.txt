00:00:06.890 - 00:00:08.320, Speaker A: How strict is the.
00:00:10.690 - 00:00:15.550, Speaker B: No worries. Yeah, go. You can ask your question. No worries.
00:00:16.530 - 00:00:23.870, Speaker A: I was just asking how strict is the time limitation? Like, do I have 1 hour strictly?
00:00:24.530 - 00:00:50.186, Speaker B: Okay, you've got about an hour. You've got about an hour. Okay, cool. Hello and welcome, everyone, to the Ave intro workshop. Flash loans and credit delegation in depth. Joining us today is Emilio, who will be taking us through the session. Just a last quick reminder to everyone to join or create a project on your dashboards check in one has been prompted and we will be reminding everybody about their check in today.
00:00:50.186 - 00:01:00.640, Speaker B: If you're struggling, feel free to reach out to myself or anyone on the verbal team. And with that, I'll pass it over on to Emilio who can introduce himself and get the session started.
00:01:01.890 - 00:01:57.970, Speaker A: Yeah, sure. Thank you very much, Emily. Thanks, ETH Global. Okay, so guys, very honored to be here talking about Ave version two. We are very excited about everything that we released in the last few months and everything that we are going to release in the upcoming months and years, and especially because what we built until now is specifically designed for hackers builders and integrators to be able to build new tools for these new financial primitive that essentially are what we have and DeFi. So who I am, I am Emilio. I am one of the core developers of Ave.
00:01:57.970 - 00:02:44.930, Speaker A: We built together with the Dev team of Ave, both the protocol, the on chain layer and the front ends and everything, the tooling documentation, everything that is part of the Ave ecosystem. Essentially that's been quite a ride since we started. We started in January. It's more or less one year. The protocol is already I guess if you guys are participating, you already know what Abe is and how it works. But just to give a quick recap, I mean, the protocol holds right now more than 3.5 billions of assets.
00:02:44.930 - 00:04:28.862, Speaker A: It issued almost two billions of Flash loans and there are new users coming in every day. And it has been very exciting to see how the protocol has grown in this past year. So what I was thinking for this session is essentially to introduce a little bit like what the functionalities and specifically the Flash loan version two, and the credit delegations are how you guys can use them to build new stuff that it hasn't been built yet or to improve whatever we have already on the market and as a tooling for the average ecosystem, but even for other protocols, really? And at the end or in the middle, we will see, like going forward, we can think of. I prepared a small exercise to use Flashlons version two, and the exercise is unfinished, so we can think of maybe having a live coding session or I will explain what the example is, how I thought it, and how I expect more or less to be built. So you guys can experiment a little bit with the tool and there is a small prize at the end I will describe more in detail. Okay. I will start with the does someone have any question I'm asking at the beginning.
00:04:28.862 - 00:04:48.390, Speaker A: So if someone wants to see something specifically or if they have any question, whatever, you can already start asking. In the meantime, I will start sharing the screenplay.
00:05:00.210 - 00:05:00.960, Speaker B: Perfect.
00:05:01.330 - 00:05:40.214, Speaker A: Okay. Amazing. Okay, so the whole presentation is about, like I was saying before, flash loans version two and create delegation. Small introduction. What are flash loans? Flash loans, they were defined at the beginning. When we first introduced it at the beginning of last year, they were defined as the Schrodinger loans. It was kind of a funny definition because essentially they are loans that exist only when they are actually executed.
00:05:40.214 - 00:06:46.906, Speaker A: Otherwise they don't exist in any way in the sense that there is no trace on chain. Why? This definition is because essentially the liquidity leaves the protocol at the beginning of one transaction and then it returns the protocol only if the flash loan is successful, which means that the same amount plus a flash loan premium is returned to the protocol, otherwise the transaction is reverted. So it's like that particular action never happened. Essentially the first iteration of flash loan in the Ave version one was essentially allowing to flash borrow ETH and one asset at a time for each flash loan and it saw very interesting usage during the course of the year. Like right now we have more or less 1.8 billions of flash loans generated from ave version one. We have many integrators.
00:06:46.906 - 00:08:21.962, Speaker A: We have through combo that essentially is DeFi primitive aggregators allows you to aggregate multiple DeFi protocols at the same time with a very intuitive UI, we have DeFi saver that essentially allows you to protect and use your DeFi positions in ways that are often not allowed directly within the protocols. For example, you can leverage the leverage you can repay depending on the price of your collateral to save your position and so on. And it mostly uses other flash loans in the background. Then we have collateral that is another platform to aggregate multiple flash loans from different platforms and so on. You probably guys have seen in the past at the beginning one of the most frequent usage of the flash loans was actually to exploit some protocols. We have seen like the flash loan exploit on Visa decks like one year ago more or less. We have seen over the course of the summer many flash loan exploits essentially of protocols that allowed some particular manipulations with liquidity provider shares on different AMM, for example, SushiSwap or Uniswap.
00:08:21.962 - 00:09:32.882, Speaker A: There were a lot of integration service that were launched during the summer that were exploited this way. But at the same time flash loans usage grew a lot and is right now very pervasive in the sense that many tools use the flash loan under the hood. We don't even notice that, but they are used to actually make our life easier. So what we did for Flash loan version two is we built on the great foundation of Flash loan v one, and when we designed them, we were thinking of possible ways to improve the initial Flash loan implementation. So one of the most obvious ways for us to improve the functionality was to allow to flash borrow multiple assets at the same time. Right? So instead of Flash borrowing one asset at a time like it was happening in Flashlon version two sorry, version one. In Flashlon version two, you can actually flash borrow multiple currencies at the same time.
00:09:32.882 - 00:09:47.080, Speaker A: So you need to catch, for example, an Arbitrage opportunity that requires, I don't know, Wth, Dai, and USDC at the same time. You can use Flash on version two to build that.
00:09:48.750 - 00:09:54.940, Speaker B: Emilia, are you supposed to be on slide number ten, or are we going through the slides right now?
00:09:55.790 - 00:09:58.170, Speaker A: I'm moving through the slides. I don't know.
00:09:58.240 - 00:10:00.570, Speaker B: Okay. The screen is static.
00:10:02.110 - 00:10:02.774, Speaker A: I'm sorry.
00:10:02.832 - 00:10:05.760, Speaker B: Yeah. Sorry. I wasn't sure. Yeah, there we go.
00:10:06.130 - 00:10:08.894, Speaker A: Actually moved to slide number three. Give me 1 second.
00:10:08.932 - 00:10:16.062, Speaker B: Okay, great. Yeah, we're on number three. Sorry, I thought you were giving, like, an introduction and then I no, actually.
00:10:16.116 - 00:10:22.260, Speaker A: Was moving through slides in the meantime. Okay, let me try this way.
00:10:22.710 - 00:10:23.460, Speaker B: Okay.
00:10:24.550 - 00:10:26.302, Speaker A: Can you see now? Like me?
00:10:26.376 - 00:10:29.046, Speaker B: Perfect. Great. Perfect. Thank you.
00:10:29.228 - 00:10:39.110, Speaker A: Yeah, but there wasn't actually written that much on the slides. I don't usually write that much on slides. It's just a few reference points for the discussion.
00:10:39.610 - 00:10:40.360, Speaker B: Great.
00:10:40.670 - 00:11:35.174, Speaker A: So like I was saying, ability of Flash borrow multiple assets at the same time is one functionality. Another functionality that kind of required a protocol already redesigned. On our side was that we choose to actually pull the funds from the entity that was receiving the Flash loan rather than push in Flash loan version one, the entity that was receiving that is a smart contract, of course, was pushing the funds to the protocol at the end of the transaction. So imagine that this particular contract would flash borrow one ETH. It would return by pushing the funds to the protocol, the one ETH, so that the protocol could check if the funds were actually returned. For Flash. On version two, we actually moved to a pool approach.
00:11:35.174 - 00:13:06.774, Speaker A: So instead of having instead of having the protocol expecting the entity to return the funds, the protocol tries to pull the funds from the entity, which means that the entity needs to approve the protocol to be able to pull the funds. This also, of course, has another consequence, and the consequence is that in Abe version two, we don't support native ETH. Instead, we replaced native ETH with wrapped ETH so that everything is treated as an ERC 20 and we can safely apply the pool strategy to all the assets deployed supported in Ave. Why we did this is that this allows the Flash loan compared to Flash on version one. This allows Flash loan version two, version two to be executed in the Ave protocol itself. This might not be that of a big change at the beginning, but it actually makes for Abbey makes a huge difference because it gives a lot of different capabilities to the Flash loans since within the Flash loan itself you can operate within the protocol. So for example, you can flash borrow from the protocol to liquidate a position in the protocol itself, that it's something that it was not possible in Avev one.
00:13:06.774 - 00:14:29.890, Speaker A: Or for example, you can flash borrow from Avev two and then use that flash borrowed funds to create a leveraged position or redeposit in Ave version two and all within the same transaction and all using the Abe protocol. This before was not possible to do something like that. You needed to use a Flash loan from a different protocol, for example dYdX or Uniswap, whatever. And this capability of executing the Flash loan and interact with the protocol in the same transaction goes great with this. Other addition that we did is that you can eventually avoid repaying the Flash loan in the same transaction but actually create a loan on the color of the Flash loan which essentially allows you to automatically create a leveraged position at the end of the day. This is not actually a Flash loan, it's a normal loan where instead of depositing collateral first and then getting the money, you first get the money and then deposit the collateral and then you open the position at the end. Right? This is the sequence of events essentially.
00:14:29.890 - 00:15:28.550, Speaker A: And this might seem like a small change, but it's actually a huge change because it gives to the Ave protocol native leverage capabilities. Which means that with only one transaction you can automatic leverage. How would an automatic leverage work? Imagine that you want to leverage ETH for example for 1000 die and you want to leverage two X. Then you can for example flash borrow another 1000 die using the 1000 die of the user plus the flash borrowed 1000 die to buy 2000 die worth of ETH in the same transaction of the Flash loan, deposit the 2000 die of ETH and open it, open the 1000 die debt at the end. Then you have 1000 die position debt and 2000 worth of ETH in the protocol. So essentially you leverage two X. It's very straightforward but also also very powerful.
00:15:28.550 - 00:16:43.930, Speaker A: And the other functionality that we add that kind of connects to what we will discuss afterwards is the Flash loans can also be create delegated. So this last capability of not repaying the Flash loan at the end of the transaction but actually create a loan you can do on behalf of someone else. So you can create a leveraged position on behalf of another entity, for example a smart contract. And this creates a whole lot of different possibilities of experimenting with flash loans that we will look in more detail afterwards. And also so you can ask questions later, we can dig in more potential use cases so you guys have more ideas to be able to create something new and interesting for this hackathon. So let's see how it works in detail. There are essentially two steps to be able to execute a flash loan.
00:16:43.930 - 00:17:50.690, Speaker A: You need a smart contract that can be called, that implements a specific interface and that can be called through flash loans. And then you need an opportunity, okay, because of course a flash loan only makes sense if you have an opportunity to catch and this opportunity is profitable. Otherwise the flash loan can still be used for other functionalities like we were saying before of the leveraging. But if you want to use a pure flash loan, you need an opportunity to catch essentially it can be a liquidation, can be an arbitrage, can be moving funds between different protocols, can be whatever, but it needs to be an opportunity to catch that actually makes the flash loan profitable. So the first requirement for a flash loan is that you write a specific smart contract that implements a specific interface. This interface is actually very simple and is just one function. This function is called Execute operation.
00:17:50.690 - 00:19:04.730, Speaker A: Execute operation. Essentially you define this function, within this function you write the code to be able to catch this particular opportunity that we were discussing before. And at the end of this execute operation, you essentially enable the protocol to pull the funds from the smart contract. The step two is once you have the contract that implements the execute operation at the right moment when the opportunity presents itself, then you can call the flash alarm function on the other protocol specifying the contract that you wrote before using execute operation as a receiver of the funds. And when you execute the transaction, if everything goes correctly, the opportunity will be taken by your contract that you wrote and implemented execute operation and then you will receive a profit. Profit. That is essentially the amount that was used to take the particular opportunity that we were discussing before, minus the amount that was borrowed, minus the premium that is your profit.
00:19:04.730 - 00:20:41.574, Speaker A: So as I was saying before, what we can build with flash on version two, essentially we can build all kind of tools that require funds and that are essentially time sensitive and require some specific on chain opportunity to be code. So for example, liquidation bots, we all know more or less what the liquidation is, is whenever on a protocol like Abe that is over collateralized, by definition the specific value of a certain collateral drops so that some particular position become under collateralized. Sorry. So when they become under collateralized, what happens is that there is an opportunity to invoke a specific function on the ave protocol, but more or less all the lending protocols. All protocols that involve lending in some way, they more or less work all the same. So I refer to Ave, but the same concept works, compound works for dYdX Maker and all the others that in form or another involve lending. So when the market goes down, so the value of a particular collateral drops, there will be position of users that are unable to sustain essentially the amount of funds that were borrowed, which means that the position is under collateralized.
00:20:41.574 - 00:23:36.290, Speaker A: When it's under collateralized, usually protocols give you the possibility of calling a certain function to repay the debt of the user on behalf of the user and in exchange take up a certain amount of the collateral plus a liquidation bonus. So the amount of collateral that you will get is essentially equivalent to the amount of debt that you are going to repay. Plus there is a bonus that covers the costs of selling the collateral for the asset that was repaid and also covers the profit of the liquidator, right? So the liquidator is incentivized to call this function and keep the system always over collateralized. Now, before flash loans, to build a profitable liquidation bot, you would need capital, right? Because to first be able to repay the debt, you need capital to repay the debt, then you are essentially buying the collateral at a discount and then you can sell the collateral plus the bonus for a profit, right? So before the flash loan era, if you wanted to write a liquidation bot, the first requirement that you had was to add capital, okay? With the flash loan, you don't need capital anymore, you just need coding skills. So you can go on Ave, for example, create a liquidation bot that essentially receives the funds using a flash loan, then repays the debt, receives the collateral, sells the collateral on uniswap, then takes the amount that was received from uniswap, repays the flash loan, and transfer the profit to the liquidator, right? All of this happens in one transaction and you don't require any capital, which if you think about it, is kind of mind blowing because it allows you anybody to grab financial opportunities without the need of having any capital, which is something that does not exist essentially in traditional finance. I think the same we can say for arbitrage bot, if there is someone that doesn't know what an arbitrage is, is essentially the difference in price between assets, between the same assets within different systems. Okay? So imagine, for example, in the world of centralized exchanges, you have Coinbase, you have Binance, you have Kraken.
00:23:36.290 - 00:24:59.800, Speaker A: What happens is that usually on Binance, BTC trades at a certain price, on Coinbase it trades at another price, and on Kraken it trades at another price, right? When this price difference is big enough that moving funds from one exchange to the other actually allows a person to generate profit, that is an arbitrage opportunity. Okay? And the same happens on chain. Of course Uniswap has a certain price for the ETH Dai pair. Sushi swap has another price. You can write a transaction that kind of arbitrages the difference between Uniswap and Sushi swap so that both systems will have more or less the same price, right? Arbitrage is essentially what keeps the whole market in equilibrium. Without Arbitrage you would have like huge price difference between exchanges or between different systems that deal with in a form of another with trading without any actual possibility of kind of aligning the market. So the Arbitrage is something that is very healthy for the ecosystem and keeps everything more or less in place.
00:24:59.800 - 00:26:16.370, Speaker A: Like for a liquidation, if there is an opportunity to be taken of different prices between decentralized exchange at a certain point in time, you can use an Arbitrage bot that uses Flash loans, so you don't need capital. And with that you can essentially arbitrage the price between different decentralized systems within one transaction and a profit from that. And you don't need any capital, but you can use the flashboard capital to perform these actions. So you see that it's actually very powerful. To be honest, maybe the Arbitrage case is a little bit less attractive because usually Arbitrage are not so big or don't involve huge amount of money. The Arbitrage bots usually require less capital and the chance to profit enough to pay the Flash loan premium. That is on Ave plus profit to cover the transaction cost is lower than for a liquidation bot.
00:26:16.370 - 00:27:33.758, Speaker A: For example, there is much more chance of earning using liquidation at Arbitrage, but there were many Arbitrage executed with Flashloon in the last year that actually proven to be very profitable. So it's still something that is interesting to do and it's for sure worth to use to extend maybe existing Arbitrage bots to use both local capital so that you don't need to pay the additional gas cost of Flash borrowing plus the Flash loan premium. And if maybe an Arbitrage opportunity shows that requires more capital that the Arbitrage bot doesn't have available, then you can use Flash loans. For example, another thing that is specific to Flash loan version two, like I was saying before, is automated leverage products. There are many possibilities here. If any of you guys had for example confidence with leverage, perpetual tokens or leveraged positions. This is something that Ave supports natively and is very easy to do right now.
00:27:33.758 - 00:28:44.834, Speaker A: Until now. With Ave version one when users who wanted to leverage, usually what they did was they borrowed and deposited multiple times to reach the required level of leveraging. For example, if I have east and I want to leverage ETH, then I deposit ETH in Ave V one borrow die, sell the die for it, deposit again in Ave, borrow more die, buy more ETH, deposit this again, borrow more die, buy more ETH and so on and so forth. So it's a loop that allows you at the end of the day to create a leverage position so you are more exposed to ETH. And if the price of ETH goes up, you profit more from your holdings. Essentially, Ave Flash loans version two allow to make this operation. So multiple borrows and deposits in sequence in OD one.
00:28:44.834 - 00:30:03.790, Speaker A: So with one Flash loan, you can automatically leverage as much as you want as long as the risk parameters of the particular assets that you want to leverage allow you. So if you want, for example, to leverage I did an example already before, but the fact of having the liquidity in advance means that you don't need to borrow multiple times. But you can ask for the liquidity in advance to the protocol, buy the asset that went to leverage and deposit all in one transaction at the same time, which is a huge advantage. And for example, you can tokenize this kind of operations. So that essentially what you can do is create a token that represents a leveraged position and then that particular token is owned by a user and when that user redeems that particular token, their leverage position gets unrolled. Still again using flash loans. And then the person receives the amount that he deposit at the beginning, plus whatever he earned or whatever he lost, if he lost something, if the price of the collateral went down because of the leverage position that he created.
00:30:03.790 - 00:30:49.770, Speaker A: And this is something that I really advise you guys to explore and maybe try, maybe try to analyze how other leveraged products work and maybe try to reproduce them using Abe Flash loans. And that would be really cool. And another tool that you can create is tools to move funds from different protocols to Abe. This actually is the strategy that we are using to migrate the funds from Abe V one to Abe V two. Actually, that is interesting. I will stop for 1 second the presentation. I will show you one transaction.
00:30:49.770 - 00:30:52.640, Speaker A: You can still see my screen, right?
00:30:54.850 - 00:30:56.762, Speaker B: Yes. Introduction.
00:30:56.906 - 00:31:56.270, Speaker A: Yeah. I will show you one transaction using Flash loan that has been executed by a user to move the funds from Abe v one to Abe V two, which is really cool. Okay, this is a website that we use to track essentially the state of the Ave protocol. It's accessible by anybody and you guys can see what is the state like, what is the total liquidity available, what is the total debt that has been issued, and so on and so forth. Yesterday, the migration tool from version one, Ave V one to Ave V two was released to the public. And this specific tool actually uses Flash alone, version two, to allow a seamless and completely user controlled and decentralized migration from V one to V two. How does it work? I can show you quickly.
00:31:56.270 - 00:33:13.642, Speaker A: This is probably one migration or not. It's not. Maybe this, this one for what the hell? There is some problem with my touchpad. This transaction was created using the Abe migration tool from v one to V two. You can see that it's actually a Flash loan here. From here? Yeah, it's a flash loan. And what did this Flash loan do? Essentially, the Flash loan borrowed 540,000 USDC from Ave v two, repaid the debt that the user had on Ave P one.
00:33:13.642 - 00:34:07.338, Speaker A: The ether scan is still not updated to show the Ave v one and Ave v two actions shows Ave, but Abe here is Ave v one. So the Flash loan was from Ave B two. It repaid the position of the user of 540,000 USDC on Ave v. One, then still within the Flash loan withdrawal, the whole collateral. So 1346 Abe and 689 Ether from Abe B One. And then the v two actions are not shown, but we can see from here it deposited back in Ave v two, the A ETH and the A Ave here. So we withdraw from Avev one redepositing in Avev two, which is something that is allowed from Flash loan version two.
00:34:07.338 - 00:35:18.500, Speaker A: And at the end of the transaction, the Flash loan was not repaid, but rather a debt position was created on AVV two. So the user at the end of the transaction had 540,000 USDC of variable debt as it's the same amount essentially that was Flash borrowed at the beginning and that's it. So you can see that this way. Essentially we did this from Abe, but potentially you can do the same to move the funds from Compound, from Maker, from dYdX or from Wyurne, from wherever you really want to Ave. So it's really something that helps people that want to move funds between different protocols to do that in a seamless and completely decentralized way. And this concept can be extended really to whatever protocol one can think of, essentially. Okay, so I think we covered more or less everything I will go back to too fast.
00:35:18.500 - 00:36:01.440, Speaker A: Yeah, so we covered more or less all the use cases. So afterwards there is a live example that I prepared. So if you guys have any question before I went quite fast, I think maybe too much. So if you guys have any question before we move forward, just I don't know, please unmute and ask me and I will gladly answer. Okay, I guess there are no questions, so let's move forward with I will actually forward you this link here.
00:36:03.970 - 00:36:09.010, Speaker B: Emilio, there are a couple questions in the chat, I can read them out to you real quick.
00:36:09.080 - 00:36:12.066, Speaker A: Yeah, sorry, I don't see the chat because I'm sharing the screen.
00:36:12.248 - 00:36:24.840, Speaker B: No, that's fine, I'll read it out to you. So one of the questions was from YouTube and it was how can I use the protocols on already deployed ERC 20? Which protocols would you recommend?
00:36:29.950 - 00:36:33.082, Speaker A: Not completely sure of the question. Can you read it again?
00:36:33.136 - 00:36:41.920, Speaker B: Sorry, Emily, how can I use the protocols on an already deployed ERC 20, which protocols would you recommend?
00:36:43.650 - 00:37:53.602, Speaker A: Okay, I'm not completely sure of the question. If the person who asked the question meant, for example, what is the way of listing an existing ERC 20 on Ave? Or if you can use Ave on whatever existing ERC 20. Anyway, I will give a generic answer and hoping that I kind of COVID what the person is asking. So you cannot really use Ave with any existing ERC 20. The ERC 20 needs to be supported on the Ave protocol, which means that the asset needs to be properly configured and listed on the Ave protocol itself to be able to use all the functionality of Ave with that particular asset. So right now, around 18 different assets are supported. All of them are more or less assets that are part of the top 100 tokens, I think.
00:37:53.602 - 00:38:34.020, Speaker A: So they are assets that undergo a specific risk assessment before being listed. And also the listing process is community driven. So potentially any asset can be listed as long as a proposal is created for the Ave governance, because Ave is decentralized and also the proposal is supported by the community. So the voting for the proposal passes with enough yes votes, essentially. So I hope I answered the question.
00:38:35.430 - 00:38:45.640, Speaker B: Great. Yeah, they can always reach out again if the question wasn't answered. But the next question is which API should I use to compare price?
00:38:46.570 - 00:38:48.178, Speaker A: To compare prices?
00:38:48.354 - 00:38:49.078, Speaker B: Yes.
00:38:49.244 - 00:39:41.720, Speaker A: Okay, that is a bit off topic, but I will answer anyway. There are many APIs that you can use. You can use the Coin market cap that I think they are free below a certain I don't exactly know right now because I didn't check since a long time ago, but if I remember, they were free for personal use and they were also rate limited. So if you stay below a certain threshold of usage, you don't need to pay anything. And if I remember correctly, the Coingeco API also were open and they were free unless they changed also the requirements for using them. So I would recommend one of those two.
00:39:43.930 - 00:39:51.260, Speaker B: Okay, great. And then how can I locate the transaction displayed in Etherscan a few minutes ago?
00:39:54.590 - 00:40:39.580, Speaker A: Okay, to locate a transaction on Etherscan, you essentially need to have the transactional hash. If you don't have the transaction hash, usually the transaction hash is kept in the history of MetaMask. If you used MetaMask or in the specific wallet that you have been using, if you used another wallet and not MetaMask, if you don't have the transaction ash, you can still check from Etherscan your wallet address and then the pending transactions or the last executed transaction should show there. That are all the ways that you can find the transaction that you sent and you don't know how to track.
00:40:41.310 - 00:40:46.970, Speaker B: Great. Yeah, I think maybe you can go on with the session and we can answer a few more questions a bit later.
00:40:47.120 - 00:41:39.020, Speaker A: Okay. Great. So I will actually stop sharing because I will share this link in the chat, then I will go back at sharing again. Okay? 1 second I'm going through the GitHub, okay? There are also some questions on the group chat of Zoom that I didn't see because I was sharing. So I will answer now. There is barat that asked considering that the borrower doesn't have any major risk, the lender doesn't have any risk. So then who pays for the profits? It's the community who pays for this to the price pump and dump.
00:41:39.020 - 00:42:58.656, Speaker A: Not sure to what particular activity that I discussed before. You are referring to. If you are referring to the arbitrage in general, to the liquidations or to the flash loans in general, I can give messages. Okay? So what can I say is usually it really depends on the particular action that a flash loan is executing. Okay? Barrett I'm sorry, when a flash loan arbitrary in general hack happens, okay? When a flash loan in general, it really depends on the action that you want to catch. For example, for a liquidation, if you want to catch with flash loan a liquidation and you earn a bonus on the liquidation, then the person that is sustaining the cost of this opportunity is the borrower. Okay? So essentially, when the price of the collateral goes down and a borrower can be liquidated, what happens is that it usually happens before the price of the collateral reaches actually the debt.
00:42:58.656 - 00:44:01.212, Speaker A: So you have a certain margin, okay? So if you borrow the 1000 die, for example, you start getting liquidated not when your collateral reach 1000 die in value, but when, for example, it reaches 1500. Okay? So you have a certain margin between the debt and the value of the collateral. So when you get liquidated, you pay essentially for the bonus. So for you borrower the the liquidation is a penalty, okay? You will pay the amount of bonus that the liquidator will receive as a penalty on your collateral. This always happens when we talk about liquidation. So it's the borrower sustaining the cost of the bonus that the liquidator is getting. In the case of an arbitrage is a little bit more complex because it kind of involves different systems and an arbitrage can be many different ways.
00:44:01.212 - 00:45:42.076, Speaker A: So usually the cost of the arbitrage is sustained by the liquidity providers. If we refer specifically to AMM and decentralized exchanges, usually the liquidity providers sustain the cost of the arbitrage. So if there is an arbitrage opportunity, it means that the arbitrage will extract some value from the pool, which is kind of sustained by the liquidity providers. Then it also depends usually Arbitrage in some places is incentivized because Arbitrage also means more fees. So there is a threshold where Arbitrage is actually not a cost but a benefit for the liquidity providers in the long term, okay? So it really depends on how and where that particular arbitrage happens from which different systems but in general we can either refer as the liquidity providers as the one that sustain the cost or the system itself. For example, there was a problem on maker on liquidations back in March, I think that could be kind of simulated to an arbitrage. But in that particular case, the cost of that particular arbitrage was sustained by the users and in a certain way by the system because the system to be recapitalized essentially had to mint more MKR to be able to repay the debt that was kind of arbitraged out of the system.
00:45:42.076 - 00:46:46.620, Speaker A: So really in the case of arbitrage and hacks really depends, but is usually the users or liquidity providers. Okay, we will go through the because we are already close to the end. So I will just share the link here of the example that I created for you guys to test with the flash one version two, if you go this is my personal GitHub. If you go there, you will find two different solidity smart contracts that I wrote. One of them is incomplete. So you guys, you will need to complete it to be able to actually execute the flash loan. And I will be available for you guys in discord or like you can write me on my personal telegram, I will give the link or on Twitter for you guys to help finishing the one that is not completed and to actually have a working example potentially even in mainnet.
00:46:46.620 - 00:47:30.872, Speaker A: So let me go quickly through the example. I will show you what was built. I will share the screen. Okay, so there are essentially two contracts in there. One I'll be showing you quickly. I wrote essentially two contracts. One is called fake arbitrage strategy and the other one is demo flash loan receiver.
00:47:30.872 - 00:48:20.584, Speaker A: The demo flash loan receiver is the one that is not yet completed. So you guys, if you want to take the exercise, you will need to complete it. The fake arbitrage strategy essentially simulates an arbitrage opportunity where when you send ether, we'll show you the code here. Yeah, it exposes a function that is called arbitrage. And when you call this particular arbitrage function, it will return nine basis points more than what you sent. So imagine that you sent one ether to this function, you would receive 1.9 ether which is exactly the same as the premium that you will need to pay if you invoke a flash loan.
00:48:20.584 - 00:49:42.548, Speaker A: So the idea why I wrote this contract and this function is the idea is to give you the possibility of writing a very simple flash loan that can call this contract, you can send the funds to this contract and then it will send you back the funds that you sent plus the premium, right? So you can call a flash loan and execute it successfully on mainnet and eventually while being also able to repay the flash loan premium and have an actual successful transaction. Okay? So my idea was that this contract that is already being deployed to mainnet the address is on the README here. This is the arbitrary strategy that I deployed. The idea is to write a flash on receiver that I partially wrote here. Can see the code here. The flash run receiver implements the execute operation function that I was talking before and essentially here you will need to write the code to call the fake arbitrage strategy. Call the arbitrage method, receive the flash loan amount plus premium and repay the flash loan.
00:49:42.548 - 00:50:39.390, Speaker A: Now you will need to take in consideration three aspects is that first aspect is that the protocol doesn't deal with ETH but it deals with we. So whenever you call execute operation in a flash loan you will need to call it with the address of we and you will also need to pass an amount, the amount I put as a limit on the fake arbitrary strategy, 0.1 ether. So the maximum amount you see there is also the requirement here. So remember guys, when you call the flash loan the amount that you need to pass needs to be less than 0.1 ether. This is done to essentially avoid people depleting the whole arbitrary strategy with one transaction but to have enough funds in the fake arbitrary strategy for everyone.
00:50:39.390 - 00:51:26.724, Speaker A: You can see here that you can call maximum 0.1 ether and what you will need to do here is unwrap. I already put the reference to we. Unwrap the ETH that are within the we that are received from the flash loan. Send the ETH to the arbitrage strategy that will send back the same amount that you sent plus the premium. Wrap the amount again and after you wrap you will need to approve the lending pool. The address is here to be able to take from this particular contract the amount that was sent here in amounts.
00:51:26.724 - 00:52:18.196, Speaker A: So these are essentially the four steps that you will need to take. I have an implemented version that I already did in my local machine. I will also add the full implemented version in the repo there. So you also have the full implemented version. Remember that you have these four steps unwrap we call the fake arbiter strategy. Passing the unwrap the ETH and receiving back the amount that you sent plus the premium wrap back again to be able to send back to the protocol and approve the protocol. To be able to take the funds from this contract so you will be able to repay the flash loan.
00:52:18.196 - 00:53:38.480, Speaker A: These are the four steps I recommend you guys that use Remix. If you are not familiar with Remix, it's a tool to develop solidity smart contracts. You can see here I already have the two smart contracts that I wrote for the goal use the remix. You can simulate everything. I mean to avoid wasting money in failed transaction, you can simulate everything within the here you are not forced to use the main net or a testnet, but you can also use the JavaScript virtual machine. So eventually you can use the JavaScript virtual machine to emulate the smart contracts and try that everything works before trying to Mainet, because unfortunately Mainet is very costly these days, so it's hard to build without spending too much money. As an addition, as a good tradition with Flash loans, I left a possible exploit on the fake Arbitrage strategy.
00:53:38.480 - 00:54:29.460, Speaker A: So if you guys find the exploit on the fake arbitrary strategy, there are zero point 28 there. So if you find you will need to use a Flash loan or modified executor operational contract to be able to exploit the fake arbitrary strategy. And if you manage to find the exploit and to pull it off, essentially it's a zero point 28 $200 bounty for you guys. So these are left as a further incentive for you guys to try the example and experiment with it and get more accustomed to how flash loans work. I think we don't have much time left, right, Emily?
00:54:31.720 - 00:54:44.170, Speaker B: No, you can continue with your session and if anybody would like to stay on a little bit longer, they're more than welcome to. But yeah, I don't want to cut your demo short. Go ahead.
00:54:45.820 - 00:55:25.140, Speaker A: Okay, so there is a question. What's the link to the GitHub repo? Guys, it's like free message above, yours is GitHub D 3D Market Make. Yeah. Emily, forwarded. Okay, so this is the link to the repo and there you find the contracts. I will add a bit more details. I was hoping to be able to do that during the session, but I started talking maybe it's a bit too much like my usual, but still I will add more details on the README on how to actually use these contracts.
00:55:25.140 - 00:56:27.268, Speaker A: I will also add an already implemented version that should work. I didn't test in detail but should work already. And I will be available on the different chats on discord or if you want to ping me on Twitter, on Telegram, you guys feel free to do it. I see a question here. Any good and comprehensive resource that you can refer me to understand DeFi space? I would really recommend you guys that on YouTube there are a lot of resources to allow you to better understand the DeFi space. I would recommend you guys follow DeFi. That is a really good influencer and he creates a lot of very interesting content for I will also share the link to the Flashmont transaction, DeFi.
00:56:27.268 - 00:57:17.370, Speaker A: That creates a lot of content specifically for people that wants to start interacting with DeFi and understanding better the DeFi space. So I'm writing here. It's DeFi dad on Twitter. Yeah. Okay, so let me find the transaction. It from here. This one.
00:57:17.370 - 00:58:01.700, Speaker A: Okay. I'm sharing the transaction of the Flash loan in the meantime, then I will quickly move to the Create delegation. It doesn't load. For some reason, I will quickly move to the create delegation, like just to give you an introduction, what the credit delegation is and how you there is a black box in the middle of my screen. I don't know why it maybe is the chat. Okay, this is the address can transaction that I showed before. Yeah, it's my zoom window.
00:58:01.700 - 00:59:31.920, Speaker A: I will close quickly because I'm reading the chart I shared in the chat, the address of the transaction that I showed before with the flash loan execution and the migration of the funds between ave version one and version two. Again, I will provide more details on the example that I provided in the README of the GitHub. So keep an eye on the README of the GitHub so you guys can see the details that I will add and then I will go quickly to the credit delegation and show you guys what the credit delegation is and how it works and why it's important. It for some reason this doesn't work anymore. Okay, going full screen doesn't work anymore. Okay, I will quickly introduce create delegation and then I think we can wrap up with more questions. And I'm sorry, I cannot show create delegation example, but unfortunately there's not much time anymore.
00:59:31.920 - 01:00:28.696, Speaker A: Okay, so this is the other functionality that we were supposed to talk about during this session. And it's very important because it kind of introduces a new concept in DeFi that is the possibility of taking uncollateralized loans, essentially. So how does it work? Is it really uncollateralized and what can I build with it? So you can think of credit delegation a little bit like an approval. Okay. If you guys have if you guys have a confidence of how, ERC, 20 tokens work, you know that more or less every time you use or you authorize an application to take your tokens from your wallet and use them in. A protocol can be uniswap, can be aave. Whatever.
01:00:28.696 - 01:01:29.416, Speaker A: You need to execute a transaction before to authorize this particular smart contract or protocol to actually take the funds out of your wallet. Right. That particular action is called approval. And essentially it says, okay, I authorize this smart contract. But really can also be a classic normal wallet to take the funds out of a certain amount of funds for a specific token out of my wallet with my consent, you are essentially giving the allowance to a smart contract to pull the funds and do whatever they want to do with these funds. Usually in Ava, for example, you give the approval so the protocol can take the funds out of your wallet and deposit them in the protocol so you start earn interest. Okay? The creative delegation essentially is born from the same concept of approval.
01:01:29.416 - 01:03:28.972, Speaker A: But what we thought is, okay, instead of giving approval to take tokens out of my wallet, why don't we give approval to another entity to borrow on my behalf? So what I can say is, okay, I have for example, 1000 e of collateral on Ave and I want to use this collateral not only from my wallet, but I want to use from another wallet that, for example, I use for everyday expenses, okay? So this was impossible until Avev two because you could not do that. I mean, you would need to borrow with the normal wallet and send the funds from the normal wallet to the other wallet, which seems like not a big deal, right? I mean, I can just borrow from the main wallet and then take the funds and then use them on the second wallet. But in reality it's much less flexible, okay? Because I am forced to do an action and then to provide the funds to another wallet instead of having the freedom of borrowing and repaying and doing whatever I want without requiring any further action. So with great delegation, you can essentially allow any other wallet or contract which is even more important to borrow on your behalf. So what this means is that an entity that is not you can borrow using your collateral and it doesn't need any collateral. So it's actually uncollateralized for the entity that's taking the loan. But of course, from the perspective of the system, the loan is still collateralized, okay? Because it's the collateral of the user delegating that is guaranteeing that the debt will be repaid.
01:03:28.972 - 01:04:43.032, Speaker A: Okay? So it's uncollateralized, but it's not really uncollateralized. But it's really cool. Why we can build stuff that without the create delegation is much more complex to build. Actually, the interesting fact is that to evaluate the power of this functionality, you don't even need to build anything. Think of an entity that, for example, that issues loans off chain by validating user identities and credit scores. Then this entity can allow, for example, users to borrow from abe in a completely seamless manner, completely transparent manner. So a user can go to abe and borrow transparently without depositing any collateral, with of course, the constraint that this particular entity is connected to the delegator by an off chain relationship.
01:04:43.032 - 01:06:05.780, Speaker A: Okay? So this is already very powerful and it's something that is not so easy to do with the same flexibility without create delegation. But it's even more powerful if you consider that this functionality can be used by contracts. So imagine for example, that you want to create a smart contract that has farming strategies, okay? So imagine you want to create a smart contract that allows users to deposit, I don't know, WBTC for example, in one smart contract. And then this smart contract under the hood deposits the WBTC in ave and delegates another contract to borrow. So this contract can actually now manage a certain amount of funds and can use these funds to deposit in curve, for example, to earn more interest and to earn the difference between the interest that is paid to Ave and the interest that is paid to curve plus the CRB for example. And this is completely straightforward because it really requires only one transaction, that is the delegation transaction. So this is essentially the heart of the created delegation function.
01:06:05.780 - 01:07:19.880, Speaker A: And this why is so powerful because you can do a lot of stuff without any friction and on behalf of another entity that is providing you debt. And all of this does not require further interaction from the delegator that is the person that is giving you the allowance to borrow. I can quickly show yeah, I was putting some links here, but it's probably better if I show quickly live how it works. By the way, let me send also this in the chat here's. Okay, there is a question in the meantime, maybe there is a post for credit delegation assembly. Make someone else since there is time in this meeting now. Yeah, we have some credit delegation tutorials in the developer docs here I put the link of the developer docs.
01:07:19.880 - 01:07:45.968, Speaker A: This is really the root of the documentation. The more maybe for you guys, more interesting is this one developers. And there should be a section here about Create delegation. Yeah, there it is. Hopefully. Yeah. Okay.
01:07:45.968 - 01:08:29.008, Speaker A: So if you guys take a look at this is a tutorial essentially with coding examples on how to use the Create delegation. So I'm going to introduce quickly just because just to give you heads up, but it's very straightforward. Oh yes, sorry. It's the chart. There you go. Okay, so you can see here developers guides, Create Delegation. And you can see there are series of code examples both in Solidity and Web Three.
01:08:29.008 - 01:09:38.324, Speaker A: So using the Web Three library and interacting with the contracts directly. So, like I was saying before, it's a two step interaction. First you need a delegator that gives you approval to borrow and then you need the delegate that actually goes on the protocol and borrows on behalf of the user. So how does the approval or approved credit works? I can show insolidity quickly. It it yeah, you will need this is a concept that was not introduced before, but I'm going to introduce quickly. Essentially, Ave version two has also the concept of debt tokens. A debt token is whenever a user takes some debt borrows from the platform, it gets minted a token, right? This token tracks actually the debt of the user.
01:09:38.324 - 01:10:28.740, Speaker A: So whenever I go on the platform and I borrow 1000 die for example, I get 1000 debt die. Okay? These debt tokens are essentially what keeps accounting of what each user has borrowed. And for each asset that is listed in Ave, we have two different kind of tokens. We have stable dev token and variable dev token. Because in Ave you can borrow at two different rates, stable rate and viable rate. Okay? So to interact with the Create delegation and be able to delegate to a certain user, you will need the depth token address of the depth that you want to allow. So for example, imagine that I want to allow a user to borrow WBTC as variable.
01:10:28.740 - 01:11:38.792, Speaker A: Okay, I go here deploy contracts. Here there is the list of contracts that have been deployed in a minute. Actually here you see, I go WBTC and I find the A token, the stable dev token and the variable dev token. So imagine that I want to allow someone to borrow the variable WBTC on my behalf. Then I take this contract here, I can show you quickly. A Propsis contract has a delegate function, approved delegation. So with this you put the address of the person that you want to delegate the debt and the amount that you want to delegate.
01:11:38.792 - 01:12:42.844, Speaker A: For example, you can delegate maximum of you into 156 and the guy will be able to borrow forever, for example. And so you take the address of this contract, then you go back to the documentation, I will show you here. You see, it takes the stable depth token address, for example, it's the address that we took before and then it calls approved delegation with the address of the person that you want to delegate at the amount that you want to delegate. That's it. It's really simple and it's really powerful. So after that, the address of the user that you approved. So the borrower is able, if you caller of this function, have enough collateral, the entity that you approved.
01:12:42.844 - 01:13:44.672, Speaker A: So the borrower in this case is able to go to the protocol and borrow can do using the UI, can do using Web Three, or can do using Solidity for example using Solidity. If you allowed to borrow to a smart contract, the smart contract can call this function Lendingpool Borrow and it will be able to borrow on behalf of another user. That is the delegator address. Here the system will check underneath. Is the caller of this function have enough approval by this user? If yes, the user will be allowed to approve and will be allowed to borrow and we receive the asset even though the user doesn't have any collateral. That's it. With this functionality, really, what you can borrow is only limited by your imagination because what you can build is limited by your imagination because there are so many things, so many yield farming strategies.
01:13:44.672 - 01:15:06.640, Speaker A: For example, migrating one position from one wallet to wallet to another using an Air gapped or off chain wallet to borrow. So for example, imagine I keep my collateral in an Air Gapped machine because I'm worried that my everyday machine will be hacked, but I still want to be allowed to borrow against my collateral. Then, from my Air Gapped machine, I can allow my everyday wallet to borrow. So my collateral stays in my Air Gapped machine, so it's safe from hacks and I can still borrow and use the funds that I borrow and repay as well by repaying on behalf of the wallet. So it's really powerful, guys. Really. I gave you some ideas, but if you think there are other possible use case and you have other functionalities that you can build on top, really ping us on Discord or Stani or Me or Jordan or whoever you guys find more comfortable to interact with on Twitter or on Telegram and we will be happy to answer.
01:15:06.640 - 01:15:43.948, Speaker A: I think we are past the hour, so probably we can stop here. I think I forgot all the let me see if there is any question. Okay. Thanks, Matt. Can delegate repay debt taken by the delegate? Yes, of course. So if you are the delegator and the delegate has taken debt, the debt is factually his debt. Okay, essentially what happens is that I get the debt and the delegate gets the money.
01:15:43.948 - 01:16:20.760, Speaker A: So the delegate can repay on behalf of the delegator, but also the delegator cannot repay his debt without any problem at all. Yeah, I think we can go if you guys Twitter handle. Let me show Twitter handle. Okay, these are the handles of and the medium. And my Twitter handle is I don't remember, to be honest. This one D. Three D underscore.
01:16:20.760 - 01:16:59.490, Speaker A: If you guys have will it slide will poster here on Discord, I will put in the repo of the GitHub. So I will also add the slides to the repo and I can also send the slides on Discord. And again, I will make sure that I will fill up more information on the README of the GitHub. So I will try to cover everything that I plan to cover during this workshop. And there was no time, unfortunately. So if you guys have any other question, otherwise we can conclude here, I think.
01:17:04.180 - 01:17:28.136, Speaker B: Great. Thanks so much, Emilio. That was a really great session. And some great questions coming in from the hackers, from YouTube and from the Zoom call. And if anybody has any more questions for Emilio, you can reach out to him in the Sponsor Ave channel on Discord or directly on Telegram. And yeah, thanks so much, Emilio. That was great.
01:17:28.238 - 01:17:29.910, Speaker A: Thank you very much, guys, for Amy and.
