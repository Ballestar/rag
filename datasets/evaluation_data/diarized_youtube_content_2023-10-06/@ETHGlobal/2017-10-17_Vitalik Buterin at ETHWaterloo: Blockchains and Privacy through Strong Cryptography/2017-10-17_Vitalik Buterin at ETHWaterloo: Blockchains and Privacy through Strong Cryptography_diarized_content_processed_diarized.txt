00:00:09.890 - 00:01:18.086, Speaker A: Okay, so first of all, thank you all for coming. It's good to be back in Waterloo. I hope that people will find in this presentation at least somewhat interesting and informative because it is about a topic that people do often talk about quite a lot, kind of in passing, but doesn't tend to be as much of people talking about what does privacy on a blockchain actually mean in much more detail. So that basically is the thing that I wanted to try to get into a bit today. So first of all, what are blockchains good at, right? So blockchains are good at several things. So first of all, blockchains are good at ensuring that the state of some application so the current state of some application that the blockchain is trying to interpret is valid. So what that means is that they're good at ensuring that whatever the current state is, it got to what it is through some process that follows the rules.
00:01:18.086 - 00:02:11.386, Speaker A: So one simple example, well, the application could be a currency and valid could mean, well, it got there through a series of valid transactions. If right now I have 200 bitcoins, it means that someone actually sent 200 bitcoins to me. It's not the case that they just kind of popped in there somewhere out of thin air. So the system got to where it is in a way that follows the rules. They are good at ensuring transparency of process, which means that we can know how it got there. Not only do you know that the current state is the result of following the rules, you can actually know things about the transactions that got you there. So not only do you know that one particular account has some number of coins, you know when it got them, you know what transactions achieved that result.
00:02:11.386 - 00:03:05.790, Speaker A: Now, as we're going to discover over the course of this talk, there are ways to have transparency of process which is not absolute, but it's still a very desirable goal in many contexts and also irreversibility. So if some change to the application state happens, if, for example, I get 50 more coins and I go up from having 200 bitcoins to 250, then that's an operation that happens once and it stays as an operation that has happened. History does not revert itself. Now, blockchains are less good at currently two kinds of things. One of them is scalability. So blockchains currently process somewhere around three or six transactions a second. Lots of other applications process anywhere between ten and 100,000 and they're less good at privacy.
00:03:05.790 - 00:03:51.082, Speaker A: So for today, let's focus on privacy. So a blockchain is a fully public ledger. Anyone can see all transactions that are published to it. This over here is a screenshot of a site called Etherscan IO, which basically runs a node that contains a full copy of the Ethereum blockchain and everything that's happened in the Ethereum network and shows it in a way that's nice and pretty and somewhat easier for people to understand. So this over here is a transaction that goes from an account controlled by the foundation. This is basically transferring 1000 Ether from a cold wallet to a hot wallet. So anyone can see every single transaction that happened.
00:03:51.082 - 00:04:52.762, Speaker A: People can look up what the effects of the transaction were on Ether scan when it happened, where money was moved from, what address it was moved to, to what address it was moved to. So this kind of transparency is often good and it's good for several reasons. So first of all, there's the instrumental reason, which is that it helps guarantee integrity of process. So the fact that everyone can see and verify any transaction on the blockchain means that you have a kind of virtual army of 25,000 people or I guess more precisely, 25,000 computers on the Internet who are actually running. Software and making sure that the blockchain, as it is right now, actually did get to where it is through a series of transactions that all follow the rules. And also very often transparency of specific parts of the process or certain outputs of process execution is highly desired. So a few examples voting.
00:04:52.762 - 00:05:54.302, Speaker A: So people want to be able to see in a voting system that their vote was counted and they want to be able to see that the total was computed correctly. Charitable Organizations if you have a charitable organization, you might want to actually just make your finances fully open because this way you don't really have that much to hide and you're convincing people that your organization is running things in a way which is fully honest and reliable. Supply chain tracking. Where did Product X come from? You might have some series of links. Each of these links are represented on the blockchain and you might want to be able to trace back any single product through the blockchain if you have some kind of Identifier that identifies at least the specific product. Government Finance so this is an actual use case. I've talked to at least three governments about basically this is just use a state issued cryptocurrency that could be run on some kind of blockchain like system that would be used internally, basically between tax collection and payments of government expenses.
00:05:54.302 - 00:06:44.386, Speaker A: And this could increase transparency and limit corruption. Yay, so fund Signaling Theory fact when someone says at least three, they usually mean three. So what's not good about transparency? If you know someone's address, you can pretty much track how they spend their money. Now over here, I could have put up some clever, a clever screenshot that basically shows what my addresses are, but that would have unfortunately been a somewhat expensive demonstration in terms of my own privacy. But you can look things up on the internet too. If you know someone's address and you know who they send money to, you now know someone else's address. So if I know alice's address.
00:06:44.386 - 00:07:15.722, Speaker A: And I already separately know that Alice sends transactions to Bob. I now also know Bob's address. And then now that you know Bob's address, you can look up how Bob spends his money. And if you already know that Bob with some schedule sends some transactions to Charlie, then you can link those transactions up to transactions on the blockchain. And now you know which address Charlie corresponds to. So basically privacy leaks often end up being contagious. Also the same for non financial applications.
00:07:15.722 - 00:07:57.958, Speaker A: So the same sort of thing applies to just any kind of applications that use information to or that use the blockchain to record information that has to do with relationships or information that has to do with any kind of kind of sequential or repeated behavior. So what can we do about this? Basically nothing. Go home? No, we can do a lot of things. So this is a very nice and pretty website. It looks really nice. They probably stole a couple of fonts to make it look like something made by Google. This is something called a mixer.
00:07:57.958 - 00:08:45.402, Speaker A: And the idea basically is it's a system where you send bitcoins to the mixer and the mixer sends bitcoins to other addresses. And basically these are also other addresses that are controlled by you. But the idea is that the system does not leave any kind of open link between the address that your bitcoins came from and the addresses that the service is sending the bitcoins to. So this is a diagram, this is a fairly low tech solution. You have a bunch of people on the left, they send coins and this could be implemented in basically any blockchain into. And the reason why there is a happy face in the middle there is that the thing in the middle is basically just a guy like everyone else. And so there's a guy in the middle that operates the system.
00:08:45.402 - 00:09:18.130, Speaker A: Everyone sends some coins to a guy and the guy sends some coins out to some new addresses. And there is obviously going to be some kind of one to one mapping between the happy faces on the left and the happy faces on the right. But this mapping is not public. It is known only to the mixer in the middle. And therefore, if you trust the mixer, then this gives you privacy. If you do not trust the mixer, then you can go basically repeat the process five times. And as long as one of the five mixers is one that's trustworthy, then you've achieved a privacy gain.
00:09:18.130 - 00:10:01.730, Speaker A: So security properties, strong privacy. If you trust Bob over here in the middle, you keep your money. If you trust Bob over here in the middle, requires ongoing use to maintain privacy. So mixing is something that you just have to keep on doing if you want to make sure that your transactions cannot be easily linked to your other transactions. Now this is one category of solution and I will point out that it's a category of solution that can be easily expanded to applications other than cryptocurrency. And that's something that I will go into later. We can also talk about other solutions.
00:10:01.730 - 00:11:09.400, Speaker A: The general category of interactive security based applications and there are many different kinds of constructions in here, including state channels, including plasma, including Ryden, including just a whole bunch of things that work in somewhat similar ways. The general principle here is don't use the blockchain for every transaction. So instead of using the blockchain for every transaction directly, you can conduct activity on some kind of off chain layer. But the off chain layer is specifically designed in such a way that if the parties in some particular interaction on the off chain layer disagree so if there is a dispute, then you can just push everything onto the chain and everything just actually gets adjudicated and resolved on the chain. So you're kind of using the blockchain as a court. The reason why courts provide security is not because they adjudicate every single transaction, but because number one, they adjudicate the transactions that do end up going through them. And number two, the threat of a transaction going to court basically means that people have much less incentive to try to cheat in the normal case.
00:11:09.400 - 00:12:17.162, Speaker A: So basically because the on chain resolution makes triggering a dispute expensive, usually you never need to use it at all, except you do need to use the chain to enter or exit a system. This was originally conceived first and foremost as a scalability technology. So basically because every one of these transactions is happening off chain, it is a transaction that does not have to contribute toward the currently fairly low transaction limit of existing blockchains. But it has other benefits like privacy. So basically, if you look at a state channel, for example, so this is an interactive system that operates between two parties. In the simplest case then if these two parties have 500 interactions between each other inside the channel, these interactions are all fully private because they're fully private in the sense that the only two people that know about those interactions are just those two participants. Now, the entry into the channel is still on the blockchain, it's still public, the exit is still public, but everything in the middle is private.
00:12:17.162 - 00:13:05.178, Speaker A: So this is one kind of technology that will achieve some benefits. Now, there are many different people working on various kinds of this. One thing that people often talk about in the context of privacy is this idea of private chains. The general idea of a private chain basically is hey, let's have a blockchain. But instead of having a blockchain where everybody gets to be a node and everyone gets to download and verify the data, let's have a blockchain where only a few people gets to download and verify the data. And these few people are like big institutions like banks, which are obviously reputable and they're never going to cheat you. You get a scalability gain and you supposedly get a privacy gain.
00:13:05.178 - 00:13:51.850, Speaker A: Now, private chains tends to usually be split into two categories. The first category is consortium chains. So basically just take ten banks and put them on the same chain. And the second is fully private chains that are controlled by one entity. So the former really should not be viewed as giving you privacy because it's like okay, so instead of putting your data onto a platform where everyone can see it, you're putting your data and your customers data onto a platform where only your ten biggest and closest competitors can see it. You're supposed to laugh. And the latter by default is basically just a centralized server.
00:13:51.850 - 00:15:04.322, Speaker A: So there are systems where you create a kind of consortium chain like architecture where you go down to ten to 50 nodes, but then transactions are encrypted and for each individual transaction only a few people see the decryption key. Now, if you do this wrong, then you're basically completely sacrificing guarantees of process integrity because basically you might have situations where any particular process could be affected by some encrypted transaction that happened somewhere else. And this transaction is one that you don't have the key for. And later on it turns out that basically everyone accepted this transaction, but this transaction just does something that completely mismatches with something that happened by some other transaction that happened to be encrypted under a different key. If you do this right and you can do this right, then this is basically a state channel or plasma like system. So there are architectures that use this sort of stuff that do make some sense, but you do have to think somewhat carefully about how you use these kinds of architectures. And quite often a lot of this actually does end up being possible on a public chain as well.
00:15:04.322 - 00:16:03.734, Speaker A: So basically my general advice is treat multiparty party ledgers basically as if they are public and build applications that use these systems in ways where you can make sure that the private data doesn't get on the ledger or at least only gets on the ledger in an encrypted form in the first place. And the challenge is how do you do this while achieving guarantees of integrity of process at the same time. So how do you encrypt data and yet at the same time prove that basically your encrypted data satisfies subset of rules with normal kinds of encryption. This is not supposed to be even possible because encryption is supposed to output things that look like random gook. But as we'll see, there is advanced forms of cryptography that actually can do some interesting things. So let's start with ring signatures. So the original Motivating use case for a ring signature is this story.
00:16:03.734 - 00:16:58.550, Speaker A: Suppose you have a diplomat who wants to leak a trade agreement and the diplomat wants to prove his status so he wants to prove that he actually is a high ranking diplomat that actually has access to the real trade agreement in order to show that the leak is credible. But the diplomat does not want to reveal his identity, know he likes his life and he does not want to go hiding out in Moscow for the rest of his life. So the diplomat creates a cryptographic signature that proves that he is one of some set of people, but reveals zero information about which one of that set of people he is. It turns out that it's possible to use fancy math to actually do this. Now here's the fancy math. As you can see, a ring signature actually looks like a ring. It takes all the public keys in the darkness, binds them, blah blah blah.
00:16:58.550 - 00:17:54.410, Speaker A: If he wants to get a kind of two sentence description of how this mathematically works, the basic idea is you can think of it as actually being a literal ring in the sense that you start with a number then for every participant in the ring. So for every public key, so for every individual that could be the signer. Basically you hash the number, but you don't use a regular hash function. You use a special kind of hash function where if you have the private key, then you can compute it backwards. But if you only have the public key, then you can only compute it forwards. And what a rig signature looks like is it looks like a series of numbers where you start with some number, then you hash it, you get the next number, then you hash it, you get the next number, you hash it and hash it again. And after you hashed it the last time, then suddenly you realize that you just get your original number back.
00:17:54.410 - 00:18:38.454, Speaker A: And now normally this is not supposed to be possible unless in at least one of these places you're capable of actually of reversing the hash and calculating it backwards. So basically, unless you have the trap door in at least one place, you cannot make this kind of ring. If you do have the trap door in one place and it doesn't matter what place, then you can make the ring. But the ring itself reveals nothing about which one of the trapdoors you have. So this is the basic principle about a ring signature and if you want to learn more, feel free to look up the word ring signature on Google. There is lots of very good math there. There's something called a linkable ring signature as well.
00:18:38.454 - 00:19:42.058, Speaker A: Now, you can think about a linkable ring signature as being a kind of specialized ring signature. That leaves what you can think of as being a cryptographic trace of which member of the ring signed it. Now, the cryptographic trace in itself is not useful for determining which member of the ring actually signed it because if it was, then it would lose the purpose of being a ring signature. Now what is the trace useful for? Well, two signatures from the same person are going to have the same trace and that can be detected. So the trace is not useful for figuring out who signed a rank signature but it is useful for identifying pairs of rank signatures where the same key was used to sign both of them. Now what does this give you? Well let's first of all look at this in the context of a voting scheme. So in the context of a voting scheme you have some set of people and you can think of each of these people as being represented by a key.
00:19:42.058 - 00:20:51.540, Speaker A: You want each of these people to be able to vote but you only want each of these people to be able to vote once and you want each of these people to be able to vote privately. So well what kind of cryptography makes sense for a vote? Well we can try a ring signature. Now how do we prevent people from voting twice and how do we prevent people from voting twice without compromising any privacy? Well, linkable ring signatures basically provide exactly the right properties. Another obvious use case, better mixers. So basically you can see that here we can replace Bob with cryptographic magic. Now maybe there's going to be some politicians complaining about Bob's unemployment but oh well, I'm sure Bob can find other work to do because the crypto space is booming. So basically you have cryptographic magic here and cryptographic magic does basically the exact same thing that Bob did before except cryptographic magic just is ring signatures and anyone can trust the result.
00:20:51.540 - 00:22:05.622, Speaker A: And basically number one, you do not need to trust Bob to keep your money and number two, you do not need to trust Bob to keep your privacy. So this is an improvement. But there's other interesting use cases of the blockchain as well. So here's one interesting one, identity oracles. So person P, so we'll say person Paul proves to entity X, so we'll say Xylophone that they are a unique human so that they might be a citizen or non citizen of country Zimbabwe and entity Xylophone adds Paul to an on chain whitelist. What is the purpose of the whitelist? Well, the whitelist is a kind of generic public utility that can then get used by blockchain applications and smart contracts that require this notion of identity verification. So if you have an application that has some need to either only accept, let's say one account from each individual human, so not allow people to create 10,000 accounts or let's say you want to accept people only from some countries, not accept people from some countries.
00:22:05.622 - 00:22:35.870, Speaker A: Well you can use this whitelist and it's something that's on the blockchain, it can be publicly queried and gives you the information that you need use cases. So regulatory compliance. So if you have some applications then you can do things like excluding individuals from specific countries. So, for example, seems to be popular to exclude US. Citizens for a lot of applications. And sometimes you might want to exclude north Koreans as well. There's a bunch of lists.
00:22:35.870 - 00:23:34.386, Speaker A: It's complicated. You might also want to limit the dollar amount per person. So, for example, one way in which you might avoid hitting some regulatory thresholds is by creating an application where you might only allow each person to process, let's say, $999 worth of some currency that you're creating. And a lot of countries have various laws in various contexts that say that if you fall under those thresholds, then you don't need to collect certain kinds of KYC information or worry about certain things. But if you go above the thresholds, then you do. And basically with this kind of technology, you might be able to an application might be able to prove that it complies with these kinds of rules without revealing extra information about actually which individuals participated in the system. Civil resistance.
00:23:34.386 - 00:24:16.258, Speaker A: So make online polls more secure, including very highly informal polls like the equivalent of Twitter updates or sorry, twitter upvotes. All right, sorry, upvotes are on reddit. Twitter has likes and retweets. I forget. So basically, you know, you can create systems where you have one person, one account, but at the same time, people cannot be unique people, individual people cannot be linked to the individual accounts that they're using. There's also systems like quadratic voting. There's many different kinds of game theoretic mechanisms, and a lot of them actually do require this notion of civil resistance in order to achieve their security.
00:24:16.258 - 00:24:42.074, Speaker A: So there are a bunch of use cases for this sort of thing. So the question is basically, how do we achieve this in a way that also preserves privacy? So Paul proves to xylophone that they are a unique human. They might have a video call. They might show a passport. They might do a bunch of things. A xylophone might run some machine learning algorithms. They prove that they're a human.
00:24:42.074 - 00:25:27.498, Speaker A: They might prove that they're a citizen of Zimbabwe, but they're not a citizen of Zambia. And so then entity xylophone adds Paul to an on chain whitelist, and we'll call this whitelist. Let's say willy. Paul publishes a ring signature that proves membership in Willy. So Paul proves that his public key is part of Willy, without revealing which member of Willie he's proving himself to be at this particular point in time. Willy is actually represented by an on chain smart contract. And this smart contract verifies that the signature is correct, and it verifies that the cryptographic trace does not match any other cryptographic trace that has already been used.
00:25:27.498 - 00:26:32.590, Speaker A: And if it verifies a signature, then it admits some other accounts that Paul specifies to another on chain whitelist. So we'll have a second on chain whitelist, and we'll call it Walter. If you have an account in can, then you can have an account in Walter. You can use a ring signature to prove that you have an account inside of this whitelist Willie. And if you do this, then the smart contract that controls the whitelist Walter will assign you one account in that whitelist as. So Walter has exactly the same properties as Willie, exactly the same membership as Willie, except even the entity that manages the entire system does not know the specific mapping of individual to account. So basically, this is the sort of thing that you can do with rank signatures, right? Basically, you can maintain kind of civil resistance, you can prove membership in arbitrary sets, and you can do all of this basically without compromising privacy.
00:26:32.590 - 00:27:37.554, Speaker A: So for the first time in history, we can have fully privacy preserving civil resistance, fully privacy preserving proof of being a citizen of Zambia, not being a citizen of Zimbabwe, not being a citizen or not being a resident of the state of New York, et cetera, et cetera. And this is something that actually has already been implemented on the Robston test network, ZK Snarks. So ZK Snarks are I view them as being kind of like one of the three cryptographic god particles, where the other two would be fully homomorphic encryption and indistinguishability obfuscation. And it happens to be the one of the three cryptographic god particles that's actually the easiest to implement. Now, why do I have so much respect for the technology? Basically because it's super generic. And what that means is that you can use it in a really huge amount of cases. ZK Snarks generalize, they generalize ring signatures, they generalize regular signatures, they generalize a whole bunch of things.
00:27:37.554 - 00:28:16.778, Speaker A: They are this kind of really super powerful thing that kind of encompasses all of the above combined. So here is what they do. Ezekie Snark lets you prove that you know some number or some piece of data. X, which satisfies F of X equals y, f is a program and F is public, y is also public, and X can have some secret parts and some public parts. Now, Ezekiel Snark comes in the form of a cryptographic proof. So the cryptographic proof basically just is a bunch of what's called elliptic curve points. And the total amounts of data you need to express them is 288 bytes.
00:28:16.778 - 00:29:03.418, Speaker A: And a ZKS narc can be verified in constant time, even if the original program takes hours to execute. Now, another important property is ZK Snarks satisfies your knowledge property. So they prove that you know this number, but they say nothing else about what that number is. Now, there is a prover side overhead, just to warn you, with a large constant factor. So basically, expect making one of these proofs to take thousands of times longer than it takes to actually compute function F normally. But even if proving takes a long time, verification is more expensive than other things. But other things, but it's still relatively cheap.
00:29:03.418 - 00:29:41.546, Speaker A: If you want to know much more about the Gory math behind this, I wrote this big long three part series of articles about it. After researching the topic for a few months, it's hard, but hopefully you can pour through it. Yes, this will be on the exam. So ZK snarks can do linkable ring signatures. So this is actually kind of fun. So basically here's just one kind of sketch of how you might use ZK snarks to do linkable ring signatures. So any individual's private key is going to be some number X.
00:29:41.546 - 00:30:41.726, Speaker A: Their public key is going to be the hash of X and the trace is going to be the hash of X plus one. Now, if you want to make a ring signature then basically now as we remember, F can have is a program and Y is going to be well, we'll just set Y to be one and X can have private parts and public parts. So the private part of X will be your private key and the public parts of X will be well, number one, the entire list of public keys that you want to prove membership in and number two, your trace. Now the reason why the trace has to be public is basically so that if someone makes two rig signature, two signatures with the same key, then they can be mapped to each other. So the function F does two checks. First of all it checks is the hash of the private key, one of the public keys. And the second thing is it checks that the trace actually is the hash of the private key plus one.
00:30:41.726 - 00:31:16.790, Speaker A: If both of these pass then it returns one. Otherwise it returns zero. And we're looking for Y equals one. So we want to prove that both of these things actually are true. And so in this way, basically you can kind of turn the functionality of a linkable ring signature into the language of a ZK snark. And this is roughly what Zcash actually does. Zcash, by the way, is a cryptocurrency that uses zkSNARKs as basically the critical part of its strong privacy solution.
00:31:16.790 - 00:31:59.394, Speaker A: And it has actually been using this technology for basically almost an entire year, actually something like 355 days as of today. So congratulations Zcash for almost surviving an entire year. So basically what are the use cases of ZK snarks? Well, you can prove integrity of process. You can provide selective transparency. So you can be transparent about whatever you want. You could be private about whatever you want with no compromise of privacy to anything that you want to still keep secret. There are a couple of exceptions.
00:31:59.394 - 00:32:41.830, Speaker A: So for example, timestamps so you can't hide when transactions happened, even if you're hiding their contents. And also the ZK Starks by themselves do not hide IP addresses. But there is other technology that can fill that gap. So this is basically kind of the ultimate partner technology to. Blockchains. And the reason why I say this is because blockchains are good at providing guarantees of correctness of process and authenticity and they do this at the cost of privacy and zkSNARKs basically give you back the privacy. Now, Ring signatures also give you back the privacy, but they are a kind of more efficient but more limited tool for a subset of applications.
00:32:41.830 - 00:33:29.022, Speaker A: So zksdarks have some limitations. So it takes a while to make a proof. Verification is more expensive than verification of other things. The tooling to easily use zero. Now, Azksnarks is not yet fully out there, and there is this weird thing called a trusted setup, which basically means that because of very weird details in how the cryptography works, actually, in order for the whole system to work, basically there has to be this ceremony that was run by six people. And these six people did do this cryptographic ceremony to generate what's called a proving key. Now basically, if all six of these people were dishonest and colluded during the ceremony, then they could maintain the right to create fake proofs.
00:33:29.022 - 00:34:28.626, Speaker A: So they cannot compromise privacy, but they can maintain the right to create fake proofs. As long as at least one of the six people actually did delete the data that they used to participate in the ceremony after they participated, then the system is fully safe and no one can cheat it. Now, in the case of Zcash specifically, we do have some fairly good evidence that they deliberately provided that shows that all six of the participants actually deleted the data after they participated in the ceremony. But if you want to create a trusted set, do Zero knowledge Proofs or ZK Starks for some different function f, then you would basically have to create a trusted setup and you'd have to repeat this process and you have to make sure that it's done well. So these are limitations. There are new kinds of zero knowledge proofs called ZK Starks. So St Ark instead of Snark that resolve particularly the last issue and some other issues, but that's still in the pipeline.
00:34:28.626 - 00:35:11.586, Speaker A: So what can you as a victim of the Ethereum Waterloo hackathon do with privacy technology? So, first of all, things that you can do now well, you can think about low tech ways to improve privacy. So simple thing just to use different accounts for different applications. Try to avoid unnecessarily leaking information on the blockchain. If you can get away with putting a hash of something on the blockchain instead of putting the original thing, then do it. Just small things like that. Number two, use state channels. Get excited about state channels, a lot of state channels soon ring signatures.
00:35:11.586 - 00:36:32.430, Speaker A: So Ethereum is launching an update in a few days and this called Byzantium, which will introduce support for different kinds of cryptography including rig signatures and ZKS Narcs. And soon it will be possible to actually use these technologies to build applications on top of them. Now if you want to experiment with this stuff. Now I actually do encourage people in the hackathon if they are technically capable to definitely try experimenting with rink signatures and just with any features of the upcoming Byzantium fork. We do have a small prize that we're impromptu announcing three Ether for the most interesting use of new Ethereum Byzantium features, including the various cryptographic operations. So yeah, feel free to look into that, hack into it and try to use that to do interesting things. And later on we do expect there to be better and better tooling for actually implementing things like ZK Snarks where basically the experience for working with all of these spooky cryptographic god algorithms is basically just going to look like writing a program for a computer.
00:36:32.430 - 00:36:47.300, Speaker A: And once we get there, then writing applications that are both private and secure will be much easier and much more interesting and hopefully a lot more fun. So thank you all. One.
