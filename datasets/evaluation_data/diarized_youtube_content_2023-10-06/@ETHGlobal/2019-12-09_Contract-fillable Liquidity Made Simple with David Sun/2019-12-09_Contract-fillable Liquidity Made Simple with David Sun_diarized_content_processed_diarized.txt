00:00:00.170 - 00:00:17.866, Speaker A: Everybody. I'm David Sun. I'm an engineer at Zero X. I've been working on a lot of varying projects. Some of the things I'm going to talk about today, I've worked on it for a good chunk. So it is kind of like my little baby. So if you guys tear it apart, it's going to burn.
00:00:17.866 - 00:00:58.750, Speaker A: But I'm open to feedback. So today we're going to talk about contract fillable liquidity, specifically in the context of zerox. So just kind of start I just want to gauge the crowd is how familiar are everybody here with DeFi in that space? I guess if you are very familiar, just, I guess strongly raise your hand if you're not just halfway. All right, cool. Just to kind of give a glimpse of what contract fillable liquidity kind of means, I'm not going to go into a very technical definition, more so highlight what that implies to you guys as smart contract developers. Really, you could start thinking, oh, it didn't come out, I'm sorry. Okay, we have to show it like this somehow.
00:00:58.750 - 00:01:38.170, Speaker A: The graphics didn't come through. But you could think of DFI as like a ton of money Legos, right? Just like Standard Legos. You could build them around and build really awesome stuff. A singular Lego component really doesn't do much, right? But ten Lego parts, now you got yourself something really cool, right? So this kind of DFI dual toolbox has really been starting to build up over the last year or two, right? So Zero X, you could think of it as just another money Lego. We just describe ourselves as contract fillable liquidity. But that's kind of our way of saying, this is our Lego part. That's the name of our Lego part, which is enabling exchange for all of your smart contracts.
00:01:38.170 - 00:02:21.630, Speaker A: This is kind of a new kind of not a necessary position, but just a way of how we like to describe ourselves. We're a community owned liquidity API, meaning that we'll allow you to do all of the exchange you do, and it's meant to be owned by the users through Xerox. And this kind of really creates this kind of context that we really do want you guys to treat Xerox kind of like it's like the one stop shop money Lego for all the exchange needs you want. So if you guys are very familiar with our protocol, we have V Three coming out. And with V Three, we got some really awesome stuff coming through. We got our mesh peer to peer network. We're going to start powering a global peer to peer network of global liquidity.
00:02:21.630 - 00:02:50.370, Speaker A: We're going to start integrating Kyber and Uniswap into our liquidity pools as well. So you're going to get the best price from everywhere, right? So we're really trying to extrapolate all of this kind of complex nuance you would have with getting the best price, getting the right assets. We're going to all wrapped it up into Xerox. So all you have to think about is let's get zero X working as a Lego part instead of just getting ten Lego parts, which should be doing all the same thing to work together, right? So you could see we want to give you the best Lego part metaphorically.
00:02:51.750 - 00:02:52.500, Speaker B: Cool.
00:02:52.870 - 00:03:40.738, Speaker A: So, yeah, I kind of already highlighted this, but the main goal with the community owned API language here is to really remove as much of the headache as we possibly can. And Xerx has been we spent a large chunk of our year really working hard to give you guys the best price. We are an exchange protocol and one of our definitive product features to give your users the best market price you could get for a lot of these assets. So here's kind of like you could see this diagram or I guess just all the data here on Xerox.org assetswapper, if I remember. But here you can see that we actually have some competitive price for $10,000 buys for ETH die markets. And this is due to the work of a number of market makers on our of.
00:03:40.738 - 00:04:20.954, Speaker A: Before I go into how actually we could power CFL, a lot of you guys familiar with Kyber or Uniswap just get in. Our protocol is actually quite synonymous with how those two work. So I'm just kind of like give you guys almost like if you guys know Uniswap, you could actually translate that knowledge rather easily over to the Xerox side, right? So for uniswap, if you were to perform a market buy, which just means like, hey, I want to buy like ten die, I'm willing to pay this ambiguous amount of Ether, right? So we're going to try to get you the best price for that ten die.
00:04:21.002 - 00:04:21.454, Speaker B: Right?
00:04:21.572 - 00:04:54.086, Speaker A: That's a market buy in our context, but you could think of it for uniswap, which is the second line, that's just a token to token swap output. That same kind of functionality you would expect from that function on Uniswap just done through Xerox. And in the context of Kyber, they don't actually have a market buy functionality. Instead, they just have a market sell functionality. But you could think of it the same case, I want to sell ten ether, give me the most amount of die, right? That's a market sell. The same kind of equivalent in Uniswap is token to token swap input. And for Kyber that would be swap token to token.
00:04:54.118 - 00:04:54.266, Speaker B: Right.
00:04:54.288 - 00:05:40.086, Speaker A: And they have their different kind of parameter configuration. They use a different kind of design. But if you guys have already used those kind of protocols, this is the kind of same exact fundamental thing that's happening behind the scenes. But we would actually do for you, actually, is look out for Kyber prices, uniswap prices, prices on the Xerox mesh network and then aggregate those all in the future so you get the best price. So instead of saying choosing between these three, you only have to do Xerox and you have the peace of mind to say that Xerox is working on your behalf and going out and finding all the best prices available. So, yeah, Xerox CFL in a nutshell, this is kind of like a very high level overview. I'm kind of going to go over some of the technical stuff, but I'm definitely going to be a lot more brief about it.
00:05:40.086 - 00:06:21.430, Speaker A: So you guys just feel free to talk to me in person if you really want to learn the nuance about it and we have a number of great resources to help out with that. But Xerox CFL in a nutshell, if you guys are very familiar with the Xerox Protocol, unlike Uniswap or Kyber where everything is on chain, we use kind of like a promise called an order that is I guess, distributed off chain. And the main reason we do that is for speed. This means that the price in a market can adjust at the pace of the internet instead of waiting for consensus on the blockchain. So that's why I think we have been able to enable such great prices for the ETH Dai market, for USDC to dye market.
00:06:21.500 - 00:06:21.782, Speaker B: Right.
00:06:21.836 - 00:06:33.894, Speaker A: So with that though, I think compared to Uniswap, we do have to add this extra kind of parameter. You would have to pass on chain, right, because all of our liquidity lives in off chain orders.
00:06:33.942 - 00:06:34.154, Speaker B: Right.
00:06:34.192 - 00:07:24.646, Speaker A: So in the context of traditional CFL integrations you would make with Uniswap you only really had smart contract parameters, right. To tap into the Xerox liquidity you would also want to pass an additional parameter that literally is just a bundle of Xerox orders, which is our representation of liquidity. That's kind of like the main fundamental difference. And you would wonder how in the heck would I generate Xerox orders? Where do I get these? How do I get these? And I guess the main question is where? Right, so with that this kind of comes in. We built a package called Asset Swapper. Asset Swapper, you could really think of it as this massive convenient package that says give me a place to look for orders and I will give you all the orders you want. I'll bundle it up for you in the way you want and all you have to do is just pass it on.
00:07:24.646 - 00:07:26.774, Speaker A: We'll do all the hard work for you on your front end.
00:07:26.812 - 00:07:27.014, Speaker B: Right?
00:07:27.052 - 00:08:29.050, Speaker A: So this is kind of a diagram of kind of the three step we have highlighted on our marketing website, sources, orders. In the future it's going to be coming through mesh, it's going to come through any other endpoints you want to pass into it. And then we take these orders and transform them in a way that you would like to consume it with. Right, so yeah, this kind of gives you a deeper dive, what's actually happening? Assetswapper, to be clear, is an off chain library. It makes interacting with the smart contracts of the Xerox Protocol on chain. Incredibly, incredibly, incredibly easy, right? So you could imagine you still have your Web Three code that you're using to interact with your own smart contracts. You would just now have an additional package called Asset swapper and with asset swapper you could pass in like a radar relay endpoint and then all of a sudden now you could tap into Radar's liquidity which has a number of market makers creating some really awesome prices there, right? So you take assetswapper with your Web Three code and now you can effectively pass in both Xerox orders and your own parameters on chain, right? So this is asset swapper.
00:08:29.050 - 00:09:03.526, Speaker A: I think we can give you a number of different output but the most easiest one to work with is call data. We'll literally just give you here's a call data here's even the address to call it and then just pass it on chain and then you could just do a one liner call. But if you actually want to know what's inside, there's also we have dev utils. There's a number of ways to interact. Act with a zero X protocol swapper makes it as easy as possible or also as customizable as possible. If you guys really want to build something that's very complex, very gas efficient, swapper could also help there too. So yeah, I'm just going to go over the main kind of like Golden Path of using swapper.
00:09:03.526 - 00:10:10.222, Speaker A: Swapper comes in with a number of tools. Mainly there's two large components of swapper one called the swap quoter and one called the swap quote consumer. So these you could think of as two parts of a so swap quota gives you a quote, right? So you give it an endpoint from radar relay or from mesh and then it's going to go out there, find you the liquidity package it all up for you in a way you can render it out maybe to your UI on react or monitor your prices, right? And then the consumer will take that quote in and then convert it into a form your smart contracts would want to use. You can imagine swap quote swap quoter kind of like here's a quote is this actually what you want? And then if you actually want to make an execution then you use a consumer, right? So that's kind of two part relationship of asset swapper. So, yeah, here's just kind of the quote, the code related to consumer, you would instantiate it and then you could literally just pass in a quote and then will just give you call data. And with that call data, you could just call it in your smart contracts, which is a little bit hard to read here, but all this code is on a GitHub link. You just call it with one line.
00:10:10.222 - 00:10:29.666, Speaker A: All the other code here is just kind of doing some double checks like checking did this actually happen? Should we revert if the order failed or whatever. But really there's only one line of code you really should be concerned with, which is how we're calling Xerox protocol Smart Contracts, and that is already given to you through swapper. So you only had to pass it in as an additional parameter in your smart contracts.
00:10:29.698 - 00:10:29.846, Speaker B: Right.
00:10:29.868 - 00:10:55.234, Speaker A: So in the case of like, what's a simple example? Let's just say you want to create like a basket token. Like Set has an additional parameter called order information, and it's an arbitrary bytes call data parameter. So that's their way of saying, like, I could take an arbitrary liquidity information and in the context of Xerox, they take a ton of bytes that says orders and then they decode it and then they fill it out. They fill it with the Xerox protocol.
00:10:55.302 - 00:10:55.678, Speaker B: Right.
00:10:55.764 - 00:11:45.210, Speaker A: So you can kind of imagine what's happening here is there's that one extra parameter you want to expose and swapper will make it as easy as possible to get you that parameter to send up. So, yeah, kind of to go back into almost like my pitch sales. So I guess many people would be addressed, which is like, this definitely has a little bit more complexity compared to Uniswap or Kyber. And I think one of the biggest compelling reasons you would ever tap into building this into your protocol is that one is the future of zero x is going to be very cool in the context that we're going to aggregate all your liquidity. And then we have a number of awesome extension contracts that's going to allow people to tap into other novel assets like ERC 720 Ones, 1155s. If Auger is going to start supporting seven seven seven s, we can propose a zip and you could tap in all of these different liquidity.
00:11:45.290 - 00:11:46.926, Speaker B: Right? Yeah.
00:11:47.108 - 00:11:57.490, Speaker C: What if somebody is representing themselves on multiple DEXes but they actually are sharing the same liquidity?
00:12:01.190 - 00:12:03.614, Speaker A: So what do you mean by representing yourself on multiple DEXes?
00:12:03.662 - 00:12:09.266, Speaker C: You might have an order on you might have an order on Air swap.
00:12:09.378 - 00:12:11.506, Speaker B: Or like an open quote on Air swap.
00:12:11.698 - 00:12:20.310, Speaker C: So those two might both refer to the same tokens and actually, if you executed one, it would work, but not the second.
00:12:20.460 - 00:12:39.738, Speaker A: Yeah, that's actually a great point you brought up. So currently in V two protocol, that would probably be a very jank thing to pull off. But in the V Three protocol, we have something called bridge contracts. And with these bridge contracts, you could theoretically tap into liquidity that is metaphorically locked up in another contract or another liquidity protocol.
00:12:39.834 - 00:12:40.094, Speaker B: Right.
00:12:40.132 - 00:12:55.934, Speaker A: So I think there's been a lot of ideas playing around that you have to lock up your money in dYdX to margin trade. We could find a way to use a bridge contract to allow you to effectively use that same token that you're using to put up as margin in dYdX, but also use it for zero X liquidity.
00:12:56.062 - 00:12:56.354, Speaker B: Right.
00:12:56.392 - 00:13:28.846, Speaker A: So we can actually the same exact token, but use in two places almost. And that's all powered through bridge contracts, which is all in V three, which is coming in a few weeks. So yes, it's possible and I think that's really where the cool stuff comes in. So yeah, I kind of already alluded to this, but you could support a number of different assets. 720 oh, there's a two C's, there 27, 20, 111, 55s. We also have this thing called a multi asset proxy allowing you to bundle assets almost like in the context of a hearthstone, like a booster pack of cards. We could do all of that which most of the other protocols can't do.
00:13:28.846 - 00:14:11.946, Speaker A: We also have these bridge contracts which I kind of alluded to which you could tap into liquidity that is previously untappable in the context that it could be collateral locked up in your dYdX margin account and compound or whatever. We could create token abstractions around stablecoins. A lot of these cool stuff are all powered through just kind of we just generally labeled it as a bridge contract. And that's also how we give you like kyber aggregation, uniswap aggregation, all of that. So that's all coming in v three. But for the most part, the interface of zero X is not going to change with v three. So if you integrate it with v two right now, you get all these features with it in the future and in future upgrades we have made it a very big part of our upgrade pipeline is not to screw up the interface for you guys.
00:14:11.946 - 00:14:15.760, Speaker A: So just one integration and you get all the power of zero X as we grow.
00:14:16.690 - 00:14:17.102, Speaker B: Cool.
00:14:17.156 - 00:15:08.442, Speaker A: So what can you build? This is kind of just like this is actually, I would say not even touching the actual, I guess, cool parts of what you could build with swapper with CFL, but you could build stablecoin converters just from different volatile based volatility, stable coins from Dai, USDC, whatever. You could do stuff like that. You could build DeFi banks. This is what kind of instadap has already been building and using our liquidity to maybe move USDC to Dai and then put in a CDP there's smart contract wallet stuff you could do, let's just say like Argent. And also I guess with the new multilateral Dai, I think it will be really cool if I could say I send ether and immediately diversifies my ether into the eight other collateral assets and then makes a maker vault for me and I pull out Dai. It could auto diversify my collateral. That could be stuff we could power with the Xerox liquidity.
00:15:08.442 - 00:15:22.846, Speaker A: And then also many of these other DeFi protocols like Set dYdX maker, they all have these different liquidation systems where you could write it like a bot that liquidates, I guess margin or whatever. And then you can immediately sell that with Xerox liquidity for a profit.
00:15:22.878 - 00:15:23.122, Speaker B: Right.
00:15:23.176 - 00:15:27.300, Speaker A: It's almost an Arbitrage, so that could all be powered through swapper as well.
00:15:28.150 - 00:15:28.562, Speaker B: Cool.
00:15:28.616 - 00:15:51.510, Speaker A: So resources, we have our marketing page, these are all QR codes. Maybe just take a picture. So you have these all with you? We have assets swapper. Docs I think one of the better resources are actually getting started. Project code. It's the golden path of how to use swapper with your code base. It currently uses the Covon network on radar relay, but feel free to ask me if you want to give it custom orders or you want to use it with mainnet.
00:15:51.510 - 00:16:05.460, Speaker A: We also have some code that actually is used in production by other protocols. So you could kind of check that out. It's like set protocol stuff, dYdX stuff. You could actually see it happening in the wild when millions of dollars piped through.
00:16:06.390 - 00:16:06.898, Speaker B: Yeah.
00:16:06.984 - 00:16:28.130, Speaker A: So also other resources. We have a Discord, we're all very active on it. Feel free to ping us with any questions there. And if your project really starts to take off the ground, we're always happy to help. We have an EAP program that helps kind of really bootstrap projects using Xerox. We also give a ton of infrastructure credits like AWS stuff, DigitalOcean Alchemy. It's kind of like an inferior.
00:16:28.130 - 00:16:37.260, Speaker A: We also have rivet. We have a number of ways to help you guys both one to one and also giving you guys some support on getting your stuff to the next level.
00:16:38.030 - 00:16:38.490, Speaker B: Cool.
00:16:38.560 - 00:16:40.586, Speaker A: Is there any questions for me?
00:16:40.688 - 00:16:44.570, Speaker C: Yes, the CFO stuff is not new, right? It's not part of BT.
00:16:46.130 - 00:17:12.566, Speaker A: Yes, we've been working very hard on it since the summer. We have coined a term internally for a very long time. We have definitely made a very active effort to make it as awesome as possible in V Three because we have this opportunity to actually start upgrading Xerox protocol. So hey, we have learned a lot from CFL. How do we make V three better? Also to cater towards the CFL stuff. But yes, it has always worked for V Two, for V One, dy. DX has been doing it for a very long time.
00:17:12.668 - 00:17:13.078, Speaker B: Right.
00:17:13.164 - 00:17:17.922, Speaker C: So we built an ROI calculator for the liquidity providers for unitswap.
00:17:17.986 - 00:17:18.358, Speaker B: Yes.
00:17:18.444 - 00:17:20.306, Speaker C: And I even gave a talk on.
00:17:20.348 - 00:17:22.906, Speaker B: How to do this map and one.
00:17:22.928 - 00:17:31.418, Speaker C: Of the questions I got from the audience was, you support CFL. It wasn't clear to me how the guys who provide liquidity into one of.
00:17:31.424 - 00:17:34.250, Speaker B: The pools are compensating.
00:17:35.390 - 00:17:39.690, Speaker C: Does it work in a similar way or is the liquidity from the order book that's off chain?
00:17:41.090 - 00:17:50.654, Speaker A: If you're asking the context of like for uniswap, really, the CFL relationship here is that the smart contracts is almost the demand side, right. They're just consuming that liquidity.
00:17:50.702 - 00:17:50.962, Speaker B: Right.
00:17:51.016 - 00:17:57.534, Speaker A: So for uniswap, every trade going through uniswap, the guys providing the liquidity pool makes a little bit of a profit.
00:17:57.582 - 00:17:57.842, Speaker B: Right.
00:17:57.896 - 00:18:28.398, Speaker A: So for us, it's all on off chain order books. So theoretically the relayer. If they charge a fee, they'll take a cut. Market makers are running hopefully a profitable business. V Three also will give a rebate to market makers as well. So yes, there's a lot of work that there's a lot of apparatus that makes it functional for the guys who's actually providing the liquidity. And we make it a very big effort on our side to make swapper kind of hide it all for you and Xerox hide it all for you.
00:18:28.398 - 00:18:30.414, Speaker A: So you don't have to care about that. All you care about is the best.
00:18:30.452 - 00:18:32.800, Speaker B: Price that we can give you to you. Cool.
00:18:33.490 - 00:18:34.926, Speaker A: I'll go here and here.
00:18:35.108 - 00:18:37.250, Speaker C: What is the use of your ZRX token?
00:18:37.910 - 00:19:17.854, Speaker A: That's a great question. So one is it's a representation of governance in the context that it's our big way of saying it's our kind of way of saying this is a community owned API in that all future upgrades as we start to move ourselves more and more into a dow, it's our way of kind of saying, you get to own a share of this. And number two is with the V Three upgrade. Is it's also our staking token in that if you are a market maker you get to stake your token, stake zerox into a pool and you get a share of the protocol fee and get rebates for giving a profitable service or not profitable, a good service, a public good service effectively to the protocol and to everybody.
00:19:17.972 - 00:19:18.254, Speaker B: Right.
00:19:18.292 - 00:19:24.850, Speaker A: So it's kind of doing two parts now. It's a staking system and also we do it for governance mostly. So hopefully that answers your question.
00:19:24.920 - 00:19:25.540, Speaker B: Yeah.
00:19:31.670 - 00:20:10.990, Speaker A: That'S actually a great question. On the protocol level, as of my understanding is on the protocol level, we don't do a lot of that work, but Swapper does in the context that we would pad up your orders just enough that we would give you a slippage protection. So swapper handles a lot of that work because our protocol is agnostic to a lot of that stuff because we built it in a more generalized way. So Swapper handles a lot of that work. And from my understanding of people using it, it has not been a very big issue. And we have been thinking about upgrading the swapper slippage interface to be more intuitive. But I'm not too concerned about it, but I'm happy to help out if that is a concern.
00:20:11.970 - 00:20:12.720, Speaker B: Cool.
00:20:15.810 - 00:20:36.360, Speaker C: In the back end, order book itself is also ad hoc. Is there something that ad hoc order book.
00:20:36.890 - 00:20:42.534, Speaker A: So ad hoc order book. So you're pretty much saying is how do I build up an order book just for my own token?
00:20:42.582 - 00:20:42.938, Speaker B: Right?
00:20:43.024 - 00:21:16.974, Speaker A: So there's a number of ways you could do this. The more productionized version is we have an open source SRA relayer that you could just boot up and you could just boot it up for your own token. It's actually rather easy. It's like literally three four commands on docker and you just get it going. Asset Swapper allows you to take custom orders, orders that you have created. So instead of saying, I'm going to go to an order book like radar, I'm just going to feed it my own orders that I've signed on my own or I've found in my own ways. So we do give you a custom route to say, here's my own custom liquidity.
00:21:16.974 - 00:21:41.198, Speaker A: Now swapper, go take it and do stuff with it. Or you could launch your own relayer, which is really easy with launch kit. Hopefully that answers your question. No, there is none because everything's off chain. I think that's also the beauty of Zero X as well is that we don't have to interact with on chain stuff. Liquidity going.
00:21:41.364 - 00:21:42.080, Speaker B: Yeah.
00:21:42.530 - 00:21:43.920, Speaker A: Is there any other questions?
00:21:45.970 - 00:21:46.718, Speaker B: Cool.
00:21:46.884 - 00:21:49.790, Speaker A: I think that's about as much time we have.
00:21:49.940 - 00:21:50.302, Speaker B: Cool.
00:21:50.356 - 00:21:57.340, Speaker A: So if you guys still have questions, I'm going to be here at all this weekend. Feel free to ask. We'll get you guys going with Swapper. Cool.
