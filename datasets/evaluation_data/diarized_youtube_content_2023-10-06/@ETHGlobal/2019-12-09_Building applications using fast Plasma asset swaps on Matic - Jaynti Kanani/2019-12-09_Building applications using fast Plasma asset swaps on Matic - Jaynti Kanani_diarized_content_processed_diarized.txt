00:00:00.090 - 00:00:00.640, Speaker A: Hello.
00:00:01.810 - 00:00:48.066, Speaker B: Hello everyone. My name is Jayanti Kanani and I'm a founder and CEO at Matic. So at Matic we so basically Matic is scalability solution for ethereum. We build a plasma based side chain for ethereum and we are EVM compatible for now. Like we have ESC 20 and Esh 121 state transfer plasma secured on site chain. For other state you can use directly proof of stake kind of security. Here I'm going to explain how you can use plasma and Matic to swap assets on sidechain and make it very fast for your DApps.
00:00:48.066 - 00:02:11.026, Speaker B: So before I jump into the swap, I just want to give you quick overview of architecture of Matic. Basically, sidechain is basically simple as a parallel blockchain to the ethereum blockchain and after certain interval, multiple validators who are validating the side chain will push the checkpoints kind of hash of the multiple blocks on the ethereum chain. So let's say if you have ten blocks on the side chain, after 15 seconds, after 50 minutes it 1024 blocks on the side chain. All the validators will just validate all the blocks on the side chains and create a merkel route of blocks and pushes on the Matic chain on the ethereum chain. The thing is that the contract which interact with Matic chain remains on the ethereum chain. And whenever you want to move your assets from the ethereum chain to Matic chain, you deposit and you kind of make a transactions deposit transaction on the ethereum chain and transfer your tokens to one contract on the ethereum chain. And the validators basically mint those tokens on the Matic chain.
00:02:11.026 - 00:03:39.646, Speaker B: So now user who deposited on the ethereum chain will have tokens, ERC, 20 tokens on the side chain on their addresses and then they just transfer or interact with Matic chain with the tokens directly without waiting for ethereum block confirmation, et cetera. And whenever they want to withdraw their tokens from the ethereum chain, from Matic chain to ethereum chain, they basically provide a proof on the ethereum chain against the checkpoints recent checkpoint. So it defines like plasma framework. And plasma framework is basically nothing but a kind of a framework where it says even if the side chain whole side chain stops or fails, you can go on the ethereum chain and withdraw your tokens by providing a proof on a contract. So thing is that we changed plasma a little bit to provide EVM compatible plasma. So for that, we need to add multiple things at the receipt level. So EVM, I don't know if you all know the EVM, how EVM works, so basically it has like receipt in transactions and where you can define data for all kind of logs.
00:03:39.646 - 00:04:52.630, Speaker B: And what we did is creating a simple input output kind of UTXO model on the receipt. And with this receipt you can actually have plasma kind of framework in the EVM. Why we are actually using plasma, because it's very secure and if the whole section fails you can actually go on the Ethereum chain and get your data out of it. We also have proof of stake layer multiple validators so we don't operate on single operator. It means we have good liveness and data availability available for our data on the side chain. So even if let's say one or two related tests goes malicious, your data will be secure and you don't have to exceed from the Matic chain. Now let's say as I said, we just use some of the state as a plasma secured so one of them is like ERC 20 and 71 but we also provide a way to swap those assets on the side chain.
00:04:52.630 - 00:05:32.600, Speaker B: The thing is that we need to change ERC 20 standard a little bit to make it work before I jump onto that. Just the advantages of the asset swap is like we deployed those asset swap features and automatic beta main net like last September. You can use swap for multiple ways like NFT marketplace decentralized exchanges, you can get robust security kind of Ethereum security directly on. So now the thing is that.
00:05:35.770 - 00:05:36.086, Speaker A: Some.
00:05:36.108 - 00:06:20.738, Speaker B: Of the things you need to remember is that when you make asset swap on the Matic chain this is like how it works. It's a little bit different than the zero x swap on the Ethereum chain because we need to make sure you have proper kind of proof you can create when you exit from the Matic chain. So here is a simple flow how asset swap will work on Matic. So let's say we have buyer and the seller and they just create order off chain. Off chain. When I say off chain here it says off chain to Matic it's not automatic, it's just offline to any blockchain. They just like peer to peer.
00:06:20.738 - 00:07:18.774, Speaker B: It can be peer to peer, it just create buyer and seller just agrees on one particular asset and they just create order out of chain and then just say sign multiple signature on the both side. And then we have transfer with SIG method added in ERC 20. So this method is basically introduced by Matic into the ERC 20 standard. So it kind of extended the simple ERC 20 token standard and added a transfer with SIG. And second method we introduced is execute order. So basically let's say both just signs the transacts kind of order buyer and seller and then just call the execute order on the Matic side chain swap contract. Basically contract will just verify the signatures on the both side and they just call transfer with SIG on both kind of assets.
00:07:18.774 - 00:08:31.706, Speaker B: So let's say if you are transferring like ZRX with let's say some Matic tokens both contract will have a transfer with seek method on the both contracts and execute contract on the marketplace swap contract it will call both transfer with seek method and just do the swap on the automatic way. And here we have like partial confirmation of 1 second. So that it looks like you are making a trade in 1 second. But actually it will happen after a checkpoint goes on the ethereum chain. So basically we have kind of partial confirmation notion and the full finality on the Ethereum when checkpoint goes on the ethereum. So we introduced the transfer with SIG primitive. Why? Because we can't use Approve standard on ESC 20 because it will have like so let's say if you approve some tokens and then you make multiple transactions and you try to exit with your older tokens, in that case, Approve will have some problems where you create Approve on the ethereum chain.
00:08:31.706 - 00:09:39.986, Speaker B: So that's why we actually disabled Approve on the ERC 20 tokens contract on the matrix chain. And we just provide a way to transfer tokens with transfer with SIG. Because transfer account to account swaps are very provable and in both ESC 20 and ESC 21 you can use transfer with sick method without any problem. And also after you make a transactions using a signature, you can verify easily on the ethereum chain when you exit or whenever you want to challenge any transfers on the matic chain. So basically we have extensive doc here, let me walk you through. It has basically everything you need to create simple ESC 20 swapping. Basically we use EIP seven one two for simple signature and we have a transfer with SIG.
00:09:39.986 - 00:10:53.920, Speaker B: So basically transfer with SIG takes signature amount, data expiration. So basically we also need expiration date for the signature so people don't misuse after signing and after when they prove expiration date is less than a block number or not. And then this is a simple kind of check on the replay attacks where we need to make sure simple signatures don't get make a trade like multiple times. Then we just simple do the transfer form and this transfer form internally will call transfer. We seek for simple transfer or the tokens for you. So this method will be on both contracts. Let's say if you are transferring or trading your ERC 20 tokens to ERC 21 token, both contract will have a similar same method in ERC 27 21 instead of amount it will be like a simple ID NFT ID.
00:10:53.920 - 00:11:43.866, Speaker B: And for marketplace it's just simple marketplace it will have a simple execute order method and it will take five things basically a data one, data two data one, data two is basically nothing but a data of your orders. So basically, let's say in some cases, let's say if you are making a trade for ERC 20 versus ERC 20 you need to make sure you have like amount and the number of tokens in your data in your order basically. And we have order ID, expiration date for the signatures and who is a taker. So basically it just calls a simple transfer with SIG on both contracts. This is the contract one and this is the contract two and this just checks.
00:11:43.898 - 00:11:44.142, Speaker A: Okay?
00:11:44.196 - 00:13:40.990, Speaker B: Hey, if both works exactly as accepted and then make a transfer, make a swap happen, right? And that's why it's atomic simple swap and you can always use our predicates for it and truffle using it. If you want to deploy your own contract, you can always go and deploy your own contract using Remix. And we have like particular docs at docs matic network. Yeah so basically we just integrated Mobit as a data layer, data storage solutions on Matic. So if you want to have a simple one so basically this is a decentralized storage which directly supports Matic out of the box and if you want to, let's say store some data, let's say marketplace assets, et cetera, you can use Moipit and we have fully documentation for it as well. So basically we have multiple libraries, let's say Mobitmatic and we have Matic JS SDKs where you can use Statically to integrate with Matic swap contract and we have like simple demo as well and you can actually interact with file systems directly. Here we just initialize your file systems and you can list and add files and data and iterate among your files and data directly.
00:13:40.990 - 00:14:43.800, Speaker B: If you are new to Matic network or Ethereum network you can use two minute guide to get started on Matic. It will have everything you need from testnet faucet. This will show how our deposit and withdraw works. If you want to make a simple transfer on ESC 20 you can use this simple ESC 20 example and Matic JS SDK for it. And this is our team giving a demo on how you can use Matic JS SDK directly using SDKs on Matic. So yeah, that's it. If you have any questions of course we have multiple future works on the asset side so currently it just supports simple maker and make and fill.
00:14:43.800 - 00:15:41.302, Speaker B: We also going to introduce partial fill off chain. We also going to remove the front running problems on Matic. We also have going to provide some kind of liquidity to avoid depositing from Ethereum chain to metric chain. And we are also working on multiple UX based improvisations like metatransactions, one ClickFox et cetera. We also are working on Widgets where you don't have to worry about the deposit and withdraw on the Matic chain. That's it. Any question, any recommended transport layer for signing? I mean we don't have any P to P layer yet, but you can use any kind of firebase for now, it will work.
00:15:41.302 - 00:16:03.840, Speaker B: So you're basically signing your data so it won't be like problem where someone else is using your order because you are signing. So it's a trustless but yeah, of course there are multiple P, two P communication layer like Whisper is coming along so you can use that anything.
00:16:04.290 - 00:16:10.370, Speaker C: Does your HTP endpoint support a JSON RPC interface?
00:16:11.350 - 00:16:12.100, Speaker A: Yeah.
00:16:14.230 - 00:16:45.686, Speaker B: So basically it's the same as the Ethereum JSON RPC. You can just yeah, it's a simple RPC. Yes. So we actually changed geth little bit consensus part and how it interacts with kind of ethereum chain. Because we need a data where you deposit your tokens on the ethereum chain and you need to make sure you deposit it on ethereum chain. After that you need to mint on the get node.
00:16:45.798 - 00:16:46.218, Speaker A: Right.
00:16:46.304 - 00:16:55.662, Speaker B: You need to update the state on the get node. So we had to change a little bit on the get side, but mostly on the RPC side it's the same.
00:16:55.796 - 00:17:13.140, Speaker C: Can you give an example of how you lock on the ethereum side and you mint on the matic side and then your chain gets reorg? How do you ensure that reorgs are reflected on the matic side?
00:17:13.690 - 00:17:33.340, Speaker B: Yeah, so basically what we do is we wait for some confirmation, like twelve confirmation before we mint on the side chain. Because otherwise it's very difficult where you need to know, let's say if you mint and you need to again burn and then mint again, it's very difficult.
00:17:37.890 - 00:17:40.394, Speaker C: The checkpoint, who triggers the checkpoint?
00:17:40.442 - 00:17:41.178, Speaker B: Is that Maddok?
00:17:41.194 - 00:17:42.510, Speaker A: Who's triggering the checkpoint?
00:17:44.370 - 00:18:19.974, Speaker B: So basically, let's say we have like 100 validators on the validator layer. After some time we use tendermint algorithm, tendermint simple consensus where they just choose proposer or leader after a certain number of times. So what we do is let's say if a person A is a leader in this round for the proposing the checkpoint. After proposing one checkpoint, it will upgrade the next, select the next proposer for the checkpoint. And everyone just agrees, okay, hey, you are the leader, you can do the checkpoint.
00:18:20.022 - 00:18:20.620, Speaker A: Yeah.
00:18:26.190 - 00:18:36.400, Speaker B: Tell me what decentralized. Yeah, so basically it's a simple decentralized storage systems on IPFS, which yeah.
00:18:39.750 - 00:18:40.066, Speaker A: So.
00:18:40.088 - 00:19:16.830, Speaker B: This is a simple decentralized storage systems where you can actually use simple payment depending upon your storage or you want to store something on the kind of orders. Let's say if you want to store orders on the storage, you can do that and you can use matic for the swap and for the contracts. Let me show you the root chain. So basically, root chain is a contract simple on the deployed on the ethereum chain, which has kind of everything you need, like deposit manager. So it's just a deposit. You just call this deposit.
00:19:21.480 - 00:19:22.230, Speaker A: So.
00:19:34.990 - 00:19:46.494, Speaker B: So basically you transfer your tokens to this contract and the validator will check. Okay, hey, are you deposited and they just mint on this high chain and.
00:19:46.612 - 00:19:52.782, Speaker C: You have one matic chain share across all of the DApps?
00:19:52.926 - 00:20:44.880, Speaker B: Yeah, for now, yes. So basically we had an option where we thought about why not create DAP specific chain, but we realized that it's very difficult to onboard users for your new DAP. Right now, let's say if you have five DApps and one gets bigger, people can go ahead and try the second DAP on the same chain without any problems and without UX problems. And it's good for network effect plus we have composability on the same chain. When we say interact with multiple kind of contracts, it's pretty cool. Interesting. So we're starting with this one and then let's see in the future if we have multiple chain, but we have same DApps on the multiple chains, something like that.
00:20:45.270 - 00:20:57.890, Speaker C: If one of the DApps spams the Matic chain, what is the precaution to protect the performance of the other DApps?
00:20:57.970 - 00:21:03.394, Speaker B: Yeah, so it's the same as the currently it's the same as the Ethereum, where it's a guess.
00:21:03.452 - 00:21:10.330, Speaker A: Yeah. Cool. That's it.
00:21:14.540 - 00:21:36.032, Speaker B: So basically, we don't fix any gas prices on the side chain. The thing is that the checkpoint basically allows 65,000 transactions in one block. So if you, let's say, have huge number of transaction in one block, your price will significantly decrease in that sense.
00:21:36.086 - 00:21:36.304, Speaker A: Right.
00:21:36.342 - 00:21:53.350, Speaker B: Because Validator will have good amount of fees in one block. So it ups the validators how much they will accept at certain point of time. So it will be like way less than ethereum. But yeah, I'm just saying. Yeah, kind of.
00:21:55.880 - 00:22:20.460, Speaker C: I have one more question. Let's say you have a DAP that uses multiple tokens. Let's say you need ETH, and then you need wrap ETH and then you need something else. For example, would I have to, as a user, port all of these assets from my wallet on the main chain in order to use the DAP?
00:22:21.280 - 00:22:21.644, Speaker A: Yeah.
00:22:21.682 - 00:22:54.470, Speaker B: So basically, currently yes. Answer is yes. But the thing is that you can actually improve by creating a liquidity pool on the Matic side, where you just do this and get liquidity directly on Matic. So we are working with wire on board, directly on Matic for just let's say if you have USD and if you want like some rep BTC or the it on the Matic chain, you can directly go on Wire and get very cool. Okay. Thank you.
