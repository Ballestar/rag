00:00:00.890 - 00:00:16.478, Speaker A: Thanks again, everybody, for joining us this afternoon. We're joined here by Richard, a developer advocate at Chainlink. Richard, I'll give you the space to introduce yourself probably better than I can, but I really wanted to shout out everyone for joining us real quick. The floor is yours, man. Take it away.
00:00:16.644 - 00:00:44.490, Speaker B: Yeah, sure. So let me make sure I can share my screen too, because that's like the hardest part and still see people maybe. And can everybody see my screen? Is that yes? Yes. Fantastic. So yes, I am richard Gottlieber. I'm a developer advocate at Chainlink Labs. You can see my Twitter and email there.
00:00:44.490 - 00:01:19.190, Speaker B: If after this you want to reach out, chat about this presentation. Anything else? Blockchain? Not blockchain related, whatever. I am game to chat. Love chatting with people. Yeah. So I'm going to be talking about Chainlink and some of the really cool things that come along with Chainlink and Oracle networks. So to get going, just to make sure we're all on the same page, you all probably know this already, but smart contracts are this new thing that enable you to have cryptographically based agreements.
00:01:19.190 - 00:02:08.242, Speaker B: And one of the big powerful things about smart contracts is that they enable you to have agreements that are based on truth instead of trust. And what I mean by that is traditionally agreements are based upon a third party being involved to ensure that the agreement happens. Personally, I live in the United States. Legal system here pretty much always ensures that agreements that are legal agreements happen. But even that pretty much kind of bothers me a little bit because I think the world would be a lot better place if everyone had access to agreements that you knew were guaranteed to go through. And that's where cryptographic agreements come in. So they are based upon cryptographic truths.
00:02:08.242 - 00:02:45.662, Speaker B: And smart contracts are these agreements. They enable you to have a contract, an agreement that you know is going to work. But along with blockchains, there comes this other thing where there is this decentralization and distributed piece as well. And in order for that to work, blockchains have this weird quirk where they need to reach consensus. They all need to agree. And yeah, I think Luke mentioned I'll do my best to answer questions. If you have any questions, toss them into the chat here.
00:02:45.662 - 00:03:26.560, Speaker B: But I'm going to ask you all a question real quick and see if we can reach consensus. Can anybody, several of you hopefully tell me what one plus one is? And that was a hard question. I'll wait for answers in the Luke's being a problem. So one plus one, normally that is what we would call a deterministic value. We can all agree normally that one plus one integers are two, right? And that's a deterministic value. It's always going to be the same. If I present you with that problem, the answer will always be the same.
00:03:26.560 - 00:04:20.590, Speaker B: Now, if I were to ask, what's the temperature outside? I don't know if anybody wants to answer that, but I'm going to go ahead and predict the future, that we're going to have different answers and then we're going to have answers. Maybe some are in Fahrenheit, maybe some are in Celsius, and it's going to depend. Like even if you ask me that question, when you ask me that question, it could depend on which thermometer outside I'm looking at, right? And those are nondeterministic values. And the real world is made up of a lot of values that are nondeterministic. Temperature is one example of this. Things like generating a random number, anytime you ask somebody to give you a random number, odds are it's going to be different than another person. And that makes it very difficult to come to consensus, right.
00:04:20.590 - 00:05:20.820, Speaker B: If you imagine the blockchain and all the different nodes that need to all agree on what has happened, trying to agree on something like give me a random number, it's going to be problematic. This is often referred to as the Oracle problem, bringing this non deterministic real world data into the blockchain. And blockchains, they have all these benefits, but I kind of think of them as being like isolated in this deterministic bubble where their benefits can only exist because they live inside this bubble. So given that, and given that disconnect, that's where Chainlink comes in. So chainlink is a Oracle network and it's a distributed Oracle network. And why that is important is you could definitely set up your own Oracle. And I'll pause your questions here in just a minute once I get through kind of this, just to make sure that we're on the same page.
00:05:20.820 - 00:05:55.230, Speaker B: So you could spin up your own Oracle node. Definitely. You could bring data into a smart contract and feed that data into blockchain. But if you remember I mentioned that one of the benefits of blockchains is that they are decentralized and that they're distributed. If you spin up your own Oracle node, you've now taken that decentralized power and essentially centralized it into that one node. That's a problem. You've introduced a single point of failure.
00:05:55.230 - 00:06:39.340, Speaker B: That could mean if that one node goes down, so maybe you build in redundancy, but then you have one operator controlling that group of nodes. That's redundant. There's no guarantee that that operator is doing things in a truthful manner. And so you again kind of lose the power of decentralization unless you have your Oracles in a decentralized network. And that's what chainlink is. So chainlink is a decentralized Oracle network that provides access to off chain data to the blockchain. So I'll pause here for just a minute if y'all have any questions so far.
00:06:39.340 - 00:08:11.450, Speaker B: I see Lucas is asking what about legal considerations when you use chainlink for gambling games? I don't know. As far as this talk goes about answering that, I think that that would be probably an it depends situation depending on where you are and whatever the rules are and laws are around that. As far as ensuring things for gambling, like ensuring that the random numbers that are generated are actually random, chainlink can do that and we'll talk about that in just a moment, but I'll pause for a minute and see if anyone else has any other questions so far, or if everything is clear as mud. Okay, so we have a decentralized Oracle network that can bring data on chain and that solves the one problem about bringing that data on chain. But we also have the problem of the data that's being brought on chain being nondeterministic. And one of the solutions to this is to have a mechanism for reaching consensus within that process of bringing the data on chain within chainlink. One of the common use cases is bringing pricing data for different assets into smart contracts.
00:08:11.450 - 00:09:18.754, Speaker B: And as you can see, you have the node network and each node is reporting slightly different prices. Those nodes, the way that this works to kind of reach that consensus is to each node reports the value along with their signature so you know which node is reporting the value to a smart contract. That smart contract acts as an aggregator and it takes the median price in this example to ensure that there is an agreed upon value. So even though all the different values come into the contract, you can have a deterministic value based on the different values fed in because every time you look at that set of data you can get the median and then that is a deterministic value. So that's one way to deal with the issue of nondeterministic data and bring it into a deterministic bubble. That is the blockchain. This enables you to create hybrid smart contracts, which are smart contracts that have both on chain and off chain data.
00:09:18.754 - 00:10:53.750, Speaker B: And in my opinion, this kind of unlocks another world of capabilities when it comes to smart contracts. And I think that's really exciting and we'll talk about some of the things that chainlink offers in a little bit more detail next. But before we get into that, are there any questions so far? And too, as I'm going through, feel free to pop questions into the chat, too as they come up and I can read them as we go. Can you make a scoring mechanism, one to ten and nodes, people say, ranks smart contract, compiles the aggregate score? I'm not sure I understand the first part of your question, Brian. So yes, if nodes are reporting different values, that's where the kind of deterministic piece would need to happen within the smart contract so that you can have those Oracles reporting their different values. And then you need to, I guess, kind of implement however you see it as being the proper way to implement it. The method of getting to a single answer, like a definitive answer for those different values, does that make sense.
00:10:53.750 - 00:11:54.560, Speaker B: Okay, cool. So what does Chainlink offer? Currently we offer data feeds, which as the name implies, are feeds of data to bring data on chain VRF, which is a verifiable randomness function. When I see VRF, I think random numbers and then keepers, which are fast becoming probably my favorite thing that chainlink does currently because I see a ton of potential there. Keepers are essentially a way to automate smart contracts and we'll actually be looking at a demo that uses keepers here in just a little bit. So data feeds first and foremost, as name implies, like I said, it's bringing off chain data on chain. It's enabling that data to be brought on in a secure and reliable format. The reliability and security comes from the fact that again, you have that decentralized Oracle network.
00:11:54.560 - 00:12:50.288, Speaker B: The different nodes within the Oracle network are run by independent operators. So there's not a single entity that's controlling the node network that helps increase the reliability and security of that network of Oracle nodes. So you can bring on everything from financial data, APIs from different websites. So APIs being like any sort of programmatically generated data, like weather, sports scores, you name it, there's probably an API out there for it. I think there's one for Pokemon and getting all the information about Pokemon sky's limit when it comes to that. But essentially it enables you to bring any off chain data on chain to enhance your smart contracts. If you head over to Data Chain Link, you can see the price feed data, which is one of the most popular current uses of data feeds.
00:12:50.288 - 00:13:26.556, Speaker B: It's essentially asset pairs. So in this example that you can see here, it's ETH in terms of USD and you can see that there are different Oracles, each reporting their own separate price. And then consensus is reached on what that trusted answer is. A couple interesting things to point out here is that there are trigger parameters. So there's parameters that will cause the price to be updated. One of them is a deviation threshold. So it's going to be if the price changes a certain percentage, it'll update the price within the smart contract aggregator or if a heartbeat occurs.
00:13:26.556 - 00:14:28.944, Speaker B: So every so often it depends on the price feed. The price is just updated regardless of deviation in value. I don't know if there's any questions about those so far. My imagination is not that great. And so thinking about price feeds and lens protocol, I'm not sure where that would go, but that's probably why I'm not in the hackathon. I do think from a datafeed standpoint there is any API function which will allow you to call any API and that could be very interesting. Thinking about this hackathon and possible uses there, I will say we very much support using that and suggest using that for things like hackathons.
00:14:28.944 - 00:15:20.640, Speaker B: When it comes to production projects, any API is not recommended simply because it's not distributed decentralized, you're using it as a single instance. Do all these companies pay to validate the data or are they collectively paying gas? This is an interesting question when it comes to how are these things paid for. So let me just head over to this and we'll just take a look at one of these really quick. So each of these is a node operator and they're all operated by different entities. You can kind of see who the different operators are given their logos. You might recognize a few of them. But the node operators, so they operate their own node, they pay to operate their own node independently.
00:15:20.640 - 00:16:31.950, Speaker B: And then as far as the cost of this being brought on chain, when you make any, what we like to call a state change to a blockchain that costs gas. So anytime that you were to update this trusted answer, so this value is actually stored within a smart contract, whenever that's updated, yes, there is a gas fee associated with it. To use this data fee is essentially free as a consumer given that reading from a blockchain has no cost associated with it. However, if you're building a project that relies on this value being here, you're kind of incentivized to ensure that the node operators are bringing that data on chain. So that's why if you look on these pages you can see some information like the price history, information about the different Oracles. And then down here we have users. And these users are kind of like sponsors in that they are incentivizing the node operators to have this data feed available.
00:16:31.950 - 00:17:19.900, Speaker B: Does that make sense? Sure thing. All right, so that was data feeds. Now let's talk about VRF. VRF, like I mentioned, is randomness. It's generating random numbers in a verifiable fashion. And that is really important when you need numbers that are provably random and that you can ensure are actually random. And what I mean by actually random is when we're on the blockchain we mentioned that we need deterministic values.
00:17:19.900 - 00:18:13.596, Speaker B: One way to generate a random number is to use some sort of seed that would in theory be random into a hashing function. And what that hashing function will do is it will take the input and create a hash and that hash can then be used as your random number. Now on the surface it seems like that will be totally random and it is to a degree. Let's take a look here and pretend for a minute that we're simply betting on the outcome of a coin flip. If I win the bet and I call heads or tails correctly, I win, say a million dollars, I'm incentivized to win. If I'm running a node, I can know what the function is that's generating the random number. If it's being generated on chain in a smart contract, smart contracts are transparent, that's a very good thing.
00:18:13.596 - 00:18:55.812, Speaker B: But it's also a risky thing if you're not careful. This is one instance of that. So pretend that we are using the current block hash ID as the seed to generate our random number. I can as a miner on a blockchain, choose to either mine the block with that randomness or not. So it's kind of like if we're rolling dice, I can choose. I guess I'll go back to the coin flipping example. I can't choose the outcome of the coin, it's still random, but I can know the outcome ahead of time and choose to reflip.
00:18:55.812 - 00:19:50.716, Speaker B: And then once the flip is advantageous to me, I can say yes, that's the flip that we're going to be using for this bet. So you can't fix the random number, but you can regenerate random numbers potentially if you're a malicious actor when they're generated on chain. So that's where VRF comes in. VRF uses the node network so the decentralized Oracle node network to generate a random number with a proof of randomness. And then that number is submitted back to the chain. So there isn't a way for the random number generation to be maliciously tinkered with in the same fashion. There are projects like Pool Together and Avagatchi that are using this pool Together uses it to pick their lottery winners, which kind of a big deal.
00:19:50.716 - 00:20:55.296, Speaker B: I know in the past there's been some shenanigans about actual lotteries off chain not being honest, and then Avagatchi uses it for picking random traits within their ecosystem of NFTs. So, questions about random numbers, the last one, which is my personal favorite at the moment, and that's Keepers. Keepers are essentially in my mind like if this, then that for smart contracts. We've talked about all these benefits about smart contracts, all the things like truth based agreements, the fact that they are decentralized distributed, the transparency. One thing to know about smart contracts is, in my opinion, I'd like to call them unmotivated. They don't do anything by themselves. That's where Keepers comes in.
00:20:55.296 - 00:21:37.912, Speaker B: So Keepers gives you a event driven framework to execute smart contract functions. So that can be time based or based on other events. Like for example, looking back to our data feeds, the price changing. Essentially the Oracle network will monitor whatever the triggering event is that you have set up. In the case that that event happens, it will then call a function within your smart contract. We'll actually take a look at that in the demo here in just a moment. Again, this kind of goes back to the same conversation as the Oracles and setting up your own Oracle.
00:21:37.912 - 00:22:44.176, Speaker B: You could set up a computer to call your smart contracts functions, but then you're relying on a centralized source to ensure your smart contract is being executed properly and Keepers abstracts that away and kind of takes care of the DevOps type work for you in a distributed fashion. So before we get into the demo, here's a link to the code and all the links that will be in this. Do we have any questions before we dive into the demo? Can you make time based events as one time thing or is it so you could set up one time based upon different triggers and actually I think that we can address that in the demo. I can show you that in the demo. So let's dive into the demo. This one's kind of about NFTs. We're going to make an NFT grow from a seed to a little seedling to a full flower using Keepers.
00:22:44.176 - 00:23:32.336, Speaker B: So one NFT is going to change state based on a keeper updating it. So yeah, let's dive in to the actual code. This contract is essentially an ERC 721 contract straight from Open Zeppelin's, ERC 721 wizard with a few couple minor changes. I have an array of strings for the IPFS Uris. Essentially this is the metadata that will inform the NFT about the different traits, attributes of the NFT for the seed, it looks something like this. We have the name of its current state, a description, the image and a few attributes. Both the metadata and the images are stored on IPFS distributed file system.
00:23:32.336 - 00:24:06.476, Speaker B: It's pretty cool. It's the interplanetary file system, which I don't know, just sounds really cool. We have our ERC 721 with its name and its ID. And then I've added this function, grow Flower, which essentially is going to look at the current stage of the NFT and then take it to the next one if it needs to. So that's pretty cool. So let's make this dynamic. Let's use Keepers to do this.
00:24:06.476 - 00:24:37.076, Speaker B: So as with everything chain link related, the Docs are the best place to start. Docs chain link, they're kind of broken down by type of chain. We have EVM, chains, ethereum, Binance, Polygon, you name it. Solana and Terra. We are going to be using Keepers. So we'll head to the Keepers bit and we'll look at making compatible contracts. Keepers requires two main functions to be added to your contract in order to make it Keeper compatible.
00:24:37.076 - 00:25:10.320, Speaker B: The first is check upkeep. And to your question Brian, this is where you would have some sort of value that would be false if it had been triggered already. So what Checkupkeep does is it says does the Keeper network need to execute the perform upkeep function on this contract. This is going to be a view function. It's going to return data. There's no gas fee associated with Checkupkeep, so the Keeper's network will kind of pull to see does this contract need to be updated. If this is true, then it's going to run perform upkeep.
00:25:10.320 - 00:25:49.192, Speaker B: Those two functions are what make a contract Keeper compatible. There's examples here. I like to go all the way down to the bottom. And here's a full Keeper compatible contract that will increment a counter based on Keepers. But I like to just kind of steal the code right here and then modify it for our needs. So we'll go ahead and take this code, pop it in here and you'll see this contract is based on a couple of things. It's going to be based on the timestamp of the block the last time it was updated and then this interval.
00:25:49.192 - 00:26:30.700, Speaker B: So we don't have these two variables in our contract. So let's go ahead and add them to our contract. The first one is what was it again? It's last timestamp. So last timestamp and that's going to be a unit. And then we also had a UN called interval. So interval is going to be how frequently we want the keeper to run the perform upkeep function within our contract. I would like to put that N as the constructor just so that every time this contract is deployed, I could choose how frequently it updates.
00:26:30.700 - 00:27:24.616, Speaker B: So we'll go ahead and take that in as a value here and then within our constructor. So the constructor runs whenever the contract is first deployed to the blockchain within our constructor, we'll go ahead and set those two values as well. So we'll set interval equal to the value that was passed in and we'll go ahead and set last timestamp. So this will be the last time we checked to see if we needed to run our upkeep to block timestamp and that will get us our current timestamp for when it's deployed. So at this point, check upkeep should be good to go. It'll tell us if upkeep is needed. If the difference between when this is running and the last time it ran is more than the interval that we want to update.
00:27:24.616 - 00:28:11.292, Speaker B: Sweet. We also need to update perform upkeep to not do this, which is to increment the counter, but to grow the flower. And grow flower takes in an integer that is the ID of the NFT. In this case, we're just going to force it to be the first NFT that's minted just for demo purposes. One other thing you may notice is this code here looks oddly similar and that's because anytime we perform upkeep, it's kind of a best practice to ensure that you still need upkeep just on the off chance that something has changed in between and you don't actually need to perform the upkeep. So we're rechecking that we need to perform our upkeep. So at this point we are ready to deploy this.
00:28:11.292 - 00:29:31.220, Speaker B: So we'll go ahead and pick all the things here and we'll set our interval to say 30 seconds, we'll deploy it. I'm putting this on the Mumbai the polygon test network. So while this is deploying, does anybody have any questions? So why not use require? I don't know that it would make a difference really. I think this similar outcome. You could always set the state in the contract and require state to be zero. Why did I delete override? So I don't understand the robert, I understand the you could always set state bit why I delete override because in the example, it's overriding something, and when I'm using it here, I'm not overriding anything. In the example, it's a Keeper compatible interface.
00:29:31.220 - 00:29:59.848, Speaker B: And so that already has these two functions, and so it's overriding those functions in that interface. And since I'm not importing that, I don't need to override them. Cool, so we'll head on over to keepers chain link. Oh, cool. Thanks, Robert. Head on over to keepers chain link. So we have created our contract.
00:29:59.848 - 00:30:37.290, Speaker B: We now need to create the Keeper and inform the Oracle network that, hey, there's a new upkeep that we want to be keeping track of. So we'll do register a new upkeep. There's a few things here that you need to fill out. Email address is important because there is a balance for this. Imagine this is a bucket of link. Link is the token that the Oracle network uses. And if that were to get too low, it will email you and say, hey, your keepers are about to stop working because you've run out of link, things like that.
00:30:37.290 - 00:31:11.270, Speaker B: One other thing here is that you need to provide the address of your contract. So first you have to deploy your contract. We did that. We'll grab the address here, and then you create the Keeper or the upkeep. So we add that in here, we register and we approve it. And while that's happening, before we can upkeep a NFT, we need to mint an NFT. So I'll go ahead and create eight R1 quick.
00:31:11.270 - 00:31:55.216, Speaker B: And there's a couple of different ways to see this kind of evolve. We can look at the actual stage, which will go from zero to one to two, or we can look at the actual Uri. Remember that's these values here and they end in kind of a different name that we can take a look at. So you'll see it's a seed here. And then finally, if OpenSea is being friendly and updating quickly, we can take a look at it here and maybe see it. Okay, it's already gone past the seed. I missed the seed on Openc because I took too long.
00:31:55.216 - 00:32:23.304, Speaker B: It's more than 30 seconds had passed. If we look at our upkeep, we can see we funded the upkeep and then we performed the upkeep. So that's why it went from the seed to the little sprout. But we did see here before that happened that it was zero. At this point, it's one, and we're at the sprout here. And in just a moment, we should see that it goes to its final stage. It may take 30 ish seconds.
00:32:23.304 - 00:33:30.400, Speaker B: While we wait for that to happen, though, thinking about this hackathon, thinking about ways to maybe use something like keepers within this space, I think that anything that you think of where you want to either retire or get rid of things on a certain time frame or pull information from a smart contract on a given time frame, or have when something happens, have it trigger something else. These are all different ways that you could use keepers within your smart contracts. I know there's some conversation going on, but I don't know if anybody has any questions while we wait for this. It should be up to date. So if we just refresh the metadata here, we should see it's currently a sprout. And then if we refresh and we refresh the page yeah, so the keepers have turned it from the seed to the sprout to the full on blooms. So just like that, like every 30 seconds it was updating the different values? I don't know, I think it's pretty neat.
00:33:30.400 - 00:35:01.396, Speaker B: But yeah. What questions do we have? How do I stop other actors from calling my upkeep function? So the upkeep function you could limit it to, I believe is it where did it go? You could put a require statement in here to do that to ensure that it's only being done by the keeper network. But I would posit that anything that's within an upkeep it's going to be called on a regular basis. And so that's why you'd want the checks in there, to ensure that that upkeep should happen. If someone wants to perform an unchanged like state change transaction for you and pay the gas fees for you, I'd say more power to them because they're paying for your smart contract to be updated, which is kind of cool. But yeah, I think that within that function you should think of it as this can be called at any time and kind of structure the logic in there accordingly. Does that make sense? Yeah.
00:35:01.396 - 00:36:05.050, Speaker B: I don't know if anybody else has any questions, thoughts? How do we deploy an API? I don't have time already, like past time, but within the docs, any API will get you that information. And it's the same level of example code here. You can just click open and remix it'll, take you to the contract here. You can deploy it and mess with it there. When Oracle is updated, who is paying the gas? Or do the users sponsors pull money into the need? Just curious. State chains gets paid for. So the Oracle nodes, when they are actually making a state change, they are paying the gas.
00:36:05.050 - 00:36:38.174, Speaker B: They are, I guess, compensated to do that. They're incentivized to do this via link token. So for example, when this upkeep ran, it cost a little bit of link. The amount of link it costs will be dependent on which network we're running on. This is on polygon, so it's not a lot of link. But yeah, that's kind of how they're incentivized to do this work is through the link token stuff. Everyone continue this conversation.
00:36:38.174 - 00:36:50.990, Speaker B: Discord. Yes, on discord would be great. Cool, I think we're good.
00:36:52.880 - 00:37:00.496, Speaker A: Right on everyone, thanks for asking such inquisitive questions there. And thanks Richard for going deep to answer all of them.
00:37:00.518 - 00:37:00.716, Speaker B: That's.
00:37:00.748 - 00:37:03.360, Speaker A: Been super helpful. This has been an incredible presentation.
00:37:04.580 - 00:37:06.496, Speaker B: Thanks. Yeah.
00:37:06.518 - 00:37:08.308, Speaker A: As I mentioned in sorry, go ahead.
00:37:08.394 - 00:37:22.950, Speaker B: I will say the Chainlink hackathon is starting soon too. I'll pop a link to that in the chat as well. But just FYI, I missed that slide. I got too carried away with questions.
00:37:24.140 - 00:37:46.700, Speaker A: The questions are too much fun. On that note, I encourage everyone to reach out in discord and continue those conversations. Great place to ask those questions if you couldn't think of them right now. They will be around, Richard. I'm sure you'll be around and so the rest of the team. So that's an excellent opportunity if you'll be building with Chainlink. Highly recommend hitting them up in the channel and discussing further.
00:37:48.240 - 00:37:49.084, Speaker B: Awesome.
00:37:49.282 - 00:38:00.130, Speaker A: Other than that, we'll be closing the room here. I want to thank everyone for joining us this afternoon. And thank you, Richard, for your time and going above and beyond it.
