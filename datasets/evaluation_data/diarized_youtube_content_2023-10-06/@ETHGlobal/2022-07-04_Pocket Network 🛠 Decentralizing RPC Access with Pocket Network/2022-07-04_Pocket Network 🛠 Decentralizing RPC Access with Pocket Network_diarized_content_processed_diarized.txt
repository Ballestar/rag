00:00:06.170 - 00:00:53.360, Speaker A: What we're going to be doing is just kind of going over the basics of what Pocket Network is and how you will very likely want to use it in your application. So I think we can just get right into it. So let's start off with the basic kind of what is pocket network? So in short, Pocket network is a decentralized RPC provider. And yeah, I think we're good. That's kind of all we have to say now. So what exactly does that mean in the Ethereum network? There's kind of two ways to get your transaction out there. You can run a client and then broadcast the transaction to the network through the client, or you can send a request to a node that offers some form of RPC service.
00:00:53.360 - 00:02:26.986, Speaker A: And so when we ask what a client is, some examples of those are mining nodes in ETH one, validator nodes in ETH two things that are called full nodes, which is the blockchain in the most 128 recent blocks, archival nodes, which is all the blocks in the history of Ethereum. And so what exactly does it take to run a node? What this means is you need a machine that can be on 24/7. Is that an old computer? Is that something like a raspberry pi? Is it a rack server? Is it in the cloud? On top of making sure it's on, can you get to it securely? Can you figure out how to scale it if you need more than one? There's a lot of work that goes into this process that's completely unrelated to smart contract development. And if you're not coming in as someone with a solid DevOps experience, this is a really tough barrier to get over if you want to start using your application in production. But wait, isn't this what light clients are supposed to do for us? And it would be great if they were here, but unfortunately you can't really run a light client in a web browser today. And so it's because that client still needs to actually talk to the chain and there's a lot of complex behavior that just can't be done yet. And so incomes RPC service, and this is what MetaMask uses and ledger smart contracts use this.
00:02:26.986 - 00:03:18.330, Speaker A: And so does Trust Wallet and Guarda Wallet and Myether Wallet and basically every web based DF that you've ever used. But what exactly is that? And RPC itself stands for Remote Procedure Call. What that is, is the messages go between the network through JSON nodes, expose it over http https and so you can talk with it as you would any other standard web application. And it provides the lowest technical barrier of entry for people building apps that work with the blockchain. Almost everything can go through JSON. Https So if you can write a traditional web two app that uses JSON http, you can start building smart contract interfaces. And who handles this? Is it the Miners, which will be validators eventually.
00:03:18.330 - 00:04:14.960, Speaker A: Is this what Gas pays for? And the reality of that's? No. Miners and validators can choose to serve RPC service, but there's nothing that's obligating them to do so. And so what this means is there's no on chain incentive for nodes to actually serve RPC service to the network. So while there's incentives to keep the blockchain data valid, there's no way to incentivize that the blockchain actually provides service in the way that every application uses it. Today, some of the solutions for this private entities have really stepped up to fill this space. Some examples of these are infura Alchemy Anchor, and these are great products. They make blockchain development super accessible, but they're centralized, and they all require monthly fiat payments to keep that DApp open.
00:04:14.960 - 00:05:07.680, Speaker A: Typically, the only solution for contract developers who don't want to do this is to stand up their own servers until Pocket Network comes along. Pocket Network is an independent blockchain that runs on the Pocket token node. Runners earn that pocket for serving those RPC relays, and apps can stake up Pocket to get that RPC access. It provides a utilitarian market for this infrastructure, and it makes RPC permissionless and decentralized. This all sounds neat and all, but how does Pocket actually help you as a developer? And so a big thing is you have less risk from outages. Pocket nodes run in a variety of configurations. There's people who self host physical machines that they actually own.
00:05:07.680 - 00:05:44.646, Speaker A: There's people who cloud host AWS, DigitalOcean, all of those standard providers. There's people who rent direct hardware through OVH, IBM, Cloud, Bare Metal. Basically, if any of these big services goes down, there's an entire other swarth of nodes out there ready to pick up that service. Another big advantage of Pocket is it allows you to own your access. What do we mean by that? It means once an app is staked, that rate is locked in. And as long as that app remains staked, there will be some guarantee of service. This means for app developers that you don't have to worry about monthly billing.
00:05:44.646 - 00:06:28.374, Speaker A: You can't accidentally run up a giant cloud bill, and you could actually recoup some of that initial infrastructure investment by unstaking and selling that when you're done. In short, with Pocket Network Web Three, infrastructure becomes an investment and not a cost. So let's actually get started getting free access here. So the portal is an application that we've built on top of the network. We have a link through today's event that gets anyone wanting to build on us free service up to a million daily requests. It gives developers the same kind of user experience that they have if they were using a previously centralized option. It gives them that dedicated URL that they expect.
00:06:28.374 - 00:07:25.050, Speaker A: It gives them the security configuration options to keep that contract and endpoint safe, as well as dashboards about actually watching and understanding what's going on and who's using your infrastructure and it keeps you alerted in case you are approaching your limit. And again, that free tier that we're offering gives you a million daily relays. And so this is where you go. This is the URL will take you to here, you sign up, get registered, and then creating an app is as simple as heading over to apps, typing in the name, launching the application, and then URLs are available and you're ready to roll. There's the option of setting up security that allows it so that you can protect who actually can access that endpoint if you don't want to make it public. And there's ways to set up the notifications. That way you'll be sure that you're not going over your service limits.
00:07:25.050 - 00:08:25.978, Speaker A: So how do you use it? We'll get started with just your basic solidity development environments. So in Hard Hat, if you're in your Hard Hat config JS, it's as simple as using the Pocket Network URLs from the portal in place of where you are. So for example, the mainnet is the main net URL that you would get from the portal. We have Robston and Rinkby and Gorley and COVID and Truffle looks very similar. You're doing is plopping the URL in where you would previously plop something else in and you're good to start deploying in your build environments across testnets and mainnet with Pocket Network instead of any centralized option. On top of this, you can also use this in Remix if Truffle and Hard Hat are a little too in the weeds. So if you go to the Deploy and Run tab of Remix, you have an option here of select Web Three provider.
00:08:25.978 - 00:09:08.280, Speaker A: And then after you select that, it's as simple as putting the URL into that box and clicking OK. And you're running in Remix with US as well. What about now if you're using it in JavaScript? So in ethers. Ethers, it's as simple as using the JSON RPC provider with that URL and you're ready to roll. Web three JS very similar. You can instantiate the Web Three provider just with that Pocket Network URL and you're ready to start gaining service using US in Python again, it's going to start to look really similar. Just drop that URL in and you're ready to roll.
00:09:08.280 - 00:09:56.650, Speaker A: On top of that, you can use US in ways if you're not just a DAP developer. MetaMask gives people the option to use their own RPC and Pocket Network provides a variety of public RPCs for people to use. So if you go to MetaMask in your networks, you can choose to add a network, give it a name, and then you're free to use the pocket public RPC. And now your MetaMask is also decentralized. So if infuria goes down, you still have access to the service that you expect through MetaMask. And you can repeat that. For any of the chains we use right now, we have just a subset of chains that we have public RPC for the full list is available on our docs for anyone interested.
00:09:56.650 - 00:10:44.840, Speaker A: On top of that, what's so great is Pocket can be used for cross chain and MultiChain uses. So the same application that you register in the portal not only gets you access to the ethereum main net and testnets, but as of now, up to 50 other chains. So for example, let's say you wanted to use polygon and ETH in the same application. It's as simple as taking the URLs, throwing them into providers, and you can get the ETH block number and the polygon block number just as easily. And the full list of supported chains we have available at the docs. And for anyone interested, this QR code here will take you to a link. If you register and use us, you're set up to start getting going with 1 million daily relays.
00:10:44.840 - 00:11:45.604, Speaker A: Thank you. Any questions? Yeah. So this whole focus has been about how Pocket fits into your from the perspective of an app developer. But the network itself, what it is, is the app developers actually have the ability to get service from a network of independent providers. And so those providers, when they successfully provide service to an application who requests it, are rewarded with that pocket token. So they would all be pocket still. Yeah.
00:11:45.604 - 00:13:02.598, Speaker A: So how it works is that Pocket itself is its own blockchain and that that blockchain is used to validate that nodes are servicing applications correctly and then the native token of that blockchain, Pocket, is what's used to distribute the rewards? No, not currently. It's based off of tendermint, based off of the Cosmos tendermint system, the underlying chain. Yeah. So when people run Pocket blockchain nodes themselves, what they do is they configure that Pocket node to point to instances of nodes that are running on other chains. Those other chains nodes don't have to be validators, they just have to be able to provide essentially the data and write service the read write from that layer. So it would be like running a node but not validating on it. Yeah.
00:13:02.598 - 00:14:41.266, Speaker A: So the Pocket network sits on top of those RPC nodes to provide some incentive mechanism to do so. Anything else? Yeah, go ahead. Yeah, so there's options to do. So the underlying mechanism is that that native token is staked, not necessarily paid. So there's features coming out to help us with bringing that out in ways that make the experience easier for those who don't have liquidity in the native token. But yeah, it's not actually spent is the core difference there. Well, everyone holds that stake and then everyone who is servicing continues to earn rewards while the apps that are staked don't earn anything.
00:14:41.266 - 00:15:04.580, Speaker A: That it's essentially locked is probably a better term. So it's locked up in a way that they can't access it, they can't build on it, while those who have locked up tokens to service continue to earn rewards for doing so awesome. Thanks, everyone.
