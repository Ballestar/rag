00:00:02.250 - 00:00:32.266, Speaker A: Stand by there, Trent. Should be one. Stream is up. Cool.
00:00:32.368 - 00:01:01.986, Speaker B: All right, we'll just kick it right off. Welcome, everybody, to week Zero workshops. Hopefully you're here for hackaths events. If you're not, well, I guess you can stay. You're going to learn something anyways. I'm going to say this until everybody's tired of it, but if you are here for Hacker Fest, you have to make sure that you've staked 30 die before the event starts on Monday. This is a way we use to ensure that the people who we're supporting and giving attention to are actually committed.
00:01:01.986 - 00:01:31.354, Speaker B: They're going to participate fully in the event. So you still got a couple of days to do it. But I would definitely encourage people do that as fast as they can. Otherwise you might forget it, you might procrastinate, I don't know. But do that as soon as you can and we'll make sure everybody is properly set up for the event. All right, so we are here for this intro to Filecoin. Getting started with Filecoin, andrew Hill is going to be leading it.
00:01:31.354 - 00:02:20.234, Speaker B: He is the CEO and co founder of Textile, which is company that works specifically with IPFS, Lib PDP and makes it easier to connect and extend these technologies for developers. So he's been working on that for a bit now and we're very excited to have his expertise here, specifically as part of hackafest. Textile is also a sponsor, which is a great thing. They're making hackafest possible for everybody here. Before I hand it over to him to start, we're going to play a quick game, which is I just made this up. Whoever we're going to compete with shirt colors. I'm wearing a black shirt and Andrew from ETH Global is wearing a not black shirt.
00:02:20.234 - 00:02:42.470, Speaker B: So let's see who's winning. I see one, two. Turn on your videos. Let's see how many we can get. 123-4567. I see seven, eight. It might be split pretty even between black and colored.
00:02:42.470 - 00:02:55.178, Speaker B: All right, I'm going to call it. It's a tie. You're lucky, Andrew. We'll keep this going throughout, but all right, Andrew Hill, take it away. Tell us a little bit about yourself and then we can get into it.
00:02:55.344 - 00:03:15.010, Speaker A: Cool. Thank you very much and thanks everybody for coming. I think it's going to be a really good workshop. If you're new to the Filecoin project and just trying to start building things, we're going to kind of go pretty far in a short amount of time. Yeah. So I'm Andrew. I'm one of the guys at there's.
00:03:15.010 - 00:04:04.654, Speaker A: I think maybe all four on the call are following along. Carson Farmer, Aaron Satula, sander and Ignacio are also probably on the chat. But Carson and Aaron will be primarily helping out answer questions live. If you run into problems, we're really interested in trying to fix the way data works on the Internet. We have a lot of ideas about what's broken there and we have some ideas about what it would take to fix. And we've always seen the IPFS protocol and now Filecoin making some of those ideas possible and making it possible to think about the Internet in totally new ways. And so I'm excited to share kind of some of those early steps with you and have you all try your own ideas and try to build things over the next month.
00:04:04.654 - 00:04:45.886, Speaker A: And so at Textile, we're just super excited for the next month of helping you build things and see how far you can get and see what works and see what doesn't. And so today I'm going to break the day up into kind of two big parts or one smaller part. And then the bigger part, the smaller part, I'm just going to pull up some slides and kind of give. A lay of the land, let you know what I'm going to be talking about and some terms that we're going to throw around in the workshop. So if you haven't ever used Filecoin before, this will be good. Or you haven't followed the Filecoin project much until the hackathon. This should be good because it should just let you know some of the couple of the key terms that you're going to see come up a lot and be able to reference them again and again.
00:04:45.886 - 00:05:31.550, Speaker A: And then the second part of the presentation, I'm going to move to the workshop. And for that, we'll be really hands on. And so in the Hackafest chat channel on Slack, I shared a few notes about what will be necessary there. But one key one is if you want to do any of the parts, we're going to be running some things locally that take Docker desktop. So while I'm giving the presentation, if you really want to take part in the hands on, if you haven't already, it might be worthwhile to go and download that and install it on your computer. And then we're going to run some things, and you're going to get pretty far on using Filecoin and trying some cool things. And so with Mean, let me just jump in and like I said, just start asking questions like crazy.
00:05:31.550 - 00:05:57.206, Speaker A: You can do them over on Slack or here on Zoom, wherever you like, and we'll get you answers. So let me just start sharing with you some things. Thumbs up, Trent, on that showing. Okay, perfect. Cool. So I already told you who I am. You can find me on Twitter too.
00:05:57.206 - 00:07:04.726, Speaker A: I'm always saying stupid things over at we build developer tools at Textile. And so just to explain kind of what we work on and how what I'm going to show you today kind of fits in that mix and actually give you ideas about how to then extend and move out into other things, I'll just give you kind of the four main pieces of what we work on really quick. And then I'll dive into the Filecoin and Powergate specifically so the first thing that we work on, or the first technology that we work on, is Threaddb. And so this is a MongoDB like database that you can use for building your applications. It's written in Go, there's a JavaScript implementation, but on top of the database there's also a networking protocol that rides on IPFS and lib P to P to allow you to have multi user databases. So you can think of it as a peer to peer database built on IPFS that you can run in your applications. The second thing that we build is called Buckets.
00:07:04.726 - 00:08:00.650, Speaker A: So after we started building threads, we realized that one of the very next things that people will want to do is actually put larger files, binary files, into their dynamic data sets. And so when you use a database, it's not very often that you put the raw files in there, right? You reference raw files elsewhere. And so Buckets was actually our solution to letting people build applications that needed to put data onto IPFS that was mapped to some dynamic data set. They've become a bit more than that, actually. And so the best way to think about them is just dynamic folder persistence and synchronization over IPFS. And I'll have a little demo of that later because it links to Filecoin in a really cool way. But you can create Buckets, which are just data sets on IPFS, folders on IPFS, and you can push them to remote nodes or synchronize them with collaborators.
00:08:00.650 - 00:08:41.990, Speaker A: So you can use the command line tool to do that, or there's a JavaScript library to build on top of that. The next piece is the Powergate. And so the Powergate is what we'll talk about today. And so the Powergate is meant to be a developer API to help you deploy filecoin and IPFS nodes specifically to build applications on top of. So this isn't really for miners. This isn't for you to necessarily earn money today, or when mainnet launches storing other people's data. This is for you to make requests to store data and then manage what happens after you have a bunch of deals out there on the network and how you want to move data off and on the network.
00:08:41.990 - 00:09:22.658, Speaker A: And also it gives you some really cool, helpful tools on top. So high availability, fast retrieval data using the IPFS network with cold storage on filecoin. It has a deal agent to handle a lot of other things. So we'll get into all that and then finally the Hub. And so this is our hosted environment where you can access pieces of all of this stuff. And so this is really cool for say, if you're building a browser or a mobile application where you're creating data on IPFS or you're creating deals on filecoin, but that user's session may go away. So really you want to get a lot of those updates off of that device.
00:09:22.658 - 00:09:56.770, Speaker A: And so the Hub gives you places where you can push things and have them persisted on IPFS or soon create deals with Filecoin. And I won't get into that today. We're planning on giving another workshop next week where we might touch on some of that stuff and how you can use it. But also just hit us up on Slack if you want to get some pointers there. And of course, our docs are pretty comprehensive on all of those things, and we'll give you pretty good sense of what's going on there. So just docs textile IO. So for today, obviously, building with Textile is the point of it all.
00:09:56.770 - 00:10:18.674, Speaker A: And so let's get into that. And this is the piece that I mentioned that I really just wanted to cover some of the basics. I was really excited to get a text this morning that my mom said she was accepted to the hackathon. That's serious. She's probably on this call. Hi, mom. And she had texted my sister to ask how she could start building with JavaScript.
00:10:18.674 - 00:11:21.606, Speaker A: And so I realized I better put at least this intro section in here that explains some of the terms, but hopefully some of the rest of you will get something out of this too. And so the first idea is that the network is made up of miners. So understand that when you're creating deals in the workshop later today, you are creating deals with miners. Miners are running on the network, and they're committing space to the network, saying, I have this much space that I want to commit to the network and then store users data or clients data in. And so after a miner has committed some space or storage to the network, somebody can come along and say, hey, can I store something that's a gigabyte in that space? Storage is another big piece of what we're talking about. Obviously, Filecoin is for you to store data on the network with miners. When you want to store data on the network, you create what are generally called deals.
00:11:21.606 - 00:12:09.114, Speaker A: And so deals are negotiated between the miners and the person or client or app that's trying to store data. And so you say, okay, I want to create a deal for this 1GB of data that I want to store. And the miner will give you some terms to the deal about how much they want to charge for that storage. And you're going to come to an agreement about how long they're willing to guarantee that it will be stored and other parameters of storing it. And that's all contained in kind of what we call the deal. And then once you have a deal and you've gone through what's called sealing and basically getting this all completed so that the miner is actually storing your data, you can then retrieve the data back out of the network. And so retrieval is the next big thing.
00:12:09.114 - 00:12:42.754, Speaker A: And so when you have the information about a deal and you know the miner that's storing it, you can go back to them and say, hey, I want to retrieve that data back out of you. And so again, you can get your data back. Another thing that we throw around a lot that may not be clear to you is that the network is actually made up of different implementations. This is a strategy to make sure that there's not sort of like one code base, one source of failure on the network. And so you may see that Filecoin. There is a library called Go Filecoin. And that's one of the first implementations of Filecoin.
00:12:42.754 - 00:13:32.390, Speaker A: There's another really popular one called Lotus, and that's a newer implementation of the filecoin spec. And so the key thing here is that they both essentially do the same thing. They both promise to do the same thing on the network because they abide by a rule set called the spec or the filecoin specification. And so you could run either of these nodes as a miner or as a client and join the same network and talk the same language. But they're behind the scenes, they're just a different implementation of that. And so if you write code, sometimes they'll be in different code bases or they'll have different strategies or maybe be more efficient in one component of what they do than the other. And so we'll see these sort of continue to evolve together as sort of a set of different implementations.
00:13:32.390 - 00:14:12.882, Speaker A: For example, there's a Rust implementation, but they'll all be working on the same network. And so for today's workshop part, we're going to be really working with the Lotus implementation. Because when we started building the powergate, we found that the Lotus implementation had some of the APIs that we really needed to just make that work quickly. And so we went to that one. But ideally, over time, the powergate work that we've done would actually be able to ride on any of these because they would all implement or they'd all expose the same APIs that you could run on top of. But we'll be using the Lotus implementation. So just know in your head, the Lotus implementation is just an implementation of the filecoin spec.
00:14:12.882 - 00:14:59.634, Speaker A: It speaks filecoin. And so then that gets to the powergate, which is what we'll get into. And the powergate is it isn't a filecoin spec, it isn't a filecoin technology directly. What it does is it rides on top of the Lotus implementation and it packages all the logic for you to connect a Lotus node, an IPFS node, and a bunch of really useful APIs and services. And so if you wanted to run a Lotus node so you could connect to the network and make a lot of deals, you can do that. You can just go to the Lotus documentation and start learning how to do that. But what we saw was that there was a bunch of things that you'll start to recreate again and again and anybody who's trying to do that will start recreating those again and again.
00:14:59.634 - 00:15:53.794, Speaker A: One of them is that you'll want data that not only is stored in filecoin but you want it on some sort of caching layer where it will be available without you having to go back to the network, for example. And so the Powergate has this multi tiered caching system that will handle a lot of that for you. That's done in IPFS so that you can have data that's immediately network available but persisted on filecoin. It also has, I mentioned before, I think the deal agent so that it will help you create deals and do long term monitoring and renewal and all these things and I'll get more into that. But so the Powergate sort of packages these things together and helps you talk to the Filecoin network just to be efficient for building applications or integrating filecoin into systems. And then sort of the last thing that's the last sort of term that gets thrown around a lot are these networks, these different networks that people talk about. And so obviously there's main net.
00:15:53.794 - 00:16:38.302, Speaker A: And so that main net is what everybody is building for towards right now, right? So mainnet is when filecoin launches and becomes real and people actually start using real filecoin to pay for storage and miners start mining real filecoin. We're not there yet, we're in the testnet phase. And so testnet is a sort of more wild west network where code is pushed pretty quickly to start getting new features and getting further along in the implementation spec. Miners are joining and they're figuring out how to commit more data to it and how to seal deals and all that good stuff. So mainnet doesn't really exist. Testnet is out there right now and you can connect to it and start working with it. There's two other networks that you might see reference.
00:16:38.302 - 00:17:34.014, Speaker A: One is the DevNet, which the Protocol Labs team has been working on to create sort of a go to faster version of the testnet for app developers. So it wouldn't be quite as full of kind of miners testing and miners figuring out how to seal and get things on the testnet. It would be a more committed for the app developer side. And then the one we're going to use today is something that we've been working on which is just called the Local Net. And Local Net is really great for cases where you want to be using the APIs of the filecoin network. You want to be testing what it's like, what the full flow of data is on the network. So good examples of that would be like building continuous integration or giving a workshop where you don't necessarily want to wait for the network to do the full work of taking your data, finding a minor, getting it sealed.
00:17:34.014 - 00:18:12.850, Speaker A: So what the Local Net is going to do is it spins up a fake network, a completely fake and isolated filecoin network completely on your machine. So it's fast, it's lightweight, it doesn't need to sync to an external network, but it's ephemeral. So deals that you create there, once you close it down, once you close your laptop, they'll go away. There's no real file coin here. It's really meant for just building on quickly. And you'll see how quick that is in the workshop. There are a bunch of resources obviously put out by everybody working on hack FS, so you can find more about a lot of the pieces that I just mentioned there.
00:18:12.850 - 00:19:03.802, Speaker A: So I definitely recommend going and browsing around that. So let's get into more on the Powergate specifically because that's what we'll be using to build within the workshop today. And so I already mentioned some of the pieces here that the Powergate is an API driven solution for you to build applications on top of Filecoin. It's meant to give you low, latency, high throughoutput data over the IPFS protocol, but backed by persistent long term storage on filecoin. Supposed to give you familiar interfaces for reading and writing data. It comes packed with a full API solution so you can integrate it into your system. And we'll see all that in action.
00:19:03.802 - 00:20:16.802, Speaker A: So I don't need to go too much into it right now, but some features of it when you run a Powergate and you'll see this, it will help you manage both a Lotus node and IPFS data so you can move data across the two. It has this deal agent which will simplify kind of how you have to think about creating, repairing, renewing storage deals on the network. And then it does stateful long term management with that deal agent. If you're building a system where you have different roles in the system, or if you have many users in your system and you want them each to have their own address, it has a way for you to easily break out the API so that every Say user in your system could have their own address on the network and have their own set of files stored and deals that are being managed for them. A little bit more of that because we'll get into that in the workshop. And so just kind of like plant this in your brain before we get there. The Powergate sort of wraps a lot of the Lotus APIs and it connects the IPFS instance.
00:20:16.802 - 00:20:52.942, Speaker A: And most of that work that it's doing is exposed through a system called the FFS. And that's the API we're going to really focus on in the workshop. FFS is the Filecoin file system. That's just what we call this section of the API. And that's where when you're running the Powergate, you can generate one or many FFS instances, we call them. And an FFS instance is what you could map to your users or systems that each need their own sort of siloed off space. And so an FFS instance has a token.
00:20:52.942 - 00:22:05.500, Speaker A: You would only speak to your instance with your token and then every FFS instance has its own address for its own balance. It can actually have multiple addresses if you need but you can just think of it as one address to start and it will do a lot of the work for you when you start creating deals. I'm going to skip this little launch thing because we're all going to see that in just a second a bit about the multi tiered storage in the Powergate. Just like if you were building a computer system where you had data that you were trying to store in different sort of levels of availability, you might have your data stored in memory if you need it to be fast and hot. And you might have it stored on disk if you don't mind it being slower or colder. And so we mapped that same idea to using Filecoin for cold storage and IPFS for hot storage and you can move your data across those two layers of storage as your app needs and you can do that all over the API. The whole thing I mentioned is API driven and so we'll play a lot with the CLI today which just is actually using the API that you'll stand up.
00:22:05.500 - 00:22:34.034, Speaker A: But you can use that with the JavaScript library as well or there's a Go client as well or it's just gRPC. So you could write your own clients for this too. Very extensible. We'll get into this too. Lots of different things you can do once you're running the CLI. I think I already covered all of this stuff. Yeah, feeling good there.
00:22:34.034 - 00:23:14.530, Speaker A: That's the key command that we're going to go to and you're going to see that second. There's a lot of these top level things that you can do if you're an admin of a Powergate. It also will create some indices that will track say, like the reputation of miners on the network and that will help you create deals more efficiently. We're not going to get into a lot of that today but we can answer questions about that for sure. And just as you start hacking over the next weeks, I think we'll put out more and more resources there. Okay, I actually got ahead of myself here. Okay, the next thing that we will come back to we'll go through in the workshop portion as well.
00:23:14.530 - 00:24:00.286, Speaker A: But it's worth pointing out now is that when you're using an FFS instance to store data, you do that by taking your data and you attach a storage configuration to the data. And that's just a little JSON definition of how you want that data to be handled by the Powergate. Every FFS instance has a default one so you don't have to specify it. It will just use the default. But you can override that or you can change your default and that will determine how the Power gate stores it in the hot storage or stores it in the cold storage or automatically moves the data between the two. And so we'll see that in action. But here's a quick preview of what that looks like and we'll kind of go through what some of these different flags will let you do.
00:24:00.286 - 00:24:53.006, Speaker A: Some of them are obvious. So rep factor is the replication factor. So when you store data, the powergate will create deals on the network for you. And with the rep factor you could say change it to three and it will create deals with three different miners simultaneously or attempt to. So you can have replication on the network and the powergate will just do everything in its ability to get your data stored in a way that complies with what you've set for the configuration here. So you set a configuration and then you can kind of leave it and the powergate will do the work. So the other really cool thing that's worth pointing out is for those of you that are building on IPFS as well, the powergate really helps you bridge Filecoin and IPFS in some neat ways.
00:24:53.006 - 00:26:07.740, Speaker A: So one, for example, is with data retrieval. And so if you go to a powergate and you say, hey, I want to get my data back out, and the powergate realizes that it only has it in cold storage, only has it in Filecoin, it doesn't have to go straight to Filecoin and make a new retrieval deal and pull that data out using this add timeout setting. You can say actually go to the IPFS network first and see if the data already exists on the network before you go. Like see if anybody on the network is just providing this data before you go back to cold storage to pull it out. And here with the timeout, you're just saying wait 30 seconds to see if the network responds with this data before you go and create a deal on Filecoin to get it back into the network. And that's really neat because you can start to imagine building very hybrid systems where you have IPFS peers, users potentially serving their own data or serving data of interest to them that augments and helps keep data alive on the network in the hot layer. But even if it ever becomes not available in the hot layer, the power gate can automatically go back to cold storage, filecoin, get it back out, put it back on the network layer so your data is available.
00:26:07.740 - 00:27:05.242, Speaker A: There's a bunch of work that we still need to do about integrating this with external IPFS systems. So, for example, Pinning Services letting you point powergates you're running to Pinning Services and then I think Pinning Services themselves might start running powergate like services for their users. So lots of cool things possible there. And then also the idea of allowing the powergate to help you manage multiple nodes in multiple areas and help you decide when to move data from Filecoin out onto the network and where there's a lot of possibility to expand and build on things there. So what can you build with the Power gate? We're going to come back to all of these too at the kind of like midway point of the workshop. So a lot of these examples exist for you to go check out now. Once you're running your Powergate, you'll be ready to run these things.
00:27:05.242 - 00:28:03.546, Speaker A: So one is a really cool sort of basic Powergate pinning service running in the browser and definitely worth checking out. And Vasa built this really quickly. Really impressive how quick he put this together. And he's available on Twitter and I think he's on the Filecoin Slack if you want to ping him and ask any questions about this work, we'll take a look at it briefly later in the workshop as well. And then another one is a community member, somebody who's in the hackathon, maybe on the call today, I'm not sure, had some really cool ideas about building services for musicians that with data backed in filecoin. And so he has a really cool blog post where he talks about thinking about architecting apps on top of Powergate and using Filecoin and also definitely worth checking out. The next one is one that Aaron from my team put together and this is the tutorial that we'll go into at the end of the workshop.
00:28:03.546 - 00:29:04.010, Speaker A: But it just shows essentially how to use an authentication system, in this case using GitHub authentication to map users to FFS instances so that you can let GitHub users store data on filecoin. Really simple idea, very basic tutorial and basic setup. Easily something that you could clone and keep building and extending on. And then probably, I mean, definitely the most advanced use of the Powergate is the Slate project and a bunch of the Slate team are on the Filecoin Slack and are really open to questions. And if you're not sure what to build and you just want to go see some things running or figure out if you can contribute to things, this project is like wide open and super cool and it's basically your own personal pinning service that you run on your desktop. And we'll take a look at this briefly at the end of the workshop as well. Lots of teams building on the Powergate already, so definitely some good resources and knowledge out there.
00:29:04.010 - 00:30:05.090, Speaker A: I think I made this slide already like a month ago, so there's a lot more people building on it now. And so with that, let's start building. And so hopefully by now and anybody who showed up to have to surprise you, hopefully by now you have your docker desktop going because that's going to be the first critical thing we're going to get into. So with the slides kind of over, the first thing that we're going to do in the workshop is just figure out how to. Run a Powergate, and we're going to use some Docker Compose recipes. Basically, if you haven't used Docker before, docker Compose lets you sort of store how you want to start up Docker or set of docker images and then how you want to connect them together. And so in this workshop, we'll use a Docker Compose that we ship with the Powergate that will let you sort of with a single line spin up a Powergate, a Lotus Node and IPFS.
00:30:05.090 - 00:30:37.018, Speaker A: And we're going to use the variant of it that uses that local net. So actually it's also spinning up sort of a fake network of miners all on your computer using the Docker desktop app. So like I said, hopefully you've made it through the installation flow of Docker Desktop. And if you saw my note in the email, ideally you would have already at least run the command once just so that you kind of prime the pump. But it's okay if not. Some things just might take a little bit longer on your end. Don't worry.
00:30:37.018 - 00:31:15.542, Speaker A: If you get behind, I'll try to go slow. So the first thing that we're going to do is actually just run, make sure you have Docker running, make sure you have Docker running and so on. Mac, for example, I have this little whale in my taskbar that just lets me know that Docker is running on my computer. You can see it's still starting up. I'm not sure you can see that on my screen, share that high, but it's got the little containers bouncing on its back. And once that's done, it's started up and that means I'm ready to go. That's more or less everything I need to start using Powergate and the CLI for the rest of the workshop.
00:31:15.542 - 00:31:47.302, Speaker A: We'll get into the JavaScript stuff too, which has its own dependencies, but for now, that's all we need. So with the Powergate project, we pump out these releases. We've just been improving some of them right before the workshop, which is always safe. And so you can just click on this link. Oh gosh, I'm sorry. This is my script for the workshop. If you didn't catch it in The Slack, or maybe you're just following along in the video and you didn't catch this, you can just go here.
00:31:47.302 - 00:32:04.780, Speaker A: This is the URL for this document itself. So just the tiny URL, hackfs, POW. And that's going to be the script for the rest of the workshop. And so you can cut and paste a lot of things. You can get links. I'm talking about if you just open that up in your browser. So, yeah, go there.
00:32:04.780 - 00:32:52.346, Speaker A: And maybe if Carson or Aaron, one of you want to just make sure we reshare that in the Slack, that would be so okay, so I'm running Docker. I'm already down here now. And so the very next thing I want to do is just go and download the latest release of the Powergate and so with every release of the powergate, we generate a few different artifacts, a few different things that you can download. The first one we're going to use today is just this docker artifact. So the very first line when you go to that releases page, we're going to go ahead and download that when you download it. So I'm going to be working a lot in my downloads folder. So you'll see I should have just downloaded it.
00:32:52.346 - 00:33:22.674, Speaker A: Here you can follow these if you're feeling good about it, to just unarchive that on your computer. You can also just use your computer's built in one if you have that. So I just unarchive that by clicking on it. That's what mine does. If not, you can run these two commands to get that folder out of there. So now I have a folder. Let me actually just do that the other way.
00:33:22.674 - 00:34:03.314, Speaker A: Just so you see, this is actually going to be the wrong number now because we already did another release. So make sure that number just matches what you downloaded. So here mine is 13, for example. So if I unarchive that, you can see a bunch of things happen and then I can CD into the folder that it created. When I unarchived it again, it's 13, not twelve. And if I do the LS to list the files in that folder, you'll see it's downloaded a bunch of things. The two main things that we're going to touch right now, the two things that we'll touch that are worth kind of paying attention to at this point are the make file and the local net.
00:34:03.314 - 00:34:42.190, Speaker A: And so this is that docker recipe that I mentioned before. So this docker compose local net contains all the information for spinning up Powergate, Lotus, APIs and IPFS, all on your docker desktop. The make file that's just so you can run make commands in terminal. Make commands will let you basically are prepackaged commands that will do a bunch of things for you. And so we'll use that to run our powergate. So I'm already way down here. Okay, yeah, I guess let me go into the sidebar here.
00:34:42.190 - 00:35:15.602, Speaker A: So like I mentioned in my slides, the different networks that you can join today, we're going to be using localnet, not testnet. The Powergate ships with the ability to run testnet. That's all in here. That's the main docker compose. And sorry, I'm just going to look at this because I don't remember. Yeah, right. So if I were just to run make up, I think it would run the whole system and connect to testnet.
00:35:15.602 - 00:35:56.914, Speaker A: You don't want to do that today during today's workshop because if you connect to testnet and it's the first time your Lotus node has done that, it's going to go through the whole process of syncing to the chain, which can take a long time. So be aware of that. You will want to do that to run your apps on the real testnet at some point during the hackathon. But for today, don't worry about that. And when you're just developing things quickly and as you're trying to figure out what you're building, the local net might be a really good resource for you because you can kind of work off of testnet and get all the APIs. Now another caveat when you're running Localnet, you can run it in two ways. One is you can run it in the default way.
00:35:56.914 - 00:36:31.962, Speaker A: And the second is you can run it with what are called big sectors. And so one of the reasons that the Localnet runs so fast is because it uses really small sector sizes. And so the fake miners don't have to do a lot of work and create a lot of space in your docker system to store files for you. It uses these really small sector sizes. And so if you run the local net in the default mode, you're limited to only storing really small files. Actually, you can only store around 700 byte files. This is great if you're just testing APIs.
00:36:31.962 - 00:37:17.002, Speaker A: So like if you're building something and you want to deploy CI continuous integration and you want to test against filecoin APIs, this would work great for you. If you want to do something like today's workshop, you want something more realistic. And so for that, we're going to use big sectors so you can supply a flag to tell Localnet to run with big sectors. And big sectors will let you operate a little slower, but it will let you store 1 like, I think it's like 400 megabyte files. So really realistic for what you're trying to build an app to do. And so to do that, we just need to give it this flag. So if we're back in the terminal, make sure you're in the right folder where this make file exists and where this docker compose exists.
00:37:17.002 - 00:37:49.910, Speaker A: And we're going to run this command. And you'll see this is doing kind of two things at once. The first is we're going to set this variable, this environmental variable, big sectors equal true. And when the Local net goes to start, it's going to pick that up and realize that, oh, you actually want those big sectors so you have some more space you can work with. And then the second thing it's going to do is it's going to run the make command to fire up local net. And what I mean by fire up Localnet is it's going to make your docker desktop run all these things for you. So I'm just going to go ahead and run that.
00:37:49.910 - 00:38:16.274, Speaker A: It prints out something right there, which is kind of useful, which is the actual command it's running. When you do make localnet, it's just a convenience. It's actually running a docker compose command. And so right there I see the docker compose command that it ran. And I put that in the script right here. So if you wanted to skip the make file you could actually run this and get the exact same thing. And this is how you would start changing how you run it.
00:38:16.274 - 00:39:02.500, Speaker A: So you could change parameters about number of miners you run in the fake network or other things about the speed. So as you get kind of more advanced on how you might use localnet, just be aware here's a good template for how you start that up and then you can start kind of parameterizing and changing what you want to do. Okay, so it moved really fast here. I don't know if you saw like by the time I wanted to show you that, it already moved way past. So we can kind of walk through the log here and you should see this if you ran that already, we see some logs from our IPFS node, we see some logs from our powergate and then we see some logs from Lotus and already we see, we see an error. Okay, that's not a big deal. We won't worry about that right now.
00:39:02.500 - 00:39:38.710, Speaker A: Okay? We see a bunch of warning and info. This stuff is all normal. This means that we're running actually. So you're just getting feedback from your local net that it's running. So that means now you have essentially the whole I mentioned the spec that all the implementations of filecoin implement the spec. Essentially you have a network that is running this spec all in your local docker setup. And so that means that we can start firing things at the API.
00:39:38.710 - 00:40:26.326, Speaker A: We can do whatever we want. Okay? So with that running, the next thing you're going to want to do is actually just open up a new tab. We can all leave that running for now and just open up a new tab and we'll keep moving forward because the next thing we want to do is install the powergate CLI. So there's kind of like the easy way and the harder way to install the CLI. If you're experienced writing go or just want to get into the more technical things going on here, you can actually clone the powergate repo and build the CLI right from the Go code. And there's some nice reasons to do that. But for today we're going to just go the easy route.
00:40:26.326 - 00:41:12.406, Speaker A: And the easy route is to download the pre built binaries for the CLI. And so right here I have another link for you. It's going to take you back to that exact same place for the latest releases. But this time we're going to download the release of the CLI that we want. So depending on what flavor of operating system and platform you have Windows or whichever Linux variant or the Darwin build which is for Mac users. And so for me, I'm on Mac so I'm just going to go ahead and download that and I should be able to see when that's complete here locally I should be able to unarchive that and get a folder full of good stuff. So you can just go through those steps on Mac.
00:41:12.406 - 00:41:57.126, Speaker A: I can just double click it, or you can do it through the command line. So let me just move into that folder, which is called so this is the folder that I just unarchived from the thing I downloaded. And it has a few things in here. It has the license and the README. So an MIT license plus the README from the repo in case you get lost. And then this is the CLI itself, and this is just a helpful install script. And so if you run the install script, it's going to try to move the CLI to one of your binary paths so that you can actually execute it from the command line no matter where you are.
00:41:57.126 - 00:42:23.854, Speaker A: You could also just execute it in this folder. So if you get lost and you don't or installs a problem, you can always just stay right here and keep running it. But it's kind of limiting, so we're going to install it to our path. So I'll just make sure I don't have a POW already installed that would be messing this up. But to run the install script, I just do this. So I just do install. Before I do that, let me just show you what's inside of there.
00:42:23.854 - 00:42:57.978, Speaker A: It's just a bunch of logic about, okay, it's going to try to move that POW binary into one of these two places, and if it fails, it'll give me an error and tell me what happened. So it's just a convenience. You could do that manually, too, but you see. So for me, it moved POW to user local bin. Now you should be able to run anything in the POW commands no matter where you are in your computer. For me, I'm on Mac. So one of the problems that happens here is we haven't started signing these binaries yet.
00:42:57.978 - 00:43:24.758, Speaker A: And with Apple, you need to sign with your Apple certificates and all that. We just haven't done that yet. So you're all going to hit the same problem likely that I'm going to hit right now. So the first command you should run is just the Help command. So if I run Help, you see, that's the error. Okay, that's totally expected. And so if you're on Mac, let me just show you how to fix that right now.
00:43:24.758 - 00:43:59.454, Speaker A: Don't move to Trash, just hit Cancel to start. And then you're going to go into System Preferences, just your normal System Preferences. And then you're going to go into Security and privacy. And you'll see that there's basically this warning here that POW was blocked because it's not from an identified developer. That's just because we haven't signed it yet. But you can just tell it to go ahead and allow it anyway for now. So if you click Allow anyway, it may ask for your password it may not, but now it should be okay.
00:43:59.454 - 00:44:49.550, Speaker A: So if I get out of there and I try to do help again, it's going to be a different warning this time. And it's just going to say, are you doubly certain you want to do it? And if you want to do the workshop, you'll have to be certain. But you could skip this and sit back on the workshop for now, but go ahead and hit open, and now you can run that. It'll never happen again until you go and install it again. You might have to go through that process again. But now if I hit help, I can figure out what all these commands are. Let me so I mentioned this in the presentation that there are a bunch of helpful commands here for you to use at kind of the top level of the Powergate API.
00:44:49.550 - 00:45:23.190, Speaker A: You can do things like there's a miners index so you can figure out who all the miners on the network are. You can look at their reputation. You can track sort of the top level wallet for the Powergate. But we're going to skip a lot of those today. Part of the reason we're going to skip them is like when you're running a Powergate on the testnet, the information it collects about miners on the network is really pretty interesting and useful when you're running it on local net. Those are a bunch of fake miners that you're just running locally. And actually, I think the default is just one minor.
00:45:23.190 - 00:46:03.382, Speaker A: So it's not going to be very interesting actually when you're just on local net. So just be aware they all work, but less interesting than when you're running on testnet. So we're going to jump right into this FFS. The thing I keep mentioning the filecoin file system, and I kind of think the best way to show you what this thing is and what it does is if we all just start using it. And so we can do that by just creating an FFS. I'd mentioned that every powergate has one or many FFS. So every time you want to use one, you have to just create it.
00:46:03.382 - 00:46:36.450, Speaker A: And so you can figure this out whenever you're lost by just hitting the help commands and reading what's possible. So in the FFS command, there's a bunch of different things you can do. But the first thing we want to do is use the Create command. So we'll do. Pal FFS create. And if you're successful, you should get a little output there with your FFS ID and the token for that ID. This token is going to be important for two parts of the workshop.
00:46:36.450 - 00:47:06.940, Speaker A: One that we're going to do in just a minute here, and then later on you're going to want to use it again. And so I think best if you have just a notepad or a text editor or a code editor. Just copy this and put it someplace because we're going to come back to it and it's tricky to get back to easy. So make sure you copy that someplace. So I'm going to do that myself here. Cool. Got that.
00:47:06.940 - 00:47:30.770, Speaker A: Okay. So when you're using the FFS, that token is what is going to tell the powergate, which FFS you're talking to every time and ensure that you have the rights to talk to that one because you have the token and so you can basically run any FFS command.
00:47:32.950 - 00:47:33.362, Speaker B: Sorry.
00:47:33.416 - 00:48:07.550, Speaker A: Let's do POW. I'm not actually going to run this because it doesn't make sense yet, but if I wanted to run the push command, I could supply my token with the token flag. Whenever I run these commands, it gets a bit tedious because you're going to have to keep copying and pasting and whatever that token. So instead we can just set it as an environmental variable while we're working. And this happens per terminal session on Mac. So I'm just going to do it that way, which is set it for this session that I'm in right here and then I'll just keep working. And every command to the FS is going to use that token.
00:48:07.550 - 00:48:36.654, Speaker A: But this is why you need it twice because later we're going to use a different session, a different terminal session. And so you'll want to enter it again. Okay, so what you're going to do is this command here, export POW token from the script. Basically you're just going to copy the first part of that and then you're going to grab your token which was spit out of your create command and you're going to add that as the second part. So export. POW. Token.
00:48:36.654 - 00:49:24.406, Speaker A: So when you do this, it just means that it just means that that's a variable now that can be referenced and used by scripts. So I have mine set there and I can start doing things with it, but it means that the rest of these CLI commands are going to be able to find it and know that's the token I'm talking to. So with that set, I can go and look at the list. And I know we're running a bit long here or not long yet, but we will be running long. So I'm going to move pretty quickly through this stuff because it's all pretty straightforward to copy, paste and get through. But like I mentioned, every FFS has a set of addresses. So if you want to see the addresses associated with your FFS, you can run the list, you can create new ones you can see.
00:49:24.406 - 00:49:44.510, Speaker A: That's the one I have running on mine. Remember, this isn't a global address. In this case, it's just in my local net. So you won't find it out on the testnet. You'll just find it locally. Again, if you ran the power gate against the testnet, this would be a real address on the testnet. Okay, let's store a file because I think that this flow is pretty important to get.
00:49:44.510 - 00:50:18.546, Speaker A: And for those of you that have to leave, don't worry, all this is recorded. But I'm just going to stay long and just keep going if that's okay with Trent and everybody. Let's just do a lot of this stuff and then you can come back and reference it later. But so let's all grab a file to store. I grabbed one from Wikipedia here and I'm just going to download it to the folder I'm currently in. So now I have this Apollo footprint. So specific, it's a bootprint image and I'm just going to download it to my folder.
00:50:18.546 - 00:50:54.670, Speaker A: So I run this wget command. If for some reason you don't have Wget on your computer, you can also just go to this URL and download it into the folder that you're in. Okay, now I want to store this file on filecoin. So the way this happens using Powergate is actually a multi step process. The first is the Powergate expects data to be available over its IPFS node when it goes to start storing it. And so if that data is guaranteed on the network that that node is connected to. So in this case by default, it's going to be connecting to the global DHT.
00:50:54.670 - 00:51:36.862, Speaker A: So any IPFS, when you start building your apps, you could change that. But global IPFS, if it's data that for sure is out there, you could probably skip this step. But this is actually really helpful for this bootprint, for example, and your pretty cold IPFS node you're running in docker, you maybe want to add it. And this add step is just going to cache it temporarily in the Powergate so that it can then start creating deals around it. This add to Hot, so it's not pinned to Hot. It's not permanently stored on Hot, it's just caching it there. So if you run this command now remember this is scoped to that token that you set as the environmental variable.
00:51:36.862 - 00:52:24.050, Speaker A: So this is basically adding it and using your FS account or instance. And you should see that it successfully has added it. And now we want to push it to be stored. And when you push it, it's going to push this file plus the configuration I mentioned before that's associated with every file. This first round we're just going to use the default configuration that comes with the Powergate and every FFS instance. And so we're going to push this file and we're going to call this watch flag so we can sort of see the progress of the storage happen live since we all downloaded this same image. This is kind of nice for the tutorial.
00:52:24.050 - 00:52:59.770, Speaker A: They all have the same CID. So if you're not familiar with IPFS, the CID is essentially the fingerprint of this file, universally unique for only this file. But because we're all using the same file, we should all arrive at the same CID. If your output here is different for any strange reason. Use your output here. Don't use the one that I'll use in the tutorial, but I don't see any reason why it should be different. So because of that, you can see that this one that I just got when I added to hot matches exactly what I wrote earlier in the tutorial.
00:52:59.770 - 00:53:39.640, Speaker A: So now the rest of my commands are going to be referencing that CID files in the Powergate and storage in the Powergate is referenced by CID all the time. Okay, so I'm going to push this CID to be stored and I'm going to watch it. So I'll just copy that command, hit enter and you can see this will hang your terminal print. So you won't do anything else for a minute. And you can just watch this status sort of unfold. Now if you ran the local net in the default setting I mentioned, this happens really fast, but you're limited to size storage. So this would just tick forward.
00:53:39.640 - 00:54:49.440, Speaker A: We're running it with the big sectors, so it's going to be a little bit slower, something like a minute to go through the sort of flow of storing that file on the network and having the miners do all the work kind of behind it. If you do this on the real testnet, it's going to take much longer than that. And so this is really important when we get into using the API, using the JavaScript client, that you make all this stuff happen asynchronously and let your users leave and do whatever they need to do. When this is done, once this is done, you can actually always go back here too. And if you want, you should be able to parse through here and start seeing different logs about what's happening on top of just the info, things pumping out. Okay, so we'll wait for that for a minute. While that's happening, let me show you, I'll show you something ahead in the tutorial that I think is really pretty cool, which is so if you want to build applications using the Powergate, you basically can run this system wherever you want.
00:54:49.440 - 00:55:20.222, Speaker A: You can use the whole API suite. But something else that we're working on at Textile is that technology that I mentioned before called Buckets. We're working on integrating that with Powergate. So if you don't need the full Powergate API, you just want to be storing folders and persisting them to filecoin, this could be a really good resource for so, okay, I'm still in that folder with the image. This is a little side story. I'm just going to tell you. So I'm still in that folder with the image I downloaded.
00:55:20.222 - 00:56:02.760, Speaker A: I think I just saw success came through. But I'm going to stick on my little side story here so we don't have to do it later. Let me just make a file here with an index HTML. Okay, so with Textile Hub and Buckets, we can basically create a bucket which will move all of this to IPFS and push it to a remote node so I can do all this. We'll have a tutorial on this next week, I hope, which you can get way more into it. And we actually have a video from Monday where I do a lot of this, and our docs have a lot of it too, so don't worry. This is just going to be a quick kind of show and tell.
00:56:02.760 - 00:56:27.280, Speaker A: But I can create a bucket in our command line. You can just do short for bucket, which is buck, but I can just create a bucket in this folder. And I'm just going to call this live demo. Oh, no, let's see. And I can choose to encrypt it or not. I'm just going to leave it wide open so that when I push it to IPFS, people can see what's inside of it. I don't have to do that.
00:56:27.280 - 00:56:53.506, Speaker A: I'm going to put it in my default thread. And buckets are supposed to be big protocol interops, so when you create a bucket, that bucket will have HTP address. It'll have an IPFS hash, it will have an IPNs address. And now I'm going to show you what happens when you want to get it onto filecoin as well. But so I've created the bucket. Now I want to push it to a remote node by default. It's the remote node that we make available on the Hub.
00:56:53.506 - 00:57:34.414, Speaker A: So I'm just going to do Hub bucket push. There's a really cool blog post about how it does diffing and syncing and all that definitely worth reading if you're interested in that. But it's detected that these are all new files, so I'm going to go ahead and push them now. The next pieces of what I show you are not in the public version yet. This is all just preview, but it should be there soon, so you should be able to play with it in not too long. And you'll see, this is not our production URL, but you can always print out the links. So these links would be on the Hub domain if this was production.
00:57:34.414 - 00:57:58.390, Speaker A: But here we have it on our little staging gateway. So I can go to this bucket URL now. And this is just an IPFS. This is just a folder on IPFS. So you could actually view this on any IPFS gateway. It's pretty cool. It also has the IPNs address, and you can see that index HTML that I just created in the terminal now pushed off their remote.
00:57:58.390 - 00:58:28.274, Speaker A: Okay, so that's all cool. That's been on there for quite a while. But what I want to show you now is moving this to filecoin. So if I take this bucket that's already been pushed, already exists, and I run the archive command, it's going to ask if I want to push this to the testnet. Of course, all super experimental, so proceed with caution. But. You'll see that it's queued to be stored on testnet.
00:58:28.274 - 00:59:32.660, Speaker A: So now it means my archive or sorry, my bucket is on IPFS, but it's also moving it to filecoin, and there should be a deal created. And you can basically let me pull up what that command is. I forgot already skipping forward here, status wide, I forgot the archive. And you can see basically that's the whole log of everything that's happened on the remote powergate here that's doing everything to move this bucket from hot storage on IPFS to cold storage. And it's doing this parallel to multiple miners on the network. And this is all testnet. So some of these will fail.
00:59:32.660 - 01:00:27.910, Speaker A: Some of these miners aren't fully functional yet, but it's okay, it's just a test and start playing with it. And you could watch this sort of unfold over time, and eventually that deal will exist and that bucket will have been archived on filecoin, and you'd be able to go check all the live filecoin stats things and see your bucket out there existing. So we'll have more on this soon, but it is kind of a nice, easy way for you to get into filecoin and merge filecoin with or sorry, merge filecoin with IPFS. But this is all just a subset of what powergate can do kind of more powerfully. And so let's get back to the main tutorial now. Right, so I started that little tutorial or that little sidebar there while I was waiting for this to come through and say it was successful. And so hopefully yours has also.
01:00:27.910 - 01:01:32.920, Speaker A: And so if it's successful, we can also look at the log for that CID, and this will actually look really familiar to what you just saw with buckets. If I hit log, I'll actually remain in the log so I can watch this over time if it changes. And so you can see everything that's happened already with that CID, that bootprint that we pushed to the network, and you can just read through this and see how it created a deal for it with your mocked miner. And then, yeah, if you want to get out, just hit CTRL C if you're not familiar with that. So, like I mentioned many times now that every storage request is paired with a CID config. And that config file determines what would all happen right here during all this process. And so we can look at what the config was for the file that we already have stored by running this info command with the CID.
01:01:32.920 - 01:02:22.804, Speaker A: And so if you run that, it will just print out the config. And here it knows it was the default storage config, and it will give you all the different parameters that have determined how the powergate is storing that file. Like I mentioned before, this is that add timeout flag. Allow unfreeze just says basically, if you make a request for the file to pull it back out of the powergate, and that file doesn't exist in the hot layer. In local hot storage and the powergate determines that it should go to cold storage to get it. The allow on freeze just tells it to do that, just to go and make the payment to retrieve that data without any sort of intervention. And that's important because retrieving data costs file coins.
01:02:22.804 - 01:03:09.252, Speaker A: So if you set that to false, powergate will not go and try to pull it out of cold storage automatically. A bunch of cool parameters around cold storage. You can filter by countries, trusted miners. You can exclude miners if you've had problems with them. And then you can set things like replication, how long you want to be storing the data, the max price you're willing to pay, whether the power gate should automatically renew storage if your deal is coming up to expiration and all combined. This lets you do some really kind of powerful things and repair this one's kind of less important during testnet or during this period. But as we move closer to mainnet repair is just the idea that you could store this file replication.
01:03:09.252 - 01:04:00.952, Speaker A: Say you have three copies and one of the miners is slashed because they stopped storing it. This will just tell the powergate, if it detects an event like that, to automatically create a new third deal for you. Okay, so let's run that log command against our file again. So it's the one we ran, like, two ago, which keeps you kind of locked in here, and it subscribes to the stream of changes for that file. We'll run this log, and this is where you're going to need that token a second time. So in a second terminal, you're going to export that token again. So I have in one terminal, I have my log sitting there waiting and watching and listening for log changes.
01:04:00.952 - 01:04:35.172, Speaker A: And in the first terminal or in a new terminal, I'm going to start some new commands. And so I want to use the same FFS instance. So I'm just going to set this value again so I don't have to keep resetting it. If for some reason you've lost your token and you want to just move quickly, you don't have to leave this open for the rest of the tutorial. You can close this and keep using the same terminal and just pull up the log again when you want to see changes. But for me, I want to keep that open so we can flip back and forth. Okay, so I'm ready in my second terminal and I can verify that I'm ready.
01:04:35.172 - 01:05:26.644, Speaker A: And using that same FFS instance by I could pull up the log. I can run any command here against that same CID and it should know about it and be able to do things with it. So, yeah, I'm ready to go. And now I want to basically change how the powergate is storing that file. And so to do that, I'm going to create a new CID config. So all you have to do is create a file locally. So I don't have anything in the folder I'm in, but you can just create a file so you could run Touch, so that would create an empty file if you run the Touch command or if you have a file editor or whatever, just create a file called Cidconfig JSON in whatever folder you're in.
01:05:26.644 - 01:06:14.660, Speaker A: So now I have that folder or sorry, that file, and I'm just going to use a really simple editor to open that up. You see there's nothing in it. And all I'm going to do is copy this config string into there. And the only thing I've changed about this config versus the default config is I've disabled hot. And so what this should tell powergate to do is to stop serving it on IPFS. So if I go ahead and save that, I can now push it to the powergate. So basically when you push a new config, you're going to push the same CID, and you're going to tell it, here's my new config file.
01:06:14.660 - 01:07:00.864, Speaker A: And so the Powergate will take that it'll look at what the differences are, and then it will do everything in its power to start storing it in a way that complies with what you're telling it in the new config. What did I do? Oh, you know what? I think my line break there is wrongdo. Yeah, of course. I have it right here. You expect that error because basically the power gate is warning me, like, oh, that's already stored there. Are you certain you're doing what you mean to be doing, which is to override something that's already stored, not stored again. So all you have to do is give it a flag.
01:07:00.864 - 01:07:19.270, Speaker A: That the override flag, which just confirms that's what you need. Let me see something.
01:07:23.350 - 01:07:24.860, Speaker C: Let it.
01:07:26.590 - 01:08:29.270, Speaker A: What did I do wrong? Maybe I have not set my environmental variable. I'm going to just try it over here. Did I get my the CIDs messed up? I'm just trying to figure this out. It okay. Maybe we just try again. Oh, I wonder what happened there. Let me just try let me just try adding it again.
01:08:29.270 - 01:09:23.080, Speaker A: It's okay. That's good. All right, I think I must have copied something wrong here in my setup, but I'll get that fixed and we're running long anyway, so I'm pretty okay with that. But basically what was supposed to happen if I didn't get that wrong, so I'll get that fixed and share it with the chat channel. But basically what was supposed to happen was once you push that updated CID config, this log will start spitting out the changes that are happening as they happen. And so you would see it removed from the hot storage. And then what I was going to do as sort of the final step is you have to change two flags the next time you push something.
01:09:23.080 - 01:10:32.884, Speaker A: So I would set the hot layer back to enabled, which is true, but to ensure that the power gate can automatically pull it back out of the cold storage, I would set allow and freeze to true as well. And so the final step of this piece was that I was going to sorry, I think I'm getting help here on what I was just doing wrong. Okay, maybe. Okay, cool. All right, we're just going to do it again. So if I do this okay, cool. We're going to use this instance ID when we push the new config.
01:10:32.884 - 01:10:57.008, Speaker A: Sorry about that. That was a copy paste error in my instruction. So I'll update this workflow right after the call. So basically when you do this push command, when you're pushing the new config, you need to use the address that comes back from the CID config. So I'll update all that. But we are running a bit long. So I'm just going to kind of move past that.
01:10:57.008 - 01:11:40.488, Speaker A: But come back to this section right after the call and we'll update that. So basically starting with the create a CID config, I'll update all those instructions so that you can just copy paste them and you'll see basically you push a new version, it will remove it from hot. You'll push a third version that will take it back out of cold storage and make it available on the network again. Cool. So the last thing that we can do here in the little CLI demo is we can just pull the data back out. And so that's really simple. I just ask FFS, can I get this CID back out? And I just wrote it to a new local file.
01:11:40.488 - 01:12:35.744, Speaker A: So if I look in here, there should be evidence of a moon landing. And if I go ahead and just open that, you can see there it is. And that's the same file just with a different name as the original one that we put in at the beginning of the workshop. So that's kind of been the full that's sort of been the full lifecycle of a file. Okay, so I already did this part which is to show you, okay, that's the full suite of APIs. Just to comment everything you just learned in the CLI, you can do exactly from the API and that includes with the JavaScript library. And so I already showed you this, which is a narrow set of those APIs that we make available over buckets and more on that coming next week.
01:12:35.744 - 01:13:16.844, Speaker A: But for now I wanted to actually jump in and just wrap this up maybe the next ten minutes or so, just show you a little bit of what's possible with the JavaScript client. So okay, cool. Sorry, I see what the problem was too with the other thing. Let me explain this really quick because I think it's pretty instructive. Basically, when I create this CID config, don't copy paste this thing into it. The reason this thing doesn't work is because it was mapped to a totally different file here. It has the wrong address.
01:13:16.844 - 01:13:46.984, Speaker A: You need to use the one that is created in your Powergate instance. And so I'll update these instructions for you. But obviously I did this once through and then created this as I was doing it. And so obviously it doesn't match to what you're going to get. So I'll fix that all up for you. Okay, so let's look at the JavaScript stuff because I think that's what a lot of you are going to want to build on. And so the first link here is for the client docs and these are pretty fleshed out.
01:13:46.984 - 01:14:41.172, Speaker A: Like you're going to get a lot of instruction in here about how to use the JavaScript client library against this Powergate API. And you'll see if you go to the very first link in the right menu, the FFS index, you'll start seeing a bunch of these commands which are exactly the ones that you've already run today. And so this should be mapping pretty clearly for you how you could then just go and start building stuff with this. But since I'm already running my own Powergate instance here on my docker desktop, I can already start seeing things people have built on their own that use these APIs locally. And so one of them is another one from Vasa. I showed this in my slides really quickly. This is the example of a personal pinning service that uses MetaMask.
01:14:41.172 - 01:15:45.452, Speaker A: And so I don't sure so if I just log in with MetaMask, I don't know what happened there. Well, go play with this one. Maybe go play with this one last time I went in. You basically log in with MetaMask and that will create an FS instance for you which then will let you start basically storing files and all that good stuff. So the next thing that's super cool is the Slate app that I mentioned before. And so Slate is a real full client based on filecoin, but it uses the Powergate to enable some slick little interactions and gives a really nice interface on top of it. But now that you're running your Powergate instance already, you can fire this up.
01:15:45.452 - 01:16:19.412, Speaker A: And so in the instructions that I gave or in there README, you can actually just copy this directly. And so wherever you are, you can clone that repo if you have GitHub installed. And basically I'm going to clone it. I'm going to CD into that project. So I'm going to change my directory into that project. I'm going to run NPM install which is going to get all the dependencies local and then it's going to run the development version of this. And so let me leave that for a second while it's running and then we'll come back to it and I'll show you what happens there.
01:16:19.412 - 01:17:03.492, Speaker A: And so then the final thing is I was going to do a little bit more of a hands on with the Node starter app, which is the JavaScript app. My plan here was more or less to walk through a tutorial that Aaron wrote up. But I think this is probably a good stopping point and I've probably overloaded everybody with things for now, but this tutorial is really well written. Good job, Aaron. And so basically I think this would be chapter two for you, which is move over here and start building something. You have your powergate instance. You can basically skip in this tutorial or you can skip all the sections about running your Powergate and you can just run these different commands and edit your app.
01:17:03.492 - 01:17:29.864, Speaker A: And this is the app that I mentioned that will give you GitHub authentication and every user who authenticates to the app, it will create a new FFS instance. And then the next step for you would be to allow them to upload files and add files to the Powergate instance. So I think I'm going to leave it there. Let me just show you. No, this is taking a little bit long. Maybe we now let's wait a second. I think it's almost ready.
01:17:29.864 - 01:18:09.044, Speaker A: So there we go. So this is the Slate client running on my local Powergate instance. Got to wait for it to compile. So like I mentioned, this is running against the Powergate instance. So if you just followed those steps, this is running against your Powergate instance, running locally. You could connect this to testnet in the future. But if you want to start storing files, you can play around with this.
01:18:09.044 - 01:18:37.916, Speaker A: I'll just store a file real quick, picture of the mountain. Go ahead and make the storage deal and you'll see that this is the exact same thing that you saw in the terminal earlier. It will move through the process of creating that deal on the network. It's proposing a storage deal. Eventually it will come around and be success. And there's a bunch of other amazing stuff here. So definitely if you want some inspiration, poke around at that or just see how it's using some of the APIs, go for that.
01:18:37.916 - 01:19:04.570, Speaker A: But otherwise I think I'm just going to leave it with that today and just kind of invite you to do chapter two, which is start building with the JavaScript client and we'll take all your questions async on Slack for that stuff over the next few days. Besides, I guess it would be cheating if you started the hackathon early. So probably a good spot to stop. But we can take questions for a little bit longer here. Live if it's helpful or we can call it a day, night, afternoon, lunchtime, whatever people's time zones are.
01:19:06.700 - 01:19:33.490, Speaker B: Yeah, let's open it up for questions. If anybody wants to ask anything, feel free to just give me a wave and we'll unmute you. Or just write it in the chat if you don't have access to microphones. Yeah, karate. I'll unmute you. You want to go ahead and ask?
01:19:35.540 - 01:19:36.572, Speaker A: Yeah, it's karate.
01:19:36.636 - 01:19:51.296, Speaker C: Like karate karate. It's all right. You'll see me again. So thanks again for having me and I really appreciate all the work that Textile has done to smooth the on ramp for us. And I just had one last question. It's a really straightforward one. I noticed she fired up that file coin GUI.
01:19:51.296 - 01:20:01.748, Speaker C: And so did you clone a repo to get that and then push it to my own local file coin instance? Is that what I have to do? Sorry, my own not file powergate instance locally.
01:20:01.924 - 01:20:05.140, Speaker A: So you're talking about the slate, what I kept referring to as slate.
01:20:05.220 - 01:20:11.292, Speaker C: That was pretty cool looking. I mean, I blinked and then next thing I know, you had a front end. And I was like, wow, that was fast.
01:20:11.426 - 01:20:42.864, Speaker A: Yeah, I moved through that one pretty quick. So basically it's in the tutorial, the workshop instructions. Towards the end, it gives a link to the slate repo. And since you already have the powergate running, you just need to do the three lines which are to clone the repo CD into the repo, install the repo fourth line actually, which is to run the project. I basically copy pasted those four lines as one, dropped them in my terminal, ran all that left, kept on talking, and it was firing up. And then I went to the URL.
01:20:42.912 - 01:20:49.736, Speaker C: So, yes, configured to talk to my local instance. Can I can change that around? I can push in the docker, do whatever I want, however I want?
01:20:49.838 - 01:21:20.164, Speaker A: Totally. So I see. A question from Thomas J. Rush, which is a short sentences for what buckets versus a thread is. So, threads are really meant to be a database, and typically when you are using a database, you don't often put the large binary files in there to move them around. It's really for the metadata and for things that you want to query and build indexes on top of. Buckets are really around moving raw data around.
01:21:20.164 - 01:22:11.732, Speaker A: And so buckets are built on Unix FS, which means that you can create buckets that are directories folders on your desktop and all the things inside of them will become hashes on IPFS. But the root of that bucket becomes a lot more. It gets anchored in a thread, so that a thread behind the scenes is going to synchronize that across peers. It allows you to push that bucket to remote peers, to persist it on the IPFS network, and it allows you to edit what's in that folder easily and synchronize those edits across peers that are collaborating on that bucket. And so if you look at the way that the hubs bucket gateway works, I can change files in a bucket, but the gateway URL stays the same. And so it sort of makes it easy to manage those changing hashes that are happening on IPFS a lot.
01:22:11.866 - 01:22:21.320, Speaker D: So if I have one folder with say, 3000 files, would there be one thread in one bucket?
01:22:22.060 - 01:22:26.440, Speaker A: And I'm just continually adding new files to that folder.
01:22:26.860 - 01:22:29.800, Speaker D: So would that be one thread in one bucket?
01:22:30.300 - 01:22:52.908, Speaker A: Yes. It really depends on the data model. That's optimal. Kind of a mix between optimal for your application and how threads work. But more or less, you can actually have multiple buckets in a thread. When you start using buckets, you don't have to start thinking about threads right away. It sort of is working behind the scenes.
01:22:52.908 - 01:23:24.264, Speaker A: But behind the scenes is a thread, which you can think of as a database. And inside of a database, depending on what kind of databases you're familiar with, you might have tables or you might have collections. So inside of a thread, you can have many collections. When you create a bucket, it creates a new collection. So you could have many buckets that are these collections in the same thread doesn't matter. But so your bucket, you could just keep adding the same files to that same bucket, which would just behind the scenes, be changing what is being tracked in that collection. Okay, thank you.
01:23:24.264 - 01:23:25.050, Speaker A: Yeah.
01:23:29.980 - 01:23:52.230, Speaker B: It anybody else I can unmute you? It's a little nice to hear different voices. Sure. Andrew's tired of talking. Let's see. Can you see that chat, Andrew? Maybe if you want to just read the next one I see there.
01:23:53.560 - 01:24:20.124, Speaker A: So maybe a little bit more context there. Are you talking about anything I covered today, or buckets specifically or something with threads? Encryption of buckets? Well, I saw Sander was on the chat, and he's kind of the mastermind of what's happening with encryption and buckets. So Sander, if you don't mind actually giving a good explanation, there would be me.
01:24:20.162 - 01:24:21.820, Speaker B: Let me unmute you, sander.
01:24:32.970 - 01:24:33.318, Speaker A: I think.
01:24:33.324 - 01:24:35.510, Speaker B: You all could go ahead and yeah, okay.
01:24:35.660 - 01:25:18.950, Speaker D: Hey, everyone. I was just typing in the chat. There encryption in the buckets. Any given bucket uses its own encryption key. And that key is actually stored in the bucket schema, which is defined by the collection model. Like Andrew was describing earlier, a thread can have any number of schemas, and the buckets module actually just defines its internally. It just creates a collection schema.
01:25:18.950 - 01:26:23.370, Speaker D: And part of that schema has a spot for the key, the encryption key. So actually, when you use the hub buck command, it just works as you'd expect. Normally if you're using an encrypted bucket, because the encryption happens on the daemon side, and you can run buckets locally if you want to, and then your key wouldn't be shared with anyone. And then also built into buckets, there's just a client side encrypt decrypt command that's kind of like keybase. So you can do the encryption on files and then that's password based encryption. So you just share that kind of on a back channel if you wanted to. But the whole purpose of bucket encryption is to obfuscate the links and the actual data that make up the Unix FS directory.
01:26:23.370 - 01:26:49.566, Speaker D: So what we do is kind of a custom Unix FS implementation where you sort of encrypt as you walk the node and then you decrypt as you back it out. So I can actually paste some more details on the type of encryption that's used. It's a streaming based encryption. I can paste that in the chat.
01:26:49.758 - 01:26:54.530, Speaker B: Yeah, why don't you put that in the Slack channels for hackfs?
01:26:54.870 - 01:26:55.378, Speaker A: Okay.
01:26:55.464 - 01:26:56.290, Speaker D: Sweet.
01:27:07.830 - 01:27:12.620, Speaker B: Got, brahma, you got some questions you want to ask those?
01:27:16.670 - 01:27:18.698, Speaker A: Yeah, I'm just asking.
01:27:18.864 - 01:27:23.470, Speaker B: Typical. All right, maybe maybe we'll stick with text.
01:27:23.620 - 01:28:08.394, Speaker A: A little hard to hear the so just for people watching the video, brahma asked if there's a concept of authorization or role to access thread or buckets so that only auth people get access. So right now, it's pretty basic in threads. Basically, threads are designed so that there can be plug or play ACLs on threads that will do more complicated access control, but right now, it's all or none. So anybody that you're sharing that thread with could also be partaking in the thread. Access control is just something on our backlog that we'll be implementing soon. And then buckets are more or less the same. But you can share the output of buckets with people that can't write to them.
01:28:08.394 - 01:28:16.960, Speaker A: And similarly, you can have encrypted buckets that nobody can read except for people that you share the keys with or the password with. Like Sandra was saying.
01:28:19.970 - 01:28:48.150, Speaker B: Awesome. Any other questions? Yeah, Carson mentioned in the chat that we'll have something specifically dedicated to threads and buckets next week. Those aren't scheduled yet, but we'll be sure to get them on the calendar and send some invites out as soon as we're sure when they're going to be. Andrew, did you have anything else you wanted to wrap with, or you think we're.
01:28:50.250 - 01:29:34.294, Speaker A: I think we're good. I think the only thing to mention is that I'll fix the command that I messed up in the script, so I'll fix that command and push it, and I'll just mention on the chat in a few minutes. That when that's fixed. And then at the end of my script, I also have a couple of resources that, if you're following along, definitely take a look at a bunch of links and then also some opportunities. If you're already building a product that already has users and you want to figure out how to integrate this stuff there. We're offering some hosted services that sort of like the full powergate stack for those kind of teams that are concerned about scaling, but for users that are just trying to build hacks, the best way is just to run this stuff. You saw how easy it was, but we're here to help either way that you need.
01:29:34.294 - 01:29:39.734, Speaker A: And we'll be giving some more workshops, so hopefully a lot more content, too. Awesome.
01:29:39.852 - 01:30:18.770, Speaker B: Yeah, we're really looking forward to everything, so yeah, I will give my spiel once again, which is, if you haven't staked already, please stake as soon as you can. This is how we're going to make sure you're engaged with the Hack FS event. After Monday, we'll start removing people who aren't staked just because we want to have really focused. We know people are going to be hacking for 30 days and we want people who are committed to the event. So make sure to stake as soon as you can and hit us in a DM or any of the channels with issues you have. I know there were some hiccups that people were having. There are two events tomorrow in the morning.
01:30:18.770 - 01:30:54.320, Speaker B: There's IPFS and decentralized messaging workshops similar to this. We're going to be having Jacob Hewn from the filecoin team going through that. Recommend checking that out if you're interested in learning more. And then in the evening, more open ended session where Juan will be going through the hundred hackathon ideas spreadsheet that we were spreading around earlier. Open ended session, come hang out, chat. We're just going to be figuring out some crazy ideas, seeing what's possible. Hopefully you get some inspiration from that event tomorrow night.
01:30:54.320 - 01:31:08.660, Speaker B: I think I covered everything. Of course, I missed the kickoff on Monday. Make sure to block out your schedule. It's going to be good. 12:00 p.m. Eastern. And I'll be sending out all these calendar invites as well.
01:31:08.660 - 01:31:24.280, Speaker B: Awesome. I think that's it. We can wrap here. Let's give a golf clap for Andrew for talking for an hour and a half. Good job, man. And we will see you tomorrow and or in the slack. Thank you.
