00:00:01.770 - 00:00:04.990, Speaker A: GM, GM, GM. Lots of folks.
00:00:22.870 - 00:00:34.340, Speaker B: Hello, everyone, and welcome to the SuperHack Build Guild Workshop. Building apps from Ethereum. Joining us today is Austin Griffith, who will be taking us through this session. And with that, I'll pass it over to Austin to get this session started.
00:00:38.150 - 00:01:03.610, Speaker A: Okay, let's go for it. Let's just dive in. M y'all. You could throw some questions in the chat, but I don't have much time, and I want to get started quickly, so I'm going to share my screen. Okay, the first shout out is for oh, man, how do I shrink this a little bit? Not going to do it. The first shout out is, this is the last day to attend to apply to the SuperHack. So go apply to the SuperHack.
00:01:03.610 - 00:01:24.578, Speaker A: It's ETHGlobal event. SuperHack. If you haven't already, go check it out. Go apply. Okay, so the first thing I'm going to work on today is I want to build an app, and I want to tinker with it. And I don't know exactly what's going to happen when I build this app. A lot of this is going to be discovery, and that's kind of what I want to show off about Scaffold ETH.
00:01:24.578 - 00:01:58.554, Speaker A: And this tooling is this is a really good stack for you to be able to try and discover new things. Maybe if you don't know exactly how you want your smart contract to look, but you want to tinker and figure it out. So I'm going to be using Scaffold e two. You can find Scaffold e two in the repo, and you can just go here and kind of use it as a template, create a new repo from Scaffold e and get started from that. But I'm going to use something completely different. Not completely different. This is a new kind of beta software that we're going to throw in here, and it's MPX Create ETH.
00:01:58.554 - 00:02:23.930, Speaker A: So MPX Create ETH is definitely not a solid tool yet. It's something we're working on, but it's kind of like a choose your own adventure CLI for getting set up with Scaffold ETH. I'm going to grab the latest code. Okay. And the thing we're going to build today is going to be kind of like a commit reveal scheme. It's probably going to get front run, so I'm going to call it front run fun. I think that's what we're going to call our app.
00:02:23.930 - 00:03:04.322, Speaker A: So I'm going to do an MPX Create ETH Front Run Fun, and I'm going to use Foundry this time, and we're going to get started installing things. So if I go ahead and CD into this directory, we can get started kind of looking at the code and Scaffold ETH. So this is going to install Scaffold ETH with whatever stack you want, whether you want Foundry or Hard hat. Let me check the questions here. We are using the new Rainbow Kit VM with greater than version one. So if you want to look up kind of how to do things. In scaffold ETH.
00:03:04.322 - 00:03:36.494, Speaker A: There's a lot of our own docs, but you can look at the Wagme and VM docs also. Okay, so let's look at our code. It starts with Foundry, and we've got our contract here. So it's a nice kind of template contract that helps you just get started. It has a lot of primitives and kind of example code. And then we have our front end, our next JS, and we can see that here. Once it installs and runs, it tells us to go ahead and CDN and we're going to do the deploy here.
00:03:36.494 - 00:04:12.342, Speaker A: So I'm going to run this yarn chain over somewhere else and that's going to bring up our anvil, I think, right? And we'll get another one going with that. And we'll do a yarn start and that will get our front end going and we can open that up. And then finally we'll do this yarn deploy here and that's going to deploy our example smart contract to our local network and set us up to tinker around with that. There we go. So that's deployed. So now if we look at this, we've got this nice Scaffold ETH front end. We can go to this debug contracts page and we can interface with our smart contract.
00:04:12.342 - 00:04:40.078, Speaker A: And our smart contract is like a greeter contract. I think if I grab some money from the faucet and I say like, hello world, it lets us set some kind of greeting, right? Yeah, there we go. Okay, cool. I'm going to carve all of that out though. I want to start from scratch here, which means I'm going to delete all of this stuff. I'm not going to use that. And also there's going to be a handful of things that will break in my tests.
00:04:40.078 - 00:05:07.122, Speaker A: So I'm just going to go ahead and kind of clear those out now just to save me the headache. Let's see. So in my deploy script, I'm not going to have anything passed into the constructor anymore. And then in my test script, I'm going to probably delete all this stuff. Let's see something along those lines. You can write your tests later. This thing that I'm building right now, I'm just tinkering.
00:05:07.122 - 00:05:38.962, Speaker A: I'm not sure exactly how I want it to work yet, but I want to tinker around and see if let's go ahead and redeploy that. I'm going to deploy a completely empty contract here. But yeah, okay, it works. Okay, so now we have kind of a starting point. So what I want to build is something to test whether I'm going to get front run on optimism. So I want to deploy this to optimism. So what I'm going to do is I'm going to have some secret that I store, right? And it's going to be the hash of a secret, right? So I'm going to have some like bytes.
00:05:38.962 - 00:07:22.230, Speaker A: Actually. It's going to probably be a mapping from an address to bytes 32 and this will be some kind of like public commit, right? And then later on someone will have to reveal that commit and they'll be able to get some money out of the contract or something like that, right? So we're going to have some function that will let me do the commit and what that will do is let me submit some commit and maybe let's, I don't know, should we make it so I can only submit one? I really should have some require statements in here and a bunch of other things. But we're going to do this kind of unsafely the whole thing is to just test like will I get front run or not? When I go to put that secret on chain, will I get front run or will it just let me have the money? So actually this is going to be a payable function too, right? And some money will come into the contract. Okay, let's just go see that that works, right? Let's just go deploy that and tinker around with it. Okay, so now there's some do commit and it's just basically I could submit any kind of hash and I could even submit some money along with that like and there we go. It does commit. And then if I look at the commit for my address, I get that, right? Okay, so then what's going to happen is there's going to be some other function that will let us reveal, right? This is going to be the do reveal function and in this case you will submit some other bytes 32 and yeah.
00:07:22.230 - 00:08:07.800, Speaker A: Okay, so I want to do the hashing in another function. I don't want to do the hashing here so I can check it and test it and play around with it kind of as I'm going here. So what I'm going to do is I'm going to have a get hash function here that takes in some reveal and gives me the hashback of the reveal. And actually we want to put in the address of this contract just to kind of like namespace it so the hash doesn't get revealed anywhere else. Oh, that makes this a view function. Okay, so instead of doing this, then we're just going to check that the gith of the reveal equals equals some commit. Okay.
00:08:07.800 - 00:08:48.274, Speaker A: And then it deletes it. I don't know what we're doing here, but that looks good. Well, right here we would actually pay people out. So we would do some commit and we would take some money and then we'd do the reveal. And if you correctly revealed, we would send you all the money in the contract, right? So anytime you're hacking around on contracts, there's always solidity by example and you can go here and get all the stuff. What I'm looking for here is just like how do I copy paste? I want to send some ETH, right? Sending ether. There's all these tricks of where you would use transfer and send.
00:08:48.274 - 00:09:26.286, Speaker A: But call is the best way to do it, right? You do this like call thing here, right? So I'm just going to go copy that and paste it in. And what do we want to send? So we want to do message sender call. And the value will be probably all the money in the contract, right? So it would be something like address this balance, I think. And we're not going to use that. And do we require it? Sure. I don't know. I'm letting kind of the one thing I don't like here is that I could commit and then I could recommit something else.
00:09:26.286 - 00:09:51.794, Speaker A: I don't know. This is not like secure in any way, right? We're tinkering around. We're trying to figure out like we're trying to play around with commit reveal mechanics. We're trying to see what happens on mainnet. Let's just see if this even deploys. The point is that you as a builder can tinker around with solidity and figure out kind of do you think copilot is good? Yes, I love copilot. Copilot is super handy.
00:09:51.794 - 00:10:33.330, Speaker A: I use it all the time in here. Okay, so we have a contract out here. Let's go see if it works the way we want it to. So we're going to have some commit, right? We're going to have some secret, right? Let's just say our secret is hello world. Okay? And we're going to commit that with some amount of money. Okay, I got to hit that button too. Okay, so then this goes on chain and there is some commit for my address, right? And what we need to do is come up with the reveal, the hash of that thing.
00:10:33.330 - 00:10:49.514, Speaker A: So this isn't going to work. We're going to have to do a do hash and then a do reveal. Okay. We got to do this a little bit different. So what we have to do is first get the hash. So we're going to have some hello world. This is going to be our secret and our secret is going to go in and it's going to give us this hash and then that's the thing.
00:10:49.514 - 00:11:24.790, Speaker A: We're going to commit with some value. Okay? So it's the hash of the secret that goes on chain first with some I need to hit that button with some amount of money. Okay, so now there's money in this contract and there's a secret that's hashed, but you don't know what the secret is yet. Okay, so then what someone has to do is do a reveal. They basically have to type in hello. Okay, let's just do hello and this should fail, right? It should say reveal does not match. Right? But if we do it just right and we say hello world, and we hash this, hopefully this is going to work.
00:11:24.790 - 00:11:40.886, Speaker A: Boom. It worked. Okay, and what happened? The money's out of the contract. The money was sent to us. Okay, so obviously we would need to do way more testing. There's a handful of things that just make this not a good idea to deploy it to mainnet. But we're prototyping.
00:11:40.886 - 00:12:07.426, Speaker A: We're trying things out. We want to see what happens. We want to see that, or if not, we will get front run. So now I want to deploy this thing to a live network and see what happens. Normally, you would sort of tinker around, and then you would move over here and you would build a little bit of a front end. Maybe I could get to that in a little bit, but I don't know if I will have time. Let's do a little bit.
00:12:07.426 - 00:12:36.586, Speaker A: Let's do a little bit. So what are basically the reveal function? We want to let a person maybe come in here and reveal maybe a commit. I don't know exactly what I want to build a front end for. I almost want to just play around with this on mainnet first and then come back and build the front end. If I have time. Since we only have a half an hour and we're already halfway through it, I think I'm just going to try to put this out on optimism main net. Okay.
00:12:36.586 - 00:13:05.874, Speaker A: And then we'll see what happens with that. What we're going to need to do is we're going to need to do a yarn generate, and that is going to create a local deployer account. You'll notice with a lot of web, three deployments, a lot of ethereum stacks. You'll see people copy paste private keys around for deployments. Don't do that. This thing takes care of it. It creates a deployer mnemonic.
00:13:05.874 - 00:13:48.340, Speaker A: It puts it in your Hard hat or Foundry folder. It ignores it out of the gate. So you'd have to really work hard to accidentally commit this. And so now we have an account that we can deploy, and it is this address, right? So I'm going to send some optimism to this address. How much is it going to cost us to deploy Idk? Let's send in a little optimism here. Going to use my punk wallet built with scaffold ETH on optimism. Going to send some optimistic ETH here.
00:13:48.340 - 00:14:08.294, Speaker A: Go ahead and shoot that. I don't know. Like, is $10 enough to deploy? I guess we'll find out. Sending $10. Okay. Now to deploy, I'm going to do a Yarn deploy. Now Yarn deploy is sending it to my local network, right? But if I define a network here, it's going to deploy to that network.
00:14:08.294 - 00:14:22.522, Speaker A: If you're using Hard hat, you have to do network and then optimism. If you're using Foundry, you just do the network. But here it goes. Let's find out what happens. Yarn deploy, optimism. Please work first. Try deploying to a public network.
00:14:22.522 - 00:14:56.998, Speaker A: Spending real money just to see if we'll get front run. Just to find out this is definitely an F around and find out kind of thing. We're seeing what we're doing. Okay, so now I think our smart contract is out on optimism, right? We've basically done the first part of the deployment. We've deployed our smart contract onto a live network. Now the second part of this is switching our Scaffold ETH over to the live network, and you can do that. In the NextJS folder, there is a Scaffold ETH config file.
00:14:56.998 - 00:15:07.466, Speaker A: I'm just going to hit command P here and just type Scaffold ETH. And there we go. We find this nice config file. And right here, here's a chain. We want optimism. Oh, look at that. Look at that.
00:15:07.466 - 00:15:35.478, Speaker A: Nice completion. I can just hit CTRL space, and it's just going to tell me all the different networks I can have because of TypeScript. I like that very much. All right, now I hit save, right? So all I had to do is change one line in this config and I hit save. Now my entire app is running on optimism, every address component in the entire app. Now when I click that takes me to the optimistic ether scan. If I were to switch that to base, then everything would go to the base.
00:15:35.478 - 00:16:22.114, Speaker A: So base chain, or if I switch that to Zora chain, it's going to go all the way to the Zora chain, right? So one single line of this config and you've put your app on this new network. Okay, so now let's go ahead and connect our wallet. Now, we're using MetaMask, right? At first we were using Burner wallets. We didn't have all those prompts coming up. But now that we're on a public network, we can use a real wallet. Okay, so now we need to commit a secret and then reveal it, right? And while I'm waiting on Do, I want to deploy my app to Versaille also? So I'm going to do a yarn Versaille. And normally this is going to complain that I need to check my types.
00:16:22.114 - 00:16:39.340, Speaker A: There's a handful of things that you need to clean up before you deploy. I'm just going to yolo it to Prod. Not the best. Let's see. Yes, I want to set that up. Yes. And let's see.
00:16:39.340 - 00:17:07.042, Speaker A: I guess it's just going to put it there. Okay, cool. So now it's deploying our app. So we deployed our smart contract, we switched it over to Optimism, and now we're deploying our app. So basically we're like 20 minutes in, 15 minutes in, and we can have a live smart contract and a live URL. So people could go here and start committing and revealing and see what happens. I'm just going to use the local host version right now with my MetaMask, and we're going to see what happens.
00:17:07.042 - 00:17:22.614, Speaker A: So I need to commit a secret. So I need to come up with a secret. I'm just going to say SuperHack. That's an obvious secret. Maybe super hack, exclamation point idk. Someone's going to find this for sure. Super hack, exclamation point.
00:17:22.614 - 00:17:43.422, Speaker A: We're going with it. So this is our secret right here. Okay? So now what I want to do is I want to get the hash of that and then I want to commit that. So I'm going to put that on chain with some amount of money. I don't know. How much money do I have? 0.1. I don't know what that is.
00:17:43.422 - 00:18:14.306, Speaker A: Like $18, $20, $20 if you can front run this, right? This is going to cost me real money to do this test, but we're going to see what happens here. I have no idea what's going to happen. The cool thing is we can tinker around with this, right? We tinkered around with the solidity. We came up with the mechanics we want. We put it onto a live network. Now we're going to test the live network mechanics. What happens when I really got to get used to hitting that button? Okay, so obviously me hitting that button, this is a very developer front interface.
00:18:14.306 - 00:18:38.594, Speaker A: Eventually when you build this where your users can get in here and commit something, you're going to kind of take care of a lot of this stuff behind the scenes so they don't have to hit this button every time. But you as the developer, you can tinker, you can debug, even if you're debugging on main net. Here we go. I'm going to commit this. Let's see what happens. Okay. Yeah, let's do it.
00:18:38.594 - 00:19:07.734, Speaker A: So I'm going to pay pennies probably, and I'm going to put in $20 into this smart contract. And that $20 might disappear immediately. Someone may be able to totally front run this. Anybody who's watching right now could go to this smart contract and go reveal this and not even front run me. You already know the secret and you could put it in and win. And also there is a live URL. You could go to this live URL.
00:19:07.734 - 00:19:52.230, Speaker A: So technically, you could go to this live URL. You could connect your wallet and you could do the reveal and win. I guess that's what we're testing is hopefully no one does that in the amount of time. Okay, so now what I want to know is if I do this reveal, am I going to get my money back or is someone else going to get the money and we'll go find out what happens? Because basically I'm going to put a transaction into the mem pool that anybody could basically take my reveal and put it in as them and put a little bit more gas on top of it and they would win the money. Let's see. Is the money still even in the contract? The money is still in the contract. Let's go see it on Etherscan.
00:19:52.230 - 00:20:12.240, Speaker A: There's still money there. No one has made a transaction on it yet. Let's see what happens when I try to reveal my secret. Will I get front run or not? So what is it? Super hack. Got to remember the secret. Super hack. Exclamation point.
00:20:12.240 - 00:20:38.514, Speaker A: Okay, so now I'm going to reveal this, and the money should come out of here and go back to me. But technically, if there was someone watching the mem pool, they could reveal out ahead of me with higher gas. Reveal does not match. Oh, no. What did I do? Let's see. Maybe I let's see. What did I do wrong here? Super hack.
00:20:38.514 - 00:20:51.562, Speaker A: Oh, I had a typo. Okay, shoot. Let's see. Super hack, exclamation point, pound, go. Okay, this time it's happy. Thanks for the catch. I can't believe I typed it wrong.
00:20:51.562 - 00:21:11.460, Speaker A: What a noob. Okay, let's see what happens now. Will I get front run or not? Who knows? Here we go. Let's watch the transaction live on optimism and see what happens. It looks like I did not get front run. It looks like the ETH came back to me. Okay, well, that's cool.
00:21:11.460 - 00:21:33.210, Speaker A: Okay, so now let's do one more challenge. We have like nine minutes left. Let's see, what if I make just like a little front end where you type in a thing. I'm just going to make a button. There we go. I'm just going to make a single button. All you have to do is go to the app and hit the button and you'll be able to claim some funds.
00:21:33.210 - 00:22:03.266, Speaker A: If everything works right, that might be fun. Okay, so I'm going to have a new secret. Okay, so my new secret is going to be, let's see. Hello, World Super Hack. Okay, that's going to be my new secret, and we'll get the hash for it. And I'm going to commit that hash with zero point $120. Let's double it.
00:22:03.266 - 00:22:33.174, Speaker A: Let's make it $40. Okay, so I'm going to commit that and then anybody goodness gracious, I got to quit doing that. Anybody can use the app and go make $40 by submitting hello, World Super Hack as the reveal. And it looks like you won't get front run, which is pretty cool. But let's do this even easier. I'm going to make it so there's just a button, right, that you hit the button and it just reveals it. Okay? So let's go edit our we're going to go to pages.
00:22:33.174 - 00:22:51.266, Speaker A: We're going to go to index. We're going to clean this all out. Okay. And I'm going to make a button with let's see, I got to do a little front end. Yeah, it's a button. Yeah, it's a button. Okay.
00:22:51.266 - 00:23:35.270, Speaker A: And I'm just going to call it Reveal. And what's that going to do? That's going to have an on click, right? And that on click is going to do some kind of action, right? It's going to do some kind of function here that's going to do some kind of reveal. Oh, man, what have I done? There we go. We're going to have some kind of reveal happen inside of this function. But right now we just have a button that says Reveal. Let's do one other thing. Let's display who you are for some reason, like your address, and to do that, we're going to use the Wagmehook Use account.
00:23:35.270 - 00:24:04.328, Speaker A: Okay. And let's just put our address in here. Let's going to just show who we're logged into. For some reason, I'm just making some fun little UI here, giving the chance for someone to go steal that money, I guess if they're watching closely and watching the chain and know how to attack me. Okay, cool. So there's it's showing the address, but that's really ugly, right? When you're working with a front end, you'd like it to look a little nicer. Let me show you the address component in Scaffold ETH.
00:24:04.328 - 00:24:31.572, Speaker A: Okay, so if I bring in this component from Scaffold ETH, and I set the address equal to address and we close that, what do we get? Nice. Look at that. We get this nice address, right? Doesn't that look pretty? You get the ENS or the blocky. You get the name, you get the copy paste. If you click that, it takes you to the block explorer. Let's do one other thing and add a little gap here. Oh, yeah.
00:24:31.572 - 00:24:58.848, Speaker A: Isn't that pretty? Okay, so I'm logged in as me, and I want to do a reveal. Okay, so how is this reveal going to work? I'm going to use a hook, a handy hook from Scaffold ETH called Use Scaffold contract. Write. It's very similar to Wagme's Contract Write, but we take care of some of the wallet and provider stuff for you. So we're going to go to your contract. Let's see. We're looking for function.
00:24:58.848 - 00:25:20.070, Speaker A: Name is going to be what's the function? We want to call we can use TypeScript. We want to do reveal. Okay. And then the ARGs will be some bytes 32 string. Right? Let's see. What is the actual reveal? The Git hash was like, hello world super hack. Oh, man, I hope I got that right.
00:25:20.070 - 00:25:38.216, Speaker A: Yeah. So that's the thing, right? We're going to reveal that. I have no idea if this is going to work again. We're just like prototyping. We're tinkering around. We're trying things out. So now I have this write Async function, and we're going to call that Do Reveal.
00:25:38.216 - 00:25:58.130, Speaker A: Okay. And then in here, we're just going to call Do Reveal. I have no idea if this will work, but it looks pretty good. Let's see if this works. So we should have, like, our front end. We should have a button. What happens when I hit the reveal button? Okay, it's working.
00:25:58.130 - 00:26:10.076, Speaker A: Let's see. I have 02196. Let's see what happens. Do I get some money back? Yeah. Two, one, three. Okay, so it's working. Okay, let's commit.
00:26:10.076 - 00:26:29.116, Speaker A: Let's do one more commit. One more secret. How about rory and Kevin are cool. Okay, so don't forget this. We need to remember this. Oh, man. Wait, is this going to work? It might not be a bytes 32.
00:26:29.116 - 00:26:40.748, Speaker A: That might have been too long. How about we just do Rory and kevin. And then we hash that. There we go. So here's our secret. I'm going to paste it right into Chat. There's our secret.
00:26:40.748 - 00:26:59.348, Speaker A: Okay? And we need to put that here, right? Okay. And then I want to get the commit for that. I want to put the commit on chain, and I'm going to put in men more and more money every time. And this is not a good idea. Someone's going to steal my money eventually. All right, we're committing $50. $50.
00:26:59.348 - 00:27:13.980, Speaker A: Go get it. Go get it. I'm committing it to optimism. Go get it. All you have to do is put in this secret in the reveal function. But I'm going to make it even easier for you. I'm going to take this secret and I'm going to put it behind this button.
00:27:13.980 - 00:27:38.944, Speaker A: And all you have to do is go to the URL. Let's go ahead and yarn Versaille. Yolo Prod. Basically, you just go to the URL, you connect your wallet, and you hit the button, and you'll be able to get $50. Okay, it's going to happen momentarily. We've got three minutes before time is up. I just want to reiterate, today is the last day you can sign up for super hack.
00:27:38.944 - 00:28:03.284, Speaker A: Go apply to attend. If you haven't heard of the Build Guild, we are a curated group of developers. We are building teaching material. We're building tools. We're all about onboarding and education within Ethereum. But we're also giving out scholarships. We're giving small grants to up and coming high impact developers.
00:28:03.284 - 00:28:34.864, Speaker A: So check out the build guild. Check out all the things we're up to today. We've been building with Scaffold e Two. Scaffold e Two is a tool for not just prototyping, but putting production apps out onto main net like you've seen today. And you can do it quickly, right? It's all about trying and testing your assumptions. Obviously, there's some holes in what I'm building here, but we wanted to test one mechanic, and we were able to do that with a commit reveal on mainnet testing front running. We're also deploying a live app to a live network.
00:28:34.864 - 00:28:55.672, Speaker A: So hopefully this shows you that you can prototype your app quickly and get it out to one of these fast L two S quickly and get it into the hands of your users and really try to make something happen. All right, here we go. This app has got to go. Ship it. Let's go. We got two minutes left. Spending all this time waiting on Versaille.
00:28:55.672 - 00:29:15.588, Speaker A: Okay, let's see. There's still 0.3 in the contract, is that right? Yeah, there's still $55 in the contract. No one has stolen it yet. The app is building. We got 1 minute left. Shoot your questions in the chat if you have any.
00:29:15.588 - 00:29:31.000, Speaker A: This is live on YouTube. I'll paste the link into Chat if you want to rewatch it. Please ship. Please ship. Remember we used MPX? What was the command we used at the beginning? MPX. Create ETH. Shield that one more time.
00:29:31.000 - 00:29:53.852, Speaker A: Also, Shill, it is not totally stable yet. We are just getting started. We're just getting this thing working. Give us feedback, put in issues, all of that. Okay, our production app is up and I'm going to paste it into the chat now. Someone should be able to go to NextJS ETA 341 Iidk. What a wild URL.
00:29:53.852 - 00:30:21.096, Speaker A: And they should be able to connect their wallet. And if their wallet is on the wrong network, if their wallet is on Rinkabee oh, no. It's not even going to let me do that. Okay. If their wallet is on XDI and they connect, it's going to say wrong and it's going to have you switch to optimism. And then there's a reveal button right here. You click that and you pay and you're going to win $50.
00:30:21.096 - 00:30:34.190, Speaker A: Okay. So the first person to get on this app and click reveal is going to win $50 on optimism. Hearts. Hearts. Hearts. Thanks for being here for the build. Go use Scaffold ETH to build something cool.
00:30:34.190 - 00:30:52.292, Speaker A: Hit reveal. But someone hit reveal. Did you have funds? Let's see. I'm still watching for this contract to have value in it. Hopefully someone steals it. If not, I guess I'll have to do it later. But I'm leaving it up to you guys to go get that money out of there.
00:30:52.292 - 00:31:11.370, Speaker A: It's not that hard. You just have to hit a button. If this button wasn't going to work, it would fail here. So I know it's going to work because it's letting me send it in. It would fail ahead of time. All right, any last questions? Oh, the reveal doesn't match the commit. Let me see.
00:31:11.370 - 00:31:32.610, Speaker A: I'm pretty sure it is going to work. Dang it. I'm going to be the one that gets the $50. I hear people getting the wrong. Here's my transaction. Yeah. You guys are doing it wrong.
00:31:32.610 - 00:31:46.724, Speaker A: I did it and it worked. Sorry. I guess I'm the winner. Dang it. Okay, well, next time you can be the winner. It looked like people in Chat were having problems, so I clicked the button, but I shouldn't have. I should have left it up.
00:31:46.724 - 00:31:53.840, Speaker A: I shouldn't have listened to you gibronis. It was working the whole time. Hearts. Hearts. Hearts. Go build a scaffold ETH. Go build for the super hack.
00:31:53.840 - 00:32:06.712, Speaker A: Go build on top of these awesome L two S. They're fast and cheap and getting us closer and closer to mainstream applications. Go join the build guild. Go. Speedrun. Ethereum. If you haven't yet, Speedrun Ethereum.com
00:32:06.712 - 00:32:13.224, Speaker A: is the best place to get started building. Okay, I'm done. Shilling. Thank you, Rory. Thank you. Cheers.
00:32:13.272 - 00:32:15.148, Speaker B: No problem. Yeah. There was one question.
00:32:15.314 - 00:32:15.788, Speaker A: Okay.
00:32:15.874 - 00:32:19.980, Speaker B: Do you think Copilot is a good tool for solidity, smart contract development?
00:32:20.480 - 00:32:47.284, Speaker A: I use Copilot every day, so you have to be careful with it now and then because it'll fill in some weird stuff. But I use it all the time. And I would recommend others, too, to also use it. But you just have to be careful. You just have to keep an eye on just there. It filled in, like, method name instead of function name. And that could have totally screwed me up if I wasn't paying attention.
00:32:47.284 - 00:33:04.508, Speaker A: So the AI can give you some weird things now and then, but overall, man, it helps me build faster, like react stuff, solidity stuff, both sides. I'm using Copilot all the time, for sure. Awesome.
00:33:04.594 - 00:33:10.130, Speaker B: Cool. Those are the only questions I saw. Does anybody else have any questions before we wrap up?
00:33:12.100 - 00:33:23.920, Speaker A: MPX create app create ETH MPX create ETH. Scaffold e two speedrun ethereum build guild super hack. Awesome.
00:33:23.990 - 00:33:37.540, Speaker B: I think that's the questions we have. So cheers. Awesome. Thank you for this great workshop, and thank you all for attending. There'll be a few more workshops later today. And yeah, don't forget, opening ceremonies tomorrow. Happy hacking.
00:33:37.880 - 00:33:53.960, Speaker A: Happy hacking, y'all. Hearts. Hearts. Getting this thing working. Give us feedback, put in issues, all of that. Okay, our production app is up, and I'm going to paste it into the chat now. Someone should be able to go to NextJS.
00:33:53.960 - 00:34:25.908, Speaker A: ETA 341 Iidk. What? A wild URL? And they should be able to connect their wallet. And if their wallet is on the wrong network, if their wallet is on Rinkabee oh, no, it's not even going to let me do that. Okay. If their wallet is on XDI and they connect, it's going to say wrong, and it's going to have you switch to optimism. And then there's a reveal button right here. You click that and you pay and you're going to win $50.
00:34:25.908 - 00:34:40.536, Speaker A: Okay, so the first person to get on this app and click Reveal is going to win $50 on optimism. Hearts. Hearts. Hearts. Thanks for being here for the build. Go use Scaffold ETH to build something cool. Hit Reveal.
00:34:40.536 - 00:34:58.368, Speaker A: But someone hit reveal. Did you have funds? Let's see. I'm still watching for this contract to have value in it. Hopefully someone steals it. If not, I guess I'll have to do it later. But I'm leaving it up to you guys to go get that money out of there. It's not that hard.
00:34:58.368 - 00:35:23.926, Speaker A: You just have to hit a button. If this button wasn't going to work, it would fail here. So I know it's going to work because it's letting me send it in. It would fail ahead of time. All right, any last questions? Although Reveal doesn't match the commit let me see. I'm pretty sure it is going to work. Dang it.
00:35:23.926 - 00:35:42.180, Speaker A: I'm going to be the one that gets the $50. I hear people getting the wrong. Here's my transaction. Yeah, you guys are doing it wrong. I did it and it worked. Sorry. I guess I'm the winner.
00:35:42.180 - 00:35:55.768, Speaker A: Dang it. Okay, well, next time you can be the winner. It looked like people in chat were having problems, so I clicked the button, but I shouldn't have I should have left it up. I shouldn't have listened to you Jabronis. It was working the whole time. Hearts. Hearts.
00:35:55.768 - 00:36:11.584, Speaker A: Hearts. Go build with scaffolding. Go build for the super hack. Go build on top of these awesome L two S. They're fast and cheap and getting us closer and closer to mainstream applications. Go join the build guild. Go speed run Ethereum if you haven't yet, speedrun Ethereum.com
00:36:11.584 - 00:36:16.870, Speaker A: is the best place to get started building. Okay, I'm done. Shilling. Thank you. Rory, thank you.
00:36:17.640 - 00:36:19.988, Speaker B: Cheers. No problem. Yeah, there was one question.
00:36:20.154 - 00:36:20.628, Speaker A: Okay.
00:36:20.714 - 00:36:24.840, Speaker B: Do you think Copilot is a good tool for solidity, smart contract development?
00:36:25.340 - 00:36:59.000, Speaker A: I use Copilot every day, so you have to be careful with it now and then because it'll fill in some weird stuff. But I use it all the time, and I would recommend others too, to also use it. But you just have to be careful. You just have to keep an eye on just there. It filled in like method name instead of function name. And that could have totally screwed me up if I wasn't paying attention. So the AI can give you some weird things now and then, but overall, man, it helps me build faster.
00:36:59.000 - 00:37:07.110, Speaker A: Like react stuff, solidity stuff, both sides. I'm using Copilot all the time, for sure.
00:37:08.840 - 00:37:14.970, Speaker B: Awesome. Cool. Those are the only questions I saw. Does anybody else have any questions before we wrap up?
00:37:16.940 - 00:37:28.760, Speaker A: MPX create app create ETH. MPX create ETH. Scaffold e two speedrun ethereum. Build Guild super hack. Awesome.
00:37:28.830 - 00:37:42.400, Speaker B: I think that's the questions we have, so cheers. Awesome. Thank you for this great workshop, and thank you all for attending. There'll be a few more workshops later today. And yeah, don't forget opening ceremonies tomorrow. Happy hacking.
00:37:42.740 - 00:37:44.780, Speaker A: Happy hacking, y'all. Bye.
