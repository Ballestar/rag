00:00:07.770 - 00:00:49.530, Speaker A: The presentation that I need. Like usually it's half an hour or 20 minutes, but I have prepared a special one for you that is the less technical thing like how to actually query data and how to find the data and how to work with this. Depending on time, we can also go into the subgraph development. But yeah, I think it's cool to have this also that was never recorded. The subgraph development stuff is recorded from time to time. Anyways, let's get it started. So querying and indexing smart contract data on Ethereum with the graph.
00:00:49.530 - 00:01:45.630, Speaker A: I start here really with the basics. That is what is actually then a smart contract anyways. And I have an interesting example you can think about of a smart contract that it has two things. Basically it has storage like data and you can think about the storage in smart contract as a simple Google Sheets or Excel sheet where you have just rows and columns with data in it. When we look at the NFT contract, it's my main example because it's such simple in terms of technology. You would have like in a very simple way, you have an ID, the Token ID of the NFT. And then you have an owner which is an Ethereum address.
00:01:45.630 - 00:02:51.394, Speaker A: And then you might or might not have a metadata Uri and other stuff. But in a nutshell, the NFT, the Esxn 21 contract defines Token ID and an owner. So that's the data view on it, right? The problem is with the data is that the smart contract and the blockchain, it usually holds the state. As of now, it is a good tool to see who has which NFT, who owns which NFT. But it is not very good in knowing who owns the NFT before. And that's exactly what's going on here. That's a problem that we don't see who owned it before in the smart contract state by itself, this is where the graph jumps in that it actually helps to also find a way into the history of a smart contract and on top of that making the current state actually also easier to access.
00:02:51.394 - 00:03:48.950, Speaker A: So you can think about without the graph it is just this and with the graph we have a history, but we'll go a little bit deeper. The second thing that a smart contract does besides holding state or data is it also has rules how to change that data. And that's very important because you don't want everybody just changing who owns which NFT. It follows certain rules which can be encoded in the smart contract. And that's also why it's called smart contract because the data can only be changed according to the rules. So let's define quickly the concept of a blockchain. Again, so basically a blockchain is a distributed data storage secured by cryptography.
00:03:48.950 - 00:04:37.862, Speaker A: That means that all the transactions, they are in blocks and then the hash is coded all over those transactions. That makes a block and then the block is always linked to its previous block. That makes the whole thing temper proof. So you can never change one thing. Distributed means that the blockchain runs not on one server. It is basically copied over thousand or 10,000 times all across the world. That makes it so censorship resistant that you would basically need to shut down every single node that runs the Ethereum blockchain on it or whatever blockchain in order to stop it.
00:04:37.862 - 00:05:41.126, Speaker A: And that's basically impossible because we have not global jurisdiction where you couldn't force such a thing. That makes it very interesting. But going forward we think of the blockchain as one thing we do not care about, that it is distributed across all these machines. So we think of it as a logical one unit. So that's just the blockchain. And then smart contract as I said before, is the data and the logic how to change the data that is stored on blockchain and how does it work. If you want to change the data, you send a transaction to the blockchain which is then distributed across all these copies, but you sign it cryptographically with your secret key or your wallet so that everybody knows that this is a legit transaction and then the transaction is included on the blockchain.
00:05:41.126 - 00:06:46.282, Speaker A: We will look at that later on. But there is a problem with the data on the blockchain, as I said before, but the user interfaces as we initially saw, they want to read, they want to write to the blockchain. And as we saw before, it is incentivized. So if you send a transaction to the blockchain you pay some gas or you have to put some gas on top of it and the gas is consumed by the miners or now it's the proof stake by the validators and then that's why you pay and by paying for it the whole thing works. But when you want to read from the blockchain there's no incentivization for anybody to provide you that data per se, not in the protocol. So that's why when you go on Ether scan you see a lot of advertisements which sometimes are also a little bit shady in order so that Etherscan can fund its own business. Or the same is also with Alchemy.
00:06:46.282 - 00:07:41.680, Speaker A: If you do a lot of requests to Alchemy or Infura, you need to pay for them. So they're jumping into it. But the protocol by itself incentivize a reading. That's a big problem. Going back to the analogy from before, each of these things here is one transaction. And also a bigger problem with the serum blockchain especially is that we have all these smart contractor DApps that have stuff on the blockchain and every time someone sends a transaction it just laid on top of each other. So in the end, if you want to see, okay, what was actually going on, let's say in foundation, then you would need to go through all these transactions and pick the ones out that are according to foundation and that's quite tedious work and it takes a lot of time.
00:07:41.680 - 00:09:09.830, Speaker A: That's not something that you want to have in the front end. And this is also what we see currently or before the graph that front ends do. This is really code from a project that I was advising how they were trying to get the data out. So for those that understand JavaScript or TypeScript that reads as follows you try to get a contract but all these await methods especially those that we see here and these here they all take 200 to 300 milliseconds to resolve because you always call back to some node, which you usually need to pay somehow, that they give you that data and then you wait, then you go through. So this code, if you own, let's say, ten or 20 NFTs, easily gets five to ten or 20 seconds to load just to show you a list of the tokens that you hold. And this is super inefficient and users just move away after a while because they say like, whatever, I don't have time to wait 20 seconds for my stuff to resolve. Yes, and that's actually now we had already two reasons why the graph exists.
00:09:09.830 - 00:10:36.710, Speaker A: So for one, to get the historical data, but for two, also to have a very good access to the data on the website. You probably know it's indexing protocols for green networks like umipfs, there's also support for RBE, Nier, Cosmos and others. So in the end, the graph will index all blockchains more to come soon TM on those services currently one point or 1 billion queries per day or even a little bit more depends. So it is really powering a lot of the debts that we see currently. Uniswap is the most famous example that uses this but we have also kind of others like Enzyme or Odios or yeah, there are a bunch of yeah, and it's not only the hosted service, it's also decentralized indexing network protocol. So there are more than 180 indexes, I think currently worldwide, owned by individuals whoops and that means these are independent indexes that run this thing. So it is similar to what we talked about before, but Ethereum or a blockchain general is that we have a distributed network.
00:10:36.710 - 00:11:09.860, Speaker A: There is this redundancy. So if a subgroup is indexed by one indexer across the world, if one goes down, another is still around. It also gives you fast and cheap reliable access to that data. And yeah, the whole mission is that we go towards a global open API of the data that we need. Yeah, that's very cool. Then in the end we can now build truly decentralized apps. That's what we try to do here.
00:11:09.860 - 00:11:58.258, Speaker A: So quick into the subgraphs. So I've told you before about subgraphs. subgraphs in general are just a database. A database is the same as you saw before in these Google slides, just multiple of them. So a database consists of multiple tables and you can define the tables as you wish. Then you have the mappings which is this gear here, that's a logic of how to get data out of the blockchain into that database and in the end you make it available. And the subgraph by itself, subgraph by itself is only the code that defines how this is done, but it doesn't do it necessarily by itself.
00:11:58.258 - 00:12:57.880, Speaker A: The indexes then need to index the subgraph which by indexing that means they create the database and they run the code how to fill that database. So yeah, that's the quick concept of a subgraph. So what happens is that we saw this mess of transactions that are just layered on top of each other that they are created like very nice and neat buckets for each of the protocol in a database, per each protocol. So we can easily query that data and make much more sense about what's going on. In the end we end up with to go back to the screenshot from before that we have a very nice and neat GraphQL query. So we send one query that has a round trip of 100 to 300 milliseconds. Usually it's much quicker, that's what we expect to get that data out.
00:12:57.880 - 00:13:56.038, Speaker A: All right, I was just reading the chat, so I will also share with you that presentation afterwards. All my presentations are open, you can use them even if you want to give the presentation to someone. Maybe you want to remove the edge and node logo then. But yeah, it's public goods. So we end up with this modern DAP architecture where we have the user interface on top and then the blockchain on the bottom that we knew already. In between is this indexing protocol that is incentivized and built for data reading and that sits in between and reads data from the blockchain and stores it in this indexing layer. All right, so how does it look like then? How can you think about it? This is the illustration, that's the official one, how the graph node works.
00:13:56.038 - 00:14:54.998, Speaker A: So again, on top is the depth adapt can be like in its purest sense adapt. It's just HTML, CSS and JavaScript that defines the DAP. It could be also other programming language, but that's what we currently see. And as we talked before, when they send transactions to the smart contract you can change state. So that is buying an NFT on an NFT marketplace or swapping something on Uniswap or Openlp position, whatever cool thing you can do in the transactions, transactions, they emit events and with events smart contract basically tells the outside world what happened. We can look into this later what an event is, but that's basically what Smart contracts emit. So you can watch the blockchain or watch smart contracts for those events.
00:14:54.998 - 00:16:29.210, Speaker A: These events are then ingested into the graph node which will then according to those events run mapping which is in WebAssembly module and put then the stuff into the store. So here is the database where the data is stored for later retrieval. Then the other way that we had also in this image from above is that the depth also needs queries. So if you go to uniswap at the analytics page it needs to load data somewhere. So it sends queries to the GraphQL API which sits on top of the graph node and that GraphQL API will get data from the store and then send it back to the it's very neat, right? Also a very funny GIF that we used to displace this one like how subcrops work. We have this massive transactions again and then magically somehow they are sorted into this pocket so that they know what's going on, have an overview. All right, so now when you think okay, that's very cool but now how can I actually find data tool query? The best thing in my opinion is these subgraphs that XYZ from Missouri, they are writing very sophisticated subgraphs.
00:16:29.210 - 00:17:33.722, Speaker A: Okay, I also send you this thing here in the chat that's currently for me the best entry point. I mean you can also go to the Graph.com and go here to the Graph Explorer and then you see also subgraphs here. But the one from these are the ones that write for themselves or also some of you see they are also in the tops here. But subgraphs here are very good. So we can for example say cool, let's have a look at so they have some on the decentralized network and some on the hosted service. So you can look through them and find out they have like hundreds of subgroups.
00:17:33.722 - 00:18:37.126, Speaker A: What is it? Okay, 27 production, 47, 74, 47 under development and 106 deployment cost. Why is that? Because they deploy to different chains curve. They are usually the same on all cool. So when you want to look into one of those, another good example actually is let's switch to this one is the crypto punk subgraph here. You need to be careful to take the one with the highest correlation because somehow all the people just deployed subgroups. That's downside of a decentralized network. Now if you want to query that subgraph then you can just go here and go into the playground and start to play around with that subgraph.
00:18:37.126 - 00:19:36.900, Speaker A: But what I like to do and that's where I think it makes sense to see this workshop is to actually open up a little bit more sophisticated playground. Although a revamp of this one is in the works. But I can show you how this work works. So what we do if you want to query a subgraph on decentralized network, what you need is kind of this query URL. You can copy this query go here, then you can go to explore like this and paste it. Now, the problem with subgraphs on the decentralized network is that you need to have an API key and that's inside of that URL is this placeholder for the API key. Well, we first need to find one, so let's do this together.
00:19:36.900 - 00:20:42.620, Speaker A: What you do is you go to the subcraft studio, actually connect the wallet and I will just create a new account connect and then sign in. I use TSI to deploy some test subcraft. But what's important for you is that you go to API keys and not to subcraft and then create a new API key. Click here, say like demo. And then I can receive free queries, that is by giving an email. I think these are optional fields so I can claim the queries. Nice.
00:20:42.620 - 00:21:16.642, Speaker A: And now I have 2000 free queries on this API key. That's very good. And I already have the API key here, so I can just copy here, go back, go here and paste it. Feel free to just abuse that one. Everybody can have thousands free query. Cool. Now what we have here is on the top we have the subgraph and on the bottom we have the explorer and the documentation.
00:21:16.642 - 00:22:01.634, Speaker A: So the cool thing about GraphQL is because it is very strongly typed query language that we see, we can have this explorer on the right we can also have the docs. A GraphQL query has so called root types. And here we have the root type query and root type subscription. Although subscriptions do not work currently. So we go with query. If you go on query then you see a detailed documentation about what you can query. So in this example, when you look at the crypto punk subgraph, it has accounts which are holders of punks.
00:22:01.634 - 00:22:55.298, Speaker A: Then we have the actual punks and we have metadata of the punk. And all of these you see there is this repeating pattern of account and then account with S. So the first one is to get just one and then you need to provide an ID or you can have many and then you can have a filter. We will look into this and then the result is an account or just one account, or a list of accounts. Same with punks and receipt account punks, metadata trades, asks bits and contracts and so on and so forth. There's lots going on. So now what do we want to do? A funny thing to do with the crypto pumps actually is to say I want to know which was actually the most expensive sale ever happened on a punk.
00:22:55.298 - 00:23:49.500, Speaker A: And you could go to crypto punks normal apps here. Okay, cool. I think you can try ballot sale. So cool. They say the largest sale ever happened is this 15822 for 8000 e. Always funny for me to see like that people actually pay that much money for a pixel. But yeah, that's how it is.
00:23:49.500 - 00:25:13.480, Speaker A: Now we could try to reproduce this one and that would be cool. We go here to the sales and I like this explorer we will have soon something like this also on the graph.com it always looks the same. We can say okay, what we want to do we can actually order by the amount of the same and the order direction we make it descending so that says it will sort the list of results by amount and the highest amount to be on the top. Then we can say okay, in which hash it happened we can say which ID it is and we want to see also the amount actually want to see the transaction hash. And then we maybe want to have the from and the to let's see and see this is for me a very explorative that's why it's also called Explorer. I can just click around here and read stuff and trying to figure out what data is here and then I can stand it.
00:25:13.480 - 00:26:47.474, Speaker A: Cool. Now we see so the highest according to that chakra is actually this one and funny enough, when we go back here we see this is eight k but that's the second one. Maybe I should also get the pulk out here. Let's send this again can remove this one a little bit better view so 5822 yes, that's what we saw here for eight k. But a funny thing is that actually the highest sale ever is this one kicked with so good and let's try again. Cool. And why is that? What happened here? So when we go to east to Way by the way, usually it's underway so what happened here? This is interesting we start eight k is the highest sale that's what they say here.
00:26:47.474 - 00:28:41.094, Speaker A: But actually we also see when we look on the blockchain that it is one hundred and twenty four k e for one punk. And now you wonder like why is it displayed here? We can start to do investigations and that's what I think is the graph perfect for and say there is this transaction hash go to either scan I have a new compute so autocomplete not there yet and can actually start to look into this thing. And what you see here is that someone made a flash loan. I think here we see someone got what is this? 500 million die in a flash loan out I think from compound change in abrupt ETH. That's why we end up with this weird number and then buys punk and then gives it all back and sells punk. Gary, this person tried to fake this transaction and interestingly, on the official side they censor this but they talk about it in an interesting way. So we can try to see the punk with the number and go here and see this say I gay this blah blah blah they are flash loan and they send it on their website.
00:28:41.094 - 00:28:47.010, Speaker A: Cool. Yeah, I think this explains how to query the graph.
