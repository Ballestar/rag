00:00:06.970 - 00:00:38.790, Speaker A: Privy is the easiest way for developers to integrate user data into their apps without having to take it into their stack or silo it away. Privy enables you to build delightful products while keeping your users safe and in control of their data. Using Privy, you can secure your user's data off chain. This could be names, emails, or even sensitive documents. All of this is powered by two simple calls privy Get and Privy Put. Let's see how easy getting started with Privy is. Imagine we're building equifox, an NFT marketplace.
00:00:38.790 - 00:01:15.934, Speaker A: This is our admin dashboard. Here we can see all of our sellers indexed by their wallet address. We're associating some amount of private data to each address. We're taking on usernames BIOS, websites, the sorts of things we'd want to display on a seller's page, along with an email and a phone number, maybe so we can reach out whenever there's relevant activity on chain. We have a birthday here to get them a special NFT on that day. And maybe we also want to take on a bank account, which you can see right here, along with an SSN, so we can enable them to get paid out not just in crypto, but also in Fiat. Now, we know better than to put this data on chain.
00:01:15.934 - 00:01:44.534, Speaker A: This is obviously private, real world data. What we've done instead is take on this data and siloed postgres on our servers. Yikes. Thankfully, there's a better way we can use Privy to take on SSNs here without having to put our user data at risk, compromise their data sovereignty, or write a single line of backend code. I'll show you how. Let's do this in a couple simple steps. To start, let me log into my Privy console.
00:01:44.534 - 00:02:16.150, Speaker A: The console is a gui on top of the API, where I can manage my data schemas what data I want to take on, as well as my data permissions, who can access what data. I'm going to go to my settings right now to get my API keys for use of the Privy browser client. The Privy browser client is an open source node package I can use to interact with the API from the user's browser directly. Hold on while I copy my API key and secret into my app. All right, we're ready to code. We'll come back to the console later. The page here on the right is a simple react app.
00:02:16.150 - 00:02:38.186, Speaker A: It runs the Echofox admin dashboard. You can see on the left. To start, I'll just add an SSN field here. You can see it appear on the admin dashboard. We're ready to integrate Privy into our app. The first line of code I'll copy imports the Privy browser client. The Privy client is going to fetch the appropriate user encryption keys to encrypt user data in the browser directly.
00:02:38.186 - 00:03:07.590, Speaker A: The data is encrypted, and then the ciphertext is sent up to the data store. No private data ever leaves the browser unencrypted. Next, I'm going to copy the privy. Put call. This makes it so when I click the Save button down here, data gets saved to the data store. Here it is. Now, what do we have here? This call says to associate a field called SSN to this user ID, in this case, the user wallet, and to pull in the appropriate value from the Admin dashboard.
00:03:07.590 - 00:03:34.270, Speaker A: The last thing I want to do is update my schema in the Privy data store to tell it I'm going to take on a new piece of data, in this case, an SSN. So now we can come back to our console. Here we can see a list of all the fields my app can take on. I'll just go ahead and create a new field, the SSN, and I'll add the description here. It's the user social. Now, I can give it a permission access group. Here, I'll pick the admin group.
00:03:34.270 - 00:04:17.838, Speaker A: Admin self access groups determine who has read and write access to a given piece of data. In this case, data in the Admin Self Access group can be read and written both by Self, the user whose data this is, and by Admin, the developer, me. In this case, we have no data in the user data store yet, as you can see. But from here, we can go back to our app, enter an SSN, click Save, and going back to the preview console, we now see our user's SSN in question. Now, if I reload my app here, you can see the SSN disappears. And that's because we're currently trying to pull data in from our captivedb not Privy. We've sent data up to our private data store.
00:04:17.838 - 00:04:37.720, Speaker A: We now need to pull it down. This is where Privy Get will come in handy. Coming back to my react app, I can just add the call. We ask for this user's SSN and set it in our UI here. And here we go. You can see the SSN appear back in the Admin Dashboard. Awesome.
00:04:37.720 - 00:05:23.790, Speaker A: So, with three simple lines of code importing the client Privy Put to encrypt and store data, privy Get to retrieve and decrypt it. I've taken on user data into my Web Three app without writing one line of backend code or adding any data to my DB. No data itself ever leaves the client unencrypted. Privy can never see any of it. Now, in the Privy console, we can see the data Admin has access to. But why would we want to see a user's SSN? Maybe we intend to give DocuSign or third party crypto off ramp access to it with the user's consent, but we certainly don't want to look at it. So here I can just go back to the console and change the default access group for SSNs to Self, for instance.
00:05:23.790 - 00:05:45.914, Speaker A: And voila. The SSN is now only available to the user themselves and no longer available to the developer. That's how easy it is to change permissions in Privy. So here you have it. A relatively simple example of how we can use Privy to take on sensitive data. But Privy can do so much more. Privy is really the easiest way for you to take on user data for your app.
00:05:45.914 - 00:06:15.700, Speaker A: It's simple, fast, and private. You can use Privy as a secure data store, so you can associate user preferences to their wallets and have them persist across browsers and devices. You can associate user emails to their wallets to send them emails without ever looking at personal Identifiers. You can create richer user profiles, privately link user wallets together across chains, and so much more using Privy. Thanks for watching. Get your API keys at privy. IO so you can build better products with safer data.
