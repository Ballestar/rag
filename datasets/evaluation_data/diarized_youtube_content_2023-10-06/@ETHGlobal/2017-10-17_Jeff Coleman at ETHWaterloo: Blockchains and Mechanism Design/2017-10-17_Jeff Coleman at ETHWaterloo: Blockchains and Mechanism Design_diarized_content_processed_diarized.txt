00:00:00.490 - 00:00:41.844, Speaker A: Thanks Natalk. I was instructed as I walked up to let you know that we're using the hashtag ETHWaterloo ETHWaterloo for questions that you might have that arise in response to these talks. At the end we will be taking some questions and we'll be doing that based on the hashtag. So get to Twitter if you have questions about this. Yeah, so I figured that since this is the big words night, I would talk about mechanism design tonight. How many of you know what I'm talking about when I talk about mechanism design? Raise your hand. All right, that's pretty good.
00:00:41.844 - 00:01:16.990, Speaker A: That means this is an ethereum hackathon. Normally there would be no hands. So the idea of mechanism design is pretty simple. Mechanism design is a field of mathematics or decision theory or economics. Everybody wants to lay claim to it. And the basic idea is it's often called reverse game theory. So in game theory we have some game, we have some kind of system that you're participating in and we have a player who's deciding moves in that game and they want to choose the best moves, they want to choose the moves that lead to the kind of outcomes that they want.
00:01:16.990 - 00:02:11.324, Speaker A: Mechanism design is the same thing, except instead of being the player, you're the person designing the game. And we call these games mechanisms because you don't want to reuse the name game. That would be lame. And the reason I'm going to talk about mechanism design this evening is my end goal here is I want to give you a set of tools for thinking about how do you come up with things to build blockchain applications around. And for me this story is really about mechanism design. The things that make problems blockchainy are particular aspects of the mechanism design. And so I want to kind of get you into the mindset of thinking about things from a mechanism design perspective and then also let you use that lens to identify opportunities for where you can build interesting and useful blockchain applications.
00:02:11.324 - 00:02:46.184, Speaker A: So it's not terribly theoretical. We'll start a little theoretical and then we'll get a little more practical. So in the blockchain context when people talk about mechanism design, it's really one simple mechanism that has at least 90% of the focus and that's basically the financial contract. Most of when you hear people talking about writing things on blockchains like Ethereum, we talk about smart contracts. That term contract is a holdover from people thinking about the mechanism design of a financial contract. And financial contracts are awesome. I don't want to knock them.
00:02:46.184 - 00:03:30.570, Speaker A: I realize that financial contract is a large enough topic that even in the traditional world you can have lawyers who specialize in mutually exclusive types of financial contracts. So good for them. But I think it's kind of boring and kind of limited. And what I want to do in this presentation is talk about something a little bit bigger, about opening up our eyes to more than just the mechanism of a financial contract. We understand this idea of I'm going to pay you on the condition that you do something for me. That's a pretty basic design and there are a lot of applications that can be built around that idea. What I want you to come away from this talk thinking is that there are a lot more different types of situations to which the same mentality can be applied when building an application.
00:03:30.570 - 00:04:21.940, Speaker A: So the real title of my talk is everything is a mechanism. Here's. What I mean by everything is a mechanism. A mechanism is basically a system, a way of doing things that in some way shapes the behavior of the participants towards some goal. And the goal is a little bit, some mechanisms don't really have goals. You can argue there's naturally occurring mechanisms, but in our context, because we're going to be designing the mechanisms and we're thinking about it from a design perspective, a mechanism design perspective, we're going to have a particular goal in mind. And I just want to go through some regular, everyday examples and try to rethink them a little bit from a mechanism perspective and get the ball rolling here with some ideas.
00:04:21.940 - 00:05:02.496, Speaker A: So let's take something like spam filtering. Spam filtering is a mechanism. When you design the system of spam filtering, there's a couple of goals that you want to shape behavior towards. One of the most important things that you want as a designer of the spam filter is usually to shape the behavior of the person who is potentially receiving the spam. This might seem counterintuitive initially. You might think that spam is all about can we get someone to stop sending us junk? Well, most spam filters today don't work by trying to stop people from sending you junk. Mostly the way they work is they try to get you, the user, to click that spam button when it's something that's spam.
00:05:02.496 - 00:06:02.004, Speaker A: And the fact that you take that action trains some algorithm so that it can simply read all of your mail and determine as something comes in whether or not it's spam. So the person whose behavior is being shaped primarily by that type of spam filter is you. And it's comparatively effective. I don't get a lot of spam in my inbox anymore, but it's not the only way to think of designing the mechanism. You could look at that same mechanism and say, what are the end goals? Now, the actual transmission of email is not particularly expensive, so it's not a huge cost that's incurred on the system to send all this information back and forth, unless you're an ISP who has to deal with spam bots and botnets and all those kinds of fun things. Or if your server gets compromised, or if okay, look, there are a lot of things. So another way that we could look at a mechanism like spam filtering is what if we instead wanted this mechanism to shape the behavior of the person doing the spamming and that means we would have to come up with a completely different technique.
00:06:02.004 - 00:06:30.844, Speaker A: I'm not even going to suggest what that technique is. We're just using this as an example. Employment. Employment is a mechanism. Again, this might seem like kind of a simple financial contract type situation but employment actually leverages a lot of other things. A lot of the things that people get out of the employment experience are actually things that shape their behavior more strongly than just the financial interaction. A lot of people get stability out of employment.
00:06:30.844 - 00:07:21.700, Speaker A: They get predictability out of employment. They get a sense of identity, a sense of camaraderie, a sense of achievement. There are all kinds of aspects in which employment as a mechanism affects behavior. Now we're stepping into this new trend where employment is maybe not the only exclusive way that we think about incentivizing or shaping behaviors towards the goal of producing productive results and also having people satisfied with their meaningful accomplishments in life, among many other goals. So again, I think this is a mechanism that if we wanted to we could stop and say maybe there's some different ways we want to shape the behavior here. We can redesign this a little bit. Drug Addiction I mentioned that some mechanisms can be naturally occurring and sometimes the goals that a mechanism shapes you towards are not desirable.
00:07:21.700 - 00:08:16.260, Speaker A: The chemicals in our brain that normally reward us for good things or that identify positive things in our environment can also be directly exploited with chemical triggers and these can prove incredibly effective at shaping human behavior. But again, perhaps not in the direction that we want. So not all mechanisms are positive but again, some of them can potentially be reshaped. Legal Systems this is kind of an obvious one. You might wonder what it's doing in this list. I think most of you probably would have expected to see a legal system as a method of shaping human behavior. But the perspective I want you to take on the idea of legal systems as mechanisms is that a particular legal system or a particular set of laws is usually trying to shape a particular type of outcome.
00:08:16.260 - 00:09:10.260, Speaker A: One of the ways that you can look at the problem of shaping a particular outcome is to ask yourself is there a different way that I could achieve the same result? Most of the ways that legal systems work is by enforcing penalties or fines or rewards and incentives, sometimes tax breaks, all these sorts of things. But of course humans are complex. One of the really interesting areas of research right now is trying to identify some of the more detailed psychological reasons why people do a lot of things that they do. And it's not always as simple as these kind of brute force mechanisms that we're used to in legal systems. So sometimes you can identify something that a legal system is trying to solve and perhaps solve it more directly, that's an opportunity for an application. Uber. Uber is a mechanism.
00:09:10.260 - 00:10:23.580, Speaker A: The reason I wanted to put Uber on this list is Uber is a very slight mechanism tweak to something that started off as just the financial contract. And I think this is a great way to think about how you can get a significant improvement in a problem. The only thing really from a mechanism design perspective that Uber adds to the financial contract of paying someone to take you somewhere is that it adds reputation. Uber adds reputation for both drivers and for riders. And adding reputation into the system actually significantly influences the way that people behave under that system mechanism design, the goal is to shape the behavior of the participants, and adding that additional reputation can have a significant impact on shaping the behavior of the participants. Police enforcement, of course, the natural pair of legal systems, and again, this is something we're familiar with, but it's really interesting to think about this as an algorithm. What are the types of situations in which police enforcement is effective? One of the things we often think about in the blockchain world is what is the cost of a mechanism? And we know that policing as a way of directly responding to behavior is incredibly cost inefficient.
00:10:23.580 - 00:11:23.500, Speaker A: It is not practical to arrest and charge every person who does anything that anybody doesn't like. And so when viewed from the mechanism design perspective, policing is something that really only works where you have a community that essentially has already adopted and decided to adhere to a set of standards so that only the slight deviations at the edge can be harshly and in a very cost, ineffective way, brought down on. And then that hopefully will prevent drift beyond that edge from occurring. Looking at the mechanism from that perspective, we can say, oh, well, policing probably isn't going to be very effective if you criminalize something that already lots of people do, that's not going to be an effective tool, especially if you can't enforce that at scale and a little bit of a fun one here. Pick your favorite dystopian TV show or movie. Tons of TV shows and movies have this theme something terrible has happened. We now have a small cluster of people trying to survive in extenuating circumstances.
00:11:23.500 - 00:11:46.664, Speaker A: Maybe there's limited food. Maybe there's external physical threats. There's monsters in the dark. There's zombies. Radiation has killed almost everything alive. Whatever the scenario is, one of the things I rarely see in any of these TV shows is people sitting down to try and carefully design mechanisms. Sometimes there are some mechanisms that we're familiar with.
00:11:46.664 - 00:12:55.960, Speaker A: So, for example, food rationing. Food rationing is a mechanism that you can use to potentially keep more people alive when food resources are scarce. But now you have a little bit of complicated, bite sized little questions. What is the punishment going to be if violence breaks out? Who's going to enforce the punishment? Do you have an ability to give some smaller punishment short of some ultimate punishment? These are the sorts of things that from the mechanism design perspective will significantly influence the way that people behave under that mechanism. And as application designers and as people coming with cool ideas for a hackathon, this is the way that you have to learn to think about basically everything. So I tried to pick examples here that are common throughout real life and there are better and worse ways of tackling each of these. If one of you sits down to design a police enforcement status and designs something like the three strikes law and then sends it to me for an audit, I will probably tell you that this is interesting because your mechanism eliminates the incentive for anyone to care about avoiding further crimes once they've committed a third trivial crime.
00:12:55.960 - 00:13:18.580, Speaker A: That seems like very bad design. So the perspective of how you think about these different things can be similar in the way that you design an application. It doesn't matter how big the problem is. It doesn't have to be about a financial contract. It can be about something that's large in society. It can be about pretty much anything. And that is my real title here.
00:13:18.580 - 00:14:21.800, Speaker A: Everything is a mechanism. So if everything is a mechanism, that means that almost anything when you look out in the world and ask is this mechanism accomplishing its goal? Is its goal desirable? That's a problem that you can tackle with mechanism design. Now, this is a wonderful talk about mechanism design, but as my colleague mentioned, when I started pitching this talk to him, he said, well, what does this have to do with blockchain? And there is a really important point here. So yes, I'm talking about introducing this lens of mathematics also this lens of software, this lens of programming. But my pitch here is not just that this is part of the whole mathematics in the form of software eats the entire world trend that we're in. The actual thing that I want to raise here is we covered this point. The actual thing that I want to raise that's specific about blockchains is that blockchains can do something that almost all software can't do when you're designing a mechanism.
00:14:21.800 - 00:15:05.156, Speaker A: Consequences. So almost all real world systems, almost all real world mechanisms that humans institute, that we use in society, that we use in other areas to do something to shape people's behavior in a certain way, they have consequences. Consequences are incredibly important. Some examples of consequences are fines, wages, reputational hits, disclosures rights and permissions. People's personal feelings of achievement or regret. These are really, really critical parts of how these things actually shape human behavior. And the problem is that software alone, compared to all of this is mostly just bookkeeping.
00:15:05.156 - 00:15:32.636, Speaker A: If you look at what the Uber software actually does. It doesn't actually do any of the things that we're talking about here. Those things come as a result. But mostly what the software does is it tracks those things when it happens. So you have a system of stars. Stars in and of themselves don't really mean anything. The only thing that stars mean is that when a human being looks at a star, they say, oh, more stars is good, less stars is bad.
00:15:32.636 - 00:16:01.000, Speaker A: I'm not going to take this rider, I'm not going to take this driver. Someone subjectively, a human being in Uber sits there and says, oh well, this driver, their ratings are getting pretty low. I think we're going to fire them. And that's still a human being solving a problem. And a lot of software can get stuck in this bookkeeping type of role. This is where blockchain software can be really different. It can be really different in attacking these type of problem because blockchains are software that can directly enact consequences.
00:16:01.000 - 00:17:39.752, Speaker A: Again, going back to our core example of the financial contract, it's easy to see how a blockchain application can directly enact financial consequences if you have a balance of Ether or some other crypto token that's controlled by an application. And if the action that's taken by the user or by one of the participants can result in a seizing of that balance in a penalty or in a paying out of that balance as a reward, that's a simple financial consequence that you can enforce. But that's not the only type of thing that you can potentially track inside a blockchain that's as rich and as complex as Ethereum. What would reputation look like if reputational changes were made automatically and conditionally by programs and applications themselves? This is something that a lot of people have been talking about for a while, but it's very difficult to implement in any kind of transparent way. How much authority do you give to the different components? This is a mechanism design problem. And the really interesting thing about blockchains is that if that reputation is tracked in some kind of public auditable, verifiable open source system like a blockchain, not only can we predict what's going to happen so that it feels fair to human beings, but also we can do this in a comparatively secure way. We can answer questions like did a bunch of random people just vote this person's rating down unfairly? These turn into mathematical questions.
00:17:39.752 - 00:18:38.308, Speaker A: We can talk about using the anti civil properties that Vitalag discussed to measure how many real people actually gave this person ratings. We can make those ratings conditional on the presence of a pre agreed financial transaction. So in Uber, we can mathematically enforce, not just at the software level, at the core structure of the blockchain itself, that you can't rate someone unless you actually took a ride with them. All these are types of techniques that we can use and they're really unique to blockchain in traditional software, sometimes you can enact consequences. Mostly this happens when your software becomes big enough and socially important enough that things like reputation are an automatic consequence. So for example, if you get a lot of tweets, a lot of retweets and likes on your Twitter thing, twitter itself is a big enough phenomenon that that itself is a consequence. It's a reputational consequence.
00:18:38.308 - 00:19:23.784, Speaker A: Someone who has a lot of followers might have reputation simply by virtue of the fact that they have a lot of Twitter followers. But the really cool thing about blockchains is you don't have to wait to get that kind of scale. You can have a very small application that has very limited scope and still has very firm, direct and complex consequences within that limited scope. That's a very powerful tool. And I personally think that that's one of the ways that you can identify what makes an application opportunity blockchaining. So the types of consequences that we can exact are at present they're somewhat limited. Right now, for a blockchain to enact a consequence, it has to have control over something.
00:19:23.784 - 00:20:14.004, Speaker A: And this is where the work of building out the blockchain ecosystem comes in. And this is where other opportunities present themselves at hackathons. One of the things that you can do to make the entire blockchain ecosystem more amazing is build a connection between a blockchain and some other real world element. So this is where people talk about IoT devices or smart cars or smart locks or all these objects that live in the real world but that pay attention to the blockchain and interact. These are not only cool things, they are not only like oh, I got a smart locker or something like this. What these are is they're expanding the ecosystem of consequences that can be part of the tool of mechanism design. When you have more consequences that you can wrap into your application, you have more opportunities to shape the behavior of your users and your participants.
00:20:14.004 - 00:20:50.836, Speaker A: That means that your mechanism design job is easier and you can accomplish more things and you can solve more problems. You can look out in the real world and identify more situations that need to change and find ways that you can actually effectively change them. There are some challenges that are associated with this process. So I don't want to be all rosy like oh, mechanism design solves everything. So there are some issues here and we talked about some of them in Vitalik's talk. The first one is partial information. So when you're designing a mechanism, one of the challenges you often run up against is that the participants don't really know everything.
00:20:50.836 - 00:21:35.620, Speaker A: The mechanism itself doesn't really know everything, but this is a very wonderful upside. See private information, see Vitalik's entire talk, see the ability for us to have cryptography and private keys. This is a useful feature. We can exploit this scope. One of the things that a lot of mechanisms struggle with is what is the scope of the information or the behavior that you're trying to influence? It's really important, not only in software design in general or at a hackathon, but it's really important to have a very limited scope of what it is that you're really trying to impact in your application. Watch out for that scope creep because it will really make your mechanism design job hard. If you are literally trying to influence all behavior of all people who are participating in your application, good luck.
00:21:35.620 - 00:22:18.252, Speaker A: Here's one to really watch out for. A lot of the blockchain applications that we design are kind of operating at a particular scale and this isn't a unique problem to blockchain applications, but it's something to bear in mind anytime you're doing mechanism design the externalities and the external incentives that result from or that influence our applications. So sometimes you have a mechanism that in and of itself is perfectly fine. Here's a simple financial mechanism based on markets. We have fuel. We can burn it to make things go, but it costs money to go and get the fuel. How are we going to get all the people to work together to do this? Yay, markets.
00:22:18.252 - 00:22:50.284, Speaker A: So somebody will pay somebody money for this fuel. If they pay lots of money, somebody else will go get more fuel. We'll burn the fuel. It's awesome. Except if there are consequences of burning all these fuels and these weren't accounted for in the original mechanism, we might have a bigger problem. Also on the flip side, let's say you do have an external incentive that comes into the picture and it dwarfs the scale of what you're going on. This is always something that can happen in your application and it's really important to think about as part of your design.
00:22:50.284 - 00:23:50.030, Speaker A: So the analogy here is there's not really any financial contract today that can meaningfully survive Earth being destroyed by an asteroid. Elon Musk is working on that. But we'll see if some really large external event causes harm or some really large external event causes incentives. Often politics has the power to do this, to cause people to behave in a way that the local mechanism for a long time had never expected people to behave. And then all of a sudden something like democracy doesn't work the way we expect it does because of the way that people are influenced or the way that people think about a certain topic. People start thinking about the challenge of how to outcompete another opposing force and that becomes more important, a stronger incentive to them than simply locally choosing the forces that reflect their original choice. These are things that can come up.
00:23:50.030 - 00:24:52.740, Speaker A: And of course the real big problem in mechanism design is you're working from a model, you have a certain idea of what it is that you're trying to solve and some things are not in your model or are modeled with very low predictivity like humans. There's an entire field of behavioral economics here which talks about the way that humans behave a little bit unpredictably, a little bit unexpectedly, the way that small, very abstract effects in what's happening cause people to change their behavior. We had this really interesting situation this spring on the Ethereum network during the Status ICO where a significant number of people were submitting transactions to participate in this ICO. And the ICO had a limit on the gas price that was allowed to participate and people were paying more than that limit to get in. So they weren't getting anything out of it. From a local incentive perspective, there's no reason that anyone should do this, but people did it anyways. You have to account for this sometimes in your application design and bad equilibria.
00:24:52.740 - 00:25:53.820, Speaker A: This is a very broad problem. It's often called market failure. It's often referred to as somebody has coined the term Molok problems to refer to these. We know that a lot of times you can get in a situation where if both parties are doing local optimization over some local property, the net global result that they get themselves into is not good for anyone. The classic example here is a game theory game like The Prisoner's Dilemma where the incentives might be such that if each party is just saying option A dominates option B for me, so I'm therefore always going to choose option A, then the net result is that everybody loses out. I don't have time to go into it, but everyone who knows me knows that Braces Paradox is my favorite example of this. The quick, short, once end summary of Braces Paradox is that you can add roads into a transportation network and it can slow down everyone's trip.
00:25:53.820 - 00:26:16.984, Speaker A: This is a very counterintuitive result. So go look it up. Go check it out on Wikipedia if you're interested. So there are some pitfalls here. I call these challenges job security. If you become effective at doing mechanism design, there is going to be an unlimited well of problems for you to tackle. Because of these complexities, these fruit have not all been picked.
00:26:16.984 - 00:27:33.352, Speaker A: There are plenty of opportunities. We have this incredibly new and rapidly growing tool set to provide new types of consequences, to provide new types of even the bookkeeping side, I didn't mean to malign the bookkeeping aspect of software. Bookkeeping is important. There are really interesting types of bookkeeping that you can sometimes do with blockchain applications. But this huge new suite of tools really does open up a massive, massive set of opportunities. And I really do want you to take the sense that if you look out in the world, any system that you see and start thinking about as a mechanism that is shaping the behavior of the participants and ask yourself is the way that human behavior is shaped by this desirable? Does this actually produce something that we want? And if not, is there a better way to do it? The way that you can ask if that is a blockchain mechanism design question is asking is there a type of blockchain consequence that I can enforce with software that will make this mechanism better? So my takeaway thought here is if you want to be successful at this hackathon, it's super simple this weekend, find just one mechanism, just one and make it awesome. And I'll be satisfied you.
00:27:33.352 - 00:27:34.150, Speaker A: Thank you very much.
