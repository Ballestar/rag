00:00:04.730 - 00:00:42.460, Speaker A: Radio. Feel free to start now. Okay, great. Yeah. So I'm Martina Long, I'm leading development on Slate, and I'll be starting off today with a little bit about what Slate is, what we have on the roadmap, and how Slate might be useful to you guys as developers if you need to host files for your hackathon projects, et cetera. Yeah, so let's get started with what is Slate? Slate is the place to discover and save files on the web. Like, you can upload files, see what others have uploaded, and save or download their files as well.
00:00:42.460 - 00:01:21.110, Speaker A: I'll give you a little demo of example usage later, but I'll start off with a team for now. So we have Jim to thank for kicking off a Slate project and bringing this team together. Nowadays he's working on other projects like Estuary, which is the easiest way to make filecoin storage deals. They're currently undertaking the task of getting all NFTs on the FalcoIn network so that you no longer have to worry about the NFTs that you paid for disappearing off chain. Harris here is our product lead. He was previously at Square and Notion. I lead engineering, tara is our second designer and Amin is our front end engineer.
00:01:21.110 - 00:02:13.270, Speaker A: Yeah, and as with all of Filecoin's initiatives, everything we build is completely open source. If you are ever curious about how we build something or you want to get involved, you can check out our code base@github.com filecoinproject, slate. And we always welcome anyone who wants to join in and hack on Slate with us. You can always chime in directly on our GitHub or email us at hello at slate host if you prefer just to talk with us directly. And yeah, you know, partnerships are a big part of what makes Slate possible, and one of the partnerships we owe a lot to is Textile. Like, when you store something on Slate on the back end, slate is using textile buckets to pin, to IPFS and to retrieve.
00:02:13.270 - 00:02:59.320, Speaker A: And it's thanks to textile that we're able to offer 30GB of free storage to every Slate user. Yeah, I guess I'll dive right into the features, know, let me yeah. So these are like some examples of people, the different ways that people use Slate. Like, Nick Gerard is someone we have on the platform. He's a motion designer. He's worked on a lot of animations for the start and end credits, movies and video games like Valorant. But he likes to keep a lot of the NFTs he discovers across the web on Know, just to keep in one place.
00:02:59.320 - 00:04:20.240, Speaker A: And he also has some of the NFTs that he creates. He did like an alphabet series with a number series that he designed himself and presents in Slate. And then from Jim, who started Kick Slate off, he likes to collect Scandinavian design images, inspiration, things like, you know, we don't want to just limit Slate to images. Like, there's plenty of people who share and collect fonts on Slate. This user has a treasure trove of old style pixel fonts he keeps on the platform. And one of the things that we wanted to improve on beyond the Dropbox Google Drive experience is like, file previewing. I think Google Drive, Dropbox, they do an okay job when it comes to basic files like PDFs, images, videos, but when it comes to things like fonts or markdown or code files on the right here, this is what Google Drive presents a markdown file as.
00:04:20.240 - 00:04:54.600, Speaker A: It's not styled at all, it looks very basic. Whereas this is Slate's version. You can actually give you a live example. You can click on links. Things are formatted. If there's bullet points, there would be bullet points, and there's italics, things like that. And also, one of the things having two designers on the team that we personally experienced as an issue was if you upload a font file to Google Drive or Dropbox, this is what it looks like.
00:04:54.600 - 00:05:57.710, Speaker A: You can't play around with how it might look with different font sizes, line heights. You'd have to actually download it first and then open it in your font book even to be able to view it properly. So one thing that Amin built, which we think was incredible, was this font previewer. So if you want to view it just the glyphs, you could do that. You could view the sentence paragraph format, adjust the alignment, size, line height, and even, like, letter spacing, number of columns, and you could even type in whatever example text you wanted, sample all without downloading the file. We just thought it was ridiculous that if you have a file that someone shares with you on the web, that you have to download it in order to be able to even view it. And that's one of the major things we want to improve upon.
00:05:57.710 - 00:06:55.998, Speaker A: Yeah. And if you like a file that you see on Slate, you can always save it directly to your slate or download it, or if you want to add it to a specific collection, you can do that as well. And one of the incredible things about being run on IPFS is that because of CIDs, we can detect whether a file has already been saved to your slate. And if that's the case, let you know that it's a duplicate, and then we don't have to eat into your storage any more than necessary. And not only can you preview these fonts much more easily, you can actually load a font file directly from Slate into whatever website. And this is actually what Slate uses for its own fonts. Like, this is the slate where we keep all our fonts.
00:06:55.998 - 00:07:45.634, Speaker A: And then you can actually dig into our code base and see that we load these fonts directly from the textile URL right here. And then we do the same for background images. Like, this image is also hosted on Slate. You can inspect page source and check it out. And, you know, and one of the other things is that we didn't want to just improve the way people viewed individual files. We want to give you flexibility in how you spatially arrange your files within a collection and how you present them to others. So we allow you to drag and drop resize, overlap things.
00:07:45.634 - 00:08:55.110, Speaker A: And this is an example of how Nick has laid out his NFT slate. I can just demo that, right? So, yeah, you know, you can move things around resize. And then one of the other realizations we had while just using the product ourselves was that a lot of the files we were saving came from places on the web. And it was a lot of friction to have to download things individually, save them to your own desktop, and then re upload them to Slate. So we created a Slate extension where you can directly right click on things or hit the extension button and just grab the images directly from the page. For example, grab all the images, select which ones you want to save, add them to a particular slate, or just right click and hit the Add to Slate button. Yeah.
00:08:55.110 - 00:09:51.450, Speaker A: So what's next for Slate? One of the things that we encountered was that a lot of the things we wanted to save were actually links. And we dug a bit into what other products were on the market that allowed you to save links and files side by side. And to our surprise, there really were no good options. I suppose you could save them all to a notion file and then have them side by side, but it's really not optimized for that use case. So soon you'll be able to add a link to Slate, it'll, load all the information from it. And this actually is not in production yet, but I can give you guys a sneak peek at what that may look like in the future. So say we take this link, we add it to Slate.
00:09:51.450 - 00:11:10.210, Speaker A: While it's uploading, I'll give you an example of what something might look like. So this is a Twitter. It has a custom embed specific to the site. The link we just uploaded. If it allows, iframe we'll actually load the page and you can interact with it from there, or if it's a page that has an author, a source, we'll automatically pull that so we can credit the source properly and you can interact with a page from, you know, also put notes on the side. And one of the other things we have on the docket is to add some custom support for NFT sites, like possibly even allow you to plug in your wallet and verify the ownership of NFTs. And then Slate could become a gallery to display your I know a lot of you guys are going to be hacking on projects in the next few weeks, so I wanted to dig into how slate can be relevant for you as a developer.
00:11:10.210 - 00:11:40.614, Speaker A: So we've mostly been talking about the consumer side, how slate looks to end users. But it can actually be a great place to host your files. Like what I mentioned earlier with the font files. And then let me see. So this is actually an example. The site that we were looking at is actually an example of something that's built with slate. Like, all of these images are actually hosted on slate.
00:11:40.614 - 00:12:12.840, Speaker A: And you could open image a new tab and see that right here. So this is a textile link again. And then yeah, let me just dig into the API and give you an example of how this works. Let me see. Okay. Yeah. So once you register for a Slate account, you can head to the API tab here.
00:12:12.840 - 00:12:52.500, Speaker A: All your APIs here. API keys will be here. If you don't have one, you can generate up. I've so I've gotten together like a skeleton code project, and we're just going to fill in the API request examples. So the first thing you'll probably want to do is upload a file. So I've already got the input for the files here. All that's left is upon clicking the upload button.
00:12:52.500 - 00:13:18.050, Speaker A: How do we execute that? Let me pull up my code. 1 second. Here we go. Okay. Yeah. So if you go to the API page, upload is all the way here at the bottom. This is the URL you're going to want to use.
00:13:18.050 - 00:14:21.530, Speaker A: Copy that. It just for context. This handle upload event is going to be triggered by this input. And this input will have files. So those files will be and then for each file, unfortunately, we can only do one file at a time. So you will have to go file by file for less files. You're going to want to start off by creating a form data and then appending the file to the data.
00:14:21.530 - 00:15:17.420, Speaker A: And then within your try catch error. Just in case there's an error, you want to be able to read it. And then if you take a look at the docs, the response should base or the fetch should basically look like this. So and then the URL we talked about earlier headers method. Keep in mind we use a post for this. All our API endpoints are posts just for simplicity. Headers.
00:15:17.420 - 00:15:50.550, Speaker A: And then this is where you'll need your API key. So if you go back to your API page, copy any of the API keys authorization. I'm just going to save it in a variable up here. I don't recommend keeping it exposing your code. If you're actually using this, keep it in an end file. This is just for simplicity, so you know what it looks like. Saved as API key organization API key.
00:15:50.550 - 00:16:38.580, Speaker A: And then be sure to append the data as the body of the request data. And then once you get the actual response, just remember to make sure you await it. We've had some people mention like they couldn't get the response back because they didn't await it. You'll just get a promise back. Otherwise you'll have to convert to JSON. Just print it out so you guys can see what that'll actually look like. And then in our case, I'm actually going to save it to this variable called file.
00:16:38.580 - 00:17:06.430, Speaker A: And then we'll actually set it to the state variable. This is just so we can display it in this little code block we have here. Just for easy viewing. Let me double check. That should be good. Let me just reload this. I had this page open for a while.
00:17:06.430 - 00:17:50.622, Speaker A: Open the console so you guys can see the full response. Say we want to upload this image. I'll take some time. And here, this is the response you get back. Like this is the full response. And then response data is this right here. So you'll get back the file name, the ID when it was created, data about it if there is some, and then the CID name, type, size, the CID is what you'll need.
00:17:50.622 - 00:18:19.480, Speaker A: If you need to access the actual file, this is where it's hosted. You can access it through any gateway. You don't have to use the textile gateway, but the one we use is slate, textile, Ioipfs, and then whatever the CID is. So we can actually do that. Slate. Textile IO. And here we go.
00:18:19.480 - 00:19:16.790, Speaker A: And images like this you can use directly in whatever website you're using. If it's a font file like we showed earlier, you can actually load it directly into your files. That's actually what we do here. Our font files are just loaded directly from that textile link. I guess the next part, next example is once you have a file uploaded, how do you actually edit it? How do you re access it? Say you forgot to save this information with that. Let's the update example. And again, I have the skeleton code here, just filling in the fetch request.
00:19:16.790 - 00:20:27.662, Speaker A: So for this first part, I'm going to show you how to fetch your own user data. This way you don't have to save it after you upload it and immediately update it. So the API docs for that are here under Get your data. And this will give back all your collections, including as well as your username, your personal information on slate and the information about all your files on slate. It's ordered by the most recent one is first, let me see. So this is going to be the URL that we want. Same thing again.
00:20:27.662 - 00:21:39.846, Speaker A: Try catch it's, same thing. Method is the post headers. One extra header you're going to want to include here that's a bit different from the last one is Content Type application, JSON authorization. Same as last time. That same variable that we had saved, API key. And then you're going to want to parse the response into JSON just so we can see what it looks like in full. And I already know the structure of it, but you can get the user through user equals JSON user.
00:21:39.846 - 00:22:35.526, Speaker A: And then within the user there's a variable called library. Const library equals user library. This is an array of all your files from most recent to oldest. And then to get the last file you're going to want to do const file zero. And for our purposes, I'm just going to save this last file to variable. And here it is, the file we just uploaded. And then say you want to update the name.
00:22:35.526 - 00:24:54.370, Speaker A: Say you don't like the name links plus files PNG. What you can do is from there, once we have this data blob, we can use this endpoint update file. So what you're going to want to do is copy this URL that we just saved to a variable and then you're going to want to make whatever updates you need like it. This updated name value is linked to this input updates and then try catch and you can reference the API docs for more details on what this should look like equals. Remember to include the content type again here's. Authorization as always so we know which account you're using. And then in the body you're going to want to remember to jsonify.
00:24:54.370 - 00:25:55.240, Speaker A: And then the format is an object with data in it and data is the value of the file updates. And then in return we're going to get back the value of the updated file. So const JSON, we'll print this out just to verify it's what we expect. Data file. I believe that should be it. So if you just fetch the data, say we want to change the name to links and file update file and this is what you get back. Updated name.
00:25:55.240 - 00:26:38.250, Speaker A: One example I actually forgot to give, although I think we're out of time, is if you want to upload to a specific collection. Let me see upload example. Yeah, if you want to upload to a specific collection, what you can do is just include the collection ID as an add on to the URL and then it'll upload to that collection. Yeah, I think running a little short on time. I guess we can start the Q A. If anybody has questions.
00:26:43.200 - 00:26:52.030, Speaker B: Feel free to come off mute and ask on the zoom or in the chat if you feel more comfortable doing that.
00:26:55.700 - 00:26:59.170, Speaker A: Oh yeah, regarding what's in the chat. Oh, sorry, go ahead.
00:26:59.940 - 00:27:07.920, Speaker C: I was just going to ask if I can upload an existing file to its CID to a specific collection.
00:27:08.900 - 00:27:18.308, Speaker A: Oh, I see. Do you mean through Slate? Like is this a file that you already have stored on Slate or is this a file that's on IPFS somewhere else?
00:27:18.474 - 00:27:20.760, Speaker C: Yeah, it's somewhere else on IPFS.
00:27:21.420 - 00:27:36.430, Speaker A: Okay, so Textile does have that functionality. We currently don't have an API exposed for it, but that's good to know that people are interested in adding that. We could probably add that over the next day or so.
00:27:37.360 - 00:27:38.716, Speaker C: That would be awesome.
00:27:38.898 - 00:27:55.810, Speaker A: Yeah. Okay. I'll get that into production today or tomorrow, but yeah, it's totally possible. It's much faster than reuploading, as you probably know. Thank you so much. Yeah, no worries. And just to address what's in the chat yeah.
00:27:55.810 - 00:28:06.710, Speaker A: Obviously don't do this on the front end. If it's an M file, make sure you're passing things across the right way.
00:28:08.440 - 00:28:10.672, Speaker C: Yeah, that was me as well in the chat.
00:28:10.736 - 00:28:37.330, Speaker A: Oh, yeah, got it. Are you able to collaborate on file boards? Yeah, so this is something we've been wanting to add for a while. It's just a matter of prioritization. Currently, you can share them publicly. As long as a collection is public, you can share the link to it. Like you could navigate this link right now. We do want to add collaboration features soon, though.
00:28:44.260 - 00:29:04.730, Speaker B: I know you touched on this a little bit earlier from sort of the features side, but outside of the value of being able to augment files without downloading their source information, where do you see Slate going as a product? I guess as a user experience later on?
00:29:06.140 - 00:29:09.690, Speaker A: In terms of being able to edit files on platform?
00:29:10.220 - 00:29:21.790, Speaker B: Yeah, I suppose just sort of seeing the workspace in general. Or is this specifically tailored to be the best file storage device that exists out there right now?
00:29:22.480 - 00:30:12.670, Speaker A: Yeah, so I think with respect to editing files, the thing that we are most likely to add is like a markdown editor because that would basically allow us to have text and composing text on Slate. But in terms of adding being able to edit blender files on Slate or PDFs in Slate, that seems like one of those things where we would have to build out everything individually and we just wouldn't do it. As well as the individual programs that only devote themselves to one thing. I think our goal is to make it easy to view anything without having to download it, but not necessarily edit because there's other programs for each of those. But we just thought it was ridiculous that you can't even view a file or a font file properly without downloading it.
00:30:14.880 - 00:30:16.350, Speaker B: Could not agree more.
00:30:19.700 - 00:31:02.060, Speaker C: I was actually thinking of using GitBook, and then when the content is merged, we will publish it through the web free storage API and also the NFT storage. And then I was thinking of adding those NFTs to our collection on Slate. So basically the front end, we'll just need to query the collection on Slate and from there we can fetch all of our NFTs and lessons that are within the NFT.
00:31:02.560 - 00:31:39.180, Speaker A: Definitely. I think the endpoint that you may be particularly interested in is grabbing a specific collection by ID. I forgot to mention this, but the way you find the collection ID is copy collection ID and then that's what you would plug in over here, but, yeah, that might be useful to you're.
00:31:39.940 - 00:31:54.230, Speaker B: Awesome. Well, if there aren't any more questions, I want to thank you for explaining everything and presenting with us today. And I want to thank everyone else for joining us. Really excited about this project and really excited to see where this goes next.
00:31:54.920 - 00:32:01.656, Speaker A: Yeah, thanks for your time, everyone. And I'll get that API endpoint out next couple of days, so you can use it.
00:32:01.758 - 00:32:07.320, Speaker B: Right on. One last question. Where can users connect with you during the hackathon?
00:32:07.980 - 00:32:34.224, Speaker A: Yeah, so I'm guessing maybe the company Slack is not the best place, but you could email me personally at martina at slate Host or The Slack or sorry, the Slate Company email at hello at slate Host. Either works and I'll be sure to respond quickly. Awesome.
00:32:34.342 - 00:32:35.504, Speaker B: Well, thank you.
00:32:35.702 - 00:32:37.088, Speaker A: Cool, thanks.
00:32:37.254 - 00:32:44.910, Speaker B: All right, we're going to be closing out the Zoom right now. Thanks for everyone for attending, and look forward to seeing you guys tomorrow for the.
