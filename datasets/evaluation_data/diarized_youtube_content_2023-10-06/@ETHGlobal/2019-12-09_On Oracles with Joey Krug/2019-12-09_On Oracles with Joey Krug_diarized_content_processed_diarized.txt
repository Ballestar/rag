00:00:01.370 - 00:00:52.762, Speaker A: So we're going to go over what an oracle is, history of oracle's, kind of current approaches and where I see the space going. So there's a bunch of different definitions for what an oracle is. People talk about like these machines where you can kind of get on the order of one result, some arbitrary computation, warren Buffett, the Matrix, it's none of these, it's been redefined just like Crypto has. So an oracle in this space basically means something that can get data off chain and get the result and submit it on chain. And so why are they useful? Well, they're useful for lots of things. You have various financial markets, things like dYdX, compound maker prediction markets, all these interesting DFI use cases. I'd say 95% of them using oracle in some way.
00:00:52.762 - 00:01:34.860, Speaker A: There's a few various things that actually don't require an oracle, but a lot of things in the space do require them. They're typically used for things like margin calls or trading liquidations. So like, if you have a CDP in maker and your value of ETH starts to drop, you'll get liquidated. What triggers that is an oracle. And so in the beginning, really, the first thing that was ever launched in this space was this project called Reality Keys. And the way it worked was basically this guy, Edmund Ediger, he published a website where he would sign messages and he would basically sign messages that had results from any website. It was basically a completely trusted third party style system.
00:01:34.860 - 00:02:19.462, Speaker A: Problems with this, they can be bribed, they can be hacked, they can be forced to do something, they can be coerced. And it has kind of all the classic problems any traditional trusted third party has. In 2014, Vitalik published this idea called Shellingcoin. And the idea was, well, what if you ask a bunch of people of a question? And the example we'll kind of stick with is how many inches of rain fell in a certain location on a certain date? And you could even say, like according to the National Weather Service or something. And his idea was whoever submits a value between the 25th and 75th percentile, they get a reward. He called this reward Shells, and that's why there's the name Shelling coin. There's a few problems with it though.
00:02:19.462 - 00:03:16.650, Speaker A: By default, there's no sort of staking mechanism built in, so there's no way to kind of prevent civil attacks. And with this design, the richest staker has basically determined the truth. And successfully lying costs an attacker nothing. There's no threat to an attacker, so it's reward based and there's no slashing conditions. Later in 2014, Paul Stork published this proposal called Truthcoin and same question, but basically said, what if you use principal component analysis to have people report on a bunch of different things, a bunch of different events and try to bifurcate the people who are telling the truth and the people who are dishonest? The idea being that people who are telling the truth are relatively consistent, and people who are dishonest are inconsistent. And then there was also the staking mechanism added where if you are dishonest or you are against the consensus, you lose stake. If you're with it, you would gain stake from people who are dishonest.
00:03:16.650 - 00:04:16.526, Speaker A: And by default, people kind of reported on everything. And so this is a problem kind of inherent to this system, which basically this problem is like it doesn't really scale because you have to report on every single question ever proposed, doesn't scale. The solution he proposed was, well, why don't we allow people to create branches that are kind of subject specific? The problem with that is it bifurcates the security model. So if you had $100 million in stake in the original universe and you decided to split it up by like sports, politics, finance, east finance, whatever, then you've bifurcated the security model by however many categories you have, and so your system is less secure. There's other issues too, like principal component analysis is actually kind of complicated to do on chain. It's also not like the most effective way in simulations to even distinguish between the people who are with consensus and against it. It also has this other problem called the P plus Epsilon attack.
00:04:16.526 - 00:04:59.740, Speaker A: This is an attack Vitalik published, I think in 2015 or something around there. And the idea is that you can basically creatively, so you don't have too much time. I'm not going to get into it too much, but you can creatively bribe people. And the only way to really get around this attack is if you allow the system to fork or to split into different universes. So you can envision a market that's like how many inches of rain fell and a bunch of people say 14 inches and a bunch of people say 15 inches. Well, if the disagreement gets so high, you eventually just split into one universe where people say 14 and one universe where people say 15. Current Approaches we'll kind of walk through some of the current approaches to the Oracle problem today.
00:04:59.740 - 00:05:37.270, Speaker A: I actually don't think I have a slide on the uniswap one. So to go over that first, the idea with uniswap is basically you look at the time weighted average price of whatever asset you're trying to measure on uniswap over time, and that's pretty secure. But the downside is you need to do it over a pretty long time period. If you measure the uniswap time weighted average price over the past minute, very insecure over the past week, probably pretty secure over the past day. Nobody really knows. So it's hard to kind of figure these things out. The next idea somebody published was called Subjectiveocracy.
00:05:37.270 - 00:06:20.150, Speaker A: So you asked the question, will it rain in San Francisco? And there's no explicit Oracle after it happens. There's basically just two universes. One says, yes it rained, and one says, no it didn't. And the idea is that you now have like two tokens, two universes, every single event. And so it's a nice idea in theory, but it would be a mess to deal with in practice and it lacks finality. So every time you wanted to use this system you kind of need to trace the tree and figure out where you're going to end up at the bottom of it. You also have systems like TLS Notary, Oracleize, Chainlink, et cetera, where you basically either use some sort of M of N trusted Oracles or you provide a proof.
00:06:20.150 - 00:07:07.446, Speaker A: The problem with TLS Notary is smart contracts actually can't really verify the thing you want them to verify. So the way it works is you go to a website, get a piece of data and TLS Notary says, okay, I saw that site, I got that piece of data and I formed a proof that I did see the site and get a piece of data. But then when you submit that on chain, the smart contract actually can't verify all of that. All it can verify is that you're claiming that you have a proof, but it can't actually verify the proof itself. There's a new design called Tlsn which basically solves this problem. But both of these solutions have a severe trade off. The first one is that TLS Notary only works for like TLS 1.1
00:07:07.446 - 00:08:00.626, Speaker A: or less and uses basically known to be insecure, basically broken hash functions, so it's not really secure. Tlsn is this other solution on top of it that works for newer versions of TLS, but the downside there is that, well, basically you have to run a custom web server so you have to convince whatever site you're getting the result from to run a custom server. It's really just like an open source software library that some random person wrote and hasn't maintained in over a year. So it's not going to happen. No it's not. It's like something that somebody published, it's an academic paper and then an open source library on GitHub. Okay, but was it motivated by blockchain? TLS Notary wasn't, tlsn was like tlsn was like, we solved TLS Notary, it has these problems and it'd be great if you could verify the proofs on chain.
00:08:00.626 - 00:08:53.216, Speaker A: So that one was motivated by blockchain. Actually I had a slide on that, we just went over it. There's another idea somebody came out with recently called Deco or Deco, I don't know how they pronounce it, but it basically lets you verify the proofs on chain similar to Tlsn, but doesn't basically require that you run a custom web server. And so it's very interesting. There's still a lot of open questions there, but it's an interesting area to look at. Trusted hardware is another solution. The downside is you basically have to trust intel and their entire supply chain, but it allows you to provide a proof using Intel SGX that you got some data and basically attested to the fact that you got that data and on chain, it's very simple.
00:08:53.216 - 00:09:37.680, Speaker A: You can basically verify this using a simple signature verification. There's also the beauty contest approach. This is basically where you basically just stake a bunch of capital on multiple sides and kind of repeatedly challenge things. So the idea is that you have a market, it's like, will it rain in SF or not? And somebody says it did, but it actually didn't. You dispute it. And this continues back and forth until one side just has so much stake on it that it basically just resolves and nobody continues to dispute it. The problem with this is that it has the P plus epsilon attack problem and there's not really a penalty, to be indies honest, if you have enough stake.
00:09:37.680 - 00:10:10.776, Speaker A: ClearOS is we'll skip that for now because it's kind of a side topic. Auger is kind of like an improvement to the beauty contest approach. Basically adds the concept of forking into these different universes. To get around the P plus Epsilon problem, you get penalized if you report incorrectly or basically more accurately against the consensus. If you report with the consensus, you get transaction fees and stake from people who didn't. And it doesn't require reporting on everything. And the reason is it switches to a disputing based process.
00:10:10.776 - 00:10:56.356, Speaker A: So instead of reporting on every event, users instead just dispute ones that they think are incorrect. That's a diagram of how it works, basically. In Augra V Two, which is going to launch in January, dispute rounds can happen pretty quickly, so people can dispute back and forth multiple times if it gets up to a sufficient threshold of disputes. There's kind of like a weak cool off period. This would be like if hundreds of thousands of dollars are at risk in disputes, and eventually if it continues to get disputed, it forks into these parallel universes. And the idea is that users and traders and participants would decide which universe they want to end up in and migrate their rep over to that universe. So it's not like a regular fork.
00:10:56.356 - 00:11:35.396, Speaker A: You don't get the assets in both sides. You have to pick one. Skip that because we're running low on time. So one thing that's important here is you want to have incentive compatible pricing for Oracles. So early on when we were working on Augur, we thought, okay, well, simplest way to think about it is the value of stake the Oracles are putting at risk should be greater than the value of assets they're securing. In practice. I think there's a few reasons why that should actually be a few times higher, and things like the parasite problem, people can use your Oracle and you can be not aware that they're even using it.
00:11:35.396 - 00:12:21.670, Speaker A: And there's a few other kind of math reasons for why it ends up actually being a few times higher even outside of the parasite problem. But it's kind of too lengthy to describe here. It would take like 15 minutes. But if you're curious, the Auger White paper basically goes over this in one of the appendix sections. But the punchline, the core idea here is that Oracles should be compensated appropriately such that the stake used for Oracles is worth it and that they're actually worth participating in that it's worth participating in a dispute process and they're actually paid enough fees to make it worth it. If you don't compensate them, your system is insecure. And so the last piece is sort of like where the Oracle space is going.
00:12:21.670 - 00:12:55.100, Speaker A: So we actually just got a paper accepted into an academic journal that goes over formalizing the Auger Oracle framework into kind of a more generalized framework that we've been working on that for a long time. And then next is like uniswap price feeds with uniswap V two. You'll be able to use those. I think that's very interesting. And the last piece is sort of like fast, economically secure Oracles. And so this is kind of just an idea I've been playing around at a very high level. So the idea would be like you would start with the Auger model, you would make Dispute Windows much faster.
00:12:55.100 - 00:13:47.612, Speaker A: You basically make everything a lot faster and you would switch everything to using bots. So Auger is mostly human based, but in this model you would use bots that would basically fetch the results and report them. The problem is you have this problem called the inconsistent source, which is this idea where somebody can basically say, get the result from my website.com. And to half the people they say the answer is 42, the other half they say the answer is 47. And people are going to lose money in a stake based system if you use that. So one way to get around that is to have governance, which I'm not a particularly a fan of, but one way is to have governance on what sources you can use. Another way to do it is to basically switch the forking model up and instead make it so that you get stake in kind of all the universes when a fork happens and then you can choose which one you want to sell off.
00:13:47.612 - 00:14:18.100, Speaker A: And this basically kind of solves the problem of what happens if somebody makes an inconsistent source and I lose money, because you wouldn't. It's kind of an element of the old subjectiveocracy idea, but it would only take place when disputes got very contentious. And so that's kind of the idea. This is very recent, haven't really thought through any of the implications of it. It's just kind of an idea throwing out there for how you could potentially speed up Oracles. Because the final thing I would say is for Auger, it's a very slow Oracle. Like it's pretty secure.
00:14:18.100 - 00:14:58.550, Speaker A: It does actually get external data into ethereum and it does that securely, but it's slow, it's not fast. And so figuring out how to make it fast involves making various compromises and trade offs. And that's why so many people are talking about the fast Oracle problem because I think it's actually harder than the slow one. So thanks. I don't know if we have time for like one or two questions, but if anybody has any, go for it. We're not in a rational, I'm after you, but try and steal steel. Men the arguments against this.
00:14:58.550 - 00:15:34.892, Speaker A: Like one on this slide or or just in general. Yeah, so the earlier one is like I'd say, the arguments against it are like, well, it shouldn't be a problem because people will just continue to dispute things and they'll figure out a way to dispute it. And in practice, nobody's going to bribe the Oracle. The P plus Epsilon problem isn't a real problem in practice. That would be kind of like the argument against it. And that might actually be true. But it also might only be true because you have the threat of forking.
00:15:34.892 - 00:16:02.260, Speaker A: Like Auger, for instance, is never forked, but it may be because threat exists and the threat alone is sufficient. But if you didn't have it, I don't think it would actually be game theoretically secure. Whether that matters in practice or not it's hard to say. Like Bit Point itself is not game theoretically secure, but it still works and mostly workshop.
