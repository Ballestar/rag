00:00:07.530 - 00:00:53.770, Speaker A: Welcome to Mud. My name is Alvarius and today we're going to build an on chain app to demonstrate how to get started with the framework, build something real and then deploy to production. But before we jump into the code, let me give you a very brief overview of a couple of important concepts in Mud so that everything else clicks into place much faster. Let's start with a quick reminder of how onchain development used to work without Mud. So in the old world, let's say we want to create a contract where we want to store a mapping of the owners of a given address. We store a mapping, we call it owned by from address to address. And then we create a function set owner which allows us to set the owner of a given address that function emits an event and then we set the owner in our own by mapping.
00:00:53.770 - 00:02:08.790, Speaker A: The data is going to be stored in storage and the location of the data in storage depends on the hash of the key that we use to index the mapping. That means if we have access to a full node, we can read all the values in storage, but we can never recover the key because the key was hashed to find the storage location. And if we want other contracts to be able to get the owner of a given address, we have to remember to implement a custom getter function because without this function, another contract really has no way of accessing this value in the storage. In our front ends, we most likely also want to know which addresses have an owner. So what are all the keys that have been set in this mapping? And this is why we had to remember to emit our custom event in our set function set owner, which also includes the key so that a custom indexer can now index this event and then our clients can ask the indexer to get a list of all the keys that have been set in this mapping. Doing all of this for every state variable we need in our contracts is very cumbersome and this is why we created Mudstore. With Mudstore you don't need any custom getter functions, you don't need any custom events, you don't need any custom indexers and you don't need any custom networking code because all of this comes by default.
00:02:08.790 - 00:03:12.602, Speaker A: So how does this work? We start with a standard data model that is based on tables and then we provide an optimized call library that is used to interact with the standard data model with these tables. And because the user doesn't interact with storage directly, but rather through this library, the library can take care of optimizing the storage layout and so in some cases even can achieve more efficient data packing than native solidity. And then this call library also emits events by default for every state change which then can be picked up by a default indexer which can be used by clients to get the state very quickly. The standard data model is very simple. All the data is stored in tables and every table has a schema that describes the types of values that are stored in this table and then every record. That means a row in the table has a key which is used to index this row in the table. Here is an example of an owner table that has a schema with a single field called Owner and the value that is stored in this field is an address.
00:03:12.602 - 00:03:47.554, Speaker A: And then each row is indexed by a bytes 32 key which is implicit in the schema because we didn't provide any override for a key schema. Here is an example of another table called the position table. And this table has a schema with two fields, one X and one y and both of them have type int 32. And again we didn't provide a key schema so we're using an implicit byte 32 as a key. And lastly, here is an example for a balance table. This time we do provide a key schema which means the key has two pieces. The first one is Owner and is of type Address.
00:03:47.554 - 00:04:36.950, Speaker A: The second one is Item and is of type U and 32. And then our value schema has a single field called amount and is of type U and two five six. And this means every row in this table is indexed by the tuple of owner and item and then the value of this row is the amount. The data in these tables is modified through the optimized call library. But you as a developer never have to actually touch this call library directly, but rather we generate typed wrapper libraries for you based on the table schema. And another thing that you as a developer never have to worry about is emitting events for when data changes because the call library does it automatically. And then based on these events, the default indexes can index the data and make it available in an SQL database to any client.
00:04:36.950 - 00:05:30.706, Speaker A: So as a quick recap, Mudstore gives you structured schemas storage optimization, tight encoding and default indexers. And it's compatible with any contract as a plugin replacement for native solidity storage. The second piece of the Mud protocol that I quickly want to give you an intro about is the Mud World, which gives you permissionlessly extendable contracts. And here's how it works. At first, a single world contract is deployed. Inside of this world contract anyone can register a new namespace and then inside of the namespace, the owner of the namespace can register new tables that contain the data of this namespace. This is powered by Mudstore and this is a major difference to Vanilla solidity because in Vanilla Solidity you would define the data types at the time when you write your contract and then you deploy that contract and the data types are fixed.
00:05:30.706 - 00:06:18.750, Speaker A: Here, we're registering a new table inside of an existing contract at Runtime to extend the functionality of the world. The owner of a namespace can register new systems in their namespace. And for each system, a function selector is going to be registered in the world contract so that the system can be called through the world contract. By default, systems can read data from all the tables, but they can only write to tables in their own namespace. And they can write to tables where the owner of the namespace gave explicit approval to the system to write to this table. Mud Store and Mud World are two important lower level pieces of the Mud protocol. But now we're going to focus on the Mud framework, which is the thing that glues all of this together into an engine for ambitious on chain applications.
00:06:18.750 - 00:06:49.720, Speaker A: And it comes with batteries included. It comes with the CLI, it comes with the development server and dashboard, and it comes with templates. And this is what we're going to have a look at now. So let's create a new Mud project. We can do so by running Pnpm create Mud at Cannery, and then we put the name of our project that we want to set up. In this case, it's Mud 101. And we put At Canary because we want to use the latest alpha version of Mud.
00:06:49.720 - 00:07:41.744, Speaker A: So now we're asked to choose between the react version and the vanilla version of the template. And for the sake of this video, I'm going to choose the react version here. So now that's going to download all the packages, install all the dependencies, and going to set up our project. And once that's done, we can CD into our project and run Pnpm Rundev to start the local development server. What this is doing is setting up a local Ethereum node, deploying all the contracts to that local Ethereum node, and also starting a local web development server. All right, so this is done. It's saying Mud watching for changes, because later when we change our files, it's going to automatically redeploy and recompile everything.
00:07:41.744 - 00:08:21.864, Speaker A: But for now, let's just head over to the browser and have a look at our app. We can go to Localhost 3000, which is where the local web server is running, to have a look at the app that was just created for us. Here on the right side, we can see the Mud dev tools. On the very top, you see a couple of general stats about the current chain that we're running on, in this case, our local founder chain. We can see that the block number is increasing because we're connected to our local RPC node. And we can also see a burner wallet that was created for us. When we loaded this page for the first time, we see our balance, which is zero ETH, which is fine because we're on a local development chain.
00:08:21.864 - 00:09:06.584, Speaker A: And then we can see a couple of store events that were emitted when we set up the app for the first time. And then on the left side, we see the app that was just created for us. If we press the button here, we see there's a new action coming through and we see one new store event at the bottom, the counter value, which got increased to two. What's happening here in the background is that if we press the button, a transaction is sent to the chain and then mud synchronizes the state of the chain in the background automatically to the UI and to the client. And to show you how that works, let's jump into the code. Our project is split up into two packages. We have one client package and we have one contract package.
00:09:06.584 - 00:09:44.164, Speaker A: And the first thing we're going to have a look at is the mud config, which we find inside of the contracts package under a mud config TS. And in here we see that we currently have a single table set up, the counter table. And we see that this table has schema with a single field, which is a UN 32. And then we also see a key schema that has no keys inside of it. And the reason for this is that our counter table has only a single row. We call this a singleton table and we don't need any keys for it because it only has a single row. Now this is our config.
00:09:44.164 - 00:10:11.090, Speaker A: And based on this config, mut code generated a library to interact with this table. And we can find this library in code gentables and then counter sol. And here we see, okay, this is a code generated, an auto generated file. We should not edit this manually. And we see a bunch of methods that were generated for us. But we don't have to look at this in detail. We can just close this again and interact with it as a black box.
00:10:11.090 - 00:11:03.408, Speaker A: Now, the next thing we're going to have a look at is the client. For this, we switch to the client package and we go into Source and open app TSX, which includes the source code of the page we just saw here we see the counter with the counter value behind it, and we see the increment button that we just saw on the page that we opened. And we also see that when we press this increment button, the increment function is called which comes from system calls. So let's look at where this comes from. This is coming from Create system calls, which is a function inside of Source mud and then Create systemcalls TS. And in here, we set up our functions that we want to call on the world contract. So what actually happens here is we call a function on the world contract via World Send.
00:11:03.408 - 00:11:49.028, Speaker A: And the function that we're calling is the increment function. And we don't provide any arguments here. So let's switch back to the contract package to see where this function is coming from. I'm closing the clients package, going back to contracts. And then I'm going inside of source and I'm opening the systems folder and I see a single system, the increment system. Every contract whose name ends in system is automatically considered a system by Mud and it's going to be registered in the world contract during the deploy process of Mud. And then for every function selector inside of that system, this function selector is also going to be registered on the world contract so that people can call this function directly through the world contract.
00:11:49.028 - 00:12:38.344, Speaker A: And then the world contract forwards the call to our system contract. So in this case, we have a single increment function and this function is registered on the world contract, which is why we were able to call the increment function directly on the world contract from the client. Now, what this function does is it reads the current value from the counter table. And remember, this is a singleton table so we don't have to provide a key and then increases that value by one and it sets a new value on the counter table again. So if we go back to our app, we can now read the value from the counter table through this hook called Use Component value. And then this is the value that we display in the app. Now, the reason why this is called Use component value is because this is coming from a pattern called ECS or Entity Component systems.
00:12:38.344 - 00:13:25.420, Speaker A: For the sake of this tutorial, we're not going to go into ECS though. And so I'm going to quickly replace this with a lower level hook called Usero, which also allows us to read rows from a table and doesn't have the ECS abstraction around it. To use this hook, I have to provide the store cache, which is where Mud synchronizes all the contracts state to, and I can get this from the network here. And then I provide that as the first argument. And the second argument is going to include the table that we want to filter for, which in this case is the counter table. And then we also have to provide an argument for the key that we're interested in. But in this case, since it's a singleton cable, the key can be empty.
00:13:25.420 - 00:14:10.012, Speaker A: And because our return value is slightly different, we have to fix this up here and provide the key of the value, which in our case is also called value. And then just to confirm everything still works, I'm going back to the browser, pressing the increment button. I see the transaction going through and I see the state being synchronized and updated in the UI. We don't need these imports anymore. So let me just real quick clean this up, removing this import, removing the components, and we also don't need the singleton entity anymore. All right, now let's create a new feature. I want to create a Balance Table which stores the balance of a certain item that a certain address has.
00:14:10.012 - 00:15:23.284, Speaker A: And I want to create a Mint system which allows people to mint a certain amount of a certain item. So the first thing that we're going to do is go back to our Mud config and add the configuration for that new table. We're going to call this table the Balance Table and we're going to give it a schema of a single UN 32. And this time we want to have multiple rows in our table and we want each row to be indexable by a composite key of the owner, which is an address, and the type of item which is going to be a UN 32 as well. Once we save this file, the Mud Development Server is going to pick up the change to our config and then autogenerate the new table that we just defined here, which we can find in code gen. And then in tables we see there's a new auto generated table library called Balance Table. All right, so let's create a new system to interact with this new table.
00:15:23.284 - 00:15:58.704, Speaker A: For this, we go into systems and we create a new file that we call the Min System. And I'm just going to copy the code from the increment system for now and going to paste it into a new file. And then I'm going to clean up everything that we don't need. So we're going to rename this to Mint system and I'm going to remove everything that is in here. And we don't want to interact with the counter table, but rather the Balance Table. So I'm going to put balance here. And of course, I named this table not just Balance but Balance Table.
00:15:58.704 - 00:16:40.568, Speaker A: And this is why I have to import from Balance Table here. Next we're going to create our Mint function, which we just call Mint. And we take one argument as an input, which is going to be our item that we want to mint and this is a public function. And then we want to grab the current balance of the call of this function to be able to increase it. And for this we're going to do Balance Table get. And now we have to provide the two keys that we use to index each row in this table. And so the first index, the first key is going to be the address of the call and the second index is going to be the item.
00:16:40.568 - 00:17:23.704, Speaker A: And one thing to note here is that we don't use message sender here, but rather we use underscore message sender, which is a function that's implemented on the system based contract. And the reason for this is that this system contract is not called directly, but rather it's called through the World contract. And so the World contract is forwarding the original caller of the system through this function. And now that we have the balance. We want to increase the balance and set the increased balance on the balance table. So I want to set the balance of the message sender of the current item with the new balance plus five. And that's all we need to do for now.
00:17:23.704 - 00:18:12.612, Speaker A: Now, once I save this file, the Muck development server is going to pick up the change, recompile all the contracts, and redeploy the world with the new contracts. But we don't have any way to interact with it yet from the front end. And so we quickly set up a connection to the front end by going back into our client and into Source, into Mud and into create system calls. And in here, we're just going to create a little wrapper function to call our contract. This is really just for our convenience, to not have to call the contract directly in App TSX. So we call this function Mint. And in here all we have to do is call WorldsEnd with the new Mint function, which is now available on WorldsEnd because everything was recompiled in the background.
00:18:12.612 - 00:19:08.324, Speaker A: And it tells us we need one more argument, the item. So we're going to provide an item here and we're just going to put one for now, and then we return this function to make it available on the context that we use in App TSX. Now let's go back to App TSX and let's clean up all the things that we don't need anymore in here. So we don't need the counter anymore, we don't need the stiff anymore, and we also don't need the button anymore. And instead, I'm going to create a new button which will be our Mint button. And on click of this button, we are going to call the Mint function, which we can get from the system calls object up here. And then we want to call this when we click the Mint button.
00:19:08.324 - 00:19:49.388, Speaker A: All right, this is all we need. Now let's go back to our browser and we see the Mint button. And we see that if we click this Mint button, a Mint transaction is sent to the contracts and it's confirmed. And then here in the recent Store events, we can see a new event that came in, which is an event, an update to the balance table where we see it now has value five for some key. But the new value is not displayed in the UI yet because we didn't set up that connection yet. So let's go back to our code and let's set up a connection in the UI. So I want to get all the balances from our balance table.
00:19:49.388 - 00:20:48.476, Speaker A: So in this case, I'm going to use a different hook. I'm going to use the Use Rows hook, and it behaves very similar to the Use row hook. We also provide the Store cache as the first argument. And then as the second argument, I provide a filter object which will include the table that I want to filter on, which in this case is the balance table. And then we're going to set up a very simple UI for this by looping over every element of the balances array, every row in the balance table. And we map each of these rows to a paragraph element so that we can see it in our browser. And in here we just put balance K owner has and then we want to have the number of items it has.
00:20:48.476 - 00:21:36.376, Speaker A: So balances value. This is because the only value in our schema is called value right now. And now the type of item, this is part of the key. So we do balance key item and then we can save this and head back to our browser and see the result. Well, you can confirm that this is my address by looking at my address in the Mud DevTools, but this is way too long. So I'm just quickly going to shorten this to ten characters. And then when we go back to our browser, this is much more readable and you can see my address has five items of type one.
00:21:36.376 - 00:22:36.408, Speaker A: And if we press the mint button again, you see that your eyes updating, you see the transaction on the right and you see the event in the DevTools. All right, now the last thing that misses long distance action actually chain. And for this we start our element process and we go into the Verbic contract and directory, go into the contracts directory from where we're going to deploy our contracts to an actual chain. The first thing we have to do here is create a new wallet. So I'm just going to use the Cast utility to create a new random wallet and I'm going to copy my private key and I'm going to head back over to the code into the contracts package where I can find a N file which includes the environment variables and I'm going to paste my private key there. So far this included the default anvil private key and I'm going to override it with the newly created private key from Cast. Then I head back to the console and I copy the address.
00:22:36.408 - 00:23:37.772, Speaker A: And because this is a fresh private key and fresh address, it's not going to have any funds on the testnet. And so because we want to deploy to the lattice testnet, I can just say Pnpm mud faucet address and then I paste the address here and the Mud Faucet is going to drip me some ETH to this new address so that we can deploy to the testnet. And now the last thing that I have to do to deploy to the testnet is type Pnpm deploy testnet which refers to a script that you can find in the package JSON in the contracts package. And now this is running the Mud deployer again, but this time we're deploying to an actual chain. So this time it's going to take slightly longer than the def runner which just deploys to the local chain because now we have to wait for every transaction to be actually confirmed by the real chain. And there we go. The contracts have been deployed to the chain and we see the world address that it got deployed to.
00:23:37.772 - 00:24:22.748, Speaker A: And now to interact with this production deployment, we were going to start our development server again, but just to have the development client running because we don't have our client deployed yet. So I'm going back to the project route running PMPM Dev to start the development server again. And it's starting both the development client as well as the development contracts. But in this case, we just care about the development client. The error that you see here is the contracts complaining that we're trying to deploy to the local development chain with a private key that doesn't have any funds on the local test chain. But again, this doesn't matter because we're only interested in the client here and if we scroll up a little, we can see that the client is running fine. So this is all we care about.
00:24:22.748 - 00:24:57.240, Speaker A: So we can go back to our browser and to connect to the production chain, we just have to append the chain ID param to the URL. So we type question mark chain ID equals 4242, which is the chain ID of the Lattice testnet that we just deployed to. And we press Enter. And now you see it's connected to the Lattice testnet. You see the block number increasing because it's connected to the testnet RPC. And you see our new burner wallet that was created for us here. And we see the balance that we have on this testnet, which is quite a bunch.
00:24:57.240 - 00:25:30.352, Speaker A: And if we press the Mint button, you can see the transaction being executed and being confirmed and you can see the balance value being updated and the I being updated as well. This is a very simple app, of course, but it should give you an idea of how to get started with the framework and how to build something much more complex than this. If you want to dive deeper, you can find the documentation at Mud dev and we're going to follow up with a bunch of videos that go deeper into specific topics like ECS and building games with Mud. Great.
00:25:30.406 - 00:25:41.990, Speaker B: Cheers. Thank you. We have just a few maybe like a minute or so, but I don't know if there are any remaining questions that participants have.
00:25:48.640 - 00:26:03.790, Speaker A: How could we browse games already created a month? That's a great question. There's a website for that. I'm going to post the link in the chat. It's community mat Dev. Oh, there we go. OK, someone posted already.
00:26:12.120 - 00:26:13.670, Speaker B: Sam, did you have a question?
00:26:14.200 - 00:26:15.812, Speaker A: Yeah. Thanks.
00:26:15.866 - 00:26:47.330, Speaker C: This was great. And pulled down and set up a template app and I'm running it locally and just trying to better understand this burner wallet stuff. Like, great. UX, I love it. I love running stuff through a burner wallet like that so you don't get these wallet pop ups. But I'm a little bit confused about transaction fees and more of a production main net sort of deployment here. Right.
00:26:47.330 - 00:27:01.510, Speaker C: Is the suggestion that users should fund that burner wallet or is that something that should sort of get replaced in this stack to make something more serious? It's not just like a sort of demo thing.
00:27:02.280 - 00:27:31.292, Speaker A: Yeah. So if you deploy to the Lattice testnet, we have a faucet so you can automatically fund the Verna wallet whenever somebody visits your app. And I think for the Optimism tester, we're also going to have a faucet available which can Autofund the burner wallets. Alternatively, you can also just connect any external wallet to your app. The only downside to that is that you now have to ask users to confirm transactions before doing that. Well, yeah. Okay.
00:27:31.292 - 00:27:32.844, Speaker A: Yeah. Depending on your use case, that might.
00:27:32.882 - 00:27:45.200, Speaker C: Be I have another tool that I use for further wallets and also implement Metatransactions. So I feel like that's probably the direction I want to maybe take my hack.
00:27:45.540 - 00:27:46.852, Speaker A: Yeah, totally. Okay.
00:27:46.906 - 00:27:47.476, Speaker C: All right.
00:27:47.578 - 00:27:55.120, Speaker A: That's only compatible. You can just connect it to the Ethos or VM executor that's connected to your client.
00:27:55.280 - 00:28:02.824, Speaker C: Okay. All right, great. I'll probably have tons more questions as I work through this, but awesome. Excited to hack around on this.
00:28:02.862 - 00:28:03.544, Speaker D: Thanks.
00:28:03.742 - 00:28:04.490, Speaker A: Cool.
00:28:10.770 - 00:28:34.440, Speaker B: And there were a few other questions. Just an FYI. If people are looking for the link to that video, this all will be recorded and shared with you later. So if you're looking for that exact video that average presented, don't worry about it. We'll just share this link to this presentation recording Et. It asks is he to integrate contracts that weren't written within the same.
00:28:37.450 - 00:29:00.720, Speaker A: Sure, I mean, so it depends on what you want to do. If you just want to interact with an external contract from your contract, you can just call it before. Essentially if you want to register an external contract as a system in your world that might be slightly more involved, but technically also possible if you have specific questions, we can dive into it later.
00:29:02.850 - 00:29:11.646, Speaker B: MD asked, can we deploy to Latice testnet during this hackathon? I think that might have been I.
00:29:11.668 - 00:29:17.410, Speaker A: Mean, I think you can if you want to, but also Optimism is providing a testnet that's probably better maintained.
00:29:18.970 - 00:29:23.590, Speaker B: And could 43 37 be a solution here? Like account abstraction?
00:29:25.850 - 00:29:30.200, Speaker A: Yeah, I think that was related to the discussion. Okay.
00:29:32.830 - 00:29:40.170, Speaker B: Can Mud be used to create just a single contract or a few that can be used in a bigger Mud project, like using a predefined interface?
00:29:43.540 - 00:30:01.400, Speaker A: I'm not quite sure if I understand this question. Can Mud be used to create just a single contract or a few that can be used in a bigger Mud project? Like used using prudent. Yeah, I'm. Not sure I understand. Maybe you can elaborate. Oh, yeah, okay, cool. We'll chat about it in Discord.
00:30:01.820 - 00:30:04.360, Speaker B: Evgeny, you had a question, you had your hand raised.
00:30:07.180 - 00:30:50.410, Speaker D: I am that Et guy is me. So the question is the same. And suppose I'd like to be able to extend a project, extend a running project with something provided by other people. So that shall I use just rigid interface I define beforehand and just take addresses? Or did anyone compose different Mud projects so far?
00:30:51.020 - 00:31:35.028, Speaker A: Oh, I see. So essentially different Mud worlds is your question. So if you have one world, then it's very easy for people to extend it by registering new systems because that's permissionless. So people can register their own namespace and their own system. In your world, if you want to integrate different worlds together, that's also theoretically possible, but would require some more custom code because now you can't assume anymore that the caller of your system will always be this one world, but maybe you have different worlds now. So it's totally possible you can just write custom solidity code for it, but it's not the original intention. Essentially, yes.
00:31:35.114 - 00:31:47.370, Speaker D: So to add systems to a running project, what do people do? They download, they clone the code, they add a system and then what?
00:31:48.220 - 00:32:06.610, Speaker A: Yeah, that's exactly right. Yeah. So you can deploy systems to an existing world as well by just providing the world address parameter to the CLI. And then essentially it doesn't deploy a raw world anymore in the beginning, in the deployer, but rather just deploys your systems to the existing world.
00:32:07.460 - 00:32:11.856, Speaker D: I believe this is covered somewhere in the docs, right?
00:32:12.038 - 00:32:12.770, Speaker A: Yeah.
00:32:15.640 - 00:32:16.870, Speaker D: Thank you so much.
00:32:17.480 - 00:32:18.230, Speaker A: Sure.
00:32:21.390 - 00:32:27.980, Speaker B: We have two more questions. How can NFTs be integrated and be compliant with the ERC 720 spec?
00:32:28.830 - 00:32:47.540, Speaker A: Yeah, there's a couple of different approaches. There's a couple proposals up on the Mud Discord, if you want to read them in detail. And one of our team members actually wants to hack on this during the sackathon as well. DK one A in our Discord, so we can chat about it later as well.
00:32:50.310 - 00:32:52.930, Speaker B: Can you explain how to create packages?
00:32:55.290 - 00:32:57.480, Speaker A: I'm not sure I understand this one.
00:32:59.530 - 00:33:02.870, Speaker B: Mick, are you still on you want to maybe come off mute?
00:33:03.770 - 00:33:21.406, Speaker D: Yeah, I think the question is just related to I guess if I want to automate. I think I was reading some of the docs in V Two and they explained something about if it is possible to I just want to understand the packaging system. Currently. I see.
00:33:21.428 - 00:34:03.370, Speaker A: We have like do you mean modules, maybe? Essentially, yeah. Cool. All right, so modules are essentially contracts that include some logic that install tables and systems in an existing world. So you can basically install a module on a world, and then what happens is the world is going to call that module contract, and then the module contract is going to call back to the world and register the systems and the tables that you want to or like that the module needs to install. There we have a couple of basically built in modules that you can have a look at as examples and I think we also might have a doc page and if not we're working on it and we'll have one shortly.
00:34:04.590 - 00:34:06.726, Speaker D: What's one example of like a module.
00:34:06.758 - 00:34:50.490, Speaker A: I should look into? For example, you can have a look at the core module of the world which actually implements some of the core world functionality in a module essentially. So basically we have a very minimal set of functions that are actually on the world contract. And then during the world deploy contract process we install this call module which then extends the functionality by a bunch more things. And yeah, if you're on discord I can point you to the specific links. We have the keys in table module which basically installs an on chain indexer for your tables by default. Keys with value is another one. Yeah, I can send some links later.
00:34:50.490 - 00:34:51.740, Speaker A: All right, thanks.
00:34:55.310 - 00:35:02.350, Speaker B: This was from earlier question are systems and namespace name spaces interchangeable?
00:35:03.330 - 00:35:29.000, Speaker A: Not quite. So the namespace is kind of a namespace wraps around a system in a sense. So a system is a contract that you deploy and you deploy the system into a namespace and you also deploy tables into a namespace and access control is based on namespaces. So namespaces are more of a concept than an actual contract or anything. So they're data inside of the world contract, if you will.
00:35:31.210 - 00:35:37.530, Speaker B: And this is a follow up to Guinea's question. Can systems interact with each other across worlds?
00:35:38.750 - 00:35:55.840, Speaker A: You can definitely call other worlds from your systems. So basically you would call systems always through the world contract as an entry point. And so if you want to call a system in another world, you would call that other world and then that other world would forward the call to its system.
00:36:05.120 - 00:36:34.756, Speaker B: Okay, filecoin mission sponsor filecoin sponsor. Filecoin should be just optimism. Zero x park lattice and NFT storage. I don't think Filecoin is listening sponsor for here. Okay, maybe this varies. Maybe just like one more question. This is the last question.
00:36:34.756 - 00:36:40.390, Speaker B: Is there a preference for hackathon whether we develop on Mud or Mud Two or is Mud Two not out yet?
00:36:40.920 - 00:37:06.680, Speaker A: Mud Two is out. You can install it with the add Canary flag. So if you do Pnpm create Mud at Canary then you get the latest version which is mat two, also on GitHub on main. That's all mat two. I would strongly recommend using Mud Two if you want to use Mud over Mud One because there's a bunch of improvements and not really many if anything like basically everything you can do in Mud One you can also do in mat two, but better and cheaper.
00:37:10.080 - 00:37:24.952, Speaker B: Awesome. Well, cheers. Thank you everybody for attending. Thank you Alvarius for presenting today. And if anybody has any other further questions, please feel free to reach out to them on their partner channel and discord. And, yeah, that'll be it. So thank you all for attending.
00:37:24.952 - 00:37:25.820, Speaker B: Cheers.
00:37:28.000 - 00:37:28.490, Speaker A: Thank you.
