00:00:00.570 - 00:00:34.600, Speaker A: Ah, before we get started, can I just I'd love to get a sense of who's in the room, and I'll try to tailor this towards the audience. So how many people here work in crypto? Okay, how many here who are engineers? How many here are working outside of crypto and are interested? Okay, who here is doing a startup? Okay, anybody else working at bigger companies or doing research?
00:00:36.810 - 00:00:38.854, Speaker B: Okay, good. All right. Good mix.
00:00:38.902 - 00:00:43.930, Speaker A: That's helpful. Last question. Who here is familiar with scale?
00:00:44.830 - 00:00:46.122, Speaker B: Okay, we got a few.
00:00:46.176 - 00:01:08.974, Speaker A: Got a few. So we're hacking. We get a lot of questions at the hackathons. We've been at ETH Denver, ETH Boston, ETH New York, ETH Paris, ETH Berlin. And now ETH Waterloo. So we've been at a lot of these. I think actually the number was wrong yesterday.
00:01:08.974 - 00:01:55.150, Speaker A: We've had 57 submissions this year. One of the common questions is who runs the nodes? How do you allocate nodes that work for the different scale, you know, for that scale chain, how is this decentralized? How does the system work? Which is relevant if you're using this in hacking at Hackathons, it's a little different than what it will be like in the real world when this launches early next year. So we have a target launch for early Q one next year where we're going to see scale operate in the real world. Hey, how's it going? All right, so we'll kick it off. If it gets too loud, we'll close the doors. So, one, I just want to say thank you. It's really nice to be here in Canada.
00:01:55.150 - 00:02:12.674, Speaker A: By the way, how many Canadians do we have? All right. Really awesome place. Amazingly friendly people. I've had a blast thus far. And by the way, last night, one, I'm a Poutine fan. I also like Shawarma. I had a schwarma poutine.
00:02:12.674 - 00:02:41.578, Speaker A: Amazing. All right. Only in Canada. Multicultural magic. So that was pretty amazing. I like to kick off the presentation and this architecture, come on. In this architecture discussion, talking about why do we do this? Why go to the length of decentralizing anything? There's so much more friction than just using something from the centralized world, right? Even though I have to say that's going down tremendously.
00:02:41.578 - 00:03:17.914, Speaker A: And as the value to friction gets lower and lower and the value gets higher and the friction gets lower, we're going to see decentralized applications absolutely disrupt their centralized counterparts, where middlemen are taking unfair proportions of profit, governance, data ownership, et cetera. So in the early 2000s, that's when I was getting started in my tech career. This was the mantra optimize add efficiencies. And Jeff Bezos is famous for saying this. I think the new saying is, your margin is our opportunity, and we're creating new business dynamics. So that's why we're doing this and that's why we have to decentralize things.
00:03:17.952 - 00:03:18.540, Speaker B: Okay.
00:03:18.990 - 00:03:46.206, Speaker A: There's actually a reason around it and meaning. So the timing is great. It's time to innovate. And I'm excited about it. So scale is building an elastic blockchain network. We're going to get into the tech architecture here in a second. But what we're trying to enable is oftentimes decentralized networks are not very efficient and they're not very effective or configured to the needs of the developer.
00:03:46.206 - 00:04:24.126, Speaker A: So if you want to deploy something on Amazon and you're just testing, it's very easy to deploy a small instance, right? It doesn't cost you a lot of money. And it's much harder to do that in a decentralized world, and especially if you want something that is your own backend. So Scale gives each developer their own backend and we try to do that in a way that's cost effective for the community. It's community owned, it's a decentralized network. And that's where we're implementing containers and we're not using Kubernetes. What we have is I'm going to go through this is really a decentralized Kubernetes in a way. And we'll talk about how the container orchestration works.
00:04:24.228 - 00:04:25.918, Speaker B: Okay, cool.
00:04:26.004 - 00:04:43.538, Speaker A: So 1000 nodes, we'll be able to run 8000 independent blockchains, one of the primary use case. And what we care about is really helping Ethereum scale and doing in a secure, cost effective, efficient, and high performant manner.
00:04:43.634 - 00:04:43.990, Speaker B: Okay?
00:04:44.060 - 00:05:23.390, Speaker A: So that's what we do. That's what we spend all our time doing. And ultimately we're trying to deliver functionality where you and your individual scale chain that you're going to use for your decentralized application can do 2000 transactions per second. If you're using the full getting the large version, you can run subsecond block times, you can execute full state smart contracts, you can leverage storage. And we'll get into that how you can do storage with the containerized model. You can actually run machine learning models in this as well. We're trying to bring architecture to your disposal in a size, cost, functionality, and privacy configurable manner.
00:05:23.550 - 00:05:24.162, Speaker B: Okay?
00:05:24.296 - 00:06:05.220, Speaker A: And let you use the Ethereum and the Ethereum ecosystem for your back end in conjunction with the public main net. All right, so everybody here I'm sure, is pretty familiar with the way blockchains work. The more nodes in the network, the more secure. The less nodes typically faster and less secure, right? There's just less nodes that need to carry the same state. It's less bloated, it costs less to run for the network. But you lose a lot when you have a smaller set of Validators. So the goal of elastic side chains or an elastic blockchain is to be able to randomly move nodes into a set of validators in a way that doesn't compromise security.
00:06:05.220 - 00:06:38.374, Speaker A: So you also have to have rotation. So if we're able to effectively pull nodes into a small group, that end up working for you in a way that's random, and also there's an incentive where every node has hundreds or hundreds of thousands or millions stake into it, and then that's a penalty if they go Byzantine. If two thirds are malicious, they can steal the money. So we need to make sure for someone to be able to attack each individual chain, they've got to have two thirds of the whole network to probabilistically be able to attack that side chain.
00:06:38.422 - 00:06:38.922, Speaker B: Okay?
00:06:39.056 - 00:07:19.882, Speaker A: And so what scale uses is BLS, threshold signatures and DKG in a combined manner to come up with random numbers. So each node is coming up with a random number. And then with threshold signatures each node signs off on their number and then everyone signs up on the total additive number amongst the group. And then we've layered BLS twice to use signatures to validate and get a random number. Instead of having to use a VDF or expensive hardware, we're able to do it in a lightweight, fast, secure manner and then use distributed key generation to then determine which nodes are working where, and then rotate them.
00:07:19.936 - 00:07:20.154, Speaker B: Okay?
00:07:20.192 - 00:07:45.986, Speaker A: So that's the functionality and that's the goal is so you get your chain and then if those two thirds, for them to go bad, someone would need to be able to have two thirds. So that when their nodes get on your chain, if they're going to have Byzantine attack, to have a two thirds attack, they're going to have to attack the broader group. It's pooled security.
00:07:46.088 - 00:07:46.546, Speaker B: Okay?
00:07:46.648 - 00:08:13.900, Speaker A: That's the architecture. So the other piece of this that is not well known is that scale is in a strange way an ethereum decentralized application. So scale. Token lives on the ethereum main net. The scale. Orchestration engine lives on the ethereum main net. There's an administration component that lives on the Ethereum Main Net.
00:08:13.900 - 00:09:40.840, Speaker A: And these things also the bounty and the rewards and the stake and the payment for the network all live in the Ethereum Main Net. And what happens is, and I'll get into the architecture in a second, but for all of these nodes to work and operate they all have to speak back to the main net. And when payout happens at the end of each month for bounty, for validators for the reward, guess what? That gets inflated through Ethereum and fees get staked into Ethereum by DApps and it gets pushed back from the Ethereum mainnet out to the validators. So it's designed so that the actual foundational security of the scale network is Ethereum, even though custody is happening on each chain in the scale network. So it's a hybrid model that we really like, because when we think of what needs to be incredibly secure, we want to make sure that if there's hundreds and hundreds of millions or billions of dollars staked for security, in the scale network that's in a very, very secure place and it grows the value of Ethereum and it becomes actually perhaps one of the most complex and value add set of smart contracts on the Ethereum main net that ends up running this extensible network. Does that make sense to everybody?
00:09:41.930 - 00:09:42.680, Speaker B: Okay.
00:09:43.770 - 00:10:21.154, Speaker A: Yeah. Big picture. Yeah, it's all in the details, which I have to say the code is almost entirely open now on GitHub and we've got a ton of documentation and pretty extensive white paper and we blog about this a lot if you want to go really deep. And by the way, we like going deep. This is like, I only have 20 more minutes, so it's like almost a teaser phase. We're going to get you information and make it really easy for you to come reach out and learn more and join the discord and get involved and contribute. Okay, so high level, that's great.
00:10:21.154 - 00:10:28.680, Speaker A: But then how does this actually come to fruition? So what we have, by the way, is that loud for anybody else?
00:10:29.610 - 00:10:30.600, Speaker B: It's. Okay.
00:10:35.770 - 00:10:36.614, Speaker A: I'm hearing it.
00:10:36.652 - 00:10:37.240, Speaker B: Okay.
00:10:38.970 - 00:11:01.422, Speaker A: So each node we leverage docker within each node. So if you run a scale node, this is what you're operating. And sorry if this is a little pixelated, but every node has a node core and basically you're giving resources that run the network. This node core is what's syncing back and forth and speaking to the smart contracts on the Ethereum main net.
00:11:01.476 - 00:11:02.078, Speaker B: Okay?
00:11:02.244 - 00:11:13.570, Speaker A: So it has a component for orchestration, it has a component for auditing, and it has a component for administration. And I'm going to get into in kind of a choppy whiteboard session how those things work.
00:11:13.640 - 00:11:14.306, Speaker B: Okay?
00:11:14.488 - 00:12:07.654, Speaker A: But it also has 128 virtual sub nodes. So each one of these and who here, I imagine most people are very familiar with docker containers. Okay, so each one of these is its own node in itself in a way, right? And if I want a small node and I'm just like playing around and actually a small chain can do 20 transactions per second, which is pretty good, right? If you look at that over the course of an hour or a day or a week, it's a lot of transactions. But I just can pay for a very small increment and it's very cost effective. And I'm getting maybe 16 single virtualized sub nodes as a developer. Or I may want a medium version or I may say, hey, I've got a lot of storage. I need 2000 transactions per second.
00:12:07.654 - 00:12:11.122, Speaker A: I'm going to pay a lot more money and get more resources of the network.
00:12:11.266 - 00:12:11.960, Speaker B: Okay?
00:12:12.330 - 00:13:03.138, Speaker A: So that's what's happening at the architectural level. And then what we're trying to do then the network then is able to allow you to deploy the right size at the right cost with privacy and different features all configurable to your needs. So you could configure for virtual machine, like we'll have eWASM support, eventually you can configure to privacy. So each node is outfitted with SGX so you can turn private transactions on and off because BLS threshold signatures are used to do the signing and the messaging between chains. And so in order to store the keys privately. Right now we live in a world where you need to use SGX. And so there's an SGX component on each node that ends up allowing you to also make transactions private or not private.
00:13:03.234 - 00:13:03.880, Speaker B: Okay?
00:13:05.210 - 00:13:30.846, Speaker A: So this is what we're trying to deploy for and really create this elastic model where you can use the Ethereum Main net and your own back end in this designed, cost effective, very efficient way. That's gasless. So gasless. What does that mean? So when you get your scale chain and I'm going to talk about this when we go through economics in a.
00:13:30.868 - 00:13:31.470, Speaker B: Minute.
00:13:34.870 - 00:14:12.350, Speaker A: Your scale chain will essentially not charge you your users per transaction. You're buying the chain or renting it in a SaaS model or a Pass model as like platform as a service for a six month or twelve month or two year increment. And then you pay and scale tokens, and then those tokens then each month are allocated back out to validators to pay for the service. Now you think, okay, there's no gas. Does that open up DDoS? We're going to have denial of service attacks. So what you actually do is you can integrate this almost fake gas.
00:14:14.210 - 00:14:14.622, Speaker B: That.
00:14:14.676 - 00:14:56.970, Speaker A: Gets given to the users where they're still leveraging a gas. And then if there's too many of these transactions at one given time, then obviously it has the same protective measure. You can also do other things like applying a proof of work measure, like a cloudflare. But the gas, what we don't want to do is create more friction and pain per use because when you penalize your users to use a system, they end up using it less, right? So instead you buy the asset for a period of time like you would with Amazon, and then you use it as much as you want. And if you use it too much, you just get throttled because you don't have enough space, right? So that's the payment model, which works very nicely in conjunction with the Ethereum Main net.
00:14:57.120 - 00:14:57.914, Speaker B: Okay?
00:14:58.112 - 00:15:04.350, Speaker A: And then you're only paying gas on the Ethereum Main net when transactions have to settle back on the main chain.
00:15:06.690 - 00:15:07.550, Speaker B: Settle.
00:15:08.370 - 00:15:52.960, Speaker A: So it's up to your design. So one thing and I'll get to this in a second, but you can have Web Three connect to both systems and you could just make it so that anytime the user exits, then settlement happens. You may, for different reasons, want to try to design it. So you settle every day or every ten minutes or every hour because you're effectively getting a lot more cost savings because there's a batch component and maybe it's more secure. So really I think we're going to see a lot of different permutations of how people design settlement. But one of the most common ways is just making a Web Three connector that when the user wants to leave the side chain, effectively settles, burns a cloned asset, moves it back.
00:15:54.610 - 00:15:55.360, Speaker B: Okay?
00:15:56.610 - 00:16:49.690, Speaker A: So because of this containerized model, right, we saw the space in the system. And what we've done is we've modified EVM to be a call and store function so that Ethereum Virtual machine will let you use storage in the scale chain so you can run a website, a game, a decentralized application. We actually built this incidentally because we thought it might be cool and valuable for people that have maybe a decentralized social network. Like, let's say you had a nudist social network and someone put a picture of a clothes person, you could automatically censor that clothed human. Okay, right. So there's different ways that groups who are self organizing for purposes may want to manage their group. We also thought, hey, it's valuable for fraud detection or price prediction.
00:16:49.690 - 00:17:13.430, Speaker A: And if Oracle's sending information in and it's pushing up against a pre trained model, it can actually deny the execution of the contract or the Escrow. So that also is a cool thing that you get with scale storage. It lets us use scale ML, which is machine learning capabilities brought within the smart contract.
00:17:13.930 - 00:17:15.366, Speaker B: Quick question, could you come to a.
00:17:15.388 - 00:17:30.854, Speaker C: Forum on that in any way? Because I know you mentioned TensorFlow and passing in models, and before it gets a transaction, try to get the quorum from a couple of people who maybe are going to validate that model and say like, okay, that's good, or you just trust one person.
00:17:30.992 - 00:18:32.606, Speaker A: Yeah, you know what? So the developer who's designing for this is going to do training outside and is going to bring that model in and then hopefully it's open source so people can look at it and say, all right, we know that the model is good, and here's the supporting data. Because you can't train within the smart contract. What you're doing, you're not actually doing machine learning. You're doing is taking a machine learning model and it's almost acting as it's pushing up against a data point against the model and saying, okay, actually, Jack has never been to Kazakhstan and doesn't usually spend $10,000 on this thing, right? Same thing my credit card company does. So you could take these, which to be honest, these models are fairly commodity. What's valuable is being able to integrate them within use cases at the right time to add more security. Or like I said, for decentralized networks that as a group want to all come together and say, hey, this is a cat website.
00:18:32.606 - 00:19:01.670, Speaker A: We don't want pictures of dogs on the website. That's another funny example. But there's a lot of examples where as these things grow and they become less, there's not a middleman, there's not a rent taker. It's a group. We do still want to self and collaboratively enforce and use decentralized governance to come up with sets of rules that are going to help our entities perform well. And that's a good use case for image recognition.
00:19:04.090 - 00:19:23.198, Speaker C: If you're renting this space to somebody, I guess the question is also, how do you know to trust who you'renting it from? So if they're running your models, my question is they could pretend they could give you different outputs. Like my form. Could you ask a couple of different rental things like, hey, can you all run this? And then that feed into something.
00:19:23.284 - 00:19:24.058, Speaker B: How do you trust?
00:19:24.164 - 00:19:59.738, Speaker A: Yeah, great question. So I'm going to do some whiteboarding. That's perfect question as a segue. So again, let's say I've got my nudist colony community. We want a scale chain, right? And what I do is I come over and I have to buy scale tokens. It's a very simple swap, a widget where I swap ETH and scale. And then what happens is I end up staking that in this over here, actually.
00:19:59.738 - 00:20:44.620, Speaker A: But it gets staked. And let's say I stake one year worth. And every month at the beginning of the month, one twelveTH is going to go from here into this pool to be ready to be distributed. That's one piece, let me get it different. Second piece is we talked about the space I'm renting. How do I make sure that the space I'm renting is like the people are good, they're not bad actors, they're not going to try to steal my money, they're not going to try to manipulate my algorithm, right? Yeah, exactly. So what we have to do is each node is staking in also to the ethereum main net.
00:20:44.620 - 00:21:16.062, Speaker A: And at the start it's going to be roughly 100,000 USD equivalent in scale. And over time that's going to hopefully go up but go down. It's a decentralized entity, right? So they're staking in. And so if they are bad and they are going to try to do bad things here, then they're going to lose their money. That's one. Two is as you pull, what happens is each node works. There's something that looks at availability here.
00:21:16.062 - 00:22:00.008, Speaker A: And then I mentioned the orchestration component. This in every single node speaks back to this and it says, okay, these ones are going to work for you this month. And then these ones end up running this chain, right? Or maybe not even an entire node, but a component of a node, right, are going to work for you. And then next month this one's not going to work for you. But then the system says that one will and the next month that one's added and this one's removed. And so they're constantly being shuffled. And they also are not just shuffling, but they're also monitoring each other.
00:22:00.008 - 00:22:40.400, Speaker A: So consistently throughout the day, each node is randomly being assigned 24 other nodes to look at. All right? And so they're all looking at each other. And what they're doing is they're producing a score and they create this it's like kind of enterprise in a geeky way. It's like the SLA algorithm. It's a service level agreement algorithm that looks across things for behavior. Are they doing the right things? But also performance? Is there the right uptime? How does latency look? There's a series of metrics that these all look for. And what they do is they produce a score.
00:22:40.400 - 00:23:09.710, Speaker A: And then algorithmically, we find a median and we remove outliers and these algorithms and the score for each node, you also get a score and it's all coming back here. And what happens is this node, if it has the right score, because every node is looking at other nodes and I'm also getting scored as a node, it's one or zero. It's binary. If I'm good, if I met the requirements, then I get to participate in the pool that month.
00:23:10.080 - 00:23:10.876, Speaker B: Okay?
00:23:11.058 - 00:24:06.640, Speaker A: And so what we as a community do is we need to look at the code. We need to keep improving the code. We need to say, hey, this is a potential new attack. We didn't think how these people here in this group could be affected negatively. And we keep maintaining the code so that as we monitor each other from a node perspective, we're able to continue to have good behavior across each node. And then every month, what happens is then both the fees, the fees from the different DApps that get paid in, we saw it come here. And then every month the Ethereum network is inflating more scale through a smart contract, creates more scale, and it goes here and then that's paid back out across the whole network.
00:24:06.640 - 00:24:46.316, Speaker A: And there's also delegators, right? There's people that work with our partners at Consensus and other places that get access to tokens and then they work with Validators to put tokens into the network to secure the network. So the goal is to have tens of thousands of actual holders that have incentive, motivation for the network to perform well, and hundreds or thousands of Validators that work for Delegators and have their own stake built in who also want the network to work well.
00:24:46.418 - 00:24:56.668, Speaker D: Okay, so oxygen seems a little bit essential, like to select the chunky nodes. That's not random.
00:24:56.844 - 00:25:53.424, Speaker A: It's random. So what happens is in this smart contract and in the orchestration engine, BLS threshold signatures, and this is all open source now and distributed key generation, we have a way where each node comes up with a random number. And what happens is five, and those five, they all come up with a random number and then each one signs off in the number and then it's all summed together. And then through cryptographic techniques, we realize that the total is 276. And then that's used in a way to then say this node and this node and this node are going to work for you over here using BLS. Using BLS, that's a highly simplistic version of how it works. Stan and Oleg and our team who have PhDs can go much deeper.
00:25:53.424 - 00:25:56.564, Speaker A: And that's maybe a good follow on topic, but great question.
00:25:56.762 - 00:26:07.028, Speaker D: So how you push the value back to the from the main chain, from Ethereum to the scale chain?
00:26:07.124 - 00:26:49.860, Speaker A: The value, you said? Yeah, the bounty pool, right. Like how frequent so once a month there's a delegation protocol that's built that's being finalized right now and will be open source soon. The delegation protocol takes into consideration all of this math and then it does some computation to say who is one and zero. And there's also a component for length of time. If you're staked in for three, six or twelve months, you actually get a greater percentage of this too. So people that say, I'll commit my money to the network because I want the network to be stronger and more sustainable, get a little more return.
00:26:50.010 - 00:26:50.612, Speaker B: Okay?
00:26:50.746 - 00:27:37.764, Speaker A: And so what happens is the smart contract and the node core speak, and then the math happens. And then through the delegation, it's actually paid back to each node and then it automatically goes to the wallets of individuals who are staking in the network. So one of our partners consents. We have ten Validators who are going to be supporting delegators that make it super easy, where no one has to do any math or management of the token. It's in protocol seamless. And hey, this is complicated stuff. We've got a team of 20 engineers, but we're excited to get more collaboration on this code and support because we like what it does for the Ethereum community.
00:27:37.764 - 00:27:47.336, Speaker A: And really, like I said, scale is, in a strange way, a DAP. It's like a kubernetes DAP, almost.
00:27:47.438 - 00:27:53.076, Speaker C: When you explain it, it really does look like when you whiteboard it, it completely looks like a DAP.
00:27:53.268 - 00:27:56.730, Speaker A: Yeah, right? Yeah. It just does different things.
00:27:57.980 - 00:28:15.360, Speaker C: So, quick question. I was a consultant, I have a corporate customer, and they have different needs based off of the server and apps they want. How customizable are the SLAs right now in terms of what I can request from the network, in terms of what I'm willing to risk? I mean, super great systems or I'm willing to be linked.
00:28:17.140 - 00:29:14.560, Speaker A: You can't now. Right now there's only one line for SLA, and it's not as tough as an enterprise SLA. Maybe you need that like 97% uptime instead of 99.99. Eventually, though, it's a really good question because we think that just like we saw with Cloud, you grow up the ladder. And I think eventually enterprises are obviously starting now, but I think they're going to become more open to open networks. And when they do, they need to have configuration options and so they can pay more for different types of Validators. They can even have hybrid models eventually, where maybe Consensus is going to run a node and say this is Consensus and IBM might run what says IBM? And if you pay here, you may pay more to have 50% authority and 50% open, which still keeps an open network, but it also prevents any entity from stealing from the network.
00:29:14.560 - 00:29:41.624, Speaker A: Or an enterprise could run 50% of their own nodes and 50% open, and they can't steal from their users. Their users can't steal from no one. Could steal from them. So these configuration options, christine, who runs Solutions Engineering, we're keeping a list of these and eventually we'll get those live. But V One is just going to be really about DAP support of who's building on Ethereum today from a decentralized perspective.
00:29:41.752 - 00:29:44.684, Speaker C: But the goal is to potentially yeah.
00:29:44.722 - 00:29:52.684, Speaker A: It was a really good question. Sorry. Okay. Yeah. Thank you.
00:29:52.722 - 00:29:53.020, Speaker B: Sorry.
00:29:53.090 - 00:29:57.610, Speaker A: Thanks for don't want to go over. We'll go outside. Thanks.
