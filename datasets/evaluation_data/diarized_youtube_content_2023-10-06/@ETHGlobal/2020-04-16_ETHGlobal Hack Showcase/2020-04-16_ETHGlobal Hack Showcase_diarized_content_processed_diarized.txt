00:00:00.570 - 00:00:01.120, Speaker A: You.
00:00:02.770 - 00:00:42.470, Speaker B: All right. Says we're live. If somebody would like to let's double check that. Bear with us for one moment. It there is a slight delay, so it might take a second. It yes. Looks like we're live.
00:00:42.470 - 00:01:21.632, Speaker B: All right. Exciting. We're all here. We've got a bunch of people from past ETH Global projects. I'm excited to hear from them. For anybody who's in the Zoom call, remember to just stay muted until the end when we are actually going to have time for questions. And yeah, if you want to put your video on, please do.
00:01:21.632 - 00:01:36.808, Speaker B: Then I can wave at you, you can wave back. It'll be great. All right, we'll start it. If anybody's on the Zoom call, let's do this. Double piece sign. I've almost got everybody. All right, we'll do that again later.
00:01:36.808 - 00:02:17.230, Speaker B: Cool. Awesome. So let's jump into this. Where are we going? Share screen. I'm going to present. All right, so we're on the first slide. Everybody can see that.
00:02:17.230 - 00:02:41.474, Speaker B: Thumbs up if you can. Awesome. So everybody in Zoom, and I see we've got some people who are stuck. They can't get in. Somebody can just double check the discord channel and drop them a link to the YouTube stream. That would be very helpful. Again, welcome, everybody who's in the Zoom and on the YouTube stream.
00:02:41.474 - 00:03:26.610, Speaker B: We're very happy that you joined us today. We are going to go through four projects, three from ETH London, UK, ZK Recovery, Lurch, and Blazar. We'll find out and set protocol, which is from the very first ETH Waterloo. So, again, super excited. Let's get to it. If you don't know, we are ETH Global. We've run a bunch of events over the past few years around the world, and this is kind of a retrospective on a few of them, digging into some of the winners, what they've done, what they experienced, and the things that they've learned.
00:03:26.610 - 00:03:58.300, Speaker B: However, right now, this is our first online event that this content is tied to. It's called hack money. You go to Hackathon Money, we'd love to have you apply. It's a 30 day virtual hackathon for anybody around the world. It's not just one specific city. So if you're interested in DFI, in Ethereum, in changing how money works, please go apply ASAP. We've already got a ton of people, but we'd love to have more.
00:03:58.300 - 00:04:19.940, Speaker B: It starts April 24, but you got to make sure to apply by April 19. Yeah, it's going to be really awesome. We're excited to do our first online event. So without further ado, I'm going to hand it over to Tom, Makoto, and Janice, and they're going to talk about their project. Take it away.
00:04:21.270 - 00:04:21.730, Speaker C: Great.
00:04:21.800 - 00:04:22.574, Speaker B: Thanks, Prince.
00:04:22.622 - 00:05:04.530, Speaker C: Well, hi, everyone. I'm Tom. I'm here with Makoto and Janice, and together we were involved in building our ZK social recovery hack East London. It was a really cool event. So what is ZK? Social recovery. So the basic idea was that increasingly you get these smart contract wallets where you can use them to store your funds, you can use them to do all sorts of stuff, but these smart contract wallets quite often have a private key associated with them or some secret bit of information that you need to access these wallets. And they have this feature, social recovery, which means that if you lose access to your wallet, you can, ahead of time have enabled these so called guardians who have special privilege to restore your account for you.
00:05:04.530 - 00:05:37.086, Speaker C: But this all occurs publicly at the moment. And so we wanted to make this private because we thought it was a potential security and privacy risk. So today, in these ten minutes, we're just going to chat through basically what it does, the tools we use, the advice that we've got for other hackers that are in our position in hack money, and basically how you can try these things out. So I think I'm going to hand over to Janice first and Janice is going to talk through basically what the hack is and what the whole concept of ZK social recovery is. So, Janice, if you want to take.
00:05:37.108 - 00:05:37.840, Speaker B: It away.
00:05:40.050 - 00:05:58.450, Speaker C: You should be on this call. You good, Janice. So Janice is stuck in the waiting room, I think. I think he's having zoom problems. Can you see someone in the waiting room, Trent? If not, I can just take over.
00:05:58.600 - 00:06:00.020, Speaker B: Let me double check.
00:06:03.110 - 00:06:08.534, Speaker D: We waiting, Janice, to get in. Maybe I can get a bit of context about how we form the team.
00:06:08.572 - 00:06:09.398, Speaker E: And all the stuff.
00:06:09.484 - 00:06:10.360, Speaker A: Yeah, go.
00:06:13.130 - 00:07:08.090, Speaker D: Three of us. So Yanis is from a company called Monolith, who provide wallet, and Tom is from Aztec, who's expert in all these privacy related technology. And I work on the ENS and kickback, so I tend to have work on the app, which is very user facing. So, of three of us, we both all based in London, and we often kind of meet in meetup called London Ethereum code up, which is like unlike normal Ethereum meetup, which is kind of mixed job, like a developer, non developer, investor. This is purely focused on the coding side. So we basically goes to a Monolith's office and we just have beer, pizza, and we just show everybody's code or just talk about code. So highly focused on that.
00:07:08.090 - 00:07:15.820, Speaker D: So prior to that, I think this problem is kind of related to the problem Janice had. Is Yannis in yet?
00:07:16.590 - 00:07:21.406, Speaker B: It might be, yeah. I just admitted everybody, so hopefully yeah.
00:07:21.588 - 00:08:12.222, Speaker D: So probably once Janice joined, probably he can talk about what problem they are. Yeah. But leading up to that, just for the prep, for the meetup, we actually had a small gathering, like, I think a week before the East London and where we brought a couple of people. So London, there's lots of Ethereum company, but also people whose I think, headquarter is not in London, but some developers in working. So we had a week before, we had a Rachel from Three Box. And we also had my colleague of a kickback called Ram who had a new tool, like no code, kind of UI generation tool. So we brought these two, and I think Aztec did a bit of showcase of their technology.
00:08:12.222 - 00:08:24.500, Speaker D: So we had a kind of good head start. Like we brought some local companies to talk about their tool set. So that's how we did live up ahead of the time.
00:08:24.950 - 00:08:33.300, Speaker C: Yeah. So, Janice, can you hear us right now? If not, we'll just crack on. Yeah, I think you can. All right, cool. All right. Janice, do you want to take it?
00:08:34.390 - 00:09:19.022, Speaker E: Yeah, yeah, sure. I mean, I will talk a bit about smart contract wallets because this is a starting point. And just as a meme, like, what's the use of programmable money if we can't have programmable wallets? So they're very useful and you can implement a bunch of things with those wallets. Like, you can set a daily spend limit in case your key gets compromised so the attacker cannot steal your funds in one transaction. You can set whitelisted addresses so you can bypass this limit. And when your key is compromised, you can send your funds to those addresses that you trust. You can have native integrations with other DApps, or you can have Metatransactions.
00:09:19.022 - 00:10:20.530, Speaker E: You can even pay with your tokens instead of ETH for gas. And this has also like, huge implications. Or actually you can set multiple transactions with one signature, and this has huge implications for UX. So I actually believe that smart contract wallets is the future, and one of the most important things that they provide is that you can have a recovery mechanism. So in order if you lose your key, at some point, you didn't back it up, you lost your seat phrase or whatever, you can have preset something like a mechanism that you can recover so you don't lose your funds. One of the ways you can do it is the so called social recovery, where you have a bunch of friends or other addresses. I mean, in theory there are friends or people you trust, but in reality, it can be your ledger or your cold storage.
00:10:20.530 - 00:11:06.182, Speaker E: And by setting them as your here we use the term guardian, which is introduced mainly by Argent, which is this form of social recovery. You can use them in the future to recover your wallet, but there is a catch for that. So once you recover, everybody knows your guardian address, your recovery address. And maybe this is your secret cold storage, as I said before. And you have funds, so nobody needs to know. And even if it's a friend of yours, nobody needs to know what kind of assets this address holds or what kind of transaction it has done in the past. Here, there should be a way.
00:11:06.182 - 00:11:21.002, Speaker E: We wanted to find a way to make this private so nobody can actually see who your actual guardian is. And so zero knowledge proves to the rescue. And I think Tom will talk about this now.
00:11:21.136 - 00:12:00.434, Speaker C: Yeah, exactly. So the whole idea is to keep the guardian private. So normally the smart contract wallets work by they store on chain these guardian addresses. So rather than doing that, we take a hash of the guardian address and store that on chain. Because as long as you believe in some basic cryptographic assumptions, you can't back out the input guardian to that hash on chain. And then if a candidate guardian comes along and wants to restore access to a user's wallet, then that candidate guardian has to submit a zero knowledge proof saying that they know the address that hashes to this thing stored on chain. And the idea is that only a valid guardian is going to know that they're acting as a guardian on behalf of another user.
00:12:00.434 - 00:12:36.082, Speaker C: And so only a valid guardian is going to be able to construct a correct zero knowledge proof that will pass. The whole idea of a zero knowledge proof is that you can prove to someone else that you know something secret without revealing there's something secret. So that's the gist of how it works. So if we move on, we're going to talk a bit about the tools and I think this is a good place for Makoto to talk about how we built our UI because there's various components to this. We have a smart contract wallet that has this serial knowledge functionality. We have like a UI to it which allows a user to easily interact with it. And Makoto was the man working on the UI and we use quite a nice innovative tool.
00:12:36.082 - 00:12:44.470, Speaker C: So if we move to the next slide and then we'll start going through how we actually put this together. Makoto, do you want to take away talk about Solui?
00:12:44.890 - 00:13:38.758, Speaker D: Yeah. So Solui is actually developed by one of my colleagues, the Kickback, but it's separate project, but it's one of the so called no code tool environment. I think there's already popular ones such as DAP Hero or maybe S Build. Is some of these for building the tool set for people without building UI without no coding. And I think the difference is for something like this, build or DAP Hero are mostly catered for someone who don't know programming. So it's like very visual, kind of, you know, you might want to drag and drop kind of stuff. Whereas this soil UI is more for the developers, especially smart contract developers who's very good at math and stuff, but they suck at design and all those stuff.
00:13:38.758 - 00:14:27.030, Speaker D: So quite often in the Hackerson they do amazing stuff, but Demo gets where he leaves the judges. People do everything in command line and the stuff. So this one basically takes JSON abi of the smart contract, and it's kind of extended, I think, abi, but everything is JSON. And you can kind of specify the input, what kind of call smart contract it calls and how you output, and everything is JSON file. And once you define it, it kind of automatically generates a UI for you. So it's a tool for kind of back end smart contract developers. If you don't find teammate who's good at front end or CSS, I highly recommend check out so UI.
00:14:27.030 - 00:14:51.930, Speaker D: I think I knew the basic how it was because of the meetup I did a week before, but I started using the tool from that day and I think it took about 30 minutes to get up to speed and then actually just finish most of coding in 1 hour. So the rest of the time was just trying to find logo also practice that's pretty much I did, yeah.
00:14:52.000 - 00:15:19.314, Speaker C: Cool. And then the other tools we use ocrates, the ZK Snark type stuff and then your standard suite like Truffle, Ganache, et cetera for developing smart contracts. So, just to wrap things up. So if we were going to do this again, some advice that we might have if we're going to take this on. So basically aim to do the simplest thing possible first goes without saying, try and build the sort of minimal building block from which you can build on and take things forward. It's only a hackathon, you don't have that much time. And then something else that's really cool and really important is the mentors.
00:15:19.314 - 00:15:53.620, Speaker C: That if Global has the mentors are so resourceful and have such a wide range of experience that it can really help to sort of supercharge what you're trying to do and it can really help build you up to speed quite quickly. As well as other hackers. So if we just jump to the next slide, the final slide, so you can go try out what we built, you can just go to our GitHub and clone and play around and you can experience all UI and go through what the UI looks like and play around with. So that's ZK social recovery. Me, Janice and Makoto. So, yeah, thank you very much. Feel free to reach out.
00:15:54.230 - 00:17:03.618, Speaker D: Sorry. One thing about one piece of advice, because I often do the mentoring on the Hackerson. The one thing I definitely ask everybody to do is in the very beginning, before you start coding, you go to the channel and they ask kind of talk about the idea to the kind of mentors first, because they give you the perspective from third party whether the idea is going to actually fit in the context of hackathon. Quite often when I get judged especially I don't know how you guys have a bounties or something as a bounty provider, we have some sort of expectation and someone come up with completely labor hack if they come to us before our very beginning and talk about the idea. We know that you guys have become under my radar, so it's a lot easier to help. So I definitely recommend that you start engaging not towards a couple of days before in a weekend Hackerson. It happened in the last 30 minutes, but in these 30 days, definitely I recommend people to start engaging in the very beginning just to validate their idea with mentors.
00:17:03.714 - 00:17:04.774, Speaker F: That's it.
00:17:04.972 - 00:17:05.442, Speaker G: Awesome.
00:17:05.516 - 00:17:35.700, Speaker B: Thank you so much. That was really good info. All right, we're ready to move on to the next project. There'll be time at the end for additional questions or context from the teams. All right, so before we move to the next one, I'm sorry, the YouTube stream can't see this, I don't think. But let's do cover one eye, everybody, so the speakers can see you're paying attention. Awesome.
00:17:35.700 - 00:17:40.610, Speaker B: All right, here we go. Next is lurch. Take it away, Richard.
00:17:41.590 - 00:17:42.946, Speaker A: Hello? Can you hear me?
00:17:43.048 - 00:17:43.940, Speaker B: You can?
00:17:44.810 - 00:18:28.898, Speaker A: Excellent. So, yes, I wasn't really planning to give a whole ten minute spiel. Now I'm more of a question to answer type person. But basically I'll give an overview of what Lurch was. It was from the East London hackathon that happened fairly recently and basically it's deval for Ethereum. You can imagine it allows you to run Ethereum contracts, but on Ethereum, which in of itself sounds kind of useless, but it lets you do cool things because if you are running the Ethereum contract yourself inside this type of environment you can do really weird things like hijack addresses or it's very hard to explain. So again, it's more of a Q and A type style thing I think is better.
00:18:28.898 - 00:19:09.466, Speaker A: But I will give you have I covered everything on this slide? Yeah. So, yeah, there we go. I'll just give a quick use case of something I implemented afterwards which was Rooted. So this is just a short demo to demonstrate the types of things you can do. But it is basically if you're familiar with Ethereum, when you deploy a contract, you have some bytecode and when this bytecode runs, the result will be your contract was deployed to the network. So Rooted lets you deploy different contracts to the same address. So you can deploy some contract, use it for a while, decide you don't like it anymore, have it self destruct.
00:19:09.466 - 00:19:47.530, Speaker A: And if you use Rooted, then it deploys brand new bytecode at the exact same address which may or may not be something you want to do. Depends on the situation. It's more of a proof of concept. Just a weird interesting thing you can do now that we have something like Eval without Lurch or something similar to it, you simply can't do this. There's other ways to accomplish things that are similar to it. But the nice thing with Rooted is you literally require not zero lines of code need to change in your existing contract. You can just take somebody else's transaction and run it through Lurch as well to deploy their contract.
00:19:47.530 - 00:20:08.930, Speaker A: Yes. So that's kind of, in a nutshell, the types of things you do. Oh, sorry, go back one more second. Yeah, I only had one slide. I didn't know how much, I just followed the previous person, added one slide. So I thought, well, I'll add one slide. So basically, some other ideas that you could do with this.
00:20:08.930 - 00:20:47.310, Speaker A: You could execute arbitrate. You can imagine, for example, you have an exchange and you want to let people give bytecodes to actually run on your exchange. Maybe you want to allow them to purchase X units of die and then they want to purchase the square root of X of S die or PSI or whatever, that sort of crazy stuff. You can actually just let them run their own code inside your contract. Kind of like a delegate call. But you can block things that are state changing, for example. So you could actually have a safe way to let people eval inside your contract.
00:20:47.310 - 00:21:46.050, Speaker A: Otherwise you could do cool things like store data somewhere else. Yeah, it's kind of a weird idea. Hopefully there'll be more questions that will help refine possible uses for this sort of thing. And also there's some cool ideas around debugging I've been kind of playing with. You can imagine I can actually run. If you have a transaction that's failing on the network, you could actually execute that on the main net with hooks in place that would do things like log whenever you're storing something so that even a failed transaction still produces a result that doesn't work, but at least tells you what went wrong, that sort of idea. So that's really all in terms of like, great, there's a bunch of questions over here as well that were kind of like guidance for what we should cover, that's basic concept.
00:21:46.050 - 00:22:19.066, Speaker A: So one reason why I wanted this is so this is entirely written in assembly. I'd recently, prior to this, written an assembler for EVM. But I wanted to kind of like stress test it. So that was kind of another reason to write a very assembly heavy project. And basically in the first 12 hours of the hackathon, this found so many bugs. I spent the first half of the hackathon just fixing the assembler so that I could actually compile lurch. So it was a really good test case for that.
00:22:19.066 - 00:22:42.920, Speaker A: It did that part of the job very well. And that's all part of Ether is JS, so feel free to just use that now. I think all the kinks are ironed out because this was a fairly comprehensive project for the assembly EVM. Sorry, just reading through this. So, yeah, blockers and pitfalls. That was kind of it.
00:22:44.490 - 00:22:57.980, Speaker B: One thing you could mention is so you're working as a solo, going on your own, you don't have a teammate. So what was that experience like? Do you typically work on your own or was it just for this event?
00:22:59.310 - 00:23:34.094, Speaker A: So this is the first event I worked on by myself for quite a while. My partner and I usually go to these things, but she's teaching blockchain in Toronto so she couldn't come out. This was definitely I would say it is definitely nice having that other person as long as you get along well with them. I think that's an important thing as well, having teammates you get along with. I would usually probably try picking the teammates before you pick the project or that sort of thing. I know it's not always possible once you get there, especially if you're new to this space or whatever. So I mean, I'm not discouraging that but if you know people it's kind of like roommates.
00:23:34.094 - 00:24:19.278, Speaker A: You want to pick your roommates before you get the house rather than move into a place and get your roommates. It's definitely nice having that. But even if you have complete strangers for partners, it still gives you that morale boost or that sense of community or when it's like 03:00 A.m and you're tired and nothing's working, the misery loves company thing really kicks in, and you can both just kind of wallow together until someone rubber ducks it and like, oh, that's the problem. We forgot a semicolon, or whatever, and then the world goes off to the races again. And also just having a second set of eyes. The reason why I say semicolon in assembly the semicolon is a comment in JavaScript, the semicolon just ends the current statement.
00:24:19.278 - 00:24:57.198, Speaker A: So trying to semicolon out JavaScript code doesn't do what you expect it to do? Yes, if you're expecting it to be a comment. So it's just having that second set of eyes to tell you you're being an idiot. Because again, it is now it's 05:00 A.m. And you're really tired and things aren't working any better than they were 2 hours ago. Or they're working no better, but different, working differently. So yes, I would prefer having people yes, that's a good point. Otherwise that's I think basically what I have.
00:24:57.198 - 00:25:04.386, Speaker A: If there's any other questiony, things you have or otherwise we can just move on to the next person.
00:25:04.568 - 00:25:16.630, Speaker B: Looks like Will has a question in the comment or in the chat. I'll just read it to you. Oh sure. Can you say any more about contracts of arbitrary size? It's an issue I've been running into recently.
00:25:17.850 - 00:25:18.310, Speaker H: Sure.
00:25:18.380 - 00:26:38.218, Speaker A: So one thing you could do with Lurch I mean, it's probably not the most efficient way to do it, but if you're familiar so just actually, the weekend before I did this project, somebody was talking about something called the diamond pattern which I believe is the idea where you have a contract which is going to have a list of vetted contracts and when you call into that root contract it's going to dispatch out to using a call delegate to one of those other contracts which represents some of the functionality. I think it can go a lot further as well, but with something like Lurch, for example, you could actually just have one simple central contract which has Lurch built into it, and you can actually give it the operations you want it to execute. You can just give it like, for example, you can imagine at the high level, if you're familiar with JavaScript, imagine you have some function that's basically like a REPL. You're going to give it some JavaScript and it's just going to execute it blindly. Obviously, this isn't exactly what you want, but what you can imagine is build that same contract. But this time, put a merkel root hash of all the possible codes you want to be allowed to run. And then when you receive a piece of code to evaluate, you verify it belongs to that root hash.
00:26:38.218 - 00:27:28.400, Speaker A: And if it does, then you can execute it blindly because it means that the author signed off on it. I mean, it's a little bit complicated and not the ideal way to do things, probably, but it's just an example of the type of thing you could do once you have eval. I can literally just give you some code and you can run it. As long as you have some way to vet that that code is something that the author intended to be executable, then it's fine. And you can also imagine really weird things where the code you submit to it is vetted. It's proved that it belongs to the merkel route, but then as a result of that code executing, it alters the merkel route. So you could have something, for example, that can only run once, or that can add new function, new functions to the merkel route, that sort of thing.
00:27:28.400 - 00:28:01.900, Speaker A: I don't know if that really answered your question, but you should also take a look at the diamond pattern because it's a similar type of idea. It's just far more gas efficient because oh, that's one thing I should mention. With Lurch, it costs a lot more gas because you're running a virtualized environment. It has to execute the EVM, it has to manage all the memory, it has to manage the PC. So it costs, I think well, my deployments I've been seeing, it costs about twice as much to deploy, so.
00:28:04.110 - 00:28:15.550, Speaker B: Awesome. Yeah. I'd encourage you guys to dig into that in the discord. I'm sure there could be a lot more color given. All right. Thank you, Richard.
00:28:16.290 - 00:28:16.702, Speaker H: Thanks.
00:28:16.756 - 00:28:43.560, Speaker B: Before we move on, here's our second check in. I want you to hold up an object that's within arm's reach that's not your cell phone. I have a cat. I'm going to hold up my cat, see what else other people hold up. Makoto has a water bottle, a pen, another water bottle. The cat's not entertained. Awesome.
00:28:43.560 - 00:28:55.180, Speaker B: Thank you for playing along. Sorry, YouTube stream. We'll make sure to include this next time so you can actually see it. All right, Blazer, are you ready?
00:28:56.050 - 00:28:56.846, Speaker C: Yes.
00:28:57.028 - 00:28:58.080, Speaker B: Take it away.
00:28:59.170 - 00:30:02.498, Speaker I: All right. So I'm, Raphael Blazar, was actually called Dodge at East London. And I think that the way that we presented it was a time warping machine where you can get your future money right now, but what it actually is, is fixed rate, fixed term lending protocol. So a bit like Compound or RV, which was sponsoring the event, except that instead of having to wait for your interest to accrue over time, you can deposit your money and get your interest upfront. And the trade off being that you have to lock up your money for a certain amount of time. So it's a soft block which you can play around with. And we actually built this in the demo, but basically that's what we built.
00:30:02.498 - 00:30:52.274, Speaker I: And the idea is that obviously right now, in DeFi, variable rate lending is king if you look at Compound or avi. But there is that gap that's there with fixed rate, fixed term lending, which obviously in the centralized financial world is a really big plank of what people do. So there's always that constant question, do I take out a fixed rate mortgage or a variable rate mortgage, et cetera. And you don't really have that in DeFi. So that's what we wanted to build, something that as a team, we thought about because we actually work on another project together. So this was a side project, but has now turned into a full blown project. And so we knew each other quite well.
00:30:52.274 - 00:31:27.334, Speaker I: Aretti and Kuba are on the call as well. Kuba is going to speak a little bit later as well about how he built it. So we talked about it for a while and then when we arrived at Akathon, we had a pretty good idea of what we needed to do. The other cool thing about dodge, which is now called Blazar, is that when you deposit your money, you lock it up for a specific amount of time. You also receive what we call future tokens, f tokens. So FDAI or F ETH. And those tokens are fungible and tradable.
00:31:27.334 - 00:32:29.918, Speaker I: So if Alice puts down 100 die, deposits 100 die into blazer, she'll get her interest upfront and she'll get a hundred F die, which she can redeem for actual die at maturity, and that she can transmit to Bob or Charlie or whatever. That's the basic idea, maybe, if you want to move on. So, yeah, this is what the interface looked like, where you can just slide the amount that you want to deposit for how long, and it calculates automatically how much interest it will give you. And actually, we built it on Coven and it connected to the RV testnet. So RV, for people who don't know what that is, is a variable rate pool. So deposit and borrow and you get your interest to the cruise. And actually, the way that we built the solution for the hackathon is that whenever you deposited your money, we actually just funneled that into RV.
00:32:29.918 - 00:33:31.242, Speaker I: And RV is the one that was generating. The interest. And then when you got your F tokens, you redeemed them. You basically had to hope that there was enough interest that had been generated on RV for you to get your principal back. Now, what we're doing with Blazar is actually building that out into a much more robust solution, whether the protocol can guarantee that you'll get your principle of your deposit back exactly at the maturity date, which is actually a hard problem to solve. But for the hackathon, it was good enough to develop it that way and demonstrate the proof of concept. So now, if you're online, what would be cool is to explain how you built it, because actually Kubai was the only developer on the team and he pretty much built the whole thing while Aretti was designing the interface and I was basically shit posting.
00:33:31.326 - 00:33:38.470, Speaker B: There is one question real quick, just a clarification on what you mean exactly by interest paid upfront.
00:33:39.050 - 00:34:20.340, Speaker I: Yeah. So if you put in, let's say, 100 die, then you'll get and the interest rate is 5%, you'll get five die up front, plus 100 FDAI. So you can spend your five die any way you want. And your FDAI, you can also actually transfer those, but you can redeem them for actual die from the liquidity pool at the maturity that you chose. So if you look at the slider right there, it says you're locking it up for five months, six months, seven months, whatever. In seven months time, you'll be able to send your FDAI to Blazor and get 100 die out.
00:34:23.830 - 00:35:09.410, Speaker G: Yeah. So I'm here. I was part of the Blazor team and actually my first hackathon when I was playing solo as a developer. And I totally agree with Richard. Having a second pair of eyes is super helpful whenever you get stuck in your code. So totally recommend that to have a teammate, team, developer and what else? I think the most important stuff for me was to pace myself and narrow down the list of features in order to have a working solution aim for the Sunday morning. And obviously any integration is costly.
00:35:09.410 - 00:36:02.114, Speaker G: And integrating with stuff that you cannot run in a kind of a local sandbox like Avi protocol, when we needed to integrate with live deployment, to actually being able to get the real interest rate to change the state of the protocol, et cetera, was quite painful. And a tool like Tenderly, which gives you live debugging of transactions, I strongly recommend it to any dev. Apart from that, it was a pretty typical stack with Truffle, with Ganas testing, a lot of testing, especially around the compounding interest, all of the calculation and view for the front end, which is super efficient, as I also recommend that.
00:36:02.312 - 00:36:04.094, Speaker I: Actually you can move on to the next slide.
00:36:04.142 - 00:36:04.770, Speaker G: Trent.
00:36:09.280 - 00:36:15.330, Speaker I: And we'll come back. Kuba, actually, can you move to the next slide again?
00:36:19.760 - 00:36:21.212, Speaker B: This slide or the previous one?
00:36:21.266 - 00:36:27.330, Speaker I: No, this one is good. So, Kuba, I don't know if you missed anything there in terms of lessons learned on the development side.
00:36:28.340 - 00:36:30.210, Speaker G: No, I think I'm down on it.
00:36:30.900 - 00:37:29.360, Speaker I: All right. Generally when we do hackathons, because we've done quite a few in the past, I'm always the guy, because I don't have to develop it. I'm always the guy who's trying to get Kubao and the other developers to just win as many bounties as possible and to integrate as much as possible, which invariably on Sunday morning at 04:00 a.m., really makes them hate me because they don't want to do any more integrations and they're trying to just make the stuff that they've already built just work. And I've been on the receiving end of a lot of that. Definitely what I would say in terms of lessons learned is that the mentors, especially in East London, were really helpful. And that was mainly to figure out how to think about what we were developing and also figure out where that gap in the market is and how we're going to do the pitch and just road test that pitch.
00:37:29.360 - 00:38:11.488, Speaker I: Because if I do have one word of advice, I mean, Eat Global says, don't worry about the pitch, just do the working demo. I'm not a big believer of that. I think that the pitch is absolutely key and it's happened to us before where we've built something that we think is amazing. Right. And then you just arrive in the judging room on Sunday at eleven and for whatever reason the thing works, you just can't explain it. It's not crisp, you've only got three minutes, or whatever it is to present it. So actually, road testing that pitch and doing it with as many people and getting input on that as you're doing it, you don't necessarily need to do a presentation, but we did, we had a lot of memes in ours to try to keep it light and funny.
00:38:11.488 - 00:38:55.436, Speaker I: Road testing the pitch is actually quite good and if you just come back one slide. Trent no, the one before. The one after that. Yeah. So just really high level why we think we won. Definitely having a powerful story, whether you're doing a hackathon or you're setting up a company or whatever, having a story that makes sense and that resolves an actual problem is generally helpful because people get what you're trying to build. Having the working demo is obviously key and what we added on top, like the little sprinkle of magic, was the killer memes that we developed.
00:38:55.436 - 00:39:06.790, Speaker I: And again, I say that because that was literally my job. So I would say it, but yeah, no, everything helps basically to try to tie the whole hack together.
00:39:09.780 - 00:39:27.292, Speaker B: Awesome. Is that it? Any questions for Dosh Blazer? All right, final attention challenge.
00:39:27.456 - 00:39:28.916, Speaker D: There is a question in the chat.
00:39:28.948 - 00:39:40.900, Speaker B: Trent oh, sure. I think that was oh. So what is the minimum limit? I don't know if you can see that raphael, it might be related.
00:39:41.060 - 00:39:49.004, Speaker I: What is the minimum limit of so for that you have to separate out what we did at the hackathon and what we're doing now.
00:39:49.042 - 00:39:49.292, Speaker B: Right.
00:39:49.346 - 00:40:39.020, Speaker I: Actually the limit or the term limit of these deposits working on that's actually going to be defined by a Dow and it's going to be algorithmically set the spot rate. The spot fixed rate is going to be set algorithmically according to various parameters. But at the hackathon it was unlimited. Basically it was a toy hack and more of a proof of concept where basically at the maturity date that you've set, putting in your F tokens, sending them back will maybe give you the exact principle or it may not, but it was good enough to demonstrate how this would work for a hackathon and captured people's imagination.
00:40:39.600 - 00:40:44.050, Speaker B: Yeah. saitia, if you just want to unmute yourself, go ahead, ask a question.
00:40:44.580 - 00:41:03.076, Speaker F: Yeah. Hi. Thank you. So my question was actually compound and all these protocols will actually give you interest based upon the block mining. Okay. So basically every 15 seconds you will be accuring the interest. So what you did was that was really amazing.
00:41:03.076 - 00:41:22.620, Speaker F: Okay. You will be getting the interest upfront. And what I was really excited about is based upon what limits you have given upfront and what is the time interval that I should lock up my funds into the protocol.
00:41:23.600 - 00:42:21.928, Speaker I: Yeah. So that's why I'm saying is basically the setting of the maturity date or how long you lock up your money is arbitrary. You can choose it within a minimum and maximum that's set by the Dow, which is what is going to happen. But as I said, there's a difference between the full blown solution, which we're working on now, and the hack where you can get away with just not having to solve that problem as long as then because that's the general question that we would get is we got a lot of questions about the minimum lockup period. How do you manage things if the variable rate switches on you, flips on you and actually generates less than what you promised to the depositor and everything. So there are always going to be limitations that you cannot address during the hack. And it's important to also which is why road testing the pitch is important because you get all of those hard questions and really all you need to do during your pitch is to have plausible answers to that.
00:42:21.928 - 00:42:30.160, Speaker I: That will put everybody's mind at ease and that will help a lot to help you get considered to be a finalist.
00:42:32.820 - 00:42:56.970, Speaker B: Thank you. Yeah. And so Ave is actually one of the sponsors for hack money. So I would encourage you guys to continue this conversation. If you have any more questions, just jump into the discord. We have Stani there, we have a bunch of team members, I'm sure they'd love to hear these questions and answer them as well. Josh has a question, but we'll do that at the end with everybody together.
00:42:56.970 - 00:43:22.384, Speaker B: All right, final attention check. How about everybody make a mustache with their no? Jacob is cheating. OK, good. There we go. Cool. Full participation on that one. Without further ado oops, I went forward far.
00:43:22.384 - 00:43:45.930, Speaker B: We're moving on to Set, which was one of the projects at the very first ETH Global event, ETH Waterloo in 2017. You're probably familiar with it. It's one of the most popular D Five projects today, and it's evolved quite a bit since the hackathon project. So, Felix, take it away and tell us what you've done since then.
00:43:46.860 - 00:44:31.610, Speaker H: Sounds good. For those of you who don't know me, my name is Felix, and I am the co founder and CEO of Set. You may know us from some of our products, like Token sets, which is one of the easiest ways to implement some sort of asset management strategy on your crypto. But I'm super excited to be here today. It's a bit of an irony that I'm here because I've never been a finalist in the E Global Hackathon and I've never won an Hackathon, let alone win any kind of, like, sponsor prizes as well. So I don't know if I deserve to be here and talk to everybody.
00:44:32.780 - 00:44:34.730, Speaker B: You're a winner to us. Okay.
00:44:37.900 - 00:45:32.412, Speaker H: I suppose that's what matters. And the spirit of this is that we're kind of hacking and built, and this is a great venue for experimenting and building new technologies and pushing kind of the boundaries of the future rather than just kind of trying to win money or fame or glory. All I wanted to do kind of this session is just kind of share the story of Set in particular with how it kind of evolved during ETH Waterloo and share the story of some of my experiences. And that's it. So to begin, the context of ETH Waterloo was it really was the height of the ICO boom. This is when crypto prices were going up. You had a new ICO project that was coming out every day, maybe even every hour.
00:45:32.412 - 00:46:26.796, Speaker H: And I had been most fascinated with the stuff around kind of finance on ethereum. So I was fascinated by zero x kyber AirSwap. Those were the projects that really captivated my mind. And really what kind of blew my mind was when I read Antonio Giuliano's dYdX White paper and he demonstrated that you can build sophisticated financial instruments using smart contracts. So in addition to that, I just completed Consensus Academy, which was Consensus's kind of course, where they fast tracked everyone to being a proficient, solidity developer. It was a program where they invited. There was 1500 people that applied, 150 people got in.
00:46:26.796 - 00:47:09.640, Speaker H: And the carrot on the stick to get you to finish was that they would fly you out to Dubai if you were one of the top kind of 75 kind of students in that class. And in addition to that, I actually left my job in July of 2017 to focus on crypto. I was reading white papers and really trying to make sure I understood all the different concepts. I was also investing in different various projects at the time too. And I was super excited to attend ETH Waterloo, which was the first Ethereum hackathon. And it was awesome because it was the first one. Many of the people I looked up to were sponsors or judges.
00:47:09.640 - 00:48:00.100, Speaker H: It was free and many things were already taken care of. For example, when you flew out there, they had a bus ready for you to drive you to the venue and everyone was buzzing with excitement. So that was kind of the context in which I entered ithawarlu. And I had originally planned to join a team that was going to work on a TypeScript version of Web Three. It was something that didn't really exist before and I was excited to do that. But on the plane ride over to ETH Waterloo, I was thinking about what was missing in the space and being very excited about finance related stuff on Ethereum. I realized that no one was really building a fully decentralized index fund product and I thought about how to implement that on the plane.
00:48:00.100 - 00:48:56.040, Speaker H: And by the time I landed, I was so excited by this idea that when I got to Waterloo I had to tell my team that I was going to leave them to work on essentially what ended up becoming set on my own. So they were obviously very disappointed that I left the team. And I was a bit nervous because I was going to work and hack on my own. But it ended up being one of the most kind of amazing experiences I've had ever. And it started kind of with a specification on my own. I didn't have any teammates and I was doing something very different because instead of building kind of on top of using some existing API or SDK, I was writing Solidity code and writing unit tests when most other hackers were just trying to integrate various APIs or just get something to work without testing. So I started kind of implementing solidity.
00:48:56.040 - 00:50:00.428, Speaker H: I was testing it using Truffle and kind of the Mocha, the testing framework. There certainly were challenges along the way and I was getting stuck when trying to use Open Zeppelin's, kind of like standard libraries. But when I got into any challenge, it just happened that there was always kind of somebody there to help me. And when I got stuck with the Open Zeppelin library, it turned out Manuel Araz from Open Zeppelin was there and I was able to just kind of go and talk to him and get some of my and he actually spent an hour to help me debug kind of why my unit test was failing at the time. So, as you can see, there's extreme amounts of technical talent available and mentorship available kind of at these hackathons, which was really great. In addition, since I wasn't working with the team, I ended up just hanging out at the sponsor table and I was just hacking on my own. But I was just sitting with a few folks that were friendly and were helping to answer some of my questions and it turned out I was sitting right next to I was at the MakerDAO table.
00:50:00.428 - 00:50:49.680, Speaker H: I didn't really know what MakerDAO was at the time. I was like, why would you create something called the Dai and why would you want you know, Nick was there and he now is the head of kind of backend services at Maker and he has been super helpful. I was sitting kind of with Sakvir who was at the polymath table and he was helpful too. And I kind of worked through the night and these guys have been kind of sitting I got to know these folks well. And basically at 03:00 a.m When I'm really tired, I finally finished all the unit tests and the smart contract code and I realized that I did not have a front end. So I ended up kind of like partnering with Suck Beer who was working on essentially a Zero X exchange and I just tacked on a page on top of that.
00:50:49.680 - 00:51:48.416, Speaker H: So as you can see on the right here, that's what the UI looks like and unsurprisingly, that's why I did not win any prizes because it looks terrible and doesn't seem like it works that well and most prizes are given out to things that seem to look good. So I finished the hackathon and we presented this when judging happened. It was really cool because I got to present in front of Joe Lubin and a consensus. I presented in front of Will Warren at Zero X and Linda Shea and a number of other really great kind of folks that had looked up to the industry as well. And at the end of the day, I didn't make it to finalists or anything like that, but I had a really kind of positive experience. Zero X ended up giving me a consolidation prize like a few Zero X tokens just for hacking on them. But that was kind of my experience with kind of set, at least at ETH Barloop.
00:51:48.416 - 00:52:38.020, Speaker H: And if you go to the next slide, this is something that was just the beginning. What I built at the hackathon was just a proof of concept, but it was something that I kept working on. I think partly is because I was crazy, but that's how most, I guess, big projects start is that there isn't necessarily a rational reason for moving forward, but you do it because you're passionate about it and you want to see things through. So what kept me going was a few things. One is after East Waterloo had an opportunity to the carrot on the stick for Consensus Academy was they would fly you out to Dubai and pay for your whole trip. The hotel was free and the flight was free. I'd never been to Dubai before and everybody who attended was super excited.
00:52:38.020 - 00:53:27.452, Speaker H: Consensus at the time had partnered with the government of So. Like, we actually participated in the hackathon over there where we worked in essentially the White House of Dubai. So that was really cool. And we got to see the Emirates. And at the end of the event, people could share their own ideas of what they've been working on outside of the hackathon. And I got the opportunity to present Set to kind of a bunch of people at Consensus, including Joe Lubin and Jeremy Miller, and they got so excited by what I was doing that they actually offered me an entrepreneur in residence position at Consensus to keep working on Set. I was very flattered, but ended up declining that a few kind of days later, DevCon Three happened and I attended.
00:53:27.452 - 00:54:02.104, Speaker H: And it was also a very magical event as many people had a lot of money and the parties were really great. But really for me, I got to talk to a lot of other developers and people in the space and they validated the excitement that I had. So I kept moving forward. And then after that, I started getting all of my friends involved. I would tell my friends what I'm working on and I would add them onto GitHub and Slack and we'd be working on Set nights and weekends. And during the day we started working on a user interface. We kept pushing on the smart contracts.
00:54:02.104 - 00:54:44.536, Speaker H: I started kind of putting together the white paper, and by November of 2017, a week and a half after DevCon, we kind of announced what Set was and we put a proper medium post. We had the whole kind of white paper put together. We even had a private kind of user interface. And that was really what was the beginning of what Set was. And that kind of resulted in us pushing and raising some venture capital in early 2018. And we've just been building out kind of the product and the team since then. And this has only started, I think, in part because of Ikwadulu, which was really the genesis of the initial proof of concept.
00:54:44.536 - 00:55:06.064, Speaker H: But since then, as you can see, there's been a lot more development and progress and we're proud to keep pushing forward and to be able to kind of represent what can come out of a hackathon. So, yeah, that's kind of it on my end. Hopefully that wasn't too much of a no, that's perfect.
00:55:06.182 - 00:55:59.006, Speaker B: It's a fascinating story and I think it's great to see new projects coming out of something like East London, UK, and then a project like yours, which is years old now, and you've built an entire team around it and you've really pushed forward that concept. It's great to see all these different things. So now we're going to move to if anybody doesn't have any questions for Felix. All right, so the first open discussion question is what would the teams have done differently if they had been doing an event like hack money versus a three day work every hour type of event? That the ETH. Global events are kind of like where you don't have as much time. Why don't we have the ZK recovery.
00:55:59.038 - 00:56:39.806, Speaker C: Team start slept a lot know, I don't know what we would have done differently. So the ZK recovery is just like proof of concept at the moment. It's definitely not a complete thing. There are limitations to it on the Dev post. So we would definitely have taken the time to definitely get it further out of just like the proof of concept sure of this thing that you could potentially do and get it to a more finished sort of DAP. So that'd be quite cool because especially with the four week period, I think it is that's plenty of time to sort of put a polished thing together. Janice Picoto, what do you think we would have done differently if we'd had more time?
00:56:39.988 - 00:57:39.010, Speaker E: Say the same. I would have slept more. Yeah, we would have many more features, I guess, but the overall approach would be the same. I don't have a better answer to that, but definitely it will be a completely different experience. So I would like to have this experience and be able to develop something because in the end it's just two days and you are more or less sleepless. You tend to rush things, you tend to just try to make everything work. But I think in a three week period you can be more creative and I think even though you have to spend more time, I think in the end it's more rewarding and you can build something much stronger, much nicer and with greater potential.
00:57:41.990 - 00:58:55.706, Speaker D: I participated like an online hackathon maybe like two, three times in the past and during that time I always hacked alone because it's much easier to manage my time because it's a longer period. So it's not like if it's weekend, it's all constrained and you can do it working team, even though you just form the team together, whereas one month is very long to manage. So even when you join as a team, quite often during one month's time, like even for the weekend Hackerson, quite often team one or two people drop out, right? I think one month period is even harder to keep motivation up and running. So in one sense, individual could take advantage because you could just wake up middle of the night just walking, but at the same time it's one month and if you do it three times, there's three times more resource. So I think how to for people who's forming the team, how to manage, I think their team for the longer period would be quite key.
00:58:55.888 - 00:58:56.780, Speaker G: I think.
00:58:59.710 - 00:59:17.810, Speaker B: That'S awesome. Yeah, it's definitely going to be a different experience because you have more time, but you also have more time to manage. Right. So we are almost exactly at 03:00. I'd love to keep talking with everybody. Does anybody have to leave at this time? Any of the speakers?
00:59:19.590 - 00:59:21.650, Speaker H: Oh, I need to run right now.
00:59:21.800 - 00:59:24.100, Speaker B: Do you want to say anything quick before you run?
00:59:25.910 - 00:59:27.380, Speaker H: Well, good luck, everybody.
00:59:29.270 - 00:59:46.460, Speaker B: Thank you, Felix, for presenting and sharing that story. Anybody else? We can stick around for a few minutes more if there are any questions in the Zoom. We still haven't heard from Richard and the Blazer team. So Richard, if you want to just talk quickly about what you do if you had more time.
00:59:47.390 - 01:00:56.386, Speaker A: Yeah, so I guess first of all, I would have spent a lot more time optimizing about the week following this hackathon. I spent all my time at ECC, my spare time poking away, pulling a little bit of gas out here and there to make a little more gas efficient. And then I wrote Rooted last week or two weekends ago just as kind of a proof of concept. So I would have optimized more and I would have made more use cases so people could see what was going on. But to be honest, I probably actually would have picked a different project for just being me by myself. I feel like for hackathons that are a weekend long, it's more fun to pick something strange and weird and unusual that I wouldn't otherwise I wouldn't dedicate a month probably to doing something like Lurch, but wasting a weekend doing it just to see whether it works. I can imagine having done something completely different if it was a month long or maybe building a much more thorough ecosystem on top of it.
01:00:56.386 - 01:01:03.460, Speaker A: But a month is a long time. I'm really curious to see what type of things come out of this.
01:01:04.390 - 01:01:09.030, Speaker B: Yeah, for sure. We are too. Thank you, Blazer.
01:01:12.540 - 01:01:55.460, Speaker I: Yeah. From my perspective, a month really is a long time. I don't even know. The thing about hackathons is that everything is so compressed and you have that time pressure and you just have to get it out, and it's a great experience for a month. I feel like we've been on a month long hackathon since East London, trying to get the new iteration of Blazor out. I guess, from our perspective, probably gives more time to test out the actual product because you might actually finish it way in advance and you can start iterating on it. I don't know what you guys think areettio Kuba.
01:01:58.280 - 01:02:37.830, Speaker G: Constant time pressure to have a working solution because you're being tasked at the deadline, at the stage that you're happy and not at, let's say, your design, your thoughtful design, the quality of code, the comments, et cetera. But when you can pace yourself for a month, definitely it will help to have more advanced design cleaner code, et cetera, to give you a comfort of having lower maintenance costs in the future. Because hackathon code is always like a kind of a spaghetti. Unfortunately, they need to unwind later.
01:02:38.600 - 01:03:08.990, Speaker F: Yeah, exactly. For me, the same. We would be focusing more on UI UX. We would be asking people about the use cases, how they would use it, what the pain points are, even give it to try it out and give us feedback on either the code or the UI, the UX. We'll have the opportunity to have more of a community building, a community feedback looping, if you like, and engaging with everyone.
01:03:11.760 - 01:03:28.710, Speaker B: Awesome. Yeah, that's actually a really interesting idea. Maybe in the last week we could have a little demo, like a pre judging demo session, get some initial feedback. If you haven't had any yet. Any final thoughts from any of the teams or anybody on the Zoom call?
01:03:32.030 - 01:04:04.740, Speaker A: I just had one more quick thing I wanted to mention. Somebody was asking about arbitrary contract sizes. What you could also do is store your entire contract in storage and then execute it through Lurch so you could be rather than reading from code, you could read. So anyways, it's just a random idea for whoever had that question. I think it was a will something. Feel free to bug me afterwards because yeah, then you can put a gigabyte worth of data on the blockchain and execute, like, a contract. If you're really bored, maybe try Rothschen or something affordable first.
01:04:05.430 - 01:04:05.794, Speaker G: Yes.
01:04:05.832 - 01:04:07.000, Speaker A: That's all I had to say.
01:04:08.090 - 01:04:55.060, Speaker B: Awesome. This has been really great because I hadn't heard some of these stories from past hackathons and really just interesting to hear the inside perspective from all the hackers. So, again, thank you. The presenters who made the time to talk about what they've done in the past and how they've continued to work on the projects. This is really helpful. You've all joined the discord already, so I can't show the discord, but please do join and be active, because you are the kind of people we want to be mentoring and just providing support for people. They're going to have questions, and you've built something, and you're the perfect people to give feedback like that.
01:04:55.060 - 01:05:20.218, Speaker B: I think that's it. Thank you, everybody. Have a good rest of your day. And this has been recorded, streamed live, and you'll be able to watch it yourself again in a few minutes. All right, bye, everybody. Thank you again. Apply to hack money.
01:05:20.218 - 01:05:41.140, Speaker B: Apply to hack money. Join hack money. Everyone who's last. Bye.
