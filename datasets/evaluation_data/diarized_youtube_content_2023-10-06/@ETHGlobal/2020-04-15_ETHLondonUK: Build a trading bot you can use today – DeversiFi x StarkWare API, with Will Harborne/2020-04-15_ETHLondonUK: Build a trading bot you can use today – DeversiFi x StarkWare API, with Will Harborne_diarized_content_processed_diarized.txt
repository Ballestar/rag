00:00:00.570 - 00:01:11.534, Speaker A: I'm going to give a quick 30 minutes how to build a Dex trading bot. But just to gauge, has anyone ever used the API of a centralized cryptocurrency exchange? And how about trading on a Dex using not a UI? Okay, so just, just quickly, first of all, to give an introduction of diversify. So currently we're a decentralized exchange on mainnet Ethereum, settling every single transaction using zero X protocol. So a user can place an order and once it gets matched with someone else, it gets settled in an individual transaction. And we're just now releasing for the first time at this hackathon our sort of next level Dex, which uses is powered by Starkware to do batches of transactions. So rather than every single one having to go onto the blockchain, users can place thousands of trades and have them settled in a single batch onto the blockchain, which allows us to have much higher scalability, much lower cost. And this is the first time it's been tested.
00:01:11.534 - 00:02:39.530, Speaker A: So we don't think on the Ropson test network anymore that we can break it, but that doesn't mean that it's not going to get broken by some of you if you try very hard at this hackathon. So good luck with that. So I'm just going to go quickly through how it works overall, what you can build with it during this next few days and then walk through how you would set up on the exchange and how you can build a simple strategy on the Dex. And tomorrow, for people who are interested, there's going to be diving into a lot more depth on the actual cryptography behind how these proofs are done by Michael, who's from Starkware. And later in the afternoon, then more about the actual stark proof system, which is basically how these are batched together to validate on a smart contract on the blockchain that all the transactions that happened were valid. So from the perspective of our UI, it looks pretty much like any other centralized exchange. And the big difference of how it now works is that when you come, you deposit to a single smart contract and when you deposit to that pool of funds, you also sign essentially a transaction which allows your funds to be swept off chain and all your trading then happens in that off chain environment.
00:02:39.530 - 00:03:56.390, Speaker A: So each time that you're placing an order, you're signing it with a key, which basically allows us to collect signatures and eventually generate this proof which settles onto the blockchain periodically. So it means that from a trading perspective, you have instant trade execution and placement, but the settlement happens at a delayed period later and means that it's very sort of fast from your perspective. So features wise, it means that you get the benefit of no trade being able to make without being able to take place without you having signed specific permission for it. Your funds are fully controlled by you and your own wallet and there's a whole host of wallets that you can use and you don't have any risk from the exchange or from any counterparty that you're trading with, unlike on a centralized exchange. But you also get performance and high speed and you also get privacy on your transactions. So unlike most DEXes, where you can be front run on the blockchain, your trades here are invisible to anyone else. And it's only at the point of depositing and withdrawing that your funds are associated with your address, again on ethereum.
00:03:56.390 - 00:05:22.670, Speaker A: So just very basically the way that that happens is that these transactions are batched together and so the cost essentially of each batch, it doesn't scale with the numbers from transactions. So if you can put 10,000 trades into one batch, the cost is very, very low per trade and therefore the fee can also be very low. So there's a few prizes over the weekend for building using these APIs on the Wapsden test network. We're looking for anything innovative and that's using the complete function or as much functionality as possible of the exchange, in particular Dashboards, helping to visualize the funds locked in the contract, particularly given that now the data is presented in a very different way. So, unlike most Dex aggregators and most DeFi monitors, increasingly apps like this are going to be taking place with a lot of off chain data. And so there need to be other ways of reading and displaying that data for DeFi monitors. And the other case we're interested in is that there's quite a bit of new cryptography involved here, particularly because a new curve is being used for signing and hashing data, which is more efficient for these stark proofs.
00:05:22.670 - 00:06:42.174, Speaker A: And so we're interested in anyone who can have a look at that and start to help integrate new wallets to support trading on here. One of the other really interesting ones is combining this with flash loans. So because of the way that the funds are held when they're on the exchange and deposited, it's relatively simple in theory to write a flash loan wrapper around the deposit contract here to allow those funds to be used while they're also in use on the exchange. So, yeah, just a couple more ideas along those lines. All of these would be interesting projects. So integrating to trade with leverage via the deposits mechanism into the exchange, adding unsupported wallets, the Dashboard smart contract funds, where because of the way that it works, you can have quite easily a multi SIG wallet trading on the exchange, which isn't as simple on a lot of other DeFi protocols. So now I'm going to go into a bit more detail about how it works in practice for people who might want to use it.
00:06:42.174 - 00:07:24.218, Speaker A: So the first thing is around keys and authentication. So particularly we've essentially split fund management and trading keys. So you have two keys which if you chose to, could be the same. The first is your Ethereum key, and that can be an externally owned account, it can be a hardware wallet, it can be a multi SIG contract, actually, rather than a key. And that gives you the benefit of being able to have whatever security you want around your actual funds. But your trading key can be separate. Therefore, just like any Exchange centralized Exchange API key, you can use it in an automated trading bot on your machine without having to worry so much about the security.
00:07:24.218 - 00:08:32.750, Speaker A: Because even if that was compromised, no one can steal your funds, they can just trade on your behalf, which could still be damaging, but isn't catastrophic. So this gives you a lot of flexibility. And we already have native ledger support which has just been released. And so if someone wants to look at working on that over the weekend, come and speak to us because ledger have just published their library today and it also gives a lot more efficiency around trading. So I had planned here to kind of run through some examples if people had their laptops open, but I think it's more relevant maybe for people who want to to go and do this. But on our GitHub we have this JavaScript client library which essentially implements all of the calls to our API and to the blockchain and wraps them in a really nice, easy to use interface. So, for example, you can open this examples folder if you go here and also look at the documentation.
00:08:32.750 - 00:09:51.686, Speaker A: And just by running Node setup JS, you can essentially get a new private key, set it up, and then by running another command register the Exchange get some Ethereum. We had to do a bit of hacking around this where because of a lot of the Faucets weight limit Uvia API, we've implemented a Tor service which switches your IP address to hit the Faucet so you can top it up and then instantly have it all ready for trading. It's quite neat and it's very easy to use. And you can go all the way through doing all these examples deposit, get deposits, get balance and submit order. And it all happens very fast, although some of these include on chain Ethereum calls, of course. But once you get to the submit order stage, all of this is now mainly is happening via API, but you're signing using your Start key rather than your Ethereum private key to authenticate and allow these proofs to be created for getting market data. There's also some examples that we've published, but you essentially can also get WebSocket data, which is a big advantage compared to a lot of DEXs where you're either reading on chain or you may be reading from a rest API.
00:09:51.686 - 00:11:35.194, Speaker A: What that means is that you can essentially subscribe to a WebSocket feed of price information which could be changing very quickly and react to that placing your orders, and therefore create much more advanced and much more interesting trading strategies than you'd be able to do on most decentralized exchanges. So if you're looking to build anything, please come and speak to us about the WebSocket API, which we can give any tips on using. So, in terms of writing a strategy, we've published this repository which has like an example, a very, very simple sort of 300 line market making strategy, which I'm sure anyone here could exploit if they tried. And essentially you're using two libraries. One is our DVF client JS library, and then also we're using here the Bitfinex API node library, which is another JavaScript library for handling the WebSocket data in a really nice way. And then essentially this is all setup information, but we connect with an infuria URL to the Robston blockchain, create our well, we have our Ethereum and start private keys and then start to subscribe to the diversify order book feed. And this essentially is just saying that if the mid price of the order book changes at any point, we basically record what the new bid and ask is.
00:11:35.194 - 00:12:49.780, Speaker A: So the best price that anyone's willing to buy and the best price that anyone's willing to sell, and then update our own order to always be the best bid. And so this will constantly try and make sure it's the best bid in the market. And if it finds it's not, it'll update even that's not particularly obviously that's very simple. But that's actually something that's very hard to do on any decks, including a lot of the centralized Zero X relays because you can't get this fast price feed relay and you also can't cancel and replace your orders, particularly the cancellation, which usually with Zerox requires an on chain cool to the smart contract to invalidate your previously signed order. So, yeah, encourage anyone who wants to to go to that URL and run it. So I think because we went through those examples rather than everyone running them, that was relatively fast. But if anyone wants to ask questions about the general way that the exchange works or how the Stark settlements work, then please do.
00:12:52.310 - 00:12:59.250, Speaker B: You mentioned that we can use the WebSocket. How often do you publish new rates?
00:13:00.650 - 00:13:08.086, Speaker A: So basically there's an update each time there's a new order change which will hit the socket.
00:13:08.118 - 00:13:20.610, Speaker B: Yeah. How's your platform sort of compared to, say, dYdX or DX? Are they quite similar?
00:13:23.160 - 00:14:17.910, Speaker A: They're similar in the sense that in all cases, including us, the order book data and the orders are off chain. So you're not limited in having to put every single order onto the blockchain. But both of those are similar to the way that our current sort of production system operates in that when trades do occur, they have to go onto the blockchain individually, which means that it's fine at relatively small numbers of transactions, but you pay an Ethereum transaction cost every time you want to settle one of those. The big difference with this version that we're just releasing is that instead of that you could have tens of thousands of transactions all happening in a very short space of time and batch them together so that the cost is extremely low and you can have a much higher throughput than either of those two systems or our current production system.
00:14:23.560 - 00:14:24.496, Speaker B: Every minute.
00:14:24.608 - 00:14:46.620, Speaker A: Yes. So rather than having a record of every single transaction, we're able to prove that at the end of this period, this is the new state of balances, and every transaction that was included, although we haven't recorded them onto the blockchain, was valid, was a valid transition. So we've netted them all together and created this proof that the new state is also valid.
00:14:47.760 - 00:14:56.188, Speaker B: Okay. I guess for an individual trader, you'd be able to see, I guess, their net movement since the last settlement, but not the individual trade.
00:14:56.364 - 00:15:23.144, Speaker A: So actually, with the original implementation yes, that was the case. We've now abstracted also the way that deposits and withdrawals happen, which also means that it's not clear whose balance essentially we've hidden that information as well, but through a slightly convoluted method. So you also can't see the position updates over time, which is also another form of leaking traders data.
00:15:23.342 - 00:15:32.326, Speaker B: How do you verify your own chain that the settled position actually matches what you want?
00:15:32.508 - 00:16:14.930, Speaker A: Yeah. So essentially, you can keep a record, of course, of your state, but you have to essentially that ourselves, Starkware and a series of other committee members store this data and make it publicly available in the case where we go offline. And from that you can also see essentially, you can always get your own position data in your own state, but you need to have, in the worst case, everyone's state if we were offline in order to withdraw.
00:16:16.230 - 00:16:28.510, Speaker B: Okay. To verify that represents what you've traded, you'd only be able to do that if.
00:16:30.960 - 00:16:32.430, Speaker A: You'Re reliant on.
00:16:32.800 - 00:16:38.028, Speaker B: You can provide the user by request authentication path.
00:16:38.204 - 00:16:52.390, Speaker A: Yeah. So essentially, well, you have this tree of everyone's balances. And, for example, you could provide just and, you know, your balances, but we have to provide the tree of the path of everyone else's data, but not the full set.
00:16:53.560 - 00:16:57.670, Speaker B: I guess it's more of your talk tomorrow. Okay.
00:17:06.880 - 00:17:08.750, Speaker A: Yeah. Any other questions?
00:17:11.120 - 00:17:14.060, Speaker B: How many assets do you have available to trade?
00:17:16.160 - 00:18:34.590, Speaker A: So this version isn't yet on the main net ethereum, but there's four different assets that are traded over this weekend on the Robson test network, in theory, because there's not really any limitation imposed here, so the number of assets will be likely very high in the long run. Yeah. The nice thing is that you have the ability to have multiple markets, but also you can reduce the trade size, for example, which is usually quite high on most platforms, like dYdX, for example, because you're paying the same amount there no matter what the trade size is for settle settlement. Whereas here the settlement is just dependent on time, essentially. So we want to have as many transactions as possible, and they can be as small or as large as possible without really changing the economics of it. Okay, thanks.
