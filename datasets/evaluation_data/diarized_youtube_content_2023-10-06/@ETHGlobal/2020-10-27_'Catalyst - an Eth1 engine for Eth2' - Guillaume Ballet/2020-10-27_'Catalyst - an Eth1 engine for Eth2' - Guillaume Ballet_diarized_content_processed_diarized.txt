00:00:00.570 - 00:00:13.790, Speaker A: Guillaume is part of the Go Ethereum team at the EF and also is focusing on scaling. And he will introduce Catalyst or give us a talk about Catalyst and ETH One engine for ETH Two. Welcome, Guillaume.
00:00:14.850 - 00:00:24.254, Speaker B: Hello. Thank you. Wait, I need to share my screen. You went a bit fast. Here we go. Can you guys see it?
00:00:24.452 - 00:00:25.200, Speaker A: Yes.
00:00:25.530 - 00:01:09.074, Speaker B: Awesome. Yes. So indeed, I've been working for the guest team and they asked me to look into how to reuse this code that has been developed over the last five years, maturing and getting more secure, how to use it into this new adventure of East Two, which is going to be a lot of new features and therefore more risky. So I looked into building something that some software that I call Catalyst. It's a reference to mass effect. Oops, that's a bit early. And yeah, I actually don't quite know Mass Effect that much.
00:01:09.074 - 00:02:17.962, Speaker B: But since Geth were the bad guys in Mass Effect, I picked that name as a way to accelerate the East Two transition. So, yeah, I just mentioned briefly the word ETH One engine. So what is that compared to ETH One client? Danny Ryan two weeks ago, I think made a very nice presentation where he explained that East Two is more focusing on he's splitting blockchain into several layers. And he says East Two is more focused on the consensus part, the data part, and not so much the execution part is left, let's say, to the execution engines. So the end result is that you have a lot of data and E Two really doesn't know what this data is about. So it needs some kind of helper that knows how to process that data. And this is the role of Catalyst or of any other ETH One engine.
00:02:17.962 - 00:03:16.502, Speaker B: So what it does is it keeps a local view of the chain and it also keeps the transaction pool. And yet the ETH One Shard client, which is actually an E Two component, is connected to the East Two network and communicates with the ETH One engine via RPC. So there's still, at the moment, at least in Catalyst, a connection to the ETH One network, which is used to update the transaction pool. So the transactions still come from the old well, the old network. And yes, let's see how that enrolls. So, for example, in the case of a block proposal, you have the East To client determines it has to create a new block. It determines that from its connection to the network.
00:03:16.502 - 00:04:32.238, Speaker B: And so what it will do is contact the ETH One engine to say, hey, propose a block. And what the ETH One engine will do, it will look at the transaction it's got in its pool, it will select some and use them to produce a block. And it will add it where the Shard client asked it to add it. So it can actually have several forks because presumably because of the way the Consensus engine works. At the East Two level, you can have several concurrent fork and forks, and the East Two client will have to pick which fork. But until it has decided, it needs to be able to handle several forks concurrently. So once it decided the once it created that block, it will return it to the Shard client and the Shark client will keep that until it's well, I mean, presumably it will not keep it, but it could just decide to try several chains and ultimately it will return one block to the ethereum network.
00:04:32.238 - 00:05:26.418, Speaker B: So it will propose one block. So what happens on the other side? On the other side of the coin, it's the validator. The validator receives the block from the network and it tells the ETH One engine, okay, you know what this is about. Tell me if this block is valid. So the ETH One engine will because it receives the block and it knows what the parent block of that new block is, so it tries to insert it in the chain, and if it successfully manages this, it will remove all the transactions that are in this pool and that are already taken by this block. And then it will return, like the Go signal say, okay, this block is valid. And ETH One Shard client can also collect those responses and decide which one it wants to vote on.
00:05:26.418 - 00:06:24.578, Speaker B: So ultimately, the ETH One Shard client of the validator will send a message sorry, a vote on the East Two network. Yeah. So basically that's roughly what Catalyst is. It's some hack of geth at the moment with extra RPC calls and some block propagation has been deactivated. We built a demo with Michael Kellinin from Consensus. There's a simulated ETH One Shard client that runs and communicates with Catalyst. And we created several instances of this process so we can see the Shard client telling Catalyst to create a block.
00:06:24.578 - 00:06:51.694, Speaker B: Catalyst producing this block. It's being sent over to the other machines. The other machines validating this block. It made us very happy. So check it out. There's a YouTube video somewhere that Mikhail did, and very fun, I would say. Why aren't we shipping this already? It's because we start using like the chains that we use.
00:06:51.694 - 00:07:34.922, Speaker B: The ETH One chains that we use are created for the purpose of this demo. There's no historical data. And so the big question to answer next is how do we transfer from the proof of work chain to the proof of stake chain? And that's a big question to answer because many things can go wrong. Well, first, there can be a bug. No one is perfect. And especially new code is particularly fragile in this respect. It would be great to be able to if a problem is detected, it would be nice to have a chain to fall back to because this is a billion dollar ecosystem.
00:07:34.922 - 00:08:24.794, Speaker B: So we want to make sure we don't just flip a switch and break everything. But the biggest risk apart from that are the miners. Miners. They invest electricity, they invest in hardware. They need to get some money back. And the problem is the expense of electricity is good as long as they can expect the next block. But if no more blocks are coming, or if they cannot expect to be the next person minting the block as the deadline with the merge, what's called the merge approaches, you can think those people are not going to be as interested at spending energy on this block.
00:08:24.794 - 00:09:35.262, Speaker B: And they can go and have a lot of strategies, but the problem is, if they exit en masse, it's going to have some impacts on the network. So there will be a slowdown because the difficulty takes some time to adjust. And of course, if a lot of miners disappear, what will happen is that you can have a situation when 51% of the network is controlled by one sorry, 51% of the hash power is controlled by one entity, maybe a click. But there's a risk of collusion. And we know the Validators don't really want to they're not really interested in becoming proof of I mean, we say, okay, early feedback from Validators indicate they're not that interested in becoming early feedback from the miners indicates they're not really interested in becoming Validators. It's a different kind of business. So they might try several things to prevent the merge.
00:09:35.262 - 00:10:06.826, Speaker B: For example, doing reorgs, attempting to do last minute reorgs. We are about to switch and then we realize the block we were building on is the wrong one. I will explain this in more details later. They can try double spends, they can try a lot of things. And they can also try to put a short on the price of ether and then exit. And so the block time starts spending. So people realize, oh, the Validators are leaving.
00:10:06.826 - 00:10:53.470, Speaker B: So they dump the price of ether and they can rake in, buy everything and come back and be bigger, like increase their stakes in the new world. So I'm going to cover a couple ideas that were floated around how to process or proceed with the transition. The first one was to use the so this one is pretty self contained. It's how to use the finality. So, as you might know, East Two has a finality. So after a while, there's one branch or one block that is declared as final. All the other branches that do not include this block are discarded.
00:10:53.470 - 00:11:51.694, Speaker B: Because the beacon chain on one hand can indicate which one is the proper shard block. That is correct. And because before the merge, the Validators of the Shard will be monitoring the East One chain, you can use this to introduce finality to the proof of work chain. So I realize I need to explain a bit what this diagram represents. So squares are blocks. So the parent is on the left and the child is on the right. And the reason why the arrow goes from the child to the parent is a hash reference to the parent to symbolize proof of work.
00:11:51.694 - 00:12:42.778, Speaker B: I have used the pickaxe and unfortunately I couldn't find anything to represent stake properly. So I use this terrible pun. I'm sorry, but yeah, that's the best I could come up with. So the idea is that after a while, the beacon chain here will indicate that this block here, which is in the ETH one Shard or Shard Zero has been finalized. And because the validators of this chain keep watching the proof of work chain, they can also get this information and discard everything that came before. So yeah, that's an approach that has a lot of advantages. One of them is that, like I said, it's self contained.
00:12:42.778 - 00:13:14.330, Speaker B: So even if Ethereum 2.0 stopped there, there would already be a benefit here. And the benefit is that you can actually delete a lot of data that is no longer useful. This comes at a price, of course. Full sync is unlikely to happen. You will need to start always, you will need to find a trusted source that can give you what was the last finalized bug. Excuse me, and sorry, they say bug, the last finalized block.
00:13:14.330 - 00:14:02.140, Speaker B: And then you have to synchronize from there. So this is an idea, for example, that works great in conjunction with Regenesis or even Light clients. But yeah, that's also something that has some inconvenience, one of them being the data download time if you start downloading. So for example, in Geth right now, you have the Fast Sync. The fast sync fast forwards to a given block and then downloads the data for that block. And the problem is that Geth doesn't keep the data for that many historical blocks, the state for that many historical blocks. So it starts downloading the state.
00:14:02.140 - 00:14:53.610, Speaker B: But at some point you get beyond those 256 blocks for which Get keeps the state, and then you don't have any more data to download. So you have to reach like to fast forward to a new block and start the process again and hope that this time you can synchronize faster than the head advances. So you would have maybe the same problem with this approach. But on the plus side, it's very easy to implement. All you need to do is in the reorg code is to say, well, if that goes beyond the last finalized block, don't reorg. So yeah, there's this idea that's of course a bit of a bummer, but I think it's pretty interesting to consider it. Nonetheless, it's simply to never do any transition.
00:14:53.610 - 00:16:32.294, Speaker B: You just introduce the shard mechanism in the current chain, the shard communication mechanisms in the current chain, and then you decide the Shard Zero is always going to be the main, like a proof of work shard. And then you start the other shards and the advantage of this is, well, that you can actually leave it to the community to sort of vote whether they really want shards or not. Because if all those accounts start migrating to other shards, then, well, first, you know, shard actually brings value, which we expect them to, but it's nice to have a confirmation. And the other thing is if a lot of big contracts move away, then it's much easier to experiment and tinker and try to get the proof of work shard to transfer at a later time because if there's a big mistake, presumably the damage is much more limited. So it's got some interesting aspects to it. And of course, like I said, you can try to roll out any other method of conversion later, but at least you let people escape before you start playing with the ship. And yeah, the other advantage is that if the migration fails, you can always go back to the main shard.
00:16:32.294 - 00:17:31.286, Speaker B: Like the boat is still afloat. There was a project that I wanted to mention, it's called the Eastwinx 64 that precisely took interest into shard communication. And yeah, that would be a great benefit to this approach. This one is kind of crazy, but at the same time, for the sake of the argument, I'm sharing it. So the idea is to basically interweave like, proof of work blocks with proof of state blocks and try to increase the number of intermediate blocks over time. This is an approach that is extremely complex, but still interesting to play with. And so the idea is, like, you space out the amount of time between two proof of work blocks.
00:17:31.286 - 00:18:23.130, Speaker B: The biggest problem, so the advantage first is that if it fails, you can reduce the number of block and go back. So it's pretty extensible. The question is we don't really know when miners are going to decide, oh, those two blocks are too far away, let's just drop that. And the other problem is indeed, like, if you keep the current main chain approach without the finality, at least you will find yourself adding way more blocks and block headers block bodies are taking a lot of space. So there's a growth issue that we expect will be saved by will be fixed when we switch to East Two. But in the short term, that would make things worse. Then there's the idea of the AirDrop.
00:18:23.130 - 00:19:25.534, Speaker B: So it's actually independent of any method. The idea is that you keep the chain running and you bribe the miners to keep mining the chain even though it's going to disappear. And the way you bribe them is since the Shard Zero is still monitoring the proof of work chain, they can perfectly attribute an extra reward when they see that this miner has produced a block like we hoped they would do. And this block has been confirmed, like has had six confirmations a reward is given to them on the new chain. So even if the chain dies, they will get the money they should have gotten if the chain was still running. Yeah. So it's pretty safe as a technique.
00:19:25.534 - 00:19:56.730, Speaker B: It's not complex. And as a user, you can try to send a transaction on both chains at the same time. I don't think there will be any problem. At least I don't have vision. I think the same transaction should work on both. The biggest problem is really with legal. The business of a miner is to a mining pool.
00:19:56.730 - 00:20:29.880, Speaker B: They put work and they get money for that work. So that's perfectly fine. But when you move to a staking model, what you do is that it's like an investment. You put some money in a bank and you get some investment back, like more money back. And that is something that is heavily regulated, that is something that requires a lot of KYC. So there's a bit of a risk to merge both of them. We discussed that.
00:20:29.880 - 00:21:19.858, Speaker B: We don't think there will really be a problem, but there's a difference between what happens for real sorry, what the lawyers say and what the mining pools think. So there's a bit of a need to clarify and to make sure they don't panic and still accept that scheme. And there's the last method, which the one I call Yolo. And the idea is simple, you just fork and you hope for the best. So that was, let's say, the sarcastic way of presenting it, but in reality it has good chances of working. It's really not that bad. And the idea that is still being it's pretty fresh.
00:21:19.858 - 00:23:10.518, Speaker B: But the idea is that at a given block, the validators the validators keep following the proof of work chain and they are validating the shard number zero. So when you reach the predetermined block, what they do is, if everybody agrees what the block number N was, they will simply register this on the blockchain sorry, on the shard, and therefore bootstrap the shard with activate or how do you call it, launch the execution engine. And because they do this so basically they ignore everything happening in the proof of work chain anymore, they launch it and they keep running the execution engine. One thing they can also do is to basically also send that information. So if the proof of work chain has a client that is able to understand a bit of what's going on in East Two, you could actually share the information that the execution engine on the East One shard has been bootstrapped. And if so, those miners can keep producing empty blocks, so they get that signal. They know they only produce empty blocks so that there's no competition between the chains and yes, afterward we use the same technique as before, which is the AirDrop or the payment.
00:23:10.518 - 00:24:12.640, Speaker B: And, oh, yeah, one thing I forgot to say about the payment is that it could actually be done by instead of being done through the protocol. It could also be done by the Ethereum Foundation, for example, which I think offers more flexibility because we know some people. I mean, it happened with Ethereum classic. So the proof of work chain could become some kind of original recipe ethereum, and those people might want to be paid in original recipe ether. So the human method, even though it looks a bit more centralized, I mean, it is centralized in a way it would allow people who really want to keep mining this chain to be paid into the currency they care about. All right, and I'm going to finish with the next steps. So what remains to be implemented? The finality I think that's the lowest hanging fruit I started on that.
00:24:12.640 - 00:25:25.540, Speaker B: So, yeah, that's the next delivery. Then there's the idea that I alluded to in a previous slide. Let the East Two client understand a bit more what is going on in the East One client understand a bit more what is going on in the East Two world and maybe get this information even before the switch, before the merge that could be used. For example, I know Vitalik has made a few proposals where you could actually try to read the Beacon State and do several operations even before the whole Phase One and Phase Two have been launched. Do a bit of the same thing that shards do, but through a contract on the East One chain. So it would offer already an avenue for people to try or experiment with the East Two UX before they actually switch. And yes, so the last thing that remains to be done is to make a regular release, have a standard release process.
00:25:25.540 - 00:25:29.400, Speaker B: That's all for me.
00:25:31.690 - 00:25:54.240, Speaker A: Wow. Thank you. That was very insightful. Guillaume, a quick reminder to everybody, if you want to ask the speakers. So in that case, Guillaume, a question, please do put it in the chat so that I can relay it to him. The chat is on live easonline.org. And I also have a question for you already.
00:25:54.240 - 00:26:02.858, Speaker A: What has the process been like to communicate with miners and gotch their sentiment around the project and around the different options?
00:26:03.044 - 00:26:34.010, Speaker B: Right, very good question. We are still looking for miners, so if you know any miner that would like to answer those questions, please contact us. But so far I've been to the Discord Channel of the Go Ethereum discord Channel, tried to find a few people, but I'm always happy to talk to more of them because clearly I only talk to a few, so I'm more than happy to expand my horizon.
00:26:34.910 - 00:26:44.510, Speaker A: Okay, then another question. Will there be any sort of a testnet that the public can join?
00:26:45.330 - 00:27:19.340, Speaker B: There will be at some point, the idea we haven't really discussed that yet, but from what I see, you need a fork of gurley. I think it would make sense to make a fork of gurley and try to connect it to whatever east to testnet is running phase one. Or we could just use the simulation like we did in the previous prototype and use a fork of girly. So, yeah, there will be a public testnet. I think it's important.
00:27:19.870 - 00:27:28.422, Speaker A: Okay, cool. And then lastly, is there any way for outsiders to get involved in Catalyst PRS?
00:27:28.486 - 00:27:54.000, Speaker B: Yeah, I haven't created that's a good question. I haven't really thought of that because so far Catalyst was a bit of a prototype. But yeah, you can contact me. There's plenty of work to do. I give my branch, you can always open PRS against my branch. Or you can contact me and I'll find you some work to do, no problem.
00:27:54.530 - 00:27:57.410, Speaker A: Amazing. Cool. Thanks so much, Guillaume.
00:27:57.570 - 00:27:58.500, Speaker B: Thank you. And.
