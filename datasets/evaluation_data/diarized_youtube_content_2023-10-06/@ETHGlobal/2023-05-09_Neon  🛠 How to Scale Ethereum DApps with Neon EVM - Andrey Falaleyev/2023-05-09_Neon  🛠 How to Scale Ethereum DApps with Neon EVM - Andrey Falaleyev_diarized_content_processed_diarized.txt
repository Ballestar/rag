00:00:07.770 - 00:01:01.642, Speaker A: Hello dear colleagues. My name is Andre, and today on our workshop, I will show you how to use standard Ethereum tool chains frameworks. On solana, our team developed neon EVM. Neon EVM is an ethereum machine for salana. It's a smart contract for Salana, so it's an outside chain for Salana, it works directly on Solana. And on today's workshop, I will show you that you can find Neon transactions on Solana Explorers. Also, Neon has an additional service which provides Ethereum like RPC endpoint and you can use it to connect to the Solana cluster.
00:01:01.642 - 00:01:59.570, Speaker A: When you send transaction to Neon proxy, it packs your transaction into Solana transaction and sends them to Solana cluster for on chain execution by the Neonav program. And proxy cannot do anything with your transaction because your transaction is protected by your signature. And for double spend, it's protected by nodes like on Ethereum. The crucial moment that most information which I will show you, you can find in our documentation and you can repeat all steps. Okay, let's start. I'm sharing my screen. This is the documentation of Neonavian and what you will do at the first moment when you want to connect to the new blockchain.
00:01:59.570 - 00:02:54.322, Speaker A: I think you will configure your wallet on Ethereum, the most popular wallet is MetaMask and our documentation has information how to configure MetaMask. Okay, let's go. In the documentation you can find that you should go to the chainlist website and find the Neon VM is a list of available Ethereum like blockchains that works. Currently. You can use Neon EDM on DevNet. DevNet is a stable version of Solana testnet. And Solana team recommends to use it for test Yoda before deploying to the Solana main net.
00:02:54.322 - 00:03:42.126, Speaker A: So my MetaMask already is connected to this website. So I can add connection to our net by using this site. Okay, the network name is Neonavm net. We have Ural, we have chain ID, and we have gas token symbol. Let's switch. Okay, let's check. Yes, my account already has Neon tokens.
00:03:42.126 - 00:04:59.068, Speaker A: It's the best account. And this is lizzie already has Neon tokens. But as I understand, when you will start developing for Neonavm, you need some gas tokens and in the documentation you can find how you can get yes, the first step was how to configure MetaMask. The next you should go to our Neon Faucet and request a talking switch you need in the list you can find not only Neons, you can find other VRC like tokens ape, Soshi, USDC, USDT and so on. And the reason you can use it for test yoda. Okay, let's request neon tokens. Okay, transaction is completed.
00:04:59.068 - 00:05:53.120, Speaker A: Let's check the balance of our account in MetaMask. It was changed. You should wait some time to request an additional portion of Neon tokens. I want to use two accounts for our tests and two my accounts has enough Neon tokens to execute transactions. Okay, so let's try to use it for some transaction. I think it will be good to use Remix because it will allow us to deploy some contract to the Neonvm and check that it works. We have gamex.
00:05:53.120 - 00:07:03.640, Speaker A: The first step we should switch Premix to use MetaMask and to send transaction to the network to Neonavm in our case. Okay. Let's compile the first contract. It will be storage. And then let's deploy it to Neon again on Solana net. Okay. My MetaMask classmate sends a transaction transaction sent to the neon and it was processed by the neon EVM on solana in the explorer you can find transaction this is a hash ethereum like hash this is address of the deployed contract.
00:07:03.640 - 00:07:40.730, Speaker A: Here you can find the Solana transaction in which was packed your neon transaction and which was executed on the Solana cluster. And this is Solana explorer. And this is the Solana transaction. This is payment for transaction. Execution by our operator. It's not a topic of our workshop. If you want, you can read our documentation and better understand who is operating.
00:07:40.730 - 00:08:32.106, Speaker A: So production has several instructions. And one of the instructions is instruction for our neonav. This is the address of our neon AVM. And this is instruction inside and logs of facing transaction. So our contract is deployed. Let's call method. Mitamask asked me to sign transaction.
00:08:32.106 - 00:09:09.790, Speaker A: Let's wait some time. Transaction is completed again. You can find it on the explorer and find the Solana transaction on the Solana explorer? Solana has several explorers. For example. This is one of them. And let's check that this transaction was protested by the Solana on in. Another Explorer.
00:09:09.790 - 00:10:08.180, Speaker A: Okay. So we can see the same information. This is the logs of protested transaction. This is the address of our new VM. And it already has some transaction which were processed by other users. Okay, so I think that it's very useful when you can use Platform on your local computer because it provides you more flexibility. And in our documentation, you can also find information how to configure, how to run Neon EVM Platform on your local computer.
00:10:08.180 - 00:11:00.660, Speaker A: So Neon is a smart contract for Solana. So you need the full configuration. You need the Solana node and to which will be deployed Neon EVM program. Neon EVM contract. And you need the endpoint to the solana with Neonvm. So the full configuration contains several services and we create a docker compose file which allow you to execute Neon platform local on your computer in documentation. You can find permission how to do it.
00:11:00.660 - 00:13:03.540, Speaker A: Small let's. Check what images should be executed and several of these services require from you to define the version of the container which you will use. So my next step to define versions confine this information instrumentation I will type in command, line the versions and execute our local neon AVM platform, docker, compose, file and let's start. It like in documentation. You will see that start several services. Our next step will be to configure our MetaMask. So, what we will use we will go to the settings networks and we want to add new network, new NAV localnet the URL you can find in the documentation and in the docker compose file it is run on the local host.
00:13:03.540 - 00:14:47.930, Speaker A: On the port 1990 chain ID is test chain ID equal to one one one and symbol of gas token is neon it will be more informational for you when you will run transaction our platform started. Let's return back to MetaMask. Check the chain ID is equal to the type it by us. Okay, so we have configured MetaMask to use our local net also we need test tokens and in the documentation you can find how to do it. You should run this comment in the command line. Okay, I need address to which I want to request tokens and I will use count my MetaMask I will request more than ten tokens 1000 of neon tokens k we request it. Let's check the balances in MetaMask yes, it was changed.
00:14:47.930 - 00:16:15.284, Speaker A: Let's request neon tokens to another account done balance change it or not? Yes, it was changed okay and what about using remix in our local stand? So you should gain switch remix to using MetaMask to our network. Let's go to the list of contracts, compile our contract and deploy the contract to the local network. Okay. Transaction was executed. Confirm it in the list of activity in MetaMask. You can see this transaction. And we don't have local block explorer.
00:16:15.284 - 00:16:41.960, Speaker A: But we can use RPC endpoint to check that everything is okay. Let's try to do it. Okay. This is I use with request very. Often. So that is why you see it in my command line. Okay? Transaction was executed.
00:16:41.960 - 00:18:24.496, Speaker A: It has hash, it has index, the simple hack that you can use a neon specific SPC method and get more information about Transaction. It contains more logs. It contains information about Solana transactions and events which happened during transaction. Okay, so we have connection in MetaMask to Neonivm on the Solana net. We have connection MetaMask to the local stand with Neonavm and let's use some framework and understand how that it works in the same way in the documentation we have information how to configure hard hat truffle brownie let's use Hearthat this is simple configuration for hard heart let's create some project. And I will show you how to use Neonavm to create spare token accounts. Spare is ERC 20 contract on Salana, which allow you to create user balances and have ERC like interface.
00:18:24.496 - 00:19:02.650, Speaker A: ERC 20 like interface. Okay. All. This information can be find in our documentation. Let's init the project. Okay, so the next step we will install hard hack. It will be downloaded from the services and compile it on your local machine.
00:19:02.650 - 00:19:47.830, Speaker A: And we should wait. Some time and node JS will prepare us our environment. Okay, everything is complete. So the next step we want to configure our project. We will create standard JavaScript and configuration not just download an additional package. Let's wait some time. It will be very fast because it's a small packages.
00:19:47.830 - 00:21:11.390, Speaker A: So this is the configuration which you want to use. Let's wait. Okay. Our environment is prepared. I will use Ed to work with my project. Let's open it. Okay, let's open Hearth config it contains small it doesn't contain a lot of information and configuration let's go to the site and copy this configuration okay I will use the same version of Solidity compiler and remove all old configuration.
00:21:11.390 - 00:22:29.810, Speaker A: Okay, the configuration in our documentation show you how to use DevNet configuration. But let's use two configurations DevNet and localnet. This will be our local net and the next one will be configuration for the DevNet. I will change several values. Here you can find the RPC endpoint. Let's write to the duration. This is the chain ID of our network and let's do the same for the local configuration.
00:22:29.810 - 00:23:14.430, Speaker A: On the local stand you have this address. I typed the same value in the MetaMask as you remember chain ideas, you remember one. One. Okay. And I need some accounts to work with my project. I will not create this complex configuration. I will use same accounts from my MetaMask.
00:23:14.430 - 00:26:09.830, Speaker A: It's not critical that you will see my private keys because it's a test account. This is the private key and the next one count details and I need a private key. Okay, that's everything. Let's try to use it. What we have. We have a contract lock it is very simple it's an example from Hard Hub they have deploy script it deploys a Smart contract and Italy Zit okay let's use Arthat run grips deploy JS in my configuration I i define that I will use the Local net something wrong what is wrong? Oh we should install this more this package we will wait some time after that everything should work without any problems okay progress so we should wait till our package will be downloaded on our computer wait some time okay what it contains? Our config contains log time. Okay, so everything is completed.
00:26:09.830 - 00:27:26.062, Speaker A: Let's run our script. It compiled our contract and deployed to this press on the local net. We can do the same on the DevNet version of NeoNavia. Let's wait some time. Transaction should be executed and it should um okay, it is completed. Do remember that we have our Explorer and you can find it on our documentation. Let's check the contract details which were deployed by us and you can see that contract is deployed.
00:27:26.062 - 00:28:41.734, Speaker A: This is a transaction and this is more complex transaction. And this required more than one solana transaction. Okay, so what's the next step? As I said before we will create the smart contract in Yonavm which will store balances of users in a space token account for such purposes let's find with information in our documentation and this is the description how it works and the links to the source code. This is the implementation inside of Neonvm. And this is the list of prepared contracts and interfaces to work with spell token and so on. We need two interfaces. One of them is Metaplex library.
00:28:41.734 - 00:29:22.460, Speaker A: It's a registry for metadata of the tokens. It store information about token, symbol, token, name and so on. Let's create this file with this interface. Soon the copy past. We shouldn't do any changes in this file. This is ERC 20 like interface to our spill token account. Okay.
00:29:22.460 - 00:30:46.848, Speaker A: Let's create vision. Now project. Okay, and the last one is simple implementation of ERC 20 interface for Spillticking account. Let's use it. Let's create a file for it. So what we pass? Okay, this file contains the base for the min table FC 20 token in constructor. You should pass the name of the token, the symbol of the token, fractional digits of our token and authority which will have abilities to mint new tokens.
00:30:46.848 - 00:32:25.076, Speaker A: Also, it has methods which will allow you to mint new spell token tokens. And also you have standard ERC 20 methods. Okay, let's create the new script which will mink new tokens to the balance of our users. To simplify our actions, I will put the past the existing script but change the content. So, what is our first step? We need accounts which will be used for our transactions. And it will be two accounts and we will get them from them. Sorry guys, from the hard heart configuration will be to signers.
00:32:25.076 - 00:33:54.030, Speaker A: Okay, so the next step we should use factory to create our contract and it will be our mintable token. Let's check with the name of our contract. I'll copy past it. Okay, the next step we should deploy contract and we should pass the arguments to it. Okay, what name? We will use workshop spread token. Ah, name symbol decimals and 9th of territory. Okay, symbol.
00:33:54.030 - 00:36:16.200, Speaker A: Let's define number of fractional units in Salana valences can be stored only in 64 bits numbers. So let's define decimals equal to nine. And who will have abilities to mint new tokens? It will be our deployer account. Okay, so we should wait till our contract will be deployed and after that we can get the information from our contract about the token. Yes, we have methods with name symbol and it will request information from the Metamax library. Okay, and let's print the result of the logs. Okay, what is the symbol of our contract and on which address? The next step which I want to do, I want to mint our LC 20 tokens spale tokens to the balance of the second account.
00:36:16.200 - 00:37:10.440, Speaker A: Okay, one moment. Let's check that. I do everything correct. Mint message requires two parameters to address the amount of tokens, address of receiver and amount of tokens. Yes. So, looks that everything is okay. Let's try to use it on our local stamps.
00:37:10.440 - 00:38:04.832, Speaker A: Two solidity files was oh, I executed. I sent this transaction to the network okay, no problem. We can use the same on the local net too. But let's check that transaction was completed and see the address of our contract. Okay. Contract is completed also. We can import this token to the MetaMask and see the balance of our token in the MetaMask address.
00:38:04.832 - 00:39:12.250, Speaker A: Yes, it gets the symbol of our token and fractional units. But this account doesn't have any balance. We mean tokens to the second account as you remember. Okay. Why so many tokens? Why? Okay, no problem. Let's send these tokens to the second account. Okay.
00:39:12.250 - 00:40:00.220, Speaker A: Transaction is completed. Let's check that was indexed by the explorer. This is the solana transaction. One moment. I should check that balance of the first account changed assets. Yes, we receive spoiled tokens in the list of completed instructions. We can see that one account transferred ten tokens to another account.
00:40:00.220 - 00:41:07.340, Speaker A: Okay. And this is the address of our token. It has it has nine decimals and two holders. One and two. Also what we can do let's check in another explorer formation about our spill token. This is this is transferring of tokens. And this is information about our token.
00:41:07.340 - 00:41:32.150, Speaker A: And it is registered in the MetaMask. So that's it what I wanted to show you on today workshop. I think it was interesting for you. Happy to use our platform for your project. Thank you very much for your attention. Thank.
