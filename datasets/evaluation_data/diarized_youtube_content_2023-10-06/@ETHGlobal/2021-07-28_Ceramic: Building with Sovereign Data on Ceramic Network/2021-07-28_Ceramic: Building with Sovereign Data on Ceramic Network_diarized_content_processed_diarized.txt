00:00:16.500 - 00:00:42.576, Speaker A: All righty. Hi, everybody. Welcome to the building with Sovereign Data on Ceramic network workshop. Here we have Joel from our sponsor Ceramic, and he is going to be running this workshop for you guys. If you guys have any questions and duration of the workshop, just throw them in the chat. And if they're relevant to what he's talking about at that present moment, I'll present them to him. But for the most part, they'll be saved for the end.
00:00:42.576 - 00:00:45.090, Speaker A: Joel, you can go ahead and get started.
00:00:45.620 - 00:01:14.570, Speaker B: Cool. Thank you, Nisha. All right, so hi, everyone. I'm Joel, co founder of three box labs and creator of Ceramic. And so today I'm going to give you kind of a brief overview of what Ceramic is and kind of what you can use it for. And then I'm going to show you a kind of demo of how you can interact with Ceramic. Yeah, so Ceramic is essentially a decentralized network for user generated content.
00:01:14.570 - 00:02:15.448, Speaker B: So you can think of it as like any data that your users generate as they interact with your decentralized application can be stored and kind of tracked and be verifiably audited by other people in the network. So let me see if I can change slides. Yeah, so the basic building block of Ceramic is a data stream, and the stream has a state, so you can think of it as like, an object that you can mutate over time. And this object has cryptographic access control, so it's controlled by some public key. And so we use something called decentralized Identifiers DIDs to control Access, who can read and write of these data streams. The network is completely peer to peer and local. First, when you write data, you only update your stream.
00:02:15.448 - 00:03:33.668, Speaker B: And so there's no global consensus on data. Rather, you can kind of track and verify the pieces of data that's relevant to your application, and you can store kind of any type of data, and you can create data models inside of Ceramic. So the streams represent some kind of JSON data, and you can put JSON schemas to kind of define what the data is allowed to look like. Yeah, and some things that this can be used for, the main kind of thing is this becomes kind of like a sovereign network where users are in full control over their data, and ultimately they're part of the social graph and kind of like a global user table. And so obvious things you can use this for is like aggregating identity information and ultimately reputation information. You can store other kind of public data in there, like NFT content, like mutable NFT content, so you can have content that's changeable by the owner of an NFT. And of course, you can use this as a social infrastructure.
00:03:33.668 - 00:04:39.128, Speaker B: You can store comments or votes or other kind of signaling information useful in governance tools and stuff like that. And one nice aspect of this is the data stored in ceramic becomes kind of like open source so it's not tied into one particular application. Rather, the data can be shared across multiple applications. And you can also link multiple blockchain accounts to the same data. So you can have like a filecoin address that links to your dad or an Ethereum address or both, and then link that to potentially accounts on other blockchains or multiple accounts in the same blockchain. And so one of the main things we've been focusing on with Ceramic is making it easy to store user data and making it possible for developers to store user data in a semantically meaningful way. And so the system we built for this is called IDX, and each user has their own nidx.
00:04:39.128 - 00:05:11.488, Speaker B: It's like a framework on top of Ceramic. So in IDX, each user has their own data store. And the data store is basically a mapping from definition to record. So the definition kind of semantically describes the data and the record stores the data. So in this example, we have a developer that created the basic profile definition. And this definition also includes a schema that's a JSON schema that defines the structure of the data. And then when a user comes to the application, they create a record and store their profile in this basic profile definition.
00:05:11.488 - 00:06:19.818, Speaker B: And in the record, they have their name and some other information. And then of course, when different users come to the same application, they get the same definition ID, but they get their own record ID and their own record. So the neat thing now is once some developers created this data object here in this example, a basic profile, you can come and build an application and see like, oh, this basic profile seems super useful and I want to pull that into my application. And then basically you can leverage the network effect of existing applications that have come before you. All right, so I'm going to jump right into the demo and so let me change my screen shared, actually. Okay, so here I have a browser, and in this browser I've loaded used playground that we have. So this playground is connected to the Ceramic Clay test network.
00:06:19.818 - 00:06:59.558, Speaker B: And so you can access this using this URL. You can find it if you go to the Ceramic Studio GitHub. And basically what this demo does is it uses an authentication system we have called 380 Connect, which allows you to authenticate using your ethereum wallet or other blockchain wallets and then start writing and reading data from IDX. So in this example, we'll connect with MetaMask and then start interacting with data just in the developer console. So you're going to kind of get a sense of what's possible. So I'm going to click here on connect wallet. Now 380 Connect pops up and asks for permission.
00:06:59.558 - 00:07:49.382, Speaker B: So you're going to click continue here, and if everything goes right, it should ask for a signature. And so what happens here it loads the existing profile from the ceramic network. Hopefully everything should work. All right, I don't know why this is pending. Try to do this. So this usually doesn't take this long. Yeah, basically what it's doing right now is basically checking if this user has already a three box profile.
00:07:49.382 - 00:08:38.154, Speaker B: So if people have created identities on three box before, they will get migrated. All right, so if this is taking longer than expected, I'm going to show how you can also use Ceramic from your CLI. So we have a CLI script which you can install with like NPM install at Ceramic network. Okay, it looks like this is making progress. Now I'm authenticating with 380 Connect and it asked me to sign a message with MetaMask. I'm going to sign this and now I should shortly be connected here. All right, so now we see here a message in the console that connected with this did.
00:08:38.154 - 00:09:05.374, Speaker B: And we see here the three. And this is basically the Identifier I have on the Ceramic network. So now we can start interacting with Ceramic. So the first thing I'm going to do is just to create a data stream. So I'm going to start creating a simple thing. This one, I think I have something prepared here. And yeah, I'm just going to create a Tile document.
00:09:05.374 - 00:09:57.566, Speaker B: So Tile is a data stream in ceramic that's just a simple JSON object. And preloaded in this console here I have this Tile document class. I also have an instance of ceramic. So I call the Create function here, Pass Ceramic and I pass a first kind of state of my data stream. So now if I execute this now I have this stream instance that I have on S One and I can do S One content and I will see that I have this object. And now the interesting thing here is I can also do S One ID and I'm going to do two string on this. So now I have a unique Identifier for the stream.
00:09:57.566 - 00:10:29.900, Speaker B: And so the cool thing here is this stream ID will remain the same even if I make an update to the stream. So I'm going to go ahead and make an update here. So I'm going to do await S One update and I have something prepared here as well. So now I'm just going to change from hello world to hello, updated world. And now if I do s one content again, I get this new content here. Updated world. But I still have kind of the same ID here.
00:10:29.900 - 00:11:10.300, Speaker B: And now this stream has been created. I can actually load this from any ceramic node on the network. So I'm just going to go here to my console and start the ceramic daemon on the Kolai testnet. So now this basically spins up an IP test node and connects to the Ethereum network and starts kind of the ceramic node. And you can see that now it's running here. And now I'm going to just execute command here. So I'm going to do ceramic show and then paste this.
00:11:10.300 - 00:11:49.746, Speaker B: So now this will load this data stream from the ceramic network if everything was loaded. All right here yeah. So now you can see that I loaded the updated version of data here. See hello updated world. And neat thing we can do also here is we can actually inspect the data structure here or kind of look at the internals of the data stream in ceramic. So I can show ceramic state and I'm going to look at this. And so the underlying data structure of a ceramic stream is an append only list that is built in IPFS and ethereum.
00:11:49.746 - 00:12:36.018, Speaker B: So here we can see that in the log here we have the first object and the second object. So the first object is what we created first and then there's a new object that points back to the previous object and that's kind of how we do keep track and create like an audit log of changes. All right, so I'm going to jump back into here and I'm going to show you that you can actually enforce the data to take certain shapes in ceramic. So first I'm just going to create a schema. And so I prepared this already. Here we have a JSON schema that basically forces a JSON object to have a title and a message. And so I'm just going to store that in the schema variable.
00:12:36.018 - 00:13:37.494, Speaker B: Then I'm going to do create a new stream that puts the schema or creates a stream in ceramic with the schema. So I create a new tile document, create, pass ceramic and I pass the state which is now the JSON schema here and create this object. And now same thing here, schema stream. And I can look at the content and I get the kind of JSON schema content. And so now I want to create a stream that uses this schema as kind of like a way to enforce the content. So in order to do that, first need to check the current commit ID of the schema stream. And so commit ID is similar to the stream ID which we looked at before, but it refers to a specific version.
00:13:37.494 - 00:14:25.830, Speaker B: So in this case the version that has not been updated. So in ceramic I can refer to specific versions of a data stream or the latest version. All right, so I'm going to use that and now create a post. So I'm going to post one and let's see. So I'm just going to type weight, tile document, create and pass in ceramic and just do title. This is the content. So first we pass ceramics and we pass the content.
00:14:25.830 - 00:15:03.000, Speaker B: But now I can also pass some additional metadata. So I'm going to pass schema and I'm going to make that schema into the commit ID we got from above. So I'm going to add that there. And now I'm going to try to create this. Post one. It didn't work and so why didn't it work? Validation error data must have the required property message. So now we can see that if I try to create a scheme or a stream tile document in ceramic using this schema, it won't actually allow me to create it unless I also have this message property that we can see is required up here.
00:15:03.000 - 00:16:00.962, Speaker B: So let me try again and I'm going to add a message. I think I need to change this variable name. So now I created this and let's look at it. Post two content and we can see the content here that we're expecting. But also we can do post two and every stream in ceramic has metadata so I can do metadata schema. Now I see the schema is actually the same schema as we got here, which can be expected. We can also inspect the controller and the controller is the ID or like the user identity that's allowed to make updates.
00:16:00.962 - 00:17:05.510, Speaker B: So here we can see did three and this string here which is the same as the one up here, it's the same one, the one we're currently authenticated. So this is kind of like how you interact with the lower levels of ceramic but we can also start looking at IDX. So IDX as I mentioned, is like this framework on top of ceramic which allows you to kind of interact with user data more directly. So for example, I can try to load a profile. So I'm going to check actually if this did we got here above has a profile. So I'm going to do get basic profile and I'm going to pass did here we got here, it's annoying. We're going to try to type that loads.
00:17:05.510 - 00:17:54.454, Speaker B: So obviously it's not optimal. Or you might ask why do I need to know this did or how do I find that? Well, and that might not be totally obvious, you might not know the did beforehand. So how do you deal with that? Well, so one thing you might know from beforehand is the Ethereum account or like the Ethereum address of a user. So instead of passing the did here and now we can see that resolved to your profile. So basic profile is like a standard definition that's included in ceramic or in IDX. I mean, so here instead let's try to pass the Ethereum address and we need to specify that it's on Ethereum, Mainet. So EIP 1551 which is a way to represent Mainet.
00:17:54.454 - 00:18:14.818, Speaker B: And this string actually needs to be lowercase. This is some quirk that we're currently fixing. So let's try this. And now let's try to load the profile for my ethereum address rather than my did. And this works. We should get the same profile. Yes.
00:18:14.818 - 00:18:48.782, Speaker B: So you got the same profile and similarly you can use IDX to do like IDX set and update the basic profile. That's basically it. I'm not going to go through everything in detail. And so the basic profile is like one example of a definition. But you can of course, create your own data models in IDX that has your own definitions and enforces different types of data structures on there. Cool. And so that's it for the demo.
00:18:48.782 - 00:20:04.550, Speaker B: I'm going to jump back into kind of the last slides of the presentation. Cool. Now that we kind of seen how we can interact with these primitives and get basic data from an Ethereum address, this also kind of works with other types of blockchain addresses as well. Why do we need this and what can we do with it? So one thing that's really cool with IDX and Ceramic in general is we can start building applications that specify their data models. And the data models kind of live, are kind of open source, so we can start reusing each other's data models. So if there's application one, I can pull that data into a new application and we can start looking at data that's available in the network and see kind of what makes sense for us to use in our application. And with Ceramic, since we have these data streams that are cryptographically signed and also anchored into the Ethereum blockchain, we get this audit log that kind of guarantees data integrity.
00:20:04.550 - 00:20:58.018, Speaker B: We can also start linking data together where I can point to other data and we can start creating this graph of data and essentially build a social graph or maybe a web of trust between different individuals without enforcing any specific way of building trust. We could start building trust in kind of human, very kind of diverse set of ways. And I kind of already mentioned this kind of desilos data. Data doesn't really live now within any organization or any nation boundaries. Data becomes like this global commons. And we can start creating these shared data models as I mentioned. And yeah, the other cool thing is when we have these shared data models, my application and your application does not have our own network effects.
00:20:58.018 - 00:21:53.094, Speaker B: We actually share network effects, which is super synergistic. Once we start building applications and finally users have sovereignty over their data, so they ultimately control what goes in there and how it changes and is being updated. To get started with building with Ceramic, I recommend going to the developer documentation so we have that on developers Ceramic Network and developers IDX Xyc. We also have some examples here for code and for some tutorials. We also have a kind of basic profile app that you can use to kind of get a sense of what an Ceramic application might feel and look like self ID, which is just like a simple way to create and update the profile. And yeah, you can get in touch with us on Discord. It's probably best.
00:21:53.094 - 00:22:14.930, Speaker B: We also have a Twitter and yeah, that's essentially it. So I would like to open it up for questions, and I'm going to stop sharing. Hey, Jen, I can read your questions, or if you want to ask it out loud, feel free to do so as well.
00:22:17.460 - 00:22:32.212, Speaker C: Yeah, hi. So my question is about if I were to adopt Ceramic for my decentralized application, do I need, like, a node in the background to publish the user information? User streams, yeah.
00:22:32.266 - 00:23:16.340, Speaker B: So the Ceramic network is built out of nodes, right. And in the network, each node kind of decides which data streams they pin. So if you're building an application right now, the easiest way to do that is to run your own node and then make your front end talk to that node. In theory, the whole system is actually built in TypeScript. So you could run a Ceramic node in the browser, but that's kind of very tricky to get. Right. So right now, I recommend using the Ceramic HTP client and then connecting that to a node that runs on some kind of infrastructure.
00:23:17.880 - 00:23:23.620, Speaker C: Got you. Is there any concern that if my server goes down, the information will be lost?
00:23:24.040 - 00:24:01.770, Speaker B: Yeah, so the best way to mitigate it from that, you can configure backup options with one node, but the best way to mitigate data loss in the Ceramic network in general is to actually pin the data streams on multiple nodes, and so a stream in Ceramic can be replicated on any number of individual or independent nodes. Is there any other questions?
00:24:07.760 - 00:24:34.210, Speaker A: Okay. If not, then thank you so much, Joel, for running this really informative workshop. And thank you, ceramic, for sponsoring Hack FS this year. I want to encourage you guys to keep this conversation going. In the Ceramic discord, there's a channel called Sponsor Ceramic that you guys can talk to Joel in. And yeah, thank you guys so much for coming to this workshop, and thank you again, Joel. Great day, everybody.
