00:00:02.010 - 00:00:58.986, Speaker A: But first, who am I? Well, my name is Albert and the most important thing you should know about me is that I am really jet lagged right now. There's a few other things that may be worth knowing. You know, I studied math and CS. I had a pretty cool startup experience and that led to other learning experiences and and eventually led me to work and help the Ethereum Foundation today. Now for today's talk, for those of you who saw my talk at ETH Boston, the first half of this talk is mostly a redux of that I've tinkered with some parts and the second half I'm excited to present some new concepts and tie ins with ETH London. So the fundamental premise of this talk is that in order to improve our understanding of complex topics, we should consider a wide variety of perspectives. This doesn't guarantee that we'll have enough understanding.
00:00:58.986 - 00:01:41.950, Speaker A: One of the tricky things about power laws is that you can get 99 things right, but the 100th thing you missed might dominate everything else. But considering more perspectives also increases the chances that we hit on the most important thing. Now one of the most complex topics is forecasting the future. And one lens for thinking about the future is to look at the past. After all, we are in the future compared to the past. So to start, I collected some quotes about the internet back from the 1990s. So this first quote is from Robert Metcalf, 1995, the inventor of Ethernet, which has nothing to do with Ethereum.
00:01:41.950 - 00:02:22.780, Speaker A: It's kind of an ironic quote if you think about both the timing and this particular technology that has been vital to the adoption of the internet. This next quote says something that I think is pretty reasonable. It says that most things that succeed don't require retraining 250,000,000 people. Of course, we know that it's now much, much more than that. Then we have another quote about all these promises of what the internet is going to bring airline tickets, restaurant reservations, sales contracts. And of course, it makes this note that the local mall still does more business in an afternoon than the entire internet handles in a month. That might sound familiar to some of you in Ethereum land.
00:02:22.780 - 00:03:08.870, Speaker A: Lastly, we have this somewhat infamous quote about the Internet's impact on the economy versus the fax machine. And I almost felt bad including this because I believe the context for this quote was actually to make a somewhat contrarian statement at the time. So I do think it's important to put some of these things in the appropriate context. The other important context to put here is I'm not trying to actually compare Ethereum or Blockchain to be the next Internet. I think doing that would be similar to the type of mistakes that these quotes made. Now, the moment that we start thinking we know what's going to happen, it's also the moment that we're at the highest risk. And so that's why in almost all of my talks, I like to cite the parable of the blind men and the elephant.
00:03:08.870 - 00:03:42.020, Speaker A: Most of you probably heard this parable or some form of it, in the story. There's multiple blind men. They're touching different parts of an elephant for whatever reason. And since they each have an incomplete picture, they make different and incorrect assumptions about the object they are touching. So it's obvious that the blind men are making a mistake with their statements in this picture. But there's actually two bigger mistakes going on. First, they aren't considering that they're directly interfacing with something that may be much bigger than what's there that they're able to experience.
00:03:42.020 - 00:04:04.202, Speaker A: Second, they aren't communicating with each other. Now, I won't fault somebody for being blind. That's out of your control. But given that they're talking, I don't think they're deaf. So this priority, I think, is on them. That's why when trying to grock ethereum or anything big and complex, I think it's important to take multiple perspectives and communicate about them. We'll end up with a better picture, even if it's not perfect.
00:04:04.202 - 00:04:34.382, Speaker A: And that's the goal of this talk as well, to improve our picture, at least in expectation, improve it by looking at ethereum from different perspectives. And so the first perspective is history. I don't mean blockchain history, or cryptography history, or digital cash history. Those are important. But I'm going to zoom even further out. Now, unlike the first four quotes, which had to be broadcast via newspapers, magazine articles, or recorded presentations, I got this quote directly via Twitter. As a tangent.
00:04:34.382 - 00:05:05.226, Speaker A: I still think about this sometimes. I grew up in the Chicago area. I was a big sports fan. And back in 1995, Michael Jordan announced he was coming out of retirement to return to basketball. If the Internet was a big thing back then, this announcement undoubtedly would have broken it. But instead, MJ had to send a fax to various newspapers and TV stations so that they could announce it. In other words, one of the most famous people on Earth couldn't make an announcement directly because the technology essentially didn't exist.
00:05:05.226 - 00:05:53.610, Speaker A: It does make you wonder what dynamics might exist 25 years from now, especially in light of efforts like Twitter's, Blue Sky, decentralized social media protocol, and all the other things that I'm sure will be explored between now and then. So, back on topic, a type of thought experiment I've always liked is imagining what it must have been like to be at certain points in history. Here, that point in history is typing on a keyboard attached to a computer terminal. Now, the funny thing is, when you actually walk through this thought experiment, you realize that without the benefit of hindsight, the reaction might not have been that positive. You might go, well, okay, you're typing and it's showing up. But I've already been able to do that with this typewriter, and that's been around forever. Another lens that I take is thinking about moving data around and how much that's changed over the years.
00:05:53.610 - 00:06:53.520, Speaker A: Most people in this room probably haven't even used most of the technologies on this list. I know for me I had some experience with floppy disks and CDROMs, but I never interacted with a memoryx eight inch floppy, for instance. Another story that I like to tell is how back in 1989, my parents spent $600 to buy a 20 megabyte hard drive. I've joked before that it's still way cheaper than storing that amount of data on Ethereum. But I do wonder about the parents out there who might be utilizing Ethereum today in spite of its limitations, just as my parents did for me and something that I'm forever grateful for. So another lens with which to view history is to identify places where imitation occurred. As the saying goes, imitation is the sincerest form of flattery, and it gets especially interesting when it occurs in situations that otherwise don't make sense, because in a way that gives you more precision into the thought process of the time than anything else.
00:06:53.520 - 00:07:43.306, Speaker A: My standard example of this is the history of JavaScript. As some of you may know, JavaScript was originally named Mocha, and then it was renamed to JavaScript because of Java's popularity. Something that confuses people to this very day, as the two languages, while having some overlaps, are really very, very different. Of course, JavaScript has long since overtaken Java as the most popular and widely used programming language in the world. Ethereum has its own interesting parallel in Solidity. Solidity was built to interface with the Ethereum virtual machine, and its syntax was at least partly motivated by JavaScripts due to JavaScript's popularity. That said, I think coding in Solidity is probably better thought of as akin to writing bash scripts than it is to using JavaScript.
00:07:43.306 - 00:08:26.826, Speaker A: JavaScript is often in a context, such as a front end context, where you can get away with certain mistakes or other issues with what you're building. Something that is a lot less true for Solidity. And while we're at it, there's this fun fact that the creator of JavaScript now works on the Brave browser. The Brave browser was funded by an Ethereum token. And as I noted at the beginning of this section, history might not repeat, but it does seem to rhyme. Another rhyme that I enjoyed digging into is that of performance optimization. So I remember when I was in school, there was this discussion that some would have about how important performance optimization even was anymore.
00:08:26.826 - 00:09:11.850, Speaker A: There was a time where it seemed like computers just kept getting faster and that any improvement in performance optimization skill would be dominated by improvements in the speed of computers as a whole. Of course, what happened next was the smartphone revolution occurred and all of a sudden everyone had this slower computer and slower Internet connection again. And so of course, performance engineering started matter in that context. Then we had blockchains, where performance optimization matters even more. And really, I think that the takeaway is that we'll always have more use for computing power. I expect to see things like homomorphically encrypted computing become more popular and more common as we continue to improve those technologies and as we continue to have faster computers. After all, the goal was never just to be able to do computation.
00:09:11.850 - 00:10:04.590, Speaker A: So that leads me to the next perspective on a take, which is engineering. One thing that I found really interesting about the last ten years and really the last 30, but especially in the last ten years, is how software engineering has changed. I had this really fun conversation with this 20 year old who remarked about the blockchain and Ethereum specifically, that it seemed impossible to have to write code that you couldn't change afterward. I then introduced this person to the CDROM and talked through how once upon a time, in a galaxy far, far away, you actually had to ship software on these fairly immutable devices. Most people didn't even have the Internet. And so you actually had a very similar dynamic where you pretty much had one main shot to get things right. What's cool, though, is that software engineering companies have become increasingly safe coding environments.
00:10:04.590 - 00:10:34.790, Speaker A: Coding schools become much more common. People can often learn to code for three to six months and start to contribute. And it's really great because it just greatly increased the accessibility of software engineering. I remember one of the hardest things for me when I was working at Dropbox was that I knew that it was possible to ship a bug that killed the company as a file syncing program. If you lose someone's files, it doesn't matter if you can patch the bug afterward. And we see some similar aspects with blockchain engineering. It is currently a pretty unsafe coding environment.
00:10:34.790 - 00:11:23.990, Speaker A: One way I like to think about it is that computing on blockchain is kind of like imposing some laws of physical reality onto the virtual world. And so one thing that I also like to point out is that maybe thinking of writing software on Ethereum as software engineering might not be the most productive lens. In some ways, I think developing for a blockchain based computer is more like building hardware than software. Now, that's not necessarily a bad thing. After all, we can build cars, we can build bridges, we can build skyscrapers, we can build space shuttles, the list goes on. So I do believe that we can build systems that are complex and reliable on blockchain. The key is that we're going to have to take approaches that are maybe more similar to the approaches that go into building complex real world machinery and utilize different best practices.
00:11:23.990 - 00:12:08.466, Speaker A: The key point is also that people don't start building cars, like by using raw metal. They don't start building houses by chopping down trees. There's a lot of things that we need to build up along the way in order to improve the potential of what we can put together. The next perspective I like to take is the computing stack. This perspective was motivated by a question that a friend asked me, which was what is the most interesting technical environment you've ever worked in? For me, actually, one of the most interesting technical problems I encountered was when I was twelve, I built my own computer. And by built my own computer, I mean I got my parents to buy the parts that I could then assemble for a new computer so that I could have a shiny new computer and fulfill a school project. It was really genius by me.
00:12:08.466 - 00:12:44.910, Speaker A: I think in a lot of ways this experience left me with a really strong memory that hey, a computer isn't a black box. It's something that you can take apart. It's something that you can kind of assemble and reassemble and disassemble. That was a spark that never left me. Now, what's been fascinating to me since then is how few opportunities I've had to work with a new computer. Even at a place like Dropbox, which had pretty high technical requirements, there was desktop, web and mobile support. The correctness requirements were high, the scalability requirements were high, the latency requirements were fairly high.
00:12:44.910 - 00:13:22.540, Speaker A: But even there most of the work was confined to a fairly narrow slice of the computing stack. There was never enough motivation, for instance, to build new programming languages, operating systems or virtual machines. Now, with programmable blockchains, it's really cool to see not just motivation, but probably a need to reinvent the entire computing stack. For instance, no one's going to use a new programming language today unless there's a new context where it's especially well suited. Smartphones were the most recent example of that, and you could argue that some of the machinery used for AI is a form of that as well. But overall, you need to find new context in order to get to work on new parts of the stack. Again.
00:13:22.540 - 00:14:25.300, Speaker A: Along similar lines, there's going to be a necessary redesign of the entire developer experience, one that's already happened a lot in Ethereum, and that comes with its own opportunities to make us dent and hopefully save us from unintentional bigger dents along the way. Overall, this is the first time in decades that so many parts of the computing stack are simultaneously accessible to be worked on in a practical context. As I mentioned earlier, I think it's interesting to think through points of history and what it would be like to be there. And I think what's exciting here is there's an element of being present for all of these things the early days of the Internet, early days of operating systems, and even the early days of computers themselves. I certainly wouldn't have guessed that building a truly new computer would make more sense today. After so much development and adoption has already occurred than it actually would have when I was twelve years old assembling that desktop box. But as exciting as all this is, it still misses what I think is a significant, perhaps most significant perspective on what we're all working on here.
00:14:25.300 - 00:15:34.246, Speaker A: So for the next perspective, I'm going to take more of a legal or game theoretical or mechanism design perspective. As a prompt question, like to ask what is the purpose of the legal system or any legal system? For a long time I thought it was to enforce laws. I mean, after all, that's what it's there for, right? Eventually I realized that a bigger effect of legal systems is that they establish or attempt to establish societywide confidence that laws will be enforced. This is pretty significant because societywide confidence that laws will be enforced shifts the equilibrium for how people behave at scale. And so, speaking of equilibria, this means that the legal system is fundamentally an example of mechanism design. Now, people talk a lot about game theory, but I don't think they talk enough about mechanism design. Mechanism design inverts the question of game theory, instead of asking how do we play this game to maximize our aims, it asks how do we design the game so that when people play to maximize their aims, the result is better, whatever that might mean.
00:15:34.246 - 00:16:18.242, Speaker A: Nakamoto Consensus itself is kind of a breakthrough application of mechanism design thinking. Now, one of the most well known examples and commonly cited examples of game theory in action is the Prisoner's Dilemma. Most of you are probably familiar with this, but for those of you aren't, the key idea is that there exist situations where individually rational behavior results in arguably globally suboptimal outcomes. It's often cited as an example of the limitations of game theory. However, once you put on a mechanism design hat, I think it gets much more interesting. In particular, the Prisoner's Dilemma is actually solvable, just not directly. This is where mechanism design thinking comes into play.
00:16:18.242 - 00:17:01.026, Speaker A: It's true that the original game yields suboptimal behavior, but we can also think, how do we change the game that's being played? Now, this isn't always going to be possible, but changing the payout matrix or turning the Prisoner's Dilemma into an iterated game instead of a one shot game can both lead to substantial improvements in the outcomes for players. That leads to my next perspective, which is a deeper dive into credible commitments. I think credible commitments are a really underappreciated element of the world. They're almost like atoms in a physicslike sense. They're everywhere and their properties affect everything. But we also don't think about them directly. Very often, commitments of varying levels of credibility are all over the place.
00:17:01.026 - 00:17:44.290, Speaker A: For example, given the choice between buying a TV from a brand that you recognize and an otherwise indistinguishable TV that does not come with a brand, which one are you going to prefer? Brands are a form of credible commitment behind the quality of a product. They are in essence a form of proof of stake. And proof of stake itself is used as a form of credible commitment in addition to its main role of civil resistance. Of course, another form of credible commitment is just money itself. We all know that paper money has basically no intrinsic use. Maybe you can burn it for heat or it looks cool artistically, but that's about it. So its value is almost entirely tied to being a credible commitment which encapsulates the authority of the issuer and the difficulty of counterfeiting.
00:17:44.290 - 00:18:54.290, Speaker A: So one of the things that blockchains fundamentally enable is for a wider range of credible commitments to become possible. For example, anonymous parties can provide credible commitments using blockchains. Traditionally, this has required a mutually trusted third party, even though we don't always realize that it's there, the legal system, the government, or just your run of the mill company. So let's consider a question that people both frequently ask and probably don't ask enough, which is does this really need a blockchain? When people ask this question, I think they're really asking whether the increased space of credible commitments that are enabled by blockchain related concepts is being utilized along those lines. Just as how blockchains are fundamentally credible commitment technology, ethereum is fundamentally an attempt to harness and leverage the potential of credible commitments. Ethereum enables making credible commitments more explicit, flexible, easy to use and widely applicable. This is the crux of all programming blockchains, at least in my opinion.
00:18:54.290 - 00:19:37.400, Speaker A: And it has some really powerful implications. For example, we've seen how Ethereum has made it possible to harness much more of the potential of zero knowledge, proof based technology and applications than was previously possible on Bitcoin. It's one of the clearest demonstrations of where additional flexibility and ease of use can be leveraged. Taking the lens of credible commitments also shapes the way I think about the supposed transition from web 20 to web 30. I think that a lot of web 20 will end up interfacing with programmable blockchains, but I don't think most of it is going to be outright replaced. One way I like to think about it is that computers didn't enable typing because we already had typewriters. Computers did enable spreadsheets and accessible internet for people.
00:19:37.400 - 00:20:13.502, Speaker A: Similarly, smartphones were terrible at word processing and spreadsheets when they first came out and they arguably still are, although it was even worse than some of you may remember. You couldn't even copy paste on the first iPhone. But smartphones did enable new default expectations. You can now default expect a lot of people to have connectivity, to have camera access and location access. Ben Horowitz has an interview where I think he does a really good job going deeper into this that I think you can find on the Ethereum.org website. Along those lines, programmable blockchains are also going to get a lot better.
00:20:13.502 - 00:21:00.174, Speaker A: But I don't think they're going to be better at these quote Web 20 things that Web 20 currently cares about, because those things have already been optimized for. Rather, programmable blockchains enable us to build with credible commitments in brand new ways. As we first saw with Bitcoin, money itself can be issued by a random, anonymous person in Satoshi Nakamoto. This is a concept that would have been inconceivable before. Now, speaking of bitcoin, it's worth noting that Ethereum's increased flexibility comes with an important trade off. It also increases the surface area of risk that actually can impact the credibility of the commitments on top of Ethereum. After all, if you're sure that a piece of code is going to run, but you're not sure that it's free of bugs, it might still not be that credible in your mind.
00:21:00.174 - 00:21:56.026, Speaker A: This nicely segues into how Ethereum and bitcoin attempt to harness credible commitments in different and complementary ways. Bitcoin doubles down on its core commitments and trying to make them as credible as possible by having a narrower, more immutability centric focus. Now, that actually comes with its own trade offs. Just as the potential of bugs reduces the overall credibility of a commitment, the immutability of a system, even in the face of changing needs or security requirements, can also reduce the credibility of its commitments. There's no optimal point on this spectrum, just a series of tradeoffs, and I think the world is likely a better place with both of these approaches being taken as well as others. Now, remember what I said earlier about the prisoner's dilemma? Ultimately, programmable blockchains aim to provide a new primitive, on top of which new systems can be designed. We might be able to use this to shift payout matrices, turn one shot games into Iterated games overall.
00:21:56.026 - 00:22:36.110, Speaker A: It's just that with new systems comes new equilibria for behavior. Remember when we're talking about the ability to do entirely new things, it's pretty hard to predict their long term impact. Language was once a new thing, numbers were a new thing. Legal systems, electricity, the internet, smartphones, the list goes on for things that, even if they looked big at the time, ended up being much bigger than we thought. And so with that, I view programming on top of blockchains as well. There's this substrate for a new type of quote language, one that is built around guarantees instead of promises. And as some have noted, there's a hope that this would transform concepts like don't be evil into can't be evil.
00:22:36.110 - 00:23:29.790, Speaker A: Now, from my next perspective, I want to talk a little bit about the talent in this space. One claim that I've repeatedly made is that the amount of talent in blockchain is going to grow a lot. I was Dropbox's head of engineering hiring for a few years, and I spent about as much time on the recruiting side of things as I did on other aspects of Dropbox during those years. I would even make covert visits to other company offices to chat with people I was trying to poach and did a lot of tours of college campuses. Now there's a few concepts that I learned along the way for analyzing talent migration. The first one is that top talent wants to work with other top talent, especially when you get to work on challenging problems that also have an opportunity for impact. The second concept is that top talent is actually rarely looking for new opportunities.
00:23:29.790 - 00:24:24.394, Speaker A: This is an important concept because there's this assumption that the best people are always in the most important fields. But that's actually not true because the best people are often in a situation where they're very happy and therefore less likely to be exploring. Because of this, where top talent is, is often a lagging indicator. And so one question that I like to ask friends is I know you're not looking for a change right now, but if you were then what would you consider asking? That question, I found, helps you learn a lot more about what might become more interesting in the future than asking people simply what they're doing right now. So yeah, like I said, top talent can be a lagging indicator, not a leading indicator of what's interesting. Along those lines, seeing one respected peer become interested in a new domain is probably worth more than 1000 days of hearing about it. Otherwise.
00:24:24.394 - 00:25:09.434, Speaker A: Actually hearing about it repeatedly otherwise often has a counterproductive effect. And I think just like the startup world between 2008 and say, 2012 or 13, we're seeing this happen increasingly often in crypto. When I started Dropbox back in 2008 and the startup world looked nothing like it does today, I often like to call it Startup Village because everyone actually knew each other at the time and like certain villages, it definitely didn't feel modern, it definitely didn't feel developed. Back then, people thought you were crazy to start or join a startup. And when I told friends at MIT that I wasn't coming back for senior year, they reacted as if I told them I was going to like Hollywood to become a movie star or something. And believe me, nobody at MIT has what it takes to be a movie star. So by 2012, the narrative had begun to shift.
00:25:09.434 - 00:25:41.820, Speaker A: That's Drew Dropbox founder and four years later he's on the COVID of Forbes. Part of it was that the nuclear winter that had been left by the.com bubble was finally thawing and moved forward a few more years. The startup community really become the startup world. At that point. People would actually look at you funny if you said you would not consider ever going to a startup. Now I think something similar is happening in Blockchain, but like with many things in this space, it's going to take time while it's also happening at warp speed before you know it.
00:25:41.820 - 00:26:15.518, Speaker A: I think what ensures that the dam is going to burst is just how interesting this space is. These aren't empty calories here. Most people do get distracted by unsavory superficial aspects of, say, cryptocurrency speculation. But if you look at what blockchain based computing is an interesting environment for, the list goes on and on. This is one of many reasons why I'm so excited about Ethereum's future. So that takes me to my 8th and final perspective for this talk. Now, the word composability has gotten thrown around a lot in Ethereum land lately, especially in the context of decentralized finance.
00:26:15.518 - 00:27:13.270, Speaker A: That got me thinking what does composability look like in Ethereum across all levels? The first lens that I'm going to use is composability of the applications on the network or the applications on the global computer itself. Now, it's the year 2020, and people have been talking about cross blockchain bridges for almost as long as blockchains have existed. Great progress has been made, but they're still pretty limited. And decentralized finance has been a great example of the importance of being kind of within one system. The reason hubbub about Flash loans are a perfect example of this because it's probably going to be hard to achieve total atomicity in a cross blockchain way, and total atomicity is going to be irreplaceable in some contexts. And as Flash loans have showed, total atomicity allows users to provide a type of credible commitment that is otherwise impossible. It's an example where the difference between where the difference between being 100% sure about something and 99 point percent sure is enormous.
00:27:13.270 - 00:27:52.818, Speaker A: That said, I do believe most examples of the composability of applications will not require you to be on the same network, and we're all better off for that. There's going to be a lot more examples of that. I remember even at ETH Boston, there was work on using prediction markets to hedge against black swan risk. And we've had things like crypto dragons that consume CryptoKitties even though they're not actually built by the same people. The second lens focuses on tools, infrastructure and standards. Now, every software engineer knows how valuable it is to not have to write your own programming language, your own IDE, your own code review tools, or even the most of your own libraries. You'd rather focus on the differentiated aspects of what you're trying to build while standing on the shoulders of others.
00:27:52.818 - 00:28:23.446, Speaker A: For everything else. And beyond tools, there's also infrastructure, such as not having to sync an entire node just to tinker. I'm not saying people shouldn't sync nodes in general, just that it's nice to not always have to do so. And browser and smartphone support is another example of that. Education materials, tutorials and functional testnets are also a big part of it. Another thing that I think is underrated is standards. Now, standards often get associated with bureaucracy and bloat, but that's because we tend to only notice them once they make life harder.
00:28:23.446 - 00:28:56.760, Speaker A: We don't notice the standards that have made life. Much, much easier. In my opinion, concepts like ERC 20 or ERC 721 continue to be underrated. They allow people from around the world to benefit from each other's work and get compounding leverage for their efforts. Even the simple fact that a token adhering to certain Ethereum standards is massively easier for an exchange, whether centralized or decentralized to integrate, seems to be regularly overlooked by investors and pundits. For the third lens, I think things start to get really interesting. Once you actually have a vibrant ecosystem, magical things start to happen.
00:28:56.760 - 00:29:25.802, Speaker A: Consider the following flow. Say that you discovered Ethereum somehow and then you started to tinker with it and maybe along the way you decide to attend an ETH Global event. Now, at the ETH Global event, you might have even built some cool stuff and met some co founders. And so, next up is to get some support for your new project. And as you can see, there's a long list of ways you can do that. And once you've been building it, you'll start to showcase your effort. Maybe it's through online groups, maybe it's through more in person events.
00:29:25.802 - 00:29:59.834, Speaker A: You might find other people that want to contribute and you might even hire some of them. There's also stuff like Gitcoin Bounties and other things that make it so that you can get help without always needing to make full hires. And that's where maybe you come full circle and you become an ETH Global sponsor. I swear they didn't tell me to put this slide in. But now you have even more builders contributing to your project and maybe even meeting their own future co founders, and the cycle starts again. Now, it might not work exactly like what's described here, but every single step in this flow happens and has happened surprisingly often. Look, none of this stuff is new by itself.
00:29:59.834 - 00:30:51.530, Speaker A: Open source isn't new, composability isn't new, hackathons aren't new and talent flow isn't new. But the way these things are coming together in Ethereum, I think is quite special. Now, from my final perspective, since taking things full circle has been a bit of theme of this talk, let me take us back to one of the things in the beginning. I'd like to remind everyone that we should never be overconfident in our understanding and to state once again that the moment we start thinking we actually know what's going to happen is the moment that we're at the highest risk. For example, the expanded space of credible commitment sounds really cool, but cool doesn't necessarily mean good. Similarly, I'd like to remind the folks in this room that almost everyone interested in Ethereum or Blockchains today crossed an intellectual chasm to get there. I jokingly like to call this the Acid Trip Epiphany that we all shared.
00:30:51.530 - 00:31:15.620, Speaker A: Unfortunately, acid Trip epiphanies don't scale. Usefulness is what scales and so that's why I think it's really fitting to give a talk like this at an ETH Global hackathon. So, with that note, I can't wait to see what happens this weekend. And I can't wait to see what happens over the next five years. Thank you and have an awesome ETH. London, everyone. Yeah.
