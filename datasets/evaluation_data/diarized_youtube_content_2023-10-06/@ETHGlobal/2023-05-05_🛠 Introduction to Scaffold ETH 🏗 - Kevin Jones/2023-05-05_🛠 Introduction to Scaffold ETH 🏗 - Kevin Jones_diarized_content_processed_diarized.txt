00:00:07.370 - 00:00:25.334, Speaker A: All right, thank you guys so much for coming. My name is Kevin Jones. I am also Aka Shutterblock ETH. You may see me running around taking photos. I'm also a photographer for the event, so I do a little bit of both. And I'm also a developer advocate for Scaffold ETH. That's why we guys are here today.
00:00:25.334 - 00:00:44.714, Speaker A: We're talking about scaffold ETH. I don't actually have any slides. This is all going to be like live demo, and we're going to go through and actually do a live demo and show how it works. This is all my contact information if you guys want to save my contact info. But everything we're going to do is going to be live demo. And if you're looking to get started with Scaffold ETH, can you guys see that?
00:00:44.752 - 00:00:46.810, Speaker B: Okay. Yeah. Okay.
00:00:46.960 - 00:01:24.166, Speaker A: If you do a Google search for Scaffold ETH, you're going to get one of the first links that's going to come up is going to be the docs or the actual GitHub repo. So everything you really need is in those two pages. If you actually go to the GitHub repo, it's going to have a README that's going to walk you through how to get up and running. We're going to do that in real time and we're going to kind of build a DAP and show kind of what the process looks like here as you go. So let's go ahead and just kind of dive right into it. I'm using tmux, which is basically a terminal multiplexer. It's just going to allow me to have multiple windows open at the same time.
00:01:24.166 - 00:02:02.770, Speaker A: You pretty much always need like three windows open to get started with Scaffold ETH, and that's because you're running Hard Hat in a chain window and you're running your front end. So in react and then that third window is kind of where you're doing like your deploys and your other command line stuff. Okay, so I've already gone ahead and basically checked out the repository, so we're good to go. I've also gone ahead and I did a yarn install because that takes a little while to do. That's actually going to go out and get all the dependencies and install everything you need to get up and running. Once you're there, then the next thing all you need to do is just do Yarn Chain. So Yarn Chain is going to spin up a copy of Hard Hat.
00:02:02.770 - 00:02:17.602, Speaker A: Hard Hat is this kind of like virtualized Ethereum virtual machine that you're running locally, and it's going to come with all of these kind of like play accounts that have some play ether in there. And so we can start kind of taking that Ether and kind of testing our assumptions of our smart contract.
00:02:17.666 - 00:02:18.280, Speaker B: Right?
00:02:19.050 - 00:02:28.986, Speaker A: So you're always going to kind of keep that first window open. That window is where you're going to just kind of see your console output for Hard Hat. In the next window, you're going to do a yarn start.
00:02:29.088 - 00:02:32.780, Speaker B: Okay? Sorry.
00:02:34.670 - 00:02:35.614, Speaker A: What the heck is going on?
00:02:35.652 - 00:02:36.046, Speaker B: There we go.
00:02:36.068 - 00:03:01.682, Speaker A: Yarn start. Okay, so yarn start is going to spin up a copy of React. So another core component of Scaffold ETH is react. So that's going to take a second to kind of get up and running. But once you get up, this is exactly what you're going to see. It's going to spin up on Port 3000, a copy of Scaffold ETH. And you could kind of think of Scaffold ETH as this kind of like UI and this front end that's kind of already plugged up for you with your smart contract.
00:03:01.682 - 00:03:29.882, Speaker A: So it actually comes scaffold ETH comes with a smart contract. But if we go here to this second tab, which is the debug contracts, which is kind of like the sweet sauce of Scaffold ETH, you'll see here that it's not loading, and that's because we haven't done a deploy yet. So we got to go back to here. And like I said, we're always going to have these two windows open, our back end, which Hard Hat, in our front end, you can see that we got some console output from Hard Hat, and we can see that React started up successfully. So all we need to do is come down here to this next window and do a yarn deploy.
00:03:29.946 - 00:03:30.270, Speaker B: Okay?
00:03:30.340 - 00:03:56.822, Speaker A: So I can do yarn deploy. And it's going to do exactly that. It's going to deploy my smart contract. It's going to tell me the address for the account, and then it's also going to show me how much gas and how much time it took. Right, so we're up and running and now we should have a copy of our smart contract here, which we do. So what do we got here? It's a very basic smart contract. It's got a purpose, so it's got one variable, and then it's got a function already written for us that's going to allow us to update that.
00:03:56.822 - 00:04:34.770, Speaker A: Right? And one of the cool things about Scaffold ETH is it comes with what's called burner wallets, okay? So if you're building a DAP, you're going to have to hook up some kind of provider and then do all that stuff. This is kind of already done for you inside of Scaffold ETH, inside of the browser. So if we look up here in the corner, we get a copy of a private key and a public key that's in the browser, and we have the address and we could actually go to it if it was on a main net. And then we could also just grab some funds. So we can take some funds from Hard Hat and basically add them to our DAP. We're up and running and then we can start interacting and interact with our DAP.
00:04:35.770 - 00:04:36.520, Speaker B: Sorry.
00:04:40.410 - 00:04:53.018, Speaker A: All right, so we see here we have a purpose, okay? And it's just a variable. And then we have an ability to update that purpose. So if I come over here and just say like foo like this and hit send, it's going to allow us to change that state.
00:04:53.104 - 00:04:53.546, Speaker B: Okay?
00:04:53.648 - 00:05:19.794, Speaker A: So we've spun up our DAP, we've interacted, we've got some gas from Hard Hat and we've made some changes to that smart contract. We could also come over here and get a new copy of the contract by doing a yarn deploy reset. So reset and that's going to force a new copy of the contract and then it's going to revert the state. So you can almost think of it like the deploy as this kind of way just to kind of reset your smart contract and then kind of test your assumptions as you start building which is exactly what we're going to do next.
00:05:19.832 - 00:05:20.034, Speaker B: Right?
00:05:20.072 - 00:06:02.958, Speaker A: So let's load up our smart contract here. So let's go code and let's load that up. The first time that you load here if you're using Vs code it's going to ask you to trust the contract. Basically trust the repository which I recommend you do. And if you have highlighting for solidity, it's going to show you exactly what your smart contract is going to look like here. And when we look at the project for Scaffoldeeth, there's this Packages folder, okay? And inside that Packages folder there's essentially like two main places we're going to spend majority of your time. One is the Hard Hat folder and that's going to be inside the Contracts folder and the Deploy folder which we're going to get to in a second.
00:06:02.958 - 00:06:38.826, Speaker A: And then you can find your contract. So this is a copy of the kind of Hello World smart contract and we can see here's the purpose that we have and then we have like an empty constructor and then we have this function that allows us to update that purpose. Okay, so it's a real basic smart contract. It's almost like a hello world, right? And then we have below that we have the React app as well. So if you go under Hard Hat there's also the React app which we're going to go into a little bit but we're not going to touch that too much in this demo. But really majority of time you're going to spend probably is here in the Contracts folder. So we could hard code a change like this like hard code awesome apps or something like that.
00:06:38.826 - 00:07:07.582, Speaker A: If I can type today like that save it. And then we could do a redeploy and then you will see that it was successful and then we can see that that change is reflected in our front end so we could start doing some changes. So one of the first things that you learn when you're writing a DAP is you probably want to have some kind of like access control. So let's do something here. Let's create a new variable. So we're going to make it an address variable. We're going to make it public and we're going to call it Boss.
00:07:07.646 - 00:07:08.018, Speaker B: Okay?
00:07:08.104 - 00:07:32.550, Speaker A: And we're going to basically grab our burner wallet which is right here inside the browser. Again, we're not using MetaMask or anything like that and then we're just going to basically paste that in here and then save it and then redeploy. Let's do that. Sorry, let me close these out. These are going to get in the way the whole time. Okay, so let's go reset. Okay, so now we are going to have a new variable.
00:07:32.550 - 00:08:13.370, Speaker A: So we see that the UI is automatically transformed. We see we have a new variable, it's called the boss and it matches what our burner wallet is. So what you're going to want to do then at this point, let's say you wanted to create some kind of function that only that particular boss could call, right? Let's do that here. Let's create a require statement. So the next thing you'll learn is you can do like a require and you can do message sender. So with Ethereum you have access to or with Solidity you have access to the variables for who's calling that function. And so message sender is anyone who's going to sign a transaction for that function, right? So we're going to require that the message sender is equal to the boss, otherwise not the boss.
00:08:13.370 - 00:08:51.238, Speaker A: Something like that and sorry, like that. And then let's close it off. Save that and redeploy so you can kind of see what we're doing. We're kind of automatically been able to get up our instance, start making some changes to our smart contract and start testing our assumptions. So let's try to test that. So now what I want to do is I'm going to bring it up an incognito window, okay? I'm going to go to localhost 3000, same DAP, and we're going to go to it and then we're going to try to make a change on this kind of new user account we have. So here we have this kind of like purple blocky guy and then here we have this kind of like green blocky guy.
00:08:51.238 - 00:09:33.822, Speaker A: And so if I get some funds from the faucet and I try to make a change to foo like this and then hit send, it's going to tell me not the boss. So we've been able to kind of implement some access control on the smart contract. Okay, so that's actually not the proper way to do access control. There's a much easier way and so what you can do is you can utilize what's called Ownable, which is an open zeppelin contract. So we're going to do that instead. So let's kind of revert what we did. Let's get rid of this here and let's also get rid of this hard coded address here like this and let's save and instead you'll notice up here there's like a commented out section where it allows us to import another smart contract.
00:09:33.822 - 00:10:14.922, Speaker A: So with Solidity you can import a smart contract. So in this case, we're going to import the Open Zeppelin ownable smart contract. And when you do that, you can then inherit that smart contract in here as an inherited wood like this. So we're going to import it, inherit it, and then we get access to essentially all of the functions. We get access to the modifiers, the variables that are defined when that particular smart contract is deployed. So let's save that, okay? And then let's go ahead and redeploy. So Scaffold Ethers is kind of like I said, continuous loop where you're kind of testing some things, deploying your changes, going back to your UI and then kind of like testing your assumptions.
00:10:14.922 - 00:10:23.310, Speaker A: So we get to this point and then what's different here? Anyone notice we don't have the boss variable anymore because we got rid of that, but we have this new owner variable.
00:10:23.390 - 00:10:23.874, Speaker B: Okay?
00:10:23.992 - 00:10:45.782, Speaker A: So owner should be the owner of the smart contract, right? But we would expect maybe that it's going to match our burner wallet, but it does not. It's a random private key or public key that's there. That is the very first account that comes from Hard Hat. So because we're using Hard Hat to deploy our smart contract, the very first contract or account is the deployer.
00:10:45.846 - 00:10:46.266, Speaker B: Okay?
00:10:46.368 - 00:11:23.842, Speaker A: So what we need to do now is we need to actually adjust the Hard Hat deployment configuration script. So if you look inside the Hard Hat folder, right below that, there's a deploy script, right? So we can go here and we can actually start making some changes to our deploy script. So we want to have access to this smart contract. So we don't want it just to be this random Hard Hat config. We want to use the burner wallet. So if you go to this file, it's going to show you exactly how the smart contract is being deployed and it's going to show you what the parameters are. And then you'll notice here there's a section that's already kind of like grayed out that you can just kind of copy from that allows us to get a copy of the deployed smart contract.
00:11:23.842 - 00:12:09.794, Speaker A: So we're going to do that next. So we're going to create a variable called your contract and we're going to use Ethers to get that contract that's here with the deployer, which is again, it's the very first account of Hardhat. And then you'll also notice that I mentioned it earlier a bit, but when you inherit a smart contract, you get access to all of the functions and you get access to the modifiers and the variables. And so you'll notice that our smart contract Debug contracts tab has automatically adjusted again to add some new functions. And the most important one that we're going to be using today is the transfer ownership one. And that's going to allow us to transfer the ownership of the smart contract basically out of the Hard Hat deployer account. So let's call that.
00:12:09.794 - 00:12:42.334, Speaker A: So we can just come in here and basically we can grab this which also is just kind of already written for us and we can paste it right below and then this allows us to use that variable, call the transfer ownership and then input whatever private or public key that we want to here. So we can grab this here, right? This is our burner wallet. We can paste it here and we can hit save and then we can go ahead and redeploy again. So now during the deploy, not only did it deploy the smart contract, but it should have also transferred it. So let's see if it did.
00:12:42.372 - 00:12:42.926, Speaker B: It did.
00:12:43.028 - 00:13:14.006, Speaker A: So now the owner is going to match our account here. So we kind of are starting to build our smart contract. So we're going to kind of close out the deploy script because we're kind of good with that right now. But I do want to show how you would use that ownable smart contract. Earlier we did the require statement, but ownable also has the only owner modifier. So we actually need to add that if we're going to do anything that's access controlled here. So we can put it as a modifier.
00:13:14.006 - 00:13:56.520, Speaker A: Basically all a modifier is, is it's another function that gets called before that existing function is executed. So it always checks to make sure that only the owner could call this function. We're not going to use that yet. So let's go ahead and close that. Because it's not really too interesting to have a function that only you can call on your smart contract, right? You want to make it publicly available and publicly open, right? That's the whole purpose. So instead let's kind of build something else. Let's do another require statement here, but this time let's also require instead of we're checking the message sender, let's require that there's a value passed, right? So let's do message value.
00:13:58.270 - 00:13:58.934, Speaker B: Is equal.
00:13:58.982 - 00:14:27.330, Speaker A: Equal to a price, otherwise not enough like that. Now we need to set that price, right? So UN public price equals. So we could just type in here like exactly what we want. So we're going to do zero one, ether like this and then we're going to go ahead and redeploy.
00:14:29.190 - 00:14:29.940, Speaker B: Okay?
00:14:30.310 - 00:15:18.434, Speaker A: So now again we have our contracts modified. We have this new price variable which is interesting. And then now if we want to call this purpose to like foo like this and hit send, it's going to say we haven't sent enough money, right? We need to send some value. So what we can do is grab this kind of like amount that we want to send and you would think you could just put it in like this, right, and send that. But we have to deal in way instead of decimals, right? So what's cool about Scabbledies that has this little green button? You can just click that and it's going to do the math for you. So it's going to multiply that times ten to the 18th power and it's going to give us what we need in way and then we can hit send and oh, I don't have enough gas. So here's where we can say, all right, well maybe that little $20 that we got from the faucet was not enough.
00:15:18.434 - 00:15:42.202, Speaker A: So we can grab our address, we can come down here to the corner to this little other wallet and it's just unlimited supply of ETH. Basically we have like almost 10,000 ETH. So we can paste our address here and we can get like $1,000 and hit send. Or if we wanted to, we could also do it in ETH as well, right? So you have this kind of ability to just grab as much money as you need and then get going. So now let's hit send.
00:15:42.336 - 00:15:43.242, Speaker B: There we go.
00:15:43.376 - 00:16:24.258, Speaker A: So now what's cool is our smart contract is acting as a bank. We've actually established this cool like vending machine right in our smart contract. So I could actually come over here to this kind of incognito guy. I could come over here, get some funds, change, also send $1,000 over here and I could say I am cool or something like that and 0.1 send and then anyone can use it, right? We have this kind of like cool vending machine. But what's the problem? We can't get the money out. How are we going to get the money out? So let's figure out what we need to do to do that, right? We need to create a withdraw function.
00:16:24.258 - 00:17:07.202, Speaker A: Okay, so let's write that real quick. So we're just going to do like a function called withdraw like this and we're going to make it public. But this time we're going to use the modifier. We only want the owner to be able to call it, right? So now we can do a so we'll set a boolean called success, otherwise we won't set that. And then we'll do a message sender. So whoever's calling this function, we will do a call and we will pass the value as the entire balance basically of the contract. So we'll do address of this smart contract and we will take the balance like this and then we need to close this off.
00:17:07.202 - 00:17:12.740, Speaker A: Did I type that right? Hopefully we did. Let's save that, make sure it works.
00:17:13.590 - 00:17:16.338, Speaker B: Deploy cool.
00:17:16.424 - 00:17:42.374, Speaker A: So we get this word error, but for the most part it's going to work at this point. So let's take a look at our DAP. So now if we kind of come over here and we make a change to it, say foo like this and hit send, we're able to put the money in there and if we come over here to the incognito account so let's do that and then we kind of try to try to get those funds from here. We have the withdraw function. It's going to tell me, no, I'm not the owner.
00:17:42.422 - 00:17:42.682, Speaker B: Right?
00:17:42.736 - 00:18:21.820, Speaker A: So I don't have access to withdraw that, but if I come over here and I hit send, then boom, I'm able to withdraw those funds. And those went from the smart contract into my wallet. Okay, now what's interesting is we could actually just make one small minor change with the smart contract. And just to show what's interesting is, we can take we have that variable, that's price, right? We're setting the price up here above. We could do something like this where we could say price equal price times 100. I don't know, divided by or sorry, times 101 divided by 100, something like that. Yeah, let's do that, and then let's redeploy that change.
00:18:21.820 - 00:19:07.014, Speaker A: Okay, so now if we come over here and we make our change, we say, what's up? And hit send. What do we see? That happens. Now, the price is it's got a curve, right? We got this cool. Not only is it able to accept a value and anyone can interact with it, but it's also on a price curve, and we can start doing some really interesting things with our smart contract. Okay, so at this point, I do want to kind of show a little bit more. Let's see here. So if you kind of are just getting started with smart contracts or writing smart contracts, scaffold ETH is just a good solution because, like I said, it comes with kind of all the stuff you need really quick.
00:19:07.014 - 00:19:24.566, Speaker A: Shill is if you guys are interested in kind of like, testing your ability and kind of going through the process of building different kinds of apps, I would recommend checking out Speedrun Ethereum. Speedrun Ethereum is cool because you can just connect your wallet and you can kind of go through various challenges. I need to unlock this real quick.
00:19:24.608 - 00:19:25.360, Speaker B: Let's see.
00:19:26.930 - 00:19:40.980, Speaker A: So it's got obviously a Web Three type of experience where you can check in with your MetaMask. I don't know why it's not working right now. Make sure I'm on the right a second here.
00:19:41.350 - 00:19:41.762, Speaker B: Okay.
00:19:41.816 - 00:19:43.262, Speaker A: Connect wallet. MetaMask.
00:19:43.326 - 00:19:44.322, Speaker B: All right, there we go.
00:19:44.456 - 00:20:52.134, Speaker A: It's got this cool experience where you can actually go through and do different challenges, right? So, like, the very first challenge is you build an NFT, deploy an NFT, then you do a decentralized Staking app, a token vendor, and then eventually you actually get invited to what's called the Build Guild, or the Biddlegill. The Biddle Guild is a collection of developers, myself, and there's some other build guilders here that are trying to help the ecosystem and bring it forward by providing value as enhancing Scaffold ETH or just doing things in the environment to help support Ethereum. And the cool thing is, if you actually become a part of the Build Guild, you can do some work for the Build Guild, and you can be incentivized to do that and actually get streamed. ETH, if you become a core contributor or someone that's involved in the Build guild. So since the Build guild has been out, there has been over 353 ETH that has been streamed to other developers and we have about 700 other builders or people that have interacted with the Build guild and about 700 different builds of Scaffold ETH. So it's a really cool way for if you guys are trying to get involved in a community to kind of do that. So that's my real quick shill on if you're getting started.
00:20:52.134 - 00:21:24.386, Speaker A: Those are kind of great next steps for you guys even after the hackathon. But if you're building a hackathon project, build it on Scaffold ETH because it's going to be a huge head start for you. And another thing too is if you go to Scaffold ETH and you go to the core GitHub repository, there's two things. One, there's a Scaffold ETH examples directory which has a bunch of starting points for like ERC, 720, 111, 55, you name it. You can just come over here and just do a search. So let's say I want to search like 721. It's got an example of what that would look like.
00:21:24.386 - 00:22:14.174, Speaker A: Or you could just do like NFT and then there's some NFT examples in here as well. So check out that and you can essentially fork that specific version and then you have a starting point for your project so that you don't have to reinvent the wheel and it really gives you a leg up on getting started with the hackathon. So that's my recommendation. Now, there's another couple of things I always get asked, like, okay, well, what if I like Next JS versus React? Or what if I like TypeScript versus JavaScript? There is a new version of Scaffold E, so it's called Se Two and I'd recommend checking it out. It's a special GitHub repository. You can come down here and do a search for it. It's Se Two, so it's in a test, so it's still being tested.
00:22:14.174 - 00:22:55.470, Speaker A: It's not the full on replacement for Scaffold ETH, so it doesn't have a lot of the forks that you would find with the original version, but it is a little faster. And if you feel more comfortable with NextJS and with TypeScript, that might be something that you guys can try out if you're competing in the hackathon. I would recommend though to probably use the very first version of Scaffold ETH just because it's a little more vetted and it's got more starting points right for you. I want to show you what Scaffold Two looks like real quick. So I'm going to have to just shut down this R1 quick. So let me do that. And then I've got copy of here, so I'm going to do the same thing.
00:22:55.470 - 00:23:20.470, Speaker A: I have se. Two already checked out. I'm going to do a yarn chain again, this is if you're using just separate windows. Second window, I'm going to do a yarn start, right? And then in the next window I'm going to do yarn deploy. Okay, so contracts deployed. Looks like it's up and running. Let's take a look.
00:23:20.470 - 00:23:24.276, Speaker A: Boom we'll go. 3000, same port.
00:23:24.378 - 00:23:25.124, Speaker B: There we go.
00:23:25.242 - 00:23:56.060, Speaker A: So looks completely different. So pretty much all the demo that I did is not going to make sense. But it's got the same concepts, right? It's got the burner wallet, right? You can do the same thing. You can press a button to grab funds from the faucet. You can just have the Debug contract folder, or a tab, I should say, where you can actually test your read and write functions. You can see your variables listed, you can see the contract and how much balance it has. And then there's an example UI as well, which is a little bit more enhanced, and it's built again on next JS.
00:23:56.060 - 00:24:14.580, Speaker A: So depending on, like I said, how comfortable you are with dealing with maybe some caveats with Se Two, this would be an option for you guys as well. So leave that up to you guys. You guys can decide. So that's awesome. All right, so we got five minutes for questions. So I know there's going to be some questions, so let's tackle those.
00:24:14.650 - 00:24:15.270, Speaker B: Yes.
00:24:16.360 - 00:24:28.328, Speaker C: I like how Scapuldy helps out people like me who enjoy solidity, but I hate front end development. And I know you didn't want to go into it, you didn't want to.
00:24:28.334 - 00:25:10.520, Speaker A: Go into it, but I'm wondering, is there like some kind of demo you can show on how somebody like me can get started with the front end using Scaffold? Yeah, it definitely is a little bit of so basically the question was for people that are more into writing smart contracts and more interested in the back ends and not necessarily front end developers, where do you get started? So some of the challenges have some the Scaffold Speedrun Ethereum challenges have some level of stuff you do with the UI. But let me just give a real quick run through of it so you can kind of have a start. So here in React app, we have the React app folder, and then we have the SRC folder, and then inside of there, there is basically the not the components folder, but the views.
00:25:15.100 - 00:25:15.464, Speaker B: Yeah.
00:25:15.502 - 00:25:52.436, Speaker A: So app JSX is kind of like Scaffold ETH app, right? So you can think of this as kind of everything that's already written for you. All the variables that are defined, all the functions, all the hooks and stuff like that are already loaded for you. And so a lot of the magic sauce that you see is what you see here inside of the Views folder is where your home JSX files. So let me go back to Scaffold. I don't have the other one loaded. But you saw earlier there was some tabs, right? The very first tab is kind of where you would build your app. So you would focus on doing stuff inside of that kind of like home folder and then.
00:25:52.436 - 00:26:33.984, Speaker A: The debug contracts is like for that. So Home JSX is that kind of first tab that just has some kind of, like, examples for you and it just kind of gets you up and running. Well, it's getting dark in here. And then there's an example UI area, which is probably what I would recommend for you because that's going to give you some examples of how you interact with signing a transaction or sending a transaction or getting some kind of value from the smart contract or reading a value. So example UI, and then there is also some stuff in hints, but really, example UI is probably what you're looking for as kind of that help that hand holding. And it gives you some examples as you go through here and you can see what they look yeah, yeah.
00:26:34.022 - 00:26:34.336, Speaker B: Thank you.
00:26:34.358 - 00:26:36.790, Speaker A: Yeah, no worries. All right, what do we got? What else?
00:26:37.400 - 00:27:05.064, Speaker D: Just to add to that question, because I know in the Scaffold ETH organization, there's some very work in progress repositories for extracting out some of you guys, like the hooks and components that are being used in Scaffold ETH. I haven't read anything about it in terms of what the long term goal is, whether or not that is something for kind of someone with the same profile of making it really easy to have address input or all these other things that I think I've seen being actively developed.
00:27:05.192 - 00:27:10.750, Speaker A: Yeah, I mean, I don't know what the goals are. I don't know if Osama's coming up here, not to throw you under the bus there.
00:27:13.600 - 00:27:15.248, Speaker B: We thought that each hooks was going.
00:27:15.254 - 00:27:44.840, Speaker C: To be a thing in Scaffold One, and we pulled out the hooks and components, and then Wagme made the same thing and made it popular, so we threw ours away. Okay, so we use Wagme, but when you're talking about that address component, there's a really good one in Scaffold too, but it's still in Scaffold. We need to make it into NPM components eventually, so you can just install just the address input if you want it. So there are components, but they're still built into Scaffold right now. But feel free to steal them and take them out. Sorry.
00:27:44.990 - 00:27:54.700, Speaker A: Yeah, TLDR Scaffold Two has good address input and we're using Wagme. Wagme. I like youth folks.
00:27:55.840 - 00:27:56.524, Speaker B: All right, cool.
00:27:56.562 - 00:28:16.110, Speaker A: What are the questions? Which libraries are we using for Scaffold Two? It's probably scaffold next. JS for next. JS okay, yeah, me Rainbow Kit.
00:28:18.050 - 00:28:18.366, Speaker B: And.
00:28:18.388 - 00:28:46.130, Speaker A: Then a bunch of Arga column for like, CSS and Tail Window. And there also is a next JS build of Scaffold ETH one. So you can use that. If you just go in here, there's a Next JS TypeScript build. It works pretty well. So if you don't want to use Scaffold E Two, you still want to use Scaffold ETH, that might be another option as well. Awesome.
00:28:46.130 - 00:28:51.820, Speaker A: Thank you guys so much for coming. And if you guys have problems let me know if again.
