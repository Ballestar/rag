00:00:00.170 - 00:00:15.214, Speaker A: Well, let's start over. Hi, welcome to the building on Compound protocol. We have Adam Bavosa here from our sponsor Compound, and he's going to be running this workshop today. Adam, I'll leave it to you to introduce yourself and get started.
00:00:15.412 - 00:00:38.802, Speaker B: Sweet. Yeah, thank you. I'm happy to be here. Happy to be back at Hack Money for the second one, and happy to be at E Global Hack done once again. So, yeah, I'm Adam and I work at Compound Labs. And today I'm going to be giving a little code workshop on how you can build on top of the compound protocol. And we have some sponsored bounties.
00:00:38.802 - 00:01:14.254, Speaker B: So this workshop will help you go towards those bounties, give you some education there so you could get started. Also some open source code, which is great. So I'm going to share my screen and I'll have a little presentation for you all. Okay, here's my slide deck. Great. So happy to be back at Hack Money. So I'm Adam, and I'm the developer relations lead at Compound Labs.
00:01:14.254 - 00:01:39.786, Speaker B: I'm here to help you out with your compound protocol related development projects. I'm available in discord and also on Twitter. You can ask me questions there. I give help to developers all the time. And there's a great community in our discord. So if you show up there and look for development help, there's lots of great people there to help you out. So today I'm going to go over our bounties real quick.
00:01:39.786 - 00:02:14.930, Speaker B: I'll explain what the compound protocol is. If you're not familiar, I'll show you some developer resources so you can start writing code right away. And also give a little dev workshop to give you a preview of what it's like to build on Compound. So compound Grants is an independent organization. They are able to compensate developers for building cool stuff on Ethereum and Compound. So they are sponsoring Hack Money this year. Compound Grants Awesome Organization.
00:02:14.930 - 00:02:53.490, Speaker B: You can apply for grants at any time. They're super cool. They are sponsoring Hack Money, so the bounties are thanks to Compound Grants. So the bounties are the project with the most original use case for supplying assets to the compound protocol. Also the most original use case for borrowing assets from the Compound protocol, and also the most original open source interface for Compound. All of these bounties are for two and a half. There's some more details on the Compound Grants website@compoundgrants.org.
00:02:53.490 - 00:03:59.174, Speaker B: Great. So Compound compound is a protocol on Ethereum, and what it enables is for developers to build applications so the users of those applications can supply their crypto assets and earn an interest rate on those assets. So currently the protocol supports eleven assets and users can supply them for any number of Ethereum blocks and earn interest on their assets. So at the current time, there is about $12 billion worth of assets supplied to the compound protocol. And the other side of supplying is borrowing assets. So users that supply assets as collateral can also borrow assets from the protocol. And the interest that borrowers pay for borrowing is what the suppliers earn as interest for supplying.
00:03:59.174 - 00:04:37.270, Speaker B: So let's say you have a whole bunch of WBTC, you can supply that to the compound protocol, and you can borrow other assets like USDC against your WBTC by using compound. So if you supply an asset, you earn interest, and if you borrow an asset, you pay interest. So that is the gist of the compound protocol and how it works. There are eleven supported assets at the moment. There were two added very recently. Those are chain link. And true USD, the stablecoin.
00:04:37.270 - 00:05:13.066, Speaker B: All of these assets are able to be supplied to the protocol, but only some of them are able to be used as collateral to borrow assets. So you can borrow any asset and supply any asset, but only some assets are capable to be used as collateral at the moment. And there is constant changes to the protocol through compound governance. So, yeah, here's the current supply and the current borrow. So there's about $5.3 billion worth of borrow. And of course, like I said earlier, there's about $12 billion worth of supply.
00:05:13.066 - 00:06:12.500, Speaker B: And of course, as assets move in and out of the protocol and prices change, those amounts change all the time. Yeah, so at the moment, there's about 290,000 suppliers and about 8000 borrower accounts. Those are ethereum accounts that are interacting with the protocol. So another important concept in the compound protocol is governance. So the way that the smart contract code changes in the compound protocol is completely through decentralized governance. So it's now been about one year since the compound governance token was created, and it is slowly being distributed to all users of the compound protocol. So if you supply assets to the protocol or borrow assets from the protocol, you slowly earn a drip of comp token that is accrued for your address, and you can claim it at any time.
00:06:12.500 - 00:07:18.902, Speaker B: And what you can do with this comp token is vote on compound governance proposals. So those that have enough comp voting weight at their address can create proposals which are code changes to the protocol. So let's say you want to add a new asset to the protocol, or you want to change an interest rate model, or change a reserve factor, something like that, you can write the code, deploy it to the blockchain, and create a governance proposal. And then all of the comp token holders can vote yes or no for that code change. So if a compound governance proposal has enough votes in favor and it succeeds, then the code on chain changes based on that new proposal. So that is how code changes are made and is done completely through decentralized community governance. So you can check out the smart contracts on GitHub, they're available in the compound finance github.org,
00:07:18.902 - 00:07:52.862, Speaker B: it's open source and you can check it out and start building on the protocol right now. So, like I said, there's the Comp token, which is the Compound Governance token. Here is the flow for change proposals. This changed very recently. There was a proposal to change the voting delay. So once a code change is made, a user can propose that the code change be implemented in the protocol. And there's a two day waiting period.
00:07:52.862 - 00:08:59.740, Speaker B: This is to give the opportunity to all users and fans of the protocol to check out the code, make sure that it does what it says it does, there are no bugs, stuff like that, sort of give their feedback on the forums or in discord. And once that two day proposal wait has passed, then there's three days where all delegates and holders can vote. So they can vote yes or no on the proposal. And once voting ends, if the proposal succeeds, it goes into the time lock for an additional two days. This gives projects that depend on the protocol as infrastructure the opportunity to update their apps to reflect the pending changes to the protocol. So in that two day period, folks can update their apps to accommodate the new changes. And then after two days, anyone can call the execute function, which will officially change the code of the protocol to include the newest code change.
00:08:59.740 - 00:10:20.018, Speaker B: If you go to Compound Finance Governance, you can check out the Governance dashboard, which will show you your voting weight if you connect your wallet, and also show past proposals a little information about them if they succeeded or failed. So you can learn about the history of compound governance if you check that out on the Compound Finance website, there is also a leaderboard which shows the top voting weight addresses. Addresses that have more than 100,000 comp delegated to their address are able to create code change proposals, and everyone else can vote on those proposals. So if you're familiar with Compound, you might have heard about Gateway. Gateway is completely separate from the V Two on chain protocol. We call it V three. And basically what it is, is it enables supplying and borrowing of assets to go beyond Ethereum and create a cross chain world where Gateway is its own chain and other chains can supply assets as collateral by using a Star port.
00:10:20.018 - 00:11:08.286, Speaker B: So say you have Tezos or you have assets on polygon or another chain, you can lock them in a Star port on that chain. The Gateway chain will read the events of the locked assets on other chains and have account of that collateral on Gateway. So once collateral is locked in a Starport, users can begin earning interest just like they do in V Two. Except in V Three, it is earned in cash, which is a unit of account on Gateway. It's pegged to one dollars, and all interest is earned in cash on Gateway. And also interest is paid in cash on Gateway. So Gateway is currently in development.
00:11:08.286 - 00:12:05.362, Speaker B: It is in testnet right now, connected to Ethereum Ropsten testnet, and it's looking to go to Mainnet hopefully sometime this year. So I just wanted to give a little preview to Gateway for you all because we get lots of questions about it, but the bounties in the Hack Money hackathon will be completely for V two Ethereum based compound protocol. So here are the resources for today's workshop. You can head over to Compound Finance Docs to check out our Smart contract documentation. All of the addresses on each of the testnets and also Mainnet for all of our contracts are available there, as well as API documentation and Compound JS SDK documentation. In my workshop today, I'm going to be using the Compound JS SDK. So all the docs are available there.
00:12:05.362 - 00:12:53.634, Speaker B: On our website you can check out Governance as well. Like I showed my previous slides, if you want to join the conversation in Discord, come to Compound Finance slash Discord and join our community. There's lots of developer guides as well as education resources on the Compound Medium blog and that is also linked from the docs. And of course you can head over to GitHub and check out our GitHub organizations which have open source code and also the Compound Protocol source code. So you can check that out. Here is a link to the repository for the workshop I'm going to be going through today. So you can visit that URL to go to the repository, or you can scan this QR code and head over there.
00:12:53.634 - 00:13:33.220, Speaker B: So I'm going to give everyone an opportunity to take a pick of this QR code real quick so you can head over to the repository. All right, so before I continue, I just want to say thank you again one more time to Compound Grants. They are the ones sponsoring hack money and they're a great organization helping developers get compensated for creating their code and apps and protocol changes for Compound. So head over to compoundgrants.org. There's a request for proposals there. So if you want to find something to work on, there's a list there. So, very awesome organization, happy to work with them.
00:13:33.220 - 00:14:13.422, Speaker B: Great. So that is my slide deck. Next I'm going to go through my workshop. So here is the GitHub repository. I'm going to be building a web app, a simple HTML CSS JavaScript app of an app that allows users to supply assets to the protocol and also redeem their assets later once they want to take their interest. So here's the repository. I already have it on my computer.
00:14:13.422 - 00:14:49.178, Speaker B: So I'm going to pull up the code now. So we've got HTML. I'm going to run a local web server so we can check out the app. So I'm going to run Http server. This spins up a local web server and at this address I could go to my browser and check out the app. So I have my page here. Here's my interest rate app.
00:14:49.178 - 00:15:42.826, Speaker B: It has a button to enable Ethereum and also a way to supply and redeem Ether. So I also have my developer console open so we can see any errors that pop up. So I'm going to connect my MetaMask to the app. So instead of using Ethereum mainnet, I'm going to use localhost 85 45, which is my Ganache. So this way we can have a local blockchain running on my machine and use that as like a test environment. So I need to run that first. So I'm going to use Ganache CLI, going to head over to my terminal, make another terminal window, and I'm going to run this command I have saved here.
00:15:42.826 - 00:16:17.602, Speaker B: It's ganache CLI. I'm going to fork mainnet. You can grab a JSON RPC URL to connect to the mainnet blockchain. You can grab that for free at infura IO or Alchemy.com. I also have a test mnemonic of Ethereum accounts that I only use in my test environment pointing to Mainnet. So I'm using a chain ID of one, and also I'm unlocking the cUSDC address, but I will explain why later. It's not important right now.
00:16:17.602 - 00:16:44.700, Speaker B: So, going to start up this localhost chain. And each of my accounts here have 100 test Ether. So I can do stuff in my dev environment. So I'm going to try to connect again. It nice. Okay, so my local host account has 100 Ether. Great.
00:16:44.700 - 00:17:33.180, Speaker B: So let's check out the HTML that makes this project. So we're importing some CSS, which I'm not going to go over. We have our interest rate app. We have our enable button, which is that big blue button. I already have the account connected, but if I were to disconnect it and refresh the page, I get an error in the console because the JavaScript is trying to use the blockchain, but it can't because Ethereum hasn't been enabled in MetaMask yet. So recently MetaMask requires you to have a button like this to enable Ethereum. So I'm going to enable it, choose my wallet of choice, click Next Connect.
00:17:33.180 - 00:18:02.270, Speaker B: And now if I refresh the page, no errors in the console. So that's how the Ethereum button works. I'll show you the JavaScript soon. I also have a box here where I enable users to supply their Ether. So there's a label of ETH. We show the current APY of ETH, the percentage that you earn per year. And also we have a button and an input for supplying.
00:18:02.270 - 00:18:39.950, Speaker B: And also redeeming of C tokens. So you can see that here we have our APY. It's currently zero point 14% for Ether. And we can supply or redeem as well. So let's head over to the JavaScript, which is the fun part. At the top we have a reference to compound JS. I forgot to mention in the HTML we're using compound JS, which is the SDK for JavaScript for doing things on the compound protocol gives you nice one line methods for doing stuff like supplying and redeeming.
00:18:39.950 - 00:19:16.694, Speaker B: So I'm creating an instance of the SDK in my app. I'm using the Ethereum Provider. Window ethereum. Then I'm quickly grabbing each of the HTML elements so I can reference them in JavaScript. Here's my ethereum button. When I click that enable Ethereum button, that big blue button, we're sending a request that enables us to access the accounts in MetaMask. Next, we have event handlers for our buttons.
00:19:16.694 - 00:19:53.800, Speaker B: So if we want to supply, we would hit that supply button. We'd fill a number in here and hit the Supply button. The amount comes from that text box and we're calling the Supply helper function I made. So basically what it does is it makes sure that there's a number in that text box, not a letter or anything else. And then we do a transaction. So we're creating an Ethereum transaction by calling compound supply. We pass the asset type, which is Ether, and also the amount.
00:19:53.800 - 00:20:34.450, Speaker B: So once the transaction goes through, we log in in the console so the user can check out their transaction. If something goes wrong, we alert it so they're aware that their transaction did not succeed. There's also an equivalent redeem function, one liner, nice and simple. Again, so that would happen when I hit the redeem button. And there's one more function, a calculate APY. So compound JS allows users to do not only compound protocol functions, but also Ethereum based functions. So we can read from the blockchain.
00:20:34.450 - 00:21:11.710, Speaker B: We're able to pass an address, an Abi that we can type out, and also parameters for the function. And we can pass a provider. So this will read the supply rate per block directly from the C token contract. So that's how much interest is earned per block. And we can use this equation here where we scale up to weigh. So one times ten to the 18, the amount of blocks per day based on 13.15 2nd blocks.
00:21:11.710 - 00:22:06.158, Speaker B: And we have 365 days per year. If we use this equation, we can find the APY percentage and this function will return it. So when the page loads, we're running our event listener for page load and we grab the ETH APY and we put that into the text box on the page. So when our Ethereum provider was not connected, this number did not pop up. But once we're connected to the network, we can calculate the APY and that's zero point 14%. So if we want to check to make sure that that's correct, you can head over to Compound Finance. And if you click on Markets at the top, you can head over to the Markets page and see that the current APY is zero point 14%.
00:22:06.158 - 00:22:36.774, Speaker B: So our app is correct in calculating that. So I'm going to quickly supply some assets, show you how that works. So we have 100 ETH. I'm going to supply five ETH. So I'm going to hit the supply button and MetaMask creates a transaction. This is powered by compound JS. So we're going to send five Ether to the compound protocol using the Mint function, and there's a little bit more than five for the gas fee.
00:22:36.774 - 00:23:02.606, Speaker B: So I'm going to hit confirm. We currently have an error because Ganache just got booted up. So the account is confused. So I'm going to reset the account in MetaMask. So the nonce is correct. Okay, I reset it. So I refresh and I'm going to try that again and try and supply five E at our transaction confirm.
00:23:02.606 - 00:23:38.320, Speaker B: And now it actually worked. So if I pull up my Ganache CLI, you can see the transaction happening. And we should see that I now have a little bit less than 95 Ether, and my amount of C ether should go up. So C Ether is about 50 to one. So that ratio is always changing such that users can redeem more ether for their fixed amount of C ether. So as the block height goes up, they can redeem more of their assets, so they're earning interest. So we get about 250 C ETH in return.
00:23:38.320 - 00:24:15.234, Speaker B: And of course, I can redeem that. So I'm going to redeem 200 of the c ETH. MetaMask is going to pop up again, thanks to that redeem function in our JavaScript code. And I'm going to hit confirm, and we get another transaction logged. Here another transaction in Ganache CLI, and we're going to see my Ether amount go up and my C ETH amount go down. So MetaMask needs to cook for a second and make its requests to Ganache. So it looks like we're getting some balance.
00:24:15.234 - 00:24:37.402, Speaker B: Yes. Okay, so my Ether went up to 100, almost 100, and my C E should go down. Now it's down to 50. It went from 250 to 49.44. Great. So the next part I'm going to show is, as you know, that there are eleven assets that work with the compound protocol. I'm going to show how to use it with an ERC 20 token.
00:24:37.402 - 00:25:06.826, Speaker B: So quickly, I'm going to go back to my repository. I've already written the code for this change. If you go to pull requests and support USDC in the app, we can see that with a little bit of code changes, we can support USDC. So I know I'm running low on time, so I'm going to do this pretty quickly. I'm going to copy this HTML and put it in the HTML here. So I'm just making another box. So we have this ETH UI here.
00:25:06.826 - 00:25:47.350, Speaker B: We're going to have another one beneath it for USDC. So, yeah, we have another box. We're going to calculate USDC APY and have a supply and redeem button the JavaScript side. We're going to wire up those buttons, going to grab references to them. So now we can access each of those Dom elements. We're going to add some button event handlers, just like we have for the Ether ones. So that way we're able to supply and redeem our cUSDC.
00:25:47.350 - 00:26:15.306, Speaker B: And the last thing we're going to do is calculate the APY when the page loads. So I'm going to go down to that event handler for the load. And in addition to ETH, we're going to get the USDC APY. So I'm going to refresh the page. Now we can see that we have USDC as well. So we have 1.91% APY on USDC.
00:26:15.306 - 00:26:58.366, Speaker B: So if I go to my MetaMask wallet, you'll see that I don't have any USDC. So I'm going to do something that we can only do on localhost. I'm going to take some USDC from an address. You can see that I initially unlocked the cUSDC address. I'm going to take some USDC from there to use in my app. So I could do that by going to one of my other repositories, the supplying assets to the compound protocol repository. It's linked in this repository README so we can head over there and I have it pulled up.
00:26:58.366 - 00:27:28.006, Speaker B: So I'm just going to run the USDC script. So basically what that does is it takes 50 USDC and puts it in my account. So if I go over here to MetaMask, I now have 50 USDC. Yes, it's going to pop up here. So now I can supply, so I'm going to supply 25. I get two different transactions. So the first one is going to be the ERC 20 allow.
00:27:28.006 - 00:27:56.302, Speaker B: So I allow users to have their assets sent to the protocol. I'm going to confirm that as soon as it mines, it's going to pop up another one for mint. So there's zero ether this time, except for the gas fee. And we're going to mint cUSDC. So if I come back over here, this number will go down to 25 and my cUSDC number will go up. I'll pull up my ganache CLI again. There we go.
00:27:56.302 - 00:28:44.318, Speaker B: Okay, so we have 1133 cUSDC and 25 USDC. So, yeah, that's how you build an interest rate app on the Compound protocol that supports both ether and ERC 20 tokens. I know I'm running low on time, so that's the end of the workshop. I can answer questions now quickly if anybody has any questions about code or projects. Okay, I'm going to pull up the chat. Okay, so I see Ian is in the chat. Definitely use environment variables so you don't reveal any secrets, of course.
00:28:44.318 - 00:29:03.060, Speaker B: And yes, Ian's frequent in our discord, so I'll be seeing them there. Okay, looks like there aren't any other questions.
00:29:06.870 - 00:29:17.420, Speaker A: Okay, if there's no more questions, I'd like to thank compound one more time and Adam for running this workshop. Thank you guys for coming.
00:29:17.790 - 00:29:18.938, Speaker B: Thanks for having me.
00:29:19.024 - 00:29:22.010, Speaker A: Great day. You guys know where to find him in the discord?
00:29:22.910 - 00:29:25.240, Speaker B: I'll be there. Bye, everyone.
