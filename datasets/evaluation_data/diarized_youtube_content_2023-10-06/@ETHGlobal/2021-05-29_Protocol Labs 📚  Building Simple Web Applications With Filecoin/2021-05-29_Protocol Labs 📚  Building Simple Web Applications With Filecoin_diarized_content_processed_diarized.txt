00:00:06.480 - 00:00:08.470, Speaker A: Just waiting for the stream to go live.
00:00:26.700 - 00:00:29.290, Speaker B: It'S up. Great.
00:00:29.900 - 00:00:43.708, Speaker A: Okay, thank you everyone for joining. We have cake from Protocol Labs who's going to give a talk titled building Simple Web Apps with filecoin. I'll let you take it away, Cake.
00:00:43.884 - 00:01:25.116, Speaker C: Thank you, Heather. And thank you everyone who's taking their Saturday today to build with me. I have a cool workshop today. We're going to split it up into a lot of cool segments where you can kind of follow me as I build, live, and make a lot of mistakes. And I hopefully can show people that it's not too hard to store data with Filecoin IPFS. You can just kind of quickly whip together an example application and maybe turn something bigger. So I think hopefully whoever is working on stuff on this hackathon or this webtree weekend can have a good time.
00:01:25.138 - 00:01:26.110, Speaker B: With some of this.
00:01:29.700 - 00:02:05.724, Speaker C: For some context. My mental model for Filecoin is probably different than a lot of the other people's discussions and social media. I think it's pretty simple what people want to do with Falcon. They just want to store data, find data, and retrieve anything anytime. And there are a lot of other terminologies that kind of get thrown around. But this is really as an application developer, I want to provide this value prop to my end users. And so just a quick reminder, everything we do is open source, and I'm really happy to help and give you all our time.
00:02:05.724 - 00:02:39.588, Speaker C: I'm a total nerd, so all I do is really program all the time. And I'm more than willing to just help you work through these projects. So check us out online. There'll be blinks later. And also I want to give a quick plug from my sponsor. We have micro grants, and so if you're building something really cool with IPFS, Filecoin, Lip, PDP, we'll go into those topics later. There's five grand to take it to the next step, so you should definitely take advantage of this.
00:02:39.588 - 00:03:08.644, Speaker C: You don't have to work alone in a room by yourself. You can reach out to us, get a grant, get some help, and if you have a bigger idea, talk to us too. We have a lot of great people who have ways to help you and move you along the process. And so as I was talking about earlier, there's two fun worlds. There's a building of textile hub, which I'm like the biggest textile fanboy, hype, man, whatever you want to call it. I think what they do is incredible. I think the team is incredible.
00:03:08.644 - 00:03:52.060, Speaker C: I think this year we're going to make a lot of cool stuff, so you don't want to miss out on the stack. I think it's kind of like using Amazon services APIs that are way easier. And then we also built this thing recently called Estuary, and I think it's a really cool way to upload data to the Filecoin network and really see deal progress and see which miners you're working with. And it's like part consumer tool, part developer tool. I'm really excited to show you guys. So build Textile hub. If you're on Twitter and you see what they're sharing a lot, there's buckets, there's threaddb, there's powergate, there's documentation for all of it.
00:03:52.060 - 00:04:39.292, Speaker C: And I'm here to kind of show you guys how this is going to be a lot simpler with just a simple code example. And the example we will be going through is this repo I keep sharing nonstop. Sorry if it's annoying, but it's called Nextbucket. And basically it's like an example, NextJS application that you can basically just use a little PDP identity and then you can get a file client address right away, but you don't even have to use it. It's kind of just a thing that you have. And then you can create a bucket upload a file and it's really quick. So we'll walk through setting this up because I'm curious, how hard is it today? I haven't looked at the repo in a while.
00:04:39.292 - 00:05:32.856, Speaker C: So we'll do that together. And part of the reason why you want to use a I don't think I ever talk about this when I give a workshop. It's part of the reason why you want to even use a service provider like Textile is because maybe you don't want to deal with all the state that's involved with deal transfer. And maybe you don't want to infer all the values that are tough to infer because you don't know the file coin spec and you don't know what sectors even mean. You're just an application developer and you want to build an app for people and you want to get files online. And so Textiles API, I just showed some code that looked complicated, but this probably looks complicated, but we'll walk through it. This is all you really need to initialize your textile bucket and create buckets and upload files.
00:05:32.856 - 00:06:09.604, Speaker C: And so we'll do all that. And here's another example of why Textile is valuable, is because maybe you don't want to manage all these go dependencies when you're running your own go server or go code or node. And so another advantage to kind of just using a simple template and using a library and letting other people run infra for you as an application developer. And so here are some examples of things that I've built that are also part of the example that I'll show you guys today. So we have storage market, we have file app. This code is all open source, although this one's not very good. I apologize, but data is accurate.
00:06:09.604 - 00:06:41.030, Speaker C: So please battle me on the Internet if you don't think this stuff is accurate. Because of verified file coin storage deals, prices are near zero. So, I mean, say what you want and then here's my first test with Textile Stack, and you are able to make file coin storage deals. I went and verified my file coin address. I went and took a CID and put it on and put it through the flow, and it does work. So your source code for that too. So without further ado, let's do it.
00:06:41.030 - 00:07:17.452, Speaker C: Let's get into the code. And so I'm going to take a break from my presentation. I'm using Nova. I know Sublime Text Four is going to be available to developers soon, or I think it currently is, but I use Nova, and you can use any ID you like. Here I am at the application research repo. And right here, if I click on next bucket, people are wondering, okay, Jim, what are you going on about? What is this stuff? They'll read it. Why would I use this? Jim, you want to put things on IPFS easily.
00:07:17.452 - 00:07:39.540, Speaker C: You love using textile. Well, you might. Once you start using this, you can use any gateway to achieve your CID. CIDs are the whole topic. You have to understand later if you have no idea about the IPFS ecosystem or anything involved with it. MetaMask, it's probably like a foreign concept. Unless you maybe came from foundation, you used MetaMask to authenticate.
00:07:39.540 - 00:08:03.310, Speaker C: So let's just do this. So there's some setup steps. This is probably where most people turn. Know this whole Git Clone thing, this whole environment variable thing, gosh, what is that? Secrets? I don't know. So I'm just going to go here. I'm going to use this template, and I'm going to do it in my own repo. And I'm going to be like my cool storage app.
00:08:03.310 - 00:08:11.200, Speaker C: And this is a Cool Storage application, and I'm going to create a repository from template.
00:08:11.620 - 00:08:12.370, Speaker B: Cool.
00:08:12.820 - 00:08:36.088, Speaker C: Hopefully this goes quickly and there's going to be a lot of painful breaks during this things to come to load cool. So code. I'm going to clone this. And here's my terminal. Here's where I do software development. It's the real deal, as interesting as it is. I guess I'm going to do Git clone my cool storage app.
00:08:36.088 - 00:09:20.170, Speaker C: I'm going to go to CD, my Cool Storage app, and I'm going to LS you can see all the files here that I have in this. That's kind of neat. So, yeah, what are the steps? So here I ask you to create a M local file, and I'm using a Mac, but this also works on Linux. So you can just do do local. Cool. If you follow that step there, you're like, okay, Jim, like, whatever. Lshlt you can see it's there and you might still be like, Whatever.
00:09:20.170 - 00:09:28.010, Speaker C: So if you hit open, we can go to here's all the code I write, I guess.
00:09:30.960 - 00:09:51.904, Speaker B: Where is I can't find my own stuff. Where did I put this? Oh, sorry, guys. Cool.
00:09:52.022 - 00:10:23.500, Speaker C: So here's the app and then here's your M Local file. It's empty. Let's copy and paste this in and gosh. I need to get these keys right because I need these secrets to run this web app. And so I'm going to do what Jim says and go here. And this version might be out of date, so I go to releases and there's two six nine by Sander Pick. The cool guy does a lot of really cool stuff and I see like, okay, cool, there's billing, buck buck, I don't care.
00:10:23.500 - 00:10:30.830, Speaker C: Hub, I need this Hub thing. So I'm going to go to the Hub and I just want to click this.
00:10:33.200 - 00:10:33.756, Speaker B: Cool.
00:10:33.858 - 00:11:03.524, Speaker C: It's on my desktop. I think I downloaded it twice before. I'm going to open the archive and I got this Hub thing here and I need to go to it. So here's a trip through my computer and I'm going to CD into Hub V two. I'm going to LS sales, see all the files.
00:11:03.572 - 00:11:03.736, Speaker B: Cool.
00:11:03.758 - 00:11:22.844, Speaker C: There's an install. So here's how I install it. And it moved the Hub to this right here. And so I should be able to just type Hub, right? Like it should just work. And Hub is an application, an app download is from Internet. Are you sure you want to open it? Yeah, I want to open it.
00:11:23.042 - 00:11:23.404, Speaker B: Cool.
00:11:23.442 - 00:11:54.920, Speaker C: And so lets me do all this really cool stuff I need to log in. So I'm going to do Hub login and I'm going to use my Protocol Labs email. Please don't send me stuff that email. And I'm going to wait for the confirmation I got the email doing on my phone. Open on Google Chrome. And this is the kind of thing you see it's like smiley face.
00:11:54.990 - 00:11:55.770, Speaker B: Pretty cool.
00:11:56.460 - 00:12:14.480, Speaker C: Awesome. So I'm in the hub now. I'm logged in. Do Hub. Who am I? I'm slate clear. I don't know if that keys secret or whatever. Hub key LS.
00:12:14.900 - 00:12:17.776, Speaker B: Hub Key. LS I think. Cool.
00:12:17.878 - 00:12:34.230, Speaker C: Clear. So Hub keys create and I'm going to go to user group. This is a test developer account. So no problem with sharing keys on the Internet. I'm going to do no.
00:12:34.760 - 00:12:35.124, Speaker B: Cool.
00:12:35.162 - 00:12:57.660, Speaker C: So I have these keys. Now that I have a Hub key and a Hub secret. And yeah, because this is my test account, I am comfortable showing you guys these keys. But don't show when you're doing this. Don't tell me your keys. I don't want to know your keys. So Hub key here, secret here and then there's no feedback when this happens.
00:12:57.660 - 00:13:10.416, Speaker C: It's just kind of a thing you do when you're writing web apps and you put secrets into a file. There's no magic or anything like that, even though the term is secrets and maybe there was supposed to be some magic, I don't know.
00:13:10.598 - 00:13:10.944, Speaker B: Cool.
00:13:10.982 - 00:13:35.090, Speaker C: So now that we did that, you're probably like, all right, I'm going to go back to Jim steps, if you're still with me. And these are the last two steps you have to run. So we do NPM install and then we're going to do NPM run dev.
00:13:38.340 - 00:13:53.316, Speaker B: Cool. So localhost 301 and voila, we have.
00:13:53.338 - 00:14:20.140, Speaker C: The app running on our screen for a first time developer, you're probably like, what is going on here? There's like three columns. There's the name of the boilerplate or template. There's trader set token, there's use token, there's make file, storage, deals, bucket, archive history. That's a lot, Jim. Yes, it is. A whole bunch of stuff here. So let's go through each of them.
00:14:20.140 - 00:15:01.496, Speaker C: So in this API, we have add, file, create, delete, and list. We have filecoin, we have archive, which is another way of saying make storage, deal, get address, get archive history. That'd be like looking at your deals for a given CID. And then token generate. And so when I click on generate, I'm actually calling this code here and it's designed in a way that I think the reason why I use Next JS is this is a really simple thing to read. You can go here and you can look at the textile functions if you like, and create bucket or list buckets. They're all here.
00:15:01.496 - 00:15:53.180, Speaker C: Just kind of the simple function. If you read Textiles Docs, you'll probably end up at this point where you'll have to figure out this set up. And those are just two secrets that we added earlier. So I'm just going to generate a Lib PDP token, and you can take this Lib PDP token and you can put it in a database, or you can not use a database and just have the user keep it. But what you can do with it is you can authenticate to the textile hub with the keys that we provided. And through here, you will actually initialize this as a new user account where you have a file coin address, and you can verify this file coin just by clicking this link. You'll have to do some steps.
00:15:53.180 - 00:16:23.750, Speaker C: You have zero file coin and you have a link here. If you click this, it's actually an IPFS block. So you can see there's a textile seed. If I click on Data, you can see that this is with the contents of that bucket. And let's add a file to the Internet. So let's go to temp of Temps. I don't know what's in here.
00:16:25.160 - 00:16:26.324, Speaker B: Let's see.
00:16:26.522 - 00:16:28.660, Speaker C: I'll take my estuary folder.
00:16:30.460 - 00:16:31.272, Speaker B: And this.
00:16:31.326 - 00:16:33.050, Speaker C: Ping looks cool, I guess.
00:16:34.620 - 00:16:42.910, Speaker B: So we'll open that cool.
00:16:42.980 - 00:17:26.646, Speaker C: And then if you click this link right here, this is on IPFS. So if you change the gateway, even you can still retrieve it, which is really cool. So that's about the amount of time it took, I think, like roughly under ten minutes to get this template running where you can provide basically a storage application to people. You obviously have to change the UI. So let's go do that in public. That's where your fav icon is not very useful in index JS is where all the code is for this current page. And maybe I don't really want this sidebar.
00:17:26.646 - 00:17:53.480, Speaker C: I think it's kind of I'm not going to give this to my end users or whatever. And there's a whole bunch of stuff here that I don't care about. So you can just delete components and that will throw right. But you can do this. You can just get rid of the whole thing. Go into the components here. And actually I probably should bring it back because I actually need something from there.
00:17:53.480 - 00:17:58.054, Speaker C: So I'll bring it back. I need this loop PDP key.
00:17:58.252 - 00:17:59.494, Speaker B: I'm going to put this right here.
00:17:59.532 - 00:18:22.080, Speaker C: For now, I'm actually going to spend delete the sidebar completely. And maybe I don't even want to deal with this right now. The make filecoin storage deal stuff. Maybe I'm not ready for that yet. Look at it later. So let's just get rid of the right element here.
00:18:22.770 - 00:18:23.134, Speaker B: Cool.
00:18:23.172 - 00:18:38.660, Speaker C: So they just have this buckets experience and then maybe I just want to let's see, I'll go and go into app module and then take this left. Just get rid of dong completely.
00:18:40.150 - 00:18:40.514, Speaker B: Cool.
00:18:40.552 - 00:19:00.090, Speaker C: So I just have now like a storage app, right? And if I refresh the page, I'll lose this. But what I could maybe do is take this Lib PTP token, go here into M local and just add it Lib UTP token.
00:19:01.950 - 00:19:02.794, Speaker B: Cool.
00:19:02.992 - 00:19:29.090, Speaker C: And maybe I can instead of doing the whole setup in the beginning, I can go to index here and I can go here to just add as a token here to process M Lib P to P token.
00:19:31.210 - 00:19:34.694, Speaker B: And I can go here to my M local.
00:19:34.892 - 00:19:36.530, Speaker C: I spelt it differently.
00:19:36.690 - 00:19:42.410, Speaker B: Double check here. Index lit PDP Token. Cool.
00:19:42.480 - 00:19:46.140, Speaker C: They match up and then my state here.
00:19:49.230 - 00:20:06.720, Speaker B: See, let's just try this token. Is this props token.
00:20:10.260 - 00:20:11.010, Speaker C: And.
00:20:14.260 - 00:21:05.580, Speaker B: I need to change one other thing. It city it take all this do props token.
00:21:08.160 - 00:21:21.250, Speaker C: Then we can kill this sidebar and then.
00:21:25.050 - 00:21:31.254, Speaker B: Should work. Double check.
00:21:31.292 - 00:21:33.666, Speaker C: If we're even passing the to reboot.
00:21:33.698 - 00:21:43.600, Speaker B: The server, it.
00:21:58.630 - 00:21:59.746, Speaker C: We'Re not passing it.
00:21:59.768 - 00:22:04.018, Speaker B: Down because I did not restore this.
00:22:04.104 - 00:22:42.960, Speaker C: So token process m p to p. Token. Sorry about that. We take in the state that would happen later on and we basically put it here. It's in a loading state right now though. So.
00:22:46.470 - 00:23:10.840, Speaker B: There'S something I didn't do, which have a look here's. Page index. What else did I not do? I didn't do this.
00:23:14.200 - 00:23:17.152, Speaker C: I didn't get the file coin addresses.
00:23:17.296 - 00:23:32.780, Speaker B: And I didn't list the buckets. So that's something for me that to do. So do that real quicker.
00:23:35.280 - 00:23:36.172, Speaker C: Doing that.
00:23:36.306 - 00:23:45.820, Speaker B: So I actually need to do it here's.
00:24:15.340 - 00:24:18.216, Speaker C: Sorry about the quietness. I'm just kind of coding on the.
00:24:18.238 - 00:24:20.840, Speaker B: Fly and trying to figure out what I'm doing wrong. Cool.
00:24:20.910 - 00:25:06.120, Speaker C: So sorry about that. That was just a long way of me kind of messing around with my own setup. And I have finally figured out this right element here. And so that's how you can kind of in a few minutes kind of basically simplified application where it's just an app where you have files and there's the file that I used previously, I can add another file and you can basically just keep customizing this application. You can keep taking things out, playing around with it. So here is you can even get rid of this top thing. Maybe you don't like that, you don't need it.
00:25:06.190 - 00:25:06.712, Speaker B: Cool.
00:25:06.846 - 00:25:11.370, Speaker C: Now it's just a storage application. You can even go here and change this to.
00:25:14.220 - 00:25:18.700, Speaker B: Have a look in content buckets.
00:25:19.760 - 00:25:29.470, Speaker C: Maybe I just want to say like S Global Web three weekend storage application of the future.
00:25:30.260 - 00:25:31.104, Speaker B: Cool.
00:25:31.302 - 00:25:59.060, Speaker C: So that just changes real time. So that's a quick demo of basically how you can use this example like this to customize it, make it a hackathon project. You have file storage, it's working. If you take the Lib PDP token, you can basically turn it into like a simple app where anyone can add a file. You can share these files on the internet really easily. You have links to do it. Adding a file is super simple and hopefully that's really helpful.
00:25:59.060 - 00:26:30.080, Speaker C: And there's more examples like this. If you like this example, I hope I sold it well. But if you go into the file app, source code is here. Next storage deal is here. So if you go to Next Storage so you can check it out here at Storage Market. It's a way to just take any CID and pin it to the filecoin network. So I can go here and I can take the CID, although they're not going to like how small this deal will be.
00:26:30.080 - 00:26:38.992, Speaker C: So this is not going to work. But take the CID and double check its contents, right? And so, yeah, it's on IPFS.
00:26:39.056 - 00:26:39.572, Speaker B: Cool.
00:26:39.706 - 00:26:46.810, Speaker C: I can pick a minor. I just have this minor here already. So f zero 1119, three six.
00:26:48.620 - 00:26:48.984, Speaker B: I.
00:26:49.022 - 00:26:55.960, Speaker C: Can make a file coin storage deal and then I can afterwards if that succeeds.
00:26:57.740 - 00:26:58.600, Speaker B: Um.
00:27:01.180 - 00:27:48.948, Speaker C: Hopefully it does, but you guys get the gist. There's obviously sometimes some issues with making storage deals that we're always working through. But that wraps up, I think, the first part of this talk I wanted to give, which is kind of using textile hub, using Next Bucket and it's a really easy way to get started, really easy way to put storage deals or storage on the IPFS network. So back to my slides. Second part of my talk, the second example I'll give is with Estuary and something that we're building right now. We plan on doing an internal launch where people can help test the code and then later on in the year, hopefully get it out to everyone else. So you guys can all make filecoin storage deals with ease.
00:27:48.948 - 00:28:23.140, Speaker C: And so shout to my friend Andy who helped do some of the art here. And then I put a cube here. It's like some of the earlier artwork we did for Estuary thought was pretty cool. Estuary is automation tack. It allows anyone public data to store and retrieve it using a few API calls. It's for infrastructure operators, for developers, for file cling users. So the previous example was kind of for application developers who kind of just wanted to build simple apps and textile services they provide are absolutely outstanding for that.
00:28:23.140 - 00:28:59.584, Speaker C: But Estuary gives you a lot of details as a developer about what minor my data is on, and the receipts and the status and all the data. And we're going to walk through all that. So can't wait to show you. It's a full end end service. So you have all of the stack that we have, including documentation, including the website, including the node. You can run it yourself and you can provide the exact same service to someone else if you want to. And so there's docs, I brought out everything in a lot more detail.
00:28:59.584 - 00:29:50.784, Speaker C: So everything I'm saying is probably a lot more clear if you want to check it out. And we have a lot of API endpoints that you can expose to other people or you can run for just yourself that will be documented soon that expand the functionality of your applications. And so I'll give a demo of that right now. So if I go to Sri documentation right here, one thing we want to do differently with documentation this time around is we want you to be able to run the code on the side and get the curl commands. So with all of the suary endpoints of our hosted Estuary node, you can just run them in the browser, I mean command line. So there it is, you can just copy and paste them. It's really simple.
00:29:50.784 - 00:30:40.592, Speaker C: And Estuary is kind of a brand for two separate things. So Estuary Tech, the website is our hosted node that we allow people to come in, create file point storage deals, and all of Estuary stuff is available for you open source so you can run it yourself. And so what you're looking at right here is documentation for if someone else is running an SJ node. You can read through these docs and kind of get a sense of how to interact with their API, wherever they host it, whatever domain name they put it on. I'll let you read this yourself. Why you should care s three is not different than IPFS. I updated that just a few moments ago.
00:30:40.592 - 00:31:36.128, Speaker C: But how does Sri use filecoin IPFS? There's a lot of the components that are in existing IPFS nodes. There's Lib PDP there's. Go Lib PDP connection Manager go IPFS Block Store DHT Bitswap But what's different is that we've integrated a lot of the other filecoin modules and we use Lotus Gateway to read information about the chain and publish messages. We have a filecoin client that we also are open sourcing that you can use to do a lot of filecoin operations. There's a file coin wallet for automation and escrow funds, automated replication till six deals are active and on chain and this value is configurable to whoever's running their own Estuary node. Deal estimation, automated file coin retrieval if the CID is no longer pinned, bandwidth tracking, minor logs, performance tracking and deal lookup by ID. Some of the stuff is actually exposed on our website.
00:31:36.128 - 00:32:35.140, Speaker C: If you go here to Estuary Tech, you can see that we keep a public listing of all the miners that we work with. If we suspend a minor because we can't make deals with that miner, we'll actually go and suspend them and they can check and they can look at their errors. So here you can see that error logs are public and we can help work with the miners. The miner concept is kind of interesting because for someone who just wants to upload data to the filecoin network or to IPFS, they don't care about any of these minor or network type things or protocols or what stack you use. They just want a product. But if you're working on providing these tools or these services or platforms to people, you do have to care as a builder. So here is kind of like a way that we kind of are able to debug and look at deals and kind of see which one succeeded, which ones failed.
00:32:35.140 - 00:33:17.152, Speaker C: We have the stats here for every minor. So you can see with this minor we have had no deal success, but we know their lowest version. We know how much their deals cost. Again, file coin is pretty cheap if you're verified. But even if you don't have a verified client, it's still pretty cheap. They set the prices pretty low and then what they're asking for is at least 16 gigs when you upload a file there. And here's an example of I can just show you in some of our examples as we're doing our testing right now.
00:33:17.152 - 00:33:58.320, Speaker C: This is a deal with 6951 files and you can see that a few are active on chain and if you haven't made it, but we're actively debugging this. So anyway, you probably are curious how to use it. So what you're going to do is you're probably going to go and create an account and I'm going to show you what an admin account looks like if you want to provide admin accounts to your own users. So here are my files here's upload, upload a file, use a CID instead. Here's upload by CID. And so uploading a file is pretty simple. If I go to upload a file, go to a custodian and I go to files.
00:33:58.320 - 00:34:37.310, Speaker C: Let's say I want this video of this nice scene hit open. And this is kind of like typical stuff you see in other applications that provide file uploading. Cool. And it's already on IPFS here. So if you visit, this DWeb link should show up immediately. So it's pretty quick. And if you go here to the view staging area, you can see that we're going to wait a little bit before we make a file coin deal with it.
00:34:37.310 - 00:35:22.196, Speaker C: When you go here after a few hours, you'll see that these are previous attempts of me uploading files and then getting it on chain, where you can see the status here. You can see Pulsal receipts here. And you can also see once it's filing on chain, the file coin deal receipt. So if you want to prove to someone like, hey, this is going to be on the file coin network for a year starting Thursday, May 27 to May 15. Here's how much it cost me. Here's what the miner had to do as collateral to store it. This experience right here, the reason why I'm showing you is because it's all accessible through the API.
00:35:22.196 - 00:35:39.280, Speaker C: And so I'm going to go here to the API keys, and I'm going to generate one. And I don't care if people see this because I can delete all these keys anyway. So I always delete these after just revoke API key. And you can use this API key to do some cool stuff. So I'm going to keep this on my clipboard and go back to the docs.
00:35:40.340 - 00:35:40.704, Speaker B: Cool.
00:35:40.742 - 00:36:09.124, Speaker C: So all of these examples here are editable. So you can go here to this line and do APIs three tech and then just type in help. And you can just change these and play with them. And you actually can write out even like a miniature app in this little section. So the first thing that we do when we're trying out Estuary is we need to get an API key. And we'll do that here. We'll follow these steps.
00:36:09.124 - 00:36:34.676, Speaker C: And so you'll need to create an account, s three tech. If you want to create an account and you want an invite and you're serious about storing public, meaningful public data, click here to get an invite and fill out this form. And I'll get back to you real quickly and give you an invite key. So you can use S three's API to upload files during the hackathon or whatever. Set up an example application. Use API. You should set up an example application.
00:36:34.676 - 00:37:00.652, Speaker C: You can use our Nexus or our Origin repo. Origin is really cool. It's a static site kind of template that is using vite two and view three and TypeScript. And so we're not only a react camp here. Chris Warring did an incredible job busy setting this up. So if you want to build a static site, deploy to fleek, you can totally use this. And we're improving it week over week.
00:37:00.652 - 00:37:33.750, Speaker C: So watch this. So once you have an invite signed Estuary, you'll create a new account, generate an API key, and then you'll test your API key. And so I went and generated an API key here. And what I'm going to do is I'm going to replace this with API key and voila, it just works. I'm able to access my Estuary account information right through here. And then if. I want to replace this.
00:37:33.750 - 00:37:39.784, Speaker C: I can't that's not at a field, but I can go and I can.
00:37:39.822 - 00:37:47.770, Speaker B: Prep it here, really hacky, sorry. And just take this key.
00:37:52.640 - 00:38:05.596, Speaker C: I can also do this by the command line and it just works. So all our documentation allows you to kind of play with it, modify it, so you can easily do something like this and upload your first file.
00:38:05.628 - 00:38:06.352, Speaker B: This is really cool.
00:38:06.406 - 00:38:14.768, Speaker C: So with the API key, once you have it so let's copy and paste.
00:38:14.784 - 00:38:15.830, Speaker B: This back in.
00:38:20.120 - 00:38:52.032, Speaker C: You will see that you can take this little GUI, this example, and uploading a file to filecoin is as simple as going here, let's take this nature six video. Seems pretty cool. Nice trees hit open and I kind of like hacked together little. Probably like the least amount of effort progress response I can. So here's the progress in bytes. And when you go back to your.
00:38:52.086 - 00:38:52.880, Speaker B: UI.
00:38:54.580 - 00:39:33.256, Speaker C: And you go to staging, the file is there. So it's really easy to upload files to the filecoin network. Just a simple XHR http request. You can use fetch, too. So let's just use fetch as an example. Dietrich asked me if he understands correctly that the next buck example you started with is basically a quick start toolkit for building textile based application. And the answer is absolutely.
00:39:33.256 - 00:39:45.630, Speaker C: It is totally a quick start toolkit for building textile based application. So I can just replace all this. If you don't like looking at XHR HTP requests, you want something more simple.
00:39:48.510 - 00:39:57.360, Speaker B: And just take this. Take the API key.
00:40:07.170 - 00:40:35.260, Speaker C: You don't get any logs from this, but at least your code is more reduced. So if you didn't like what you saw earlier with XHR request messy, you just want to use fetch. Here's an example of fetch. Choose another file. I'm going to choose a small one because I'm not sure how long it will take. It's a nice video here and hit open. And there's no response because I don't have any code to update that we did this.
00:40:35.260 - 00:40:40.554, Speaker C: But I imagine that if I refresh this, it's there.
00:40:40.672 - 00:40:41.050, Speaker B: Cool.
00:40:41.120 - 00:41:08.302, Speaker C: So the file is there. And it's another example of how easy it is to get. Of course, it's going to take a while to load how easy it is to get files onto the filecoin network. Simple as that. And then obviously from this point, you're probably going to want to list your files. I mean, you got an API key, you're uploading a file and you saw that the file is uploaded. You probably want to list your files.
00:41:08.302 - 00:41:49.338, Speaker C: You can go here, replace this API key. And so here's an example of the output that you'll get. And TADA, you get a list of every file you've uploaded. So with these three simple API endpoints, or I guess two API endpoints, and then getting an API key, you are uploading files to filecoin. And you are also listing your files. And you can easily retrieve them through any IPFS gateway. So hopefully they demystifies difficulty and complexity that usually exists out there for anyone who wants to upload files.
00:41:49.338 - 00:42:24.090, Speaker C: I know that some people are like, it's really hard, but here's a live code example you can play with in the browser that allows you to do it. Now you're probably wondering like, okay, well, Jim, that's all nice, but I want to see the deal status. I want to actually understand what deals you're making with miners programmatically. I don't want to look at a gui. And so I can take this ID here, this 14, and actually see, I like this. NASA. Space settlements.
00:42:27.410 - 00:42:31.230, Speaker B: Maybe I'll pick a bigger file.
00:42:31.570 - 00:42:32.622, Speaker C: Oh, nature videos.
00:42:32.676 - 00:42:34.880, Speaker B: I like this 154.
00:42:35.570 - 00:43:11.660, Speaker C: And I can take this right here and then go to this one. And I can click on modify this, as simple as that. 54. And I can take the API key that I had, this API key, and I have all the deals now. And so I know everything about the deal, I know everything about the transfer, and I also know that this deal is not on chain based on this. So as a programmer, this is super useful, really easy. Just to get this information from any application that you have a fetch call is not a crazy thing to do.
00:43:11.660 - 00:43:38.178, Speaker C: All you need to do is just have the API key and you have your deals. So you can put this any app and you can make an app about deals, about your deal success rate. If you want to, you can take this information, do whatever. And there's a lot of other endpoints. We have endpoints that don't require API key. So this is like the amount of storage that your S ray node that you're running. So in our context, it would be the Estuary node that we're running for everyone on Estuary Tech.
00:43:38.178 - 00:44:07.710, Speaker C: And so this information right here is that this API endpoint is a state that's powering this right here. We're a terabyte of storage. We're 29,000 files stored. If you want to look at civic minor, you can just do it from API here. You can even take this line just as shown before and curl it here. So nice and simple. And the same goes for deals of a specific minor, any minor.
00:44:07.710 - 00:44:47.110, Speaker C: We can take a look at the S three front page and maybe find like this F 00:24 one looks cool. See if there's any deals. Doesn't seem like it. In the admin panel, I have something cool that you'll have. If you run your own S Three node, I can see how many deals I've made of every single miner. So let's take one like F zero one 2417.
00:44:47.470 - 00:44:54.874, Speaker B: Type it in right F 01247. Cool.
00:44:54.912 - 00:45:27.622, Speaker C: You can see all the deals. Let me take a quick break real quick to answer some questions. Following the steps in Jimmy Lee my Cool storage app in Hub key creation I get asked requires signature authentication recommended does yes no matter here. Not for our case. In our case it's just we're not letting people interface with this key directly. Like the people consuming your web application are not going to go and interface with the public key at all. They're not going to see it ever.
00:45:27.622 - 00:46:10.500, Speaker C: Only you will see it, so it doesn't matter. Nextbucket example is basically a quick start toolkit to building textile based app. If you look at dependencies in Nextbucket, it's just really small amount of dependencies. This is the only textile dependency we have and everything else is really compact. In a lot of other apps you'll see when you're starting out you have a ton of dependencies like maybe up to 15 or 20. This is pretty simple and you could probably do away with a lot of these if you don't want them. I mean if you don't want to use Next, even like you don't want to use React and just build like a static website and just use these.
00:46:10.500 - 00:47:02.610, Speaker C: So if you don't really want to do added my upload code here. So if you're adding files we use Busboy. It's pretty simple but maybe you want to do something else. Just delete those and the whole setup ends up being pretty minimal dependency. And then Origin is something you can definitely use standalone. So I'm hoping that Chris will show you guys later how to do stuff with Origin. It's really nice and clean setup that does a lot for so here are a few more API endpoints and love to get some feedback on whether or not these are useful or not, whether or not we should add some more stats and deals.
00:47:02.610 - 00:47:18.410, Speaker C: And so another thing is you can just take what you've been doing right here with the deals. Let's say let's go back to listing my files and I'm going to use this example. I'm going to go back to content.
00:47:18.480 - 00:47:23.814, Speaker B: And just grab this replace move API.
00:47:23.862 - 00:47:44.180, Speaker C: Key and I have these IDs and I want to get specific information about a specific deal on a specific minor. And so what I'll do is.
00:47:46.310 - 00:47:50.734, Speaker B: Grab this nature videos one again, change this.
00:47:50.792 - 00:47:56.360, Speaker C: Here and take my API key.
00:47:58.490 - 00:47:58.806, Speaker B: And.
00:47:58.828 - 00:48:33.946, Speaker C: I'm going to show you guys how I kind of debug this. So each of these deals have a deal ID, right? And maybe I don't see the endpoint I want here. I'm kind of like gosh, there's only a few things here. It seems like there's not much you can do and really that's my fault because I haven't written the API docs for pretty much all the things you can do. So one thing you can do if you don't want to wait for me is go here to GitHub.com application research and you can go to the estuary repo. And we haven't written anything here so it's going to be cryptic.
00:48:33.946 - 00:49:13.280, Speaker C: You can go to handlers and you can see that the endpoints are all here and maybe there's something you want to do. So you have the content, right? And you want to find out in the Deals, you want to get the info about the deal, specifically, just that specific deal. And so you can take this Info deal ID deals Endpoint. So we have some information. Let's take some notes here. So we're going to switch this over to Info Deal ID. We have 54 as the status ID, or this is like the content ID.
00:49:13.280 - 00:49:26.754, Speaker C: And then we have our off token here just so we don't lose it in case we need to change it. And so I want to get more information about six, nine, seven.
00:49:26.872 - 00:49:28.180, Speaker B: So I'm going to do this.
00:49:29.350 - 00:49:49.306, Speaker C: And so like I did earlier, I looked at this right here and you can see the implementation. Everything is open source. You can see how we do everything. You can find the code here. This is all we're doing to get Deal Info, state market storage. Deals is where we get the information for it. Go here and let's change this.
00:49:49.306 - 00:49:56.880, Speaker C: So Deals. And the only reason why I know to do that is because every.
00:49:59.090 - 00:49:59.646, Speaker B: Group.
00:49:59.748 - 00:50:17.940, Speaker C: Is labeled as such. So here's Deals and this endpoint belongs to Deals. So deals. Info and then I know the Deal ID is six, nine, seven, and it's not returning anything.
00:50:21.130 - 00:50:33.030, Speaker B: So look again. Deals info deals info that's correct. Hmm.
00:50:37.160 - 00:50:39.460, Speaker C: That's because I'm using them point wrong.
00:50:39.610 - 00:50:43.590, Speaker B: So let's go back to what it was.
00:50:55.560 - 00:50:56.310, Speaker C: And.
00:50:59.080 - 00:51:10.102, Speaker B: See if there is a Deal ID. I can look at prop ID deal ID. Cool.
00:51:10.156 - 00:51:24.442, Speaker C: So I now know I was using the endpoint wrong and it was pretty easy just to debug this. So now I can change this to Deals, Deals, Info and Deal ID and try this here instead.
00:51:24.496 - 00:51:25.340, Speaker B: This value.
00:51:26.190 - 00:51:51.960, Speaker C: I kind of like scratching out what I'm doing in the environment I'm working in. Maybe you like taking notes and cool. I have that information here now. So that's really cool to kind of be able to see. Like you can just modify the code here and kind of play with the endpoints. And maybe as you're playing with this, you might want to give me feedback and say like.
00:51:54.890 - 00:51:58.630, Speaker B: Cake, cake protocol AI.
00:51:59.530 - 00:52:12.170, Speaker C: Jim, why on earth did you not add this to the documentation? If you did, that would have saved.
00:52:13.870 - 00:52:16.970, Speaker B: Me time. Cool.
00:52:17.040 - 00:52:32.340, Speaker C: And we'll get that feedback. So that's pretty much wraps up my talk. I hope everyone enjoyed it. I know I was going through things pretty quickly. Let me check the zoom chat. I think there's a question. There a lot of questions.
00:52:35.270 - 00:52:44.440, Speaker A: There's some links from Dietrich, but there's a question most recently from Lucas. I don't know if you can see that. I can relay it here.
00:52:46.890 - 00:52:47.702, Speaker B: Okay. Yeah.
00:52:47.756 - 00:53:46.154, Speaker C: So I love these questions on your local IPFS, Damon. That's like total control, right? So you're paying your electricity bill cost and you're paying for ingress if you're going to open that up. So if you're going to let traffic come through and so maybe you don't like the ingress costs on Azure or AWS or Google spacing on actually GCP, sorry. And maybe you just want to manage all that yourself and run your own IPFS, damon I totally recommend you do that. But just so you know, the IPFS code that you're running might not be fully integrated with filecoin stuff, so you might end up with a setup, or if you're not super technical, you might have difficulty stitching it all together in a way that is a reliable thing. So we're just trying to find a better way to do it. And the way we do it is through exploration and through implementing things that work better than the existing stuff.
00:53:46.154 - 00:54:18.626, Speaker C: So there are many ways to answer your question, four related to your question. One of doing all this, and we're one of many, a lot of the providers we work with have great solutions to a lot of really smart people trying stuff out. And we're standing on source of giants, learning from them and also trying our own stuff. Other service, like Pinata piata is awesome. Like piana piano. I think you meant Pinata, but you said Pinata, so I'm hoping it's Pinata. I don't know Pinata, but that's also a cool name.
00:54:18.626 - 00:54:58.094, Speaker C: I just don't know. Like Pinata is awesome and they are very similar textile, and they also work with each other. They all share what they're learning together and it's great. So you can't go foul using a service like that, because every time we learn something, we share our knowledge together and then it aggregates and helps everyone out in the ecosystem. It's not like other kind of traditional web two SaaS industry warfare where it's kind of like everyone's trying to keep their IP against each other. We're actually really helpful. Nothing can go wrong there.
00:54:58.094 - 00:55:46.222, Speaker C: You just have to deal with their pricing. If they set up a pricing thing that benefits them based on what they provide, you might like their service because it's cheaper. But when it comes to being in good hands and being taken care of, you can totally trust them. And definitely textile as well. Dealing with filecoin miners, depending on who you are, right? So if we look back at the beginning of the talk, I'm sorry, I was all over the place today, and I apologize, but we're for infrastructure operators, developers and filecoin users. And what I mean by that is maybe you don't care about miners and you don't want to look up every single minor. There's actually like 7000 miners, but I think there's only like a little bit under 3000 that are reliable, easy to work with.
00:55:46.222 - 00:56:09.798, Speaker C: And so I parsed through 3000 textile miners and 2247 fill rep miners. And I look on these lists and I can see this might not be fun for people. They might not want to see how all the miners are participating in the file coin network. They're not developers. They just want like, hey, I have my data. Hey, I want to do something with my data. I want to make it available to everyone in the world.
00:56:09.798 - 00:56:53.026, Speaker C: And so dealing with filecoin miners is not fun. And also, when you look at S two, I could try to make this more fun, but it's not necessarily fun to go through and debug every single miner's failure to store data. You'll have to dig into all of the context that exists, and that's a lot. So I think Estuary is kind of a developer tool that allows you to, if you want to do it, like if you want to jump in and you want to see things that usually other providers hide, like Dropbox is not telling you which hard drive is exact same. To answer D, two's questions, exact same. So lipidb key in the next bucket, UI exact same. Textile key, and M local.
00:56:53.026 - 00:57:28.590, Speaker C: And so the reason why I did that in that example is to show people, like, if you just want to not have that authentication portion, you just want to show a simple app. I think it's still up. I hopefully didn't kill it. So localhost one still here. This is the app we built together, the F Global Web three weekend storage application for future. Take a little bit to load, but really easy way to get a bucket set up. See, we have our bucket and your data is still there.
00:57:28.590 - 00:57:47.320, Speaker C: So you can easily create a key and create a simple application using textile, and then you can do a storage deal later if you like, we can take the CID here and we can use Estuary to log into my account.
00:57:48.010 - 00:57:51.874, Speaker B: To the local version, of course, Lucas.
00:57:51.922 - 00:58:15.886, Speaker C: Thank you for asking. I know there's a lot to go through, so I'm always refining my delivery, but there's a lot of content and I'm trying to keep it approachable, but there's a lot of stuff. So, yeah, back to this example. I can just take this CID and so in my example here gosh, I'm already lost. I named it Estroytech Ping. But you could before you put on the file coin. Name it.
00:58:15.886 - 00:58:23.074, Speaker C: Name it. Like really fun time ping. Let's make a file coin storage deal.
00:58:23.112 - 00:58:23.474, Speaker B: Why not?
00:58:23.512 - 00:58:51.240, Speaker C: So cool. You made a file coin storage deal with a CID there. So all this stuff is interruptible, even though the first example, the first 30 minutes was working with textile stack, and that's one ecosystem in itself, it also is part of a greater ecosystem where these CIDs can be used to move data around. And it's a lot of fun. So if there are any other questions, thank you for spending an hour of your Saturday with me. I hope it was fun.
00:58:53.690 - 00:58:57.306, Speaker A: For sure. Thank you so much. Cake. That was an awesome workshop.
00:58:57.498 - 00:58:58.720, Speaker B: Exciting stuff.
00:58:59.970 - 00:59:09.900, Speaker A: Thanks, everyone, for joining. If you have any more questions for the Protocol Labs team, don't hesitate to reach out on Discord. They're hanging out all weekend and yeah, excited to see what.
