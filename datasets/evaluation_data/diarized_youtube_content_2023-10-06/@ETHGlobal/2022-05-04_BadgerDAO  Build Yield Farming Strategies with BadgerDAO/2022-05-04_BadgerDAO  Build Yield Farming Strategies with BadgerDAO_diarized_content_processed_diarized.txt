00:00:00.170 - 00:00:25.162, Speaker A: Everyone. Thanks for joining. We're just going to wait a couple seconds as the stream goes live onto YouTube. Let's get started. Hey, everyone. Good evening. Good afternoon.
00:00:25.162 - 00:00:47.370, Speaker A: Good morning. Depending on where you are, we have Alex here from Badger Dow, who's going to be doing a workshop on build yield farming strategies with Badger Dow. Questions go in the Zoom chat, but also feel free to come off mute and ask your questions live. Alex will love to engage with you live in that way. And with that being said, I'll pass the mic off to Alex.
00:00:48.110 - 00:01:05.150, Speaker B: Awesome. Thank you so much for having me, and it's a pleasure. This is actually our second commani for Badger Dow. Personally. It's been like my 10th if global event. I think if global is awesome. And so I just want to give mad props to all of the hackers participating.
00:01:05.150 - 00:01:43.866, Speaker B: I'll do a quick introduction to Badger to the prizes we got, and then I'll get started into the workshop. Ultimately, we have a bunch of links. Make sure to check the link at the bottom of the YouTube description. There's going to be a link to this resource that I'm showing right now, as well as a link to the discord. We even have a podcast about the Akmani and the Badger technology that you can build during the event. So I tried to really crumb a bunch of stuff and I'll just go over it and feel free to stop me at any time if you have questions that are pertinent. Otherwise, if you have other questions that are less pertinent, we can do it like a quick Q A.
00:01:43.866 - 00:02:40.462, Speaker B: I'd love to make this session as interactive as possible, so feel free to unmute and just ask away. Ultimately, Badger Dao, the main mission we got is to bring bitcoin to DeFi, and the way you start doing that is by building yield farming strategies so that bitcoin becomes a productive asset could be by borrowing stable coins through bitcoin, could be levering up, could be staking it farming curve, or creating locked voting vaults. The main goal is to do that in a fully noncustodial and transparent way. And today at Akmani 2022, we're bringing you some of our newest tech, which is going to be Badger Vaults 1.5, as well as the Badger Rewards Manager. I'm going to go over the prizes. So if you're going to participate in using any of our technology, we got a pool prize of $2,000.
00:02:40.462 - 00:03:25.018, Speaker B: So any valid submission, basically any submission that uses our tech or that builds a website that uses our tech is going to be valid for the pool prize. So if you're a Web Two developer, this will be your entry level bounty. A couple of ideas for you would be to create, for example, a dashboard to track pending rewards from one of our contracts called the Bezger Rewards Manager, which we'll go over during the call. Otherwise you could track the ROI of our bezger vaults. And I'll give you an example here on the Chajr UI we have some ideas about how to do that, but we'd love to see how you will do it, ideally through an IPFS completely permissionless deployment. And we also have ideas about tracking real time returns of our vaults through our Vault 1.5 technology.
00:03:25.018 - 00:03:55.406, Speaker B: And then a demo will be the Badger ninja. So if you can build a Badger ninja, we'd really love to see your submission. You're going to be eligible to the pool prize of $2,000. And we also have a very aggressive hiring policy where any competent developer will at least entertain a future conversation about working with us. That's how we find the best talent. That said, our best rewards or best prizes this Akaton are going to be the yield farming strategy with Badger 1.5 mix.
00:03:55.406 - 00:04:26.746, Speaker B: If you submit the best submission, you're going to be eligible to win $2,000 and the second best submissions will win $1,000. A few ideas will be to build a locker. For example, you can check our Bvcvx. If you've never checked our work at Badger, just go to app Badger.com. And if you go on we have multi chain. Some of the newest tech is on Phantom by the way, if you want to go ahead and check all of our source code is all public, all contracts are verified. But if you go on Ethereum, you'll see that one of our biggest vaults is Bvcvx.
00:04:26.746 - 00:05:20.014, Speaker B: And so you can literally just go and see how Bvcvx locks its token. And you can apply similar ideas to other locking vaults such as the BVE Aura which is upcoming the BVE ball for balancer. They literally just launched their tokenized lock so that could be interesting. Other ideas are to lever up a bitcoin pharma compound or use Ave. Some of the coolest stuff You Can Do, and you could also win some Kinext Prizes would be To Create An LP Strategy for CoNXT, where we Deposit Badger Tokens on the Main Net, or, let's Say, The Arbitrum or The Optimism Endpoints Of A Connext Bridge, and that we allow to give Liquidity to the Connect Bridge Contract, which Would be really cool. Other more advanced ideas are to build hedge strategies. This is Pros only, but ultimately we'd really love to see what you can come up with during this event.
00:05:20.014 - 00:06:09.358, Speaker B: So we give a very broad idea of the farming strategy and I'll go over the tech that you can use to make that really easy to get started and then obviously you can bring in your own knowledge to push that to a world class level. And in terms of the second bounty that we're offering is the Badger Rewards Manager bounty. The rewards Manager, which we'll go over during the workshop, is a tool to fairly distribute rewards linearly, so ultimately addresses the issue of we deposited in a vault. How do we distribute extra rewards in a way that is completely fair, completely transparent, and completely on chain. So no merkel trees, no fake trust, no trust. Pure math. And so we'd love to see what you can build with that technology.
00:06:09.358 - 00:06:36.054, Speaker B: Some ideas that I got for you are the idea of having a linearly vested equity distributor. So let's say you build your own company and you start building on it. And then over time, you want to distribute the shares that you're earning over time. That could be a cool idea. The other one would be to build a tool to beat pull together. Why don't you all deposit on pull together? And then you fairly distribute the splits based on how much you contributed so that you make it easier to win. That could be an idea.
00:06:36.054 - 00:07:04.706, Speaker B: Then you can have a competitor to our own vault bvcvx, just build a competitor and use this tool to fairly distribute bribes. Fully transparently, fully on chain. And lastly, you could build a generalized auto compounding strategy. Basically a strategy that given certain tokens and a certain vault that gives them rewards. It sells that to get more underlying. So if any of that rings a bell, I'm going to start going over the technology. If there's any question, feel free to interrupt me.
00:07:04.706 - 00:07:33.142, Speaker B: We do have a link about the resource here. Thank you, Tritium, for sharing that. And that way feel free to use it. My main goal with this conversation is just to inspire you with some ideas. We have a 40 minutes video that we made only for this hackathon, where we talk about all of the ideas of this technology, why we built it, and what you can build with it. So if you're interested in that, again, check the Akminor resources. And I've even left you with the past winning submissions.
00:07:33.142 - 00:08:12.982, Speaker B: So if you're truly interested in winning our prizes, you can literally check what other people wrote last year's in literally last year's Akmani and how they won. This was a submission by AYUSH, who's a part of core now in Badger. So we've hired them for over a year at this point, thanks to this event. So if you're interested in pursuing a career in web free or you just want to build some cool tech, this is definitely the right place for you. Without further ado, let's go over some of the core technology. And in order to get started, you're going to want to use the mix 1.5, which you can literally just click.
00:08:12.982 - 00:08:37.118, Speaker B: Or you can go on Badger finance badger vaults mix 1.5. I'll just show it to make it easy. You just go on Badger finance, which you can literally google badger finance GitHub and then just type 1.5 in the find repository and you'll find the Badger vaults 1.5, which is the underlying code which is audited by Quantstamp. We got top rated for tests and top rated for documentation. So go ahead and check the source code.
00:08:37.118 - 00:09:21.854, Speaker B: And by the way, I'll give you a hint if you do search the source code. I even left you with like a 40 minutes video of me talking about what we did and why we did it. But ultimately Badger 1.5 is an improvement of the usual yield farming vaults that allows to track APY in real time and it also allows to basically it makes it easy to integrate with the badger tree, which is the way in which we emit tokens and it ultimately makes a better developer experience. And so if you go and check the vaults mix 1.5, which is how you will start writing your own strategy, you'll see that we have a bunch of folders again, we have a demo submission here. So you can just check how a valid submission will look like.
00:09:21.854 - 00:09:46.030, Speaker B: And you can also watch a video where I talk about in detail about this. But in very short, what is a vault system? You basically are going to have two contracts. One contract is called the Vault. And you'll see that I literally have the file called the Vault. And funny enough, it's basically empty. And the reason is because we're using imports. This is the way you import stuff on brownie.
00:09:46.030 - 00:10:21.598, Speaker B: So we're just importing it through the other repo that I showed you before. And tampering with this file will violate the trust of the vault because it breaks the audit, right? If you change the code, it's no longer audited. So you can't change that. But what I'm telling you though is that we really tried our best to abstract away all the complexities to just have you focus on the yield farming. So ultimately there's a lot to talk about the vault. And if you want to dig deeper again, there's tens of links here and you can just poke around on the GitHub. And hopefully I gave you enough of a curiosity to have you get started.
00:10:21.598 - 00:10:54.486, Speaker B: But ultimately to write your mix, you're going to go on the Mystrategy Salt file and the Mystrategy Solve file. It's ultimately a yield farming strategy. And some of the stuff will be familiar, some of it may be new, but ultimately you're going to have an initializer. That's because most of the contracts you deploy are upgradable one day they want. But for now we do upgradable contracts just to add that extra layer of safety. And so this is the equivalent of a constructor. You just do your initial one off setups, one initial configuration, et cetera.
00:10:54.486 - 00:11:39.260, Speaker B: Do we have a question? No, just random unmute. Okay, so next up you can set up the name of the strategy. Really simple, just set the name, then you can set up the protected tokens. This is the list of tokens that your strategy may be holding at any time and that you don't want to allow anybody to sweep away. And so adding a list of the tokens you're dealing with here is basically mandatory because it's a security guarantee to the end user and then you're going to have your, let's call them your lifecycle functions. One of them is called underscore deposit. This is the function that will be called when you need to invest a certain amount of want.
00:11:39.260 - 00:12:25.858, Speaker B: Where want is the token that the vault is receiving and you're going to be investing it in a protocol. A simple example I got for you that I was working on here will be the gauge. For example, let's say you're writing a simple curve strategy. Let me get you that. The example for investing will be very simple and will be to literally just deposit all the tokens in a gauge. You can do a similar thing on Ave where you will deposit everything on a lending pool. If you set up the connects router, probably there's a function to deposit that is pretty similar to that and so that's what it will look like on a finished strategy.
00:12:25.858 - 00:13:09.062, Speaker B: Then you have a function called withdrawal which is a function used mostly for migrations or for security purposes. And when you call withdrawal that's when you need to be able to unlock all the tokens, withdraw all of them and make them liquid in this contract so that they can be swept away. Then you have withdraw some. This is used for day to day operation of withdrawing, redeeming shares, et cetera. And it's very important that anytime there's a loss, let's say you'd have to pay some interest or there's some slippage, it's extremely important that the person that is calling this function pays for that loss. Otherwise you are socializing losses which is a vulnerability and your strategy will end up on the Erect news leaderboard. So make sure to not do that.
00:13:09.062 - 00:13:38.730, Speaker B: Make sure to let this person pay the loss. There's an inherent slippage check in our base strategy. If you dig deeper in the code you'll find it but ultimately that's the one thing you got to consider. This is tendable. It's just a check of whether we're supposed to tend the function. Sorry. The strategy where tending is just the act of rebalancing it so that you optimally invested your token and then we got harvest and we're going to have a balance of rewards.
00:13:38.730 - 00:14:45.714, Speaker B: And the reason why I skip a little bit is because you start to see this object here called token amount. Token amount is just a struct of the token address and an amount. And the reason why we return these is that on the function harvest which is the function that is meant to claim some of your crop, some of your rewards and auto compound them or emit them or do a bunch of stuff. You want to return the amount that were handled so that we can if underscore call this and if underscore call is like an advanced concept, but you will google for something like if underscore call on the GEF node. And you'll find that there is actually an operation that allows you to basically simulate the transaction and get the optimistic return value of it. And in doing so, you can actually compare this harvested value here with the value of the balance of rewards that is here, which I'll talk about in a moment. And in comparing this, you can realize this idea that I showed you on Badger Ninja, which is the idea that I can have a vault, let's say Bvoxd, which is our live vault we got on Phantom.
00:14:45.714 - 00:15:57.354, Speaker B: And you can see whether the ox solid, that it's been harvested sorry, that's been cropped, that it's been farmed through depositing, will be transforming to the OXD here in a way that is fair and in a way that makes sense and that basically doesn't get wrecked. So ultimately that's the point of this system is to allow this entire dashboard to be generated automatically without any input because of this token amount. And so that's one of the advancement of Vaults 1.5. But it's also one of the requirements that when you write your own strategy, you want to write a balance of rewards that will figure out what the pending rewards are. Not the rewards that are currently in the contract, but also the rewards that the contract could claim if they were to harvest, so that we can have an off chain comparison between the balance of the rewards and the harvest optimistic return value. This is optimistic. So there's still a risk, we still have to send the transaction through Flashbots, protect it, et cetera, but ultimately, in doing so, we can have this elf check in a way that again allows us to scale the technology better.
00:15:57.354 - 00:16:24.702, Speaker B: And once you're processing your harvest, you can make the decision of whether you want to auto compound, which is the idea of selling your token. It could be your reward token for more want. And if you want to do that, then you will report to Vault the amount that you gained. That's what you will do. So it wouldn't be zero, it will be whatever you got. Or otherwise you could emit the token, which is the idea that some tokens you don't want to sell. An example will be curve.
00:16:24.702 - 00:17:09.614, Speaker B: Why would you sell Curve at $0.10 when you believe in the project? So instead of selling it, you could process extra token, which is the idea that you're going to emit it so that the depositors of the vault will be able to claim it later through a contract called the Badger Tree, which in our case, for our hackathon, is going to be called the Badger Rewards contract, which I'll go over momentarily. If there's any question about the strategy and how to build it, let me know. Otherwise I'll continue. But ultimately, once you wrote your strategy, you are 33% of the way there. As you know, you got to write your tests. And so that's basically the biggest thing you're going to have the setup folder and the Test folder.
00:17:09.614 - 00:17:33.382, Speaker B: The Setup folder is made in a way to have two files. The config file strategy resolver. The Config is basically where you will put whatever token you're dealing with, an account that has a bunch of it so that we can transfer it for testing. And then some settings about performance fees. You can set them to zero if you don't want. These are our default ones, so we just leave them there. And lastly, we've got the registry.
00:17:33.382 - 00:17:59.070, Speaker B: You probably will never use it in prod unless you work with us. But this is for more advanced stuff. If you want to check, go ahead and look at what the code does. The second part of the setup will be the strategy resolver. This is where things get a little nuanced. But ultimately the strategy resolver is basically a tool that has a bunch of hooks. You can see hook after confirm, withdraw, hook after confirm deposit, hook after earn, confirm harvest.
00:17:59.070 - 00:19:03.666, Speaker B: And these are basically hooks that are called in our testing suite. So that instead of asking you to write whatever test you want, we already wrote the majority of the tests here in Test integration, we already wrote them for you. So all you got to do is you got to customize that single file so that the tests are done automatically for you. And you can see that here we got a function called Snap Set Deposit and that's because we're going to do the deposit and then we're going to run a bunch of checks and you can reverse engineer the code if you're curious about it. But ultimately after all the checks that you get for free run, you're going to have the hook after confirmed deposit fire. And that's where you will do a few tests such as verifying that the tokens have been added to the gauge, verifying that the balance of the strategy has reduced, but the balance of the LP token has increased, et cetera. So that you can verify that your strategy is working as intended without having to write a lot of boilerplate code and a lot of setup.
00:19:03.666 - 00:19:55.042, Speaker B: If you want to dig deeper, I left a link to this resource here I'll very briefly show you. Maybe watch the video again if you need further details or again just poke around on the mix. But ultimately the Strategy resolver has these confirm functions that again are automated tests. And the way you will add these checks is by using this is given to you actually it's called Self dot add Entity. But what you will run is you would add a strategy destination which is in the Get strategy destination. So I'll show you a demo that I already built here in Setup and the Emitting Strategy Resolver. You basically will see that I got the file which is really similar to the other one, but I've added a new destination called Gauge.
00:19:55.042 - 00:20:53.162, Speaker B: That's because as I showed you before in the deposit function I'm depositing in the gauge. And so what you will expect is that here in the confirm deposit and for some reason as you can see here, I have a comment, it's done in earn. So it's actually in the hook after earn. I'm going to have a test here that says that the balances, the after balances of want in the gauge contract needs to be greater than the before balances of want in the gauge contract. And so this sounds almost like natural language because ultimately what this means is that we are snapshotting the balances of the want token which is the deposit token of the vault in the gauge contract which is the destination that we added up here. And we're comparing that it basically was increased from before, which is before we call the earn function, which is the function that loads the funds from the vault to the strategy. So before we compare it with the after.
00:20:53.162 - 00:21:52.734, Speaker B: And so with this suite you're basically able to construct this set of comparisons that will save you basically having to write all of the stuff and you get all this test by default. And the way you will do it, you can see it here, but ultimately if you need the after balance so after the earn you will just call after dot balances of the given token in the given destination address. And if you need the before balance you will do B, four dot balances, et cetera, et cetera. I'm seeing that I got maybe another ten minutes. So that's basically the most complicated thing you're going to have to do. And the reason why is because all these tests, of which you basically only have to write one, which is the custom one, which is going to fail by default, all the other tests are basically already set up for you and all you got to do is set up the snapshot resolver so that you add extra granularity to all these checks. So that's basically for the badger vaults mix 1.5
00:21:52.734 - 00:22:40.614, Speaker B: we got a second mix and the second mix is basically meant to be used with the badger rewards. So I'll just show you what the badger rewards looks like to give you an idea. It's basically one contract called the Rewards Manager which allows to fairly distribute rewards over time that have been accrued over time. And what you'll see is that it has a specific API that is actually fairly intuitive. You have a way to start next epoch which is basically the compromise that we have to do in order to allow for infinite types of rewards. You can have a million different tokens here and the reason why we can do that is because we subdivide reward periods by epochs. So that's how that works.
00:22:40.614 - 00:23:23.100, Speaker B: Then you're going to have your typical accrual functions which are ways in which we calculate the amount of points that somebody has earned based on the time they spent in a vault. And then obviously we need to know how much time those points have to be accrued for. But these are more internal functions. Ultimately, the way you want to look at it from the end user, you're going to have a function called claim reward. And so that's how you get your reward. You're going to get a reward for the given epoch ID for the given vault and the reward is going to be of a specific token and it's going to be sent to the specific user. So this allows you basically to claim on behalf of anybody else and just send them the token to their own address.
00:23:23.100 - 00:24:09.526, Speaker B: And there's even like an optimized gas function, but you can just poke around and see that. The other question would be how do you add a reward? Well, you just have a function called add reward. And that's how you add a new reward to a given epoch for a given vault of that specific token, of that specific amount. And you can see that it's just a transfer and we add it there. And then the last piece that you would want to figure out is how does this contract become aware that you have a balance that basically you will be entitled to some rewards and that's through the notify transfer function. So a vault will have its own deposit lifecycle method. It will then have a hook that after the deposit was successful, it will notify transfer to this rewards manager.
00:24:09.526 - 00:25:26.050, Speaker B: And then the rewards manager will basically handle the operation, whether this is a deposit, a withdrawal, or a transfer, et cetera, so that this contract can become aware of the fact that the balance was changed and so that users can end up accruing their points. And as with anything where there's points involved, and the biggest example will be like a lending protocol, anytime there's points involved, we need to accrue first so that the internal balances and the internal points are changed before we change the total supply or the shares or the balances that end user has. Because otherwise we would basically miscalculate the rewards that they're entitled to. And again, if you spend enough time on this, you'll find that it's actually generalizable. We built it in order to allow fair distribution of rewards, but this can actually be used to basically do airdrops based on contribution. Let's say if you spent enough time on a certain vault or you did a certain action enough, then we're going to give you a reward. It is a way to also fairly distribute staking rewards and so it can be used for more than just the base use case that we did.
00:25:26.050 - 00:26:29.270, Speaker B: And if you go in the tests, you'll see that we have like 70 plus tests that show you a bunch of the use cases that you can go through and you can use it for like we got all this lifecycle stuff which again shows you how you could be using it. And it also gives you even gas reports if you're interested in that. So ultimately for the Badger rewards, we're mostly curious about what you guys can come up with because it actually lends itself to many different use cases. The last piece of technology I'll briefly mention is the fair selling code base. We got a way to integrate cowswap in smart contracts, which is really cool. And so our use case is to process bribes for Bvcvx. It's basically a way to limit the power of a multisig so that the multisig can be used to perform swaps, but it can't be used to perform transfers to give further security guarantees to vault depositors.
00:26:29.270 - 00:27:05.586, Speaker B: And so if you're interested in integrating cowswap in your contracts or you just want to check out how we handle bribes non custodially, this is also another resource that you can check and that we are very curious about seeing what you can come up with ultimately. Akman has been an amazing experience for most of us. We have a discord channel set up just for you. Just poke around it's here in the Get Started resources. There's going to be a link in the YouTube video as well, so make sure to check that out. We are going to be available twenty four seven to answer your questions. You can get started with the mix 1.5
00:27:05.586 - 00:27:47.626, Speaker B: and then the last will be the Badger rewards mix which you can go and poke around. But it basically is the evolution of the 1.5 mix and it actually enables two different strategies. An emitting strategy that is integrated with the badger rewards contract and it's going to emit the token. So you'll see here in the harvest that it has a report to vault zero, but it's going to process extra token for the amount that was gained. And then you're going to have an auto compounding strategy that this time is unused. But if you're interested in selling the underlying, then you could write a generalized strategy that deposits into the other vault and then given the outputs from the other vault, it auto compounds them for more underlying.
00:27:47.626 - 00:28:34.990, Speaker B: So if you're interested in building your yield farming strategy in DeFi, or you want to explore the possibilities of what it means to distribute rewards in a fair way, this is your opportunity. As we said, we got $2,000 in prizes for the best submission. For yield farming, the second best submission gets $1,000. Same deal for the rewards manager, $2,000 for the best submission, $1,000 for the second best. And we also got a pool prize for any type of technology that you build that uses our tech. It could be a website to display data, or it could be some exploratory use of the technology. We're really curious about what you guys can come up with and Ackers, we wish you the best and know that any value submission is.
00:28:34.990 - 00:29:12.090, Speaker B: Something that we're going to be looking into sending you feedback and potentially that can be the start of a long term relationship where we ultimately onboard you to the Badger. Dao, thank you for your time. If you have any quick question, I'm happy to answer it. Yeah, we did share the link in the resource and I believe it's going to be on YouTube as well. We got the link to the discord. Last thing I'll shill is we do an office hours on Friday as well on our own discord. So if you're interested in that, just feel free to again follow up through the resources given you.
00:29:12.090 - 00:29:17.690, Speaker B: I really appreciate the time that ifglobal has given us and I wish you the best of luck in participating in the hackathon.
00:29:18.770 - 00:29:55.400, Speaker A: Awesome. Thank you so much, Alex, for doing this awesome workshop on BadgerDAO and your involvement in hack money, prizes and resources are super interesting. And yeah, once again, thank you for putting in the time for this. And for the rest of you, thank you so much for tuning in into this workshop. We do have a couple days worth more a couple more days worth of workshops over the next couple of days, so I hope to see all your faces there as well. And with that being said, I hope you all have a great rest of your day or evening, morning, wherever you're from.
00:29:56.090 - 00:30:00.050, Speaker B: Thank you very much. Have an amazing one. Bye.
