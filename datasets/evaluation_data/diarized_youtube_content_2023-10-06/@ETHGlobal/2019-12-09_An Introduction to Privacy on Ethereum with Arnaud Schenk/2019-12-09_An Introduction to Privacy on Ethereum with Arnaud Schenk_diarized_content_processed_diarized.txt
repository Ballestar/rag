00:00:00.890 - 00:00:27.714, Speaker A: Cool. My name is Arno. I'm tech lead at Aztec. Aztec is a privacy protocol on ethereum. We're really focusing on making, hopefully, privacy as easy as possible to integrate and to add to DApps and exchanges and all these kinds of things. Before we get started, we have a discord on which you can ask any questions. We also have a channel on the ETH Waterloo discord.
00:00:27.714 - 00:01:18.350, Speaker A: So feel free to join either our own discord or just post on Ethwater lure on either. And we are going to be giving out prizes. So we're going to give 1000 USD for the best overall use of Aztec, and we're going to give another 500 USD for the most surprising use of Aztec. There's a full disclaimer that we may at any point choose to divvy up these prizes differently depending on the number of submissions. And we may choose to give out more money than we yeah, like I said, I'm Arno, this is Leila, and that is Charlie. We're going to be around all weekend. If you have questions about Aztec specifically or about privacy in general, please do come in.
00:01:18.350 - 00:02:03.700, Speaker A: We just started. Yeah, please do come and talk to us. We're very happy to chat about everything. Privacy. The most important question, I guess, that we started with initially when we were starting Aztec is, why is privacy important? Because I think as a space, it's not really a question that most people worry about too much. And I like to think about it as hypotheticals. So does the cashier at your local supermarket know how much money you make every month? Does your boss know how much money you're putting away every month? And might they use that to reduce your salary? Because if you're paid in crypto, they certainly do.
00:02:03.700 - 00:02:59.586, Speaker A: And I think that's what most people underestimate with mass adoption of crypto is it's not only state surveillance that warrants privacy, it's just surveillance of any kind. It's your colleagues being able to say, I'm paid less than my colleague for the same work. It's your cashier being able to say that you're not paid a lot in your current role or whatever it is. It's really just surveillance of any kind that I think is going to be a big hamper to mass adoption. The problem, though, is privacy is pretty hard for users and for developers. For users, privacy usually means weird UX flows, usually means keeping track of secrets. Like, if you've ever used tornado cache or any kind of mixer, you have to kind of keep track of this long string of characters that you can't lose.
00:02:59.586 - 00:03:33.380, Speaker A: Otherwise you lose your money. It means waiting for zero knowledge proofs to be constructed. And sometimes it means waiting like half an hour to an hour for these zero knowledge proofs to be constructed. For developers, it means something pretty hard to build and pretty error prone. And if you mess up, basically your users can lose all their funds. It has pretty high overheads. If anyone has heard of trusted setups or even just the complexity of auditing zero knowledge code, it's not the nicest thing to go through.
00:03:33.380 - 00:04:11.870, Speaker A: Feel free to come in or not. His loss. We think that privacy should be pretty easy and we think that a lot of these costs. So trusted setups and complex audits should be something that the privacy protocols take on for developers. What we're building and what we're producing is an audited protocol. No application specific, trusted setup, and I can go into what that means a bit more at the end of it, and pretty high level APIs to make common flow pretty easy. So we're building a toolbox of plug and play zero proofs.
00:04:11.870 - 00:05:04.560, Speaker A: You can build it straight into DApps. You can build DApps around these earnoge proofs. These Xeronoge proofs are made to be usable in DApps in an interoperable way. So something, again, people don't really or haven't really thought about is if you build something with traditional ZK snarks just by their very nature, two circuits that are ever so slightly different are very hard to make compatible with each other. So if you build an ERC 20 replication in zero knowledge and an ERC 721 replication in zero knowledge, those two things are pretty difficult to make work together. We think interoperability is a pretty fundamental thing in this space and gas efficient. So after Istanbul to make a private transaction, it's about 200K gas, and we hope to make that cheaper over time.
00:05:04.560 - 00:06:04.010, Speaker A: So we've been working pretty hard on making using Aztec as easy as possible for developers. And I'm just going to take you through just a quick show and tell of what we've been building and how you can use it this weekend. Something that we've been working on over the past couple of weeks is our SDK, which you can add to your DAP with just one line of JavaScript. It's literally that that gives you everything you need for client side use of Xero knowledge. And with that you can basically make any ERC 20 into a zero knowledge asset. You can send that asset around, you can make that back into public again. And you can use slightly more complex proofs, for example, creating proofs that some Xeronoge notes are larger or smaller than either public amounts or private amounts.
00:06:04.010 - 00:07:01.810, Speaker A: You can mint burn on ZK assets like you can on ERC twenty S. And you can prove that an Aztec notes or Xeronoge notes is a percentage of some other notes. The kinds of flows that you can build with this is, for example, with the last one proofs of collateralization all in zero knowledge, you can build a DAP, which is just a payment DAP. So you can say, for example, I'm going to pay you for taking me from Toronto to Waterloo, but before I accept your proposal of this ride, you're going to have to prove to me that you have enough funds to pay me when the ride is over. But of course you don't want the person who is going to be driving. You just have access to all your financial data. So you can very easily prove that you have $100 without having to prove to just show the world how much money total you have on chain.
00:07:01.810 - 00:07:56.322, Speaker A: Again, we've worked pretty hard to make this as easy as possible. You don't have to use a domain specific language like Zucrates or anything like that to use astec it's literally a smart contract call. You pass in the proof data that our client side code gives you, that gives you back an instruction object which is pretty easy to deal with in your smart contracts directly. So if you have a proof which says, for example, I'm going to transfer you a couple of zero knowledge assets, the instruction set that you're going to get back is create these notes, destroy these notes, give them to these addresses on which you can add your own custom logic. For example, whitelisting for users. There's no particular secrets to keep track of, that's all abstracted by the SDK. Proof construction is in the order of ten milliseconds, which is basically instant.
00:07:56.322 - 00:09:27.582, Speaker A: And again, the low gas costs after Istanbul mean that for the first time, these kinds of private transaction on Ethereum are in the realm of doable for users. Hello and yeah, so it's, it's pretty easy to get started. The SDK that I spoke about comes with docs that take you through a starter kit which show you basically everything you need to actually get started with zero knowledge transactions on Ethereum. That QR code takes you to it that tiny CC URL as well. And we also have a full spec for our protocol that you can go through to create your own smart contracts, to create your own client side code, to create zero knowledge. DApps the kinds of things that we've seen built in the past to give you an idea is everything from Zseke dao where every vote is in zero knowledge, which helps with both corruption, protection and just collusion, to things like proving in all zero knowledge attestations of identity. So the idea being you can prove that you went to a particular university, you can prove you have a certain age, you have a certain net worth to institutions on chain.
00:09:27.582 - 00:10:11.680, Speaker A: Those people can give you services only if you can prove such facts, but they don't get access to any of the underlying data. And as a last bit, this is an alpha demo. So I'm just going to show you basically what a user interaction with the SDK is from account creation all the way through to sending money. It's going to be on ringbee, so no promises on speed just because of the ringbee network. And then I'll open it up to questions actually, while I get set up. Is there any questions about privacy on Ethereum or privacy in general. Go ahead.
00:10:11.680 - 00:10:59.534, Speaker A: Cool. Okay. Zero knowledge in general is the idea of being able to prove a statement without revealing any of the inputs to that statement. So you can say, for example, I'm going to transfer you. I'm going to create a transaction, which is, in our world, a UTXO transaction, so very similar to Bitcoin, where you have input notes and output notes, and the thing that you want that transaction to enact is your input notes are equal to your output notes, so you can't double spend and all that kind of stuff. So your inputs to the transactions are equal to your outputs. And to do that, you need to be able to prove that the value of every note summed on the input side and the output side are equal to the same thing.
00:10:59.534 - 00:12:04.530, Speaker A: And on Bitcoin, for example, that's really easy because everything is just an integer, right? So you can just say ten plus four is equal to eight plus six. Right? It's the same thing when you're trying to do things in zero knowledge, you want to be able to say, this encrypted number plus this encrypted number is equal to that encrypted number plus this plus that other encrypted number. And zero knowledge proofs are basically that. They're basically the idea of being able to create statements or create well, proofs that, you know, some kind of private information and that that private information abides by either a certain program or abides by a certain equation, all without revealing the actual inputs to those things. Does that answer your question? So, yeah, you can basically get, for example, privacy without compromising on consensus. So you can have every transaction on Bitcoin or every transaction on Ethereum. All the inputs be completely private, but still have the strong guarantees of the blockchain.
00:12:09.910 - 00:12:11.118, Speaker B: UTXO based.
00:12:11.224 - 00:12:11.638, Speaker A: Correct.
00:12:11.724 - 00:12:15.606, Speaker B: Aztec, a UTXO based platform on top.
00:12:15.628 - 00:12:38.030, Speaker A: Of Ethereum, which is account based, correct? Yeah, exactly. So UTXOs have quite a few benefits when it comes to privacy. You can basically make an ERC 20 into an Aztec zero nodge asset. And in that world, the main difference is basically your balance, instead of being a balance, is a bunch of UTXOs.
00:12:38.850 - 00:12:39.840, Speaker B: Thank you.
00:12:40.930 - 00:14:07.750, Speaker A: Where is. All right. So part of that very thing is, effectively your balance is not given that it's not an account based model, and given that it's a UTXO based model, you actually have quite a few different objects that you need to keep track of when you're dealing with Aztec and our SDK. The purpose of the SDK is to abstract that all away from both the developer and the user. So sorry, I may need to sorry, I was giving demos and that ended up messing with the demo script. And so the SDK, I'll show you through the methods, but basically allows you to do deposits, to do sends and all that kind of stuff without the developer, without the user worrying about UTXO, because we think that fundamentally we need, like I said at the beginning, we need to make privacy as easy as possible. And that also means that we need to get rid of things that are technically very advantageous, but that fundamentally diminish the usability of privacy.
00:14:07.750 - 00:14:44.966, Speaker A: It sorry, this is loading a JavaScript bundle on the conference Wi Fi, so I'm not sure if the demo gods are going to be with me. Leila, do you have one running on Ganache? Otherwise, maybe while we're waiting, I can ask a stupid question, but I feel.
00:14:44.988 - 00:14:57.258, Speaker B: Like I should already know the answer. How would a hierarchical deterministic wallet work in a zero knowledge asset set? Is that possible to do that?
00:14:57.344 - 00:14:58.300, Speaker A: What do you mean?
00:14:58.990 - 00:15:06.618, Speaker B: You don't want to have to keep track of a huge database of private keys, one for every single one of your UTXOs. You want to be able to derive.
00:15:06.794 - 00:15:36.274, Speaker A: All of these things. Yeah. So the spending key of these UTXO objects is always your ethereum private key. So you don't have a different account for Aztec transactions. What you do have, though, is for every note, you have what's called a viewing key. That viewing key allows you to see the value of the notes and it's an input to proof construction and these kinds of things. And that is generated through some kind of not some kind, it's through diffie element key exchange.
00:15:36.274 - 00:15:42.170, Speaker A: So you can always basically generate it if you know the recipients of the note and the sender of the note.
00:15:43.550 - 00:15:51.894, Speaker B: Okay, so this is different from Zcash, then. They're viewing keys and spending keys because those aren't at all.
00:15:52.032 - 00:16:51.854, Speaker A: Yeah. So basically the way to think about in this first version of Aztec can you plug this in? It's a USB thing. Yeah. Effectively, underneath it all, this secret, this shared secret, this viewing key, that just needs to be quite a large random number that adds randomness to something called bun and Buoyan signatures. So we don't use ZK snarks, which is where, before universal ZK snarks came along, we can have basically a zero knowledge system with only one trust setup, where everything is compatible with each other, you can easily trade assets with each other, et cetera. But to do that, we built these signature objects called bunaboyan signatures. And to effectively make the use of these bonabayan signatures without revealing which one in a list it is, you need to add randomness to each one.
00:16:51.854 - 00:17:29.996, Speaker A: And that's where the viewing key comes in. Now you probably need to install some things are going to pop up and you're going to have to install it. Something that works behind SDK. Yeah, correct. So the SDK basically there's a bunch of proofs. So we have seven proofs in total that allow you to do custom flows. There's quite a few of them, which we think most users are probably not going to interact with.
00:17:29.996 - 00:18:45.850, Speaker A: The SDK gives you kind of, for most use cases, a really easy API where you don't have to deal with UTXOs, you don't have to deal with nodes or anything like that, and then gives you access to more advanced proofs if you need them. But fundamentally, the SDK is about abstracting away the Etxo model more than anything else. And then you can kind of break out of that model if you want to do custom proofs of which proof you want to create. Yeah, so if I go back, actually, I'm not showing the presentation anymore, but for example, in the SDK, deposit send withdrawal because the parameters are pretty standard in those proofs, we were able to I think we're about to get help. We were able to basically abstract away a lot of the options that typically go into proof construction. You need to click allow, I think. Sorry for having to switch laptops partway through.
00:18:45.850 - 00:19:46.240, Speaker A: So you basically have simplified parameters in deposits and withdrawal. If you want to do something like range proof there, you break out of the SDK a tiny bit, you go into some advanced proofs, and the SDK will still help you get access to the notes, for example, that you need to use within this range proof. But the parameters are slightly more advanced. Cool. So this is part of the demo script that are including in the docs. So it's basically a two line run that you can have to get access to SDK as it stands. And like I said, it is Alpha software.
00:19:46.240 - 00:20:43.864, Speaker A: So don't deploy this in production if you even have the inkling to. But if we give the Wi Fi a bit of patience so what Leila is doing right now is some setup. So the starter kit, it will deploy an ERC 20, which you can mint on that's, just a standard ERC 20. It'll then deploy a ZK asset, which is zero knowledge version of the ERC 20. It has confidential approved, confidential transfer, confidential transfer from. And once that is set up, you'll basically see different proofs being so deposit withdraw and send being available. So right now there's a balance of 200 in the ERC 20.
00:20:43.864 - 00:21:23.776, Speaker A: In the public token, the first thing we're going to do is just make some of that balance into private assets. So if we say put 50 in there, that will create five notes, basically that's sum to 50 total. And you'll see the right. So from a user's perspective, a deposit into the Xeronoge world is just this small pop up SDK. This doesn't have custody of your public assets. This is just, again, abstracting away these notes. So MetaMask is still your custody provider.
00:21:23.776 - 00:22:15.028, Speaker A: You still have all your assets in there. You still have your private key in there. You never have to export it in that flow. I should have highlighted it, but it was fast enough to miss. It is you create a zero knowledge proof, you send that proof to Ganache, and that gets validated by what we call Ace and then that instruction set that I talked about gets sent back to the Zaki asset, and the Zaki asset decides what to do. So now that address, xerox E 207, has in private a balance of 50. If you go on the network this occurs on, you will know that 50 has been deposited because it's the first transaction, that 50 can now be sent to any Ethereum address, but you won't know what each note is worth.
00:22:15.028 - 00:22:59.120, Speaker A: Basically, that person can then withdraw whatever notes they get back into public if they so desire. But again, the transactions themselves will be you won't know the amounts being sent unless there's a conversion back into public. Sender receiver addresses are still publicly visible, correct? Yeah. So the first version of Aztec is just amounts. Something that we released a month or so ago is something called Plunk. So one of the big kind of design constraints that we had when we started is one, proof construction needed to be fast enough for a user to basically not notice it. And second, there had to be this interoperability.
00:22:59.120 - 00:24:02.710, Speaker A: So everything from Graph 16 basically just was out of the window. And it's what led us to not use Snarks in the first place, but with universal Snarks, now basically the next version of the proofs that we deploy, it'll be the same protocol as just new proofs will add anonymity. So in that world, you basically have full privacy right now, it's really just the amounts being hidden. So, yeah, hopefully the docs will speak to you about how to do this better than I could. But effectively what just happened is you adding privacy to your adapt. So if you want to build a DAP with a private flow, it's literally one line of JavaScript and a couple of deployed contracts on Ganache which are just handled by the starter kit, and you can effectively just have privacy available to you. Cool.
00:24:02.710 - 00:24:41.176, Speaker A: I said at the beginning that my talk was short and sweet, and I meant it. It was a short and sweet talk. This is the kind of stuff because it's ever so slightly different to the things that you've dealt with if you've built on Ethereum before. It's not an account based model, it's in Xeronoled and all that kind of stuff. The best way to get familiar with it is just to play around with it. I think we have hopefully made it as easy as possible for you to just tinker with it as possible. But if you get any questions, if you're not sure how to proceed, we're going to be hanging around the whole weekend.
00:24:41.176 - 00:25:09.920, Speaker A: We're going to try to wear these same hoodies along the weekends, but they might get dirty, so try and memorize our faces somewhat. Otherwise just hit us up on Discord. Cool. Any last questions before I leave the next person on? I'll take it as a compliment to my clarity then. Have a good morning, guys. Bye.
