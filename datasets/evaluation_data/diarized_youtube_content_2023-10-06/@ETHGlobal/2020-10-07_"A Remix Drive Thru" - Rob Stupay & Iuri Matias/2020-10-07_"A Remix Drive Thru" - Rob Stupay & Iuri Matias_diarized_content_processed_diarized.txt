00:00:00.330 - 00:00:39.450, Speaker A: So up next we have a great talk from Remix. If you've been around the Ethereum space for a while, you're a developer, you've definitely used Remix. I remember using it in the very early days and it's gone through great transformation since then. So we've got Rob and Yuri coming up to give you kind of a walkthrough of Remix, some recent features and kind of the workflow you expect deck and kind of what you can use. And Remix, the Web app, remix Desktop from importing to deploying and more. So I'll let these guys take it over because they know more about it than I do. Welcome, Rob and Yuri.
00:00:39.450 - 00:00:47.600, Speaker A: I think you're muted there. Rob good to be here.
00:00:47.750 - 00:01:20.506, Speaker B: Okay, so I think I'll start by sharing my screen and get onto the presentation. But we're going to go over the interface, the plugin architecture and the differences between Remix Desktop and Remix Web App. So I'll get going with the share. Okay. Is it sharing? Hello?
00:01:20.628 - 00:01:21.538, Speaker A: Yeah, all good.
00:01:21.624 - 00:01:56.658, Speaker B: Okay, great. So when you come to remix this is remix ethereum.org. It's an online IDE. So when you get here, you probably come to the home screen, which is Lists. You can see our Medium articles and our Twitter feed over here on the right. Generally just a general architecture of remixes. Here on the left is the icon panel.
00:01:56.658 - 00:02:57.770, Speaker B: This lists the plugins, which are loaded here, and here's the home tab. And this is the main panel. And this is a Solidity file, which you get from the File Explorer. And there are some default Solidity files here just to try stuff out, like, well, browser, storage and owner. And they come up here. And then when you want to compile it well, actually, if we go back to the home, generally it's used with Solidity. And with this plugin architecture, to get different functionality or connect to Ethereum like blockchains, you got to use different plugins.
00:02:57.770 - 00:03:41.040, Speaker B: But we'll load a bunch of plugins with one click. When you click the Solidity button over here on the featured plugins, so you get the Solidity compiler, but also you get deploy and run and unit testing. But here in the plugin manager, you can load a number of other plugins or a lot of other plugins and deactivate them. So first we'll compile this contract. Actually, no, I like looking at a light screen. So I'll go over here and there are a number of other themes. And this is the settings panel, which the icon as you get to down here.
00:03:41.040 - 00:04:45.522, Speaker B: And then this file has to use a compiler that's less than seven. But you choose your compiler here. And actually if we had changed this to six and we want to compile it by clicking the compiler here, it loads a lower version so that it will work with this. But if we raise this back to seven and then we can raise this to something else, and then it's loading the compiler now and then it's compiled when you see this little green badge over here. And now that it's compiled, you can get compilation details. So by clicking down here. And this is important for getting like the abi, if you want to grab the API and you can grab the Abi and put that in your DAP so I'll get rid of that.
00:04:45.522 - 00:05:52.120, Speaker B: And you can also publish to IPF and swarm here the compiled file. And then you go to the deploy and run. So in remix it comes with a default blockchain which is on the JavaScript virtual machine. And then there's injected Web Three, which is essentially MetaMask as long as you have the MetaMask extension installed on your browser. And Web three provider, which will connect to a local node, a test node, or you could point it to another specific node. And when you use the JavaScript VM, you don't need to approve the contract, the transactions and the accounts we give you, I don't know, ten with some ether on them. Okay, so looking at this interface now, we can deploy it to the JavaScript VM and we deploy that here and the deployed contracts comes down here.
00:05:52.120 - 00:07:00.446, Speaker B: If I want to interact with the contract to change the owner, I would grab another address here, copy it and then put it in here and change the owner. And as you can see, something happened, it reverted. Oh yeah, I wasn't the owner because only the owner in this contract is allowed to change the ownership. And so this is when a transaction doesn't go through. And then you can click here to get to the debugger, which I'll show you a bit later. But now that we have the right owner up here and we have the new owner we want to change to, we'll click that and it will go through. So this is a transaction that we're going to put through.
00:07:00.446 - 00:07:59.230, Speaker B: But if I want to do just use a view or view a pure function, they're in blue and they look like that. And that's the return of the view and pure function down here in the editor. As you can see the terminal, you can see where the transactions are displayed. So if we want to get a payable function here and change this to a public payable, and then we go back to and compile it and then we'll get rid of this and then we'll deploy it. It's now red because that's a payable function. And if you wanted to so that means we're sending value and we choose what value, what unit and what value here. This is not the gas, this is the value.
00:07:59.230 - 00:09:09.350, Speaker B: And that's how you change and send it. Okay, but we'll make that back, put that back to what it was. Okay, so now if we want to change it to MetaMask, so we're deploying it to Gurley in this case, because I've got MetaMask connected to Gurley, I'll deploy and it's asking me for approval. And you give it and then it comes back over here and then it gives the ether scan link. And when that transaction comes through, finishes processing, it'll show up here. Let's see, in terms of hackers will probably need to be working in will be I mean, one of the big things you're going to be doing is importing files into Remix or into whatever ID you're going to use. So here I'll get a sample way of importing.
00:09:09.350 - 00:09:56.870, Speaker B: If you have a gist, I got a gist that I'm going to show. So we go into the terminal and if you type Remix, it gives a command line interface code, completion of some commands, and we're going to load gist. So it completes that. And I got the ID of the gist. And then we load that. Okay, so now you can see the gist is loaded. This gist folder showed up and this is what was in the gist.
00:09:56.870 - 00:11:29.620, Speaker B: Also you could load a URL this way too. So like if I wanted to load Smart Safe math, then I come back here and I do Remix load URL and it let's see, did it get it? Maybe it didn't work. Maybe the path was not correct to that. Oh, that okay. See loaded. And then if we wanted to refer to this file, you'd have to like if we wanted to load safe math into one of this file, you'd do an import, but you'd have to give the entire path to that folder another way to load it. Actually, another thing you should know about is here in the File Explorer and almost in all of our internal plugins and most of the external plugins plugins that other teams have created.
00:11:29.620 - 00:12:45.324, Speaker B: There's this book here which will take you to the documentation. In our case, it's on Read the docs, but this link could take you to whatever the plugin documentation is. But if you wanted to connect the other issue here is the files here are stored in local storage on your browser. But if you wanted to connect Remix, the web app, to a folder on your computer, you have to have Remixd running. So I'm going to load that plugin and I'm not going to hit Connect because this is the link to the tutorial and also the command that you have to put in a terminal on your local computer because we're connecting to a specific folder. So I'll put that command over here. It's not going to work if I have Remix Desktop running, which I think should be running here.
00:12:45.324 - 00:13:40.960, Speaker B: So I got to close that and I'll go over here and I'll run this command again. Because both Remix Desktop and Remix IDE are connecting via Remix D, it's only going to be me in a presentation that's going to have this problem, I think, anyway. So that's working. And so now when I hit Connect in File Explorer, I'll have localhost. And this is the folder that I'm pointing to. And so in this folder I could share files, I could pull a repo from GitHub and it's going to show up on the online web app. And if I clear my browser storage, I'm not going to lose any files.
00:13:40.960 - 00:14:47.510, Speaker B: And if I made a new folder file up here, for example, when I clear my local storage, this untitled sol is going to go away. Yeah, that's important to know. And so I can pull files in from GitHub or I can pull MPM packages into that folder just like you normally would. Now the other thing to do is I think we're going to go over to Remix Desktop because then you don't have to jump through the hoop of doing Remix deep. So I'll turn off this and I'll launch Remix desktop. And oops. And it's starting.
00:14:47.510 - 00:16:00.072, Speaker B: So here I like the white theme anyway, light theme. And so now here with an open folder, you can point to a folder on your hard drive and I'm going to point you to this one. So now the contents of that folder are showing up in Remix. And the great thing here is that I can refer to NPM packages just with the at symbol here like you would do in Truffle. And then that will compile. Okay, so the difference with Remix Desktop and Remix, the Web app is that in Remix Desktop, there's no MetaMask because it's not a browser. So there's no browser plugin.
00:16:00.072 - 00:17:26.916, Speaker B: So either you have to have you can use the JavaScript VM or you can use Web three provider and that will connect to a local testnet as long as you have it running in the background. And here I'll get that mine running in the background and I connect. So now it's connected. You can see here is the indication of what the testnet is and I can compile owner and I'll deploy it and then that's on that testnet. The other new development here is that we can use a Wallet Connect plugin, which I think is activated currently. Yeah, Wallet Connect is activated if I have MetaMask not the browser plugin, but the mobile wallet sometimes. This is a new addition to Remix.
00:17:26.916 - 00:17:55.520, Speaker B: So I'll try to get this to work. I think it might work. The last one. Well, I'm going to clear it probably a bad idea, but okay, well maybe that oh yeah. Okay. So I'm going to connect. And now I have got Remix Desktop connected to my mobile wallet.
00:17:55.520 - 00:18:57.590, Speaker B: And so now when I go to deploy, I'll switch to Wallet Connect. And now when I go to deploy, there's a window that you can't see because it's on my telephone. And then I have to edit the gas. So I give it a lot more gas than the default is for this deployment and I hit save. Hope that's exciting for you to watch. Okay, the nonsense is too low, but you can get that to work, I think we'll clear the current request. I'm not sure it's worth trying it again, but anyway, did it work? I don't know.
00:18:57.590 - 00:20:08.776, Speaker B: Okay, so what else should we cover? We should probably cover other plugins in Remix. So a really great one is the Documentation Generator, which is this one. So if we go to we'll go to File Explorer and make sure we have the owner is the active file in the editor and then we'll compile it. And then we'll go to Documentation Generator and we'll get that. Of course, this thing is blocking the top of my screen. Okay. So I guess we're going to go like this so I can see the top and choose Document Viewer.
00:20:08.776 - 00:21:24.618, Speaker B: And here is the interface of the contract. So if you're working with team members that are trying to explain your code, you can generate the interface. And the interface is made from the Natspec comments here. Oh, well, these aren't Natspec comments. So if we go to here's and then we use that plugin here, documentation Generator and we've compiled it up, compile it and then we go here and we can view the documentation over here. That's a bit better. Okay.
00:21:24.618 - 00:23:21.310, Speaker B: Another interesting and it's also important is the static Analysis Tool and Remix and the unit testing. So if I wanted to test owner again, make it the active file and then we generate it. And then I want to run this and here it's because it's checking this failure here and it shows you the name of the function that failed and what the issue is. And there is a number of we have good documentation about this but also tutorials on our Medium publication list. And as long as we're doing that, we could go to we'll just do a quick debugging session too, where we'll compile we'll just deploy this to the JavaScript VM and then change the owner. Also you should know that down here, if you open this up, you can see each parameter will have its own input box. So if there were like five parameters for this function, they would each have their input box and it'll save you some sanity.
00:23:21.310 - 00:24:10.400, Speaker B: Also, if you click this button, it will tell you it will encode the values and copy them clipboard. But if they're not the right type, it will error. So if we click that it will say copied because it's the right type. But if we had like that, we'll say error. And that's useful for just knowing that you put in the wrong type. So we'll hit transact, try this again it and then we'll change the owner. And then we can go to the debugger by clicking over here.
00:24:10.400 - 00:25:15.250, Speaker B: And in the debugger we'll see we can scroll. It will show the solidity locals and the solidity state variables. And this will go step by step, opcode by opcode and soon you'll see that what the input was for. The new owner and the solidity local, which is over here. And similarly, as while you're writing your code, you could turn autocompile on here. And if you add something that also there's yeah, if you if you add some code here, then it'll give you an error. So it will always pop up the errors as you're typing.
00:25:15.250 - 00:25:59.540, Speaker B: And those are the essential ones. There's a number of other interesting ones too, including Gas Profiler will tell you how much gas you're using and you can load EPM to download modules. DeFi Explorer is a great new plugin, and it will load all the in this case, right now, it's the first one that's working, but it's uniswap. It will load all the protocols files so that you can start playing with them. And I think we could take some questions now.
00:26:07.430 - 00:26:35.020, Speaker A: Great. Thanks, Rob. All right, I will turn it over to my team behind the scenes and see if we have any questions. Mean, maybe, Rob, you can kind of know anything else you want to get into about what the future might hold for Remix kind of features on the roadmap you'd love to see or even just things that you think are generally missing from the Ethereum Developer devtool suite that maybe other people are working on.
00:26:36.370 - 00:27:55.480, Speaker B: Let's see. Well, we're starting to get some of the documentation translated into multiple languages. What else is going? I mean, there's going to be some more developments with the Wallet Connect plugin because it becomes like a nice way of developing an app and Remix that it's more like you're a DAP user at the same time you're developing the app. So that's important. And I'd like to see more interaction between how you can be like a Truffle developer and use Remix for what it provides so we can use the tools together and also an Embark developer and use Remix for what it does. And we're also like we have a Quorum plugin, so we also have this Remix plugin architecture. So it's interesting to see if this architecture could be used in other projects outside of Remix on a kind of macro level as well.
00:27:55.480 - 00:27:59.160, Speaker B: And maybe, Yuri, you have some ideas too.
00:28:01.450 - 00:28:37.970, Speaker C: More under the hood. We're making an effort to make the libraries itself reusable in other projects. We have a simulator that Remix uses that can be run on the command line and you can connect to that simulator. It's useful because it has some debugging functionalities. We also have a command line debugger, and we're making that debugger also usable as a library. So other projects can integrate and leverage the same debugger.
00:28:45.050 - 00:28:57.130, Speaker A: And one other question. If people want to contribute to Remix, where do they go? Is there a place they should come chat with you? Do you want to direct them to a specific repo if they want to contribute?
00:28:57.630 - 00:29:10.254, Speaker B: Yeah, there's both the getterchat it's Ethereum Remix. I'll have it in the slides that I'll share later.
00:29:10.452 - 00:29:11.246, Speaker A: Got it.
00:29:11.348 - 00:29:28.290, Speaker B: And then also the repo isproject, which is our new monorepo. So that's the overarching repo to check it out, pull from got it.
00:29:28.440 - 00:29:48.554, Speaker A: Okay. Thank you, Rob. Thank you, Yuri. We'll call it there and introduce our next speakers. Really, thank you for the time, and I hope that any hackers watching this get to use remix to build your product, and I'm sure you can ask any questions you have about it in the getter chat. We'll make sure that that link is dropped into the event chat as well.
00:29:48.672 - 00:29:49.002, Speaker B: Okay.
00:29:49.056 - 00:29:49.526, Speaker A: Thanks, Rob.
00:29:49.558 - 00:29:51.020, Speaker B: You thank you.
00:29:52.430 - 00:29:53.320, Speaker A: All right, so.
