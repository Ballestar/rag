00:00:29.450 - 00:00:51.910, Speaker A: Awesome. Hello everyone to our third day of Hack Money workshops. I hope you all enjoyed the kickoff and summit that we had. We have Adam here from Compound doing a workshop on building the compound protocol. Questions go into the zoom chat. Adam will be leaving them all till the end. And with that being said, I'll pass the mic off to Adam.
00:00:52.410 - 00:01:20.634, Speaker B: Hey, thanks. Excited to be back at another Hack Money hackdon representing Compound. And I got a presentation here for developers to show you all how to get started building on the protocol. And you can use this code in your hackathon project and try and win that compound bouncy. So I will explain that a little bit. I got a little slide deck for you guys before I go through a little bit of code. So, I'm Adam.
00:01:20.634 - 00:01:40.134, Speaker B: I'm the develop relations lead at Compound Labs. I'm here to help out with protocol related development projects. You can find me in the Compound Discord. Adam B. I hang out in the development channel a lot. And of course during the hackathon I'll be in the ETH Global Discord. You can find me in the Compound sponsor channel and you can ask technical questions there.
00:01:40.134 - 00:02:14.340, Speaker B: Members of the Compound Labs team, including myself can help you out with that. You can also find me on Twitter. Adam Belosa on Twitter. So agenda of my presentation today, I will talk about the bounty prices for Hack Money 2022, what you can win. And I'll explain what the protocol is in case you're not familiar with Compound. And I'll also show you some developer resources, lots of guides, documentation, quick starts to get you started building a project on top of Compound. And I'll do a little programming workshop at the end that is related to Hack Money.
00:02:14.340 - 00:02:55.722, Speaker B: So the sponsor bounty this year is $3,000 of USDC. That is the grand prize for the best integration or upgrade to the Compound protocol. So you must use mainnet or a testnet instance or have a protocol upgrade in progress in your submission to be qualified for the prize. And everybody that includes Compound in their project but doesn't win the first place prize, they are part of the prize pool. So that will be divided up by the number of participants that use Compound and that's $1,000 USDC. Great. So again, I work at Compound Labs.
00:02:55.722 - 00:03:48.926, Speaker B: We are the creators of the Compound protocol and it is a protocol made up of several smart contracts running on Ethereum main net since 2018. And the mission is to create efficient algorithmic money markets. So what gets me excited to work in DFI is that we author and continue to steward decentralized, free and open crypto tools for everyone with an internet connection. And that includes the banked, the underbanked and the unbanked. And if you think about that, that's a huge amount of market share globally. So anyone on earth with smartphone and an internet connection can use DFI and use compound. So historically we've seen rates, interest rates for suppliers into Compound at 10% and even 15% APY on USDC, as well as several other supported assets which I'll cover later.
00:03:48.926 - 00:04:33.790, Speaker B: And I love what we're doing because it's different from traditional finance. Systems like Compound are transparent, they have public ledgers, code is law, and with DeFi you instead get decentralization and transparency, unlike centralized banking financial systems. And that just gets me very excited to work in this space. So what is the compound protocol? Simply put, it's crypto asset money markets. So we refer to it as the compound protocol. It runs on Ethereum, it's decentralized, which I'll explain shortly how it's decentralized. And the main use case is that it allows users to earn interest on their cryptocurrencies or permissionlessly borrow other cryptocurrencies.
00:04:33.790 - 00:05:14.870, Speaker B: So instead of an asset like Ethereum or USDC or one of the many others just sitting idle in your wallet, you can supply it to Compound and you earn a varying interest rate. So those are the two basic uses of the protocol. Everyone can earn interest on crypto or borrow other crypto. So that's the main use cases. It can only support crypto assets that are tokenized on Ethereum as ERC 20 assets. So this is something that is a limitation that is temporary. In the future, we're coming out with new versions of Compound where perhaps you could supply things like NFTs or other assets.
00:05:14.870 - 00:06:21.866, Speaker B: We'll be seeing what comes out of development in the community in the future. But for now, with the version of Compound that's on main net only, ERC twenty s and Ether, it allows suppliers to earn a variable interest rate on their assets. And an individual that uses adapt like the ones on the compound finance website homepage or their own code can use every feature of the protocol. So developers can build their own apps, use the protocol as interest earning infrastructure, and users or organizations can use the interfaces to earn interest borrow or participate in community governance. So use cases that we see are crypto wallet applications that use the protocol to offer interest earning for their users, again, so the assets don't sit idle in their wallets. And businesses that hold wallets for any period of time, they can use the protocol as a way to make some money off of that money that's just sitting vacant. So yeah, here's some examples.
00:06:21.866 - 00:07:08.462, Speaker B: If you are going to supply assets to the protocol, you can use one of the many interfaces or your own code that interacts with the blockchain. The supplier supplies their asset, it moves from their wallet to the protocol contract and in return the user gets C tokens. And C tokens are sort of like a code check for your underlying asset. And the exchange rate for C tokens increases over time such that you can redeem them for more of the underlying asset as the Ethereum block height increases. So let's say you supply one Ether and you get 20 C tokens in return. Sometime later, you can get 1.5 Ether for your same amount of C tokens that you have.
00:07:08.462 - 00:07:45.126, Speaker B: So that is the function by which the C tokens work. You can supply for as little as one Ethereum block, which is about 13 seconds nowadays. And this enables on demand supplying and redeeming of assets to and from the Protocol. So there's no need to wait for any lockup period. You can earn interest for supplying for as little as one block. So the other use case is borrowing. So, in order to borrow crypto from the Protocol, you must first supply another asset that is a valid collateral asset.
00:07:45.126 - 00:08:19.538, Speaker B: And the concept here is over collateralized borrowing. So you need to supply a greater value of crypto than you can borrow. So let's say in this example, someone is supplying Ether as collateral. Let's say they supply $1,000 worth of Ether. They will get those C tokens. In return, they will still earn interest on this Ether, but they can borrow another asset like Dai against this Ether. But they can't quite borrow $1,000 worth of Dai.
00:08:19.538 - 00:08:55.566, Speaker B: They can borrow a bit less depending on the collateral factors for that asset. So I believe the collateral factor for Ether is something like 80% right now. It sometimes changes with governance voting changes, but I believe it's about 80%. So you can borrow up to $800 worth of Dai for that Ether collateral. So that's over collateralized borrowing. Of course, the borrowed asset has interest that increases. So you will have to pay back more Dai than you borrowed initially in order to free up your collateral.
00:08:55.566 - 00:09:47.182, Speaker B: So those are the two use cases of compound is flying borrowing? One of the dangers of borrowing is that you can get liquidated if the value of your collateral reduces such that it cannot support your borrow anymore. Or if your borrowed interest accrues so high that your supplied collateral no longer supports the amount of that borrow. So the Protocol currently uses chain link price feeds to depend on the value of assets for collateralization. So if the price of an asset changes, you could get liquidated, or you can be freed up for further borrowing. So those are the two use cases. And also the risk involved with borrowing is liquidation. So the Protocol, historically it originally supported only a few assets.
00:09:47.182 - 00:10:12.922, Speaker B: But thanks to governance changes from our community, there are now 18 supported crypto assets. All of these are Ethereum based assets. And you can supply and borrow these assets. And a handful of them are valid as collateral. Some of them are not valid collateral, and that is based on community decisions for risk tolerance. Some we just don't want to treat as collateral. That's okay.
00:10:12.922 - 00:10:56.162, Speaker B: They can still be used to earn interest, or they can be borrowed. So, a little bit about the decentralization of the compound protocol. If you're not aware the Protocol is decentralized through a smart contract governor and also a comp token. So the community can create code changes to the solidity code of the protocol and execute those changes on chain and upgrade the protocol in a decentralized trustless manner thanks to the comp token as well as community proposals. So let's walk through how that works a little bit. First, there is the comp token. It is an ERC 20 token.
00:10:56.162 - 00:11:39.670, Speaker B: It is distributed to the users of the protocol in a slow drip fashion. The original distribution was meant to be over a four year period for those that are supplying and borrowing assets to and from the compound protocol. The community has changed up the speeds a bit and the direction in which the distribution is occurring. So you can follow along with that on the Comp XYZ forums. There's some discussion right now about turning off the comp distribution. But anyway, it's an ERC 20 token and it can be used to propose changes to the protocol which are real code changes. And it also can be used to vote yes or no on a protocol upgrade.
00:11:39.670 - 00:12:26.754, Speaker B: So here is the flow of protocol change proposals. Say a community member wants to do something like add a new asset or change a collateral factor or an interest rate model. They can do those code changes on chain and tell the Governor that they want to make these changes live and part of the protocol. In order to do that, they have to have, I believe it's, 25,000 comp delegated to their address. They can create this proposal in which the proposal is created. And then there's a two day period where the community can become aware and see the actual changes that will occur if the protocol executes this change. And after the two day waiting period, there is a three day voting period.
00:12:26.754 - 00:13:30.314, Speaker B: This is where comp holders and delegates can vote on chain yes or no whether or not they like this proposal. And once voting ends, if there are more votes yes than no, and also there are enough votes for the quorum to be reached, the voting will be successful. And then there's another period of waiting where applications that depend on the protocol can upgrade their code to make sure that the new changes are not breaking changes in their applications. And once that two day period ends, the time lock can have an execute function called by anyone and that will make the changes on chain and that will become the new code of the compound protocol. So that's a little bit about community governance and the uses of the compound protocol. We got resources for developers. If you want to build something that depends on compound or you want to contribute to governance where you make code changes to the code base.
00:13:30.314 - 00:14:20.650, Speaker B: You can find lots of documentation at Compound Finance Docs. There are smart contract method documentation, there are guides to building. There are SDK docs for the SDK compound JS which I'll be showing in my code demo coming soon. And of course all of our developer guides are on medium as well as use guides. If you're not a developer yourself, you can still learn about the protocol and how to use it using those guides. And of course we have two open source organizations on GitHub compound developers which includes lots of code examples for folks like you building in hackathons. And of course Compound Finance Organization has all of the open source code of the on chain protocol.
00:14:20.650 - 00:14:57.238, Speaker B: So here's the opportunity to pull out your phone, take a pick real quick or just QR scan. Here is the repository of the project I'm going to be walking through today for this hackathon. It is a continuation of the demo I built last year for hack money. It's just a little bit more built out application, some more features. So I'll be going through that next fun stuff. Great. So anybody can head over to my GitHub to check out the code I'm going to be walking through.
00:14:57.238 - 00:15:34.850, Speaker B: I'm going to end my slide deck real quick. All right, so here is the Docs page. Compound finance slash docs. This is where you can find a lot of the guides we have as well as links to the smart contracts, their addresses on mainnet as well as the testnets. And of course we have smart contract method documentation here. So if you want to do stuff with C tokens, which we're going to be doing today, you can learn about that over here. So here is my repository.
00:15:34.850 - 00:16:34.902, Speaker B: It is a full stack web application that is a DAP, allows users to connect using their MetaMask wallet and supply assets to the compound protocol. The addition here is last year I built the app that allows you to supply and redeem. This year there is a chart that is fetching the interest rate from the blockchain and it makes a nice data visualization so you can see the interest rate change over time for crypto assets. So this is something you could build into a dashboard during the hackathon. And that of course is a valid bounty prize winning project. If you want to check out the project I built last year and the live stream, there's a link to it in the README. There's also a link to the YouTube playback of last year's hack money.
00:16:34.902 - 00:17:06.190, Speaker B: So you can follow along with that presentation as well. If you want to learn more about supplying and redeeming of assets using Compound JS, great. So I have this cloned to my computer at the moment. I'm going to walk through that code. So got my terminal pulled up and I got my text editor. So this project is a little different from the one we built last year. Instead of having just a front end, we have a back end as well.
00:17:06.190 - 00:17:50.954, Speaker B: So we're able to have an API as well as database that caches data and we're able to serve these front end assets from our back end application. So I'm going to get started by walking through Index JS. This is our Node JS file. It runs a web server. And this web server serves not only files but data in a Rest API fashion. We've got an exprs app. So if you're familiar with Node JS, there's a popular framework called Exprs JS and it's popular for making Rest APIs as well as web servers.
00:17:50.954 - 00:19:00.434, Speaker B: So the first thing in the application is an instance of an Exprs app. This is what's going to serve our front end assets as well as our data. We're going to run that on localhost port 80 80, and we'll see a little bit more of how to run the app at the bottom of the file. To persist data, I'm going to use SQLite, which is a small, easy to use database system that is usually used for things like proof of concept or small pet projects. For more permanent applications and more robust ones, you might use something like Postgres or MySQL for your database. But for this demo application, I think in a hackathon SD Lite is good. We'll be caching our interest rates in a database so that each time a user requests it from our app, we won't have to query the blockchain, which of course, if we're using a provider like Infura or Alchemy, that could end up being expensive if we're repeatedly requesting the same data over and over again.
00:19:00.434 - 00:19:39.862, Speaker B: So I think caching this data is a wise decision for the programmer. We'll be using Ethers JS to fetch this data from the blockchain. This is a popular Node JS and front end JS library for interacting with the Ethereum blockchain. And I'm also using fetch. This is a Http request library and it allows us to fetch data from Etherscan. I'm going to be using Etherscan briefly in this app. So our connection to the blockchain is going to be this Mainet provider URL.
00:19:39.862 - 00:20:49.858, Speaker B: I have it imported as an environment variable so it's hidden so folks can't see it in your source code. This is just for code cleanliness and keeping keys out of the code. So this line here is how we serve our front end assets. So we have our public folder that's got our HTML, CSS, JavaScript and Express is able to serve it with just this one line of code. And then we have our one Rest API route here that our application makes available for public consumption. So if somebody makes a Get request to this rates 30 endpoint with the C token address of which they want to get the 30 days of interest rates, they can pass that here. And we'll get those rates either from the database or the blockchain if we don't have them in the database and we'll send that to the user.
00:20:49.858 - 00:21:37.074, Speaker B: So I'm going to quickly show what that looks like. So I'm going to run this file in my terminal and that makes a web server running at 80 80, and I can visit that in my web browser. This is what our app looks like, but we want to check out that endpoint real quick. So I'm going to copy this, paste that here and we need the C token address so I can go over to the docs. This is the docs page. Click networks and we can copy the C token address of any one of the C tokens. I'm going to copy C ether, come back over here and add that to the URL.
00:21:37.074 - 00:22:14.210, Speaker B: So this is going to make a get request to our web server. And what we see is a bunch of JSON data that's returned. So we got an ID, which is just basically our database holds an ID for every entry. Not important. We got a timestamp in ISO format of each day that the interest rate is from. So this is whatever the nearest block was on April 7 of this year. We find out that the supply rate per block for C ether was this integer.
00:22:14.210 - 00:23:00.190, Speaker B: So this way we're able to derive the APY from this supply rate per block. So I will be doing that in my front end code. If you want that example, you can head over to the Docs and go to Protocol Math. And we have some examples of interpreting exchange rates here, as well as calculating the APY using rate per block. So there's a little equation here. We can turn into JavaScript and take that supply rate per block from the C token and we can turn that into an APY percentage. We could also turn into an Apr percentage, but for the sake we're doing APY.
00:23:00.190 - 00:23:42.350, Speaker B: So those numbers here can be turned into an APY. And if we take a look at app JS on the front end, if you participated last year, this file should look familiar. We have a function for calculating APYs. That one's for the interface, but this one's for the chart. So we have a result here. We have our number of days in a year, approximate number of blocks in a year. And our ETH mantisa, we're using that same equation that was in the Docs to derive an APY from the rate per block.
00:23:42.350 - 00:24:13.240, Speaker B: So this is what we see in our chart. Here's an instance of chart JS. We're taking those interest rates that we fetch from the API and we're going to stick them into our chart. Here's our x axis and here's our y axis. So that is the chart we see on this page. We can see this C ether interest rate. It's been hovering at about 0.5%.
00:24:13.240 - 00:24:56.950, Speaker B: This is a pretty low interest rate because folks tend to use ether as collateral for borrowing. So there's a lot of supplied ether and not a lot of borrowed ether. So the interest rate stays fairly low for C ether compared to other assets like the Stablecoins, like Dai and USDC. Great. So we're going to go back to the web server file and walk through how we're actually fetching this data. So it's a little more generic than to just a compound instance of an application. This could be used for getting interest rates of any other protocol depending on the implementation.
00:24:56.950 - 00:25:39.410, Speaker B: But, yeah, we got a function here that gets the rates of the 30 days. This function either fetches them from the database and if the database doesn't have them, it fetches them from the blockchain. So I got a function here that uses JavaScript to find out the current date and what is the date 30 days ago. And it gets the midnight time of that date in an ISO format string. We also get today's date and we try and fetch that from our SQLite database. Here's our query. We try and get the timestamp between 30 days ago and today and get 30 rows, sort them by timestamp and the result from the database.
00:25:39.410 - 00:26:38.226, Speaker B: If we have all that data, it'll just be 30 rows, but if we don't have that data, say it's tomorrow and we run this for the first time, we only have 29 instances and we need to get today's interest rate. We will fetch that and fill in the missing rate and just fill in that one rate in the database. So this fill in missing rates function is the most complicated function here. But what it does is it uses Ethersjs and gets the supply rate per block from the C token that we pass to the function. We are going to use Ether Scan to find out what the block number is at the timestamp. Since with JSON RPC, we can get the timestamp of a given block, we can't get the block of a given timestamp. So to go the other way around, we have to use an external API.
00:26:38.226 - 00:27:10.094, Speaker B: We're going to use Ether scan, we get the oldest block in the timestamp. And what we're doing is we're guessing what the block should be on each day in between at midnight. So blocks nowadays are about 13 and a half seconds. So I'm taking the delta of time and multiplying that by 13.5 for the number of blocks. And then we get each approximate block at midnight for each of the 30 days. So then we are fetching that from the blockchain using Ethers JS.
00:27:10.094 - 00:27:50.720, Speaker B: Here's our contract instance, C token. And we're getting the supply rate per block at a specific block tag, which is our block at approximately midnight on each day. And I'm using Alchemy, which has historic fetching of functions. So you can call this function at a specific block in the past so it has historical access to the blockchain. This is available for free@alchemy.com, so you can get your API key there. And what we do is we try and get all the rates, we make 30 requests and we wait for all of them to respond using this Promise All function.
00:27:50.720 - 00:29:02.690, Speaker B: And then we fill those missing rates into a JSON object and then anybody that is missing from the database gets inserted into the SQLite database and then we merge them so we have our initial rates that we already fetched and any new ones that we're merging. And so the rest are some helper functions for inserting into the SQLite database. And of course the very first time we run the server file, we create our database table. So that is how our back end works. And also I showed you the front end code earlier with our chart and also our Http request to our server. And of course when we come to this page, we get our chart. What happens if I delete the database called DB RMDB? So now we have no more data cached.
00:29:02.690 - 00:29:34.990, Speaker B: So if we run the server and load the web page the very first time, it'll take a little bit longer for the chart to load because we're fetching that data from the blockchain. Great. So it took a few seconds for the interest rates to load and we see the interest rate went down today, went down by zero 1%, back to zero four. And if we refresh the page, the chart should load instantly. Great. And it loaded instantly. Our data cached using our SQLite database.
00:29:34.990 - 00:30:09.482, Speaker B: And of course we have this little widget from last year's Hackmoney workshop. You can supply ether to the compound protocol here, input the amount you want to input and you can supply it and redeem it also using this function. And this of course uses compound JS. And if you want to learn more about that, you can watch the playback from last year's Hack Money hackathon. I have that linked in the GitHub repository. You can go over here and we got a link to the YouTube playback from last year. That is my presentation for this year.
00:30:09.482 - 00:30:47.480, Speaker B: Happy to answer any questions in the chat. Pulling up my chat window here. Don't see any messages yet. Glad to know that I explained things so thoroughly and clearly. I don't have any questions yet. Please don't be afraid to ask questions. I'm here to help you out.
00:30:47.480 - 00:31:00.890, Speaker B: I can also answer questions later in the sponsor channel of the E Global Discord. Happy to help you out with your technical questions and validate your project. Make sure you're good to go win some prizes.
00:31:01.870 - 00:31:27.554, Speaker A: Yeah. Awesome. That was great, adam, thank you so much for doing that workshop. Yeah, I think you did such a great job that everyone simply had no questions. But as Adam said, he is reachable on the Ecoblit Discord in Hashtag Sponsor compound for the entirety of the event. So definitely feel free to reach out if you do have any questions that come up. But yes, once again, thank you Adam, for taking the time to do this workshop with us.
00:31:27.554 - 00:31:33.814, Speaker A: For a hack money. Oh, actually, it looks like you got a question just now.
00:31:33.932 - 00:32:19.010, Speaker B: Awesome. Yes, I see it. I will pull up my slide. So the sponsor bounty for compound this year is to create the best integration or upgrade for the protocol. So you can create an application that uses any of the instances of the protocol, whether that be Mainet or testnet. Use the protocol for interest earning or borrowing of assets, and you can also do smart contract upgrades. So if you want to maybe reduce the gas costs of a C token or the comptroller, you can dig in there in the smart contracts and create a pull request that would count as a valid sponsor bouncy project submission.
00:32:19.010 - 00:32:51.600, Speaker B: And yeah, $3,000 is up for grabs. Happy to see your projects coming in and I'll help you out with them for sure. Thanks, Victor. We have a question from Narjith. Sorry if I pronounced your name wrong. How is ave token used in compound? So, Ave is one of the supported assets in Compound, so users can supply Aave to earn interest. They can borrow Aave if they have a different asset and they want to borrow Ave for something.
00:32:51.600 - 00:33:29.290, Speaker B: And also you can use Ave as collateral. I believe it has a collateral factor. We can check that out in the docs or actually not the docs, the markets page. So if we scroll down to Ave, ave has a collateral factor of 70%. So if you want to borrow a different asset, if you have Ave, you can supply it to the protocol, and you could borrow up to 70% of the value of your Ave as another asset. But you shouldn't borrow 70% right away because you'll get liquidated in the next block. So make sure you borrow, much less depending on your personal risk tolerance.
00:33:29.290 - 00:33:45.534, Speaker B: Thank you for your question. Let's see. Next one. Can we please share links to the GitHub repo? Yes, we can. The link is here. Here's the QR code if you want to scan that with your phone. And the link is also GitHub.com
00:33:45.534 - 00:34:03.174, Speaker B: AJB four one three, compoundhackathonmoney 2022. I'll put that in the chat. Boom. You got it. Oh, somebody already posted it. Awesome. What is the best way to reach out for help when developing on Compound during hack money? You can reach us in the sponsor discord channel.
00:34:03.174 - 00:34:18.140, Speaker B: There's a compound sponsor channel? I'm hanging out there. Jared, our Director of protocol, is hanging out there. And Tori, one of our front end leads, is there as well. Looks like that's all the questions.
00:34:18.590 - 00:34:44.370, Speaker A: Awesome. Thanks for your questions, everyone. And yeah, once again, thanks, Alex. Sorry, Adam, for the workshop. And for the rest of you, we do have another workshop happening tonight in about half an hour, the idea brainstorming session. So if you need some talking through with your ideas or need to get some inspiration, definitely go to that. Luke from our team will be facilitating that.
00:34:44.370 - 00:34:58.110, Speaker A: Otherwise, this workshop. Is recorded and viable on YouTube anytime. So feel free to come back to this if you ever need help. And with that being said, I hope everyone has a great weekend and thanks for joining.
