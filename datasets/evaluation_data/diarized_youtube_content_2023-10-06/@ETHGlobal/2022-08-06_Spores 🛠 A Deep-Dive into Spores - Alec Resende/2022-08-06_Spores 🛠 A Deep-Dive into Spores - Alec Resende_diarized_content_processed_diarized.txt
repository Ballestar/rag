00:00:07.210 - 00:00:41.446, Speaker A: Hey, everyone. It's alec here. And in this presentation, I'm going to break down spores for you. We're going to look into the tech behind it and how it powers Remix culture in Web Three. So what is spores? Spores is a new way to remix culture as you experience it using a Spore shown here, you can listen to music and then remix them. As you listen to it, you could sort of like apply effects, slow it down, loop stuff, just make it your own. And then after listening to it, a new recording of your session is produced, a new remix.
00:00:41.446 - 00:01:32.890, Speaker A: And we preserve that on Chain with all the historical information preserved as well. But what exactly is this entire flow? So pictured here is like how we imagine the flow. It goes from the Metaverse, where there's all this music, beautiful art videos, and there's like a subset of that that is just music. So we take this music and put it into the Spore player, which is where the user sort of remixes it. And then at the end of the session, a new recording is produced, an MP3. And then we also then have the Remixer open up their wallet and sign a message attesting that they recorded that MP3, that Remix. But then along with that, we collect other provenance information, like the collection address of the Music NFT that was used and the Token ID.
00:01:32.890 - 00:02:14.646, Speaker A: So basically from that, you can get what was remixed and who remixed it. So if you get this content and provenance, if you combine that and transmit that on chain, you have all you need to basically say, what are all the remixes for a certain Music NFT and who remixed them and can I listen to it? Yeah, it's right there. So the actual transaction that we run is a testnet transaction. It's basically very simple. It just emits a new message that says a new remix has occurred. It has this address of the Remixer. The original content is this collection address and Token ID.
00:02:14.646 - 00:03:11.542, Speaker A: And the MP3 is this address on IPFS. This identifier. So after all these events start popping up, we index them and basically just show it on the front end. And it lets you sort of open up a song to remix it, but then also see all the other remixes that sort of match up for that song. And so with all this information stored on Chain, it actually becomes really easy to fairly mint a remix. So we imagine when someone wants to mint a remix, it would be very crucial to cut part of the proceeds to go to the originator, like the originator of the content. So using Ox splits, you could actually create a split between the remixer's address, the creator of the original, and even cut in the owner of the original, like the Collector.
00:03:11.542 - 00:04:24.362, Speaker A: Say there's a collector of the original music. NFT. You might want to actually cut that into so using ox splits, we create a split between all these three people and that generates a new address where all funds could go to if a sale is made. So using this, the flow becomes mints, an MP3 on wherever place and then listed for sale using one of the Zora Marketplace modules. And we want to use the Zora Marketplace module is because they have this awesome field called seller recipient funds which basically says if the NFC is sold, the funds should actually go to this specific address and you could actually put an ox split address as that recipient for any sales. So you can imagine if that NFT is actually sold, then the Remixer, the creator of the original and owner of the original will all get their distributed proceeds. That sort of describes the surrounding ecosystem around the spore player.
00:04:24.362 - 00:05:37.480, Speaker A: But for the rest of the presentation, I want to get into the actual mechanics of inside the NFT itself. So to begin, I'm going to just say that spores are HTML NFTs, which is this new, sort of like newish thing that is basically an encapsulated website with no backend and it can't go down because it's hosted on decentralized storage and they get displayed on marketplaces like Zora as an embeddable. Iframe basically like a mini website within a larger parent website. So what are they actually good for? Well, real time interactive NFTs basically can only be an HTML NFT. They're really good for generative art as well because they actually can utilize powerful web APIs like web audio for music and WebGL for graphics and many other things just like the entire library, like NPM library. So here are just a couple examples of my favorite HTML NFTs. Kim Asendorf had made Sabotage which is this amazing infinite WebGL sort of shader thing.
00:05:37.480 - 00:06:30.866, Speaker A: It's just amazing, it just goes on forever. And you can see here that these are like different tokens that just get updated and it's a different thing each time because they're all generative. You have Hepta by Terrapar Vianin which is this FX hash piece which is basically an infinite piece of music that goes through different scales and stuff along with this cool graphic. Should definitely check it out. It's on the FX hash and then solvency by Ezra Miller. It's also just an infinite WebGL, just an exploration of what you can do with this new format. So those are just like three examples that all sort of tie into the fact that you deploy the piece of art once, but then use the token IDs to make them different for each token.
00:06:30.866 - 00:07:25.014, Speaker A: Sort of like the generative aspect of it. So you could sort of think of like HTML NFTs as just a little box with an input and the input just takes in token ID and based off of that input it becomes different each time you could think of it sort of like a URL. That's really what it is. It's a URL pointing to the base Uri of the NFT. But then also the params, the query params is where these inputs go and they're like read once on load and then based off of that, it looks different each time or for each token. But if you start to think of stuff as just boxes with inputs, you start to actually get into modular synth territory. Which is why I think HTML entities are literal, are basically just modular synths.
00:07:25.014 - 00:08:03.266, Speaker A: Shown here are two amazing electron pieces of equipment. They communicate via Midi cables and then audio cables. They go to a shared speaker and you hear it. The protocol they listen, they communicate with it is Midi and they can basically control each other and pass information back and forth. So we actually think that HTML NFTs are like that. For spores, for instance, we really sort of like go off this concept of inputs and outputs you could think of in the center. Spores is here as the HTML NFT.
00:08:03.266 - 00:09:24.954, Speaker A: We pass the NFT a song to remix as a URL, along with stuff like start the song, go to the middle of it, change the tempo. You could basically sort of just pass control data and other stuff into it, but then also it outputs data as well. Like for instance at the end of the song it outputs a CID and IPFS Identifier of the new MP3. In our front end, the parent website actually listens for a message emanating from the embed like the Iframe. And then that is sort of like how we capture the recording. So it's actually something that I would like to see more NFTs doing is actually sort of exploiting the fact that the whole Iframe post message API, you could basically pass an NFT like arbitrary data while it's actually playing not even just on load, but in the middle of experience you could pass a piece of data, change everything or whatever. So this is really how we do the entire front end for spores is we have the spore player at the center and then we basically pass it in inputs.
00:09:24.954 - 00:10:25.318, Speaker A: For example, we sort of hook up the Zora API and we query it and we get new songs to remix. You can sort of think of it as another module in the modular synth. The Zora API is like outputting songs, it goes into our spores NFT, the user sort of controls it and then it spits out a new recording at the end. But you could actually extend that beyond just like different APIs. You could sort of chain NFTs together in this way. So say you had another HTML NFT that also outputs data, you could presumably output that data into another NFT, which then outputs it into another NFT and sort of get this sort of chain of objects sort of like talking to each other and sort of working in tandem in an interesting way. This is really how music devices work.
00:10:25.318 - 00:11:25.862, Speaker A: They all communicate in Midi but you could have different brands making different devices. But since they all talk the same protocol, they all can sort of communicate and control each other and sort of add value to each other where they're not like competing and stuff. So basically we think that HTML NFTs are like that, especially when you exploit the fact that they can pass data in and out. Anyway, at the end of this presentation I just want to get into sort of like the hackathon side of things. So we created a new GitHub repository that's open source and it basically lets you add a programmable spore to your site. You could do a few things with it, you just go to the GitHub here and you'll see how to set it up and basic usage. And then also just like the app JS will just show you how to use what's like some examples of how to use it.
00:11:25.862 - 00:12:36.030, Speaker A: But the main thing that I want to get into is we added the ability to sort of mix two songs together sort of like a DJ mixer would. So to add that to your site all you have to do is just add this line that's just like spore, embed the URL to the main song and then a URL to the alternate song and then with that it'll load the player and let you sort of like crossfade between the two. So I think it would actually be really interesting if someone tries to use the Zora API to find tracks that mix well together are in key. The Spore will just keep them in time and will make sure everything sort of works as long as they're in key. But there's some other things that you could also do with this library is you could pass it an image to sort of like skin the spore. So I'd imagine it'd be cool to sort of send cover art to be the skin of the Spore. Again, you can get that with the Zor API or even just any image really just make it your own and sort of have fun with it.
00:12:36.030 - 00:13:44.420, Speaker A: And then finally one last thing that I think is really interesting is sending actual samples into the Spore player. So the Spore player basically lets you mix two songs together like the main and the alternate, but then you sort of have this list of samples that you can sort of cycle through and they're just basically play on top of the music that's playing. So you can imagine you could have drum breaks there that you could sort of just fade them in and sort of have them play on top of the whole mix. So I think with all of these things you could actually create a pretty interesting compound format. So I think it would be a cool thing to hack on is to create a JSON containing the main song, an alternate song and a list of samples that work well together and store this JSON on IPFS. So you basically have a new format that bundles two songs with loops that work with it. And if you just plug that into your project, it would just play that for people.
00:13:44.420 - 00:14:30.500, Speaker A: And just really quick, I just want to for hacking purposes, it's probably good to know what the different controls do. So this is just like a general diagram of the Spore player. You have sort of four sliders, a center button, and like an Led button. So those additional loops we call juice samples are controlled with this slider. Like the top left, the bottom right slider controls the crossfade between the main track and the alternate track. Basically, at zero, you just hear the main track at 100%, but then at 100%, all you hear is the alternate track with none of the main. It's just like a DJ crossfade between the two.
00:14:30.500 - 00:15:21.520, Speaker A: And then finally the center button will sort of go to the next juice sample. Again, just like going back to this, the juice samples, you could pass them into the player as a list. You could think of it as drum break number A, like letter A, drum break two, drum break three. And then by clicking the center button, it'll go from one to drum break one, to drumbreak two, et cetera. But then also, if you want to go back to a previous sample, go back in that list of where you are, just click the background. It will basically shift, go back one. I think with the sports kit and a couple of these initial ideas, I think there's something there that can really be hacked together and make something really cool.
00:15:21.520 - 00:15:46.020, Speaker A: But anyway, thank you so much for hearing me out. I really loved just explaining all this and just thinking about how to explain this. But if any of this have left you with some questions or you just want to chat, just feel free to DM me at my Twitter or at Sporesdao, our projects Twitter page. And yeah, see ya.
