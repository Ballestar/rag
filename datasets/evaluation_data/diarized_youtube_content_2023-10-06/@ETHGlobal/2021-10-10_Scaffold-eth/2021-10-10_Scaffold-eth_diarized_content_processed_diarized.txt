00:00:05.450 - 00:00:07.534, Speaker A: Let's kick off with our first talk of the day.
00:00:07.572 - 00:00:12.320, Speaker B: I want to welcome Austin, who's going to dig right into Scaffold. So Austin, welcome.
00:00:13.330 - 00:00:39.714, Speaker A: Thanks for having me. Kartik excited to do a whole day of DevTools. This is really neat. There's a lot of gigabrains you guys have amassed here together to talk about tools and Ethereum. Like you said, I will dive right in. I'm a builder on Ethereum and I work on this tool called Scaffold ETH with a great community of folks. But just to zoom out just a little bit, this is a great landing spot.
00:00:39.714 - 00:01:09.122, Speaker A: Ethereum.org is a great place to go for a big picture, learn the how and the why. And if you get in here for developers, there's the tools that we're going to a lot of the tools that we're going to see today are here listed somewhere on this. So you can get started. And I'm going to be talking about scaffold ETH. But Scaffold ETH is just a collection of a lot of other tools like Hard Hat and Ethers. So we'll hear from them later today too.
00:01:09.122 - 00:01:39.180, Speaker A: So let me jump into scaffold ETH. So scaffold ETH is a DAP template. I found that creating my whole stack took a lot of time at every hackathon. So Scaffold ETH is a template where you have everything freestanding and working right out of the box. And you can kind of tinker and learn and go from there. And what I mean by that, let's just go ahead and get it started here. So I've got my front end.
00:01:39.180 - 00:02:06.418, Speaker A: Let's Google scaffold ETH here. If you Google Scaffold ETH, it's going to drop you right into the repo here. And you can follow this. Basically you will need like node and yarn and git. And that can take some time to set up. Make sure you get the right yarn if you're on Linux. I go through that a lot with developers where it's just getting the environment right takes a little time.
00:02:06.418 - 00:02:41.166, Speaker A: Then you'll clone down scaffold ETH yarn install and yarn chain, and yarn chain fires up hard hat. So it has a Hard Hat node on the back end that has a bunch of wallets for us that are loaded up with ETH. And then you'll yarn start and that will bring up your dev server, your react server, your front end. So we kind of have a back end and a front end. And then the last step is to yarn deploy. And what that's going to do is take this stock contract, this kind of like example contract for you, and it's going to deploy it to the front end. If I bring this down, let's see, I don't even know what I'm doing here.
00:02:41.166 - 00:03:19.578, Speaker A: Let's put that there. Then we get this interface. And this interface is the key piece to Scaffold ETH. Being able to have your smart contract here and your front end here and be able to do things like, let's grab this person's address and let's make an address public owner and set it equal to that and hit save and then yarn deploy. And you get in this iteration loop where you're testing your assumptions, you're building on your smart contract, you're learning solidity. And kind of this front end is kind of auto adapting to your changes as you write your contract and figure out kind of how that's going to work. And look.
00:03:19.578 - 00:04:01.818, Speaker A: So one fun thing I like to do on a mentorship session is just set it up so maybe like the owner can edit this first so the owner can set the purpose first, right? So we're going to make sure that the what message sender has to equal equal the owner, right? And if it's not, then we will say not the owner. Simple, solidity. We're testing it out. We're trying it out. How do we go about testing this? Well, this leads us to how wallets work in Scaffold E. So if I bring up an incognito window oh, not the luggies. If we go to local host, there we go.
00:04:01.818 - 00:04:24.554, Speaker A: And not I think it's 3000. There we go. Got a lot of apps running here. Okay, so if you bring up an incognito window, see how we have this green account here. And then over here on my other window, there's kind of like this purple account. And there's this big annoying button that helps you grab funds from the faucet for any of these accounts kind of as they come up. But no, this is just like a burner wallet.
00:04:24.554 - 00:05:15.630, Speaker A: Eventually you can connect your MetaMask or some other wallet and that's going to be there for you. But at first just testing what you want to do is just kind of use a burner wallet and kind of just click and make these transactions quickly. For example, if I wanted to send some funds from purple guy to green guy, I can kind of just copy this address. And then over here in the wallet, I can paste it in and I can see visually that we have the correct address and I could send $10 and notice how it's in USD, right? Like Scaffold ETH is doing a lot of stuff here with these components. So it makes a DAP just feel and work better, right? We can click back and forth between ETH, but for the user they're like, yes, I just want to send the $10 and I just want it to go right. So notice no MetaMask prompt. We have notifications locally and that'll fill in with block native eventually when you go to a public network.
00:05:15.630 - 00:05:50.460, Speaker A: But you can see that I can send money between those two wallets. So now these two wallets are interfacing with our smart contract. So if from this dude right here who is actually the owner, we can see if I say Hello World and I send that in, we get Hello World to change and if we do a read there, we see it and this should fail, right? I think if we did everything right, yes. Not the owner. Awesome. Okay, so it yells at us that it's not the owner. We kind of tested that line and made sure it works, but we also kind of learned how wallets work along the way, right? So let's see.
00:05:50.460 - 00:06:31.820, Speaker A: The thing that I like to explain about Ethereum is that it's like this massive multiplayer game and that this is kind of centralized. What's more fun is if we think about our smart contract as like this vending machine, right, that we want to access. And so I always do this payable example next, where instead of requiring that it's the owner, let's trigger off of the value. Let's make this thing from an Attestation smart contract into more of like a vending machine smart contract. And we make it payable and we set the message and we double check that the message value is greater than or equal to like 0.1 Ether, right? Something like that. And we'll say not enough.
00:06:31.820 - 00:07:20.914, Speaker A: And on the other side we deploy that and we should see our smart contract load in. And now even the bad guy, if the bad guy wants to participate in our smart contract, can play along, right? This should work now, but it should cost me some money. And let's send in just this. And here's another developer learning point here where you have to take this times ten to the 18, right? In my UI, I force the developer to go through that clunky process so they realize we're switching into way here as we're sending it to the smart contract. And once you do that there we go. So it did work. And something interesting has happened here though, right? This contract now has some value, right? And what we would do is probably move on to build some kind of withdraw function or something that lets the developer pull those funds out of the contract.
00:07:20.914 - 00:07:45.326, Speaker A: But I closed it up. Let's dive into that's. Kind of like the TLDR of getting started with Scaffold ETH, right? You can pull that down from the repo. You can get in, you can start tinkering with your smart contract and your front end is going to auto reload. Let's dive in and just look a little bit more at Scaffold ETH. Kind of just look at how it's set up. So you'll have these major packages and it's hard for me to show here, but it's really small.
00:07:45.326 - 00:08:17.446, Speaker A: But the packages that it comes with are Hard hat and React. Those are the two major packages. And your React JSX is kind of like where you start to build your app. It's kind of what's displaying all this stuff. And it kind of sets up all your wallet stuff. It sets up all your providers. And then there's a bunch of handy hooks here, like use balance, right? You put in your provider and your address, and then you just have the balance of that address on that network kind of stored up in your state and kind of digging in a little bit more to how we're working on Scaffold ETH.
00:08:17.446 - 00:08:58.434, Speaker A: We're kind of working on kind of global context, like a single context for all the Web Three stuff. So it's not as messy as this. So we are cleaning this up and working more and more on the repo. And to dive in that in a little bit more. I'd like to talk about ETH hooks for a second. So as we build out Scaffold ETH, we realized that there was all these hooks that we were using that were really useful, and we wanted them to be their own library, basically, right? Like, having them in Scaffold ETH is really handy because we can edit them live, but it's much better if we carve those out and kind of give them back to the ecosystem as a library that anybody can use in any project. And so that's ETH.
00:08:58.434 - 00:09:57.082, Speaker A: Hooks So we took the hooks out of Scaffold ETH, wrote them in TypeScript, cleaned them up, put them up in their own NPM package. And so now Scaffold ETH just brings that in. But you can use it as a dependency in your app too. And there's tons of handy hooks that you'll find when you get in and try to try to build a DAP and a Web Three app is going to just need a lot of this information, right? So just know the ETH hooks is there and it kind of is carved out of Scaffold ETH. And we're trying to do that more and more. There's components here we'd like to carve out and then like ETH services, there's all these if you want to use Ethers to create 100 wallets and drop $5 to each one, that's a little service, right? Or even just like an SSL proxy in front of your DAP. So we'd like to have a services repo soon too, but diving in a little bit more to this front end things like network display, right? If I'm on the wrong network, I'd like for it to prompt me and let me have a little button, right? Your DAP needs all those things out of the box.
00:09:57.082 - 00:10:38.460, Speaker A: So that's why Scaffoldeeth has that built in. So when you go to put your product out there, people get a warning about being on the wrong network, and they see their blocky previews and there's an address input with a QR code scanner. So tons of handy hooks and components and services that we found that we needed as we built out Scaffold ETH that you, as the wonderful developer at home, can use to build your next decentralized app. So let's see. Grab funds from the faucet. So we have this nice faucet down here that kind of represents the hard hat accounts that are loaded up with cash and they can send some money out. You can even open up the wallet of that and send like a whole bunch, right? So we got our wallets there.
00:10:38.460 - 00:11:02.666, Speaker A: I want to show off this right here. So this component is the contract component. This is what's rendering this contract here. So you kind of have this solidity here. You have your, your contract here, then you're deploying it there. There's some hard hat config that you'll get into and you'll learn hard hat. And then over in the front end, it's kind of injecting it into this contract component.
00:11:02.666 - 00:11:25.186, Speaker A: And it's doing that live every time you deploy your contract. So it lets you really tinker with things right out of the gate. But then eventually you'll want to build an example UI, right? You'll want to set it up. So maybe, let's see. Can I do that? You can hit a button and it will update that. Let's go back. So I just paid for that one, right? So I just clicked a button that went to the contract and called that function on the contract.
00:11:25.186 - 00:12:06.082, Speaker A: And you can see that here in views. If we go look at that, I just do a ton of examples trying to show you all the different ways you could possibly do this. So here is that button right there that we just clicked, and basically it wraps it in a transaction so we get those notifications. You can also send raw things to that transaction, but think of it more like a notifier. And then we reach out to your contract and we set the purpose. And you'll notice we throw this override in there where we send value along, and that's using Ethers. Rick Moo will talk more later, but we use that here in Scaffold ETH so that knowledge will be transferable there.
00:12:06.082 - 00:12:40.074, Speaker A: Okay, so let's see. So you've got your contract, you've got your app. You're able to tinker for a while. Then eventually you go ahead and you build out some UI. And then you've got, let's say your app here, and it's kind of like ready to go, right? What's the next step to push this thing to production or to a live site? So what we'll do is we'll need to deploy this contract to a live network, right? And to do that, we can't use our hard hat. So I'm going to use a yarn. Or we can't use the there's like, accounts that are loaded up with value on our hard hat chain.
00:12:40.074 - 00:13:05.926, Speaker A: We can't have a free account that's loaded up with value on a public network, right? So I'm going to yarn generate. Oh, I should make that bigger. I'm going to Yarn Generate, and that's going to create a local mnemonic here within my Scaffold ETH directory. And then if I do Yarn account, I can see that account and see if it has any funds anywhere. I'm just going to go ahead and fund that on some testnet. Looks like we're already on Rinkabee. Let's go with it.
00:13:05.926 - 00:13:32.822, Speaker A: So let's send this dude. What point one? Rinkabee. Real quick. Hope this works. Let's go. All right, so now our deployer within 15 seconds should have some funds, and we should be set to do something like Yarn deploy Network Rinkabee. And you can also get in and edit this Hard Hat file right here where your network is pointed.
00:13:32.822 - 00:13:55.334, Speaker A: But we're going to deploy with Network Rinkabee. And let's see if this goes please work. First try. This is using hard hat deploy from Wigawog. I think I'm saying his name right. It's a deploy plugin for hard hat. So a really cool ecosystem around Hard Hat there and a lot of cool plugins there.
00:13:55.334 - 00:14:21.114, Speaker A: And you'll have access to those as you build out with Scaffold, too. All right, let's get this contract deployed. Okay, so once we've got our contract deployed, we need to start talking about our front end. We've got our contract out there, and technically, our app is live. And people can talk to our app by just talking to the smart contract. But we'd like to build a front end around that. Right? And so over in your app, JSX, at the top, there is this little network selector.
00:14:21.114 - 00:14:40.918, Speaker A: Right? And what do we want to do? We want to switch our network over to Rinkavi. And if I hit save there, our app should hot reload. And now it's pointed at Rinkavi. Except for my contracts not getting deployed. Maybe I could call an audible and go to a little bit different. Oh, there we go. There it goes.
00:14:40.918 - 00:14:57.002, Speaker A: There it is. Okay, so now we're out on Rinkabee, and now's the time. Like, maybe we don't want to use Burner wallets. Maybe you want to connect in our MetaMask. And I can set the purpose to Hello World and I can pay 0.1 ringerby. And of course, you wouldn't have your end user have to hit that little button.
00:14:57.002 - 00:15:21.214, Speaker A: That's for developers. You'll build a better UI as you build it out, man. Should have cached those. All right, here we go. 0.1. Can I do it on rinkabee? You'll notice we get now we get the MetaMask prompt, and I can confirm that we'll get a nice block native notify dialog down here in the bottom right. It'll track our public blockchain transaction.
00:15:21.214 - 00:15:44.134, Speaker A: Right. That could have been a deployment to Mainnet if we wanted to. So it looks like it's all working. I'm going to do a Yarn build that's going to build up my local React app. And it's going to have this whole thing as a static app. And I'll be able to push that out to surge and use that app, give that app out to other folks. Now, there's a few things that you'll want to do before you go to production.
00:15:44.134 - 00:15:59.614, Speaker A: There's some constants, like infuria IDs that you'll probably want to update. Probably don't have those pointing to the stock. One that will fall over really quickly in production. But that's zero to one with Scaffold. That's how you bring it up. That's how you tinker with Solidity. That's how you start learning.
00:15:59.614 - 00:16:32.134, Speaker A: And once you have something, it's just a couple more commands. And you've got that as like a production app on a production network. So let me just dive into what you do with that tool. Basically, that tool starts you off. You have the license to learn at that point. So in the last five minutes here, I just want to cover where to go once you have the license to learn. And so the first place, of course, you'll look at your contract, you'll look at your front end, you'll work on your deploy script, but then check out the documentation.
00:16:32.134 - 00:17:09.190, Speaker A: There's really good documentation for scaffold ETH. ETH online video right at the top. Perfect, right? Happy bow tie Friday, by the way. So in here you've got all the Scaffold ETH stack. It kind of explains a lot of what I'm explaining already, but does it in text form and then it kind of gets you started with what's next, right? So once you've got the app and everything figured out, you kind of want to go on this tour of duty is what we're calling it, where there's challenges and some other stuff. And let me just dive in. Let's see.
00:17:09.190 - 00:17:42.270, Speaker A: Okay, let's back up for a second. Make sure I cover the README sequentially. Learning Solidity. A great way to learn Solidity is just to have there's a lot of great apps out there, too, but just have Solidity by example up and just go through these topics and kind of learn. And what I mean by that is like, okay, let's learn how a mapping works. Let's grab a mapping out of this mapping Smart contract example, and let's paste it into our contract and let's Yarn deploy it and let's see what it looks like. And then let's poke at it over here when we have that up.
00:17:42.270 - 00:18:36.974, Speaker A: So diving into Solidity, that will get you up the Dunning Kruger. You'll feel like you can do anything, but then it's time to go on a tour of duty and learn kind of everything there is to learn about what works on Ethereum and what doesn't work. And all the weird gotchas right? And so that kind of is here. And I have this thing that I shill called the ethereum dev speedrun. So if you are a Web two developer or, you know, web Two devs and they're thinking about getting into Ethereum, just tell them to go Speed run Ethereum. Hopefully when they type in Speedrun Ethereum or whatever I typed in there, they will get this Medium article that talks about what we just talked about, getting Scaffold ETH up and running, getting the syntax down, but then it jumps you into all these cool example branches. So something that has come out of having this template for building DApps is a ton of DApps and a ton of branches.
00:18:36.974 - 00:19:18.106, Speaker A: So there's 250 different branches here ranging from NFTs to different starter kits and different tutorials. There's the ZK thing there. We're seeing these lists. This composable NFT is awesome. I wish I had more time to talk about it, but getting into SVGs and NFTs and NFTs that go in NFTs and render their parents, that render the children it's really cool how it all hierarchically, renders an NFT all on chain in solidity. But that's a whole different that's the side quest. As you get Scaffold ETH down, you can go to any of these branches, and all the smart contracts, all the front end, everything is going to be kind of the same language.
00:19:18.106 - 00:20:04.490, Speaker A: Everything's going to be kind of in the same place. So once you know one good branch of Scaffold ETH, you kind of know where everything is on all of them and you know how the wallets work and you know how to interface with a smart contract and you know, kind of like what that context looks like. Okay, so from these branches, though, the speedrun, once you have the syntax, once you're ready to get in, I recommend doing the simple NFT example. And the simple NFT example I think I have right here will take you through the same setup we just went through. But then you'll edit this mint script. And let's see, what do I have a couple of minutes? Let's just go look at this localhost 3001. You'll do the same thing where you probably want to create, let's see, a yarn deploy.
00:20:04.490 - 00:20:29.990, Speaker A: I have a yarn chain and a yarn deploy. Let's see if I can get it to work. Everything's in the same place, right? Guess what? Here's your smart contract right in that folder instead of your contract. It's called your collectible. And it's this super simple NFT example straight from OpenSea. And you can get in here and deploy that. And once you deploy it, you have a Mint script and it says, grab your front end ID and paste it in here.
00:20:29.990 - 00:20:42.570, Speaker A: And when you run Yarn Mint, hopefully those NFTs show up here. There we go. Let's see if we can get an NFT to show up. All right. And then I'm going to grab whoops. I'm going to grab this address. There they are.
00:20:42.570 - 00:20:57.354, Speaker A: And I'm going to paste it in here. And I'm going to grab this dude's address and I'm going to send him this buffalo. Let's make sure that I don't have any gas. It's got to go to the faucet first. There we go. Now send him this buffalo. Oh, I still don't have any gas.
00:20:57.354 - 00:21:17.982, Speaker A: What did I do wrong there? Oh, I sent that guy gas. That's funny. Now send him the buffalo. No, don't use my camera. Send him the buffalo. Isn't that nice that you have a QR code scanner, though, right, on all your address, right? Cool. So the simple NFT example is your first step to kind of get context and move on to how all these different branches work.
00:21:17.982 - 00:21:50.026, Speaker A: Then start taking on some challenges. Take on challenge one. You're going to be building a staking app where you have to get a bunch of jerks to coordinate and if anything breaks down there, then they can all withdraw. You don't want jerks to be able to grief each other, but if they all do coordinate, then money moves on to another contract and your staking round kind of state machine moves on. Then challenge two is about a token vendor and building a contract. You'll learn contract to contract. You'll learn like, contracts, talking to contracts.
00:21:50.026 - 00:22:21.394, Speaker A: You'll learn ERC, 20, you'll learn the approved pattern if you sell your tokens back. And then the third challenge is a little bit more open ended. Build the decks. And it's actually pretty easy using this article, but build a very MVP decentralized exchange and learn about reserves and then kind of move on to take the buyer mints and start branching out. Right. Take some of these branches and take them to the next step or learn the thing that you want to learn next. And there's a whole kind of like funding mechanism with Build Guild where I'm funding developers that are building these tutorials.
00:22:21.394 - 00:22:48.222, Speaker A: So there's kind of funding available for folks that are kind of building on top of this. Let's see if we can get right back to our app real quick and see if I do a yarn surge here. I think our app is built and ready to go. And what domain? It's like a rink purpose. So I'm just going to say our purpose. P-U-R-P-O-S-E. Let's see if I can upload this DAP, go from kind of zero to one and have the DAP fully deployed.
00:22:48.222 - 00:23:05.826, Speaker A: It will be at surge. Sh. No one like front run me and get something on screen or anything. I think I'm open for questions now. We've got the app deployed. Reach out to me. I'm Austin Griffith on Twitter.
00:23:05.826 - 00:23:22.960, Speaker A: And hey, hey. This is our purpose and I'm paying. Oh, I don't have a rinkabee. I need to connect. Here we go, here we go. Connect my app in and say hey, and actually pay some rinkabee. Let's see if this works.
00:23:22.960 - 00:23:52.662, Speaker A: Yes. There we go. So I went from zero to one. I took an app idea, brought up Scaffold ETH, built the contract, out deployed the contract, then I deployed an app that talks to that contract out to a public network where anybody could go to that URL right now and it'll probably fall over pretty quickly, but you can use that to interface with the smart contract. And there we go. It's hey, hey. And so, yeah, again, check out the ethereum dev speed run.
00:23:52.662 - 00:24:18.000, Speaker A: It'll take you through Scaffold ETH at first, but then it will move you. I've been missing the chat. I was supposed to be watching the looks like it looks like we're good, actually. You'll follow through a bunch of these branches. A lot of these gotchas random numbers on chain and how DeFi and swapping and lending worked and how signed messages work. There's lots of little gotchas that you'll learn. Build a multi SIG wallet and learn how that works.
00:24:18.000 - 00:24:25.760, Speaker A: Good luck, everybody. Happy Bowtie Friday, Kartik. Thanks for having me. Any closing questions or anything I need to do on this?
00:24:26.370 - 00:24:54.140, Speaker B: Think there we mean a lot of amazing comments from the chat. I think the easiest thing would be maybe you can just log in on Eastglobal TV and answer some of those quick questions. Mostly it's people requesting you should have your own live stream. Twenty four seven call Austin. You can just always showcase scaffold ETH. One question I'll ask you is what's kind of getting you excited about things that you want to add to Scaffold ETH in the future? What are some of the things that matter?
00:24:54.990 - 00:25:30.602, Speaker A: What's so cool about it? Is it's random things all the time? Right now, the thing that I'm most excited about is this SVG NFT library in Scaffold Beats. So there's DeFi and there's governance and there's coordination tools. There's all these different branches. But really the one that I'm most excited about is, like, what I made lugie's with, which was just like a little SVG NFT. But it's like you get into the smart contract and you see, like, this is the building. It's crafting the JSON in the solidity, and then it's crafting the SVG in the solidity. And we're doing something where you can send the NFT to another NFT.
00:25:30.602 - 00:25:44.630, Speaker A: And then when it renders itself, it calls the render function of all the other ones. So then you see all the little NFTs inside of there, like, moving around. Super fun stuff. I don't know why that gets me so excited, but I am super excited for SVG NFTs.
00:25:45.770 - 00:25:50.362, Speaker B: Awesome. Well, thank you for actually standardizing that then. In that case, cool fork.
00:25:50.426 - 00:25:56.250, Speaker A: Someone else did it. I just made it easier to fork. That's what I'm here for. Thank you, Karthik.
00:25:56.330 - 00:25:58.700, Speaker B: Thanks, Austin. We are ready to move on to our.
