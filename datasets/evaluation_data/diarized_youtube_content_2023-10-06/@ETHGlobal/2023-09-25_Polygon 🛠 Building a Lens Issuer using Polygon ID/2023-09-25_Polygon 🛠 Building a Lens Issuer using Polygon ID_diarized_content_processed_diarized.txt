00:00:06.730 - 00:01:00.862, Speaker A: Name is Tony Orlando. I am a Developer Relations Engineer at Polygon and yeah, developer Relations Engineer at Polygon and I lead the Developer Education team. And today I'm here to talk to you about the exciting concept of self served identity and Polygon ID specifically introduce to you what Polygon ID looks like and show the intersection of Polygon ID and Lens, essentially because one of the most powerful use cases of identity is in social media. So imagine if you could verifiably discover who that troll was. Polygon ID would actually enable you to be able to track them down like Liam Neeson would like you to. Right. So how do we get started with Polygon ID? Let's first define it.
00:01:00.862 - 00:02:01.282, Speaker A: Polygon ID is essentially a tool that uses zero knowledge proofs to let a user prove their identity without exposing the private information. Right, which is a really important concept. But when you look at it, practically, it means that I could attest to my job history and I could say, yeah, so my name is Tony. I've worked at Polygon Labs since that date, and I previously worked at Coordinate shout out Coordinate up until that date. And so from there, I could define a schema for my data and say, I want to store data for everybody who uses my system and be able to define the name of the organization that employed them, the roles that they had, whether or not it was technical or not, and the start date. Right. But I could also use it to define simple things like even like a data schema that just defines whether or not I have a dog.
00:02:01.282 - 00:02:21.320, Speaker A: And I could define whether or not I have a dog if I have a cat and then the total number of pets I have. Right. So this is a picture of my dog. So I could define pet ownership. Yes, I have a dog. No, I do not have cats because cats are evil and I have one pet. Right.
00:02:21.320 - 00:03:34.180, Speaker A: So how do we know these claims are true? Right, so we need somebody to be able to actually attest and say, well, do we have a third party? Or somebody who could authoritatively say that, yeah, I do work at Polygon. How about Polygon HR or HR Coordinate? So we could actually find a source of truth that we could use to be able to attest to this information. And what that is, the attestation is called a Verifiable Credential or a VC. And it means that basically that you could have one or more claims that are made by a trusted issuer. So, say, when you start a new job and somebody has to go and call your old job and be able to say, well, did Kim actually work here? And you could be able to say, yeah, Kim actually worked here. And then that person leaves with the definitive trust that, yeah, you actually do work there. And they could actually attest to your particular employment history that you're going to if you're going to define it like technically, essentially a variable Credential is basically composed of two things.
00:03:34.180 - 00:04:45.766, Speaker A: One is a claim, which is a basic assertion made about a particular subject and then the Credential is essentially a set of one or more claims that are made by an issuer. And so a Verifiable Credential is a tamper evident Credential that has authorship that can be cryptographically verified. And so when we actually issue a Verifiable Credential, this is what it would potentially look like. Right? So if we have this Verifiable Credential that is like a job held Credential where I could say, well, this is who employed me, this is whether or not I had a technical role and this is start date that essentially forms a schema. And then if we have communication and contact with your previous employers, we could actually authoritatively state, yeah, you were employed by Polygon Labs and you were also employed by Coordinate, right? But then my dog can't attest for itself and say, yeah, it actually worked at NASA or something of that sort. It doesn't necessarily work that way. Right.
00:04:45.766 - 00:05:39.130, Speaker A: So you need to find an actual authority that could actually become an issuer of said Verifiable credentials. But at the end of all of this, you've introduced a couple of different concepts. All of them are really important. But the main thing to remember is that when we're looking at decentralized identity and Verifiable credentials, they essentially comprise of three primary actors, right? So you have an issuer. An issuer could be you could be a DMV, it could be the university you went to, it could be the college you went to, it could be any government body and basically they are the ones who could make Attestations about you as a subject or any other subject that you're actually dealing with. And then you have an identity holder who is me and you. So you and I have an identity.
00:05:39.130 - 00:06:52.442, Speaker A: And the identity holder holds these particular claims or Verifiable credentials inside of a wallet. And using that wallet, I can now present the Verifiable credentials using zero knowledge to a Verifier. And the most significant piece of that is that you could imagine if you're going to buy alcohol and you have a Verifiable Credential of your birth date, then you could actually present just whether or not you're actually above 21 without necessarily revealing your actual birth date. So that's one of the easiest and simpler ways of looking at it. But if you look at it in practice, I could actually have my former manager, Liam At coordinate issue me a Verifiable Credential using the schema that we actually defined. And the schema has about three different claims the name of my former employer, whether I had a technical role and my start date. And using a zero knowledge proof, I can now present that information to a particular issuer.
00:06:52.442 - 00:07:32.702, Speaker A: And the issuer doesn't need to know the full details. All they would need to know is whether or not I had a technical role. And we could actually just give them just that succinct piece of information and leave out the name of my previous employer or even my start date. So that's the kind of flexibility that we would see when you're looking at self sovereign solutions. Well, self sovereign identity solutions such as Polygon ID and others. But let's just kind of expand this to a concept that I guess we actually mostly familiar with, at least I hope, right? Room of people of culture. So I imagine everybody knows Harry Potter, right? Yeah.
00:07:32.702 - 00:08:24.030, Speaker A: But basically you could think of the issue example being like the Sorting Hat that would essentially issue Harry with a Credential that says you are of House Gryffindor. And what that does is that if you actually have that, then the Verifier could be like a magic door. And when you go to the magic door, it basically unlocks like the Gryffindor common room. Or it could be the team captain. And because you're of House Gryffindor, you could then be eligible to join the Quidditch team. So those are like simple a simplified example of how you should actually conceptualize how you could use polygon ID in the absolutely real world. That is the Harry Potter universe, right? Because it exists.
00:08:24.030 - 00:09:05.786, Speaker A: So let's just break down further the components of this. We have the Polygon ID wallet that basically holds your Verifiable credentials. What it does is that it does three primary things. It holds your Verifiable credentials, it also interacts with an issuer who basically fetches where it basically fetches and stores Verifiable credentials. And it also interacts with a Verifier to share zero knowledge proofs based on said Verifiable credentials. Right. So this is what it looks like.
00:09:05.786 - 00:10:03.758, Speaker A: Like when a Credential is issued, you start off the process with the offer and then the claim is added and it now exists polygon at the Pit. And when you open the Verifiable credentials, you could see various claims inside of it that are like whether or not you're allowed in the pit, the number of projects built, the dates issued, the did of the issuer, whether or not it's expired, and signature. Well, the type of proof I won't go into signature proofs in this particular talk, but that's essentially what it looks like. And verification is fairly simple. You'd basically open up your Polygon ID wallet and scan a QR code that would be used to verify. And from there you would like generate a proof internally and make that available. And whether or not you actually have access to whatever VC gated tool you're looking at, you would then be given access.
00:10:03.758 - 00:10:31.206, Speaker A: Right. So that's the standard workflow in the context of verification. But let's talk about Lens, right? Which is the fun thing. That's why most of you came, I imagine. Yeah. So Lens protocol is basically about three social graph built on the polygon proof of stake blockchain for now. And when we look at Lens, I'm going to go through like so I'll start off this presentation because we all know how great Conference WiFi is.
00:10:31.206 - 00:11:16.278, Speaker A: I pre recorded this just to ensure that we have a consistent experience. But this is an example that shows the workflow of how you would use an issuer to build a front end that issues credentials based on your Lens profile. Right? So you start off here where you have the Lens application. So you first of all log into Lens as you can see, signs the transaction and gives you all that information. And once you connect, boom, you're in. So it has like your buyer information, the number of followers and the people who are following you. And then we create an issuer, which is the first step of this.
00:11:16.278 - 00:12:07.802, Speaker A: And then the issuer will then create a I'll just explain what's happening here. So first of all, we actually create an issuer. So your app becomes an issuer that issues credentials, right? So you could think of it like a Lens issuer that you actually created in this stage. And then from here the user would then enter their did from their polygon wallet. And once they enter their did generates a QR code and they have a QR code. So now we have a Verifiable Credential that we are using to prove the number of followers that you actually have. Right? So if you scan this piece of information well, if you scan the QR code, it would automatically add a Verifiable Credential to your polygon ID wallet with the schema that we actually defined.
00:12:07.802 - 00:13:15.690, Speaker A: So why is this useful? It actually provides a greater degree of trust. And the number follows example isn't meant to be like the absolute killer compiling use case, but a really good demo of what it looks like for you to consume data from the Lens API, stick it into a Verifiable Credential and issue it to a user who will then hold it inside of their wallet. So let's go through the post of what this looks like. The sample code is available there. You could actually go through and look at it from the beginning to the end and it shows the entire lifecycle from when you start off from logging into Lens all the way through to issuing the QR code. And there's a dependency on QR IO there that I'm hoping that you'll be able to figure out how to manage and mitigate in the initial instance, but it should be easy for you to do. So what does the process look like? First of all, we set up an issuer node and then we create an issuer and then we design a schema.
00:13:15.690 - 00:13:45.810, Speaker A: After we design a schema, we query the Lens API and then we issue a Verifiable Credential. Easy, right? Easy. But let's go through it step by step. These are the things that you'll have to do once. So you need to set up your issuer node. That you only need to do once. You need to create an issuer that again you also need to do once and store your issuer did and did is your decentralized Identifier or identity.
00:13:45.810 - 00:14:37.506, Speaker A: You need to design a schema that essentially is like the shape of the data that you want to send to the user's polygon ID wallet. And then from there when a new lens user comes to your DAP, you could actually have them log in and you query the lens API and you're issuing a Verifiable Credential all day. Right, so first of all you start off with the issuer node setup. So this is where you actually go to set up the issuer node. On the left is your code and the docs on the right, I'm not sure if it's your left or my left. I'm left handed so I always compensate and get things wrong. It makes driving around in use it is really fun.
00:14:37.506 - 00:15:29.810, Speaker A: But anyway, issue a node, this is where you could actually get set up. And I have a tutorial that shows you like a step by step guide of getting started with a polygon issuer node so you could feel free to watch that. Sorry if the QR codes are coming up really quickly but you could just check out YouTube polygon ID issuer node and it'll take you through the full process. I think I also have a video aside from that as well. So you've successfully managed to set up your issuer node. What to do? It's probably running on some cloud provider or you're running it off of your computer locally or you wrangled a DigitalOcean droplet to be able to do whatever configuration works for you. Then you could create an issuer.
00:15:29.810 - 00:16:12.386, Speaker A: So let's go through the process. From a code standpoint, it's really straightforward. All you need to do is to send a request to Vwalidentities and you're sending in three bits of information. The method which is the standard like polygon ID schema that you want to be able to define for your DIDs, which basically is how Polygon ID did actually define. You have the blockchain, which is the blockchain that you want to use. We want to use polygon and the specific network you want to use is Mumbai. And when you do that you get the response on the right.
00:16:12.386 - 00:16:35.494, Speaker A: Right? Cool. Well you get a response below where it says response on your screen or wherever you're looking at this from. And the main thing you're looking at is, like, the Identifier. And that's your did. And the did is what you want to store. And so now you're able to have an issuer. And that did is what you would store inside of your database.
00:16:35.494 - 00:17:49.570, Speaker A: And every other person who comes to get a VC from you would actually get a Verifiable Credential backed by this particular date. So then the beauty of it is that we want to talk about schemas, which is the final step in terms of making sure that you're able to actually have a reliable set of data that you could use. So a schema essentially encodes the structure of a particular Verifiable Credential and they allow for interoperable use of VCs across different services. If you have a schema, you could actually combine various schemas during, well, various Verifiable credentials when you're actually doing the verification later on. And the schema components are basically defined on two primary things, which is your JSON LD context, which is a description of the type and its fields, and the schema, which contains the validation rules for the specific issuer node. So if you want to build your own schemas, you should check out the schema builder, which is on your left. Boom, I finally got it right like 20 minutes into the talk.
00:17:49.570 - 00:18:23.574, Speaker A: But anyway, on your left, the schema builder. Really good tool for you to be able to understand what it looks like. So please do not roll your own schemas, just use a schema builder. It works really well. And if you want to understand how to build your custom schemas, you could do that and it will show you just how to add the bits of information. A small caveat, I'm not sure if that was actually fixed, but sometimes you have to click out of the focus area for you to actually click the button. So it can be a bit frustrating.
00:18:23.574 - 00:19:34.910, Speaker A: We are still working on the UX for the schema builder and next to it you can see at the very top you have the query builder as well, which on the verification side, which I'm deliberately not covering on this talk, would actually enable you to actually get started with that. So now you've done all the things you need to do once. So you have a schema, which basically is the shape of your data, you have an issuer and you set up the issuer node. So let's get to using actually creating the VCs. So for this particular example, the top part assumes certain things that you've gone to Lens and you've gotten a figure for the Lens followers and you've gotten a figure for the Lens ID. And so what we're essentially doing here is that the schema that I'm using in this example had two primary bits of information that we are storing lens followers and Lens ID. And what we're doing, which is really important and as sort of pointed out earlier, is we're using the ID in the Credential subject and we're actually using the did that we created for our issuer.
00:19:34.910 - 00:20:12.890, Speaker A: So that's your custom issuer, right? So anybody building here will have different DIDs for their personal issuers and that's what you actually include when you're generating the Verifiable credentials. And from there, all you'll get is a claim ID. And once you get the claim ID, you could actually add it to the request. So if you see like the path at the very top, so you have a claim ID. And if you request that, you get a QR code. So this is the body that is basically encrypted in the QR code. So once you actually request this, this is what you get back and that's what you send to QR IO.
00:20:12.890 - 00:21:09.646, Speaker A: And QR IO generates the QR code that is presented to the user and once the user scans that, it's embedded in their polygon ID wallet. And that's the full workflow of getting from Basic to fully set up to issue credentials. So again, I'll go through my sample application just to hopefully tie the concepts together. You log into Lens first of all, once you sign in, we could then query your Lens profile and get bits of information about you. So we have the number of followers you have and who you're following. We take your particular Lens ID, we create an issuer and from the issuer we get a did. The did is then the user did and then we create a Verifiable credentials and we generate a QR code and boom, the QR code is created.
00:21:09.646 - 00:21:36.780, Speaker A: The user scans this and it enters their wallet. So that's the full workflow of Issuance. Again, if you want to look at the sample repo, it's available here for you to actually review. And I'm giving it. Okay, one person is scanning. In the meantime, I was actually going to sing while you were presenting, but you actually finished really quickly. So everybody thanks.
00:21:36.780 - 00:22:46.802, Speaker A: Oh yeah, sorry. Building a Vcgated DAP so if you want to do like a Verifier steph who used to be with Polygon did a really good repo, I mean like Talk and has a really good repo on the verification piece, right? So I've shown you the Issuance side, which is all we have time for. If you go back to ETHGlobal YouTube and you look for a talk titled Building a VC Gated DAP, you'll see Steph's Talk. And Steph's talk covers the catch section. I've showed you the pitch, right? So the pitch and the catch is kind of covered and you could see like a full service example of what that looks like. And once you have that, then I think you have all of the pieces that you need from the Issuance side and then you have the verification side that you could then continue to use. But basically her VC gated app was really cool because it was asked the user to prove that they were born before 2023 to view.
00:22:46.802 - 00:23:39.806, Speaker A: Right, so most of you here would be eligible, I hope, but yeah, it was a really good example there. This is the Schema and this is the request. So you basically just request that you say you make sure that the birthday is less than the start date, like the year that you define. And this is the request that you actually build and everything else should be easily verifiable on the other side. So oceans Four Four is her GitHub, full stack polygon ID, VC, gated DAP shows you the verification side of things, which I encourage you to look at as you're going through that. And once you build with that, you could actually get like a birthday gated. She actually deployed this.
00:23:39.806 - 00:23:57.460, Speaker A: I'm not sure it's still live, but yeah, you could scan your code and you go through the whole process. And this is the URL to the verification portion. So if you want to get the verifier side of things, please look at this and hopefully you could combine the two and win some Bounties on polygon ID.
