00:00:06.170 - 00:00:15.422, Speaker A: Great. We can get started. Thank you everyone for joining today. We're joined by Leslie and Ricardo from Kronos. And today's workshop is Building Your Web. Three games with Kronos. Play.
00:00:15.422 - 00:00:17.230, Speaker A: So I'll hand the mic off to Leslie.
00:00:18.210 - 00:00:43.690, Speaker B: Hello, everyone. So I would just quickly share the screen, make sure you can see my screen. Right? Wonderful. Yeah. Once again, I would like to say thank you to the organizer. And also it's a pleasure to have everyone here built together in this hackathon. So let me introduce myself.
00:00:43.690 - 00:01:16.790, Speaker B: I'm Leslie Chong, and also I have our teammate Rick here. We'll be presenting some of our exciting features on Chronos flight in particular later. So, yeah, I'm Leslie and I'm in charge of the developer relations of Chronos. In case if you have any question in the future, feel free to add me in the discord channel and I'll be there. So let's kick off with a quick overview of Chronos first. So, Chronos is the first EVM compatible layer, one blockchain that builds on Cosmo SDK. It is supported by crypto.com,
00:01:16.790 - 00:01:57.810, Speaker B: crypto.org, and more than 300 application developers and partners. Okay, so the mission of Chronos is simple and also challenging. This is to make it easy and safe for the next billion of crypto users to adopt to rev free with a focus on DeFi, NFTs and GameFi. So if you're a developer joining this hackathon, you'll be like, why? Building on Kronos, right? So if you ask me, I would say Kronos is more than just a simple EVM compatible chain. What makes Kronos special is its unique position that links up the Cosmos ecosystem and the EVM ecosystem.
00:01:58.310 - 00:01:59.202, Speaker C: In particular.
00:01:59.336 - 00:03:07.560, Speaker B: Kronos is built on top of a technology called Evamine, which is an open source project that brings Cosmo SDK and its underneath Consensus engine Tendermine together with the standard ethereum practice. So, Cosmos, SDK and Tendermine has already been working well for many different networks and projects, which allows a high transaction throughputs and provide instant transaction finality. And it is also backed by formal research and has been robustly tested, implemented, and adopted by many high profile projects. One very interesting part is it also comes in a modular structure. What does it mean is it offers flexibility regarding which application that are developed on top of it and how they are going to be developed. In particular, it enables us to build a special module that call EVM module. Very obviously that it allows EVM related logic to be executed at the top level, while the Tendemine Consensus engine would take care of all the consensus related logic at the back for us.
00:03:07.560 - 00:03:55.110, Speaker B: Of course, one very important thing I would like to mention about Cosmo SDK is something that you might already heard of. It's called IBC. So IBC, which stands for inter blockchain Communication Protocol. It allows chains to be connected, passing messages and transfer tokens natively at the protocol level. At the time being, we have already been connected to multiple cosmo SDK based chain such as crypto.org chain, Cosmos hub and a cash network and we are expecting more to come. Simply speaking, I would say Kronos is an EVM compatible chain that also comes along with all the goodies from the ecosystem of Cosmos.
00:03:55.110 - 00:04:59.782, Speaker B: And on the valuable position what makes Kronos unique is the instant portability while EVM compatible that supports smart contract of course and bridges directly come along with the IBC that we have just mentioned. Low inflection well to user with high transaction throughputs and instant finality transaction costs on Kronos is also relatively low for developers solidity and also all the EVM toolings would just work out of the box which reduce a lot of friction for projects to migrate to Chronos. Next thing is well by looking at the onchain activities we can see a strong user adoption to Chronos. We can see that Chronos is one of the top ten chains that in terms of TBL with more than nine hundred K of users 50 million plus of transactions since we launched November last year. Finally, the most important and also organic part is the community. Today. We can see that well on Twitter.
00:04:59.782 - 00:06:01.162, Speaker B: Hashtag clofam ecosystem representing an addressable user base of more than 50 million of people all over the world. Which means building on Chronos would put your D apps to a huge stage with spotlights on. That means easy on Ram to your project for more than 50 million plus of user of crypto.com. Yeah so moving onwards, this is heck of a setting for developers from very basic solidity to travel hothead Openseplane, webfree, JS, well you name it. All of your experience and EVM related knowledge can be directly applied to Chronos. In addition we also have been continuously working together with many leading providers in the industry to further support on the infrastructure data indexing and our RPC endpoint side. This hackathon can be a perfect starting point for you to build on Chronos.
00:06:01.162 - 00:06:42.942, Speaker B: Even after this hackathon we have extensive developer support programs for you to take your project to the next level. So one major highlight in our Chronos development toolkits is Chronos Play which is a gaming SDK that allows us to connect your games written in unity or Unreal or C with Chronos directly. So what I do is I would firstly pass it to my teammate Ricardo to give us a more in depth breakdown and demonstration of Chronos play and then later on we will jump back into cover more extra developer resources and the prices for the hackathon. So I'll pass it to you.
00:06:42.996 - 00:07:52.530, Speaker C: Rick. Fantastic. Thank you, Leslie. OK, so yeah let me quickly introduce myself before I start to share my screen or maybe I can do the same thing synchronously. So my name is Rick and I work alongside Leslie as an innovation blockchain engineer and yeah, today I want to tell you a little bit more about Kronos Play for those of you who haven't heard of it yet. It's basically our SDK that we have been working on for the past couple of months and really since the beginning of the year, I should say. And what it really is, it's basically a collection of packages and dependencies in the context of Unity and Unreal which enable game developers to build new games and existing games and perhaps also have the ability to connect off chain and on chain data in order to make some blockchain magic also happening in those games.
00:07:52.530 - 00:09:15.358, Speaker C: At its core, from a Unity perspective, we have used ChainSafe gaming SDK, but we have been also integrating with C Plus Plus libraries for Unreal, for example. Obviously some of the crossplay features are that it gives the opportunity to get some data, some insightful on chain data such as metadata from NFTs, from your ERC 721 tokens, but also other type of data that you might want to fetch into your games. It also provides some opportunities in the area of wallet authentication and authorization, which has been a very trending topic from what I've been hearing so far from game developers. And then as I mentioned before, the ability to transfer tokens and data that comes from NFTs within games. There's a couple of reasons why we recommend to build on Kronos. I'm not going to go through all of them, but some were mentioned already by my colleague Leslie. Obviously you will know that there is a multi platform support, which means that you can build on several engines, you can build on Unity, you can build on Unreal as well.
00:09:15.358 - 00:10:01.386, Speaker C: And there's more to come. Obviously there is a lot of opportunity around the global reach because we have a strong community that's expanding. The fact that we focus on scalability is probably something to keep in mind and also the fact that we aim to always provide the best interoperability as possible since our protocol is IBC based with basically interoperability and access to Cosmos. As my colleague Leslie mentioned before Roadmap, we have been working intensively on different elements. For example, the crypto.com Pay integration has been released just recently. It is available on our documentation and I will go to the documentation just a minute.
00:10:01.386 - 00:11:06.420, Speaker C: But there's obviously some other opportunities that we're working on such as authentication options and also crypto.com NFT packages. I mentioned as well that we are actively working on the Unreal engine plugins as well as working on C Plus Plus development SDKs. Some of the games that we have been working with, a few are for example, we have been working with Ralph games, with the Demoly, Dragon, SB Decentral games, just to name a few. And I think before going too deep into these details, why don't we just have a look at the documentation and show you how you can get started, if you're interested to start to develop some interesting games or even integrate some new features onto your game. So on the main page. Whenever you go to click on the Get started button, you get to the Kronos Play quotation page.
00:11:06.420 - 00:12:05.630, Speaker C: You also find some other modules that might be very interesting, but I think let's keep it in the context of the Kronos Play SDK. You will see that the Kronos Play SDK is divided in different topics. So whenever you're interested to get started and build something on Unity, you have different kind of elements and tabs that you can explore. You have some examples for login mechanisms, you have some script examples which we are going to actually expand within the next few days. And as I mentioned, you have the different core modules such as the Unreal Engine plugin, the Kronos Play C Plus plus SDK, as well as the recently released Crypto.com Pay integration. So why don't we have a look at the scripts.
00:12:05.630 - 00:13:13.738, Speaker C: So it's quite simple, they are based on the ChainSafe documentation. Some of you might be familiar already with ChainSafe as they have really provided a really cool set of scripts for Unity which is at the core of this SDK as well. For example, right now you will find EVM modules, a couple of EVM modules that make use of our RPC method which you can use whenever you want to query the EVM function in Unity. We are also working on releasing the native version meaning that you wouldn't have to use the RPC method anymore because we have recently launched our subgraph endpoints which means that now ChainSafe will natively support as well. Native transactions. Which means whenever you want to get stuff like a batch of your NFTs, you can do that without having to create for loops or even whenever you want to query your balances and these sort of things. You don't really have to use the RPC method anymore if that's something you don't want to do.
00:13:13.738 - 00:14:21.870, Speaker C: If you want to work with RPC method, obviously the option is still available, but obviously this is going to be up to the developer and why not having both options available. So to get started again, all you have to do, you can visit this page, you go to the Unity example in here. Then you have obviously all the steps on how to get started. The different RPC methods that we provide. You can choose whether you clone it from GitHub or you can just go ahead and download your SDK from here. Why don't we quickly go into the Unity editor? So I show you a couple of scripts that I have prepared. So the first one is called call it ERC 721 balance of Kronos as the name suggests what it does, it returns the balance of the assets that I own, the 721 assets.
00:14:21.870 - 00:15:24.260, Speaker C: There's a couple of parameters that I'm passing to the option here. So basically I want to chain the network, I want to get the contract of the NFTs and I want to get my account. Now you can make this a little bit more dynamic, if you wish. So whenever you start to build your game, there's obviously some player press versions that make this string a little bit more dynamic, meaning that whenever you log in and you authenticate, you will be able to just replace this with the dynamic player press string. So if I close this and I run it, all it does, it's basically printing the balance once the promise is returned. So I'm going to close this and just choose my Unity editor. Going to switch this one off on and then I'm just going to run it and then we will see.
00:15:24.260 - 00:16:26.040, Speaker C: Okay, here we go. So basically it just printed the amount of NFTs that I own. In this case, I'm using the testnet, obviously. So all of these NFTs are generated in our NFT Faucet, which is also available in the documentation. If you want to have something like the OpenSea kind of test net where you can create some test NFTs and then query them into your game, that's also something that we provide. Now, the second option we can quickly test is the owner class, which again, I think it's self explanatory. What it does is it takes a couple of parameters in and checks for the owner of a specific token ID that's part of a specific contract always on the testnet in this case.
00:16:26.040 - 00:17:20.240, Speaker C: So come back to Unity and run this very quick set. The right one, yes. And it's going to print out, obviously, the address that they use for this test, NFT, which is then indicating obviously the ownership. This is an interesting function because in the context of a game, you could create some functionality that makes sure that a specific ownership is being identified within the game, for example. So it's quite cool. And yeah, then I want to have a look at the EVM balance option. Just this one.
00:17:20.240 - 00:18:31.750, Speaker C: Now for this one we use the EVM function. And in here what this one does, it's going to return the balance based on the EVM function. So let me turn this one off. Okay, that's basically the balance that I have, my testnet balance. But yeah, again, this is something that you can use as well. Whenever you want to start building and you want to use a testnet, we have a faucet, which means that you can get on a daily basis, some resources, but Leslie's going to explain that in a minute as well. Now, another function that I want to quickly show you, another script is.
00:18:34.040 - 00:18:34.356, Speaker B: This.
00:18:34.378 - 00:19:34.520, Speaker C: One is probably one of my favorites because it shows how you can replace game texture with an NFT based texture by using the Uri option here in the ERC 721 function. So there's a couple of information, a couple of parameters. I'm passing the chain, the network, the contract, the token ID, and as well, the RPC method. So some of you might be familiar already. There's some tricks that can be used with IPFS, particularly when it comes to getting data. There's some guards at times, so it's better to just replace the IPFS protocol with the Https protocol, and this way you won't have those kind of problems that might even impact the performance of the query. Then the next step is we use Unity Web request to get the information from the Uri.
00:19:34.520 - 00:20:40.370, Speaker C: And once we await the Web request, we create a response. And that response is basically going to hold the JSON object of the metadata that is being fetched. Once we run the Unity Web request and in there, we want to store the image Uri, which is going to be under the Data image option available, then what we want to do is always we need to make sure that this is something it's very repetitive. So I think there's a lot of smart ways to create maybe a function for this and then reuse it every now and then whenever it's necessary to use it, just to reduce duplication. I think there's a couple of ideas and then finally we fetch the image and display it in the game. So let me close my Code Editor and get back to my Unity Editor. Let's run this.
00:20:40.370 - 00:21:51.520, Speaker C: So as you can see, it's logging the information and then it replaces the quad with the new Sprite, which is basically the image that is being stored in that contract. And yeah, these are just a couple of examples. I know we are very short on time today, so if you're interested to learn a little bit more, there is a couple of interesting videos already on YouTube with some real game examples that we had been working on. So feel free to have a look at. You know, I think the ideas in terms of development are literally endless. So these were just a couple of examples. And maybe before handing it over, I have been working on different client examples that connect MetaMask and smart contracts to save on chain data as well as images to IPFS by using front end applications such as Next JS to create Minting Web applications.
00:21:51.520 - 00:22:35.100, Speaker C: And there's a lot of front end libraries. For example, I had been using React Morales very recently. Despite the fact that Morales is moving to Morales 2.0, I still thought it was a cool library to explore. But yeah, that's just one of the examples of how to combine different frameworks, really, to create off chain and on chain data and then really connect these to your game client, whichever that might be, whether it's Unity or Unreal Engine. And with that, I'm going to pause it here and I think there's something you wanted to show as well, Leslie.
00:22:35.260 - 00:23:05.196, Speaker B: Yes, that's right. Yeah. Thank you very much, Rick. That is actually quite a lot of different demos. Rick and I already demonstrate in some other workshop as well. So in case, if you'd like to know more, you can always jump to the Discord Channel. Then we can provide you with the so, after the demonstration by Rick, I would like to cover some of those other information about the support and also documentation and price.
00:23:05.196 - 00:24:10.930, Speaker B: So on the support side, the most native way to provide the support and if you have any question will be join this EDH online 2022 Discord Channel. And me and my teammate will be there in the sponsor Hyphen Chronos channel to provide support over there. And on the documentation, I think Rick already showed you with this docs Chronos.org. And I think also something that's very important is many of the resources has already been provided for Dev developer side. You can see that integration with integration with different RPC endpoints for Testnet, Mainnet and Explorer, et cetera. And also this is some of the developer toolings in terms of price, Oracle and also random number generators and Morellis API support. The detailed documentation, you can also find it here.
00:24:10.930 - 00:24:39.160, Speaker B: And also the next one is on the price. For this hackathon, we serve five prices, two K each for any project that develop and also deployed on Chronos, Minet or Testnet. So, yeah, with that I think we can reserve some time for the QA section, see if we got any question from the chat.
00:24:46.770 - 00:25:43.230, Speaker C: Yeah, I think there was a question before. So Bill Wolf was asking if you currently support Game Maker Studio or if there's any Game Maker Studio support planned. Maybe I can answer the question. So, to the best of my knowledge, we are currently not working on support for Game Maker Studio. But that doesn't mean necessarily that we won't do it in the future. I think it all depends, probably on demand, and probably will have to see how many of the Game Studios we work with are interested in seeing Game Studio support in the future. And the more feedback we get from game developers like yourself, the more it might be likely in the future that we will perhaps provide also support for Game Maker Studio.
00:25:43.730 - 00:26:02.580, Speaker B: Yeah. And also, I think if you have no experience on Unity, for example, in the cases Rick also before we kicking off this project, he also have no experience on Unity as well. But turns out how was your experience in general?
00:26:03.850 - 00:26:45.010, Speaker C: Yeah, I think that's a very good point. Yeah, I started from scratch with Unity, so it was a bit scary at first, but I think there's so much documentation, maybe not too much, but there's enough documentation to get started. I think that's what matters in the principle to have enough information, but also the curiosity to learn and to test stuff. I think that is what helped me to go through the Unity implementation so far. So I think, yeah, there's enough information to really get started. And once one gets started, everything else just comes out automatically.
00:26:45.830 - 00:27:42.910, Speaker B: Yeah, right. Thank you, Rick. And then I also saw a question would like to see whether the SDK compatible with Ethereum Mainnet. I think the short answer is yes, but you would have to do a bit of modification in terms of the chain ID and also the endpoint that you choose. Basically it supports all this EVM compatible chain, given that they have a similar method calling ways of calling the LPC endpoints and also they support similar methods on the EVM level. If that is the case and it is actually applicable to other chain as well. Let us see if that is any other question.
00:27:42.910 - 00:27:44.700, Speaker B: From the audience.
00:27:45.200 - 00:28:06.980, Speaker A: It looks like that's it. If anyone does have any questions, I recommend them to take it over to Discord. There's a Kronos Discord channel under Global online event. Yeah, I don't see anything else. Well, thank you to both of you. This is the first workshop of the day. We do have many more coming up today, so I hope people tune in.
00:28:06.980 - 00:28:09.412, Speaker A: And with that being said, have a great day, everyone.
00:28:09.546 - 00:28:11.360, Speaker C: Thanks for having us. Bye.
00:28:11.520 - 00:28:12.244, Speaker A: Have a good one.
00:28:12.282 - 00:28:13.056, Speaker B: Later. Bye.
