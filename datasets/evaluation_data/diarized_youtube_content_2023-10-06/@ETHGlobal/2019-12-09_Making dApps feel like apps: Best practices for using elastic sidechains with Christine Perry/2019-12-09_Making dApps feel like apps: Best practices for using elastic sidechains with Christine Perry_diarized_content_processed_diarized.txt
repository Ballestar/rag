00:00:00.730 - 00:00:36.690, Speaker A: So my name is Christine Perry from Scale Labs and most of you have already met Ethy, right? Yes. Well, this is one of the bounties. So we're going to tell you how to win one of these bounties and some of the other cash prizes too. Because let's cut right to the chase. We have bounties that you can win by hacking on scale. Two of them are for 1006, are for 500 each. Now, how do you go about doing this? Well, before getting into that, I want to talk to you about the problem that scale is looking to solve here and why it's relevant to you at the hackathon and at scale.
00:00:36.690 - 00:01:31.702, Speaker A: One of the things that we're looking to solve is a scalability problem which to us maps directly to a usability problem. One because most of you that have already hacked on Ethereum, you've already ran into the issues of transaction costs, storage costs and of course, speed being an issue. Now this is also going to be an issue at the hackathon because as you can imagine, as you're hacking, every time you have to test something on Rinkv or another testnet, it's going to take forever to deploy. You're wasting time. And with Scale, not only are we solving these problems in the real world, we're also solving these problems when you're just hacking and testing out your solutions to begin with. So what does this mean? How can you get around this today? Well, typically what you can do is you can offload computation to a centralized server. You can offload storage to a storage network such as IPFS.
00:01:31.702 - 00:02:23.830, Speaker A: You can wait for Ether 20 or you can use Elastic Sidechain. Now, before jumping into the code, I want to also show exactly how our network works because I think it makes more sense to conceptualize it before actually hacking on scale. And just like Ethereum, one of the things that we do is we have a network of many nodes within our system. And what happens is we are grouping together a subset of these to create your scale chain. And your scale chain is not shared resource for anyone else that's hacking on scale as well. So what do you get with a scale chain? Well, you could deploy your smart contracts directly to scale that are written in solidity or you can use file storage if you're familiar with IPFS, it's a simpler setup where you can just use an NPM package to get started. And let's say you still want to talk back and forth to Ethereum.
00:02:23.830 - 00:02:54.580, Speaker A: Well, we give you the option to be able to do that. Now, as I mentioned, the scale chain is just yours. But based off of how we've created our system, multiple nodes can run multiple scale chains as represented here. So over time, what you'll have is a crossover of scale chains on each node. And Jack he has a section tomorrow on this. He's the CEO of Skill labs right there and he's going to explain more about the node architecture. So today I'm just going to give a high level overview of what that's like.
00:02:54.580 - 00:03:39.170, Speaker A: So one of the things that we also want to do is make sure that developers, as they're developing long term on scale, they're not paying for more than they need at any given time. So you're able to grow with us if you are just testing out your idea or prototyping. You can start with a small chain. Now, what does that mean? It means you get less transactions per second and less storage. But it means that you're only paying for what you need at that given time. And when you want to upgrade to a medium or large chain to go all the way up to 2000 transactions per second, we're able to make that seamless transaction for you. So, because we're at a hackathon though, I want to get into the code really soon and show you exactly how this works.
00:03:39.170 - 00:04:29.470, Speaker A: But before that, one of the things I want to highlight is how easy it is get up and running. So most people, if you've already deployed to Ethereum, you've used Web Three or Ether JS or something similar and put a connector to that using Infura or some other endpoint. Well, it's the same process for deploying to scale. You don't have to change anything in your code unless you're using Truffle. You change two lines and you deploy your smart contracts directly to scale instead. So what you're able to do is offload some computation directly to our scale chain and have it run a lot faster and also a lot cheaper than it would otherwise run on Ethereum. Now, one of the things that we talked about earlier today was that you can use interchange messaging and what that does is it gives us a direct connection to Ethereum.
00:04:29.470 - 00:05:10.622, Speaker A: So in that instance where you're tokenizing your application, are there any developers in here working with ERC, 27, 21 or anything like that? Okay, we have a few, we have a few. Well, a lot of those tokens you typically want to leave on Ethereum. And what we do is we create clones on the scale chain side which you're then able to transact with without having to incur any sort of gas costs. But then when you're ready to exit, you can exit from the scale chain, we burn that clone and then you're able to free up that token back to the main user. So this essentially is what it looked like. You have your smart contracts. Typically you'll have more than one.
00:05:10.622 - 00:05:51.690, Speaker A: You can deploy it directly to Ethereum and then whenever you would like, you can interact with Ethereum and send that token directly back to the user. So let's show you what all of this looks like in the code. So I'm going to switch over here and one of the things I want to do is kind of talk about this application that we built. It's a simple application. It's called rock, paper scissors. What you're able to do is interact with a smart contract called Rock, Paper, Scissors written in solidity and basically execute transactions directly on the blockchain. So right now, I'm using MetaMask, and with MetaMask, it's connected to Rinkbee.
00:05:51.690 - 00:06:34.234, Speaker A: Now, everyone's familiar with this when you actually click a transaction and you want to execute it. And let's go ahead and do that together. Let's select rock. We have this gas fee for just doing a move. I'm going to go ahead and click Confirm and wait and wait and wait. Because this is what you have to do when you are developing on Ethereum or Rink fee, you don't get the transaction back in real time. Now, as a gamer or someone using this application, this is not the experience that I would want or the experience I want to create for anyone, right? So this is going to take some time to come back, but when it does, there we go.
00:06:34.234 - 00:07:14.040, Speaker A: The user is then able to go through and continue the game. Now imagine doing that with more of a live action game or a game where you're playing against component. You would have to wait 45 seconds or longer before the transaction comes back. And that's not a good experience. So let's switch that up. Now, at scale, what we did was we created an easy way for you to get access to the scale chains. So if you just go to Scale Network ETHWaterloo, that will redirect you to a place where you can fill out the form and get access to a scale chain right away.
00:07:14.040 - 00:07:34.746, Speaker A: Now, with that, our documentation gives you a quick getting started guide for how to get up and running. It's a one, two, three step process. You get your scale chain. Well, that's super easy. Fill out the form, you migrate your smart contracts, changing just two lines of code. If you're using Truffle, just two lines of code. And then you execute transactions using Web Three.
00:07:34.746 - 00:08:02.280, Speaker A: So as you can see, not much is really changing for you. But what you're gaining at this hackathon is save time and I'll show you what that looks like in a moment. But before getting to that, let's switch over to the code and show you how easy it is to actually make this change. So most people are familiar with what this looks like. Let's go ahead and add another line for scale. And I cheated a little bit. I already have the scale chain ready, so I'm going to go ahead and plop it in here.
00:08:02.280 - 00:08:45.346, Speaker A: And then because it's just like deploying to Rinkby, I don't really have to think much beyond just copying what's already here pasting and just changing again, few lines of code and that's it. That's all that requires for you to get up and running with deploying to scale and potentially running one of the Bounties including ETH. So what does this look like in action? And what I want to do is show you a direct comparison of deploying to Rinkby versus deploying to scale. So. Truffle deploy. Reset network rinkby. Let's go ahead and let that run.
00:08:45.346 - 00:09:21.134, Speaker A: And this is going to be a very similar process that we're all familiar with. One, either we will get an error, or two, it will actually execute and looks like yes, extra comma. Thank you. Thanks for the coding back there. All right, so here we go. Let's go ahead and wait. And again, because you are only limited by time here at this hackathon, you have less than three days waiting each time you make a change to your smart contract, for it to deploy is not a good experience.
00:09:21.134 - 00:09:59.980, Speaker A: So we'll let that run in tandem. And I'm going to have another window open for the exact same project. And this time, just deploy it to scale. Now, we'll put this side by side so that way you can see. But essentially, while we're still waiting on the first transaction or the first smart contract to deploy scale in real time is able to deploy my three or four smart contracts in near real time. So you're saving a lot of time here at this hackathon. But more importantly, let's go here and we'll go ahead and start this again.
00:09:59.980 - 00:10:18.146, Speaker A: I'm going to go back to my application and let's switch this up. Instead of interacting with Rinkby, we're going to interact with scale. And here, let's give that some time to refresh. Who wants to play with me now? What move should we select?
00:10:18.328 - 00:10:19.086, Speaker B: Scissors.
00:10:19.198 - 00:10:45.994, Speaker A: Scissors. All right. Good move. So one of the things you'll notice is that scale doesn't introduce the idea of gas for end users. Why? Because a lot of times, it just doesn't make sense for them to have to know about it. They just want to play the game. But more importantly, instead of having to wait 45 seconds or however long it took me to talk my way through returning a transaction, we're able to get it back in near real time.
00:10:45.994 - 00:11:44.858, Speaker A: So not only are you saving time by deploying to scale and testing out your idea here, you're also saving time each time you want to process a transaction in near real time, which is currently not achievable today by just Rink V alone. So what we're able to do here is give you an option of being able to use all the same tools that you can with Ethereum on scale. But beyond that, if you look at our documentation, we have other really cool things here as well, such as being able to use file storage. Now, file storage, we package this up pretty nicely in an NPM package, which means that you can just use JavaScript to interact with the blockchain. So if this is your first time interacting with blockchain technology, you don't have to dive directly all the way in. You can just start here and start to upload and download files directly to the blockchain. And we've done it in a way that's more or less like an API to give you access to those files that you're storing.
00:11:44.858 - 00:12:44.186, Speaker A: And these files can be as simple as an image or as complex as a trained model for machine learning. Now, the last thing I want to talk about before opening it up for questions is partnerships. Because one of the things that's apparent in this space, just like in any other space currently developing on web 20, is that you typically can't build an application with just one technology, right? You have to layer them on, and we encourage you to do the same thing here. We have great partners with portis, taurus, bitsky, terminal, and maker the top three at the top. What they do is they allow you to have a better way to onboard your users. So instead of your users having to worry about using MetaMask or downloading MetaMask, it's an API based approach where the DAP developer codes it up and suddenly you're able to add a button just like a google login or facebook login directly to your application. It's a lot simpler and a more user friendly flow for your users.
00:12:44.186 - 00:13:29.294, Speaker A: Portage is here today, so definitely drop by and talk to them. The next one I want to talk about is one that I recently fell in love with, terminal. They allow you to be able to actually debug your code in real time, because if any of you have ever tried debugging a blockchain application, it is a nightmare. Reason being is because you have to remember, have your console open. If you don't, you lose a transaction. If you somehow close down your application, you then have to figure out a way to then go through all the event logs. With terminal, what they do is they give you an API approach where they're able to keep track of all those transactions for you, and so you don't lose anything.
00:13:29.294 - 00:14:44.450, Speaker A: You're able to log into their portal and see everything that's happening in real time and historically as well. Now, I just want to wrap it up with the bounties again, because one of the things that I just want to make sure that everyone's aware of is that we do have bounties here at the hackathon, including ethy. So please, please try hacking on scale and let us know if you have any questions. We'll be at the booth today and tomorrow and also on our discord. All right, any questions about anything? Good question. So, yes, with MetaMask, MetaMask is a way where the end user has to take more responsibility about being able to switch between networks. So they have to switch to rinkbee, they have to switch to Covon, they have to switch to whatever network you're currently deployed to to use a transaction.
00:14:44.450 - 00:15:10.640, Speaker A: And the same thing goes for scale. It doesn't change. Now, this is where it comes in handy to try out one of those API integrations that we were just talking about, such as portis or bitsky or taurus. Because one of the things they allow you to do is code. It directly in the backend where the end user doesn't have to do anything and the API based wallet is able to just make the switch for you as well as create the wallet and maintain all of.
00:15:14.070 - 00:15:18.514, Speaker B: So for anyone asking what's the optimal time to get their scale chain and.
00:15:18.552 - 00:15:39.346, Speaker A: Start testing and working with you immediately today. Immediately today. Well, one of the things is, if you come to our desk, all of our flyers has the website to actually get the scale chain from. So come pick up the flyer, get the website to the scale chain, and you'll be able to get one directly.
00:15:39.378 - 00:15:42.994, Speaker B: On your own transactions currently being validated.
00:15:43.042 - 00:16:21.234, Speaker A: On a scale chain. So what we do is we set up nodes or servers directly on our side to be able to run the consensus. Because one of the things I highlight today that Dak will go into more detail tomorrow, is that we have a consensus protocol that runs and finalizes transactions. It's layered with BLS signatures and a whole lot of other really great cryptography and math. But that is actually what is running the transactions and actually adding them to the blockchain. So for the hackathon, it is four nodes that's doing that. But when you actually get a scale chain as adapt developer that's deploying into production, it's going to be 16 nodes.
00:16:21.234 - 00:16:28.440, Speaker A: And so those 16 nodes will rotate over time. So that way over time, essentially all potentially 1000 nodes within a network could work for your application.
00:16:29.290 - 00:16:30.470, Speaker B: Decentralized.
00:16:33.850 - 00:16:44.670, Speaker A: Yeah. All right, well, thanks for your attention, guys. And, yeah, feel free to drop by the booth and get a skeleton.
