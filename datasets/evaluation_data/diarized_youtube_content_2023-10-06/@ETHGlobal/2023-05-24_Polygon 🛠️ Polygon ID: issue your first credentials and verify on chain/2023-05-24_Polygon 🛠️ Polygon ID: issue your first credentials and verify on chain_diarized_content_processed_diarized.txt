00:00:08.170 - 00:00:27.510, Speaker A: Hello everyone, my name is Alexander and here's with me my colleague Tima and we are from Polygonid and today we will demo you how to issue your first Credential and verify it on chain.
00:00:28.970 - 00:00:32.120, Speaker B: So just this.
00:00:34.970 - 00:01:43.170, Speaker A: Let me first start with what's Polygonid? So, Polygon ID is a self sovereign identity solution that is leveraging zero knowledge proof technology for ultimate user privacy. Basically it is scalable, it is Verifiable on chain and off chain and we are using Verifiable Credential standards and DIDs so how it works in general. So we have basically three parties. It's identity holder, it's the user that is having his Credential. There is always issuers that is issuing Credential. So it's like a source of trust. And Verifier, it's a party that is requesting something from the user, like some statements about user based on credentials that he has.
00:01:43.170 - 00:02:45.820, Speaker A: And let's see how it works on example. So a user receives Credential from a university, let's say that basically it's assigned by university, it's a piece of data in Jsonld format and it's digitally signed by the university. User receives it in his identity wallet and stores on his device. It's not on chain, it's on his device. And then when time comes and when Verifier needs to get some data, verifier asks some questions. And for this we designed a special way of asking questions with zero knowledge proofs. We are calling it ZK Query Language.
00:02:45.820 - 00:04:08.560, Speaker A: So Verifier generates a zero ZK query and gives it to user and user then scans it with his identity wallet and accepts what he needs to share or to prove and generates zero knowledge proof that is then sent to the Verifier and Verifier just Verifies zero knowledge proof and checks that it's valid. Yeah. And so it's basically it on high level for the builders, we have mobile application and SDK. We have issuer node for the issuer side and we have Verifier libraries on Colank and on JS to verify zero knowledge proofs and generate Zkary requests and also on chain Verifier in Solidity. And now to the demo.
00:04:09.810 - 00:04:25.110, Speaker B: Okay, just a second, I'll prepare for the demo. We'll change your voting screen. So.
00:04:26.840 - 00:04:40.700, Speaker C: Essentially I will start with some explanation of the schemas. So before you will start issuing any credentials you need to build your schema, this is actually the data type or.
00:04:40.770 - 00:04:47.980, Speaker D: Like the schema that you will issue. For example, this can be in this case, in this example, this is Kych Credential.
00:04:48.060 - 00:04:53.696, Speaker C: It has two attributes, this is birthday and document time. You can build whatever you want.
00:04:53.798 - 00:04:55.408, Speaker D: Maybe it will be in your case.
00:04:55.494 - 00:04:57.972, Speaker C: Passport Credential and you will put five.
00:04:58.026 - 00:05:00.128, Speaker D: Attributes or it will be I don't.
00:05:00.144 - 00:05:14.760, Speaker C: Know, my Ethereum community member and it will just with one attribute. But you are free to build your own credentials with your structures, with your attributes and design what actually your specific.
00:05:14.830 - 00:05:18.056, Speaker D: Use case will require and you will need.
00:05:18.158 - 00:05:25.224, Speaker C: You see here we're using the XSD types. We're not supporting every types, we're supporting.
00:05:25.272 - 00:05:31.708, Speaker D: Just some subset of types because in zero knowledge proofs well, you technically cannot use everything.
00:05:31.874 - 00:05:38.656, Speaker C: But for example, we are doing some trick with selective disclosure where you can use string values and then verify the.
00:05:38.678 - 00:06:00.708, Speaker D: String values with zero knowledge proofs. And with this trick you can use actually any type of values but they will be recognized it as a string and you cannot verify and use all the power of zero knowledge ZK query language and for example in on chain verifications you always also will be a little bit limited.
00:06:00.804 - 00:06:03.096, Speaker C: But if you are okay with to.
00:06:03.118 - 00:06:11.908, Speaker D: Work with integer values and with numeric data types, you are fine and you can just build a lot of use cases.
00:06:12.004 - 00:06:14.380, Speaker C: So we have a tutorials for this.
00:06:14.450 - 00:06:19.676, Speaker D: I will not spend too much time for this schema builder just because right.
00:06:19.698 - 00:06:21.500, Speaker C: Now you need to build it manually.
00:06:21.840 - 00:06:24.604, Speaker D: In couple of months we are planning.
00:06:24.652 - 00:06:30.780, Speaker C: To release schema builder application it will simplify this procedure.
00:06:30.860 - 00:06:39.604, Speaker D: So you just in the builder, just select your fields that you need and it just generates a schema for you so it will be not as difficult.
00:06:39.722 - 00:06:45.840, Speaker B: As it is right now. So right now let's go to the issuer.
00:06:46.000 - 00:06:48.996, Speaker C: This is our issuer node, this is.
00:06:49.018 - 00:06:55.688, Speaker D: Open source, you can download and run it on your local machine, install it on your server or something.
00:06:55.774 - 00:07:09.048, Speaker C: This is specifically designed for the issuer actually this is like demo application but this is issuer part it will be not accessed by the users, it will be accessed by the issuer. So you will issue some specific credentials.
00:07:09.064 - 00:07:16.016, Speaker D: For your community, for your users, for your I don't know, different developers or for your specific needs.
00:07:16.118 - 00:07:19.136, Speaker C: So here you can import schema, I.
00:07:19.158 - 00:07:20.544, Speaker D: Will show you example.
00:07:20.662 - 00:07:32.290, Speaker B: For example this one coming fetch it.
00:07:33.000 - 00:07:35.056, Speaker C: Preview so you see all the fields.
00:07:35.088 - 00:07:57.112, Speaker D: That is defined in the schema. Some fields are mandatory and they are specific for polygon ID and for verifiable credentials like issuer issuance date, expiration date and you have your custom fields like birthday, document type, maybe credit score and this will be a field that you specifically will define. So as I have this schema imported.
00:07:57.176 - 00:08:00.060, Speaker B: I'll go back and we'll issue Credential.
00:08:03.360 - 00:08:05.448, Speaker C: So we have two options one, the.
00:08:05.474 - 00:08:09.664, Speaker B: Credential link so create like Credential and.
00:08:09.702 - 00:08:24.868, Speaker D: Send a link to the user so he can download it to his mobile wallet or if we know in advance his identity, we can issue this Credential directly to his ID. But at the moment I don't have my identity linked to this node so.
00:08:24.954 - 00:08:48.476, Speaker B: I will use the link. This is a time until Credential will be accessible. This number of possible issues, let's say I will put one, I select my type and this is a birthday I.
00:08:48.498 - 00:08:52.460, Speaker D: Will put like 1991, 1st month, first.
00:08:52.610 - 00:08:59.120, Speaker B: Day document type two and I will create a bink.
00:09:02.670 - 00:09:04.442, Speaker C: So now we'll generate a QR code.
00:09:04.496 - 00:09:10.270, Speaker D: For the user so he can download this Credential by his wallet.
00:09:10.850 - 00:09:16.850, Speaker B: I will show my wallet with.
00:09:21.220 - 00:09:21.680, Speaker D: So.
00:09:21.750 - 00:09:24.790, Speaker B: We just scan a QR code.
00:09:27.720 - 00:09:30.870, Speaker D: And we can get Credential to our phone.
00:09:34.310 - 00:09:38.280, Speaker B: Problems this time?
00:09:38.890 - 00:09:41.394, Speaker C: Usually I should receive the push notification.
00:09:41.522 - 00:09:44.040, Speaker D: But maybe because of the connectivity here.
00:09:45.210 - 00:10:03.796, Speaker B: I just need to scan and fetch it. So you see, I have a Credential with this birthday and document type on my phone.
00:10:03.978 - 00:10:10.660, Speaker C: Now I can go to the verifier. Let's start with the website. This is off chain possibility.
00:10:10.740 - 00:10:15.464, Speaker D: So you can build the gated access on your website and then I can.
00:10:15.502 - 00:10:19.340, Speaker B: Ask hey, I can ask this query.
00:10:22.000 - 00:10:23.704, Speaker C: This is a code that is hidden.
00:10:23.752 - 00:10:30.460, Speaker B: In this cure code. Let me make it a bit bigger.
00:10:31.780 - 00:10:39.660, Speaker C: So we're asking the specific query to the user wallet. So hey, do you have this context.
00:10:39.740 - 00:10:42.396, Speaker D: Like Credential with this context in your wallet?
00:10:42.508 - 00:10:48.580, Speaker C: Do you have this type kvch Credential? And do you have the birthday field.
00:10:48.730 - 00:10:51.590, Speaker D: That is less than 2000?
00:10:52.280 - 00:11:05.770, Speaker C: So if I match this criteria, we can generate a zero knowledge proof that will prove like this request to the Verifier. So Verifier will be sure that all the requirements are met.
00:11:06.620 - 00:11:07.370, Speaker D: So.
00:11:09.280 - 00:11:16.700, Speaker B: Let'S try to do this hazard get a bit smaller.
00:11:23.050 - 00:11:25.450, Speaker C: So we see, we have the request.
00:11:28.270 - 00:11:30.538, Speaker B: On my phone, he's asking if I.
00:11:30.544 - 00:11:34.790, Speaker C: Have Ksh Credential if the birthday attribute.
00:11:34.870 - 00:11:46.624, Speaker B: Is smaller than 2000 and I can generate a zero knowledge proof. It takes some moment.
00:11:46.742 - 00:11:55.296, Speaker C: So we generate a zero knowledge proof and send it to the back end. So back end can verify zero knowledge proof because it's not enough only to.
00:11:55.318 - 00:11:58.496, Speaker D: Verify zero knowledge proof. You need to verify zero knowledge proof.
00:11:58.608 - 00:12:02.756, Speaker C: And if it match the request that.
00:12:02.778 - 00:12:08.884, Speaker D: You asked, so you're matching the request and response all the criteria and you are verifying.
00:12:08.932 - 00:12:12.120, Speaker C: Okay, it was used like birthday.
00:12:13.900 - 00:12:14.264, Speaker B: This.
00:12:14.302 - 00:12:19.310, Speaker C: Birthday is less than 2000. Okay?
00:12:20.400 - 00:12:22.956, Speaker B: So here in token, we can show.
00:12:22.978 - 00:12:27.900, Speaker D: You the token that was sent to the Verifier.
00:12:40.070 - 00:12:45.810, Speaker C: You see, we have only some meta information and zero knowledge proof.
00:12:45.890 - 00:12:49.686, Speaker D: So this is zero knowledge proof that is answering on our question.
00:12:49.788 - 00:12:54.786, Speaker C: So as a user, I'm not exposing any personal information to the Verifier, I'm.
00:12:54.818 - 00:12:58.220, Speaker D: Only generating zero knowledge proof with this answer.
00:12:58.590 - 00:13:01.066, Speaker C: So the same thing we can do.
00:13:01.088 - 00:13:02.358, Speaker D: With the smart contract.
00:13:02.534 - 00:13:05.082, Speaker C: So the smart contract also can be.
00:13:05.136 - 00:13:13.222, Speaker D: Such a Verifier that can ask user to generate a proof and prove him some specific statements.
00:13:13.366 - 00:13:15.582, Speaker C: So the same request that we did.
00:13:15.636 - 00:13:22.390, Speaker D: For the website, I can do that for the smart contract and in this case the smart contract will be the same Verifier.
00:13:22.490 - 00:13:24.606, Speaker C: But you can build some business logic.
00:13:24.638 - 00:13:25.614, Speaker D: Inside your smart contract.
00:13:25.662 - 00:13:27.726, Speaker C: For example, you can build the ERC.
00:13:27.758 - 00:13:41.222, Speaker D: 20 smart contract which accept only people who are about maybe like 20 years old or from specific country or not from some other countries, like I don't like China, Russia or something like this.
00:13:41.356 - 00:13:53.450, Speaker C: It's very based on your specific requirements for your business logic. So here is an example of this smart contract verification.
00:14:03.050 - 00:14:06.520, Speaker B: Okay? Proof work.
00:14:11.370 - 00:14:13.046, Speaker C: Where is storytip proofs?
00:14:13.158 - 00:14:15.462, Speaker D: Okay so the question where is STORYTips?
00:14:15.526 - 00:14:18.346, Speaker C: Actually proof is generated every time when.
00:14:18.368 - 00:14:21.230, Speaker D: We are answering this request and share it with the Verifier.
00:14:24.450 - 00:14:39.278, Speaker C: So if this is website, it will be on the back end of the Verifier. If this is smart contract, I send the proof to the smart contract, and smart contract will verify. And like YouTube? No, they generate it on the flight.
00:14:39.294 - 00:14:42.410, Speaker D: And every time it's sent to the verifier.
00:14:42.590 - 00:14:45.974, Speaker B: So here we just see.
00:14:46.012 - 00:14:47.750, Speaker C: I connect to MetaMask.
00:14:55.590 - 00:14:56.386, Speaker D: So it's how.
00:14:56.408 - 00:15:00.322, Speaker C: Wallet connect is working. First we are connecting and then generating.
00:15:00.386 - 00:15:03.938, Speaker D: Zero knowledge proof and then send a transaction with a proof.
00:15:04.034 - 00:15:25.770, Speaker B: So here I generate a proof and send it. Take a look on the MetaMask Kinesh to wait a second. Okay, success. So what is the request inside the smart contract?
00:15:26.510 - 00:15:41.266, Speaker C: It's actually the same but we put this in a QR code to give wallet some explanation. Right now our wallet is not fully supported everything because that's why we need.
00:15:41.288 - 00:15:46.446, Speaker D: To provide some additional metadata with this transaction data, this address of the smart.
00:15:46.478 - 00:15:49.206, Speaker C: Contract and specific method that you need.
00:15:49.228 - 00:15:51.922, Speaker D: To call to share the zero knowledge.
00:15:52.066 - 00:15:58.886, Speaker C: But inside the smart contract is stored the same request as we had and.
00:15:58.988 - 00:16:16.350, Speaker D: The same request is verified inside the smart contract. So your smart contract can build a business logic and verify zero knowledge proofs and can request a different verification spot for the users. And based on this, again you can build like shielded access, maybe some business.
00:16:16.420 - 00:16:34.386, Speaker C: Logic, maybe you give to your community members some additional preferences. So what you can do, you can build like off chain for your community members reship credentials that they are your community members. And then when you will do a token distribution for your community members, if.
00:16:34.408 - 00:16:45.880, Speaker D: They can prove this to the smart contract, you will add some, I don't know, additional values of the tokens or distribute some additional preferences in your smart contract. Also we can build.
00:16:48.090 - 00:16:49.622, Speaker C: Owner transferring only.
00:16:49.676 - 00:16:56.970, Speaker D: If I send a specific zero knowledge proof to the smart contract, then you can change the owner of the smart contract.
00:16:57.710 - 00:17:09.246, Speaker C: So this query language is flexible, you can build your own business logic and just extend the possibility of smart contracts with some additional business logics that will.
00:17:09.268 - 00:17:12.480, Speaker D: Be embedded in this zero knowledge course.
00:17:13.170 - 00:17:23.518, Speaker C: What's cool about this that your identity in a different smart contracts will be different. For example, you can reuse different verifications but your identity will be not tracked.
00:17:23.614 - 00:17:39.240, Speaker D: In a different smart contract. The same you can do with the same smart contract. For example, the same verification can be used with a different ethereum address. So your identity kind of decoupled with your ethereum address.
00:17:39.610 - 00:17:43.434, Speaker C: That's why you can reuse verifications, you.
00:17:43.472 - 00:17:54.890, Speaker D: Can reuse credentials and well, the sky is the limit of what you can do with query language and with this verifications.
00:17:57.470 - 00:18:03.886, Speaker C: Okay, yeah, that's it for the presentation, we'll not go too deeply in the.
00:18:03.908 - 00:18:07.794, Speaker D: Smart contracts and in the circuits just.
00:18:07.832 - 00:18:11.140, Speaker C: Because we have very little limited time.
00:18:11.590 - 00:18:14.100, Speaker D: So maybe have some questions.
00:18:14.790 - 00:18:16.580, Speaker C: Clarifications yeah.
00:18:21.910 - 00:18:23.570, Speaker B: That felt considered.
00:18:25.290 - 00:18:50.990, Speaker C: Do we have a specific type of proofs? So our circuits, they're kind of generic, you don't need to write your own circuits. What you need to do, you need to define only schema for your credentials and you can use this query language with your specific credentials. So the type of proofs, we have like four different circuits with a different.
00:18:51.060 - 00:18:52.670, Speaker D: Type of kind of proven.
00:18:54.850 - 00:19:04.370, Speaker C: So we have two type of proofs. One is a signature, which is just a signature and also Merkel tree proofs. So for the mercury proofs, credentials must.
00:19:04.440 - 00:19:07.150, Speaker D: Be published on chain and conquered on chain.
00:19:07.230 - 00:19:21.718, Speaker C: So this is two type of proofs for them, we have different circuits but query language and the rest of the stuff is generic. So you don't need to do anything like to write your own circuits or write your own proofs.
00:19:21.814 - 00:19:27.702, Speaker D: Everything is written and embedded in the libraries and you can just reuse all this functionality.
00:19:27.846 - 00:19:50.382, Speaker C: Technically you can extend this functionality if you need for your use case, if you want to write your specific proofs based on our identity system, this is possible. This is Baby Job job signatures used well, we're using Baby Job Job keys.
00:19:50.446 - 00:19:53.486, Speaker D: Specifically to prove something inside the circuits.
00:19:53.678 - 00:20:00.894, Speaker C: So this is specific baby Job key that you need, but yes, it is ECDSA Edda, DSA.
00:20:01.022 - 00:20:04.920, Speaker B: So fan everything about HD readables at least to the men.
00:20:09.170 - 00:20:18.740, Speaker D: You cannot use Ethereum keys for this type of signatures. You need to derive different type of keys. This is like they're on a different.
00:20:24.980 - 00:20:28.464, Speaker C: But this working with Ethereum, with polygon.
00:20:28.512 - 00:20:39.168, Speaker D: With any EVM compatible chain and kind of the pluggable system where you can build your use cases.
00:20:39.264 - 00:20:45.176, Speaker C: So we have actually all the parts of the flow, like for the issue, for the Verifier, for the user, for.
00:20:45.198 - 00:20:47.816, Speaker D: The user, for the wallets, we have.
00:20:47.838 - 00:20:57.224, Speaker C: The SDKs, for the eShares, we have all the libraries, GSS, SDK that if you want to build your own node.
00:20:57.352 - 00:21:13.840, Speaker D: You can do this. For the Verifier we have verification libraries written in Goa and JavaScript. So let's cover majority of the cases and again, you can write your own if you wish or if you need.
00:21:13.990 - 00:21:15.116, Speaker C: For the smart contracts.
00:21:15.148 - 00:21:16.864, Speaker D: Also we have some common smart contracts.
00:21:16.912 - 00:21:20.004, Speaker C: With some standard interfaces that you need.
00:21:20.042 - 00:21:31.252, Speaker D: To inherit for your specific smart contracts. This is like they extending the functionality with ZK set request and set response.
00:21:31.396 - 00:21:37.092, Speaker C: Functions that you can replace or rewrite or build your own specific business logic.
00:21:37.156 - 00:21:43.932, Speaker D: And verify zero knowledge and verify your specific cases and verify your specific requests that you will do.
00:21:43.986 - 00:21:50.908, Speaker C: Because actually in one smart contract you can embed multiple verifications. It should not be just one.
00:21:50.994 - 00:21:52.716, Speaker D: Like I want to know your age.
00:21:52.818 - 00:22:01.120, Speaker C: Maybe I want to know your age also that you're a community member. Maybe if you are participating in my.
00:22:01.190 - 00:22:05.664, Speaker D: Dao activities, maybe you are like GitHub contributors and so on.
00:22:05.782 - 00:22:08.036, Speaker C: But these are specific for the specific.
00:22:08.138 - 00:22:10.630, Speaker D: Implementations that will be built on top.
00:22:15.380 - 00:22:19.824, Speaker C: So, any other questions? Good.
00:22:19.862 - 00:22:28.790, Speaker B: So, last thing, if you are curious, we have tutorials on our Polygon website.
00:22:30.040 - 00:22:38.708, Speaker C: Zerix polygon hithavio IO and togo. All the things that I showed, they are available there.
00:22:38.794 - 00:22:42.550, Speaker D: You can just pause the tutorials and you will have the same result.
00:22:45.280 - 00:22:45.692, Speaker C: Good.
00:22:45.746 - 00:22:46.010, Speaker D: Thank you.
