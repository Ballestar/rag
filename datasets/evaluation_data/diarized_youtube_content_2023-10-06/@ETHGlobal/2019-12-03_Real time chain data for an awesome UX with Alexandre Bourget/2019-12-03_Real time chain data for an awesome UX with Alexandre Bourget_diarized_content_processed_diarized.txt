00:00:00.650 - 00:00:26.770, Speaker A: Okay, so first of all, I'm Alex. I'm CTO at diffuse. I'm here with the team here we have a sponsoring booth, and we're an infrastructure provider. But I want to know a little bit more about you guys. Where are you coming from and what are you here to do? Like, you're a hacker. What's your level of knowledge of Ethereum in general? So please hi, my name is my level of, I don't know, like intermediate.
00:00:26.850 - 00:00:31.400, Speaker B: Okay, cool. Okay, cool.
00:00:32.250 - 00:00:34.342, Speaker A: Ethereum, you know him a bit more?
00:00:34.476 - 00:00:57.966, Speaker B: Yeah. Okay, cool. Okay, cool. Perfect. Okay, cool. Okay, cool. Okay.
00:00:57.988 - 00:01:07.300, Speaker A: And why do you guys came here? Why do you guys come here? Yeah, to this talk.
00:01:09.270 - 00:01:12.754, Speaker C: We'Re actually building an app on that uses prediction market.
00:01:12.872 - 00:01:13.346, Speaker B: Okay.
00:01:13.448 - 00:01:17.738, Speaker C: You have a bunch of contracts up there. We need to query the blockchain.
00:01:17.854 - 00:01:18.520, Speaker B: Okay.
00:01:19.450 - 00:01:28.182, Speaker A: So I'm going to quickly explain what we do in simple terms, I'm sorry for the camera. And then I can demo a few things of what we can do.
00:01:28.236 - 00:01:28.454, Speaker B: Okay.
00:01:28.492 - 00:02:17.842, Speaker A: If you have any questions whatsoever, you stop me. So at Diffuse, we have base layer infrastructure that we offer so we can think of something like Infura or Alchemy or some other providers of nodes. But what we do is that we crack the egg open of the blockchain and we pipe this data into an infrastructure that allows you to query the chain a lot faster, a lot cheaper, and with greater guarantees than what a node gives you. So we're able to search the whole blockchain. Some things you would do on inferior would take a lot, a lot of calls, and you will get on our platform with a lot faster under 1 second, which can search the whole history. And then you can have a lot more granular terms. So if you're looking for something that called your contract from or to, you can pass those variables.
00:02:17.842 - 00:03:04.162, Speaker A: You can search for a particular method, particular logs signed by that or that account. There's a lot more granularity in what we expose as a search language. So it means that your application can do less work and less lines of code to feed their UI. That search engine also has streaming and is capable of going back in the history, but also streaming the future. Same search terms. You can then from the point you receive, like, let's say, the last 50 transactions that match your query, take that little cursor, and you can then search forward for any new things happening on the chain. But the particularity is that this so maybe you all not know, but Ethereum is eventually consistent.
00:03:04.162 - 00:03:36.522, Speaker A: Like, you could have a transaction transferring a million dollars it's in a block, but it might not be true again in 3 seconds. Maybe there's another block that will come and take proceedings. So in normal cases, developers need to handle that in code. They need to get a new block. And then if there's another block that takes proceedings, do all the operations to reverse certain transactions and then reapply the new block and maybe there's two blocks that came. So you need to handle all these edge cases. It's very difficult with our endpoint.
00:03:36.522 - 00:04:19.120, Speaker A: You create once and we're going to navigate all these things for you. We're going to send you an undo signal and a redo signal or the next blocks that match your query. So you always have one thing to think about, one linear stream and that feature there is aware of the forks, is aware of the reorganization that happen when the network gets into that eventually consistent state, which is a database term, right? Those little cursors are fork aware. So if you disconnect for an hour and you come back, we will still navigate a posterior that fork for you and still give you the guarantee that you'll never miss a beat. So that's one thing. Are there any questions about that?
00:04:19.810 - 00:04:20.560, Speaker B: Yes.
00:04:21.570 - 00:04:25.502, Speaker A: What do you mean? How to make it great or how to use it?
00:04:25.556 - 00:04:26.160, Speaker B: No.
00:04:26.870 - 00:04:30.226, Speaker C: How do you navigate between the different forks and how do you know what's true?
00:04:30.328 - 00:05:39.670, Speaker A: So the engine that we built is aware of the consensus algorithm of the different chains we're rolling out, right? So that means the thing that reorganizes how it chooses the longest chain on ethereum or actually it's the most voted it's most votes with the uncles and all that, right? So there's a little algorithm that decides what's the longest chain right now, more weight and that's how we're going to decide to undo the segment that is not true anymore and then apply the new blocks. But that's part of the search engine that is also historic and also streaming with the protocol. Does that make sense? Yes, your linear fee will receive undo true and then reapply the other things as they go. So it's sort of corrected on the fly but linearly for you. You don't need to handle the graph aspect of it, right? So that's greatly simplified for developer. You have one include if you're on a web thing, you just NPM and then you can do a search query, could be streaming. That's all dealt with a GraphQL interface by the lib and streaming subscription and then you get the feed and with the GraphQL interface we provide, you can select only the payload you need.
00:05:39.670 - 00:06:21.478, Speaker A: You can select just a bunch of feeds and put that directly in your mobile app. So all of a sudden it's not incredibly costly to just access your app from mobile users, for example. Does that make sense? Isn't that cool? It's even cooler when you've run into all the headaches you need to write to handle that. And for those who know, I'm just pitching a few other things. Like competitors often offer a big pool of nodes and then users hit the load balancer and they hit all different nodes. But those different nodes are like master, master replicated. So one could be at block 502 and this 1503 and then you hit another one.
00:06:21.478 - 00:06:59.810, Speaker A: It's 505, but you haven't seen 504. So the client needs to distinguish all these things and navigate the inconsistencies of the nodes, which you want to load balance. But the diffuse platform offers one unified view. If we give you something, anything, you come back, we'll give you then the subsequent will be able for you to sort of navigate back and ensure that you never miss a beat because it's a holistic view of the network. If we've shown you a fork, we'll always be able to navigate you out of it. If we haven't shown you a fork, we'll never show it to you. Does that make sense? Isn't that even more cool? It's pretty cool.
00:06:59.810 - 00:07:35.482, Speaker A: Okay, so there's another feature that I want to highlight because we just released that and that can make your apps during this week a lot flashier. So I don't know if you went to different DApps. I went to uniswap before the Revamp just recently and I sent a few dollars and then sent a transaction and there was zero feedback from the app. I was like scared because I sent a few dollars, more than a few, maybe too much. And I had no feedback. Transaction was sent, I had no clue if it was settled. I had no clue of the progress.
00:07:35.482 - 00:08:25.458, Speaker A: And that's scary, right? You don't want to have people live that because they're going to distrust very fast. So the endpoint we're providing is what we call the transaction lifecycle endpoint. And it's a simple endpoint for you, but in the back end we listen to the network, everything that's flowing through the networks in blocks and in different forks and all of that. And we will send you a single simple stream of what is happening for that particular transaction. So if it's been seen on the network, we're going to send you it's pending and then we could give you some estimates and then we could eventually we don't have that right now rolled out probabilistic finality, how long we could expect that to be in a block. And then if a block arrives that mines it. We send you as the changes when all the information about the block, then again just the bits that you want so that you can show your user it's in a block.
00:08:25.458 - 00:08:43.150, Speaker A: And then if you have another confirmation, we send you that signal too. If it gets forked, then we're going to send you it's forked it's back into the pending. If it's replaced by all these transaction states that you don't want to care about, we send it in a linear stream so that you could hook it up to a small UI and then your users are more comfortable.
00:08:43.230 - 00:08:43.810, Speaker B: Right?
00:08:43.960 - 00:09:02.620, Speaker A: That's the sort of abstraction we want to give to the chain so that people developing application, it's a no brainer to make the UX great, right? So that's what we enable. Do you have any questions about these things? Was that too fast? No.
00:09:03.070 - 00:09:03.820, Speaker B: Great.
00:09:05.470 - 00:09:31.902, Speaker A: No questions at all. So right now, we released the platforms, the different components. On EOS, we have seven networks there. We have a few private networks for customers. And right now on Ethereum, we release on Mainet and Robston, that's where we're at. We're looking at other chains. So our focus is developers.
00:09:31.902 - 00:09:49.180, Speaker A: We're making the tools not for token holders. We're not shifting the business for token holders. Our focus is great developer tools. Okay? So what I can do is show you a little thing. I'm sorry, I'm not going to connect to this.
00:09:49.790 - 00:09:50.490, Speaker B: Okay.
00:09:50.640 - 00:10:08.378, Speaker A: I'm going to go around and show you just a little example because it's slick. Okay? We built a small block explorer. It's called ethq. Look. It's called ethq. It looks like that. I don't care about the block explorer.
00:10:08.378 - 00:10:29.666, Speaker A: It's just a marketing ploy because we built that in four days. But in there, it's just a way to resurface the API, because all you see done here is actually something you can do directly from the API. It's a segue for developers to learn. It's not a Block Explorer just for you to observe.
00:10:29.698 - 00:10:30.038, Speaker B: Right.
00:10:30.124 - 00:10:51.194, Speaker A: Although I have to say that this Block Explorer is, because of the data we provide the deepest Block Explorer on the market. Because so for those who know transactions on Ethereum have internal transactions, and they can, like, you send some dollars here, it could have side effects to transfer $70 million and do 70 transfers under the hood.
00:10:51.242 - 00:10:51.742, Speaker B: Right.
00:10:51.876 - 00:11:30.438, Speaker A: You don't easily normally see that when you look at transactions on Ethereum. But this block Explorer actually the diffuse platform. So let me show so this one has nine calls. So the Diffuse Platform offers all that tree of calls. And for each of these calls, we can provide all the state changes, all the balance changes, all the fees that were incurred, and the reasons for the fees. There were minor fees and gas costs, whatever. And all this is also available through the API.
00:11:30.438 - 00:11:59.214, Speaker A: And the search engine allows you to search down to that level so you can search inside transactions. You could say, who called my contract? But not just from the exterior. Also, who called it as a side effect of the execution of another contract. And all these internal transactions are real transactions. They're not less important, like, on the same setting, but most infrastructure providers don't make them shine at the same setting.
00:11:59.262 - 00:11:59.762, Speaker B: Right.
00:11:59.896 - 00:12:22.950, Speaker A: So we didn't want that. We wanted to have all the data available for search and for indexing taking, decision, trading decisions, whatever you're building. If you want to read the chain, the most profound way, and the easiest way really, is to pluck out a GraphQL query. I'm going to show you in just a moment. Just I want to announce that during the hackathon, if you're building a great experience on top of diffuse. We have five prizes.
00:12:23.030 - 00:12:24.470, Speaker B: Is that right? Five prizes.
00:12:24.550 - 00:12:27.738, Speaker A: $2,000 the first, then 1000, 1500, 500.
00:12:27.824 - 00:12:28.218, Speaker B: Okay.
00:12:28.304 - 00:12:52.980, Speaker A: And what we're looking at is we love great user experiences. If you guys build a great user experience and because of the things in there, you're able to do so because we have widgets that are crisp and reactive to what's happening and give a great user experience. That's what we'll value. You guys are going to shine. We're going to shine too. So that's a win win. Can't wait to see what you guys are going to be building.
00:12:52.980 - 00:12:57.960, Speaker A: Want me to show you the GraphQL API here or what are you most interested in?
00:13:00.250 - 00:13:00.614, Speaker B: Right.
00:13:00.652 - 00:13:38.350, Speaker A: Want to see? We hit it. So our goal is here. What you see in the Explorer is to have a button to then show the GraphQL query that is done in this page. So you can just copy paste and go and play with it. So this here oh, just I think that's one of them. So this here is an example of me. I'm going to grab a pending transaction on Etherscan.
00:13:38.350 - 00:13:39.762, Speaker A: This one.
00:13:39.896 - 00:13:40.434, Speaker B: Okay.
00:13:40.552 - 00:13:55.590, Speaker A: I know it's boring because you don't see it. So this is streaming here. We saw the transaction on the network. Oh, now we had another transaction. It's now in block. And then we're going to see confirmations coming in. So this is streaming.
00:13:55.590 - 00:14:10.262, Speaker A: The first one we saw was the transition that told us I've seen the transaction. We saw the transaction here. Now that it's in a block. And now we have new confirmations and the transition is confirmed. And that goes up and up.
00:14:10.416 - 00:14:10.974, Speaker B: Okay.
00:14:11.092 - 00:14:53.818, Speaker A: You'll see that in the little widget up there? Let me show you the widget instead. So I'm going to take another pending transaction on Ether scan. So is that good here? That's pending. By the way, our API will provide you with at least two to 3 seconds faster response than what you get on Etherscan. Our API will send you that information before Etherscan will refresh their page and show that to you so you get a better experience for your users instead of sending them to Etherscan. And also so you see the little widget there?
00:14:53.984 - 00:14:54.522, Speaker B: Well, okay.
00:14:54.576 - 00:15:24.094, Speaker A: It's shown the things already. Otherwise we'd be in pending state. You see all the state transitions here happening. And also the latency of block propagation on our platform is approximately one to 2 seconds faster than competitors. So if you want to have the information the quickest, you're better off here. Because of the infrastructure we built, it's like tent poles that are stuck together. If the block arrives, it's pushed directly to your UI.
00:15:24.094 - 00:15:39.500, Speaker A: The latency is very minimal between all these steps and it's filtered through search. So there's still a lot of power there, but it's difficult to compare. And there's one thing I wanted to add, but I don't remember.
00:15:40.030 - 00:15:40.730, Speaker B: Okay.
00:15:40.880 - 00:15:47.402, Speaker A: Did you have any other questions? You want to see more right you'd like to see the screen?
00:15:47.536 - 00:15:49.082, Speaker C: Is this available for us?
00:15:49.216 - 00:16:16.322, Speaker A: Of course, yeah. You create an account on there because you have a token so that you could eventually set rate limiting options. When you deploy that to production, you can scale to millions of users with that platform. You could set that and decide, oh, I want this sort of growth. If it goes it's being abused. I want to sort of cap it. So you create API keys that have those capacity, and then when you query, you send that as a token, and then you can query.
00:16:16.322 - 00:16:46.510, Speaker A: There's a generous free tier. The whole thing is hosted and for the whole weekend. And we have coupons. If you ever want to go like crazy and download, I don't know, to 300 million, all the blocks of the chain and all that, you get the coupon. You'll be able to do that, no problem. Does that make sense? Okay, look, we'll give you the coupons. Where's the coupons? They're at our booth.
00:16:46.510 - 00:17:34.102, Speaker A: Yeah, we'll have you in some of the booth. Yeah, you can pick up a few ones. If you have students, tell them. So the thing is with that, so what we've seen from customers adopting our solution in comparison so one of our customers was one of the top users of the top infrastructure on Ethereum, let's say, okay, third largest customer in terms of volume. And they switched to that and they were able to kill 90% of their code because a lot of the code was handling the intricacies of load balance nodes that are master master and not in the same spot. And also the reliability that this provided means that even mid block, they could be interrupted because the cursor was replaying or re putting them back inside the navigation of a block.
00:17:34.166 - 00:17:34.490, Speaker B: Right.
00:17:34.560 - 00:17:49.662, Speaker A: So the reliability they got could cut off so much junk. So that means that if you want to get started, it's a lot easier to get started. And if you want to get it right, you don't need to do much right, because you'll have it right, because the bulk of the work is done on the server.
00:17:49.726 - 00:17:50.340, Speaker B: Right.
00:17:50.950 - 00:17:57.880, Speaker A: Okay, I don't want to stress it too much, but if you have any questions, I mean, I told you to interrupt me.
00:18:00.330 - 00:18:01.400, Speaker B: Yeah, go ahead.
00:18:02.650 - 00:18:27.470, Speaker A: Yeah, it's public. It is public. I mean, it's an imperfect explorer. We're going to improve it because we want to show the diffuse platform, but it's still a good piece. And our goal is that you could slowly discover the search terms when you click on things. If you click on the little thing, here the account, it's going to craft a query that you now discover. You can say from this address or to this address.
00:18:27.470 - 00:18:40.338, Speaker A: So you have things in both directions, and then you can craft and change that query and see different listings. It's very fast. Does that make sense? Ethq app. And there's Robston ethq App.
00:18:40.424 - 00:18:40.674, Speaker B: Yeah.
00:18:40.712 - 00:18:56.614, Speaker A: And otherwise it's diffuse. IO. We've just revamped the docs. So you have all the GraphQL schema. There's a few missing things. If you have any comments on the we've done a lot of work on the getting started material. If you have any hiccup, by all means, poke us.
00:18:56.614 - 00:19:08.010, Speaker A: Come and see us, call us in. We're going to go and hack it and release under your foot. We're going to ship it. A bunch of the corn engineering team is here to make sure everything is top notch.
00:19:08.350 - 00:19:08.906, Speaker B: Okay.
00:19:09.008 - 00:19:19.182, Speaker A: I had 25 minutes, so there's 1 minute left. If you have any other question, I'm happy to accept. Otherwise, I'll let you go hack. I mean yes.
00:19:19.236 - 00:19:21.520, Speaker C: So your goal for the user experience.
00:19:22.390 - 00:19:58.300, Speaker A: My goal for us to build the user experience, yeah. What we will value, as I said, is the user experience. If what you build, it doesn't need to be a web front end if you have a command line tool or, I don't know, something simpler. But it's able to react to what's happening on the chain because it's using those APIs, it makes your application shine, and it makes our API shine. That's what will value this, and that's how we'll judge the best use and the best user experience made possible by the chain. Does that make sense?
00:19:59.230 - 00:19:59.846, Speaker B: Yes.
00:19:59.968 - 00:20:11.214, Speaker A: Do you want, like, a creative implementation using Diffuse? Well, I want you to build great things.
00:20:11.332 - 00:20:11.902, Speaker B: Right.
00:20:12.036 - 00:20:22.702, Speaker A: And if you build great things that are meaningful, not just because it's a quick hack to use Diffuse, because you're building something great and Diffuse is part of it, that's where we both win.
00:20:22.756 - 00:20:23.360, Speaker B: Right?
00:20:23.730 - 00:20:25.040, Speaker A: Does that make sense?
00:20:25.370 - 00:20:26.120, Speaker C: It.
00:20:28.250 - 00:20:29.970, Speaker A: I got a lot of nodding.
00:20:30.130 - 00:20:32.134, Speaker B: Yeah. Okay.
00:20:32.252 - 00:20:37.490, Speaker A: That's it. Thank you for coming. Go hack and be happy. Bye.
