00:00:00.330 - 00:00:00.880, Speaker A: You.
00:00:03.010 - 00:00:38.810, Speaker B: Hi, everyone. Thanks for joining us today. I think we're now live streamed, so thanks for joining us today for the Uniswap workshop. We have Omar from Paradigm with us who will be walking you through Uniswap V Three dev setup in less than 30 seconds. If you have any questions, please post them in the chat. Omar will be able to address them there and eventually will be in the unique grant sponsored channel in our discord. I'll let you take it over, Omar.
00:00:39.150 - 00:01:29.030, Speaker A: Awesome. Good morning, everyone. My name is Omar. I'm an entrepreneur in residence at a venture fund called Paradigm, and the talk I want to give today is it's a very specific one, but it's something that I've thought about a lot over the past couple of weeks, and it's about how to deploy Uniswap B Three in your development environment in under 60 seconds. This is something that matters a lot to me because I've been working on a couple of Unisoft related projects, and I promise that by the end of this talk, you will be able to deploy all of the Unisoft V Three contacts in your dev setup in under 60 seconds as well. And before we begin, a bit about me, I mentioned so yeah, I'm an entrepreneur in residence at Paradigm, and previously I led a new asset edition at Coinbase. So, yeah, kind of seen the wide gamut and just got very passionate about just good developer experiences.
00:01:29.030 - 00:01:55.582, Speaker A: So let's get into it. Like I said, this is the project that I've been working on for the past couple of weeks. Liquidity mining staking is a pretty big deal in DFI, and I wanted to build the canonical staking contract for Unisoft V Three. So let's talk about how to actually do it. So I started off wanting to make something for Unisoft v three. In order to do that, I needed some unisoft v. Three libraries.
00:01:55.582 - 00:02:16.466, Speaker A: So I cloned V Three Core. Needed some periphery code. So I cloned V Three periphery, needed some more source code. So I copy pasted some solidity contracts that didn't work. Pasted some more libraries. Kind of got to the point where like, 70% of my repo was code that I hadn't written myself. Got frustrated.
00:02:16.466 - 00:02:29.350, Speaker A: What the hell is an NFT descriptor? Tried forking main net. That didn't feel right. More copy pasting. Tried Git Sub modules. Yeah, no, that wasn't a good idea. Git sub modules are never a good idea. Existential dread.
00:02:29.350 - 00:02:49.300, Speaker A: What's a non fungible position manager issues with Linked libraries and Ethers Imposter Syndrome. Feelings of doubt. Thinking about quitting tech forever. Took a break. Looked at it again with a fresh set of eyes. Oh, that's when I found out, oh, I guess other people also have a hard time here. I guess I'm not the only one.
00:02:49.300 - 00:03:12.266, Speaker A: And I basically kept this loop for like five days straight, just like 10 hours a day. It was pretty frustrating. Kept getting closer. Almost got there. Finally, after struggling for a while, I got my dev environment working. I could run my test suite and it would fail a test. And I finally, after about seven days of work, wrote my first line of contract code.
00:03:12.266 - 00:03:54.520, Speaker A: So that was my experience, just getting to the point that I could start writing solidity code for the Staking contract. And it was pretty painful. Now I really care about this, and here's what I want to do for you. I want to make it so that you can go from, I want to make something for unisoft B three, skip all the stuff in the middle that I struggled with, and you can go straight to writing your first line of contract code. There's a lot of stuff here, but essentially everyone here has great ideas, and I want you to be able to build them right away because that's like the best thing for the community. Because in general, right, the best dev tools are invisible and help you make stuff people want. And the operative cause here is like, let's make stuff people want.
00:03:54.520 - 00:04:39.990, Speaker A: Now, here's where it gets interesting. Up until yesterday at about 10:00 P.m., this presentation, it was going to be like 30 minutes about how to configure the libraries and deploy the contracts one by one by one. But I had this realization late last night, so I stayed up late and built it, which is that we could just build a Hard hat plugin, which would be great for this, where essentially, instead of you spending even 30 minutes having to deploy it, I figure what's the fastest way that people can deploy unisoft B three? So actions speak louder than words. So let's do it. So this is the repository that I put up. And what I'm going to do now is I'm actually going to switch from sharing Google Slides to sharing my terminal.
00:04:39.990 - 00:05:01.040, Speaker A: And we're just going to live present it. And I hope this works. Share screen. Share. All right, somebody mentioned something in the chat. Somebody say something if you cannot see my terminal. Otherwise I'm going to assume that everybody can see this.
00:05:01.040 - 00:05:17.730, Speaker A: Perfect. We're good to go. All right, let's do it. Yeah. CSH for the win. So let's go into this project. This is a regular hard hat project.
00:05:17.730 - 00:05:35.686, Speaker A: Latest version of Hard Hat. I just NPM installed it and we have nothing else in here quite yet. So basically, we just ran hardhat create. We created a repository or a project. So we've done this and now we want to get uniswap set up. So here's what we do. If somebody has a stopwatch, start it.
00:05:35.686 - 00:06:07.906, Speaker A: Now, this is going to take under 60 seconds, I think. So first we want to NPM install uniswap V three deploy plugin. So now we're installing that Hard Hat plugin that I mentioned. Okay, so that's done. Now the next thing we do is we go to our Hard hat config file and we require it unisoft v three deploy plugin. Save that. So, yeah, we just did those two things.
00:06:07.906 - 00:06:52.250, Speaker A: Now when we look and we say, what can we do now with hard hat boom, all of a sudden we have this deploy uniswap task. I wonder what happens if we run it hard hat, deploy, uniswap boom. Done. What we just did is we just deployed all of the necessary uniswap contracts. What's nine, the factory, the router, the NFT descriptor position, descriptor and the manager and we can start building cool products for other people. And, yeah, I'm not sure if anybody was timing, but that's all it should take to get started in deploying on uniswap. And that might have been a little bit anticlimactic, but that was actually my entire presentation.
00:06:52.250 - 00:07:10.200, Speaker A: So I yield the floor to anybody here who has questions or anybody who wants to do Q A. And I'll be in the discord in a couple of minutes and I can work with people one on one if anybody wants to get set up and work on the plugin as well. And that is it for my presentation. So thank you.
00:07:12.570 - 00:07:24.140, Speaker B: That was short. Yeah, feel free. I mean, we do have more time here, so anyone who wants to jump in, I have question, please take the time for it. You're more than welcome to.
00:07:31.010 - 00:07:31.486, Speaker A: There is.
00:07:31.508 - 00:07:33.630, Speaker B: A question in the chat from Sam.
00:07:34.930 - 00:08:14.998, Speaker A: Absolutely. Yeah. Sam mentioned an overview of the details of the so yeah, so this question actually has like two parts to it. There was the library, the way that I was writing it before I made it a plugin, and after I made it a plugin, before I made it a plugin. I'm going to share my screen again in just a second. Excellent. What I had done was initially I had this DevTools repository.
00:08:14.998 - 00:09:06.650, Speaker A: Inside of this, I had a lot of plugins that I'd written in order to do the staker. For example, when you're doing contract development, one common thing you want to do is you want to have a test, ERC 20 and you want to what's it called? Do a transfer. Okay. In order to do a transfer, in order to do a transfer, you have to ensure balances and approval. So a lot of the repository was actually utilities like this where you can say things like, ERC, 20 helper ensure balances and approvals. So in your test, if you want to say this user has these two tokens and they have this amount of both of these tokens and they want to allow spend by a certain user, it's individual calls that you can do it's. Also, a lot of this, which C 20 helper.
00:09:06.650 - 00:09:46.790, Speaker A: There is something here. Yes, exactly. The other part of the library that I had was a lot of these useful commands. For example, let's say so one common thing with the Staking contract, with unisoft V three in the Staking contract is you want to do something like you want to mint an NFT, you want to deposit it and then you want to stake it. It's largely these sorts of commands. And what's useful about these, not that it does anything magical, but it automates away a lot of the really difficult stuff that you have to do, like doing transfers, approving tokens, making sure that you're logged in as the right person, so on and so forth. So that was that.
00:09:46.790 - 00:10:54.174, Speaker A: So it's really those two types of things. And then for the actual plugin, V Three deploy, I actually haven't even opened it up on my what's it called? Plugin. So, yeah, for the plugin itself, the plugin is pretty straightforward. Largely what it does is it adds this task to deploy uniswap. The way that it does it is that it just has this Uniswap V Three deployer class. The way that that works is that you essentially can deploy essentially has what's it called, the APIs and the bytecode for the relevant Uniswap contract, and it deploys them all for you automatically. So I hope I answered that question about the details of the plugin and happy to go deeper in a further question, where was it deployed to? So when we deployed the contract, whenever you run any Hard hat script, you specify the network that you want to deploy it to.
00:10:54.174 - 00:11:22.630, Speaker A: By default, I believe Hard hat deploys to the development network. So it deployed to the development network locally. I could have just as easily passed in a different network parameter and said, put it on, like Robson, or put it elsewhere and it would have deployed there instead. From YouTube. When will the SDK for V Three be updated? That's actually a good question. I've spoken with the Uniswap team about this. I know there are several different efforts.
00:11:22.630 - 00:12:08.526, Speaker A: I think the DevTools are important enough that it's good to have multiple people and multiple teams working on it, but hopefully soon because, I mean, good DevTools are really critical. And then a question from YouTube. Is there a way to use this plugin to automatically deploy the contract in the setup function of my hard hat tests? Yes, absolutely. I also struggled a couple of days attempting to figure this out. The way that we would do it is, I'm guessing in the setup function of your hard hat tests, you have some before each function, or a before helper, which runs. What you'd want to do is you'd want to use this class to deploy the contracts. In a future version of this library, we could update it so that you pass in a provider in addition to an actor.
00:12:08.526 - 00:13:17.754, Speaker A: That way you pass in whatever test provider you're using. If you're using, for example, the Waffle mock provider or something like that, you could pass that in and it would deploy them given that provider and that signer. So, yeah, absolutely is doable, and it's something that should be doable in one to two lines of code question from YouTube. Does Hard Hat provide a boilerplate framework for smart contract projects? I believe that it does. I think that's largely what Hard Hat is, because when you create a smart contract project using Hard Hat, it will create a contract directory for you here. So I believe just by starting up a Hard Hat project, you get that, and then when you add this plugin to the Hard Hat, to your Hard Hat project, you're able to get them in that project itself. I think that's it in terms of questions so far, I figured we just covered a lot of ground in just a couple of minutes, so happy to elaborate on any topics that I did go into or also talk about anything else.
00:13:17.754 - 00:14:01.584, Speaker A: So if you have any questions, feel free to post them in the Zoom chat. If not, I think that's great too, because really, the way I think about DevTools right. DevTools should be invisible, and they should help you. They should almost be, like, superpowers that you have. But ideally, this presentation sort of follows the same ethos as DevTools themselves, which is that ideally, you can set up this tool right away so that you can get back to building something awesome for people. And yeah. Do I have any commentary on the current state of dows? I do, but that's sort of out of scope for this presentation.
00:14:01.584 - 00:14:29.720, Speaker A: So happy to chat about it one on one. Cool. All right, well, I think that is it. So, like I said, I'll be on the discord in a couple of minutes time. And the 30 minutes that we won't spend talking about this devtool, I hope you spend it building something awesome for people. So that is it. Go forth and build great stuff for people.
00:14:30.250 - 00:14:49.406, Speaker B: Thank you. Amazing. Mara, that was to the point and very clear. Really appreciate it. Yes, we'll be in the sponsored for sponsored Discord for Unigrants. That's where you'll be able to find Omar shortly. There's no more question on YouTube either.
00:14:49.406 - 00:14:55.290, Speaker B: Appreciate all your questions, all of you coming and joining us today. And thanks again for the great presentation, Omar.
00:14:55.450 - 00:14:59.740, Speaker A: Absolutely. Thanks so much, everyone. Have a great day. Thanks. You too.
