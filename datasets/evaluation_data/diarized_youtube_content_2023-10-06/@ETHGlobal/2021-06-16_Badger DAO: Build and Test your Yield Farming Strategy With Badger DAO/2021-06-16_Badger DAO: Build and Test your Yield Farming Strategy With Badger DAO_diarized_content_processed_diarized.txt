00:00:04.920 - 00:00:45.784, Speaker A: All right, thanks everyone for joining. We're now live and today, well, at this .1 of our last talk of the day, we're having the chance to have Badger Dow with us, who will be workshop will be hosted by Alex and Will, one of our last talk sorry, yeah. The workshop will be build and Test your yield farming strategy with Badger. So I will let it to Alex to take the floor and introduce themselves. Please ask questions in the chat. Will from the team will be there to take your questions up.
00:00:45.784 - 00:00:57.230, Speaker A: If you don't have time to address them here, we will be converting the conversation to the Discord channel with the sponsors and we'll be able to follow up there.
00:00:58.000 - 00:01:40.632, Speaker B: Awesome, thank you very much. And I'm Alex, the entrepreneur. We also have William We're from Badger Dao, and if you're not familiar, Badger Dow is an ethereum based protocol with the goal of bringing bitcoin to DeFi, giving it utility, in this case, yield. Over the last six to seven months, we built a bunch of products, the most important one being Set Vaults, which is a tool that basically allows you to simply deposit your tokenized bitcoin, be it WBTC or mBTC, et cetera, and earn yield on it. Since launch, Badger Dow has amassed over $130,000,000 in treasury and over $80 million in revenue. And currently it has over a TVL of over $600 million. Needless to say, it's doing pretty well.
00:01:40.632 - 00:02:25.172, Speaker B: And I'm actually happy to say that I used to be on the other side of the equation, watching the videos and participating in hackathons. That's actually how I met Badger, specifically through one of their bounties. And so I'm kind of here paying it forward and hopefully helping you build something really cool. Today, we're looking at building a yield farming strategy from start to finish. We're going to build it, test it and deploy it. And we're going to do that by using a tool that we've built. If you're watching any of the resource, whether on Discord or YouTube, you'll have a link to the GitHub source code that has not only the source code that you can use, which is called the brownie mix, but there's also going to be an example, which is the WBTC strategy.
00:02:25.172 - 00:03:06.852, Speaker B: What we're going to do, actually, if you follow along, you'll have the opportunity not only to win prizes for Badger and we'll talk about them very briefly, but you will also be eligible to win any other prizes from other sponsors, such as Aave, Uniswap and even Chainlink. Because fundamentally, building a yield farming strategy is the act of using the money Legos to make your asset productive. And as such, it could be a great challenge to make all of these DFI Legos work together. And it's also going to be a great opportunity for you to stack these potential sponsor prizes. On our end, we're going to have a few prizes. I'm going to start sharing my screen. And our biggest prize is going to be for $10,000.
00:03:06.852 - 00:03:53.764, Speaker B: Specifically it's going to be for the top three strategies built with the mix that I'm about to show you. The first prize will win $5,000, the second one 3000, and the third one will win $2,000. If instead you want to just improvise and build something else on Benjardao, we also have an open prize, which means that any valid submission that is related to our source code is going to win this pool prize. Without further ado, I'm going to get started and again I'm going to have to cut some corners. But that said, all of this source code with the badger strategy mix you should have access to and it's also documented. There's also a full tutorial video that shows you how to set it up, how to test it, how to use it. And there's also going to be an example project that I'm going to be going through.
00:03:53.764 - 00:04:22.568, Speaker B: The way you're going to get started is again you go on badger finance and you can open the badger strategy mix v one and you can click the green button for use this template. I'm going to call it WBTC ave demo. And you can then click create repository. At that point you're going to receive a git URL that allows you to clone the repository. So you can just do that. And in my case I actually already done it. But I'll show you, you can just type git clone and then paste the URL.
00:04:22.568 - 00:04:54.104, Speaker B: And at that point you're going to have access to the monorepo. So for the sake of time, I'm actually going to skip over that and I'm going to get started. Basically you're going to need to set up this code and let's look very quickly at the monorepo. There's going to be free files that you have to edit. There's a bunch of stuff that may be intimidating, but fundamentally you only have to change free files. There's a file called the config init file, which as you can see, allows you to specify a few variables. In our case we'll want to set this up for the tokens that we're going to be using.
00:04:54.104 - 00:05:34.448, Speaker B: The want will be WBTC, the LP component will be the a token from ave, and the reward token will be staked ave. So we're going to change that in a second. Then we're going to need to set up what is called the strategy resolver, which is basically a tool that allows you to specify the different setup or the different state between specific contracts. This is probably the most complicated part and I'll try to delve very deep. But fundamentally this is the only file you have to change for the entire testing suite to work. And then obviously if you want to write a yield farming strategy, you need to write your contract in solidity. And in this case, the file is going to be called mystrategy solve.
00:05:34.448 - 00:06:32.488, Speaker B: Very briefly, in terms of architecture, we're going to have, again, these three tokens. Want token, the one that gets deposited in the strategy, the LP component, the one that represents the fact that we deposited somewhere else to make our asset work. And then the reward, the token that we're trying to farm so that we can accrue more want. In terms of functions, we have a few view functions here the getName and get version, just vanity functions. Then we have the balance of pool which you need to set up so that you can determine how many tokens are currently invested. Then you're going to have to change the deposit function that given a specific amount of want, will invest the token and then you're going to have to write the withdraw all which is the function that allows you to divest all of the assets from the strategy. This is typically used for migrations and then the other function will be the withdraw sum which basically consists of liquidating some of the assets that are invested I e.
00:06:32.488 - 00:07:13.652, Speaker B: The LP token so that you can liquidate them to want so that a normal person can withdraw. Basically an external account can withdraw. The last two functions are tend, which in our case is going to be very basic and then harvest, which for the sake of time I may or may not cover. But suffice to say that the harvest is going to be the core of the function where we're going to get our average rewards. We're going to uniswap them into WBTC and if you have the time you could also add a chain link price feed to ensure that we don't get front run when we do the uniswap swap. So there's a lot of potential for multiple money Legos if you want to do that. Well, without further ado, let me show you how to get started.
00:07:13.652 - 00:07:50.908, Speaker B: You're going to first of all need to install a couple of dependencies. There's this file called EMV example, you want to go on etherscan infura and you want to basically substitute these and then you want to rename the file from EMV. You want to rename it from EMV to example to EMV. In my case, I've already done it for the sake of time. You can see my keys if you want that's okay. And fundamentally that's the setup in terms of installation, you need to install your dependencies with NPMI so that we can have the JavaScript dependencies installed. And then the second type of dependencies that you need to install are related to Python.
00:07:50.908 - 00:08:54.608, Speaker B: If you use a virtual environment you could install it by typing pip install virtual EMV and then you could activate it by typing virtual EMV VMV which basically declares a new, let me see, virtual EMV VNV which basically declares a new virtual environment and then we can activate it by typing sourcevnv binactivate. This step is optional and it's typically done when you have multiple repositories with different requirements because otherwise your computer will start going nuts. So we're going to now install the requirements from our requirement file by typing pip free, install R requirements TXT and notice that some people may only need to use pip without pip free. That depends on the type of version you have and how you installed python locally. This is all we need to do for installation. The last piece of setup is here in the config. As I said, we need to change the want to WBTC.
00:08:54.608 - 00:09:31.552, Speaker B: So what I'm going to do is I'm going to literally go on etherscan and that's how you will do it. Normally you will just search for what WBTC address is. So let's type WBTC. We're going to get the address and hopefully we can get the checksum address. But that's okay, we'll type it here, then let's rename it here and then we'll get the LP component which is going to be the Ave invested WBTC which is called Awbtc. And you need to pick the second one because the first one is from V one. So you want to use Ave V two, that's the one we're going to be using.
00:09:31.552 - 00:10:30.464, Speaker B: Let's get this address here and then we're going to get the reward token which is going to be called SDK Ave which is the staked ave token which is the one that you can farm currently with liquidity mining incentives on mainnet. So I'm going to copy this address, paste it here, let me rename this to Awbtc and then I'll call this one SDK Ave. So the beauty of this setup is that now, due to us changing these variables, these variables are going to be injected automatically in our contract up here in the initializer, because we use upgradable contracts and you can see them here in the want config. Which means that as long as you just customize these variables you can go in the terminal and you can type brownie console to enter an interactive environment. Basically a simulation. A simulated console that forks mainnet and it allows you to interact with the various smart contracts apparently made a typo brownie console. There we go.
00:10:30.464 - 00:11:27.412, Speaker B: And the contracts are going to be compiled. Obviously our strategy does very little now, but we can still try it out so that you know what you're going to get as you continue working with this. And now you can actually deploy all the contracts and store them in a local variable by doing deployed equals to run deploy. And what's going to happen is that the deploy script, which I'll show you very briefly, is going to run with the settings we just made and it's going to deploy what is called a controller and a vault, which are basically smart contracts we need to use in order to make deposits and check that the deposit go through. And it's also going to deploy your strategy, which is the contract that you're going to write. It's also going to go on uniswap and swap some of I think five ether to WBTC so that you can actually play around with the different tools they're already set up for you. You can interact with them by just typing deployed and you see that you have all of this stuff.
00:11:27.412 - 00:12:16.630, Speaker B: So now if I want to check how much funds I have, I can type deployed want balance of a zero because that's going to be the first address which by convention we use as the deployer. And you can see that I actually have some WBTC in there, which means that I can actually already interact with the contract. So just to give you another example, I could make a deposit in the contract by first of all approving it. So I'll need to do deployed want approve and I'm going to approving the deployed vault for let's say 100 satoshi and by default that will be sent to the account zero. So I don't have to specify it. Let me see, I guess I do. So I'll just type from a zero.
00:12:16.630 - 00:13:05.908, Speaker B: There we go. So now I approve the token. At this point I can make a deposit by typing deployed vault deposit open parentheses, 100 from account zero. So a zero. And now I've deposited my 100 satoshi into the vault and I can then invest them into the strategy by typing deployed vault earn, which is going to be run again from a zero, which for the sake of demo purposes also has multisig permission. Basically it has owner permissions. So at this point you basically could continue interact with your contracts for the sake of time.
00:13:05.908 - 00:13:44.972, Speaker B: I'm going to stop here and I'm going to continue writing the strategy. As I said in this strategy, you're going to be investing WBTC on Ave with the goal of farming the rewards and hopefully we have the time to do that as well. I'm going to get started by first of all, customizing the name. Let's just call it WBTC strategy. WBTC ave farm strat. Let's check the balance of pool. In our case, the balance of pool will be the amount of tokens that we deposited in Ave, which is represented by a tokens, right? So in our case we called a tokens the LP component.
00:13:44.972 - 00:14:20.796, Speaker B: So what I'll do is I'll type IERC 20 upgradable of LP component, which means that I'm typecasting the address into the ERC 20. I'm going to check the balance of this address so that's the amount of tokens that we have invested. Let me make sure it's correct. There we go. So now we have the balance of pool and that's because when we deposit, which I'm going to go and write next, that's where we're going to invest in Ave. So for the sake of time, what you will actually want to do. And by the way, there's an ave section, so you can check that out.
00:14:20.796 - 00:14:54.920, Speaker B: But you would have to figure out how the Lenny Pool works. You. Would have to get the Abi et cetera, et cetera for the purpose of time. I basically already set up these interfaces here in the interfaces ave folder so that we can immediately use them. So you can see that I have a folder called Interfaces. I have this green file called Lending Pool ilendingpool Sol, which means that I can use it by importing it in the solidity smart contract. So I'm going to go up here import interfaces.
00:14:54.920 - 00:15:28.292, Speaker B: There we go. Which means that we can now use the lending pool. If you're not familiar with how it works, you will search for the deposit method, and basically, you will deposit the asset WBTC for the specified amount. On behalf of our contract without a referral code because we don't have one. So let's do that. I'm going to go in deposit, I'll type I lending pool off lending pool, which is a variable. We still have to define we have to find the address for it.
00:15:28.292 - 00:16:08.016, Speaker B: And then I'll type dot deposit and the deposit is going to be done for the want for the specific amount we have received up here and again we're going to do it on behalf of this address, of this smart contract without any referral code. So we don't know what lending pool is. We can actually find it on the main documentation for Ave. I'm going to scroll up a little bit. You'll find a lending pool here. This is the address. And I guess I'll just open it and then copy this, which is not going to be checksummed, so we'll get an error message, but I'll address it.
00:16:08.016 - 00:16:37.784, Speaker B: In a second here we'll add an address public Constant LP or sorry, Lending Pool. It's equal to this address. And this is a great time to try to compile our contract because it will actually break because that address is not checksummed. You can compile your contract by typing brownie. Compile and I do believe we're going to get a warning. There you go. And Brownie is kind enough to give us the checksum version so we can just replace it.
00:16:37.784 - 00:16:54.012, Speaker B: There we go. And now we can try to compile again. I do believe it will compile. We haven't done anything crazy. We just made a deposit in the Ave pool. So congratulations. If you followed along, your WBTC is actually earning two basis point APY now plus 1.2
00:16:54.012 - 00:17:36.440, Speaker B: APY in staking rewards. I'm seeing that we are very short for time. So I'm going to try to show you the withdrawal and the withdraw all and then I'll just give you an intuition for the rest of the code. As you can see, it does take a little bit of time in terms of withdrawing all. We will just want to withdraw from the lending pool so we can type ilending pool of lendingpool withdraw and specifically we're going to withdraw one for the amount. That is the balance of pool which we already wrote. Two, we're going to send the tokens to this address and in terms of withdraw sum due to quirkiness of this code we have to avoid withdrawing too much because otherwise Ave will revert.
00:17:36.440 - 00:18:31.544, Speaker B: So we can check that by doing if amount is greater than balance of pool then we're going to set amount to be equal to balance of pool and then we're going to withdraw here which we can do by typing basically the same code. The island in pool withdraw but instead of balance of pool we're going to withdraw underscore amount. There we go. So now we have a way to withdraw and the last couple of methods will be harvest and tend. For the sake of time I'm going to stop here and I'll show you what the last file you would have to customize is which is the strategy resolver. So the strategy resolver basically makes it so that all of the tests that we have down here we have about 15 to 20 tests in these various files you can check. Some of them are examples that show if the configuration is set up, other actually check for permissions.
00:18:31.544 - 00:19:33.136, Speaker B: And if you check the harvest flow test you'll see that it's calling a method called set deposit. So instead of doing the normal deposit on the vault we have this function that basically will take a snapshot of all balances and all of the contract state before a deposit and after so that we can do a diff to check what the state is. And the way to make that work is by using these resolvers. So we will start by scrolling here at the bottom line 62 you'll see the function called get strategy destinations which allow us to register contracts that we want to check for. I'm going to uncomment this and set the a token in this case which we set to the strategy LP component. And basically that means that we're going to be able to track how the a token works. And then if you scroll up you'll see that you have these confirm harvest and then you have these hooks that all receive the before, the after and the params which means that you receive a snapshot before and as snapshot after.
00:19:33.136 - 00:20:32.288, Speaker B: And the way a snapshot works is that it allows you to fetch again the state and the balances of contracts. So what we can do is we can assert that after balances of want, which is the token we already defined in the contract called a token, needs to be less than before the balances of want for a token. And I know this is a little dense, but fundamentally by writing this you are adding a check that after a withdrawal, after a withdrawal in any test we run we're going to check that the balance of want in a token is less than the balance before. And that's because if you check Ave whenever you invest in ave the tokens go to the A token contract, which means that when you withdraw, you expect the A token balance to go down. So that's what we just did. Let's see if I can give another example. Let's do the example for confirm harvest.
00:20:32.288 - 00:21:24.928, Speaker B: Harvest is the act of reaping the rewards, in this case claiming the staked ave and swapping it to WBTC so that we increase the value of the vault. So if you check here this commented code, you will uncomment it and you would expect this to be true because what this code is saying is that before running harvest, you will expect the strategy performance fee strategies to be greater than zero. And that will be you. Yeah, we expect that you're going to earn a little bit from your strategy. And as such, if that's true, then we expect that the after balance, the balance after the transaction for the strategist address of the want token needs to be greater than the balance before because after a harvest you have earned a little bit of WBTC. So that's the check you would have to make. And you can see that there's basically two types of logics in the resolvers.
00:21:24.928 - 00:22:12.068, Speaker B: There's the after get for name of contract, name of view methods that allows you to get the state of a contract at the time. And then the other thing is the balances. So after balances of the name of the token and the name of the address. So that allows you to run all of those tests. And it makes it so that if you just type brownie test, all of those tests that we already wrote, as long as you finalize this file will basically verify that all of the code works properly. Which means that instead of having to go and write your own setup from scratch, you can actually just write these free files. That said, I see that we have only five minutes, so if we have any questions, we'll take them now.
00:22:12.068 - 00:22:54.176, Speaker B: Something I want to remind everyone is that we started by looking at the Badger Finance Badger strategy Gmix V one. So this is the template you can use. Again, we have $5,000 for the first prize, $3,000 for the second, and $2,000 for the third one. And if you're interested in learning more and basically using all of these Lego pieces and putting them to work, you can go in the monorepo, you can check the video introduction that goes through what I just showed you in even finer detail. It shows you how to interact with the console, how to run the test, how to run the resolvers. It's over 19 minutes. And additionally, there's also an example project, which is the finalized version of what I just showed you here in the workshop that goes through the entirety of it.
00:22:54.176 - 00:23:45.170, Speaker B: So for 2 seconds, I'll show you how the My strategy will end up looking. It will actually end up also swapping the staked ave on uniswap v three and you can see it here with the exact input single and then it will swap from Ave to WEF to WBTC again through uniswap v three so that you will earn those rewards. So in conclusion, basically if you want to try this bounty, you not only have a chance to work and build a strategy that is potentially highly profitable on mainnet, but you can also interact with all these money Legos such as uniswap chainlink and Ave which by the way all have prizes at this hackathon. Potentially stacking wins as well. Do we have any questions?
00:23:46.420 - 00:23:50.740, Speaker C: No questions. If you've got a few more things to add, you can go for it for the next few minutes.
00:23:50.890 - 00:24:44.496, Speaker B: Amazing. Yeah. So at this point I guess I would highly recommend that you check the mystrategy sol on the demo example to see how these whopping is done and I guess I'll just give three alpha. So the free alpha is that if you copy literally this code, this strategy will earn about 1.2% APY which you will say it's not worth using right? Because there are other alternatives. However, if you take this same strategy and you add leveraged farming which means that you borrow and you deposit from Ave and then you farm the rewards, this same strategy can actually earn from six to 8% APY which will make it one of the most highly profitable strategies on main net for WBTC. So if that's something that interests you, you can probably win the if global at least our prize for badger dow the global hackathon.
00:24:44.496 - 00:25:42.084, Speaker B: And not only that, you could also adapt that by using a similar strategy on compound and there's also another protocol called inverse finance that is a fork of compound that you could also build a similar strategy in. That said, we also will reward submissions on polygon. And not only that, but we're going to do an office hours and we have a calendar link to the one on one sessions if you're interested in that. So make sure to follow up with us at the sponsor badger Discord. We're going to have a calendar link where you can schedule a one on one call with me for anything related to being stuck with writing your strats. You can see here the discord and we're also going to do an office hours on Friday where we cover any stumbling block for people that are writing yield farming strategies. With that said, thank you very much for your time and we're good to go.
00:25:42.282 - 00:25:51.700, Speaker A: Thank you Alex. Thank you Will, that was great. Super informative. Thanks everyone for joining and we'll see you on discord.
00:25:53.040 - 00:25:54.568, Speaker B: Awesome. Have a great one buddy.
00:25:54.664 - 00:26:05.050, Speaker C: Thanks for coming and yeah, don't hesitate to reach out on Discord. We're friendly, lots of great community members and team members there to help you out along the way. So don't hesitate to reach out and look forward to.
