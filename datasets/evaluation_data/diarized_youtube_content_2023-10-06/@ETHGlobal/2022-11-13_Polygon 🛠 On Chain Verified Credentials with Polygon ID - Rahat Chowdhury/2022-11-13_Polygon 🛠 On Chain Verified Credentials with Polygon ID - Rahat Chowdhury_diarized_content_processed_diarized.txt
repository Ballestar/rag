00:00:06.170 - 00:00:30.258, Speaker A: How are you guys doing today? Good. That was not excited at, like, whatsoever. How are you guys doing today? All right, a little bit better? All right, I can work with that. So thank you all for coming to my workshop. We're going to be talking about on chain verified credentials with Polygon ID. A little bit about me. Hi, I'm Rahat.
00:00:30.258 - 00:00:50.910, Speaker A: I'm the lead developer, relations engineer over at Polygon. Previously been front end engineer, solidity engineer. I've done some anonymous work for various NFT rugs. I never said that out loud. Indie hacker, Web Three enthusiast, done some failed startups in the past. So I can tell you everything that went wrong. I cannot tell you how to succeed.
00:00:50.910 - 00:01:19.062, Speaker A: A few places you can find me on Twitter, LinkedIn, GitHub, et cetera. But right now, we're going to play a game. This image is a claim. The claim is that I am a pixelated punk. Can you verify that these two images are the same? Yes or no? Yes. Am I a pixelated punk? That's not the answer I was looking for.
00:01:19.196 - 00:01:19.638, Speaker B: Yes.
00:01:19.724 - 00:01:29.766, Speaker A: Okay, cool. So congratulations. You just participated in an IRL version of polygon ID. What the hell was that?
00:01:29.788 - 00:01:30.118, Speaker B: Right?
00:01:30.204 - 00:02:26.342, Speaker A: What does that actually mean? Before we get into that, a little bit of an introduction onto what Polygon ID actually is. So it's a blockchain native identity system with programmable privacy that empowers people, enables creation of trusted interactions with Web Three services. I just read a definition for you. So that doesn't actually explain anything to you, right? But what it does is it provides you a way of having universal identity that you can take with you throughout your Web Three journey, right? You verify something at some point from some type of issuer. An issuer could be some government facility, a DMV issuing you a license, someone giving you some Credential, saying that you graduated from some college and you as a person are carry around that credential. And at some point, someone needs to verify that this Credential exists.
00:02:26.406 - 00:02:26.922, Speaker B: Right?
00:02:27.056 - 00:02:54.302, Speaker A: So that's kind of like the flow that I want you to remember as we go through this. So this is called the Triangle of Trust. So in this case, the case that I showed you before here with the game that we played, the triangle of a trust exists this way. There's an issuer called Pixel Portraits. Shout out to pixel portraits. If you want a NFT of yourself like that, they do this. Pixel portraits.
00:02:54.302 - 00:02:59.922, Speaker A: Issued me an NFT. It is an image of my likeness as a pixelated punk.
00:02:59.986 - 00:03:00.502, Speaker B: Right?
00:03:00.636 - 00:03:14.410, Speaker A: The ID holder is me. I am holding this NFT, and I asked all of you to compare this ID, this NFT, to myself and let me know if you think it actually is me or not.
00:03:14.480 - 00:03:15.146, Speaker B: Right?
00:03:15.328 - 00:04:05.020, Speaker A: So the way that this is done through Polygon ID is you have your issuer that issuer issues some sort of claim can be, like I said, it can be some type of date of birth Credential. It can be something like a diploma. It can be. Are you the owner of X item or whatever it is that issuer gives you that credential, and you never have to verify that you actually have that Credential ever again because now you have different verifiers who just look at that Credential and have some sort of trust with that issuer, saying, okay, I know this issuer. If this issuer says that this is the actual thing, I believe it. And that is done through ACK proof. So let's talk about what exactly we're going to be building for today.
00:04:05.020 - 00:04:36.930, Speaker A: So many social media platforms require you to be 13 years or older to use them. Instagram, I think Twitter requires that. I don't know, I don't know how it's enforced or if it is enforced. But what we're going to do is we're going to leverage polygon ID to issue a soul bound NFT based on a specific age Credential. So we're going to issue ourselves a claim. So we're not going to use some third party claim, we're not going to verify our age or anything. We're just going to issue it to ourselves.
00:04:36.930 - 00:05:17.726, Speaker A: And that claim is going to contain our date of birth. We're going to create a smart contract that mints a soul bount NFT as long as our age is over 13. And there's going to be a front end where anyone with a polygon ID wallet can claim this NFT. So all this is contingent upon you folks downloading the Polygon ID wallet app which is available on the App Store as well as Google Play Store. There will be resources and links to download all of that when you start hacking yourselves, but demo and code time. So the first thing I wanted to show you was this polygon ID platform. So I mentioned that we're going to be issuing the claims to ourselves.
00:05:17.726 - 00:05:45.386, Speaker A: So we're not going to go through some third party issuer and have them check our ID or do anything. We're just going to do it ourselves just for the sake of this specific workshop. So this platform here, again, links will be sent out in discord. I will also tweet them out. And this platform here is on a testnet right now. So what you can do once you've gone onto the platform is create a schema. So I'm just going to create a sample schema here.
00:05:45.386 - 00:06:15.846, Speaker A: We're going to call it Mi 13 or older. And the attribute name we'll say is a KYC age Credential. Name it whatever you want. And there are specific data types that are supported right now through these issuing claims. You can have a boolean yes or no. You can have a date. So in this case we're going to be using a date or you can have a number.
00:06:15.846 - 00:06:48.766, Speaker A: So these are like different things you can think about when you're trying to issue specific claims. So we're just going to use the date because I'm going to be looking at a birthday. So if you want to put in a description, this will be birth date or whatever. For each of these claims, you can add an expiration date if you want to. I'm not going to add one, so I'm going to uncheck this. But now you can either save your schema or save and offer the claim. So we're going to go ahead and save and offer the claim.
00:06:48.766 - 00:07:22.074, Speaker A: So this claim has now been created. Now inside of this attribute for my KYC age credential, I can select a date. Not going to use my real birthday, but let's say I was born. I need to be at least 13, right? We'll just say 1990, February 7. Okay, I'm not going to put in an expiration date. So this claim is just going to exist forever. Going to hit generate claim offer and this claim is going to be generated.
00:07:22.074 - 00:07:58.890, Speaker A: And now we have this link. Copy this link, head over to it, and you'll see that you received a claim offer from Rahat. Rahat is me. I am the person who issued this claim, right? So now you would download your polygon ID wallet app. You would scan this QR code, and then within your polygon ID app, you're going to have a specific Credential that says you are this specific age, right? So this is again a testnet version of you issuing yourself a claim to test out your polygon DApps.
00:07:59.550 - 00:08:00.154, Speaker B: Cool.
00:08:00.272 - 00:08:17.920, Speaker A: So now that's the first part. This is a claim. So this is kind of like the same thing as pixel portraits, giving me an NFT of my punk, right, rather than a punk. And now I'm getting a QR code with a claim that says I am however old I am.
00:08:18.690 - 00:08:19.342, Speaker B: Cool.
00:08:19.476 - 00:08:45.158, Speaker A: So now let's look at some smart contracts. So all of these contracts are going to be shared and available for you to go through afterwards. So I'll drop them in the discord as well as on Twitter. So you'll be able to take a look at these. But to get this set up to actually start using polygon ID with your smart contracts, there's a couple of things you need to do. You're going to have a couple interfaces, libraries, and verifiers. You don't have to write any of this code.
00:08:45.158 - 00:09:32.360, Speaker A: You can simply copy and paste from the repositories that are going to be shared with you. But just like a quick thing, if you just go through these, you'll see that these are what's actually powering the ZK proofs and Verifiers that are going to be looking at your Credential and comparing them within the DAP. All of these again are boilerplate code that you can just copy and paste. Where we're going to actually focus on and create our own code is going to be in this ERC, 721 Verifier. So you'll see from line eight through ten that I imported all of those libraries eventually. What I'm hoping to do maybe later on is create like an NPM package so you can just install and import those rather than copy and pasting them. But as we're iterating and building, that's what you got to do for now.
00:09:32.360 - 00:10:14.366, Speaker A: So for this NFT drop, I have imported a couple of things from open zeppelin. First is going to be the ERC 721 Uri storage. Just to make it easy to set the Uri, I am importing counters for the ID of the NFT itself, strings, which is a really cool utility that I'm going to use to convert numbers to strings, which I'll show you in a bit base 64, which is going to be helpful for actually creating on chain NFTs. So everything that we do here is going to be completely on chain. No storage will be used off chain. So let's take a look at the contract itself. It's an ERC.
00:10:14.366 - 00:10:53.600, Speaker A: 721 verifier. You can call it whatever you want, but it inherits everything from the ERC 721 Uri storage as well as the ZKP verifier. There's a couple of variables here. This is really just keeping track of the addresses that have already minted and making sure that people only mint once. I'm using strings which I imported from open zeppelin for unsigned integers, which basically gives all of my unsigned integers the power to become strings counters, which will be for my token IDs. The constructor is just going to deploy the ERC 721. But now we get into the cool part.
00:10:53.600 - 00:11:29.494, Speaker A: Before proof submit, this is just some boilerplate code. But what before proof submit is going to do is going to check that the challenge input of the proof is equal to the message sender. So we want to make sure the person who is actually trying to generate this proof that is trying to perform this action is the person who owns this specific proof. So that's what this is taken care of after proof submit is where the actual magic happens. We first check to make sure that this proof has not been submitted before. They've only done it once. And then inside of this if statement, we actually execute the token mint.
00:11:29.494 - 00:11:55.474, Speaker A: So I'm just incrementing the token Mint right away, the token ID right away. The token ID from counter generally starts at zero. I just like starting at one. So I increment it. I get the current token ID and then I call Safe Mint with message sender as well as the new item ID. And then I set the token Uri using the item ID. And this get token Uri function that I'm going to show you in a bit here.
00:11:55.474 - 00:12:26.366, Speaker A: Next part. This is what makes this token a sol token. This before token transfer is going to override the ERC 721 before token transfer and prevent you from ever actually being able to transfer this token. Because your age is your own age and not someone else's. Do not verify your age for someone else, that is a frowned upon action. Two more functions here, generating the SVG for the token as well as getting the actual token Uri. So I'll just go through this real quick.
00:12:26.366 - 00:13:04.422, Speaker A: For generating the SVG, we just have this large SVG code that is going to be encoded and returned as a string and converted to a data image URL. All it is is just like a black square that says you are over 18, I mean over 13. And I'm using the base 64 encode to encode all of that together. Finally, the actual get Token Uri, which is going to take your metadata. So this is the metadata that would appear on your NFT. So right now I'm just giving it a name, description and the image. The name is just going to be 13.
00:13:04.422 - 00:13:25.170, Speaker A: Check. I'm sorry, I'm really bad at naming things. And the actual Token ID. So this is why I brought in the strings package. It gives you this nice little two string utility description verified Credential of age over 13. And then the image which is just going to be this generate SVG for token which returns a string.
00:13:25.990 - 00:13:26.786, Speaker B: Cool.
00:13:26.968 - 00:13:38.446, Speaker A: So this part here is nothing specific to Polygon ID. This is simply for Minting, an onchain soul bound NFT. Nothing special going on there.
00:13:38.568 - 00:13:39.286, Speaker B: Cool.
00:13:39.468 - 00:14:07.866, Speaker A: So now we've got this ERC, 721 kind of written off for us. There's two scripts in here that are going to be super, super important. First of all, deploying your contract, making sure you deploy it. Nothing special here. I'm just taking my contract, deploying it onto Polygon. The next part is going to be this set request script over here. So this is another thing that you'll be able to copy and paste.
00:14:07.866 - 00:14:59.338, Speaker A: Most of this is boilerplate code, but there's a couple of key things that you can change depending on your use case. So the first thing is going to be the address where your contract was actually deployed. So this is my address that I deployed earlier and the actual query that you want to do and you want to check for. So the query that I want to check for here is to make sure that the person who supplies their date of birth, that this date of birth is less than or before January 1, 2009. I think I did the math correctly. That should make you 13, but if it's not, just pretend it is. And you can take a look at this link here, which will show you the ZK query language, which is going to help you actually set up this query.
00:14:59.338 - 00:15:24.754, Speaker A: But this operator here with the number two, I believe it means less than. So it's going to check if your date of birth is less than this. So you have your issuer that gave you that Credential. This query is what's going to check that Credential and make sure that you're 13 or older. So we've got that so you run both of those scripts.
00:15:24.802 - 00:15:25.110, Speaker B: Great.
00:15:25.180 - 00:15:37.900, Speaker A: Everything is now on the blockchain. Let's take a look at a front end that actually implements this. Have a little code sandbox here.
00:15:43.330 - 00:15:44.080, Speaker B: Cool.
00:15:44.530 - 00:16:27.952, Speaker A: Wi Fi. All right, so this is a very basic react application that I forked from my friend Steph, who did a version of this in Bogota. But here what we're going to do is claim our Silbound token on Polygon Mumbai. All you have to do is make sure you have your Polygon ID wallet that you issued yourself a claim that has your date of birth. Then you scan this. So rather than me taking out my phone and doing this here and you not being able to see it, I'm going to show you a video of me doing this earlier. This is like, okay, come on, WiFi.
00:16:28.016 - 00:16:28.400, Speaker B: Great.
00:16:28.490 - 00:16:42.744, Speaker A: So this is my polygon ID wallet. I've opened it up. I already have my claims. I scan the QR code. It generates a proof request. So I hit continue. It's going through creating the cryptographic proof, and it wants to connect to a wallet.
00:16:42.744 - 00:17:20.552, Speaker A: So I'm going to connect it to my MetaMask wallet. And through MetaMask, I am just going to make sure that I connect to the actual website. Once I'm connected to the actual website, it's going to fully generate the proof to make and do that check. After it does that check, the last thing it needs to do is actually mint the NFT. So we're going to go back to MetaMask, which will just pop up and now actually approve the transaction to mint the NFT. So I hit go ahead and confirm that transaction to Mint. And once that has been minted, pay some gas confirm and it'll finish up the process here.
00:17:20.552 - 00:17:41.888, Speaker A: So you'll see over here on my polygon scan link, about 7 hours ago, I successfully minted this NFT. It was a success. And this is the NFT on Openc right now. So on Openc testnets, you can check out 13. Check number one. Verify 13 or older. You cannot transfer this to anyone else.
00:17:41.888 - 00:17:48.384, Speaker A: This is only available in the wallet that this was minted in. But now what do I do with this?
00:17:48.422 - 00:17:49.056, Speaker B: Right?
00:17:49.238 - 00:18:26.270, Speaker A: I have this specific NFT now with a proof that I am 13 years of age or older. Great. It's wonderful. So now I can do really cool things with it. Token gated access to social apps built on Lens. You had the whole problem that I mentioned before with Instagram, with Twitter. Do you want to keep sending them your data birth over and over again on every single platform that know on you're sharing your data across all of these platforms at times if they need to do some deeper verification, maybe you're asked for an ID.
00:18:26.270 - 00:18:53.988, Speaker A: What is the need to go into all of that and share with them that data using this specific NFT? They don't need to know your date of birth. They know that this was issued by Polygon ID through an issuer that they trust. In this case, it was just us. But if it was done through an issuer they trust, then they know that they don't need access to your information. They know that you own this NFT. You get access to the platform. You never have to share your actual age with social media platforms ever again.
00:18:53.988 - 00:19:23.728, Speaker A: Just a verification of the fact that you are old enough. So you're only sharing information that they need to know and nothing more than that. And you own your data and you're not actually going forward and sharing all of it. So I wanted to make sure you have some additional resources. This is a new thing, a new concept to kind of like learn. These will also be put into the discord. So first, definitely check out Steph's original Polygon ID workshop from she's here.
00:19:23.728 - 00:20:01.452, Speaker A: And you can definitely dive a little bit deeper into that as well. There are two GitHub repos from Steph and one of our teammates, Manny. Both of those go into using this with ERC 20 tokens as well as another example with NFTs. Manny's GitHub also lists some potential error messages, common things that you might run into while you're going through and building all of this. So definitely take a look at that. And the last thing will be the Polygon ID docs and tutorials that you definitely want to go through. So while going through this, I remember I forgot to actually go over one thing.
00:20:01.452 - 00:20:23.720, Speaker A: So we're going to go back to the front end, just so you're aware of what that one thing is. Very vital thing for you to actually do this. So let's go back.
00:20:30.870 - 00:20:32.130, Speaker B: Where'S arc.
00:20:34.950 - 00:21:23.218, Speaker A: Okay, so how did I actually make this QR code work? I never told you that part. So, in this react application, we're just using this QR code generator to generate a proof request, which is just going to be a JSON object with a bunch of information. A bunch of it, again, is going to be boilerplate code. Once you go to this link over here, it'll tell you exactly what you need to fill out. Some of it is going to be information from the claim that you issued. So you have to make sure you have that in there properly, as well as the actual deployed contract address, which I added up here and use as a variable down here. But all of this information needs to be put into your QR code.
00:21:23.218 - 00:22:11.242, Speaker A: So you take this JSON, put it into your QR code, and that's how this is generated. You scan that with your Polygon ID wallet. It reads all of this information, including the contract address, as well as the type of credential that it needs to verify. And that's what's going to kick off the whole process for doing the NFT Mint. So all of that is going to be available on this link over here on the Polygon ID GitHub which will go through the query language on how to create this specific query throughout the weekend. Myself and Steph will also be here so we'll be able to help you with any further questions that you may have as well. But again, these are some of the resources.
00:22:11.242 - 00:22:54.890, Speaker A: I will send them in the discord after this so that you have them and you don't have to take a picture and retype it or whatever. I'll also send these slides. Recording of this will also be available. If you did enjoy this workshop, please let us know. We're at zero X polygon devs. I'm also at Rahat codes and there's a couple of minutes left for questions anyone has. Yes, I mean, ultimately the security of your wallet is up to you.
00:22:54.890 - 00:24:00.672, Speaker A: So this does not solve for that specific problem. There are cool things in the works like account abstraction and things like that that'll hopefully help with things like that. So that might be a good way to combine Polygon ID with like an account abstraction project. So right now this is all on testnet. On mainnet there is an implementation with the Polygon dow and through the Polygon dow there's verification for age credentials and things like that so that is possible. So as we roll out and put this into mainnet we'll be able to give you more information on that different age. So in this specific case I created claims myself, just like to do the test.
00:24:00.672 - 00:24:29.304, Speaker A: But the claims would have to be coming from trusted issuers, right? So whoever is doing the verification has to trust this issuer. So if you're trying to go on to a social media platform, they might have specific issuers that they work with. So they might say get yourself verified through this. And if they say that you're good, you're good, right? So that kind of like falls into.
00:24:29.342 - 00:24:40.538, Speaker B: That triangle of trusted issuers. Yeah.
00:24:40.704 - 00:25:12.260, Speaker A: So a lot of them will have to be centralized just because of the nature of what they're verifying. Like if they're verifying your passport ID for proof of personhood or verification of date of birth, that all exists on centralized servers. So it has to be from a centralized kind of like source of truth. But what we're doing here is taking that verification and allowing you to kind of control where it goes and only share the information with specific platforms that need it.
00:25:16.070 - 00:25:16.980, Speaker C: Other than.
00:25:20.710 - 00:25:42.990, Speaker A: I would. So the Polygon ID wallet is really just for the holding your claims, but the actual transactions and everything that happens would happen in any wallet you choose. So in the demo I showed, it went to my MetaMask wallet. So that side of things, the actual transactions will be with whatever wallet you have. The Polygon ID wallet is really for holding your claims.
00:25:46.130 - 00:25:54.000, Speaker B: Cool question here is future state plan for this.
00:25:56.770 - 00:26:10.950, Speaker D: Claim. For example, that when you walk up and let's say whatever country and your date then they would check those two claims.
00:26:12.890 - 00:26:16.198, Speaker A: Yeah, something like that would definitely be a really good use case.
00:26:16.284 - 00:26:16.920, Speaker B: Yeah.
00:26:19.210 - 00:26:31.530, Speaker C: Talks about an alliance of trusted issuers such that, say, I wanted to trust a collection and maybe I trust the alliance.
00:26:35.010 - 00:26:54.210, Speaker A: So that it allows decentralization yeah, I don't know the specifics around that, but I think that's a very good thing to be working on. I don't know the roadmap for how Verifiers will work in the future.
00:26:54.280 - 00:26:58.110, Speaker B: Yeah cool.
00:26:58.280 - 00:27:11.400, Speaker A: Any other questions? No, they just need to trust that the issuer will do their job correctly.
00:27:13.260 - 00:27:24.840, Speaker D: How much is considered with other identity framework? Is there a possibility for someone to have an identity?
00:27:31.310 - 00:28:04.580, Speaker A: Mean, the example I showed here was like doing some on chain verification with that NFT but you could bring in something like ENS like this is a person verified? To have some ENS credential or whatever and bring that as like a claim so that as we kind of build out the issuer side of things things these are different use cases you could potentially bring in. Cool well, thank you all for coming out today we'll be around for any further questions.
