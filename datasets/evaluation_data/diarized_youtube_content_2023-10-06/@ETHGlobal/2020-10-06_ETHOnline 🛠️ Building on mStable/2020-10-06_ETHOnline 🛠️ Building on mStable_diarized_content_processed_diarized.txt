00:00:37.250 - 00:00:40.582, Speaker A: Getting a slight feedback from things.
00:00:40.636 - 00:00:41.750, Speaker B: Yours, Alex.
00:00:47.290 - 00:00:56.910, Speaker C: All right, we're up and I'll open the room.
00:00:57.060 - 00:00:57.422, Speaker A: Great.
00:00:57.476 - 00:00:59.054, Speaker B: And we'll just wait still a little bit.
00:00:59.092 - 00:01:04.830, Speaker C: Usually people join either YouTube or the event right at the last minute.
00:01:23.850 - 00:01:30.550, Speaker A: Awesome. So, yeah, maybe we'll give it one or two more minutes for people to join.
00:01:31.370 - 00:01:51.550, Speaker B: Cool screen, Alex.
00:02:00.770 - 00:02:26.120, Speaker A: Great. So we will just get the presentation started and I'll put some notes in the chat about where people can leave questions and stuff. Thanks everyone, for joining. We've got the team from Mstable, Alex and James, here to tell you about building on Mstable. And with that, I'll let Alex take it away.
00:02:27.930 - 00:03:05.170, Speaker B: I'm actually going to start. I'm James, I'm co founder and lead at Mstable. And thanks for everyone for joining this session. We're incredibly excited to be here. ETH global events. I've been as an attendee over many years, but this is the first time that Mstable, as a project, as a protocol, has been able to support an event like this. We all know that everyone kind of wanted to be in DevCon at the moment, but this is the next best thing, I suppose.
00:03:05.170 - 00:04:12.370, Speaker B: But yeah, we're really thrilled to support ETH Global and this ETH Online event and would be really thrilled to see people build on Mstable. And we've obviously created this apprise pool for people who do just that. So today Alex is going to be speaking predominantly and he'll be speaking about how exactly you can build on Mstable and the kind of cool things that you can do with the V One protocol that we've built so far. For me, I'm just going to give you a really quick overview of what the project is. We thought it could be helpful to some people given that Mstable is a little new on the block. There's been quite a few new projects that have come out recently, so we forgive you if you haven't kind of dug your teeth into Mstable specifically. So I'm going to give a quick overview of what it is, why we built it, and the kind of market problems that we're seeking to solve.
00:04:12.370 - 00:05:10.326, Speaker B: And then Alex is going to dig into the technicals in more detail. So what is Mstable like? Most of DeFi Mstable is centered around pooling assets. And what we do is we unite stable coins and they're lending and swapping into one standard. So Mstable creates a liquidity pool for same peg assets. And the reason why we started doing this is because it's become clear over the last few years that assets and this is kind of the megabit that we've been making, is that assets are migrating on chain. So recently this year, the amount of stablecoins on ethereum have increased 95% to over 12 billion. And the value transfer on ethereum has surpassed that of bitcoin in July.
00:05:10.326 - 00:06:00.662, Speaker B: So these are amazing statistics. I think we've all seen also recently, a lot of wrap bitcoin migrating to ethereum as well. This is a really major theme, and it's created obviously, stablecoins. How M stable defines stablecoins is obviously on one level, something that is stable in reference to purchasing power, at least in the short term. And the second thing is that something that is stable in reference to a Peg. So we define stablecoins as both something like a US dollar, but also something like Bitcoin if it's stable to that peg. And Mstable creates a liquidity pool for those stablecoins, and we can then build a whole bunch of infrastructure around that liquidity pool.
00:06:00.662 - 00:06:39.810, Speaker B: And then other people can also build on top of that, which Alex will be getting into. Why are we doing this? Well, there are three major problems that we were solving. One is fragmentation. This explosion of assets that I spoke about in the previous slide has also led to a huge fragmentation of samepeg assets. Many issuers, many projects are creating US dollar equivalents and that fragments liquidity. It's really bad for user experience. So we solve that by creating a swap product to create zero slippage, hyper efficient swaps between samepeg assets.
00:06:39.810 - 00:07:34.050, Speaker B: So designing a liquidity pool specifically for swapping those samepeg assets, we also relatively uniquely have an LP token that is also liquidity provider token that is also a stable coin in its own right. And in our case, that's called MUSD. When you deposit into the MUSD pool, you get an MUSD stablecoin. It's a stablecoin that's worth a dollar, and it's redeemable one to one for the US dollar stablecoins in that pool. The same will happen for mBTC. So Mstable simultaneously solves this fragmentation problem by enabling really efficient trading between samepeg assets and also creating a unifying asset for that. We also try and make the capital more efficient.
00:07:34.050 - 00:08:19.990, Speaker B: And our Smart contracts programmatically lend out all assets that are deposited onto integrated lending platforms. Currently, RB and compound simultaneously, all of the swaps are earning fees. So if you hold MUSD, you can access the MUSD native savings rate. And that savings rate is generally outsized for three reasons. One, because it's always because all the capital is being lent out. Two, because of the swap fees, and three, because we've leveraged it in the sense that if you don't put your MUSD into the savings account, then you don't get the savings rate. So people who do get a leveraged savings account, so we've been able to create a better yield.
00:08:19.990 - 00:09:06.574, Speaker B: And the third thing is risk and insurance. If you hold one stable coin that has a whole heap of concentrated risk, mstable diversifies risk amongst a whole bunch of issuers and also seeks to insure against it with our token meta. That hasn't been implemented yet, but it will be proposed to the community at some point in the future. So that's kind of a high level on the problems and what we're doing, if we just zoom out a little bit. This is the product line that we've been working on. So we released Earn, which is a yield farming product. We were one of the first yield farming initiatives back in June.
00:09:06.574 - 00:09:50.340, Speaker B: I think meta is emitted to people who contribute to Mstable asset liquidity. We're moving to create a more efficient AMM and also reduce the gas later in the year, adding mBTC and also wanting to create a composable save. So tokenizing that savings account in an interesting and novel way in terms of meta, we're really pushing decentralized governance and ultimately recolateralization is something we'll propose later. So that's a really big kind of high level on Mstable. Again, really excited to see what people come up with, and I'll pass it on to Alex now to dive deeper on the technical side.
00:09:51.590 - 00:09:55.320, Speaker C: Cheers. James, can you hear me all right? Yeah.
00:09:57.050 - 00:09:57.800, Speaker B: Perfect.
00:09:58.890 - 00:11:04.550, Speaker C: Cool. So I'm just going to whizz through Mstable's core functionality why you might want to build on Mstable and then give you some docs and then run through a demo on making something simple and getting it running. So, as Jim said, we have our M assets represent a basket of underlying stable coins. So the first of which MUSD you deposit, USDC, die USDT or USDC, and you receive a corresponding amount of back. So that's obviously one to one, and it relies on these BAssets being under their maximum weight. Similar with swapping, any of the underlying can be swapped one to one with a small fee, providing the asset that's swapped in does not exceed its maximum weight. Redemption opposite of minting.
00:11:04.550 - 00:12:29.922, Speaker C: You choose which basset you would like to withdraw from the system, and then to withdraw that basset, you burn the corresponding amount of MUSD. So when I say basset, I'm referring to a basket asset, which is USDC Dai Tether or USDC. The fourth sort of core function here is save, so that's when you deposit MUSD into the savings contract to earn the native yield, you can withdraw that at any time to realize the gains. So the interest is actually scraped from the MUSD contract on the deposit into save and then distributed to the existing savers to the benefit of the existing savers. To realize that increase in savings balance, there needs to be a subsequent deposit following your deposit. Okay, so why would you build on Mstable? Mstable provides a robust base layer collateral assets, with the goal being to act as a sort of safe base layer for the DeFi infrastructure that's being built there's. Simplified native yield generation.
00:12:29.922 - 00:13:40.830, Speaker C: So just by depositing MUSD into a no risk savings contract, you can get that native yield. It provides a unique source of arbitrage for swapping. So it's really the only place where the one to one swaps are implemented, and it abstracts and consolidates the sort of USD stablecoin layer. So theoretically, this could be expanded to sort of capitalize and consolidate a lot of the market. So what is in scope for hacking? Basically, anything that builds on top of or extends the Mstable protocol or sort of at the very least utilizes M stable assets to their potential. Yeah, so what might that look like? A no loss lottery, for example, like pull together where the interest from the deposits are collected and then awarded in a sort of lottery fashion. A derivative using Mstable save or MUSD for example, like the Chai token.
00:13:40.830 - 00:14:30.990, Speaker C: I'm using well known examples here, but these are things that can be accomplished utilizing Mint and swap as part of a trading bot. It's a simple one. A derivative that utilizes M assets is the settlement layer. So by this I mean like capitalizing on the fragmentation solution that MUSD is built to provide. Like using MUSD as a safe settlement layer and performing actions on top of it. Generally speaking, utilizing MUSD or MTA either utilizing their value or providing utility to them. For example, using MUSD to collateralize synthetic instruments.
00:14:30.990 - 00:15:43.970, Speaker C: What's not in the scope is creating new official M assets, for example like M Euro, but by all means go for it and create a rationale. It's just that given that the M asset will be eventually collateralized further by the Meta token, it's more of a governance thing. So there are obviously some other functions that could be built on top of staking and earning, but these sort of address the sort of core functions of the system. I think it's worth mentioning that the core prize is for applications built on top of Mstable like these no loss lotteries for example. But there will be two smaller prizes of 500 MUSD each just for applications that utilize MUSD or MTA in the application. We're excited about that and here's where you get the documentation. So we put a bit of work into the GitBook here and there are some good examples about how to get set up.
00:15:43.970 - 00:16:42.370, Speaker C: And black lists of the testnet apps. So we've got running testnets on Robston and Coban and they've both got like app endpoints and subgraph endpoints and deployed addresses. So yeah, just check it out on the docs and then we've sort of wrapped some of the core stuff into node packages. So the protocol, the contracts are there and I'll show you how to use that in a second. And then we have built a sort of basic stable JS library just to grab and parse the data to use. So this is the main stuff. We've also written a medium post with a bit more meat on the prizes distribution.
00:16:42.370 - 00:17:59.760, Speaker C: I guess that'll be on the East Global website and you can always jump into the discord if you need to chat about anything. So I'm going to run through an example. So what I think would be good to build is a contract that wraps save and allows users to pull together or sort of stake a gift and then collect the interest which would then be distributed to a beneficiary. So this allows us to collect the crowdsource interest through the savings contract and then distribute it. So I'm going to do is just whip up contract. Well, first I'll add the latest node package. So should be version 1.2.1
00:17:59.760 - 00:19:31.950, Speaker C: coming through. And then I can import the interfaces from so I'm just importing the core contracts. Right now we've got the master interface, the savings contract interface and an Mstable helper interface to sort of provide some helper utilities around the core functions. How do I write constructors again? So we want to have a few core functions staking a gift and we will where we will stick the gift and have a track there. We will have a withdraw gift.
00:19:33.250 - 00:19:49.410, Speaker A: Hey Alex, we just got a question on YouTube. Could we increase the size of your this person's on mobile? So it might need a little bit bigger.
00:19:51.190 - 00:19:52.434, Speaker C: See what I can do.
00:19:52.552 - 00:19:53.460, Speaker A: Thank you.
00:19:56.230 - 00:22:05.370, Speaker C: All right, so got three core functions here. Staking gift, withdrawing the gift and collecting the interest. So I'm probably going to need to choose what I'm staking, which is the MUSD tracks. Just put that MBS D save and we'll import the helper here too. Now we've got our variable set up. So staking the gift. What should happen here? We should be transferring from the sender depositing to the sieve and then tracking the gift.
00:22:05.370 - 00:23:19.800, Speaker C: So let it comes up on safety library. So I'm going to transfer the MUSD from sender to the contract and then I will deposit into save. So save deposit savings, then deposit the amount. And this is all it takes to deposit into the savings contract. But actually it'll need approval to send the MESD. So it's sort of a bit risky to have these safe approvals left open all over the place. But I think given that the save contract is trusted, it's okay.
00:23:19.800 - 00:25:13.280, Speaker C: So we've deposited into Save, we now need to track the user stakes and the total stakeholder. It okay. So we are sticking gift and we're tracking the amount. So if a user wanted to then withdraw his gift from the contract, we would want to check that he has balance, reduce the storage and then retrieve from safe. So I'm just going to copy this over Janet Urban, something I made earlier. So withdrawing from Save here, when we call the savings contract redeem, it expects a unit in terms of savings credits. So we can use the helper here to just convert the MUSD amount back into savings credits and then call redeem.
00:25:13.280 - 00:27:04.080, Speaker C: Calling save redeem here will just simply redeem this amount of credits from the caller, which is this contract, and then return MUSD back to this contract. So if the user wants to, if the user wants to withdraw this, we need to send it off. So okay, so we've now built the function to withdraw the user's gift from savings contract. And now to add the gamification and to actually collect this interest from the gifted party, we want to simply check the we want to check how much interest has been generated and credited to this account so we can get the current savings balance by calling get save balance on the helper and passing this address. Then we figure out how much interest has been collected since the deposits were made. So say current balance minus the tool that's been gifted, and then to send this off to the beneficiary, we can convert it into credits and simply transfer it. We need to add the beneficiary first.
00:27:04.080 - 00:28:56.020, Speaker C: So I'm just going to make this an owned contract and then add it. Transfer inner shit. Okay, so what we've quickly whipped up here is a contract that allows people to stake a gift and then credit the interest of that gift to a beneficiary that's been specified when the contract was created. So hopefully this should compile. Okay, so let's just go ahead and deploy this and get it running so we can verify that it is doing what it says it's doing. So I'm just going to jump quickly into Remix and deploy this. So if you don't know what Remix is, it's a pretty nice tool to just quickly get a contract out and deployed without having to, without having to deal with private keys and inferior builder and that sort of stuff.
00:28:56.020 - 00:30:43.930, Speaker C: To deploy this contract, I need the MUSD address, I need the save address, I need the helper address, and I need to specify beneficiary. So as I mentioned earlier, the addresses are all in the gift book here. Got main, net, the Robston, the Covan, so I'm just going to grab the Robston deployment for the savings contract, the helper, and I'm going to specify myself as the beneficiary. So okay, so that contract is hopefully going to deploy and then we should be able to interface with it. So there's actually a really nice tool from Adrian Lee here, east 95, just to quickly get a UI for the Branny ethereum DAP. So all we need for that is to specify the build folder for the contract and then it should host something on local host. So the contract has been deployed here, let's just check it out.
00:30:43.930 - 00:32:28.050, Speaker C: Okay, so it looks like it's gone. Okay, let's have a look at the 95. So I've got access to my pool with Mstable and what I can do is first give the pool with Mstable the permission to spend the assets on my behalf. So I'm going to call the MUSD contract and just give the gifting contract permission to spend my MUSD. So I'll mark the spender here and just give it a few way of allowance and I'll also do that for a second account so that we can see things in action here. It should be approving. Then you should be able to call state gift here once this is approved.
00:32:28.050 - 00:32:38.740, Speaker C: Are there any questions in the chat I can answer in the meantime, while these transactions are processing?
00:32:39.880 - 00:32:44.950, Speaker A: None from YouTube. It looks like we're all good here too.
00:32:46.840 - 00:34:27.900, Speaker C: All good? Well, it looks like those have gone through, so it it's just I think we're not connected here. Here we go. Okay, so this is me sticking like 1,000,000,000,000th of an MUSD to the pool with M stable contract. So as soon as I deposit this, it's going to go into the MUSD contract and collect the interest that's been accruing there and distribute it to the benefit of the existing savers in the save contract. So after I deposit, then the interest will start being credited to the gift with the mercy of the Robson network here.
00:34:28.750 - 00:34:31.980, Speaker A: We've got a question on YouTube if now is a good time.
00:34:32.590 - 00:34:33.718, Speaker C: Sure. Yep.
00:34:33.894 - 00:34:39.200, Speaker A: Do the save M stable implementations on the testnets produce incremental interest?
00:34:40.290 - 00:35:55.558, Speaker C: Yes, they do. Well, as I said, it happens with the interest is distributed every time a deposit is made into save. So if you want to simulate some activity, a good idea might be to do some swaps and to generate some fees and then you would see that interest realized. The next time you deposit, there should be a decent amount being accrued anyway because there's such a large quantity of assets. I think there's like 4 million assets lent out on ave and compound, so it should be accruing a steady amount. I think we'll see here in a second just how much has been accrued. So the first gift was deposited and staked and now I am gifting a second one, at which point the interest will be credited to the benefit of the first staker, basically.
00:35:55.558 - 00:36:09.530, Speaker C: So hopefully when we withdraw the gift at the end here, we'll have some dust that gets credited to the beneficiary. I can actually call that directly.
00:36:22.590 - 00:36:29.850, Speaker A: Another question from YouTube is any way to know where the yield came from? Just curious. From Juan.
00:36:40.200 - 00:37:26.416, Speaker C: I mean, I mean, you could tell off chain. Yeah, sure. You can. You can track the transactions that have happened and see how much has been coming from swap versus basically you would need to find the total and then deduce how much came from swap. And then you would be able to tell how much came from the lending protocols on chain. Yeah, I think it's difficult, but off chain you could definitely find out. Okay, so yeah, we've just withdrawn the interest to the beneficiary here and there was sort of 306 base units of MUSD that were credited.
00:37:26.416 - 00:38:32.730, Speaker C: So we've successfully harvested yield as a gift to a beneficiary, which I think is quite a neat application, although possibly not economically practical on main net. But regardless, the concept is nice. Just to summarize, we came in here, we added the Mstable protocol as package, we imported the core contracts, and then we wrapped the Staking contract and collected the interest generator. So I'll go ahead and put this online on our GitHub and link it on our Medium post as well. Yeah, and then all other information is kind of in the docs, so that's all I wanted to touch on today, but yeah, I'm happy to field some more questions if anyone's got any.
00:38:36.950 - 00:39:27.800, Speaker A: We're good on the YouTube stream, but perhaps we could if any of you in this Zoom call want to post questions, you are free to unmute yourselves and pose them directly to James and Alex. So if you have a question, jump in. Sounds like the presentation really landed. Oh, just one just came in from YouTube. Oh, no, it's a guy saying that he meant off chain, so that's all good. And then someone's saying that they should build an M stable vault. Yes, you should.
00:39:30.430 - 00:39:33.210, Speaker C: You should build a what, sorry, an M stable vault.
00:39:36.190 - 00:39:42.154, Speaker A: Vault. Sorry. Cool.
00:39:42.272 - 00:40:29.174, Speaker B: Someone asked plans to add new protocols. You mean someone's asked other plans to add new protocols. I assume that means lending protocols. And there we have a few more questions in the Zoom chat as well. The answer is yes. And they'll all go through the community, through our recently launched Snapshot page, where you can stake well, you have to stake Meta, and then you can vote with your stake Meta. So there'll be proposals to add new lending platforms at some point.
00:40:29.174 - 00:40:41.120, Speaker B: Currently, we're connected to are they in compound? And yeah. Cool. Thanks for joining, everyone. Awesome.
00:40:43.730 - 00:40:50.686, Speaker A: So where's the best place to reach you guys on the Discord Channel, and then by your git book, I guess.
00:40:50.708 - 00:41:09.240, Speaker C: People could access yeah, we're 24/7 available on our Discord Channel. Just pop in just whatever you want to talk about. It's all good. But yeah, someone will be online in there, and yeah, we're more than happy to field questions. We're also in the ETH Global Discord channel.
00:41:11.530 - 00:41:12.086, Speaker A: Awesome.
00:41:12.188 - 00:41:13.430, Speaker C: Ethereum hackers.
00:41:14.250 - 00:41:17.240, Speaker A: Thank you so much, you guys. Really exciting stuff.
00:41:18.170 - 00:41:21.540, Speaker B: Thanks, guys. Appreciate your time. Thanks.
