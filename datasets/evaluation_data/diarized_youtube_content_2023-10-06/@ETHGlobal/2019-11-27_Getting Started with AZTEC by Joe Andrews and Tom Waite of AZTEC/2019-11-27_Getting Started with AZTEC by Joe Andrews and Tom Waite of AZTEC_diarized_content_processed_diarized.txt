00:01:06.550 - 00:02:01.472, Speaker A: The factor comes to us, but they think they that's cool.
00:02:01.526 - 00:02:30.300, Speaker B: All right, so we're going to get started. So, yeah. So welcome to Aztec developer workshop. We're going to kick off basically just with our Discord server. So if you need any help throughout the weekend, we're going to be available on Discord throughout. So just scan our QR code and head to the channel, post any questions you got there, and we'll be open to help. So if we just start off with what are we doing at this hackathon this weekend? So we've got two bounces, so we've got $1,000 for the best use of Aztec in any DApp.
00:02:30.300 - 00:03:00.716, Speaker B: And then our second prize is for the best use of Aztec in a novel fintech or DeFi application. And to help you realize these goals this weekend. So we got Joe, who's our head of product, and we got myself who's an engineer at So. Cool. So what is Aztec? Just before we get into that, why is privacy important? So Aztec is a privacy solution. And why do we think privacy is important? Well, there's a few different reasons. So first of all, traditional financial assets need privacy, and they operate by default.
00:03:00.716 - 00:03:43.800, Speaker B: We think it's a prerequisite for building some of these assets on chain. And lastly, it allows third parties access to users to control third party access to financial and personal data. So with this in mind, what is Aztec? So, Aztec is an interoperable privacy network running on ethereum. We have a toolbox of different zero knowledge proofs that allow you to build privacy to your DApps with custom logic. We are extremely gas efficient to do a standard private send transaction. So for me to transfer private value from person A to person B, currently costs about 800,000 gas using Aztec. And ERP, one one eight is going to be merged in the next Istanbul hard fork, and that will bring it down to about 200,000 gas.
00:03:43.800 - 00:03:49.936, Speaker B: Another really important thing to consider when you're using dermalogic proofs and looking at these privacy technologies is how long they.
00:03:49.958 - 00:03:51.596, Speaker A: Take to construct a proof.
00:03:51.788 - 00:04:29.868, Speaker B: So with Aztec, you can do it in milliseconds, even on an Android phone browser, which is quite important. So if we just move on. So the Aztec toolkit, so Aztec is you can think of it as a family of zero knowledge proofs. Each type of proof allows to do a different type of business logic. So you've got things like send swap, you can chain swap, confidential assets, you can calculate interest rates on zero knowledge assets, so you can stream interest in zero knowledge. And we've got a demonstration that Joe might talk through later on about something called our loan DAP, which does exactly this. You can mint directly these zero knowledge assets, burn them, and you can construct inequalities over them.
00:04:29.868 - 00:04:58.310, Speaker B: So you can say that zero knowledge asset A is greater than zero knowledge asset B, for example, things like that, that's our toolkit. So what can you build with Aztec? There's various different things. And these are just some ideas to maybe get you started. So security token, platforms, loans, bonds. You can make all these confidential using Nasdaq. There's been previous hackathons where people have done quite well integrating Aztec solutions into these type of assets. You can build decentralized private payment services.
00:04:58.310 - 00:05:18.316, Speaker B: And there's another example there combining Aztec with some sort of side chain to give you private. We've got DeFi applications, but we're more excited really, about what you guys are going to build and the creativity that you bring to Aztec this weekend. Cool. So with that, I think Joe's going to take over and give you some demos of our kits. Yeah.
00:05:18.338 - 00:06:32.876, Speaker A: So we'll do two things. Just a quick demo what we built with Aztec to kind of give you like a kitchen sink of what's possible. And then we have a kind of starter kit for everyone to kind of download and clone that uses our developer extension that will help you kind of get started and be like an entry point for your coding to get. So without further ado. So this is so this is what we call our loan DAP. It's really just a kitchen sink example of what you can build with adtech. It uses the send proof, the swap proof, the dividend proof, and one of the range proofs.
00:06:32.876 - 00:07:20.636, Speaker A: So all the code is on our GitHub, viewing how to use contracts, and also some of the front end proof construction code. So I'll talk you through this. The first thing we're going to do, the purpose of this staff is to create private loans. We're going to create a loan where the notional is private. So create 100,000 notional of die with interest rate 22% at the moment. And we'll have a very short loan, so it matures in this workshop. So, as you can see here, we can create the loan very fast.
00:07:20.636 - 00:07:51.512, Speaker A: In that moment, we use mint route to mint asset with one note worth. On the right hand side. We are the lender, so we can see the encrypted balance of the loan. We can decrypt the asset note and reveal the hidden value. On the left hand side, we're a potential borrower. We can't currently see the encrypted value, but we can see the public variables which describe the loan metrics. We could also make some of these private if we wanted to.
00:07:51.512 - 00:08:57.616, Speaker A: But in this example, just the notion was private. So the next step is to view one of the loans that is table here. So a lender can decide to submit a view request to one of these loans. Yes, and as that happens, the loan will move into approved loans. And this borrower now decrypts the hidden value, the notion of 100,000. The next step is to then settle the loan. So in this instance, we're going to settle the loan by swapping 100,0000 knowledge die for 100,000 units of the loan.
00:08:57.616 - 00:09:40.960, Speaker A: Notion of the loan delay to be traded if you wanted to. Much like secondary market loan. Today when we press settle here we're first going to give ourselves some fake settlement currency which app and then we're going to swap that currency in zero knowledge form for the loan original. This is constructing approved in the browser. And here you'll see that loan is just synthetic. And the really cool thing about asset is it means that you can now stream interest of that loan in real time. So as you can see, both of these now have a ticker which is the interest that's currently accrued or the interest that's currently owed.
00:09:40.960 - 00:10:36.772, Speaker A: So the borrower here can now decide to withdraw currently accrued interest in real time using our dividend proof. So we can see here that they're using combination proofs. Slight quirk facility mean that you have to use whole seconds which means the interest sometimes doesn't work. So the amount has to change but you can withdraw a certain amount of dice in real time from the loan. Another interesting thing about this is if the lender decides to withdraw the entire loan amount like so as interest accrues, the loan will now go into risk going into default. There's now not enough collateral stored in the loan. All of this is happening with zero knowledge to make the loan be in good standing.
00:10:36.772 - 00:11:28.410, Speaker A: And we can use a series of proofs to actually mark the loan as default and potentially move collateral from the lender. However smart contract to the borrower, we call this program default. So instead of in the old world you'd have to go to court, save the loans in default and then fight for that platform to be transferred. In the smart contract world you can actually prove on chain zero knowledge that there's not enough platform in the account and any collateral associated. This could then be released by the smart contract to the borrower. So we can do that here validated the loan on default if there was any collateral smart contract could have loosen. This is really just a kind of a kitchen sink example what you can do.
00:11:28.410 - 00:13:35.920, Speaker A: We're not expecting kind of this much functionality this weekend, but it's a good place to kind of get some ideas of what's possible as you combine different sets of proofs. The great thing about the toolkit is you can layer the proofs with as many layers as you want to get the functionality that you need. The next step I think is to quit these and get everyone to download the East Global stuff. So if you head to our GitHub there is a repo that would be great on the sidekick. Ganache starter kit is also really useful if you're just doing smart contract work, know the equivalents on it also has our development country. So when you get this running you should get a page a little bit like this takes to a GitHub page gives you some of the details. Before we get started, it's probably worth me just running through why we have this developer extension and kind of its point.
00:13:35.920 - 00:14:24.324, Speaker A: So under the hood, asset represents value as nodes in the UTXO model. So it's much like bitcoin. You have a balance, say 100 units. Score it in a note and when you send it, you end up putting that note into new notes. This means that it becomes quite hard to keep track of these notes and they're associated viewing keys that allow you to decrypt the values. This would be solvable if certain EIPS have been passed by MetaMask, which I haven't currently. So we've built a developer extension while we're waiting for those EIPS to be passed that keep track of all the user notes they're associated with viewing keys and make it much easier for developers to interact with aptex.
00:14:24.324 - 00:15:17.148, Speaker A: So all the extension does is store two keys, a public key and a private key. It doesn't own the assets, it just allows you to decrypt the value of an asset note. The note is still owned by MetaMask or whatever web group provider you decide to use. And the extension injects onto the page antech object on the window, which exposes a set of APIs. This is just a subset here for the demo, but this documentation here lists all of them here. So let's just talk through all this stuff. When you enable Astec, the first thing to do is create the keys, add a password, and then you'll be asked to link those keys to MetaMask.
00:15:17.148 - 00:17:28.324, Speaker A: You'll choose a different wallet here, figure out how to enable the different provider. So this is just a VIP seven one two signature to link your MetaMask account to the key that we're storing and send it to the local sorry, to one fashion. There we go. It once you've done that, every time a page requests access to a particular asset, the extension will pop up. Because we're very much an algorithm right now, UI is going to approve before our main net launch, it will pop up saying what the domain is and what assets it's requesting access to. So once you approve that's, it restart. What we're going to do here, though, is we're going to use the asset extension to deposit some ERC, 20 tokens into asset note form and then we're going to send some of those tokens around to another MetaMask account.
00:17:28.324 - 00:19:47.780, Speaker A: And what we're going to see is that the extension will enable a web page in both cases to have real time access to a user's account. So it's just injecting into the page for any given affect user account through the window object started. Well, I will keep trying to do it, but has everyone got to this page and got a working kind of working web browser? And then the draft package started, didn't work. We'll go to our backup plan, which is the simple version of this, which is the same demo just done with Puppet. So we also have the Skin Ash datacap, which does exactly the same thing. Always the same as the gate. But instead of the code being run through MetaMask, just run.
00:19:47.780 - 00:20:37.040, Speaker A: I think it's maintenance.
