00:00:06.250 - 00:00:25.280, Speaker A: Welcome everyone. It's great to have you here. So today we have Sam from HyperDAP and he's going to do an introduction into the HyperDAP application. And if you have any questions in the meantime, feel free to pop them in the chat. And Sam, I'll let you take the.
00:00:28.810 - 00:00:40.114, Speaker B: Hi. Thank you. So hi everyone. My name is Sam. I'm the co founder and CTO of HyperDAP. HyperDAP is a platform for instantly creating.
00:00:40.162 - 00:00:44.374, Speaker C: Verifiable front ends for DApps. So what is our vision?
00:00:44.422 - 00:00:55.726, Speaker B: Our vision is that we have seen explosive growth in the decentralized applications market over the past 18 months. Our vision at HyperDAP is to make the process of creating front ends of.
00:00:55.748 - 00:00:58.670, Speaker C: DApps seamless, fast and Verifiable.
00:00:59.810 - 00:01:43.938, Speaker B: So first of all, a little bit about our team. So I'm Sam. I am the technical guide. The CTO of Hyperdaps. So I have eight years of working experience as a full stack developer in the Web Two world and prior funding HyperDAP. I was working at the Unicorn startup in Israel and I jumped into Web Three two years ago when I met Karen at the Chain Link Spring hackathon and where we won the hackathon and we started our journey from there. And then after this first startup, we decided to launch a second project, which is Hyperlap.
00:01:43.938 - 00:01:46.830, Speaker B: And Karen, she has ten years experience.
00:01:46.900 - 00:01:49.706, Speaker C: In product management and data science.
00:01:49.898 - 00:03:14.918, Speaker B: And before she pivoted to Web Three, she was head of the data science at a Web Two fintech startup. So Karen and I, as I told you, we are both like two times founder in Web Three and we've been working together since the beginning of 2021. So what is the program that we discovered in the current Web Three industry is that building front ends for DApps is challenging because developers have to integrate Web Three logic such as wallet connections or smart contract interactions into the front ends. And usually most of the developers that are jumping into Web Three are learning straight away, like solidity and smart contract development. So front ends is kind of like put it on the side and developers have to deal also with complex and fragmented tech stack so from the smart contract to the front end and they have to overcome a steep learning curve in order to understand and use numerous SDKs or libraries. And also Web Three interactions triggered by DApps front ends are nonverifiable, meaning that no one can actually know what function from the smart conte will be triggered when they will interact with a button or an input. So this is our unique insight.
00:03:14.918 - 00:04:18.334, Speaker B: We are living in a Web Three decentralized world and we want that everything will be decentralized. So right now we have Etherscan to verify and audit smart contracts that are public and completely decentralized, but there is no such tool and interface and protocol in order to do that for the front ends. And this is why we built HyperDAP. HyperDAP turns the process of building DApps front ends into a seamless workflow. A key component of HyperDAP is a browser based code editor with the capability of auto generating front ends via code Snippets. With live preview testing and debugging, smart contract interactions and prototyping UIs have never been easier. With a click of a button, the code for generating the front end is deployed to decentralized storage such as IPFS and the web.
00:04:18.334 - 00:04:26.642, Speaker B: Three interactions are then fully transparent and can be verified by anyone in the community. So let me show you a quick.
00:04:26.696 - 00:04:30.660, Speaker C: Demo on how Hyperlapp works.
00:04:31.910 - 00:04:54.140, Speaker B: So this is our dashboard and this is all the previous DApps that I've created with Hyperlapse. So let's create a new one together. So first of all, before creating a DAP, what we usually want is to load a smart contract API. So let's load the Wrap ETH smart contract that is on rebit testnet for this demo.
00:04:55.230 - 00:04:57.162, Speaker C: So let's give it a name and.
00:04:57.216 - 00:05:11.982, Speaker B: Let'S copy paste the contract address. As you can see, the API has been fully loaded with all the functions that are inside. I can also load another smart contract if I want, but let's stick to.
00:05:12.036 - 00:05:13.874, Speaker C: One smart contract for now.
00:05:14.072 - 00:05:31.910, Speaker B: So here I can have access to the smart contract that is the Wrap If and I can have access to all the functions that are inside. So for instance, if I want to first of all display the name of the smart contract.
00:05:33.050 - 00:05:33.974, Speaker C: Here we go.
00:05:34.092 - 00:05:37.350, Speaker B: Name wrap if automatically generated.
00:05:37.870 - 00:05:42.666, Speaker C: Let's remove this prompt. Yeah, great.
00:05:42.848 - 00:05:56.190, Speaker B: So then let's maybe display the total supply, maybe the symbol before and then the total supply.
00:06:01.090 - 00:06:01.840, Speaker C: Great.
00:06:02.450 - 00:06:26.518, Speaker B: So right now we have called only view functions, so it's only display. But what if we want to interact and trigger an action that is a payable one? For instance, deposit, let's say, because we are interacting with the Wrap if smart contract. Let's say that we want to send ether to the smart contract in order to receive Wrap ETH. So with a click of a button.
00:06:26.604 - 00:06:33.514, Speaker C: I can choose the deposit function and.
00:06:33.552 - 00:06:40.220, Speaker B: Then it generates automatically the input and the button. I can also rename the button.
00:06:40.850 - 00:06:51.600, Speaker C: For instance, let's call it Wrap and let's maybe here call it Is. Great.
00:06:52.390 - 00:07:02.978, Speaker B: So let's test it just to see that everything is working correctly. So I hope that you're seeing my MetaMask that is triggering and here I.
00:07:02.984 - 00:07:06.482, Speaker C: Can click on Confirm and that's it.
00:07:06.536 - 00:07:16.546, Speaker B: The transaction has been sent through the blockchain and everything is working correctly. So now that I'm done with my DAP, I can publish it to decentralized storage.
00:07:16.658 - 00:07:18.758, Speaker C: So here we are using IPFS.
00:07:18.934 - 00:07:24.202, Speaker B: So let's call it Wrap if my.
00:07:24.336 - 00:07:52.350, Speaker C: Wrap is contract and let's give it a version and let's click on Deploy, an error occurred. Great. Okay, shouldn't do that. But I can go straight away to the next step. Here we go. Is that working? No. Okay, let's go straight away to another contract.
00:07:52.430 - 00:08:10.074, Speaker B: Okay, so once the code has been deployed to IPFS, you get a unique URL from where your DAP is accessible and can be shared to anyone. So for instance, I can copy paste this address and share it with my.
00:08:10.112 - 00:08:14.698, Speaker C: Users, or I can also embed it.
00:08:14.784 - 00:08:18.890, Speaker B: Into any website through iframe. So for instance.
00:08:20.930 - 00:08:21.790, Speaker C: This is a simple.
00:08:21.860 - 00:08:27.214, Speaker B: HTML page from code sandbox. So any developer should know this website.
00:08:27.332 - 00:08:55.382, Speaker C: And here if I copy paste sorry, take the address and let's copy paste it here. And here we go. No, sorry, it's not this one should be this one's great.
00:08:55.436 - 00:08:56.934, Speaker B: And as you can see, so from.
00:08:56.972 - 00:08:58.840, Speaker C: A simple HTML page.
00:09:00.810 - 00:09:04.526, Speaker B: I can access my dad that I've just built with hyperlapse.
00:09:04.578 - 00:09:06.826, Speaker C: I can also interact with it just.
00:09:06.848 - 00:09:08.662, Speaker B: To see that everything is working correctly.
00:09:08.726 - 00:09:11.658, Speaker C: And that MetaMask is triggering correctly.
00:09:11.834 - 00:09:15.374, Speaker B: The deposit version is triggered, confirm and.
00:09:15.412 - 00:09:18.320, Speaker C: That'S it, everything is working so perfect.
00:09:20.930 - 00:09:26.900, Speaker B: This marks the end of the demo, of course.
00:09:27.510 - 00:09:29.874, Speaker C: So this is something that you should.
00:09:29.992 - 00:10:17.940, Speaker B: Have noticed, but we have multiple code snippets that you can use. The last one that we added is the Oracle one. So actually it's triggering the API from Condex API and I'm displaying directly data from this API. So if you want to target and fetch data from external API, you can do it with Oracle. To know more about Oracle, you can look at our doc that is on our website as well. You can read all the things that are related to the code snippets. If you want to add UI, state for instance or different prompts, everything is in there.
00:10:17.940 - 00:10:40.172, Speaker B: And that's it for our demo. Thank you for listening and I would be happy to answer any question. Okay, so the verification mechanism powered by appalach? Yeah, exactly.
00:10:40.226 - 00:10:43.260, Speaker C: So this is something that I forgot to show.
00:10:43.330 - 00:11:46.624, Speaker B: So let's say that you're sharing the URL or you're embedding the URL into any website. So any user that is visiting your website will be able to click on this link and then they will have access to the underlying business logic that is related to this DAP. So for instance, during the slide deck pitch, I was saying that no one can actually know when the user will click on a button, what function will be triggered. But with our system and with HyperDAP, this is something that you can do now because here I can see that the button is actually triggering the deposit action and the deposit action is triggering the deposit function from the wrap if smart contract. So this is this deposit function. So I will know that I will trigger the deposit function from this smart contract and I can also verify that this smart contract is the correct one.
00:11:46.662 - 00:11:49.040, Speaker C: Which is the wrap east smart contract.
00:11:50.900 - 00:11:58.828, Speaker B: Are there any styling options? So this is something that we are planning on doing and we also added.
00:11:58.844 - 00:12:00.216, Speaker C: It in our map.
00:12:00.348 - 00:12:28.190, Speaker B: But right now we are really focused on the core functionality. So this is something that we are fixing bugs like every day and we are improving our interpreter engine every day. So we will add something for styling options very soon. Um, okay.
00:12:29.920 - 00:12:34.652, Speaker C: Additional to best nipples, it's possible customize more HTML CSS.
00:12:34.796 - 00:13:55.876, Speaker B: Yeah. So this is customizing, we'll add it in the future. So the code generated, the code that we are using here is based on a language that is called Prologue and it is usually used at the university but also for AI and machine learning. So we found this language really useful in order to generate dynamically like front ends based on logic that is defined by Prologue. So the front end itself that is generated by this link is actually hosted on centralized storage. But all the code that is plugged to our interpreter engine, this one is deployed to IPFS to decentralized storage. We thought about adding the functionality as well to deploy the whole front end to IPFS with also this code to IPFS.
00:13:55.876 - 00:15:08.426, Speaker B: So that way we'll be fully decentralized. A tool for forming the abi. So right now, what we are doing for the abi by actually only filling up the contract address, we are fetching the abi if it's verified from Ether scan, but we have and we had in the past, but we removed it, but I think that we'll add it again if that's requested. We have a tool in order to so you copy paste the contract API array and it will generate all of that. Oracle integration is great.
00:15:08.528 - 00:15:11.558, Speaker C: It supports custom API oracle from chainlink.
00:15:11.654 - 00:15:21.550, Speaker B: So right now we are not supporting chainlink, but this is something that we have in mind in order to fetch data from their Oracle.
00:15:24.210 - 00:15:32.340, Speaker C: How can we perform encoding of HyperDAP edest for functions parameters that would require this?
00:15:33.030 - 00:15:35.860, Speaker B: I don't think that I understood this question.
00:15:36.230 - 00:15:36.978, Speaker C: Sorry.
00:15:37.144 - 00:15:46.406, Speaker B: Fidel Merson Gu is inserting an iframe in the main way of integration with.
00:15:46.428 - 00:15:49.526, Speaker C: The rest of the front end or are there other ways to do that?
00:15:49.628 - 00:16:02.586, Speaker B: So right now this is the main way of doing that. Inserting it through an iframe or sharing directly the URL with your users. But if you want to have it embedded into your own website with your.
00:16:02.608 - 00:16:20.330, Speaker C: Own branding, this is something this is the only way to do that right now. Yeah.
00:16:20.400 - 00:16:31.520, Speaker B: So for data retrieval from IPFS, actually we can do a quick demo together. You can use an Oracle to do that. Actually, I think that I have already.
00:16:34.210 - 00:16:42.160, Speaker C: Have something that we can use 1 second.
00:17:05.680 - 00:17:10.312, Speaker B: So this is a quick demo that I've started to do with third web smart contract.
00:17:10.376 - 00:17:13.080, Speaker C: So for instance, here the image.
00:17:13.160 - 00:17:30.760, Speaker B: So if it's shown, because IPFS sometimes is a bit slow, it's coming from IPFS. So here, as you can see, I've declared my Oracle IPFS and this is the gateway to reach out to IPFS.
00:17:30.940 - 00:17:35.910, Speaker C: And then the call is done here.
00:17:40.360 - 00:17:54.324, Speaker B: Get http so here I'm calling IPFS with the pass. IPFS, I'm adding the CID. This is the CID, and then this is the output that should be the IPFS.
00:17:54.372 - 00:17:56.750, Speaker C: So here, as you can see.
00:18:02.080 - 00:18:16.844, Speaker B: The IPFS link. So you can grab data from IPFS directly with an Oracle. I will try to, if that helpful for a lot of people. So I will add something into the doc.
00:18:16.892 - 00:18:17.810, Speaker C: As an example.
00:18:22.830 - 00:18:31.466, Speaker B: The generated code, you can modify it as much as you want. You can look at the doc. For instance, here, for cut snippet, we.
00:18:31.488 - 00:18:37.820, Speaker C: Are generating multiple prompts. Look at this one.
00:18:45.120 - 00:18:54.176, Speaker B: So as you can see here, I'm triggering multiple prompts. But if I'm taking this code and.
00:18:54.198 - 00:18:57.200, Speaker C: I'm copy pasting it here, I can.
00:18:57.270 - 00:18:59.452, Speaker B: Actually merge the prompt.
00:18:59.516 - 00:19:06.340, Speaker C: So for instance, I can take that copy, paste it here and it's working.
00:19:06.410 - 00:19:11.344, Speaker B: The same way and you have less code to deploy.
00:19:11.472 - 00:19:16.792, Speaker C: Can also remove that and that's it. And you can also add whatever text.
00:19:16.846 - 00:19:27.692, Speaker B: You want input into the Show array. So it's just for convenience, for adding code snippets. So I'm generating multiple prompts, one under.
00:19:27.746 - 00:19:30.190, Speaker C: Another, because it's easier to do.
00:19:38.360 - 00:20:33.184, Speaker B: Maybe I missed some question in the chat. So if I haven't answered to one of them, please write it again on the chat, if that's okay. But yeah, I will add the example of IPFS into our doc. Get Http function, can get info from any Http server in the you. So let's look at the doc together. But actually, in order to register an Oracle, you just need to register the name of the Oracle, the permission. So right now we're only supporting read permission and the base URL, the name is completely your choice, it just should be lowercase.
00:20:33.184 - 00:21:14.420, Speaker B: And then this is the base URL of your API. And then once you want to call the Oracle, you just need to reference the name of the Oracle. So here it's condesk, here is the path of the Oracle and then you get the output. So here I'm setting the output into the UI state that is here, that explains everything in order to set UI state into the engine. And then you can work with that, whatever you want. Display data, use the data in order to send requests to a smart contract, et cetera.
00:21:23.530 - 00:21:28.614, Speaker C: Cool. Is it possible?
00:21:28.812 - 00:21:41.898, Speaker B: Par as JSON, so it should be written as JSON and then you can work with the JSON as you want.
00:21:41.984 - 00:21:46.414, Speaker C: So for instance, here when I'm calling.
00:21:46.452 - 00:21:54.058, Speaker B: The Oracle, so as you can see, so the first thing that I'm displaying is the disclaimer.
00:21:54.234 - 00:21:57.674, Speaker C: So let's look at the console.
00:21:57.722 - 00:22:01.998, Speaker B: So as you can see, this is the results that I'm getting from this API.
00:22:02.094 - 00:22:04.706, Speaker C: And here, as you can see, this.
00:22:04.728 - 00:22:32.054, Speaker B: Is all the fields that I'm getting in the object. So the disclaimer, for instance, in order to take the disclaimer, so here I'm getting from my US state, I'm getting the condesk value. And then I'm targeting disclaimer. So, yeah, it's not like JavaScript with a dot with a slash that is working. And then I'm outputting into the disclaimer.
00:22:32.182 - 00:22:34.954, Speaker C: Variable and then I'm displaying it here.
00:22:35.072 - 00:22:50.660, Speaker B: And as you can see, this is exactly what we're getting from the API and I'm doing the same for the others. Actually, if one of your fields is in.
00:22:54.950 - 00:22:56.402, Speaker C: Uppercase sorry.
00:22:56.536 - 00:22:59.042, Speaker B: So you have to wrap it into.
00:22:59.176 - 00:23:02.790, Speaker C: Quotes and everything should work correctly.
00:23:05.530 - 00:23:07.302, Speaker B: Hope it answers to the question.
00:23:07.356 - 00:23:08.310, Speaker C: Tatiana.
00:23:13.150 - 00:23:20.830, Speaker A: Great, thanks Sam, for the workshop. If we do have any more questions, we can follow up over Discord. It's a sponsor.
00:23:22.610 - 00:23:23.630, Speaker C: Yeah, sure.
00:23:23.780 - 00:24:07.594, Speaker B: So I'm completely available on our Discord channel. You can also join our Discord, our Discord server, and all the updates are posted there. I will also make some updates as we talk to the documentation and also to adding more snippets in the future and also customization. I know that this is really important to the community, so we are working really hard on it. So we'll keep in touch. Thank you everyone for joining. I hope that you enjoyed the demo and can't wait to see what we're going to build with Hyperdapp.
00:24:07.594 - 00:24:07.900, Speaker B: Thank you.
