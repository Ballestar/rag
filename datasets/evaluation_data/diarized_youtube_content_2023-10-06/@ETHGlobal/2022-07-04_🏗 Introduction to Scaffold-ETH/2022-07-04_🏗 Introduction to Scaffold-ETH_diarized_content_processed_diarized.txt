00:00:06.330 - 00:00:42.234, Speaker A: If you guys aren't familiar with Scaffold ETH, it's just amazing, awesome open source program or collection of tools. It's kind of like a toolkit that you can use to rapidly deploy Ethereum based DApps real quickly. So it's available on GitHub. So really you can kind of get started real quickly by just forking the code. We're going to go through a demo today and kind of walk through it and show you how you can tinker. But all the instructions are here so you can get started real quickly. Once you get through kind of tinkering around with Scaffold ETH, you can kind of go on there and put in examples from like solidity by example and kind of mess around with it.
00:00:42.234 - 00:01:17.800, Speaker A: And after you've been kind of playing around with it a bit, you can go to Speedrun Ethereum. So the Speedrun Ethereum is kind of these quests that you go on where you learn how to do different things like build an NFT, build a decentralized Staking app, token vendor, dice game. There's all these cool things you can do and eventually you can become part of the build guild, which is this kind of like collection of coders that want to build on the Ethereum ecosystem. So check that out. Everything you need is right here. So if you guys take a picture of this, this will give you the website for GitHub. This will give you speed around Ethereum and you guys can get started.
00:01:17.800 - 00:01:45.306, Speaker A: So we don't have the app up right now, but I use what's called tmux, which is this just a terminal multiplexer. It allows me to have multiple screens up. I've already gone ahead and checked out the code for you guys. So we're just going to kind of get started and get going. Here everything's here. When you first download the repository, you're going to do a yarn install, which is going to basically go through. And it's going to install any dependencies that are required to get you up and running.
00:01:45.306 - 00:02:12.498, Speaker A: So do the yarn install takes about a minute or so to run and you'll be good to go. Then what we can do is we can do what's called a yarn chain. Yarn chain is going to spin up an instance of hard hat. Scaffold ETH uses hard hat. It's going to spin up that you're going to be ready to go. That's all you need. Then in a new window, you're going to come over here and you're going to do a yarn start, which is basically yarn start is going to spin up react.
00:02:12.498 - 00:02:39.914, Speaker A: So the front end that you utilize with Scaffolding is react. That might take a little bit to load. So while that's kind of doing, that what I'm also going to do, and that's going to be the second window that you're always going to keep up. The next one I'm going to show kind of what the data structure of the code looks like. Okay, so you'll see when you first get in here inside the directory. Let me close this out for right now. There's this packages directory.
00:02:39.914 - 00:03:16.374, Speaker A: So inside there we have Hard Hat and we also have React and then we also have subgraphs. So if you want to do a subgraph using the graph, a GraphQL subgraph, you can do that as well. But most of the stuff that you're going to really be messing around with is going to be here in the Hard Hat directory, right? So inside the contracts there's this kind of like bare bones contract that gets deployed and it's kind of like a Hello World contract. We can kind of check it out and see if it spun up, which here it is. So we're up and running. This is going to be out of the box. It's going to have a lot of cool stuff that you don't really have to think about to get started building on ethereum.
00:03:16.374 - 00:03:41.666, Speaker A: One of the cool things is it has what's called a burner wallets, right? So you load up your Scaffold ETH app, everything's in Burner Wallets and you can just grab some funds from the faucet. So it'll pull funds from Hard Hat, pull them into your Burner Wallet, which is like an in browser wallet. You don't need to mess with MetaMask. You don't have to worry about nonces or any of that stuff. You can connect. I don't even have MetaMask installed on this profile. But if you wanted to, you could, you could connect to like Wallet Connect app.
00:03:41.666 - 00:04:15.200, Speaker A: Or if you had made a mask, it would show up here as well. So you can see I've got some funds down the wallet. This app Home, which is basically everything you see here, is like where you would build your app to prototype. So you kind of build the UI into this section. But what's really useful is this debugs contract directory. And this is where it's going to keep track of kind of all the functions that you have available to write in scaffoldeth and how you can interact with them and test with them. It also gives you the address, contract address and it tells you how much value is in there as well.
00:04:15.200 - 00:04:58.620, Speaker A: I might need to reset. I haven't run yarn deploy yet. So the last step is once you get Hard Hat up, you get React up, then you do a yarn deploy. Now what yarn deploy is going to do is it's going to grab the contract that's in the contracts directory and it's going to deploy that onto the blockchain. What it also is going to do is it's going to kind of like grab the abi automatically insert the abi into the front end and it's also going to deploy an instance of the contract so that you can mess with it. And it also reports like how much gas you use. It's really useful and it also publishes a subgraph as well.
00:04:58.620 - 00:05:55.786, Speaker A: So let's take a look at kind of some things you could do. So an example would be like, let's say we've deployed that contract now, now that we've deployed it, we have this kind of like hello world, where there's a contract, there's what's called a purpose, which is just a variable that's being set. And then we have a function that allows us to update that, right? So we could say Ethnyc or something like that, right? And then hit send. And then we just interacted from our burner wallet directly into Scaffold ETH and we're able to see that we updated that variable, right? So it's real basic concept, right? So let's do something a little bit more interesting. So let's define a address variable and we might do something like public, make it a public variable and we'll call it owner. And we'll set an owner variable. We could grab this, sorry, you can copy the address of the contract or you can copy the address of the MetaMask or sorry, the burner wallet.
00:05:55.786 - 00:06:36.650, Speaker A: So we're going to grab that and punch that in here and then save that and then come back and redeploy. So you're kind of doing this thing where you're messing with the contract, deploying your changes, and then once you know that they're successfully deployed, everything gets updated and then you can look back at the UI and see, okay, cool. Now we have a new variable that's called owner, and we have that and it matches this. So let's say we want to do something like maybe we have this existing function that gets set up here. It's called set purpose. And you can see here we have like a require that I've already done earlier. I was doing Gandalf, but we'll just say that you're not the owner if you don't have this particular message.
00:06:36.650 - 00:07:15.878, Speaker A: So one of the first things you learn with solidity is the require statement, right? It's this concept of you basically are checking a function to see that something is set. In this case, we have one called message sender where we're checking to see that who was the message sender for this contract call? Does it match the variable owner? And if not, it's going to say not the owner. So we can set that. Do a deploy oh, did I do something wrong? Thank you. Let's try it again. Yarn deploy. Cool.
00:07:15.878 - 00:08:04.802, Speaker A: But you get the idea we're going through. We're kind of doing some changes here, making some updates to the code. And so now what I can do is I can kind of mess around here and let's open up a new incognito window. Let's go to that local host. And so now we have a new instance of the contract up, or I should say of the DAP up, right? So at this point we can grab some funds into this burner wallet. We can go to the debug contracts again and we can try to update it something like Foo right, hit send and we're going to get an error, not the owner, right? Pretty straightforward. So you get in this kind of like loop where you're just kind of testing the updates that you make to the contract and then you're just kind of validating that, hey, these are the changes that I made and they're working.
00:08:04.802 - 00:08:51.086, Speaker A: But that's not really the proper way to do something like access control for a function. You could also do something like inheritance, so you can actually import another existing set of contracts. So in this case, we can import open Zeppelin contracts, specifically the ownable Sol. And then what we can do is we can make this an ownable contract so it inherited from ownable. And then we can do something like, well, we get rid of this variable here because we don't need that. And instead on the end of this function, we can say only owner, we can deploy that and then make that change. So inheritance is that concept of inheriting everything that's in another contract and making it available in this contract.
00:08:51.086 - 00:09:28.538, Speaker A: Let's see if that deployed. Looks like it did. But what you'll notice is now we have that owner variable, but it doesn't match what's in our burner wallet. So this is kind of one of the first things I had a problem with, with Scaffolds. I didn't understand, like, well, who was deploying it? Well, Hard Hat is deploying the contract, right? So what we actually need to do is update the deploy script to transfer the ownership. So you'll notice that in the DAP here, now we have this transfer ownership function, which is a function that's built into ownable. So what we want to do is then take that variable, or I should say that function, and call it in the deploy.
00:09:28.538 - 00:09:55.238, Speaker A: So when you set up Scaffold, there's a couple different areas. There's this old folder called scripts. Don't go in there because that's the old deploy JS script. Go into this one here that's under deploy. And you'll see that what we're doing here is we're deploying the contract here and we're creating an instance of the contract. And then there's an example of how you would deploy your contract here. So I've actually gone in here and already kind of set it up.
00:09:55.238 - 00:10:32.944, Speaker A: But what we're going to do is, since we already have the contract deployed in this particular instance here, we're going to call that instance of the contract call transfer ownership. But then we need to put the proper address that we want to transfer to. So we'll come back to our DAP, we'll come over here, we'll grab the burner wallet address that we have and oh, sorry. So let's update that, save it and let's redeploy. Cool. And we might need to refresh it. Let's see if it worked.
00:10:32.944 - 00:11:02.984, Speaker A: Looks like it worked. Okay, cool. So now we were able to deploy the contract using Hard Hat, and then we were able to transfer the contract using transfer ownership. So now we're the owner again. But this isn't a very, I guess, interesting contract. It allows us to set the purpose, but we don't want to really just let just the owner of the contract set the purpose. So what we could do instead is we could make this function actually have require a value to make transact with this contract.
00:11:02.984 - 00:11:56.440, Speaker A: So to do that we can go back to our smart contract and instead we can do require statement require that the message value. So this message value and message that sender are these global variables that are available, right? And so what we can do is say message value is equal to, I don't know, a variable that we're going to call price. And then we're going to say add more money or something like that. And then what we can do is come up here, create a price variable. So we'll do UN public price equals, I don't know, one Ether, something like that. And then we'll save that. So now when we deploy that, what it's going to do is it's going to recognize I probably did something wrong again.
00:11:56.440 - 00:12:21.144, Speaker A: What did I do? Oh, thank you. Payable. Yeah, so it does need to be a payable contract. Newbie mistake. All right, let's deploy that again. Boom. Okay, cool.
00:12:21.144 - 00:12:41.088, Speaker A: So it's deployed. I always forget to make it payable, by the way. And we can also get rid of only owner actually too, because we don't want only owner, right? So let's go back because that would be useless. So redeploy again. Okay, so now we have the contract deployed. We've been able to transfer the ownership. But you'll see now the set purpose has this value.
00:12:41.088 - 00:13:18.124, Speaker A: It needs a value, right? So I can set it to whatever I want. So I'll say New York City or something like that. You'll see that? Now we have this price variable and you'll notice that I put ether, but it's actually showing us in way what we need to actually send in the transaction. So if you didn't have that, there's this cool feature of Scaffold ETH where you can just kind of hit this little green button so you can type in what it would be in ETH, hit the green button and it would translate it to you in Way. But since we have it right here, you could just copy and paste it and put it in there. So now we hit send and boom, it works. So now you'll notice that the contract actually has a little bit of value.
00:13:18.124 - 00:13:41.172, Speaker A: So we've deployed the contract and it also has some money in there. But there's a problem. We don't have any way to withdraw the funds. We created this kind of like black hole where we're dumping funds in there. So the next thing you would do is you probably would set up a way to either withdraw the funds or some kind of like if you're really fancy. You do like a multi signature. But we're not going to do that right now.
00:13:41.172 - 00:14:30.704, Speaker A: So instead we can create another function that allows us to withdraw that. So I've already actually already wrote it here so we can just kind of grab it out of here. So what we're doing here is we're creating a new function and it's called withdraw and it's a public function, but this time we're making it access controlled so only the owner can call it. And we're setting a variable or a boolean named Success. And then we're doing a transfer to the message sender. We're doing a call actually with a value of the address of this contract's balance, right? So basically we're just like a rug pool. We're going to grab all the funds out of there so we can save that deploy.
00:14:30.704 - 00:14:56.456, Speaker A: So you can see this kind of cool. Like we're building an app, right, real easily just by making our changes, deploying those and then kind of testing those. Really cool. So now we can come in here, set the purpose to foo send, we've done it. And then now we have this cool withdraw function. So let's go back to our kind of like incognito one here and let's see if we can withdraw. Boom.
00:14:56.456 - 00:15:41.432, Speaker A: So ownable caller is not the owner. So we've successfully set up this kind of bank where the contract is storing value. We've set up access control so that we can withdraw the funds. We might want to do something else kind of cool, like maybe just with a simple line we could actually adjust the price. So you can see here we could take that price variable that we're setting, multiply it by 101 and divide it by 100. So basically just increasing the price by 1%, save that boom, deploy again. And then now what we'll notice is if it deployed successfully, which it did, if we change this thing to like NYC and then hit send, we get value added to the contract.
00:15:41.432 - 00:16:45.932, Speaker A: And what happens to this price variable? Well, it added 1%. So every time that someone's going to come in here and set the function, if we just try to send 10,000, it's going to say add more money because we didn't actually put in the new amount that it's costing to do that. So we can add that send boom. So now it let us do it. So now the price function is in there, we have the contracts getting value, we're able to withdraw the contract, we're able to do a lot of cool things. We're kind of like building on our DAP. So what could we do next? So I guess what I want to show is maybe the idea of building a token, right? So the first thing usually you would do is if you're going to keep track of a token inside of a contract, you're going to basically create like a mapping, right? So you're going to create a mapping that keeps track of addresses and then an unsigned integer that has kind of like a balance for that contract.
00:16:45.932 - 00:17:46.084, Speaker A: So first we'll create a mapping, map those addresses to the UN, and then we'll create a total supply. And there's a couple of ways you can do this, but total supply is this concept of, like, how many tokens are we going to issue in our contract? What I like to do is actually deploy the supply inside of the constructor, and I pass it through in the deploy arguments. So what I always like to do is come in here, accept an unsigned integer. In this case, we can do 256 and we can do the total, something like that. And then what we can do is total supply is equal to the total that's passed in the deployer of the contract. And then what we can do is we can also decide who's going to get all of the balance for the initial balance, right? So we can call balances and then we can call the address. Oh, sorry, it's actually this.
00:17:46.084 - 00:18:35.504, Speaker A: And we're going to grab that address that we have in the burner. We're going to put that there and we're going to set that to the total supply. So this is kind of like the owner or the deployer of the contract. And then if we want to actually deploy this, it's going to fail right now because it needs this variable passed over in the deployment script. So how do you do that? Well, there's this option here called ARGs where you could pass, like, an argument. So in this case, we could say like, all right, let's do, I don't know, 21,000 or something like that, save it, and then let's try to deploy it. So this deploy script is going to pass that value over and then it should update the balances for the burner account with the proper balance.
00:18:35.504 - 00:18:53.144, Speaker A: So let's see if that worked. We can grab our address. Actually, I think it's already on my clipboard. Paste it in here. Boom. So this address has 21,000 tokens. So what would be the next thing you'd want to do with that? You'd want to have some way to transact the tokens, send them around.
00:18:53.144 - 00:19:49.844, Speaker A: So we're going to actually build in that functionality so we can come down here. We can do like, a transfer function. I've actually already written it as well, so let's just kind of block it out and I can kind of walk you guys through it. So this transfer function, all we're going to do is take in an address of where we want to send our new token that we've created, and then we're going to take in an amount that we want to transfer to that person. So in this case, it's a public contract and we're just going to return like a boolean to see whether it was successful or not. The first thing you have to do is check with a require statement to say, hey, does this person even have enough to send, right? Do they have enough balance in their actual account to actually send those tokens over? Then it's two simple lines. It's one to update the message that sender to extract their balance and then it's another one just to update of who you're sending that balance to.
00:19:49.844 - 00:20:23.824, Speaker A: So if we deploy this, save it and deploy and now we'll have a new function in here to be able to transfer those around. So let's see if it works deployed successfully. And now we got this transfer function. So now I know that this contract here or this burner wallet here has 21,000. Maybe I want to send some to my other little blocky dude here. So let's come in here, let's do a transfer and let's just send him, I don't know, 777 and then send boom. So now we can check our balance again and boom.
00:20:23.824 - 00:21:08.308, Speaker A: You can see that we've been able to extract. So basically we've created an ERC 20 token so you see how easy it is to tinker around Scaffold ETH. It's really cool, really fun. Yeah. So after you get kind of going and you're messing around with Scaffold ETH again, the next thing I would probably say is check out the code, mess around with it, learn about Solidity. If you guys don't know Solidity if you don't know Solidity well, or you're just kind of getting started, go to Solidity by example and just kind of like start tinking around and grab stuff from Solidity by example, put it into Scaffold ETH, see how it works, right? And start building around and toying around with that. Once you're done with that, then go to Speedrun Ethereum and come on here.
00:21:08.308 - 00:22:04.608, Speaker A: Sign up for basically you can connect your wallet here, you can start doing these quests and then eventually you'll be invited to join the Build Guild, right, and go from there and yeah, that's pretty much it. That's kind of my demo. I do want to see if you guys have any questions, anything you guys wanted to kind of know about Scaffold? No. Yes, there is a TypeScript vision. Actually that is a really good point. So if you do go on Scaffold's GitHub, there's a bunch of different versions that you can get here. So if you want to search for like NFT or if you do TypeScript right here, there's an you can oh, they've actually moved it's right here.
00:22:04.608 - 00:22:45.772, Speaker A: So yeah, we do have a TypeScript version. If you do get any issues with Scaffold, it's another thing you can do. You can always reset the contract as well so that will kind of like set the contract back to kind of a reset state. There's also another cool command that sometimes I use, like if you don't want to constantly be bounced around, you can do Yarn watch where you can actually have it just kind of constantly updating for and checking for changes. I'm not sure why it's not working right now. It might not like some kind of change I made to the deploy contract or something like that. So I'm not sure why it's not working.
00:22:45.772 - 00:23:39.136, Speaker A: But yeah, so really easy to get going. Just to give you an example of if you went to Branch, like NFT, you could do like I don't know, let's see NFT. So there's like an NFT auction option, right, where you can just check out this repository and then it's got this kind of like ERC 721 build and it will help you build like an ERC 721 marketplace. I think it's ERC 721 and it gives you kind of like a starting point for your contract and you can kind of mint these little artwork that is in here and create NFTs. Yeah, it's ERC 721. So there's a lot of cool stuff you can do. Highly recommend you guys check it out again.
00:23:39.136 - 00:23:52.430, Speaker A: If you guys want any of the links, they're going to be available here. I'm going to hang out a little bit later here too, so if you guys have any questions about Scaffold ETH or anything, just let me know. Cool. Thanks guys.
