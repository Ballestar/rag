00:00:00.090 - 00:00:20.720, Speaker A: Is a polygon workshop. The name of the workshop is Polygon building NFTs on Polygon. And we have Sean On hu with Polygon who's going to present. There'll be questions at the end and you can post questions in the chat. And if we have enough time, we can do questions. Just turn on your mic at the end.
00:00:21.410 - 00:00:21.982, Speaker B: All right.
00:00:22.036 - 00:00:24.366, Speaker A: At that I'll let Shanann take it away.
00:00:24.548 - 00:00:46.650, Speaker B: Yeah. Thanks Andrew. Appreciate it everyone. Welcome, welcome. Thanks for joining the Polygon Build NFTs Workshop. I'm sean on. I demo these DApps and I build example DApps for Polygon for all of you to just quickly fork and then you can make your rapid product iterations.
00:00:46.650 - 00:02:09.670, Speaker B: So I'm going to kind of show you the general gist of first the lay of the land on how to deploy on Polygon and why you should deploy your NFTs on Polygon really quickly. And then we're going to dive into a few example DApps. Like how do you do it? What happens? How do you make something that is custom and essentially how do you make all the other NFCs that other people are minting out there with all the random stats and rarity stats and whatever, or the NFCs that you like? So let's get started. So the main motivation for doing things on Polygon is the fact that everything is a lot faster, a lot cheaper and maintains an acceptable level of decentralization and security all throughout it. NFTs on main net typically cost around like $70 to $100 to Mint if your gas fees are around the medium to high range, which happens moderately commonly. And so the $70 to $100 per NFT Minting is kind of a bad user experience. It shouldn't cost sky high or rather it shouldn't cost more than the floor price of your NFT to go mint your NFT.
00:02:09.670 - 00:03:12.806, Speaker B: So that's not particularly the best UI. And so what Polygon is more focused on is offering you a large kind of scale worth like a lot of different types of scaling solutions for you to experiment with. Today we'll be focusing on the proof of stake side chain which is essentially just like how you would deploy DApps and NFTs, just like how you would on base layer ethereum, but you would do so deploying to the Mumbai testnet or the Matic Mainet instead. And all that includes is just a slight change in either your hard hat or truffle config file which we will talk about a little bit later. And yeah, what that does is just allows you to deploy things onto Polygon. And once again, the reason why you want to deploy things on Polygon is because your DAP would be a lot faster, like around 20 to 30 times faster than what they are right now. Your transaction costs would be hundreds of times cheaper.
00:03:12.806 - 00:03:53.640, Speaker B: And we have a really great ecosystem supporting artists, games, et. So onto the ecosystem a little bit. We have support for OpenSea, so no need to worry about that. We have also a lot of other NFT projects that have already deployed successfully and there's quite a lot of people in this ecosystem right now willing to support and continue to keep on track with you. Once again, no new skills are needed. All you need to know is just your solidity for your smart contracts. The smart contract portion of doing any NFT is quite easy, which I'll show you very soon.
00:03:53.640 - 00:04:28.562, Speaker B: At least to design a basic one. You should iterate on it however you want. But the front end JavaScript you probably already also know already from being like a Web Two developer. If you don't, that's all right. There's plenty of online resources for you to learn JavaScript from and many ways to Frankenstein things together so that it makes sense. Once again, all you need is also just hard hat and Truffle or Truffle. I'm going to be demonstrating hard hat today.
00:04:28.562 - 00:04:55.482, Speaker B: If you're not familiar with hard hat, don't worry, it's very intuitive to pick up and you can pick it up very easily via Scaffold ETH. Once again, I'll be demonstrating that in about five minutes. But there is Austin who's also giving another Scaffold ETH workshop tomorrow. You should all tune into that. He's the creator. Founder of Scaffold ETH. Great guy, very cool.
00:04:55.482 - 00:05:30.998, Speaker B: Big shout out to him. So, yeah, definitely check that out. And now I'm going to show you a bit about what we're going to go over today. So we're going to go over a thing called Polygon Academy. And we're going to go over a few repos from here. Very recently updated. This is where you can find essentially a lot of actively maintained DAP starter kits that are here for you, for you to fork from and then rapidly iterate on.
00:05:30.998 - 00:06:22.150, Speaker B: Especially because, well, you only have like two days to do this hackathon, right? So get the boilerplate code out of the way and then you can start deploying your on chain NFTs and just focus on the kind of important parts of it. Besides for this, you'll also need to understand how to use a faucet. It's extremely simple. Just paste in whatever address you're deploying your smart contract using into this little wallet address box and then it will send you like one test. Mumbai mumbai tokens are not worth real money. MainnetMatic tokens are worth real money. If you want to get mainnet tokens and deploy on mainnet also very simple, you can do it via this Polygon bridge.
00:06:22.150 - 00:07:07.218, Speaker B: But I think you can just deploy on testnet. And if you have a product that's working on the testnet, I think you'll be perfectly also Polygon also has a blockchain Explorer for both the main net and also Mumbai. So this is just here to make sure that your contract actually exists on chain and that you have deployed your contract correctly. So just these three resources, I'm going to send them in the chat and then we're going to move on to actually working on Adapt. So let me just reshare my screen here to my entire screen. Here we go. All right, cool.
00:07:07.218 - 00:08:00.760, Speaker B: We're still live kicking. So first we're going to do a really nice and quick just like a basic tutorial on how do you deploy any smart contract and what do you really want to watch out for. So the first thing, and a lot of this boilerplate code is also already written out for you. All of this is relating to which network are you deploying on. And there's also a lot of stuff down here about your local wallets. If you're going to be deploying on Localhost, scaffold ETH has a whole test environment on Localhost that you can deploy on before going to testnet. So if you want to save yourself some time, feel free to switch this thing to Localhost first before deploying anything to a testnet or to a main net.
00:08:00.760 - 00:08:51.750, Speaker B: And of course, you switch both this and this is located just under Packages and Hard Hat. Hard Hat is where you have all your smart contract related things. And React App is where you have your front end related things. So you can change this to Local host, and then you can also go into React App source and then App JSX, where you can also change this network to Localhost. But we're going to be deploying a Mumbai today, so that'll be perfectly fine. Under here there is a thing called Module Exports. And if you're also working on Truffle, you'll also have this under Migrations JS.
00:08:51.750 - 00:09:56.890, Speaker B: And what basically this says is, okay, which network are you going to deploy on? Do you want to deploy? So here's network you can deploy on Localhost, probably the simplest. Also there's also a lot of others. So you have Rinkabee and Covan, but we're going to deploy today on Mumbai. Matic Mainet is also here if you want to. And also depending on which data Oracle you use, just make sure to have that your Data Oracle for maybe randomizing your NFT. It's according to whichever network you want to deploy on. And by the way, Data Oracles just help you specifically in this example that I'm doing, this helps me fetch a random number that I'm going to use for some of my NFT's unique Rarity stats because there's no Rarity without randomization.
00:09:56.890 - 00:11:24.230, Speaker B: And also the account that you'll be deploying from, you can straight up just deploy this from your account. Mnemonic Scaffold ETH already has a mnemonic function where if it doesn't detect an already existing Deployer account, you can create one via Yarn Generate. But if you do already have one, it will be stored inside this mnemonic TXT file. This is obviously special for each computer. And you'll have to run yarn generate. Every time your Yarn Generate generates a Yarn account, which is kind of like your Deployer account that is used to deploy your smart contract with you'll have to fill that and the contract itself up with some tokens, specifically chain link tokens because chainlink requires a fee to use their various functions. So you're going to have to do that to call their Get random number function right here that will output a random stats for your NFD for Rarity.
00:11:24.230 - 00:12:23.238, Speaker B: And now to go over the smart contract a little bit before I boot this thing. So you first declare a solidity version and then you import the various libraries to do a very basic NFT. Technically all you need to do is import this ERC 721 sol file and inherit it via the Is keyword, right? So your contract is the CRC 721 of the more basic things. Also to have is this constructor and all you need is this. You don't really need this chunk, you don't really need this chunk. But what you do need is just constructor like public and ERC 721. So this essentially just initializes your NFT and it sets the NFT Uri.
00:12:23.238 - 00:13:52.920, Speaker B: So where the NFT is going to be located to IPFS your NFTs which are located in this sorry, let me just scroll down here. In this artwork, JSON file is going to be uploaded to IPFS and whichever NFTs you have, you can just upload them onto this artwork JSON file. JSON files are relatively self explanatory. They just have the name of your NFT, your description and external URL image and various attributes you want to slap onto each NFT that you can all just copy and paste. Yeah, so you can just replace this with whatever you want and then you can have this on IPFS once you run a yarn upload, which I'll show you what it looks like slightly very soon. So then after we've run that constructor function, what next? Well, I was saying earlier that you need a data oracle to simulate Rarity on your NFTs. So let's say we have, for example, NFTs with this kind of token strength stat, right? Like your NFCs are strong like from 100 to one, right? And to determine the strongness, you'll need a random number to do that.
00:13:52.920 - 00:14:51.850, Speaker B: And so what you would do is you would have a Get random number function and then your Mint item function, which is another basic part of minting an NFT. This is literally just let's mint the NFT function and it takes in a specific. When you fire this off, it stores your NFT's token ID along with the token Uri. For every single time you fire this off, this token counter here would increase by one. This is just like a really simple token counter function. You can also copy and paste this and it's just saying that we're using counters, counters for a token counter. And this token counter is a private variable that is linked to the token ID.
00:14:51.850 - 00:16:12.500, Speaker B: So every single token has a token ID which is marked by this unique token counter that says token one token two token, three. The rest of this other stuff, the bytes, key hash, internal sorry, the internal fee and the random results, these are all locatable under chainlink VRF docs, which is the documentation that I'm using for generating random numbers in your smart contracts for making your NFTs rare and rare with a specific level of randomness. As you can see here, this is very much copy and pastable right here is your thing. And you also have a little constructor function here which essentially just sets up your contract for using the VRF consumer based contract. Here's a really thing to watch out for. Data oracles have specific chain addresses. So what I mean by that, you see this address for the VRF and sorry, I should probably zoom in, my bad.
00:16:12.500 - 00:16:59.698, Speaker B: You see this address for the VRF coordinator, which is right here, and this address for the link token, which is right here. These are chain unique, so chain specific. You will need to replace this with the correct one for every chain that you go on. Once again, of course these are located on the docs. But I just want to point this out and essentially if you're just copying and pasting and getting rid of the boilerplate code to kind of just start in your custom NFT project, this is what you need to kind of be wary of. Same thing with this key hash right here and the fee. These are all chain specific and I promise you I'll get to your questions very soon.
00:16:59.698 - 00:17:46.434, Speaker B: I'm almost done with this. This also maps every token or sorry, every NFT that you mint to a status for if it's for sale or not. We're minting one of ones and if you minted it, you can't mint a duplicate of it, at least for this example. You can customize this however you want. And yeah, the rest of this is this also has a tracker for the token strength stat which uses this random result that we got from the fulfill randomness function. This is from the chain link docs as well. The fulfill randomness, this is how you get a random number.
00:17:46.434 - 00:18:34.500, Speaker B: And then you take this random number and you have a specific token strength for every token. And every token is identified by their Uri hash. Basically, when you do upload these NFTs to IPFS, they get these token hashes. So they get these IPFS hashes and we're using these IPFS hashes as unique Identifiers effectively for the tokens. All right, cool. So I've walked you through the smart contract a little bit about just how to deploy any DAP on polygon and the front end. Effectively, you can modify various aspects of it under here.
00:18:34.500 - 00:19:09.050, Speaker B: It's in a JSX file, so feel free to change that. I don't think there's much in the CSS file, but you can continue doing that. But I will boot up the app to just show you that this works. So what you need to do first is you need to boot up a Yarn chain. You can CD into any folder, or rather any folder with Scaffoldies installed. And then you can do yarn chain. Yarn Chain boots up your local blockchain development environment.
00:19:09.050 - 00:20:08.046, Speaker B: And it's necessary if you want to deploy on local host. The next thing that you need to do is you go into this little terminal prompt here. I CD into the folder, and all of these instructions are also on the actual repo itself that I got it from under Polygon Academy, which I linked earlier on in the chat. So you do a Yarn Generate, and then you do Yarn account, which creates a deployer account for you. My deployer account already had some Rico in it. So I copied this address and then I went over to the Faucet to submit a transaction and then get myself some test tokens, after which I sorry, after which I ran a Yarn deploy and then that just deployed. Sorry, you have to run a Yarn upload first.
00:20:08.046 - 00:20:51.086, Speaker B: And so what Yarn upload does is it uploads all of the NFTs inside this artwork JSON file onto IPFS. So you do that first, and then you do Yarn Deploy, which will deploy your smart contract. I'm just going to run it again just for the sake of it, but it's probably going to say that it's reusing oh shoot. What happened? It's probably going to say that it's reusing my contract at a certain address because I've already deployed this. Okay. Yeah. Okay.
00:20:51.086 - 00:21:22.390, Speaker B: I think it's doing its thing right now. All right, so we'll roll with that. That's fine. And then, let me see here. So your collectible deployed to, right? So then if we copy this contract address, right? And then we go on to OpenSea, verify it is on OpenSea. It's just that nothing has been done with this contract yet, or nor have we sent anything to it. So there's that.
00:21:22.390 - 00:22:06.470, Speaker B: So then, now that I've done that and actually deployed my contract, I can feel free to exit out of that. Actually, I can CD back into the folder. So NFT market example and I can do yarn start. Yarn Start will start up a locally hosted front end. For me, it's just similar to what you would do on Truffle with NPM Run Start. But it's just that we're using and you can all message me via peep 6960. I'm also in the E Global server, so I'm pretty easy to identify.
00:22:06.470 - 00:22:29.242, Speaker B: It's the same Peep that's on the team. So yeah, you can feel free to do that. Let's see here. Sublime text. Nice. Yes, Sublime. I also use Vs code, so I first started using Sublime, and then for some reason, I'm stuck between the two.
00:22:29.242 - 00:23:10.410, Speaker B: And I guess I'm shifting over. I don't know to Vs code, but I use both. Is there something like a Create react app command for Polygon react template? That's a good question. I think you could there might be a brownie command like that for polygon. If there isn't, you can fork this starter kit. This uses Truffle, but if you want a hard hat starter kit, use this one. So there's tons of that on Polygon Academy.
00:23:10.410 - 00:24:05.340, Speaker B: If you don't have a brownie specific one. Can we work with brownies? Yes, of course. What are your suggestions on how teams should address the perceived exclusivity factor on launching an NFT project on Ethereum rather than any other? I mean, I guess you can, but this is ETH Global and we are, like, in the Ethereum ecosystem, so launching ethereum projects are kind of our thing. But yeah, you can totally do that. Okay, cool. So that booted up our front end and your contract here is available. And then you can just CD back into the folder, mt Marketplace Example.
00:24:05.340 - 00:24:27.474, Speaker B: Wait, what was the folder called again? Sorry. NFT market example. Oh, sorry. NFT market example. And then we can do yarn upload. Let's try the yarn upload. Maybe that'll solve the issue of the front end gallery not showing up.
00:24:27.474 - 00:25:08.554, Speaker B: But as you can see here, your collectible contract is down. It's existing, it is fully there. I have tested this out before and this was completely fine. So maybe I messed up because I tested this out before and I did yarn upload first and then the deploy next. I did this on rinkabee, though. Yeah, man, maybe I just messed up on that step. I needed to upload my NFDS first before I get to Mint, right? So man, rookie mistake.
00:25:08.554 - 00:25:40.540, Speaker B: Sorry, guys. So injecting assets into the front end. Maybe I just need a refresh. No, it's not going to show up yet. All right, well, in that case, I can try to do a yarn deploy again, but I do assure you this has worked before and I'll keep continuing answering questions while that happens. Looks like the Faucet is drive from Gurley. Yeah, that might be the case.
00:25:40.540 - 00:26:33.654, Speaker B: I don't think that'll be a huge problem, though, because you're pulling up Mumbai anyways. Would I know how much link token on polygon? How much is a link token on polygon? Official? Oh, man. Sorry, man. I don't know the token price off my head, but I would just still recommend deploying on testnet first. And the great news, absolutely great news is blink tokens and polygon tokens are both really cheap on polygon. So this probably shouldn't take more than $50 to $100 worth of Maddox, assuming that you're already on polygon. But yeah, it's going to be really cheap.
00:26:33.654 - 00:27:21.222, Speaker B: I'm not saying that $50 to $100 cheap. I think that's a lot of money, but it's not as expensive as, like, ETH mainnet, relatively speaking funding amount. Yeah, so oh, yeah. So in the wallet you can swap for gas tokens? Yeah, so in the wallet you can't swap for gas tokens. I'm apparently waiting confirmation for MetaMask. All right, I guess I'll keep on waiting for that oh, there it is. There's a signature.
00:27:21.222 - 00:28:09.100, Speaker B: Finally. Yeah. So then you can swap for gas tokens here. But you see, you need a token already from Polygon to swap for gas tokens. And I've never really had to swap for gas tokens because I just use Matic. I just loaded $100 into Polygon and that was all I've ever needed and all I'm going to ever need for the rest of my life. I've been doing workshops for a bit now on the example DApps I've been building then they haven't ran out already, so it'll be perfectly fine.
00:28:09.100 - 00:29:03.020, Speaker B: How does a random number from Oracles create NFT of Rarity? Well, your NFT, it's something similar to how Ave gotchis work. So each of your NFTs can look different, obviously, but they can also have different combat stats if you want to implement some sort of like Pokemon style combat into your NFDS game or whatever and stuff like that. So higher combat stat, the better it will be. Man, that's so weird. This is interesting because this works. Oh, you know what? Maybe I didn't switch the front end to Polygon. Yeah, maybe not.
00:29:03.020 - 00:29:38.454, Speaker B: Oh, I did. That's so interesting. Huh? That's super weird. All right, I guess I'll continue fixing that. But this repo is very much forkable and everything works. And if it doesn't, obviously feel free to give me file the issue on Polygon Academy. But yeah, I don't know.
00:29:38.454 - 00:29:45.080, Speaker B: For some reason, this gallery is not showing up and I've never had that before. Sorry, guys.
00:29:48.650 - 00:29:52.120, Speaker A: Hey, I'm going to have to jump in. Sean on.
00:29:53.370 - 00:29:54.346, Speaker B: All right.
00:29:54.528 - 00:30:36.770, Speaker A: Yeah, we got to go to the next workshop stream. But that was awesome. Sean on is experienced not only in Polygon, but in ETH Global hackathons because he works with us. So anyway, remember, all of these workshops are recorded and on the ETH Global YouTube and Sean On is in the discord and can be reached. Encourage you to just continue to reach out to him at his discord handle, which he posted in the that here peep 6960 with that. Thank you very much, Shannon. See everyone in Discord and have a good hackathon.
00:30:36.930 - 00:30:39.970, Speaker B: Thanks for having me, Andrew. Thanks. Have a good time at East Global.
