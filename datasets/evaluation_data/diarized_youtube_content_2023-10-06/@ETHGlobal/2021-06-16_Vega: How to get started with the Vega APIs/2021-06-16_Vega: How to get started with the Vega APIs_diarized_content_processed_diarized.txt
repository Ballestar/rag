00:00:00.570 - 00:00:27.110, Speaker A: And we'll get to them either towards the end of the workshop or throughout the workshop. So if you'd like to connect with the Vega team after this workshop, please join the Discord Channel, the sponsor Vega Discord Channel. This is where you can find the team and they will be happy to support you and continue the onboarding over there. Without further ado, let Bill take it away and start your presentation.
00:00:29.930 - 00:01:12.670, Speaker B: Hey, thanks for the intro. Yeah. Hi guys. So I'm going to walk you through some examples of getting started with the APIs on the Vega testnet today. It's going to be a bit of a practical presentation and I'll just share my screen and get started on that. So I guess there's kind of an overview in case people don't know. I'll talk a little bit about what Vega is and where you can find developer resources that you might want to use after this if you're going to be doing things kind of independently.
00:01:12.670 - 00:02:21.402, Speaker B: So Vega is a scaling solution for derivatives. It works alongside other kind of layer one blockchains. It is its own chain as well, based on the tendermint protocol for consensus. Currently we bridge to Ethereum where we can use ERC, 20 assets on there as collateral for creating markets and for trading on the network. And then the Vega chain is responsible for managing the balances, the profit and loss of the traders, managing the risk of the network and all of that. We'll see a bit of this when we dig into it and there are lots of resources on the website with more detailed docs. But by kind of building a custom blockchain, we're able to optimize for a lot of the things that make trading applications useful in a decentralized environment, which is quite different from if you just used a smart contract to try and achieve the same thing.
00:02:21.402 - 00:03:32.126, Speaker B: So it's quite powerful and the performance of the platform and the network is sort of intended to be as comparable as possible with what you might find if you use decentralized exchange but for derivatives and not Spot, which is quite a complex use case. So we've got a bunch of different developer resources available. You can check them out at docs testnet. Vega x. I said you can join the Discord and there are a bunch of different channels on there for people to collaborate and talk about things they're building and ask the team if they need any help. We have a couple of different sort of user friendly APIs built on top of the chain just to kind of enhance the experience from a developer point of view. There's a Rest interface which we'll see today in the little coding example that we'll go through there's GraphQL and you can stream real time data as well over WebSockets, but we won't get into that.
00:03:32.126 - 00:05:00.894, Speaker B: It's a bit too much for the half an hour, but come along and talk to us on Discord if you're interested and we can walk you through some of the more complex aspects of it as well. And that's kind of it for the intro there, that's just our Twitter. And then I'll talk a bit about the prizes that we've got through sponsoring this event. So there's going to be a 4K USD prize pool to share for anyone who builds something on Vega. So this is kind know, depending on how many people that will determine the amount, but that's just for whatever takes your fancy. And then we got some specific sort of challenges of things that we'd potentially like to see people have a go at building and this is us thinking about as a team, what would be interesting, what would really show off some of the unique aspects of Vega. And so one of these is around visualizing mean, this is on the ETH Global page but I've just taken a screenshot here to talk through so you can go there and read more.
00:05:00.894 - 00:06:17.074, Speaker B: But yeah, visualizing fees and there are some ideas here about what you might want to do and we'll see how you can get data up for this stuff in a minute. And then other things like interacting with Vega virus spreadsheet and some examples here for things that you might want to show doing that, but yeah, and they have different prizes so feel free to kind of check that out. And without further ado, we'll jump into kind of the practical side of things. So I've got some code here which I've prepared, which we'll use in a minute, but before we do any of that, I want to kind of show you, if you haven't seen already, how you would run a local wallet. And the reason I do this is because when you're building applications you really need to have a proper dev environment set up. So to do that you would go to our GitHub page here, check out the go wallet repository, there's a README here. And this is a binary that you run on your local machine, allows you to create some keys that you'll use to trade on the network so you can download the wallet from releases.
00:06:17.074 - 00:07:10.310, Speaker B: I've already got it, so I won't do that. And once you've downloaded it, let's see, you can run it in the command line. And what we've got here is for me already because I've created some keys, I can remember this off the top of my head, I think it's called my key close. Yeah. So what we've got here is basically a public private key pair. Now this is for authentication against the Vega network and this is just on testnet. Obviously I wouldn't be showing the private key if it wasn't.
00:07:10.310 - 00:08:02.790, Speaker B: And you can run a service using this binary on your local machine which will allow you to sign transactions and trade on the Vega console from your laptop. And then you can write scripts which interface with this. And this is what we're going to do when we start building. So I can use the console now to say I want to connect to a local wallet. So this is going to connect to the wallet that I'm running. And once I'm connected, I'm pretty much good to go because I've already added a balance to my key earlier before this call in preparation. So you can see here I've got some test die assets.
00:08:02.790 - 00:09:19.790, Speaker B: So at 99,000, so that will allow me to trade on any market that's settled in this test asset. So the one we're going to use is the Ave Die market and you can see the balance here, 99,900 and just playing around in the console just to get a feel. I can go and just take like a market order for one contract on here and you can see that I have an open position on here now and I'll close it because we don't need it at the moment, but just takes a second or two. And all of that's happening on the Vega blockchain. The assets live on Ethereum and it gets credited to my Vega public key when I make a deposit to a smart contract on Ethereum. And you can request from our Faucet, like a deposit via here. So we've built some tools that allow you to just basically request more of these test assets.
00:09:19.790 - 00:10:25.070, Speaker B: So you can just click get some, get TDI and that's processing the deposit. In the real world, you'd actually do a transfer from your wallet rather than it coming from a Faucet, but just to show you sort of how easily you credit that balance there. And once we've got all of that set up, we can start thinking about building just sort of a simple application to let me just a simple application that uses our APIs as a starting point. So I'll just pull up the docs. So docs fairground Vega X. I said so Fairground is our kind of official name for testnet. And here you can see a bunch of information about the APIs.
00:10:25.070 - 00:11:17.560, Speaker B: So gRPC, Rest, GraphQL and there's a bit on the wallet as well. And yeah, I encourage you to kind of dig into these in your own time, to look into them in more detail. But there's a whole host of stuff here that you can look at over Rest and then GraphQL which is kind of more flexible and can be used to stream real time data, kind of shows you here the object models that you can use to access to get things like positions and trades and all of that. So this is all very detailed. Something that is worth looking at quickly is this GraphQL playground. So this is something that we host that allows you to kind of test GraphQL queries. I'll just show you that quickly.
00:11:17.560 - 00:12:34.250, Speaker B: You could say, let's see, what do we want to do. Let me just grab the ID. So this is the ID for the Ave die market. So you can just fetch a market by ID. So you type markets, I think it's ID, and then you can select the information that you want from the market and run your queries here so that can be handy to kind of debug and look at what's going on. So we can build like more complex queries. So we could add fees and I think fees, fee factors so we can look at like, what's the maker fee on this market? And it's really flexible.
00:12:34.250 - 00:13:31.578, Speaker B: So there's that and then there's the Rest Docs. And we're going to use the Rest API today, plus the local wallet, which I started a minute ago. And so I'll pull up the code and this is a script that I've already prepared which works. And we're basically going to recreate this and I'm just going to talk you through what it's doing at each step. So let's open this trade too. And we're going to build something here now, which is just going to what it's basically going to do is it's going to use my local wallet and the balances that I showed you before, it's going to and it's just going to send random trades at the Ave Diet market. So it's not very useful.
00:13:31.578 - 00:14:17.162, Speaker B: But what it will show you is how to plug everything together with the wallet with the Rest API and actually build something that is able to trade on the Vega network. So we'll go through this one step at a time. I'm going to copy them across so it's easier for you to see. In order to do this, we need to define a couple of things in our script. One is the market ID for the market we're going to trade on. So I've fetched that already beforehand from the API, we need our party ID, which is the public key on Vega. So this is like the identity which holds a balance.
00:14:17.162 - 00:15:24.020, Speaker B: So this holds the test. Dai assets. It's like an Ethereum address or similar to like a Bitcoin address, but this is relevant to the Vega chain. We need to know the name of our wallet because this holds a private key for this party which we'll use to sign transactions so that we prove that we're authorized to trade with that 99,000 die and then just the password and some URLs here for the wallet and for the testnet to submit the transactions when we want to trade. So we'll define these global variables and then we'll have just a simple loop in the application, which is going to do this is the trading loop, and this is just going to loop, and once a second it's going to execute this function. Trade. Let's just see.
00:15:24.020 - 00:16:01.274, Speaker B: Just make sure that that's working. Yeah, that's fine. So this is the trading loop, and we'll do something a bit more useful in there now. So what I've already prepared here is this trade function and I'll just paste it in and talk you through it line by line. So this function generates a site. So you need to say whether you want to buy or sell. So the side is whether you're going to buy or sell and then generate a size of a trade.
00:16:01.274 - 00:16:40.394, Speaker B: So we're just using the random library in Python to randomly either buy or sell. If this number is greater than 0.5. So half the time it will buy, half the time it will sell. We're generating a random size between one contract and five contracts and then we fetch a token. Get token is not defined yet, so that's not going to work until we define it and then we do some other stuff to submit the trade. But again, those functions are not defined. So just to look at this and see if it's doing that.
00:16:40.394 - 00:17:13.602, Speaker B: Okay, cool. So it's randomly going to sometimes it's going to buy, sometimes it's going to sell and it's going to do different amounts. Once we've done that, we can do this get token step. And this is part of the authentication that's required to submit trades. So this is going to use the wallet and I define get token in here. Now it's pretty straightforward. It sends a request to the wallet that's running on my local machine.
00:17:13.602 - 00:18:37.780, Speaker B: So wallet server, which is localhost, and it gets a token. And that token is used to authenticate and sign the request that gets broadcast to the blockchain. So it's not so exciting to see that step, but let's just do it just to prove that, prove that that's working and we can see that we are definitely fetching a token and it's different each time and then we can move on to preparing the order. So I'll grab the function for that. We're going to prepare an order. And here we're just passing the size and the side. So buy this many contracts, sell this many contracts to our function and then we're using these global variables for market ID and party ID to say on this market, which is Ave Dai for this party, the one on my local wallet, I want to buy this many contracts or sell.
00:18:37.780 - 00:19:42.550, Speaker B: And once we've done that, we send this basically to one of the Vega nodes, API nodes, and it generates us basically a base 64 encoded piece of data which can be broadcast to the blockchain. And that's because under the hood, Vega is using like protobuffer files for the different objects and that's what this is doing. So it's just allowing you to generate that binary data which is then sent to tendermint. So it's not doing too much exciting, but it's an important step. And again, let's just check that that works as we expect. Actually going to get rid of the print token because it's like taking up too much space. It's broken.
00:19:42.550 - 00:20:48.166, Speaker B: Okay, why we go? Let me just check something. Hold on one SEC. There were some issues on the testnet earlier, which I wonder if it's impacting this. Let me just try something else. It okay. Yeah. So right now we're running some testnet games and lots more people than usual are using testnet.
00:20:48.166 - 00:21:54.090, Speaker B: So I've just swapped the URL for the staging, for our staging network, which is not under so much load and it's working okay, so we'll do that instead. So that's working now and we can see it's generating this binary data that we're going to broadcast to the blockchain now. And then the final step is to sign and send the order. So at this stage, we're now going to use the token from earlier and the order that we've prepared so the binary data to sign and broadcast to the Vega chain. And then that goes through consensus in the same way that a transaction on Bitcoin or Ethereum goes through consensus on those networks. And for that I need to copy across the sign and send function. And this is just building a request in the valid format to send to the wallet server.
00:21:54.090 - 00:22:55.102, Speaker B: And because we're signing, this goes to the wallet server. Again, because the wallet server holds the private key. You want to keep that on your local machine, obviously, because for the same reason you do with any other blockchain, if someone were to get hold of it, they would effectively be able to transact on your using your funds that are deposited to Vega. And obviously you wouldn't want that. So, yeah, we keep that local. And here we're building the request with the prepared order and the token and we set this flag propagate true. And this means that so we send this request to the wallet on our machine and then the wallet binary on our machine broadcasts that to the nodes on the Vega blockchain and we'll get a status code back from that.
00:22:55.102 - 00:23:45.730, Speaker B: So then we can just check if we get a 200 and if we do, we'll print that we executed an order and if not, we'll print the JSON so we can see what went wrong. And if all of that works, then we'll be able to go back to the console in a minute and we'll run the scripts and we'll be able to see the trades coming through on the console. So let's give it a go. Python trade two. Okay, well that looks good, although I don't know why it's not doing another one. Let's see. Okay, it's just a little bit slow.
00:23:45.730 - 00:24:40.674, Speaker B: Okay, so that's executing them and we can see on our Wallet actually, this is a good thing to look at, so we can see that the wallet is actually sending these transactions as well. So that all looks happy. So it's outputting sending transaction to Vega node, which perhaps you can see there. Let me try and zoom in case it's difficult to see. So those trades look like they're going through. Let's have a look on the console just to sanity check that that's actually doing something. And again, I don't know how easy or difficult it is to see this, but we can see if I zoom in, hopefully that is actually trading.
00:24:40.674 - 00:26:05.600, Speaker B: So here our exposure. So our open volume is changing every second or so so minus ten -14 -17 and it will average to zero because half of the time it buys and half the time it sells and yeah, that's kind of it. So that's I think the full sort of walkthrough, I'll just stop it and go back to the code quickly. Don't know what the wallet was doing then and just pull that the full kind of code example up. So this is a very simple example, obviously of how you would get started, but yeah, 50 lines or so of Python there and there's a git repo with this code that's public on our GitHub as well. So have a look for that. I think it's called hackathon something and yeah, you can obviously build on this to build something that actually trades based on external data or other information on the network rather than just randomly, but these are kind of the building blocks to get going.
00:26:05.600 - 00:26:22.600, Speaker B: So, yeah, I hope that was helpful and see if there's any questions that in the chat. I'll stop sharing. Cool.
00:26:25.770 - 00:26:57.150, Speaker A: Thank you so much. I think let me check if there's anything coming up from YouTube. No, I think we're good. Thank you so much for this wonderful talk and I'm sure that was super informative for people and how to get started with Vega. Well, there's one question coming, I guess the question is which product idea do you suggest is one of the question and how can I deposit tokens.
00:26:59.330 - 00:26:59.646, Speaker B: To.
00:26:59.668 - 00:27:01.518, Speaker A: Open a position on main net, I.
00:27:01.524 - 00:27:35.002, Speaker B: Suppose was the question. Yeah, I'll take the second question first just because this is only testnet now, so it's easier to answer. So this is only testnet now, so I don't think your question is quite right. So, like, appropriate for where the stage are at. So what I was showing you there is using fake assets on Robston. So, yeah, you definitely shouldn't be depositing any kind of real assets when we're on main net. You would deposit standard, ERC, 20s that exist on the ethereum main net.
00:27:35.002 - 00:28:36.080, Speaker B: But this is very much just like testnet at the moment that we were looking at and yeah, you can do that through the console on the first question, which product idea do you suggest? I would recommend, like, have a look through the APIs and look through them for inspiration by thinking about things that are unique to Vega. That would be the most interesting, I think, for us to see is things that are not currently possible with, say, using the APIs of a centralized exchange and just try to be creative and anything that really showcases the potential that Vega has is probably the most interesting. But you'll find the most inspiration for that by looking through kind of the API docs and seeing what you can do of it yourself in your entire great.
00:28:36.530 - 00:28:54.450, Speaker A: Well, thank you for all this, Bill. I think that was great. And thank you for everyone for joining us. If you'd like to keep the conversation going, please join the Discord Channel vega sponsor, discord Channel. And that's where you can find a team that will help you and support you throughout the hackathon.
