00:00:06.330 - 00:00:38.902, Speaker A: Okay, well, yeah, let's get started then. So hi, everyone. My name is Cree, I'm with the Youth Global Team, and joining us today for the IPFS and Filecoin workshop is Discordion. He is going to give us, like, 101 Introduction to IPFS Filecoin. Super excited to watch them myself. And yeah, I think we'll do Q and A towards the last ten minutes. So feel free to use the raise your hand emoji for that once we start Q and A.
00:00:38.902 - 00:00:50.570, Speaker A: Or if you're a little bit shy, like I am, you can just pop your questions into the chat and we'll answer them at the end. So, yeah, Discordion, feel free to take it away.
00:00:50.720 - 00:00:53.280, Speaker B: All right, thanks. Hello, everyone.
00:00:53.730 - 00:01:00.506, Speaker C: I am Discordian, and welcome to an introduction to IPFS and Filecoin. I'm a community engineer with Protocol Labs.
00:01:00.618 - 00:01:03.418, Speaker B: And this talk is about 30 minutes long, but I'll try to cut it.
00:01:03.444 - 00:01:04.626, Speaker C: Just a little bit shorter so we.
00:01:04.648 - 00:01:06.260, Speaker B: Have more time for Q A.
00:01:09.110 - 00:01:22.280, Speaker C: So first, a quick breakdown. Protocol Labs is an open source research and development lab, building protocols, tools, and services to improve the Internet. We try to operate in the public and be as open and accessible as possible.
00:01:30.920 - 00:01:33.284, Speaker B: Is a decentralized storage network to store.
00:01:33.322 - 00:01:51.988, Speaker C: Humanity'S most important information? All right, what's on the agenda today? We're going to learn about the core concepts of IPFS and Filecoin and why they're important. Talk about what tools exist today to help you get started building. Then we'll talk about some possibilities, throw.
00:01:52.004 - 00:01:53.016, Speaker B: Out some ideas that might be fun.
00:01:53.038 - 00:02:00.908, Speaker C: To build with the tech. Finally, near the end, I'll tell you some resources you can explore into to learn more about IPFS and Filecoin, as.
00:02:00.914 - 00:02:01.916, Speaker B: Well as where you can go to.
00:02:01.938 - 00:02:05.740, Speaker C: Find our communities and connect with fellow IPFS and Filecoin enthusiasts.
00:02:08.340 - 00:02:10.992, Speaker B: Data, information, and knowledge are a couple.
00:02:11.046 - 00:02:30.032, Speaker C: Of the most important assets of our connected era. They are critical to human development. That's why we believe they must be safeguarded, open, and in the hands of the people. But they aren't in the current model. Let's start with that problem. Currently, the Web 20 model is centralization. Amazon.
00:02:30.096 - 00:02:31.568, Speaker B: Google fastly.
00:02:31.744 - 00:03:03.488, Speaker C: If any of these fail, which they do occasionally, entire services can go down. As you get decentralized and further and further distributed, your services resilience increases as users themselves are what are powering the service. So what's the solution? How do we build a web that is distributed? Well, a key part of IPFS and Filecoin is that they are distributed. IPFS and Filecoin are not the answer to all the problems of the web, but they are the answer to some.
00:03:03.654 - 00:03:05.996, Speaker B: Particularly when it comes to removing borders.
00:03:06.028 - 00:03:18.324, Speaker C: And silos for data. Over the course of this workshop, we'll see that IPFS, a PeerToPeer hypermedia protocol for content addressing and Filecoin, the world's largest distributed storage network, are important building.
00:03:18.362 - 00:03:19.316, Speaker B: Blocks of this new web.
00:03:19.338 - 00:03:56.208, Speaker C: Three generation files and folders might sound boring, but really they're not. So IPFS is the Interplanetary file system. What is a file system? Files and folders. Any file with any content. Why Interplanetary? Because it was conceived as a way to upgrade the web in a way that would still work when the network stretches across planets. The idea being that if you're sitting on Mars, it may take 1 hour for a request to go to and come back from Earth. But if that content was already fetched by someone else on Mars, then the request should not travel all the way back to Earth for it.
00:03:56.208 - 00:04:10.356, Speaker C: And that feature should be provided transparently by the network protocol rather than by something on top. As we will see, IPFS is distributed by design. No central authoritative servers are storing content, and no central server needs to be.
00:04:10.378 - 00:04:12.470, Speaker B: Contacted in order to obtain the content.
00:04:15.500 - 00:04:41.250, Speaker C: Typically, you would upload the content to a server a location. Anyone wanting to download that content will have to get it from that location. With IPFS, things are slightly different. In IPFS, you run an application called the IPFS Peer, and with it you become a server, also known as a node in the network. You don't upload content anywhere, but instead add it to your node and make it discoverable by everyone else.
00:04:42.180 - 00:04:44.332, Speaker B: Any content that is published on IPFS.
00:04:44.396 - 00:05:15.848, Speaker C: Uses Content Addressing, which is a way of referencing a piece of data by its hash. To do this, we will need to know how to obtain a Content Identifier. So IPFS addresses content by what it is instead of where it is. It enables you to refer to a file or folder via its Content ID, regardless of its location. Let's think of the process we follow when we save data locally. It just goes on our drive and is addressed there by its path. The web is no different.
00:05:15.848 - 00:05:57.850, Speaker C: When we open a website, we're just opening some files. The difference is just that they need to be downloaded from a remote location, and that we do that with a browser which will print pretty things on our screens. With IPFS, we're also obtaining files from a remote location. However, the key difference here is that we don't need to know the location of the content, but instead what is called a Content Identifier. Ultimately, the content can be at one or several locations, but as we will see, it does not matter anymore where it is. We switch from a location based Identifier to Content Addressing by using a CID. Next, let's look at the key technologies making this possible.
00:05:57.850 - 00:06:05.400, Speaker C: In order to have Content Addressing, we need to create Content Identifiers for each piece of information that we want to put on the network.
00:06:05.980 - 00:06:07.820, Speaker B: Think of this as a kind of.
00:06:07.890 - 00:06:54.200, Speaker C: Cryptographic fingerprint of that piece of content. Every piece of content produces a different fingerprint. All the fingerprints are of the same size, regardless of the amount of content that they represent. This fingerprint, which we named Content ID, can be reproduced anytime from the original content by hashing it. This means that if we obtain a piece of content after requesting a Content Identifier, we can verify that we were given exactly what we asked for. But what about folders? Well, folders are really just special types of files which have a list of files in that folder as its content. That list provides the names of those files and in the case of IPFS, their CIDs.
00:06:54.200 - 00:07:35.796, Speaker C: Since a folder is a type of file, a CID can be obtained in exactly the same way as for any other type of file. This means that we can represent a folder or even a full file system using a Content Address structure. Let's bring it to life. As you can see here on the left side, our top level folder has a root Content ID. It has two entries corresponding to two folders, and those two folders have other entries corresponding to files. Each entry has a different fingerprint that's visualized with the colors here. This Content Address type of graph is what we call Merkel Dags directed a cyclic graph.
00:07:35.796 - 00:08:18.710, Speaker C: These merkel Dags used by IPFS allow us to move from location based addressing to content addressing in a single step. We're just replacing locations with the root CID of their content, and the subpaths stay the same. One characteristic of Content Addressing that I mentioned previously is that the fingerprints are unique for any type of content. What would happen if we wanted to copy file TXT to the folder of the second user? Well, it means two things. Firstly, we don't actually have to copy the file. We just have to modify the folder to reference the content. Two copies of the same content have the same Identifier, so to IPFS, they are the same thing.
00:08:18.710 - 00:09:07.396, Speaker C: There is no notion that the same content sorry, there's no notion that the same content can be duplicated in different folders in IPFS because it is actually the same thing with the same CID. We call this property deduplication. Secondly, since we changed a folder, the fingerprint of that folder changed, so we had to update the folder too to reference the new fingerprint. This means that the fingerprint from that folder changed, resulting in a new root CID. The moment something changes, you get a completely different CID. Your previous CID still references your previous version of the content, which has not been changed. The fact that a CID will always represent exactly the same piece of information, unlike a location unlocks the capacity of doing verification on any piece of data.
00:09:07.396 - 00:09:57.270, Speaker C: This matters because if the CID is guaranteed to give you the same content, you don't have to get that content from a trusted centralized server. You can ask anyone in the network for that CID, regardless of whether you trust them. The first step when adding content to the IPFS network is to obtain the Content Identifiers for that content. This can happen offline or online at any moment. Once we have those CIDs, the next step is to announce them to the IPFS network so that they can be retrieved by other IPFS peers. But what is a peer and what does it do? Peers in a peer to peer system are nodes that are connected to other peers to form a network or swarm. Forget for a moment about IPFS and think about a group of people.
00:09:57.270 - 00:10:34.850, Speaker C: If I want to address a person and communicate, it helps if I can identify them, for example, by their name, if we share a common language so that we can communicate, and if we have ways to verify that we are who we claim to be. Same with IPFS and the peers in the network. Each peer has a unique Identifier their peer ID. This Identifier is linked to a cryptographic identity which allows each peer to communicate securely through an encrypted channel. The peers in the IPFS network are peers which support a set of services or protocols. One of them serves to request certain content by its CID from a different peer and download it.
00:10:36.260 - 00:10:38.720, Speaker B: Actually, I see a pretty easy to answer question here.
00:10:38.790 - 00:10:41.856, Speaker C: Does IPFS prohibit publishing of duplicate data?
00:10:42.038 - 00:10:50.276, Speaker B: Actually, as I mentioned previously, if you add the same data, you'll get the same content Identifier. So technically, you can add the same.
00:10:50.298 - 00:10:51.764, Speaker C: Data to your node, and if somebody.
00:10:51.802 - 00:10:53.488, Speaker B: Else added that exact same data, you'll.
00:10:53.504 - 00:10:57.256, Speaker C: End up with the exact same content Identifier. So if a third person wants to.
00:10:57.278 - 00:10:58.616, Speaker B: Retrieve that data and they have that.
00:10:58.638 - 00:11:01.770, Speaker C: Content Identifier, both of your nodes will serve it.
00:11:02.140 - 00:11:05.530, Speaker B: If that makes sense, we can go into it a bit more in depth later.
00:11:08.800 - 00:11:24.800, Speaker C: But in order to get there, it means that peers need to be able to discover each other, the network transports they support TCP, Bluetooth, and the services they can understand. This step is called content and peer routing and is achieved using something called a distributed hash table or a DHT.
00:11:28.900 - 00:12:07.630, Speaker B: I'll answer Juan's question real quick, too. How can illegal content be removed from the network? A good way to think of this is think of IPFS as like a distributed Http. So if you see a website that's hosting illegal content, I guess what you'd probably do is report it to a government authority of some sort, or however you prefer to get content taken off the Internet. With IPFS, it'd be the same way. You could blacklist the nodes so your node doesn't talk to them. But ultimately, at the end of the day, you would need the nodes hosting the illegal content to shut down. If you host an IPFS node, it won't just automatically download other data, so you'd have to actually put it on yourself.
00:12:07.630 - 00:12:10.450, Speaker B: So hopefully that answers that question.
00:12:11.620 - 00:12:14.656, Speaker C: Cool. All right, so the DHT or the.
00:12:14.678 - 00:12:16.352, Speaker B: Distributed hash table is a critical service.
00:12:16.406 - 00:12:29.364, Speaker C: That each peer runs. You can think of a distributed hash table. Think like a phone book, except everybody helps maintain it. It is effectively a series of keys paired to values, kind of like names paired to phone numbers.
00:12:29.562 - 00:12:31.568, Speaker B: In order to get the value associated.
00:12:31.584 - 00:13:07.650, Speaker C: To a key, for example, a content ID, a peer will need to have or find some other peer that is storing it. The process consists of asking other peers in the network who has the value for this key, but not in a random fashion. Remember that not every peer is connected to every other peer. Peers with certain names or peer IDs are more likely to store certain key value pairs. Thus, a peer knows which of the peers it is connected to is most likely to have the value for the key that it is looking for. And if it doesn't have it, it will request information about peers known by the other peer, which are more likely to have it.
00:13:10.500 - 00:13:33.690, Speaker B: To answer another question, is the way to protect data using password and IPFS? Sure, I guess. Two ways you could do it. You could encrypt the data before you upload it like you would on the regular web. Another way, if you wanted to use IPFS in like a private swarm way. So it's just your own nodes and they're communicating in encrypted fashion. We do support that. It's an experimental feature called a private network, and everything's encrypted through, I believe, like an AAS key or something.
00:13:33.690 - 00:13:40.270, Speaker B: And oh, any questions that I don't get to, I'm going to try to get to all of them at the end.
00:13:41.200 - 00:13:49.756, Speaker C: So now that we have a database which is maintained collectively by all the peers in the system, how does IPFS use? It simple. When the content is added to IPFS.
00:13:49.788 - 00:13:52.000, Speaker B: A peer will insert one row in the DHT.
00:13:53.300 - 00:14:36.764, Speaker C: Keys are either content IDs or peer IDs. Peers can add rows to the DHT declaring a their peer ID provides specific CIDs and b how to connect with their peer ID. Peers can then query the DHT to find which peer ID is providing which content IDs. Peers can also query the DHT to find information on how to connect to that peer ID. Publishing this row involves finding a peer ID similar enough to the Content ID to store the row. In short, any peer that wants to download some content will have to do two things. First, well, first, query the DHT to find which peer ID is providing the content they're looking for.
00:14:36.764 - 00:15:21.256, Speaker C: Second, query the DHT to find information on how to connect to that peer ID. At the end of the DHT queries, a peer knows who has the content it wants and where to get it. Now that we've gone over obtaining a CID, advertising it on the network, and locating content, let's take a brief look at transferring content. The last step to retrieve content in IPFS is, of course, to download it, because we know how to contact the peer holding the content and we know what content we want, we can connect, receive, and verify it. This means that any content received through IPFS is authentic and matches the request. Once content is downloaded, the local peer.
00:15:21.288 - 00:15:23.356, Speaker B: Will advertise itself as the provider for.
00:15:23.378 - 00:16:18.960, Speaker C: That content on the DHT, making it available to other peers for download. The protocol we use to download files is called Bitswap, and it also works for quick discovery by asking all neighbors whether they have the content. IPFS really is useful to anyone who wants to serve or retrieve content on the web, which is almost everyone. As certain pieces of content get more popular, the data becomes more readily available and resilient. But why would random people help store my digital content? Well, the answer is they likely wouldn't unless you pay them or they like you or the data you create. Also, if you pay for just a single provider, you're kind of losing some of the beauty of decentralization and trustlessness, because you now have to trust that single provider to make your data available. If their servers go down, your data may be temporarily or even permanently inaccessible.
00:16:19.940 - 00:16:24.268, Speaker B: And another question any free IPFS storage networks except for Pinata?
00:16:24.444 - 00:16:25.024, Speaker C: Absolutely.
00:16:25.142 - 00:16:27.328, Speaker B: If you want to store general data.
00:16:27.494 - 00:16:32.260, Speaker C: There is Web Three storage, and if you want to store NFTs, there is NFT storage.
00:16:33.320 - 00:16:37.184, Speaker B: And then I guess I'll sneak another question in. Can we stream video content from IPFS.
00:16:37.232 - 00:16:39.508, Speaker C: Into our D app?
00:16:39.674 - 00:16:58.196, Speaker B: Yeah, you absolutely can, but it might be an interesting challenge, and it would actually be an awesome thing for hackathon. Yeah, I'm just going to continue. So is there a decentralized and reliable alternative?
00:16:58.308 - 00:16:59.508, Speaker C: The answer is yes.
00:16:59.614 - 00:17:20.508, Speaker B: And that's where we start talking about Filecoin. Oh, I really like this question. Is there any gas fee concept in IPFS for writing data? If yes, how do we calculate gas? I actually don't mention this in the presentation, so IPFS actually doesn't use a blockchain at all, so there are no gas fees associated to anything. Also, when you add data on, as I mentioned previously, it's just getting added.
00:17:20.524 - 00:17:21.948, Speaker C: To your own local node, and it's.
00:17:21.964 - 00:17:30.400, Speaker B: Not being automatically replicated to other providers. This is why I've mentioned, like, Web Three Storage and NFT Storage, if you wanted, like a simple way to bootstrap.
00:17:30.560 - 00:17:33.076, Speaker C: Uploading data, and currently both of those.
00:17:33.098 - 00:17:39.924, Speaker B: Services are free for up to 1, then yeah. Can we deploy a react app or any front end application IPFS?
00:17:39.972 - 00:17:41.928, Speaker C: You absolutely can if it's a static website.
00:17:42.014 - 00:17:43.736, Speaker B: But as there's no server back end.
00:17:43.758 - 00:17:46.072, Speaker C: If you rely on a server, you're.
00:17:46.136 - 00:17:51.230, Speaker B: Still going to need to include that in some way. I'm just going to continue.
00:17:53.760 - 00:17:57.724, Speaker C: Filecoin is storage designed for Web Three from the ground up, it's compatible with.
00:17:57.762 - 00:18:00.172, Speaker B: IPFS and other existing Web Three technologies.
00:18:00.236 - 00:18:50.210, Speaker C: Such as near and many others. It's cryptographically Verifiable, so you can store CIDs on any blockchain, really, and reliably retrieve the same data every time, provided you have a storage deal made over Filecoin at over 18 million terabytes as of February 2022. That's capacity, which could store almost 3% of the world's data and the network is still growing at a very rapid pace. This is enough capacity for almost any use cases, and there are already many organizations and people using Filecoin to store data. Let's take a moment to talk about the anatomy of a filecoin storage deal. First, we have proof of replication. This proves the storage provider is storing a unique copy of the original data.
00:18:50.210 - 00:19:09.168, Speaker C: There's proof of spacetime which proves data is stored continuously over time. Storage providers must stake filecoin phil as collateral to dissuade malicious activity. Storage providers buy phil, put it up as collateral, and must have internet connection.
00:19:09.344 - 00:19:11.236, Speaker B: Or yeah, connectivity and disk space.
00:19:11.338 - 00:19:15.370, Speaker C: They get paid in and earn fill to store and retrieve data.
00:19:16.220 - 00:19:18.680, Speaker B: Storage providers, the users providing the content.
00:19:18.750 - 00:20:11.096, Speaker C: And retrieval services, compete on storage reliability and speed in an open market based on supply and demand for permanence, any storage deal can be renewed an infinite number of times by anyone or anything. For redundancy, there can be an infinite number of copies of the same storage deal. IPFS itself is storage layer agnostic, and that's because of the magic of IPFS content IDs. They're a property of the data itself, which makes them storage layer agnostic, allowing for full flexibility and modularity. The fact that it's storage layer agnostic means that you can combine it with the storage layer of your choice. That could be Filecoin, which we think is a great option, but you may.
00:20:11.118 - 00:20:13.832, Speaker B: Also store your data with centralized cloud.
00:20:13.886 - 00:20:49.910, Speaker C: Providers or any other decentralized storage solution. IPFS and Filecoin are perfect complements for each other. IPFS is great for fast, flexible retrieval over the IPFS network, and can even be accessed through Http gateways. For users not yet equipped with IPFS, though, IPFS needs somewhere to persist. The data. Filecoin answers this problem by offering excellent persistence and verifiability through distributed storage deals which any storage provider can accept. All right, I promised I'd tell you about some of the tools to help you build your app, so let's go over a few of those now.
00:20:49.910 - 00:20:52.888, Speaker C: But right before that, let's take a.
00:20:52.894 - 00:20:56.570, Speaker B: Second to talk about storing and providing data.
00:20:57.020 - 00:21:06.270, Speaker C: Sorry, storing and retrieving Data we highly recommend choosing a storage helper. They simplify deals and workflows, making it fast and easy to build.
00:21:08.080 - 00:21:29.152, Speaker B: Oh, another simple question, it seems how to retrieve the latest version of the data a CID will always refer to. So when you generate a CID off a piece of data, think of it kind of like a hash. There is some chunking involved, but an easy way to think of it is like a hash or a fingerprint that will always refer to that version of the data.
00:21:29.206 - 00:21:32.608, Speaker C: So when you share that CID, it.
00:21:32.614 - 00:21:35.524, Speaker B: Will always refer to that version. And then we have a new version of the data.
00:21:35.562 - 00:21:36.816, Speaker C: You'd get a new CID.
00:21:36.928 - 00:21:38.468, Speaker B: When you share that, it'll refer to.
00:21:38.474 - 00:21:39.460, Speaker C: The new version.
00:21:42.950 - 00:21:46.566, Speaker B: And hopefully that answered that all right. So let's take a second to talk.
00:21:46.588 - 00:21:48.120, Speaker C: About storing and retrieving data.
00:21:50.570 - 00:21:54.194, Speaker B: Storage helpers simplify deal making in general, finding providers.
00:21:54.242 - 00:21:57.638, Speaker C: Negotiating prices, waiting for confirmations, verifying storage.
00:21:57.814 - 00:22:00.460, Speaker B: Storage providers handle all of that for you.
00:22:01.550 - 00:22:34.334, Speaker C: You can store to both IPFS and Filecoin with a single call IPFS for fast flexible retrieval and Filecoin for persistence and verifiability. A storage provider with Filecoin integration will ensure that you never need to think about these things. So what's out there? First up is Fleek's. IPFS hosting. It's designed for fast, modern, censorship proof websites and web apps on the open web and works with most modern frameworks. It works by connecting up your GitHub repository. Then you add some build settings.
00:22:34.334 - 00:22:56.586, Speaker C: From there, you can deploy your website to IPFS, which is backed up to Filecoin. You can find more information about the services that Fleek offers over at Fleek Co. Web Three Storage is a powerful solution for hosting your data for free. Backed up over Filecoin and available over IPFS, seamlessly Data is immediately uploaded to.
00:22:56.608 - 00:23:07.966, Speaker B: A hosted estuary node and now Elastic IPFS. And I believe there's a little bit more magic working in the background, but it automatically stores the data with up.
00:23:07.988 - 00:23:09.760, Speaker C: To six providers around the world.
00:23:10.290 - 00:23:11.534, Speaker B: It can be used a variety of.
00:23:11.572 - 00:23:41.526, Speaker C: Ways, including the Http API and web interface. NFT Storage is a powerful solution for hosting your NFTs for free. They're also backed up over Filecoin, available over IPFS seamlessly NFT Storage is designed for NFT developers who want free, decentralized storage. You simply upload your data and get back an IPFS CID that can be used in on chain NFT data as a pointer to your content. Storage and retrieval is free, and you get properly formatted metadata back immediately.
00:23:41.558 - 00:23:43.274, Speaker B: After uploading, you can fetch it back.
00:23:43.312 - 00:24:16.134, Speaker C: Via IPFS, and it's backed up to Filecoin via free storage deals. NFT Storage is easily used via its JavaScript client library, their Http API, or it can even be used as a remote pinning service. And finally we have lighthouse. Lighthouse is designed to be the ultimate solution to your permanent data storage needs for a fee you can pay to store your data forever. Lighthouse is a fairly new technology to the family of storage providers, so they're looking for people to try their stack out and provide feedback. I've listed only four storage providers here.
00:24:16.172 - 00:24:18.262, Speaker B: But from ceramic to estroy, there are.
00:24:18.316 - 00:24:45.760, Speaker C: Many, many others to discover. So by now you might be wondering, what can I build with IPFS and Filecoin? Well, we've been brainstorming some ideas to help you get started. But first, let's briefly talk about Web Three enabled architecture and what that looks like. There are several layers to any application, and Web Three offers no exception. You have storage helpers such as Web Three Storage, NFT Storage fleek infura ceramic and more.
00:24:46.610 - 00:24:48.078, Speaker B: There are so many tools out there.
00:24:48.084 - 00:25:18.106, Speaker C: For storage, providing that finding the perfect fit for your project should almost certainly be possible. We have the logic layer as well. Through smart contracts, they can point to CIDs served over IPFS, stored via Filecoin, a pinning service, or maybe even persisted through sheer popularity. The logic layer offers endless possibilities with so many technologies, including Ethereum, near, and many, many more. The logo on the far right in the orange box is the logo of the Filecoin virtual machine that's launching around summer this year, which is very soon.
00:25:18.208 - 00:25:24.918, Speaker B: Right now, fully EVM compatible smart contracts will enable colocating, storage, and compute.
00:25:25.094 - 00:25:27.398, Speaker C: And I believe with the Fem we're.
00:25:27.414 - 00:25:29.210, Speaker B: Going to be calling those actors and.
00:25:29.280 - 00:25:32.010, Speaker C: They'Re going to be WASM based or WebAssembly.
00:25:32.590 - 00:25:33.962, Speaker B: Finally, we have the front end.
00:25:34.016 - 00:25:59.238, Speaker C: This is what you see and can include typical Web Two methods like throwing your page on a web server and having some server side code do some work. But also Web Three, where the website is served over the distributed web. Often with integrations like crypto, wallets, and NFTs, serving static websites over IPFS is quite easy. So I hope to see more and more Web Three type front ends as we move forward into the future. All right, so usually I read this.
00:25:59.324 - 00:26:25.998, Speaker B: Entire slide, but in the interest of time and getting to all the questions, and I love all the questions, by the way, everybody, it's really awesome. I'm just going to leave this up for a couple of seconds, and then as soon as I stop talking, I'm just going to go to the next slide. But there will be a recording and you'll be able to pause and look over these ideas. So there are loads of opportunities for.
00:26:26.004 - 00:26:38.850, Speaker C: You to build as you're building. Also consider that not all of you have to build DApps. Feel free to dive deeper into some of these other layers. Filecoin creates a whole new economy with.
00:26:38.920 - 00:26:45.638, Speaker B: Lots of opportunities to create new ventures at every carl, I can provide a.
00:26:45.644 - 00:26:47.000, Speaker C: Link to the slideshow after.
00:26:49.450 - 00:26:51.320, Speaker B: Yeah, and I'll try to remember do that.
00:26:52.730 - 00:26:54.360, Speaker C: I like this visual because.
00:26:56.510 - 00:26:59.450, Speaker B: You can kind of see some exemplary business models.
00:26:59.790 - 00:27:02.700, Speaker C: And how you may build moats around them.
00:27:03.790 - 00:27:12.910, Speaker B: Thank you. More than an exhaustive list, this might be a helpful mental model to think about where you see the most potential.
00:27:13.410 - 00:27:23.534, Speaker C: Do you want to build a great interface that interacts with our tech, the top, or are you interested in building the devtooling that makes smart contract coding easier? Maybe you're excited about the hardware and.
00:27:23.572 - 00:27:25.106, Speaker B: Have ideas on how to optimize a.
00:27:25.128 - 00:27:27.746, Speaker C: Web Three data center. Please join our community.
00:27:27.848 - 00:27:29.838, Speaker B: Everyone is welcome, and we offer tons.
00:27:29.854 - 00:27:32.740, Speaker C: Of support programs beyond hackathons to help you get started.
00:27:33.590 - 00:27:36.386, Speaker B: So we've reached the end of this presentation, so now I'll point you to.
00:27:36.408 - 00:27:48.710, Speaker C: Some resources that you can use to continue learning and hopefully engage with our awesome community. So come join our ecosystem to learn and build. We have an awesome community comprised of builders who help us foster a positive and productive environment.
00:27:48.790 - 00:27:50.058, Speaker B: I highly encourage you to check out.
00:27:50.064 - 00:28:08.958, Speaker C: A resource we've compiled of several tutorials currently available@tinyurl.com. Learn. IPFS filecoin as well. I hope to see you around. I'm available at many hackathons, so please ping me or send me a DM. Even if you're not in a hackathon, I'd love to hear from you. I'm Discordion related Discord servers and the.
00:28:08.964 - 00:28:12.938, Speaker B: Filecoin Slack or Discordion hashtag or pound.
00:28:13.034 - 00:28:15.810, Speaker C: 3926, that's all from me.
00:28:15.880 - 00:28:19.346, Speaker B: I sincerely hope I helped inspire or teach you something, and I hope you.
00:28:19.368 - 00:28:21.042, Speaker C: All have lovely days.
00:28:21.096 - 00:28:24.726, Speaker B: And if we have time for question answering, I'm totally happy to run over.
00:28:24.908 - 00:28:27.926, Speaker A: Yeah, no, you're good for another five minutes. Go ahead.
00:28:28.028 - 00:28:49.990, Speaker B: Awesome. Okay, so I know one question that I didn't quite get to was administrator Filecoin. IPFS is different. Yes, they're totally different. So Filecoin uses a blockchain to use proofs of spacetime.
00:28:50.070 - 00:28:51.546, Speaker C: It's more of a storage solution where.
00:28:51.568 - 00:28:52.990, Speaker B: IPFS is more of a data transfer.
00:28:53.060 - 00:28:54.430, Speaker C: Solution, if that makes sense.
00:28:54.580 - 00:28:59.054, Speaker B: And then Aman actually has their hand raised. So I would like to hear your question.
00:28:59.252 - 00:29:31.194, Speaker D: Sure. Thank you. Thanks for the presentation, by the way. This was super helpful to contextualize everything. So my question is something that happens fairly common with kind of what two things is we know the address of File and we have two entities. One, edits that file and we've hard coded kind of that file link in both of them. So in this situation, because the CID depends on the content itself, if person A, entity A edits a file, we want entity B to view the updated version of that file and read data off that.
00:29:31.194 - 00:29:36.090, Speaker D: How do you kind of handle that? From an implementation encode? What does that look like?
00:29:36.240 - 00:29:44.346, Speaker B: Yeah, I guess to make sure I understand the question correct. So if you share a link to a file once, so if a user.
00:29:44.378 - 00:29:46.122, Speaker C: Views that link later and you've updated.
00:29:46.186 - 00:29:55.522, Speaker B: It to see the new version of the content right. So we actually handle that using IPNs, which is the interplanetary name system, and you can even attach a domain name.
00:29:55.576 - 00:29:57.426, Speaker C: To that using DNS link.
00:29:57.528 - 00:30:02.850, Speaker B: So using a combination of those two technologies, you can get something that feels a lot more like traditional websites.
00:30:03.510 - 00:30:16.360, Speaker D: That makes sense. And I think the user example also falls within my question. I was thinking more like programmatically. Like if you have two different subsystems kind of looking at the same file, but I'd imagine the same solution works in that case as well.
00:30:18.590 - 00:30:19.340, Speaker C: Yes.
00:30:21.550 - 00:30:35.440, Speaker B: I guess I'm not fully understanding the question, but if you type it out to me in Discord or something, or on the forums, I'll definitely try to get to you and hopefully we can get through that. So, next question. I know I missed a lot of questions.
00:30:38.770 - 00:30:39.498, Speaker C: In Filecoin.
00:30:39.514 - 00:31:30.922, Speaker B: If I try to sort of file is bigger than the biggest disk of all storage providers. Will Filecoin automatically split my data storage deals? So I guess the easy way to answer that is the data is already split up, but that gets into much more complicated inner workings of Filecoin. But you're talking about servers that have hundreds of terabytes of storage space. Okay, so what's the speed like for data transfer? The speed is quite fast. I don't know if it's exactly as fast as Http, but it's paralyzed for most use cases, it should be fairly fast, but that would be something that I guess you'd have to test out and see if each stage works exactly how you want it. I personally find it quite fast. Does IPFS have something like an SDK? Yes, if you go to Docs.
00:31:30.922 - 00:32:31.570, Speaker B: IPFS IO, you can go through there's, like APIs. And I guess I'm not entirely sure what you would need specifically for a software development kit, but we do have libraries available for JavaScript and Go, and then there's HTP client libraries, which can interact with an already existing daemon. And yes, definitely. Please post any questions in discord if I can't get to it. What if the storage provider who has part of my data shuts down its PC? So if you're talking like over filecoin, they actually incur harsh network penalties. So unfortunately, while your data will be gone, they will also lose their staked file coin, so they have very high incentives to not do something like that. But in the question of will you be able to access your file if you've only stored it with that one storage provider and nobody else has a copy of it, then no, you won't be able to access your file.
00:32:31.570 - 00:32:37.140, Speaker B: All right, let's see.
00:32:38.950 - 00:32:39.698, Speaker C: When upload the.
00:32:39.704 - 00:32:42.178, Speaker B: Same image, NFTs storage, web Three Storage, they both give different CIDs.
00:32:42.194 - 00:32:43.906, Speaker C: I assume Web Three storage gives CID.
00:32:43.938 - 00:32:48.674, Speaker B: Of the folder, is that correct? Yeah, that is likely correct. Also, NFT Storage will generate NFT metadata.
00:32:48.722 - 00:32:49.866, Speaker C: So I believe they're both giving you.
00:32:49.888 - 00:33:20.850, Speaker B: The CID of a directory, but the NFT storage one will also contain like a metadata file of the NFT metadata. So that's why the root directory CID is different. So I can specify the redundancy with my use of IPFS. Yeah, actually one thing I find really cool about IPFS is what I like to do is I publish my website onto my own node, and then I can just take that CID and upload it to other services like Web Three Storage or whatever service I want, and then that kind of just offers me redundancy immediately.
00:33:21.670 - 00:33:25.714, Speaker C: It's a lot easier than HTP, where you'd have to build up your own.
00:33:25.832 - 00:33:36.722, Speaker B: Cluster of HTP servers. Yeah, hopefully that answered that question. Minimum file coin to stake to become a node validator?
00:33:36.866 - 00:33:38.294, Speaker C: Sorry, I don't actually know the answer.
00:33:38.332 - 00:34:06.002, Speaker B: To that question off the top of my head. That is a really good question, though. I'm unfortunately more of an IPFS expert than a filecoin expert, but that is a good question. What is a storage provider? Who has part of that one? All right, I think we are now at our five minutes. Let's see. There was one question. How does IPFS handle versioning of files? That was the first question asked, and hopefully by the end of the presentation, it makes a bit more sense.
00:34:06.002 - 00:34:15.170, Speaker B: But it's as simple as each new version of a file has a new CID. Cool. Awesome.
00:34:15.320 - 00:34:40.094, Speaker A: Thanks so much, Discordion. Yeah, if he wasn't able to get to your question because of time or just because there was a lot, which is super cool, but things can definitely get lost. Just pop into the Discord discordion. And the team will be in there to answer all your questions. And, yeah, thanks so much for the super impressive and informative workshop. And yeah, happy hacking, everyone.
00:34:40.292 - 00:34:42.730, Speaker B: Thanks for having me. Happy hacking. Bye.
