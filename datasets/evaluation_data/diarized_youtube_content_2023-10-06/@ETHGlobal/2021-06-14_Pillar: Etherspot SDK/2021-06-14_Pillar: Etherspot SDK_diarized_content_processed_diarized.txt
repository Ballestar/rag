00:00:00.090 - 00:00:13.200, Speaker A: Or you can give them towards the end and Prata and Michael will be happy to get back to you as we're doing the live workshop. Prata, I'll let you take it away. And Michael, please introduce yourself.
00:00:17.010 - 00:00:26.038, Speaker B: Hi, I'm Michael, I'm CEO of Pillar. Please introduce yourself.
00:00:26.204 - 00:00:30.710, Speaker C: Hi. I'm partha. I work in pillar along with Michael.
00:00:33.660 - 00:01:12.336, Speaker B: And today we will be talking to you about Ethersport SDK. Before I do that, where does Ethersport come from? Ethersport is brought to you by Pillar. Pillar is a project that has been going for nearly four years. We were one of the early ICOs. In 2017 we had a participation of around close to 9000 people and we are an open source software and with a foundation based in Switzerland, Zook. And we've also got an operating company. Most of the development is being done in London.
00:01:12.336 - 00:02:11.508, Speaker B: However, we've got a decentralized team, which is a global team everywhere, UNAM, the city, we've got it. So one of our ethos was to create a personalized, personal data local, what we've called it, basically to aggregate services and give people control over their data. But what we have embarked on is we have created a wallet initially to be able to do that. And with this wallet it was released in 2018 and with that release it was a key based wallet and it had close to over 50,000 downloads. And we realized once we were going through the wallet infrastructure, we realized how hard it is from user feedback when you lose your keys, when having spending limits, et cetera, within the wallet. The key based wallet was not dynamic enough. Hence we created a smart wallet, smart contract based wallet.
00:02:11.508 - 00:03:23.580, Speaker B: And that was a very good invention, a very good approach for us. However, when we did this, the gas price was so low it was about two gray, then suddenly went to the moon. Now the proposition of having a smart wallet became questionable. Why did we go there? And even worse, why did we deprecate our key wallet and go with the smart wallet which is becoming a barrier to adoption? Then, when we were grappling with this, we started looking into scaling solutions. So in collaboration with the development team called The Bridged, we started working on a specialized state channel which is a payment channel to be implemented within the Pillar ecosystem and we call it PPN, Pillar Payment Network. Now, with this state channel approach, one has Pillar wallet and all they have to do is send another person with a Pillar wallet through our payment channel without paying any gas fees. But with this, again, only the two people or individuals that were on the Pillar wallet can do that.
00:03:23.580 - 00:04:37.156, Speaker B: And it was a haven spoke system where they do not need to have a state channel per every individual they dealt with. Again we found shortcomings with this the staking side and the fact that people were limited to our wallet only and also things such as when we were doing the State Channel there were limits as to how many transactions we can batch. How often does one have to cash out or to commit to the main net in order to be able to make use of the State Channel that we have created? So it was limitations, but it was a learning curve for us. So while this was going on both with the key wallet and the smart wallet we were bringing services throughout the Ethereum Ecosystem. What I mean by that is we had what we called an offer station. What it meant was if, say, for instance someone wanted to exchange a specific token we go and hit all the centralized and decentralized exchange that we interfaced with and bring the offers to the people. So we had all the DeFi players on the exchange.
00:04:37.156 - 00:06:12.832, Speaker B: Quite a lot of the players within the Ethereum ecosystem were integrated with our office engine. Again, this was a mainnet and we also at this point started looking at how to involve those people that contributed to our project in terms of being able to make decisions. So we came up with one approach is creating a dow where the community can govern not only a board of pillar tokens in this case 100 million pillar tokens but at the same time they can make decisions on which features that they would like to be implemented. From the project perspective, we saw this an opportunity to get viable market feedback as well in terms of the way we approached the development. So with all these experiences we put together in terms of the scaling, engaging with the users, et cetera, we created Ethersport, which is a smart contract based approach where not only is it used in our wallet, but it can be offered as a service infrastructure, as a service to the blockchain space whereby other projects DApps. Other wallet providers can take advantage of all the infrastructure we have created using smart wallet technologies so that they can use it as a building block to have an easier, seamless user experience that they want to build. But instead of me giving you the business side the rationale for It partha our head of technologies will delve into more details and give you the explanation.
00:06:12.832 - 00:06:14.768, Speaker B: Please take it away partha.
00:06:14.944 - 00:07:17.364, Speaker C: Thanks, Michael. So to elaborate on what Michael was saying earlier what are the current challenges users or DApps face at the moment when there are several EVM or Ethereum compatible chains available? User onboarding on a side chain is a real pain. To give you an example, let's say there are several. I mean, Kickback is one site which probably you would have been familiar with where it lets you register yourself for an event and stake some funds to attend the event and you get back funds in case you attend it. And if you haven't attended the amount you've staked is evenly distributed among other participants and then you have a very popular, say, exchange on Xdai, like Honeyswap. Now let's assume I'm accessing Honeyswap from the browser. I use MetaMask.
00:07:17.364 - 00:08:09.736, Speaker C: And right now my MetaMask is on ethereum mainnet. So if I were to connect to this website using Connect Wallet, I choose MetaMask. It says that I'm not connected to the appropriate network. Now, ideally we cannot expect a user to have a configuration for any of the side chains on MetaMask defined. So what you would expect the user to do, they would have to go customize, add a custom RPC, add an entry for Xty, choose the network, I mean RPC, URL, chain, ID, et cetera, et cetera, et cetera. Now, all of these are barriers to a user to onboard, to Web three. Now, once we do that, once I have done all these and then I have to choose the extai chain.
00:08:09.736 - 00:08:59.204, Speaker C: After I do that, the connection works and then I can proceed with whatever. Now, it doesn't stop with this. Most of my funds are on Main net and if I need to use this app on Xdai, I would need Dai to be available on Xdai, right? So what I do, I have to use any of the open source bridges available or I could use to transfer funds from Mainnet to Xdai, wait for it to complete, and then I could start interacting with the DAP. So there you have it. You have several such onboarding pains. So user onboarding to side chains is a real pain. And then I would need to select and insert custom RPC, which I was explaining earlier.
00:08:59.204 - 00:09:52.776, Speaker C: And you would have a scenario where the address that you use to interact with the DAP would be different across different chains. For example, say you're interacting on Binance smart chain. You might have a wallet on Binance which might be different to a wallet address that you use in MetaMask. Now, how would you ensure that the funds I mean, the overhead there when you transfer funds from one wallet address to another on a different chain, you have to ensure that you have the addresses correctly. Otherwise you might end up losing funds there as well. The other aspect or other pain with the current approach as such is you'd have to manually switch back and forth between Ethereum Mainnet and your side chain. And as I was describing earlier, you would also have to move your assets from your main net to the sidechain or vice versa.
00:09:52.776 - 00:10:38.570, Speaker C: And one of the main barriers that we see at the moment is very high deployment costs. As Michael was explaining earlier, when we built the Smart Wallet solution back in 2020, the gas price to deploy a contract was probably around two GUI. And then somewhere down the year it shot up to probably 200, 300 GUI. And the exchange rate of Ethereum shot up as well. So it was becoming totally unfeasible for anyone to use Smart Wallets as such. Who would want to spend, say, $68 or $80 to deploy a smart wallet when that is another barrier. And that would stop people from using smart wallets as such.
00:10:38.570 - 00:11:18.904, Speaker C: So this is when we came up with Etherspot. So what is etherswap? Etherspot is a framework that works with any EVM compatible chain. We provide you with a set of smart contracts and services that we expose via an SDK. All of our contracts have been audited by consensus. Diligence our SDK easily helps you onboard users to any erium compatible chain. So at the moment, we support Polygon Binance smart chain Phantom Xdai. We are adding support for Avalanche as we speak.
00:11:18.904 - 00:12:10.356, Speaker C: And for that matter, if your network is EVM compatible, you can use Etherspot SDK to interact with this particular chain. Right? Etherspot also provides you the ability to create direct state channel bridges, which provides DApps, a seamless ability to transfer funds from one network to another. So a DAP can leverage Etherspot's direct state channel bridges and achieve this stem cells. And you wouldn't need any point of time to manually switch networks. Etherspot automatically handles this. The SDK also is available with several helper functions. Like you could generate transactions, you could read transactions, read your balances across different chains.
00:12:10.356 - 00:12:58.868, Speaker C: It also provides you with the ability to create P, two P bridges similar to or an extension or an improvement of the pillar payment network that Michael was describing earlier. And there are other utility functions available as well. Now. Why? Etherspot. How is this different? So, for this, I would need to explain to you how we strictly interpret the Meta transaction pattern. I mean, those of you who worked with Metatransactions would know what metatransaction patterns are. So, in order to explain when I was connecting to this particular wallet, there are two transactions involved, right? So first I sign into this particular website using my MetaMask.
00:12:58.868 - 00:14:04.696, Speaker C: And when I perform a particular transaction, the transaction gets propagated to the blockchain using the same wallet address. Now, what we have achieved with MetaMask is we have segregated this or separated this to two separate things. So the signer wallet is not the same wallet that transmits or broadcasts the transaction to the blockchain. Because we have strictly followed this pattern, you could abstract the RPC endpoint the wallet is interacting with or to propagating the transaction to. So with this, what we do is that you are required to sign a particular message the first time using your particular wallet. It could be through MetaMask if you could connect it through Wallet Connect or any other signing feature. And the actual transaction is broadcasted internally by the Etherspot SDK to the appropriate chain.
00:14:04.696 - 00:15:08.672, Speaker C: So, because we have split this into two separate aspects, we are able to abstract the need to switch networks manually so you achieve better user experience. The other aspect of Etherspot is that we use Create two to counterfactually generate addresses. And these addresses are the same across different chain. So because we do this, you could receive assets on different chains without the wallet being deployed itself. Let me explain to explain on the wallet not being deployed, I'll revisit that later. One major aspect that we are really proud of in Pillar is we've significantly reduced the deployment cost for our smart wallets. You would have come across different smart wallets that are already available.
00:15:08.672 - 00:16:06.464, Speaker C: Each have their own approach to the deployment and the way their contracts are modularized or built. Our approach is slightly different here. And we have an account registry contract that does majority of the bulk of the work. The actual smart wallet that we deploy has only one function, a solidity function which is execute transaction. Majority of our work is handled by the account registry which we deploy on each of the supported chains. As a result of which we have significantly reduced the actual deployment cost of our wallets. So I could tell you that the amount of gas units that we spend for deploying our smart wallets is around 450,000, which has reduced the amount of gas fees with transactions.
00:16:06.464 - 00:16:57.540, Speaker C: And the other main aspect that we provide within Etherspot is we allow you to batch transactions. Now, if you had interacted with any decentralized exchange, you would notice that there's always a need to perform two separate transactions, right? First you would have to say supposing I'm exchanging ETH to Dai or say Dai to USDC. First, I would need to perform an approved transaction. And once that approved transaction goes through, I then have to do the actual transfer. Now, what Etherspot lets you do is you could batch all of these transactions, all of these steps, and execute them as a single step. So this facility is provided you by Etherspot. So this greatly improves your user experience when you use Etherspot.
00:16:57.540 - 00:17:53.990, Speaker C: Let's take an example. You could probably take out a flash loan, then use that flash loan amount to say, exchange one token to another token through an approved function and then do the actual transfer and pocket your profits. And then pay out the transfer, pay out for the fees for the flash loan and all of these. You could also include that with the actual smart wallet deployment. So if you remember earlier I was referring to the actual deployment of a smart wallet. When we built our original smart wallet platform, we were forcing users to deploy their wallet initially before they could interact with it. Right? Now, what we have done is we have pushed this or delayed this to the very last moment.
00:17:53.990 - 00:18:48.888, Speaker C: You can continue to use your wallet addresses across different networks to receive funds, but your actual wallet, smart wallet, is deployed only when you perform a transaction on that particular chain. So because we have delayed this deployment to the very last moment, we've achieved better user experience with this aspect. So this slide gives you a link to various resources that you would need to perform your hacks. During this hackathon we have provided you a link to our Etherspot GitHub address. You have the NPM package available. We've also provided you with several SDK example codes that you could use a link to our Etherspot website. And we also have a playground which you could use to play around with various features that we have.
00:18:48.888 - 00:19:38.560, Speaker C: I'll probably show you an example of how to use this as well. And we also have provided you with a link to our audit report by consensus diligence, right? So let me show you probably a couple of examples of how a code works is my thing viewable probably I'll increase it in case you have difficulty. Hopefully yeah. So all of this code is available on GitHub. The links have been provided in our discord channel as well. But I'm just giving you a demonstration of how it works. So, in order to use the Etherspot SDK, you would need to add it to your package JSON and then you initialize the SDK with a private key.
00:19:38.560 - 00:20:14.400, Speaker C: Here we are using a utility function that generates a random private key. But you could inject your MetaMask Wallet or wallet connect provider or you could hard code your private key here as well. And then this tells you that we are currently connecting to testnet and you could choose the correct network you're connecting to. So you programmatically do that. Right now we have support for all the networks you have. So you have support for BSE, the test network of Bina binance Phantom, several of Ethereum testnets. Then you have support for Polygon and Matic.
00:20:14.400 - 00:20:53.280, Speaker C: Yeah. So you also have support for XTI and so called. So all these right now I choose Coven and then this code demonstrates so after I initialize the SDK, if I were to say all sync account, this creates the counterfactual address and then reports you what would be the address smart wallet address corresponding to mine. So if I were to say NPM run one create wallet. So this gives me the smart wallet address name associated to my.
00:20:56.850 - 00:20:57.366, Speaker A: Wallet.
00:20:57.418 - 00:21:44.080, Speaker C: And this is what you would be using in order to perform your transactions. So there are code examples available to how do you batch transactions. This is an example of a code that tells you how to transfer ETH or the native currency that you're using. So if I were to say change that to Mumbai, I would be using Matic right now because it's on Koan, you're using ETH and then other examples of how you go about transferring tokens as well. You could take a look at our example code bases that I've shared in the link and go through there. And the other aspect I was referring to was the Etherspot playground. This is a website that you could use.
00:21:44.080 - 00:22:54.934, Speaker C: You can access it by going to try Etherspot Dev. The very first thing it lets you initialize your SDK. So you have several different options that you could choose to initialize your SDK. So as I was explaining earlier in the code, you could initialize it with a private key or if say, you want to initialize it based on a key wallet provider or injected via MetaMask, you choose MetaMask here and if you notice down, it tells you the code that you need to add in order to use MetaMask. So Etherspot Bytes itself wraps several of these providers so you could just reuse them in order to create if I were to just say create SDK and execute Run, so there is an SDK already created, so it's not letting me go. So if I were to come back here so I choose MetaMask and that generates the code, I could choose which network I would need to connect to or you could let it Auto Detect. Auto Detect would automatically detect the network based on which network MetaMask is currently connected to and then I click on Run.
00:22:54.934 - 00:24:31.530, Speaker C: This would automatically generate a wallet address for me and you would be able to view the wallet address. So if I were to, say, go into accounts, then sync account? So I'm generating the account via Key Wallet provider and then you can view the balance that you have available here and then you can try out different functions here available in order to run. So if I run Sync Account, it would generate the Smart Wallet address corresponding to my key based wallet and it would show you that. So Compute Contract Account generates the Contract account address corresponding to my key based wallet address. So if you see these two addresses are different, this is the key based address that you use to interact with your smart wallet and this happens to be the actual smart wallet that you use. Etaspot SDK provides you with two separate Smart wallet addresses. One is to perform your regular transactions on different side chains and it also provides you with a separate wallet address that you could use for our P two P solution that we have developed.
00:24:31.530 - 00:25:31.290, Speaker C: This P two P solution also comes up provides you with an ability to create cross chain bridges. So if you want to transfer your tokens from say, Ethereum mainnet to xdai or polygon using our cross chain bridge, you would first have to transfer your funds to this P two P payment address and from here you create a hub and transfer those to the corresponding chain ID you want to proceed with. So yeah, please feel to play around with this. You have other utility functions that help you to search for different token lists. You could check whether a token is available or as part of a particular token list. We also have ENS support and then we provide you with transaction history associated to an address. So yeah, it's pretty much all in one SDK that you could use for all of your functions.
00:25:31.290 - 00:26:21.420, Speaker C: Yeah, going back to now, coming to the hackathon for this particular price. The first price for anyone who uses a good solution that builds using Etherspot SDK is 3000 USD, which is split equally 1500 USDC and 1500 worth Pillar tokens. Second prize, 2000 USD, again split equally between USDC and Pillar tokens. The third prize would win 1000 USD, 500 each. And we have also contributed $1,000 worth of Pillar tokens to be shared amongst all participants who are building using the Etherspot SDK. Finally, Etherspot helps you reduce cost, increase speed and simple user experience. Thanks.
00:26:21.420 - 00:26:24.400, Speaker C: Are there any questions as such?
00:26:33.130 - 00:26:42.486, Speaker A: So thank you so much. Well, someone is asking if you can do a demo migrating tokens from one chain to another. You have two minutes left.
00:26:42.668 - 00:26:57.440, Speaker C: I'm afraid that would take a bit longer. So what I could do is we'll post you a link of our POC that we have created in our Discord Channel along with the source code, which you could use to get that done.
00:26:58.210 - 00:27:11.566, Speaker A: Awesome. Yeah. Any short question? Welcome. Otherwise. Yeah. Feel free, everyone, to join the Discord channel for Pillar. They will be there during the hackathon, especially after this workshop.
00:27:11.566 - 00:27:18.580, Speaker A: I'm sure they'll hop over to see if you guys have more questions and want to chat there. That's really the place to connect with the Pillar team.
00:27:19.350 - 00:27:29.560, Speaker B: And thank you everyone, and we look forward to connecting with you in the coming event and hopefully you will find it useful what we are producing here.
00:27:30.410 - 00:27:36.858, Speaker A: Thank you. Someone is asking from YouTube if you guys have a diagram, any diagrams, I'm not sure.
00:27:37.024 - 00:27:46.300, Speaker C: All of the diagrams are available on our Etherspot website as well as our GitHub links. Feel free to explore there and all of them are available for you to view.
00:27:46.990 - 00:27:58.014, Speaker A: Wonderful. Thank you so much. Thank you, Partha. Thank you, Michael. On this note, we'll wrap it up. We'll see you on discord. And thank you everybody, for joining.
00:27:58.062 - 00:27:59.006, Speaker C: Thanks. Bye.
