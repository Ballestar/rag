00:00:06.950 - 00:00:41.720, Speaker A: Let some people trickle in. Sweet. Okay. Hey everyone. Welcome to building on Gearbox, our workshop with Michael here from Gearbox. We will let him do his thing for a while, but feel free as he is going through his workshop to put some questions in the Zoom chat. And then he'll do a little bit of A-Q-A session at the end.
00:00:41.720 - 00:00:45.900, Speaker A: So, yeah, feel free to take it away now.
00:00:46.910 - 00:01:21.058, Speaker B: Okay, thanks so much. So good to participate in S Global as sponsors. As you know, Gearbox was born in S Global around one year ago. So it became a finalist you can see in presentation of Market Make in January of 2021. And since this day, me and my team work closely to make really leverage composable. So, hello to everyone. Thanks for joining.
00:01:21.058 - 00:02:35.140, Speaker B: And before we will make our hands dirty, just a short recap, what is Gearbox and what we are working on? So, can you see my screen? Just a short question guys, who is already connected? Just ping in a chat that everything is okay. Yeah, cool. Thanks so much. So here you can see that Gearbox is generalized composable leverage Protocol and Gearbox itself based on Udefi Primitive, which is called Credit Account. Technically speaking, Gearbox Credit Account is an isolated smart contract and could be represented like Smart contract Wallet, which could manage your own funds and some margin loan funds. However, you can't get directly access to these funds, but you can use it on different external protocol. So Gearbox itself does not provide end service.
00:02:35.140 - 00:03:52.350, Speaker B: Instead of that, we can talk more about empowering other protocols. So, for example, when you combine Gearbox with Uniswap, you can get margin trading. When you combine Gearbox with Convex or Earn, you can get leverage farming with Lido leverage staking and so on and so on. Now, we are working for V Two and today presentation would be about it. And V Two has already seven major connections with seven major defy protocol such as uniswap V Two, v Three sushi swap earn lida curve and convex. And it's pretty simple to build it because in Amsterdam, when we also participated as sponsors, it was a few teams who were able to make such an integration in less than 30 hours and they also were able to build some interfaces and so on and so on. So, Gearbox itself could create a really interesting way to build composable strategy in the most native way.
00:03:52.350 - 00:04:45.806, Speaker B: So you can consider Credit Account as your MetaMask wallet, but with x ten or x 20 more money. And to talk a little bit how it works, let's go and talk about architecture. So, as you can see on this picture, gearbox is two side protocol. And on the left side you can see liquidity providers. These people or customer segment provides capital to the pool to gain APY and they prefer passive investment strategy. And basically, this left part is similar. Like it works in major lending protocol like compound or hour.
00:04:45.806 - 00:05:39.930, Speaker B: But what really makes gearbox unique is the right part. And here you can see borrower or strategist or trader a person who want to get leverage to do so this person could open credit account. And as I also mentioned, credit Account itself is an isolated smart contract. Then borrower could send initial funds on it. And this credit account has an ability to take margin loan from the pool. So after opening credit account it has two source of funds. The first part is initial funds which were taken from borrower and another part is margin loan or leverage which were taken from the pool.
00:05:39.930 - 00:06:42.286, Speaker B: Then you as a borrower can send different transactions to a special smart contract which is called Credit Manager. It checks them not to be malicious and if everything is okay, they would be executed on behalf of credit account on third party protocols. So let's go through example to show how it works. Here you can see how to open credit account and today we will check how to do this programmatically of course. So here you can see borrower provide ten ethereum to Credit account and credit Account itself takes 90s from the pool. So after opening credit account you have 100s on it. You can use these funds and manage them across listed protocols and it depends on Credit manager.
00:06:42.286 - 00:07:52.358, Speaker B: In other words, you can simply consider Credit Manager like as policy keeper who knows which contracts are allowed and what you can do. Another part which is pretty significant that this smart contract is nominated in S. This property is called underlying asset or underlying and you can't change it. So your debt, interest rate and fees are always in S. And the last part of course is interest rate because there are no free money anywhere. So when you take this margin loan you should pay some interest and this interest rate is calculated similar like or compound do and independence on pool utilization. So after opening credit account what we can see on this picture you as a trader could of course use these funds to build other strategies.
00:07:52.358 - 00:08:34.470, Speaker B: So here you can see how it works. US borrower send transaction and before it would be executed we make a few checks. The first one we want to check that the target contract is whitelisted. It means that we really allows you to interact with it. And it's done of course to eliminate some malicious smart contract. The next point is also crucial that the token is in allowed list. It means that token which you will get as result could be used as collateral.
00:08:34.470 - 00:10:01.460, Speaker B: And just to simplify the rule, gearbox supports only token which has chain link price feeds. So basically, if this token check have chain link price feed is in this allowed list, this transaction would be executed on behalf of credit account. And then after it, the system will check that health factor is more than one. And it's a very significant term because health factor more than one means that credit account itself could pay the debt and interest rate back. If health factor is less than one, this transaction would be reverted. So basically there is only one case when we can get this health factor less than one if some rates would be changed during some price fluctuations and at this point such account could be liquidated with a similar flow how it happened in Ava or compound. And to talk a little bit more about liquidation and risk model, let's go to basic things in credit account.
00:10:01.460 - 00:10:58.534, Speaker B: So on the right part you can see a graphical representation of credit account. You can see that this credit account is also nominated in S, what means that the debt is always in S interest rate as we discussed before. And here you can see the list of allova tokens. So you can use it for keeping Avidai, USDC link, raptors and so on and so on. Then you can see balances of this credit account and prices. What I really mentioned were taken from chainlink price feed. So to compute portfolio value, it's pretty simple, you can just multiply balance to price and then summarize the result.
00:10:58.534 - 00:12:04.422, Speaker B: So basically the first significant I will provide maybe in the chart parameter is called total value and you can find it in our smart contract. Total value represent how much money you can get if you swap all assets on credit account to underlying one using some prices. Price is taken from chainlink price oracle. The second parameter I will also provide it in the chat, it's called total weighted value or CVV to make a short name. So it looks like similar like portfolio value. But as you can see, there is one more multiplier which is called Lt or liquidation threshold. And liquidation threshold, it's a really key parameter for each asset.
00:12:04.422 - 00:13:39.560, Speaker B: It represents the overculturization. So in gearbox to have a time to liquidate some credit account and have enough money to pay back margin loan to the pool, we need to underestimate portfolio value. So liquidation threshold is always less than one and basically you can simply consider it as maximum expected price drop during liquidation. So it's pretty clear for example, that for two stable coins it could be round one and for two high volatile assets like wrapped S and Dai, it would be like 0.7. To set up these parameters precisely, we have a special risk committee and Dow who decides which parameters and which tokens should be added. So when we construct this parameter, which is called just to recap threshold weighted value, it's pretty clear to create another very significant parameter which is called health factor. So, health factor itself is a ratio between threshold weighted value and borrow amount plus interest rate at moment T.
00:13:39.560 - 00:15:28.448, Speaker B: So as I mentioned before, if health factor becomes less than one, such credit account could be liquidated and in this case, liquidator pays at current setup 95% of total value and get all assets from credit account. So it would be always profitable to be liquidator because you get a 5% discount of real market price. And probably the main question here to liquidator is it enough such amount of money to cover gas cost? So basically if you go back to our architecture slide just to recap us borrower open credit account and provide your own part of a funds. So to get x ten for example, credit account could take margin loan nine times more from the pool. Then you send transactions to credit manager and we will discuss a little bit more how to make technically and then they would be executed if they are pretty safe on behalf of credit account on third party protocols. And here you can see how flexibility and composability comes to end user. So basically we can really connect a lot of different protocols and you can create really different and amazing strategies.
00:15:28.448 - 00:16:43.976, Speaker B: For example, you can open credit account then use uniswap to swap S to die which would mean that you short position because you have depth in S. Then you swap it into die and then you can put this die into earn world to get additional yield. So, it's a really interesting feature and to talk a little bit more, why gearbox has unique market offer just a few things which really could be done only using Gearbox. The first part that we can provide like x 20 capital and it's a really huge leverage comparing with other lensing protocols. Majority of them just allow you to up like x three leverage maximum. Another great part which is really inspiring that you can leverage your LP tokens which is pretty cool. For example, on convex now you have on average six or 7% APY.
00:16:43.976 - 00:17:48.000, Speaker B: Just keep in mind with X ten it could be 60% at the lowest estimation and then you can pay for example 4% to the liquidity providers. So we should subtract 60 minus nine times because we get x ten to 4%. So this strategy could generate you at least 24%. And of course you can combine different things and make really cool strategy. And what I also talked about that you can combine different defy strategy to generate more yield, make more money and so on and so on. So, just a question, please write me into chat. Have you any question at this field? Or we can move forward to talk a little bit more how to be integrated and how to build upon Gearbox.
00:17:48.000 - 00:18:44.160, Speaker B: Questions one, questions two. Okay, got it. Thank you. So let's move forward and check a little bit how to work on Gearbox. I will share I will share my Vs code. Just one more question. Can you see my screen source? Yeah.
00:18:44.160 - 00:19:49.476, Speaker B: Cool. Thanks so much. Thanks so much. So at this place it would be just a short things how to build upon gearbox and what we are going to create at the moment using gearbox with two is some, I don't know, earn vault or something like that where could be Tokenized vault which follow ERC 46 26 standard. So as after this workshop you will be able to really implement the pretty complex things like earn smart contract but a lot of complex logic could be encapsulated in gearbox. And another part you can see how to build and how really use gearbox. So I have a small boilerplate which I have done before workshop, what is crucial here.
00:19:49.476 - 00:21:18.048, Speaker B: So if you go to package JSON, you can find a really useful NPM package which is called Gearbox Protocolcontracts. It really have some interfaces from our smart contracts and integrations. So it's strongly recommended to use it when you want to build something on gearbox or if you want to use gearbox via TypeScript. Of course it's better to use another very commonly used package which is called Gearbox Protocol SDK. So basically these two packages I strongly commend to use and I make a hard hat initialization, nothing more here, just import all other significant things for development and of course open Zeppelin contracts and some hardhead and other libraries which is always used here. And then I make one smart contract which is called Constants. It doesn't matter, it just have some dump constants which is connected to such a thing.
00:21:18.048 - 00:23:14.032, Speaker B: So basically our goal, as I said, to create some vault and of course vault itself would be tokenized. So it's why I called my smart contract gearbox vault and it follows ERC 20 so it itself inherits ERC 20 and let's call this Token all the gearbox vault or Gvt. So you can see it here and there are some very significant part just I want to tell you a little bit more until we will go and implement something. So here, as you can see to work with gearbox as I show you in presentation, we have a special smart contract which is called Icredit Manager. So in some terms you can consider, the logic is here, each pool could be connected with a few credit managers and only credit manager could take funds or eliminate funds from the pool. Then each credit manager has connection with credit accounts. It's a mapping and if we go and check a little bit, let me check what's going on maybe yep, so here you can find a special function getter which could return you the address of each borrower.
00:23:14.032 - 00:24:19.124, Speaker B: So credit manager itself, it keeps all addresses of credit accounts connected and open on it at the moment. As I also mentioned, when we talk a little bit about credit accounts, I said that credit account itself has an underlying token. However, to be more precise, underlying token is also property of credit manager. So basically all things you are going to work with is connected with credit manager. And here you can see some functions exceptions and getters which could be used on credit managers. However, in the second version we use facade development pattern. So all function which you need is located in smart contract which is called Credit facade.
00:24:19.124 - 00:25:27.296, Speaker B: In other world, credit manager itself behaves like a back end and Credit Facade provide all functions you need to interact. So each time, if you want to figure out how it works and so on and so on, please go to our website which has some explanation how it works. I provided in a chart, it's called httpsdev gearbox fi. So you can open and follow it in documentation. You can find some slides and explanation how it works. You can see pools credit accounts and definitely all the information concerning different methods and getters here. So, in our world, what you can see, we just keep credit facade because credit facade itself is enough to manage our credit account.
00:25:27.296 - 00:26:21.228, Speaker B: And as you can see here, the logic is following. So what we are going to do, we will deploy this gearbox vault. Then gearbox vault should open credit account and then people would be able to deposit die into this gearbox vault and get Gvt as you can see. Or they could withdraw Gvt to get die back. So it's a simple tokenized vault as usual. And another part, what we are going to do we will build just not to be out of time that you as a vault manager. So, for simplicity, we call this role manager.
00:26:21.228 - 00:27:01.470, Speaker B: And it's also just an address of MSG. Sender for simplicity here, which would really be responsible for changing strategy. So here we are going to implement two strategy. One strategy is provide die into y urine die. And another part is provide die interconvex three CRV pool. So basically, it's a pretty interesting option. For example, you can create a special role which would really check different API and compare them.
00:27:01.470 - 00:28:22.360, Speaker B: If yearn die pool will provide higher API, the system could switch everything to wire dai and generate more yield for token vault holders. If convex would provide higher APY, you can switch. And of course, all concepts which we discussed today would also work for everything. So basically, you can definitely not only focus on die and convict three pool, you can create a few different strategies, make different switches and so on and so on. And just keep in mind because gearbox could be considered a credit account itself, credit account itself as smart contract wallet. So switching cost between different strategies would be without big overhead when you compare them with your native actions using MetaMask. So it would draftly cost, how much gas you need to pay when you close earn position and you will die as a result.
00:28:22.360 - 00:29:00.532, Speaker B: And then when you construct your convex take position. So, pretty cool, no predefined strategy, you can do everything. Is it clear at this point what I'm talking guys, press yes. Or let's make a short Quinnization to move forward see your developers. Wow on a call? Yeah. Cool, thank you. Cool, thanks so much.
00:29:00.532 - 00:30:44.278, Speaker B: So basically let's make hands dirty. And the first point what we should really do to be able to work with credit account and our idea and what I also told you that with this credit account and smart contract wallet we can get leverage and for end users who provide money for this tokenized vault it could be very profitable to buy your tokens. So to do so the first function which we are going to really make here would be called openca and of course it should be external and manager only because opening credit account as I also mentioned is allowed only for credit manager. So to open credit account it's pretty simple. We should go and check our credit facade interface it's here and here you can find a function which is called OpenCredit account. So for our purposes it's much easier to use it. So for some advanced usage there is some multicolored options and multicol could help you to execute different transactions during opening credit account.
00:30:44.278 - 00:32:38.342, Speaker B: For our purposes what we are going to do is to open credit account. So here as you can see amount it's how much money you're going to provide here on behalf of it's the address which would have such an account leverage factor is leverage we are going to take and referral code does not matter. It's designed for referral program so we can simply skip it as zero. So I just copy this function go back to my wall it and here's and another part which is also very significant at this point that credit account itself when you open it will withdraw this amount of money from your account. So from account which try to open it in our case this amount would be withdrawn from our smart contract. Probably it's better to add something like ERC 20 at asset transfer from Mg sender. So at this line I transfer funds from manager because manager executes this function to this smart contract.
00:32:38.342 - 00:34:36.146, Speaker B: And the last point that we should definitely talk about that credit account itself and credit manager has a policy like a minimum borrowed amount. In other cases this is minimum borrowed amount means that how much money as minimum you can borrow from the pool it's done to make liquidation profitable. So to get it we can simply can simply get the instance of credit manager and ask like borrowed and let's divide them for four. So on behalf of of course I am going to that this smart contract would have this account leverage factor is how much money we want to take from the pool it's like multiplier in our case let's talk about x five it doesn't matter but it's okay to get these things. And here you can see why I put four here and 400 here and referral code you can skip it as zero now it's okay. So basically what we have done here, we provide an amount. We really transfer Dai tokens from MSG sender to this smart contract in amount whatever we need to open x five credit account.
00:34:36.146 - 00:35:23.890, Speaker B: So we will provide some part from us and then of course we will get them from the pool. So now it seems that we have investment in size of amount. Maybe the latest things we want to do is to mint MSG Sender this amount. Because when you open credit account you provide your funds. So we need to mint our vault tokens Gvt tokens to MSG. Sender a person, a manager who establish this wall. So basically of course we can make this function much better.
00:35:23.890 - 00:37:05.890, Speaker B: For example, we can check and add some requirements here not to be executed if smart contract has already opened account. To do so, you can just check that this property which is called credit accounts when you provide the address of this smart contract returns zero which means zero address and this smart contract do not have it. So basically it's the first point which we have done how to open credit account. So now it's possible for us to really make next steps and next steps what I'm going to do is how to really add money to credit account. So basically let's consider the next point. As your user who want to provide money for this strategy so user will provide some amount, let's call this amount some amount to our world and as a result we should mint some tokens gvt tokens to address provide as receiver. I think it's a pretty clear task here to do so.
00:37:05.890 - 00:38:25.840, Speaker B: It's also pretty simple to do as we've done before. At first point, we should just transfer money from people who call this function to this smart contract and amount. So now we take amount which will ask from this parameter and now these funds on our smart contract. The next point what we are going to do because now we have money is to really provide them into smart contract. To do so we have a function which called add collateral sorry why it doesn't work? So if we go to credit facade as well and check add collateral, you can see parameters it asked us to provide on behalf of. So this is the smart credit account owner which would get collateral. So for example, if you are going to build something like DeFiSaver or something like that, you can provide collateral for some external smart contract.
00:38:25.840 - 00:39:09.570, Speaker B: It's up to you. It's why it's done. By design, token is addressed because it does not really require you can provide any token from a lobbit token list what we've mentioned before and of course amount as well. So when we go to our vault smart contract you can see here add collateral function. What I really want to do that our smart contract would be a credit account holder. I want to provide token which is asset. So basically asset is underlying token and the size is amount.
00:39:09.570 - 00:40:47.708, Speaker B: So it's also pretty simple and the latest things I want to implement here is just to mint tokens in terms of amount. But here a new problem comes because you run deposit maybe a little bit later and some people who invested money before you already get some interest rate or maybe take some losses. It's also possible if you manage some risky strategies. But we are talking of course about LP strategies and LP strategies itself are pretty safe. So no, here one more error, sorry, we should talk about receiver because receiver will get so to do so let's compute how much shares we should provide and shares as you know it's your amount of money and then it's pretty interesting to understand how much money we have at the moment. To do so we know that we have a total supply and at the same point, do you remember we talked during risk and liquidation slide that we have a parameter which is called total value total value. Just to recap here is the sum of pi to CI.
00:40:47.708 - 00:42:17.508, Speaker B: So we compute how much money we have on credit account. So our logic here is to really understand the share value is to take total value, divide it to four because we have like because we have x five leverage. So now when we compute this share it's how much money and of course we should divide one more time to total supply function to get price of each share. Hope it's pretty clear. So let's share price equals and then as I also mentioned, we have a crazy cool smart contract which is called credit facade and it hold method which calls calc total value and let's go and check how it works there. So here you can see this method is designed to be used with a lot of flexibility. So itself it does not get borrower or credit account holder.
00:42:17.508 - 00:43:20.790, Speaker B: Instead of that, it gets a real address of smart contract and it returns two parameters. The first one is a total value and the second one is threshold weighted value. So if you go back to our smart contract we need to make one more interaction. We do not need this threshold weighted value and we should provide address of credit account. So now it's okay, but we do not know what's the address of credit account because we know only address of this smart contract which is owner of this credit account. To do so we have a really good function which is called great. It could be done a little bit more optimized and get credit account or reward.
00:43:20.790 - 00:44:52.924, Speaker B: And here we should provide the address. So if we go back here and check it so you can see we provide the address of borrower and it returns the address of credit account which just to remind is smart contract wallet here. If borrower has no open credit account for some particular credit manager, it just rewards. So here you can see step by step on the first point we compute this credit account address. Then we called function which is called calc total value and provide credit account as a parameter so it do all mass for us and return total value and threshold total value. Of course, there is no need to use threshold weighted value for us and at this point we should just make the last computation divide five divide total supply if I remember correctly. Let me check, I forgot.
00:44:52.924 - 00:46:31.474, Speaker B: Should I make underscore or not? But I think it's not significant here so is it clear why share price could be calculated this way? Basically the next point, which we can see. And now we have a really clear picture how it work and how to make deposit function. And of course, you make and done this with Row on your own and the last part, what I know that I have only five minutes, is how to manage this thing. So, basically, to do so, how to provide this money, which we just sent using Ad collateral method the last point is how? To provide them to wire. So let's imagine we have to earn and we need to call it. So to do so, we need to really find the first, the smart contract, which is called adapter. And in Gearbox, if you want to interact with third party protocol like Earn uniswap wherever you want, you should really send the same transaction.
00:46:31.474 - 00:47:53.882, Speaker B: Like to original smart contract for Earn, you want to call method which is called deposit. And as I mentioned this deposit should be called not on original smart contract, but on adapter. And if we do so, everything would be okay. All funds of our credit account would be used to do so. We needed first to find address of earn adapter to make this happens we should go also to credit facade and it has special method which is called contract to adapter so pretty easy you provide address of smart contract you want to interact and it returns the address of adapter. And then when you call the same function like original earn, it would be done there. So let's go and check the last item of this puzzle so I go to create facade your contract adapter.
00:47:53.882 - 00:48:33.944, Speaker B: It get address and return address. So here I take the constant which is called Earn dipool here. So now I know the address of Earn Adapter. So the latest things I want to implement here. Here I also call method, add collateral. So now all funds which were taken from this user are on our credit account. And the last part to really construct this function, which is called deposit, is to call deposit function to do.
00:48:33.944 - 00:49:20.916, Speaker B: So I can simply get original Earn interface, which is pretty cool. So it's a really amazing feature of Gearbox. You shouldn't learn new APY or something like that, then. I should call a function deposit. And this what you should done to provide money because adapter itself create all needed allowance for credit account you shouldn't focus on that. So here you can see you simply call deposit the same way you will run deposit on your own if you want to take money. But here, as you can see, we provide collateral here and add deposit.
00:49:20.916 - 00:50:25.768, Speaker B: And another part, it was like a home task if you want to accomplish it to make a little bit better and to keep leverage, of course we can increase debt. This function is used to still get X four or our money. Because as you can see, when we called ad collateral, it means that from our user we transfer some die amount to create account. But transferring this amount do not provide your immediately leverage. So we withdraw money from user, send them to this credit account. And the last part when you call the function increase depth I do not really believe me that increase debt. Yes, just to keep the things and time for coincissation.
00:50:25.768 - 00:51:19.324, Speaker B: When we really call this function increase depth with some parameters it would really take from the pool another margin loan to keep these funds like x five and then earn function deposit will deposit five times more money than you provide here. Basically it's a short explanation how to build vault. It's not a resume and of course a lot of stuff should be done. But basically I hope during this example I go through basic concept and if you would decide to build upon Gearbox, feel free to ask on discord or go to dev documentation to find answers. And we are here to help you. So thanks so much. Oh, pretty cool.
00:51:19.324 - 00:51:48.596, Speaker B: The first question how to get third party protocol white system gearbox. Cool question. Thanks for it to do so, you should build a smart contract which is called Adapter. If you go to dev Gearboxify, there is an example how to build adapter for uniswap three. It's pretty simple. Then of course your adapter should provide some technical security audit. It doesn't matter for hackathon properties.
00:51:48.596 - 00:52:22.310, Speaker B: And the latest point Dao would decide to add you in hackathon. I hope tomorrow we will make a clear covenant deployment for hackathon purposes and to connect it from the covenant network. You should ask me for some test network like forked mainnet or coven. You can just get super user rights and call method which is called Allow contract and it's done. More questions?
00:52:27.160 - 00:52:50.076, Speaker A: Sweet. I think we're good. But yeah, if you do have more questions, be sure to hit up the Gearbox discord channel. And yeah, thank you so much Mikhail, for joining us and for that super informative workshop. And yeah, again discord for all of your questions. They'll be there, just check.
00:52:50.178 - 00:53:22.768, Speaker B: Absolutely. Yeah. And we are here to help you to build. If something unclear, please do not hesitate. We are still building and gearbox itself has ambitions to become like a leverage layer for whole DeFi space. So more integrations vaults upon Gearbox, and a lot of amazing ideas we can discuss with our team. So if you need any support in terms of product, technical help, and so on and so on, feel free.
00:53:22.768 - 00:53:25.130, Speaker B: We are here to help you to build.
00:53:25.580 - 00:53:30.020, Speaker A: Awesome. All right. Thanks, everyone for joining. Have a good day. Bye.
