00:00:00.090 - 00:00:43.594, Speaker A: Getting started here really shortly, joined by the Redstone team, I'll give them a second to give a quick intro about themselves. We will be taking questions at the end of this session today, so make sure to put all of your questions in the chat below. It's a great way to get some FaceTime with team building this project, but also learn about things as they're happening. Without further ado, I'd love to introduce Alex and the Redstone team. They can probably give themselves a better introduction than I can, so I'll give them the floor from here on out. For any of you just joining us, remember, post your questions in the chat below and follow up in Discord. We'll be doing Q A right after that, but I'm excited for a great session today guys.
00:00:43.594 - 00:00:44.860, Speaker A: Thanks for joining us.
00:00:46.350 - 00:01:27.666, Speaker B: Thank you. So, yeah, let's introduce ourselves and then go into the Redstone and Oracle's presentation and workshop. My name is Alex. I'm a software developer at Redstone Oracles Team. And yeah, I have several years of experience mainly in startup environment, but also worked in a software house for some time. I have some small background in marketing as well, but yeah, I have mostly technical education and experience and today I will speak about the Redstone and our approach to Oracles. And maybe Jacob, you can sure, I'm.
00:01:27.698 - 00:02:07.142, Speaker C: Jacob, I am the founder of Redstone. My background is in computer science, mainly the traditional old fashioned boring fintech before the crypto revolution, which I joined 2016. So I used to play many roles like compiled at one startup, being a blockchain architect, being smart contract auditor for open separate, and yeah, I was just frustrated with the state of Oracle, so I couldn't find a really scalable solution. And that's when we came together, started hacking for Redstone and we also got Tarek from our team.
00:02:07.276 - 00:03:19.094, Speaker B: Yeah, hello, my name is Tarek and I'm the newest member of the Redstone. I worked several years on different startups and in different software houses and currently I'm working with Alex on Oracles in the Redstone. Okay, great. So I think we can move to the presentation and I would like to talk a bit more about Oracles in the beginning, then we'll describe more deeply how Redstone Oracles work and then the majority of time we will spend on looking to the code and seeing how to actually use Redstone Oracles. How to use them in your decentralized applications. As you probably know, Oracles are a service that connects blockchain smart contracts with the data from real world. And the main use case for Oracles is the pricing data for cryptocurrencies because one of the main use cases also is lending protocols or options or synthetic assets or stablecoins.
00:03:19.094 - 00:04:28.930, Speaker B: All of them actually use Oracle data because they need to rely on some pricing data from the real world for being able to evaluate value of collateralized assets, because the majority also of these protocols use this collateralized deposition model. So Oracles actually provide the data, pricing data mostly, but also other kinds of data that can be useful in DeFi protocols. And if there is no Oracle service, everything would be just like all these use cases would be impossible. So if you consider blockchains with smart contract support like Ethereum, like Polygon Avalanche or any blockchains with smart contracts as a computer, like decentralized, really secure and quite expensive computer, but still it's an isolated computer which is not connected to the internet or to the external world. And Oracles actually serve as this connector to the real world. They kind of connect blockchain computers to the and what we at Redstone want to do is actually improve this connection. We want to make it faster and make it cheaper.
00:04:28.930 - 00:05:35.926, Speaker B: You may come up with a question why blockchain nodes cannot directly query external APIs and fetch the data from real world. So, there are two reasons for this. The first one is the lack of determinism, which is very important because from its design blockchain smart contracts, blockchains are deterministic, they should evaluate the same output state for the same given inputs. But if nodes would query data from different external APIs in different times, they would definitely receive different values and this would kill this determinism. The second reason is the lack of security and different security issues that come with this interactions with the real world. So these are two reasons that make the underlying blockchain protocol not able to solve this Oracle problem, not able to provide the data from real world directly to the smart contract. There are Oracles which actually solve this problem.
00:05:35.926 - 00:06:48.590, Speaker B: There are several Oracles currently in the market and usually they use two approaches. The first approach is called two phase approach or Request response approach, where if a user wants to send a transaction that wants to consume some data, real world data, they need to send a transaction. And inside this interaction the request will be sent to the Oracle contract that will probably emit some events and some Oracle node would listen to these events and reply to these requests, reply send by sending another transaction. So this approach needs sending two transactions. This approach is quite flexible because this way you can query any data you want, any API, but it's unfortunately quite inconvenient because it breaks the execution flow, because you need to wait for the second transaction to be processed, you need to wait for the response. And for blockchains with long block time, it makes the UX even worse for users. So yeah, this approach is flexible, but not really convenient.
00:06:48.590 - 00:08:23.840, Speaker B: Also it's kind of inconvenient for developers because they need to handle this replies and request replies, which makes the work a bit harder. The second approach, which is much more convenient is called continuous price fees, price feeds or data feeds, which is based on continuously providing data to the smart contracts and saving the data in smart contract storage so that then anytime, any contract can query this Oracle contract and just fetch the latest value. And this approach is very useful for very popular, very demanded use cases. For example, it works for providing enterprise or bitcoin price because this kind of data is really popular, it can be used by many different protocols and it makes sense to just provide it once and use it like fetch it from single place all the time. But unfortunately, it will not work for less popular assets because the revenue that Oracle providers would receive from data consumers would be much lower than the gas costs that they would pay for just providing the data. Additionally, it's quite expensive to save data in smart contract storage. And there is another limitation in terms of update frequency because with this approach you cannot really update data quite frequently, otherwise your costs again grow quite quickly.
00:08:23.840 - 00:10:20.826, Speaker B: So, yeah, there are two approaches that are currently in the market, and we propose the third approach, which is kind of a combination of the previous two ones, but also it uses a pattern similar to meta transactions. And it's based on the fact that data providers do not push data directly to blockchains and they do not need to pay all these huge gas fees, but instead they fetch data from different sources and sign it with their private keys. They create signatures that can prove that the data is valid and is provided by real trusted data provider. And then each time a user wants to consume the data and send a transaction that needs the data to do some action to allow something or block something, they can simply query this signed data package with the signature, with the timestamp and the actual data and attach it to their transaction. And this kind of upgraded transaction can be sent directly to blockchain where Redstone smart contract can extract the data, verify if the signature is valid, it's created by the trusted signer, verify if the timestamp is not too old and if yes, then they can pass data to the target DeFi contract and process it further. And this approach is actually convenient because you can use the latest values, you can really update it quite frequently because it's really cheap, but it's also very flexible because you can connect to different sources and provide huge amounts of different data with low cost because you don't need to pay the gas costs. I would repeat again how this works from the technical perspective.
00:10:20.826 - 00:11:56.098, Speaker B: So if a DeFi user wants to understand a transaction, they prepare their original transaction and then fetch the data from some source and encode the data using some in a very efficient data structure, which is essentially array an. Array of bytes and attach this data like price data or any other kind of data with signature and with timestamp to the transaction called data. And then this transaction with the appended signed data can be sent to the redstone helper contract which extracts the data with the signature verifies, the signature verifies, the timestamp, and if everything is valid, then the data is being passed to the DeFi contract. The place where all these signed messages are being kept. We call it abstractly as a redstone cache layer, which currently consists of several light nodes provided by redstone and also as an additional source by Streamer network. Streamer is a decentralized Pub sub network which is just a perfect match for this use case because we simply need to relay the data, we don't need to store them. So it's kind of a decentralized and efficient Ram which stores data for a short period of time that can be used by users, but they don't need to be stored all the time.
00:11:56.098 - 00:13:38.420, Speaker B: And another very nice feature that comes with this design, with this Oracle's design, is that Oracles that work this way are cross chain by definition because this cache layer can be used by any users and these upgraded transactions can be sent to any target blockchains. So users on Ethereum or Avalanche or Polygon can simply developers on these blockchains can simply integrate redstone right away using current data providers. The very important topic about cost, we put much effort for implementation this signature verification and extraction part and it's implemented mostly in solidity assembly or Yule, which actually allows us to have this verification even cheaper than fetching data from external contracts like it's done in other Oracles. So the data access cost is a bit even cheaper than in other Oracles. But the most cool part, the coolest part is actually in the data storage cost because thanks to the lack of pushing data all the time to blockchains, we don't need to pay the data storage costs on blockchain. And thanks to this, it's just really much, much cheaper. We use riff as a kind of backup storage, but it's still very cheap option comparing to storing data in blockchains because blockchains just were not designed to store large sets of data.
00:13:38.420 - 00:15:13.600, Speaker B: Yeah, now I will show you a little bit like what kind of data we already provide and how to use the redstone data in your decentralized applications and your smart contracts. So if you go to app redstone finance, you can see this application that shows the data that we currently are able to provide with the much lower costs comparing to other Oracles. We provide more than 1000 assets, including crypto, but also stocks, currencies and some ecosystem related tokens, for example for Avalanche or for Arweave, we also provide commodities and ETFs grains. Yeah, and lately we added the feature with providing data from even custom URLs requested by developers. So, as I've said, we fetch data from more than 60 sources. If you go, for example, to the other price and select the redstone provider, you can see that the data has been fetched from 40 sources and we simply get the median value to have this like the most fair value of the enterprise and the most stable to be able to work correctly. Even if few sources are manipulated or compromised then still the value will make sense and the number of sources makes the value more secure and more fair.
00:15:13.600 - 00:16:31.434, Speaker B: So yeah, you can also go to data feeds and see the data feeds that are currently available. We also have a production data feed which is used by a Delta prime application running on avalanche mainnet. But we also have several demo data feeds that can be used on hackathon with different proposals. For example main redstone data feed that contains almost all the feeds or stocks data feed with the majority of stocks and commodities. And as I've said, we recently added custom URLs data feed which actually contains data from selected URLs given by users. You can also set up your own data feed, go into this link, custom URLs will open another application where you can see the registered data feeds with different URLs. So we can go back to the data tab and as you can see, data is being provided for a bit more than one day I guess.
00:16:31.434 - 00:18:01.910, Speaker B: And it fetches data from this URL and then extracts the number value using this JSON path. JSON path is a language which describes transformation from JSON to some JSON or other value, for example a number. So yeah, you can also request your own data feed with the given URL. So let's try to do this. Now to do this you should click this create new, provide some URL and then provide some JSON path. But let's click evaluate to get the response from this URL like live response and see what kind of data we can query using this JSON path language. It always starts with the dollar sign and then dot, then you can select row and as you can see we have now the value of this row property, then ETH USD and for example we can add the feed with low our value and can also add some comments here and then simply click subscribe.
00:18:01.910 - 00:19:06.890, Speaker B: You will not be able to subscribe to the same like to the URL with JSON pub that are already subscribed. Yeah, as you can see it's pending and it should be added in a few seconds I think. So if we refresh the page yeah it's added. And now you can use this data using this Identifier. You can go here again use this Identifier in your smart contract and use the data. And now let me show how to actually use the data in your smart contracts and in your applications. So as a use case with the redstone with Oracle's data we wanted to create a very simple but also useful example which is a marketplace for NFTs but with an additional feature that it allows to set stable prices, which means that for example, if we operate on ethereum and have ether as a base asset.
00:19:06.890 - 00:19:56.002, Speaker B: We want to give users an option to post sell orders with their NFTs in dollars, but the actual value would be paid in Ethers. But the value paid will always be equal to this amount of dollars. For being able to do this, you actually need the other price. So in this case we have three smart contracts. The first one is very simple, it's essentially just an NFT contract with the sequential ID assignment for tokens. But nothing interesting here, it doesn't use Oracles. We have also marketplace contract which like this contract also doesn't use Oracles.
00:19:56.002 - 00:21:15.670, Speaker B: But it's very simple. Implementation of Marketplace contract for actually the main two functions are post sell order which allows to post sell order and the second buy, which is quite important is the buy function. It allows to buy the NFT for a given order ID. And in this implementation, this function uses internal function get price from order which in this basic implementation of marketplace simply return the order price. So this contract would implement the marketplace without this stable price feature. It's just a price in Ethers or price in Avex if you deploy it on avalanche blockchain. But the whole magic happens in the third contract which is called stable Marketplace which extends the marketplace contract and overwrites this get price from order function in the way that it calculates the expected amount of base assets provided to pay for the NFT to pay for the NFT in giving USD amount.
00:21:15.670 - 00:22:36.350, Speaker B: So, as you can see here, we use Avex as a base asset and also all the prices provided by redstone, all the values provided by redstone are multiplied by 100 million for being able to provide integers. Yeah, and we use here this magic function called get price from MSG which actually does the whole magic under the hood. It extracts the data from the transaction call data, extracts the signature, the timestamp, the value and then also verifies the signature. And you also can specify who you trust, you can specify the signer who is allowed to sign the data packages and here we specify the rest of main signer. You can also go to this GitHub link and see more signers data and addresses that can be used in the contracts. You can also run your own node and we are very open for running own nodes and we're in the process of decentralization the whole solution because currently the majority of nodes is operated by Redstone team, but some partners are starting running their own nodes and this is our plan to have more nodes and more decentralized system. And also you can override the logic for timestamp validation.
00:22:36.350 - 00:24:00.090, Speaker B: Here we just simply return true for test purposes because there are some issues with hard Hat tests. But the default implementation of this function is just allowing the time window within three minutes, which means that timestamps that are older than three minutes before three minutes ago are not allowed will throw an error. Yeah. So this is the first part that should be done for being able to integrate redstone like the slide contract update. But there is also the second part which is updating your JavaScript interface because as I've said, you need to do this magic of fetching data from decentralized cache layer, attaching this to transaction call data and we have implemented a very convenient tool which makes it kind of automatically. The tool is called redstone EVM connector and it exposes this wrapper builder class which can be which actually these three lines is everything you need to do for being able to send transactions with redstone data. Here you can specify the contract, the Etters JS contract.
00:24:00.090 - 00:25:11.534, Speaker B: You should also specify the data feed that you want to use. So, here is the redstone data feed and you can optionally specify the asset that you want to attach to the transaction call data. Yeah, and that's essentially it. After wrapping this contract, you will receive another editjs contract instance but with this additional logic that when you call any function on this contract, for example this getprice function it will under the hood fetch the data from decentralized cache layer from any given sources for given data feed and will automatically serialize them into this bytes array and attach to the transaction. So I can show you in practice how it works because I have implemented a very simple UI for this marketplace app. Yeah, you can go to the stable marketplace redstone finance and let me focus on the core part that actually uses the redstone Oracles. So actually redstone Oracles are used only in Buy function here.
00:25:11.534 - 00:26:09.922, Speaker B: So if we click let me clear, if we click Buy for NFTs under the hood as I've said, there are two requests. First to different sources for this trusted signed data packages. If we see more details about the response, we can see that there is light signature, which is a cryptographic signature created by the provider. There is array of values with identifier with value and there is also a timestamp which is quite important. And as you see, the MetaMask asks us to sign some transaction and if we go to the hex, we can see that the end of this transaction, like f four, one C is the same as the end of the signature. That's because as I've said, the data has been attached to this transaction called Data. So we can simply sign it and send and everything will happen again.
00:26:09.922 - 00:27:06.214, Speaker B: As I've said, the data will be extracted, the signature will be extracted and verified. Yeah, and that's basically how it works and how it can be used in your app. As I've said, we recently added a new feature with these custom URLs. I've already showed you how to set up your own custom URL with this custom JSON path, but let me quickly show how to use it in contracts as well. So here we have a very similar contract to the Stable Price marketplace. We have just a sample function that shows that the value can be fetched from Redstone Oracles. Also we use Get price from NSG and provide this Identifier for data.
00:27:06.214 - 00:28:17.740, Speaker B: I think in this case it's Enterprise. Yeah, we can also go to this link that I showed before and see yeah, it's just like data from this URL. And you can go to the custom URLs manifestobdater at Red, send Finance and see that this is 31 F and e t in the end. So this is this symbol that actually corresponds to this URL and this JSON path. And yeah, this is very similar contract to the one that I showed before. It actually allows to receive data from two signers because we have two independent nodes that provide data from custom URLs requested by users. But in the JavaScript code I will show you example of test here, hardhut test, but actually again we have this example contract which is the Ethers contract object.
00:28:17.740 - 00:29:30.974, Speaker B: We wrap it here using this wrapper builder from Redstone EVM connector. We specify the Redstone custom URLs demo data feed and we also specify this asset with the same asset here. If we don't specify the asset, then all the assets from this data feed will be passed to the transaction, but usually it's not needed, so it's better to specify just to also decrease the gas cost. And we can run this test, it would simply output the value received from Oracle from this URL and from this JSON path. Yeah, I think that's it and we'll be happy to answer your questions if you have some. Just to repeat, you can see everything like all the information at Redstone Finance. This is our official web page describes Oracles and also there is a button to this app redstone finance page with all required information to start using our Oracles.
00:29:30.974 - 00:30:05.336, Speaker B: You can also reach out to us on Discord or Twitter. Better on discord. We are quite active there. Yeah, and I think that's it. Thank you. Right on.
00:30:05.358 - 00:30:42.752, Speaker A: Well, I want to thank Alex and the rest of the team here at Redstone for an incredible presentation. As he mentioned, if there are any last questions, we'd love to get to them right now. Feel free to post them in the chat right now or feel free to come off a mute and tell us your question. And if not, we highly recommend following up in Discord where all the magic happens. Throughout this event, they're going to be highly receptive to questions and they would love to hang out with you guys, meet you and learn more about your projects throughout the rest of the hackathon. I think if there are no more questions, we can probably end the session here. But thanks again to everybody who came out today.
00:30:42.752 - 00:30:55.272, Speaker A: Thanks for your time this afternoon and thanks for learning about Redstone. Thanks to the Redstone team for your time. It's always exciting having these teams here, and I know that our hackers learned a lot from you guys over the last 30 minutes, so I really appreciate that.
00:30:55.326 - 00:31:02.728, Speaker B: Glad to have you. Thank you very much for inviting us. It was great pleasure to speak here. Thank you.
00:31:02.894 - 00:31:10.020, Speaker A: Right on. Good luck, everybody. We're going to be closing the session here, but have fun building, and don't forget to reach out with questions in discord. Bye.
