00:00:12.300 - 00:00:37.770, Speaker A: Hey, everybody, welcome to the Textile introduction to the Filecoin Bridge workshop. Here we have Carson from Textile and he's going to be running it for you guys. If you guys have any questions, just shoot them into the chat. And then we have someone from Textile who's going to be answering those questions live for you. Okay, Carson, you can go ahead and get started.
00:00:39.260 - 00:01:02.652, Speaker B: Cool. All right, thanks a lot for having me. This is our second hackafest event. Always a pretty good time when ETH Global is involved, so pretty happy to be here. I'm going to try to blast through this pretty quick. It's something that our whole team is pretty excited about. And I'm going to try and do something I've never done before.
00:01:02.652 - 00:01:41.772, Speaker B: Well, I've done it before, but it usually fails. So let's see if it goes smoothly this time. I'm going to try and do a live coding session towards the end of this, so let's see how that goes. Anyway, I'm Carson and I'm from the team at Textile. We've been around the DWeb space for good couple of years now. We've worked on projects you may have heard of, like our threads, DB, peer to peer database, our Buckets Blob stores, a bunch of privacy tools. But these days we're pretty heavily focused on onboarding data to the filecoin network, and in particular, doing a lot more cross chain data sourcing and stuff like that.
00:01:41.772 - 00:02:50.800, Speaker B: So today I'm pretty excited to introduce you to some new tech that we've been developing kind of in stealth mode for a little while that's really designed around bringing filecoin to other blockchains, just bringing them together and bridging those systems. So, as I mentioned, if time permitting, I'm going to try and do a live coding demo and we'll hopefully build a real working app just to show you kind of how easy and awesome this stuff is. So usual introductory slides for quite a few years now. A lot of apps built on blockchains have this sort of data storage dilemma that they have to deal with, right? You can't store the data on chain because it's millions of dollars for your average large app gigabytes size storage. So you end up having to think about storing things off chain. And off chain data can end up being pretty fragile and often ends up being a centralized point of failure for your application. So how do we deal with this? Right? And a lot of developers use IPFS that sort of emerge as a de facto solution for a lot of off chain storage things.
00:02:50.800 - 00:03:51.270, Speaker B: So this takes advantage of content addressing to allow for sort of permanent immutable references to stuff off chain that you can stick on chain. And this kind of turns out to be a pretty awesome superpower because this content addressable storage is a perfect fit for immutable blockchains. Here's this thing, it looks like this, and it's stored somewhere else, but I'm going to keep a reference to it here on Chain. But like the Http protocols of today, IPFS is really about data transfer and access. So you still need someone to actually serve that content, just like you still need someone to serve up a website. So the solution for this is a lot of people use things like pinning services or they just get their users to pin their own content or things like that. So keeping it available on the network and with the advent of things like Brave and other browsers embedding IPFS nodes in the browser for really popular content, this is actually turning out to be pretty viable option.
00:03:51.270 - 00:04:39.510, Speaker B: So the more popular bit of content is the more folks provide it to the network, the more likely it'll stick around. But it turns out my SpongeBob fan art NFT images are not quite as popular as I had initially anticipated. And so if I want to keep those around, I need some way to ensure that my images are going to be available over the longer term and so I can turn to pending services if I want. But this kind of relies on me trusting someone to take care of things for me. So enter filecoin. Filecoin builds on the content addressing of IPFS, but it adds longer term data persistence using actual crypto economic incentives so clients can propose deals with miners. Miners promise to store the data and they're penalized if they don't and they'rewarded if they do.
00:04:39.510 - 00:05:37.812, Speaker B: And so we're actually now about to cross something like seven exabytes of storage capacity for Filecoin. So you can actually imagine like a future where apps or smart contracts on any blockchain actually use Filecoin to solve this persistence thing in a permissionless, decentralized and incentivized way. So cool, that's a great problem solved, but we're not quite there yet. So the process of storing, verifying and unsealing this is kind of like how you prove that the data is stored on Filecoin is pretty computationally intensive and expensive and it can take a lot because it's a pretty complicated and expensive and intensive thing to do. Makes sense. And the other end of it is miners that are proving this data on FalcoIn are businesses and so they want to optimize the types of deals that they're accepting. They generally don't want lots of little bits of data, they want to store large data to fill up their storage quotas.
00:05:37.812 - 00:06:38.888, Speaker B: And I'm just seeing Andrew's corrected me. We're actually over nine exabytes of data, so my numbers are old. So enter bridges. That's what I'm going to talk about today. Bridges are shaping up and designed to be this powerful open source protocol or concept for providing permissionless storage to Filecoin and the Filecoin Provable storage blockchain to blockchain users and applications in their native token. So this is kind of a pretty cool thing where you can imagine building an app that needs off chain storage and you don't want to have to have your users hold filecoin or something like that, you want them to be able to store data using your native app tokens, so let's just do that. So from a high level way, bridges work is there's basically a native on chain component, which are smart contracts that provide mediated access to a network of off chain storage providers.
00:06:38.888 - 00:07:32.060, Speaker B: And these providers can handle things like compiling batching and deal making with the filecoin network. And the way that they do that is not necessarily specifically specified. But if there's questions, I can tell you how that happens. And then along the way, the data is actually cached in a highly available IPFS layer. So while the deal and ceiling and all the expensive filecoin stuff is happening, you still get access to your data. So what that means is apps that are using the system and users and developers, they get this sort of like, fast on chain content addressable data that they already have, while the slower provable incentivized storage is making its way onto the filecoin chain. And then the providers also can provide things like indexing and CID mapping and all sorts of powerful features.
00:07:32.060 - 00:07:58.064, Speaker B: So the best part about this is this magical bridge to the filecoin network. It's already real. It really does work. It's already running on near testnet. And so I'm going to show you just how magical this is in a SEC. But even better still, we're building the same magical bridge for the ethereum and polygon ecosystems. And so between you and me, we're going to make this available for the Hack FS hackers.
00:07:58.064 - 00:08:37.376, Speaker B: If you want to start pushing data directly from your ethereum or polygon DApps and pushing it off to filecoin, get in touch in our discord channel. Tweet at me, send pigeons, whatever you want. We'll get you sorted and you can start playing around with this system. So if you're interested in being one of the first to test this out, yeah, do get in touch. Okay, so I'm going to do a demo. I don't usually do this, but I'm going to try and do it live. Obviously, I've also Martha Stewart myself, and I got like pre baked stuff ready to pull out of the oven if time starts to get tight, but we'll see.
00:08:37.376 - 00:09:15.932, Speaker B: This might work. If it does, you'll be super impressed. And if it doesn't, you'll still be impressed because I tried. Right, so there we go. So it's demo time. All right, so I might end up not looking directly at you as we do this, but I'm going to pull this off screen and I'm going to start making something. So what we're going to do, hopefully everybody can see that, okay? And what we're going to do is make a basic create react app.
00:09:15.932 - 00:10:00.028, Speaker B: So I'm in my little workshop Hack FS folder here, and right now I have the completed one. In case everything goes terribly wrong, I can just open that folder. But for now what I'm going to do is I'm going to NPX create React app, let's call it bridge demo without the complete I'm going to use NPM and I'm going to do it in TypeScript because that's the right thing to do. Okay. Type safety is something we all need to keep in mind. So while that's happening, I'm going to talk a little bit about what's going to go on. So we really only need two extra packages while we're doing this.
00:10:00.028 - 00:10:47.384, Speaker B: So we're going to need the Near API JS SDK because we're going to be communicating with the near blockchain and we're going to need Textile's Near Storage SDK at Textile Near Storage. And I've pinned it to two specific versions just so that I know that this thing is actually going to work. But in general, you should just be safe with the latest versions of most things. So we're going to install those things and then that's pretty much all we need. Everything else is going to be sort of like default react type stuff and default react type interactions. So if you are familiar with React, nothing else should be particularly wild or crazy. So I'm just going to bring us up to the top CD bridge demo here.
00:10:47.384 - 00:11:15.380, Speaker B: And we're in there. We got all the normal React stuff. I'm going to move this over so everybody can see that a bit better. There we go. Okay, and so I'm going to NPM install near API JS, and the version is that one. And I'm also going to install the textile near storage. SDK.
00:11:15.380 - 00:11:41.692, Speaker B: And we do for some reason, our version is much bigger than the Near API version. Probably because I'm pretty crazy with the Sembur stuff. Okay, so there we go. We've installed the things we need. And I'm going to use Vs code to edit here because that's also the right thing to do. If you want to do something different, that's okay, too. So here we go.
00:11:41.692 - 00:12:26.380, Speaker B: We got our little app window open here and we're going to dig right in. So first I'm going to do pretty much the only thing you really need. Is that big enough for everybody? Yeah, I can make it a little bit bigger maybe. Okay, cool. We really only need a few extra imports to make this app a D app. So going to copy and paste that. So we've got a couple of things, the Connect method and some types from Near API JS.
00:12:26.380 - 00:13:07.956, Speaker B: And we're just going to import in it from Textile Near Storage. And I'm going to keep it fast and loose with the different quote types. You'll just have to bear with me on that one. Okay? So that's pretty much all we need to import to make this magical thing happen. And then we've got a couple of boilerplate type things to just get the app up and going so these can go right under our imports. So normally if you're doing a near app you might have like a config, like a local config thing? Yeah, that's a good thing to mention. Andrew.
00:13:07.956 - 00:13:41.840, Speaker B: We're doing this all in near anyway. Normally you'd have a config. I'm just going to hard code it here to keep things moving quickly. And this is the contract that we're going to interact with on the near testnet called Filecoin Bridge. Very clever name. And this bit here is pretty much just standard Near DAP stuff. So we're just going to initialize a connection by using the Near Connect method or function.
00:13:41.840 - 00:14:37.190, Speaker B: It's going to return us an object and we're going to use a local key store in browser key store just to keep things simple. So this is sort of like near has a pretty nice default in browser wallet. So we'll do that, we'll get a reference to the wallet and then all we're going to do is initialize our Filecoin Storage SDK by passing in the account that we want to interact with and the contract ID. You can actually leave that out and use the default if you want. And then we've got a connection to the API and everything else is pretty much just going to involve wiring all of these things up. So this is an async thing. So now what I'm going to do is I'm going to init connection here and then I'm going to just set up my app.
00:14:37.190 - 00:15:15.552, Speaker B: Um, and because I'm getting my options in here, I'm just going to pass these into my app. Now TypeScript is going to complain because my app is not expecting these objects. So we'll go and fix that and pass in the props so that we can start doing stuff with it. So I don't know. First thing first. We don't need tests. We're going to just do it right.
00:15:15.552 - 00:15:58.424, Speaker B: So no tests required. Maybe I'm also going to just change the CSS a little bit to simplify things. So we will just leave that. We don't need any logos. Everybody be so impressed with our app that they'll instantly recognize it. We got that and maybe and then I happen to know that I'm going to want this later. So I always just do things correctly the first time as I'm going along.
00:15:58.424 - 00:16:54.160, Speaker B: I recommend it. If you can do that, it's the best way to do it. But just kidding. So next step, we're going to jump into App TSX and we're just going to clear it all out pretty much and don't need any special thing there. We'll call this our demo app perhaps. And now we just got to add some imports. So we're going to import wallet connection from Near API JS, and we're going to import this is just for TypeScript, actually from storage.
00:16:54.160 - 00:17:32.030, Speaker B: We'll define some props. Oops. API is going to be API and Wallet is going to be a wallet connection. So basically we just need two components, right? We need the thing from textile and the thing from near. That's pretty much it. And then in our app here, we're just going to grab references to the wallet and the API. Okay.
00:17:32.030 - 00:18:26.570, Speaker B: And then because we have it, I'm going to use it wallet. If our wallet is signed in, we will display something intelligent like little div with paragraph, which is the wallet account ID. And you can imagine some similar types of interactions with like if you were using Ethers JS or something like that to interact with the Ethereum stuff. Anyway, so there we go. We got some CSS that's working. So I think we can just let's see if this just works. We're just going to start the app.
00:18:26.570 - 00:19:07.048, Speaker B: Yeah, TypeScript makes this all a little bit more serious looking, but at the end of the day it's just Types. But I probably wouldn't be able to pull this off without that type checking. Okay, so here's our app. It's running here. Now I actually have already logged in. So here's our demo app and it's displaying my account ID called Init Testnet because we are in it here, people. And so that's pretty cool.
00:19:07.048 - 00:19:52.100, Speaker B: If you're following along at home, you may not not have already logged in. So yours might just say like undefined or nothing, just blank. So that's okay too. Okay, so now we might as well make it so we can log in and out. And so here's where I'm going to fast forward a little bit and just in here create a new component which I'll call Connect. And I'm just going to copy and paste a bunch of stuff in. And again, TypeScript makes this look more complicated than it really is, but basically we're just getting some references to our wallet and textile.
00:19:52.100 - 00:20:38.932, Speaker B: The near storage SDK provides a helper function to log into accounts. Same deal if you're working with something like Ethersjs will be a similar setup. And so all this is, is a form, a div that if you're signed in, displays a sign out button and if you're not, displays a sign in button. That's pretty much it. So we'll jump back into app. I'm moving super fast so that you think what I'm doing is fancy, but it's really pretty straightforward. I also should mention that a more fleshed out version of this demo app is available on our GitHub and I'll provide a link for that later.
00:20:38.932 - 00:21:21.476, Speaker B: So for folks who want to kind of play around with it afterwards, you can totally do that. So I'm going to just create a reference to or I'm actually just going to connect or add this connect component to our main app and connect it to our wallet. And I've just hit CTRL or Command s. And now we have our Demo app. It's updated over here and I can sign out and I can sign in. So there we go. And I can allow that sort of thing to happen and the app will dump me back in.
00:21:21.476 - 00:21:55.020, Speaker B: And so that's like a near app pretty much done. Now everything is up to us to hook up all of the actual filecoin interactions. And so that's pretty sweet. That's like, one component, and we're done for connecting to near. So now what I'm going to do is I'm going to do the same thing, one component to connect to the bridge system. So I'm going to call this component deposit. TSX.
00:21:55.020 - 00:22:25.492, Speaker B: And what I'm going to do is create a really simple another form. Yeah, here we go. Technically, five minutes left. Well, that's cool. Probably going to go a little bit over, but trust me, it'll be worth it, people. So I'm going to create another component called deposit. And this allows me to deposit funds into the smart contract to open up a storage session to the filecoin network.
00:22:25.492 - 00:22:56.864, Speaker B: All right. And so again, I'm going to add this import deposit from Deposit, and I'm going to stick it in here. Oops. And again, we need a reference to the API. So we'll just do that, and boom. And boom. Okay, cool.
00:22:56.864 - 00:23:35.916, Speaker B: So our app is updated, and what this will allow me to do is to deposit some funds into this on chain component that opens up a storage session. So it's going to request a quarter near. I'm going to say, sure, why not? Carson said I should do this, so I should just do it. And then it dumps us back here if I click release. Now. Whoops. Oh, I don't have a oh, I'm using an account with not enough balance anyway.
00:23:35.916 - 00:23:58.644, Speaker B: That's okay. Let's see how that works. You should probably have enough near in your wallet to actually do all of these interactions. But anyway, so it'll actually say that I have some deposit remaining because my session is not over. Storage sessions last by default for ten minutes. So you can basically upload files to filecoin. Yeah, everybody send me a bunch of near.
00:23:58.644 - 00:24:23.130, Speaker B: Don't do that. That's not advice. Please don't actually do that. Anyway, so there we go. Now we're interacting with the on chain component, and I think we're pretty much out of time, which is a bummer because I didn't show you how to upload some actual data. So I'm going to just sneakily do that. Yeah, this is my classic scam, as Andrew said.
00:24:23.130 - 00:25:12.940, Speaker B: I'm just going to sneakily add one more component here called upload, and see if I can just do it in, like, 1 minute. I'm not going to explain this until after I see it working. So let's see import upload from upload. Okay, cool. So that kind of did work. And so let's see if this is going to work, because now my wallet's out of funds. Now I'm going to pick a GIF.
00:25:12.940 - 00:25:34.912, Speaker B: Oh, my computer has frozen. Thank you. Andrew is explaining what's going on here. It's going to be impressive. Right, here we go. Going to upload this. Going to send it to filecoin.
00:25:34.912 - 00:26:02.888, Speaker B: Let's see if my storage session okay, cool. All right, so here's the IPFS CID that I got there. If I click OK, just pops it down here. Now just to show you that it's actually on IPFS, IPFS IO slash IPFS slash. This cidomg it's there. So that's pretty cool. So it's available on IPFS, but that's not that impressive.
00:26:02.888 - 00:26:36.920, Speaker B: So what you can also do is click this status button and I've just got it wired up to tell me it's batching right now. So basically what's happened is it's fired this off to a storage provider. The provider is going to batch that up with other smaller small files because that's a pretty tiny GIF. And then it's eventually going to compile a deal and send it off to Filecoin and send it off by an auction to get it on the main chain. So that's pretty cool. That's what you need to do. Now I can just sit back and relax and wait for Filecoin reporting to tell me that my thing is on chain.
00:26:36.920 - 00:27:18.250, Speaker B: And we're working on some upgrades to this to provide indexing via the graph and a bunch of other really awesome stuff. But as Andrew's mentioning in the chat here, I can just carry on using this CID as is, as if it's on IPFS, because it is right now, and then it'll eventually also be on Filecoin. And I can upload other things here. And if our session had enough time, eventually when I click release here, it would give me back my funds and then we would be done. So, yeah, there you go. We'll jump back down to our original presentation. I'll finish up here.
00:27:18.250 - 00:27:49.970, Speaker B: Just tell everybody that if you like that. Thank you very much. We're hiring. Come join us and build more cool stuff on Filecoin. If, you're know, come hack with us, build some cool things. Andrew's posting links to the demo or more fleshed out version of this demo in the chat there. And you're good to go.
00:27:49.970 - 00:27:55.990, Speaker B: Get in touch if you want to get on the Ethereum bandwagon as well. Thank you.
00:27:57.560 - 00:28:23.880, Speaker A: Thanks so much, Carson, for this really great workshop. And thank you to your company for sponsoring Hackfs. If you guys want to continue talking to Carson about this, you can check him out on our discord and yeah, that's pretty much it. Thank you guys so much for coming. Thank you for hosting and have a great day. Bye.
00:28:23.960 - 00:28:24.330, Speaker B: Thanks, everybody.
