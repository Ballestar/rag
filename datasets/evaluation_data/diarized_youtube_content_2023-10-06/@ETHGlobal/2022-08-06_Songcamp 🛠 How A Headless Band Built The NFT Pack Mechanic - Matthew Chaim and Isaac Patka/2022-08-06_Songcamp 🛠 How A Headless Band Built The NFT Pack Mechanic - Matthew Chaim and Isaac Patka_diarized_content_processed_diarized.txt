00:00:06.570 - 00:00:25.750, Speaker A: Hello, good morning, good afternoon, good evening. Depending on where you are, we have Matthew from Songcamp and Isaac from Logos dow doing their workshop on how a headless band built the NFT pack mechanic workshop questions go into the zoom chat. They'll be more than happy to answer them for you. And with that being said, I'll hand off the mic to our two speakers.
00:00:28.090 - 00:00:54.954, Speaker B: Hi everyone, thanks for having us. I'll give just a quick intro and then we'll jump into the topic at hand. But yeah, my name is Matthew, musician, been working on Songcamp for the last year and a half. Songcamp, we call it a Web Three laboratory experimenting at the edges of music and the new internet. And we're here to talk about one of the mechanics in the most recent experiment we ran called Chaos. So yeah, that's me. And here's Isaac.
00:00:55.082 - 00:01:21.862, Speaker C: Hey, I'm Isaac. I'm a developer primarily with Logostaw and we got to know the Songcam folks through just like kind of collaborating in various DAOs. And then at e Denver last year, we met up, had coffee and decided to kind of build the contracts together. So excited to kind of talk through those dynamics and show you how you can fork those and use those for similar dynamics for your own applications. Cool.
00:01:21.916 - 00:02:05.380, Speaker B: So I'll share my screen here, making sure this is Viewable by everyone. Chaos is our third kind of flagship experiment in Songcamp. Our experiments take the shape of kind of like a songwriting camp, like a music collaboration experience kind of glued together with a Web Three hackathon. We ran three camps. Our first one was called Genesis about a year, year and a half ago. Second one was called Electra and this one was called Chaos. Chaos was a 77 person group, including those musicians and engineers and then also visual artists, operators, lore, builders, storytellers, podcasters, a big group of 77 of us.
00:02:05.380 - 00:03:11.238, Speaker B: We're going to walk through a bit. I'll give like a quick overview of the project, but we'll zoom in on the kind of distribution mechanic which we're going to talk about here called Chaos Packs. So yeah, as I said, there were 77 of us. We consider everyone in this project an artist. So we were 77 artists and we all joined on March eigth of this year into the songcamp Discord to start our camp, camp Chaos, with the kind of hypothesis can we build a headless band called Chaos where we are all building for this one kind of meta entity called chaos release music and art and NFTs through that brand and then also share in the value flow from that kind of big project as kind of one group moving together. So as you could hear from just the amount of people involved in the different sort of subgroups within that, there's a lot in this project and there were definitely a lot of domains of it. But we're going to zoom in on mainly like the music and visuals and how those came together and then how they were packaged within these packs.
00:03:11.238 - 00:03:52.642, Speaker B: So, just to understand the songwriting camp side of it, there were 45 musicians involved in this camp broken down into 15 bands. And here you can see how we kind of broke that down into different houses. Kind of all these chaotic mechanics to run this very kind of almost like magical journey into a songwriting camp over six weeks. So each house had four bands, plus an alchemist band, which is just a special kind of band making music a little bit differently. But in the end, five bands in each house, 15 bands. And all those bands were essentially given the same task, which was to create one song every two weeks. And we're going to repeat that over a six week period.
00:03:52.642 - 00:04:28.258, Speaker B: So by the end, everyone was part of three different bands, part of three different songs. And at the end of it, we had what looks like this 45 songs. So every act which included each of those two week periods, people were collaborating on a song. They collaborated over three acts. We ended up with 45 songs. These are the song titles. And then with all of that music, we were not just going to release them as one of ones, but this time create a very large NFT project that included that music in it.
00:04:28.258 - 00:05:30.530, Speaker B: So how that was done was on the visual end, there was a generative or primitive way that the COVID artworks were created, much like the PFP projects were used to in the crypto punks style. And these 45 songs were then kind of printed in multitudes of dynamic rarity amongst completely unique generative cover artwork for every single one of these 21,000 pieces. So that creates a big project of a lot of NFTs, a lot of music and visual artwork minted as NFTs. But instead of just minting those one by one and just like clicking mint and getting one song, the idea came for us to and here's a little look at the visual aspect of this project. The idea came to actually package these into songs of four. So the idea was 5000 packs would be created, four songs each. And then you would actually open these packs to get the four songs with complete unique cover artwork included.
00:05:30.530 - 00:06:15.266, Speaker B: So we kind of have like a bit of a visual of that here. This is where the actual sale is still going. But yeah, this is what the pack looks like. And the idea there was to create this is so much artwork, so much music. How can we give everyone their almost like personal EP or their personal experience of this with just four songs? And Will Juergens, who is a longstanding member of our community, actually had that first kind of light bulb moment of what if we actually package these into four? And so Chaos Packs was born in each of them when opened. Four music NFTs, are revealed at random with their own unique cover artwork. Each of these four is a unique song of the 45 songs available.
00:06:15.266 - 00:06:34.570, Speaker B: So you get four songs per pack and you have the choice to either open your pack or keep it closed. So this was the sort of idea of how we were packaging together this sort of chaotic art that was being created in this camp. And that is when Isaac came in to figure out how in the world we were actually going to do this. So I'll pass to you, Isaac.
00:06:35.790 - 00:07:30.726, Speaker C: Thanks. We discussed a lot of different options for how to actually distribute these songs randomly into packs. Yes, if you go back to the previous visual and so actually, so it was split into two. There's the 21,000, because 1000 were generated to go to the actual camp participants themselves. And those actually had royalties attached to them from the rest of the collection. But the 20,000 are the ones that came from packs. So those 20,000 were randomly distributed between token IDs, 1020, 1000, and then they were chopped up into sets of four and distributed into packs.
00:07:30.726 - 00:08:39.134, Speaker C: And then those packs were opened in random orders. So it's kind of like multiple levels of shuffling. We discussed a bunch of different ways of potentially doing this randomness, ranging from having just different song, different token IDs that would get generated, different cases where when you actually open the pack, it would kind of randomly decide based on modular arithmetic, like which song ID it got. But what we actually ended up with was just like distributing all of the songs based on rarities along that kind of continuum of 20,000 songs and then chopping them up into pieces and then having the pack numbers randomly choose a different pack from that continuum. And so once we decided on that mechanic, there was actually a bunch of different ways to handle pack opening. And I simulated a bunch of the different ones to see which one would be more most gas efficient. So if you go to the next slide, this is from Excel, just like a graph of the different pack opening dynamics.
00:08:39.134 - 00:09:38.526, Speaker C: So the most naive implementation, which I called Guess and Check, was like choose a, get a semi, get a semi random number between one and 5000 and if it has not been opened yet, then that's the pack you got. And so every single time that a pack was opened, it might give you a number between one and 5000. And if it collided, meaning and then once it's opened, then you mark it as open. And so in the beginning, very small chance of collisions because there's 5000 different potential packs, you open one, if it has not been opened yet, that's the pack you get. Then you do that for the next one and the next one. And then if it detects a collision, then it increments up to the next pack. So this was fine as you can see, kind of between packs one and like 4000 or something, but it starts getting more and more chaotic, which is kind of funny.
00:09:38.526 - 00:10:59.066, Speaker C: Part of me actually kind of like this dynamic because it was chaotic where as you got closer and closer to the end it got more and more expensive to open the packs because there was a higher chance of getting a collision and having to increment in a loop to find an unopened pack. And so that's why that blue line is like the most naive implementation which is cheap in the beginning but gets really expensive towards the end. So I then was experimenting with different ones where kind of split the 5000 packs into a tree where you could check to see if a specific branch of the tree was filled. And so it was still kind of a naive guess and check algorithm but it was made slightly better. Not necessarily better, but more consistent due to the fact that we could limit the amount of bad potential choices. And so in the worst case you were going to have like 200 loops of a for loop rather than the worst case being 5000 loops of a for loop. So you can see that green, that light green color was about like one and a half times more expensive in the beginning but then it was pretty consistent throughout except that it was actually a bit more chaotic.
00:10:59.066 - 00:12:00.766, Speaker C: So after I tried a couple of these methods, we actually reached out to the Zora team and to get some input on potential ways to do this algorithm. And one of the developers was like hey, I actually wrote code that has done this already. And so he shared this code with me which used this permutation algorithm which would allow you to select an integer from a set and then remove it from the set so that you could never get a collision again. And so that's that yellow line, this is like the Zora algorithm that we implemented to see how efficient that was. But then he said that he thought that there was actually an even better way to do it which used a mapping instead of an array and that was that dark green. This is just kind of interesting to see the different choices that you make with regards to implementing these different algorithms have very different implications. On gas.
00:12:00.766 - 00:13:17.116, Speaker C: We ultimately ended up going with that dark green line which kept gas for opening consistently around 140,000, which was pretty cheap. That's still way cheaper than a normal NFT mint and in this case you're getting four NFDS. Let's see what's the next graph another thing I did was just to make sure that there was no sort of like weird biases in the algorithm with regards to when certain song, certain packs were opened. This is just a blob of uncorrelated stuff which is good and so what I was checking here is as I opened pack numbers, which group of songs got assigned, and since there's no discernible pattern here, I thought, okay, this algorithm is pretty good. And there was no information that somebody could obtain about when they were going to open their pack, which songs they were going to get. Yeah, so the nice thing about all this is I'll share in a bit, this is all open source. So if you're curious about and you can even look through my git history and see all my crappy initial implementations before the final one that I like.
00:13:17.116 - 00:14:16.336, Speaker C: So it's all on the songcamp GitHub. And I think towards the end of this, I might have a chance to kind of walk you through and find some of those. So if you go to contracts on this page, batch shuffle, this is my fork of the logic that the Zor team contributed. So this allows you this is kind of a combination of that logic and some logic from Adam Fuller, who did this Martian Premier League NFT project, which was intern based on, I think, tubby cats or something. So the NFT space is full of borrowed code. So this is like a bunch of different people contributing to create this batch shuffling algorithm to make it so that you can have a different shuffled ID from a discrete set. So in this case, in the constructor you set the available count, which in our case was 5000, the batch size, which was four, and the start shuffle ID, which is just like zero or one, depending on how you want to do it.
00:14:16.336 - 00:15:19.490, Speaker C: And then what you can do is use this inside of the pack opening logic contract to make sure that you're getting a random pack along that continuum of preshuffled songs. So if you go up a couple of levels, in this level, you can see chaos packs and then chaos songs. So packs are the unopened NFTs, and then you can see in songs, that's where the dynamic is of actually opening, which burns the pack and then mints four songs and assigns this shuffled offset. And then if you go up one level to Camp Chaos, this is a hard hat development suite. So if you go to test, you can see I have this end to end, the first file there. That's probably the best place to look if you just want to see how this stuff gets deployed and then how it gets open. So this is a full if you run this, it'll probably take a few minutes to run because this actually goes through and opens like mints 5000 packs and then opens every single one.
00:15:19.490 - 00:16:14.724, Speaker C: You don't generally need to do this, you could make it smaller, but this is like a complete end to end script, which will show you how all the dynamics work. And then if you go up a couple of levels to tasks, you can see this actually has a lot of really useful stuff around generating DNA and images. This is a fork of Hash lips, but I added a bunch of nice utility functions. Like, I separated the DNA generation from the image generation because if you do this at the same time and you're trying to do like, 10,000 things, your computer will it'll take like 7 hours for your computer to do this. And in this case, the Generate DNA script will automatically run in 30 seconds. And so you can kind of do that first and then generate the images and also generate the JSON metadata. I've just kind of split that out into different functions in case you need to mess with stuff.
00:16:14.724 - 00:16:43.372, Speaker C: And that way you don't have to run a seven hour script every time you want to generate your stuff. So all of that stuff is in here. You can also ping me if you're interested in understanding how to do oh, there's also some residual vesidial code in here. I was trying to parallelize the process, generate images, parallel, and workers. But the underlying library that Hashlet uses, called Canvas, is not compatible with parallelizing. And so don't go down that rabbit hole. I already tried.
00:16:43.372 - 00:16:56.688, Speaker C: It doesn't work. But you can see what it would look like if it did work. And maybe Canvas will someday update their library to work in parallel because right now it does not. And it's really slow. So there you go. Cool.
00:16:56.854 - 00:17:20.040, Speaker B: And maybe just I'm not muted. Just to put this all together. And then we could maybe take some questions. This is the website. This is how you actually interact with it. You have all the 45 songs we were talking about here. Listenable on the site with some example cover artwork, and then the actual mint process is minting packs.
00:17:20.040 - 00:17:34.850, Speaker B: And once you mint packs, the packs enter your Chaos Inventory, which I'm not connected right now. Am I signed in? Let's see. I'm not even signed in. Okay, well, can I sign in without you guys seeing what I do?
00:17:35.460 - 00:17:40.480, Speaker C: Yeah, no MetaMask. I don't know. We can see you typing in your password.
00:17:42.980 - 00:17:44.770, Speaker B: Don't fish me. Anyone? Please.
00:17:45.540 - 00:17:48.630, Speaker C: Just paste your seed phrase in the chats and we'll send you some.
00:17:49.160 - 00:18:25.330, Speaker B: Okay, here. So here you can actually see the beautiful artwork here. Artwork done by Jgap designed by losing my Ego front end builds by Daniel Rudkind. And we have here, like, the ability to actually open your packs, which, yeah, as Isaac was saying, burns the pack and then mints those four songs. And then you start filling your Chaos Inventory down here with the songs that you've minted and the COVID artwork you've received from. Yeah, that kind of brings it all together. And that's what we wanted to share with you guys today.
00:18:27.060 - 00:18:28.690, Speaker C: Nice. Any questions?
00:18:30.500 - 00:18:33.340, Speaker A: It looks like helios just sent something in the chat.
00:18:33.420 - 00:19:49.080, Speaker C: Yeah, this would pair really well with some kind of, like, loot crate, kind of thing. Actually thinking of Loot, I think it'd be kind of fun if somebody paired this up with something in the Loot ecosystem in general, where you could shuffle any sort of in game things into this thing in the way that we shuffled the songs. And then you can give people packs to open them because there's actually no requirement for all the packs to be sold before people start opening. So let's imagine that you're, I don't know, fortnite or something, and you have a season full of in game items. You could create those, allow people to buy them, or even drop packs on people periodically throughout a season and allow them to open it and get a random pack of four things. And the only knowledge that people have is what's already been claimed, but there's no indication on what you're going to get next. So I think that there's a lot of potential to use these same dynamics and algorithms in general, like kind of NFE game dynamics.
00:19:58.530 - 00:20:07.460, Speaker A: Well, if anyone else has any questions or anything you want to discuss, definitely feel free to use the Zoom chat or even come off mute yourself to say Live.
00:20:13.820 - 00:20:37.520, Speaker B: I can also ask a question for Isaac because I'd be just interested if you were to go and do this again, would you do anything differently? And I guess maybe a second part to that question, just one maybe potential idea I think we've spoken about a little bit before of including a chain link random number generator or something like that.
00:20:37.590 - 00:21:11.452, Speaker C: Oh yeah. So the RNG part of this is like a very simple implementation. It's technically gameable because it uses previous block hash. And so if you were to use something like Flashbots or if you had control of a minor, you could wait to open a pack until you had an optimal previous block hash. It's like hard to earn, not technically hard to exploit. It would take time to kind of sit there and wait until you open the pack that you want. But this was like, in my mind, an acceptable complexity trade off for this type of application.
00:21:11.452 - 00:22:26.348, Speaker C: Previous block hash is good enough, but there's a version of this that you could do using Chainlink VRF where you would do open pack, and when you opened a pack, it would request a true random number from Chainlink's Oracle. And then when that answer was available, because Chainlink Oracles in this case act as kind of like a question and answer, you would have to hit open pack which asks the question, hey Chainlink, which pack am I going to get? And then their node replies and that's when your pack would be revealed. And in that case it is completely not gameable. So something that I might experiment with maybe, I don't know if Chainlink is sponsoring, but I think if somebody wanted to fork this and add the chainlink DRF, that would be a really cool project. Other than that, I'm trying to think if there's anything else that I would change about the contract. Everything came together pretty smoothly. It actually uses ERC 721 A and that's why opening a pack is so cheap.
00:22:26.348 - 00:22:58.360, Speaker C: It's because when you open a pack, you're getting four consecutive songs from that distribution, and so it's only charging you for one mint. But the contract marks you as getting four consecutive things. So then if you want to transfer one, then it identifies which ones you own in the middle of that chunk of four. But it uses ERC 721 A to make it. So that pack opening costs 150,000 gas, not like 600,000 gas.
00:23:10.800 - 00:23:44.084, Speaker A: Awesome. I guess if that's it for questions, we can end the workshop here today. Thank you so much, Matt and Isaac, for taking the time to do a workshop for metabolism. I'm super excited to see what the hackers learned from this and what they're going to be building for their projects. And to you, hackers, thank you so much for tuning into the workshop. We do have a couple more workshops today, so hope to see all of your faces there as well. And other than that, I hope everyone has a great rest of your day.
00:23:44.202 - 00:23:45.188, Speaker C: Thanks, everyone.
00:23:45.354 - 00:23:46.164, Speaker B: Thanks.
00:23:46.362 - 00:23:49.840, Speaker C: See you. Get forking. Bye.
