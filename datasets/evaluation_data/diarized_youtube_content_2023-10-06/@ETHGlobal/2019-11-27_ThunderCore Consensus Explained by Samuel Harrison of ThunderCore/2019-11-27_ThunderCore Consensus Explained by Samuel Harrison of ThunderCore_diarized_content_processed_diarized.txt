00:00:10.280 - 00:00:57.508, Speaker A: You guys all waiting for me, Sam and Harrison, how's everyone having some fun? So we were going to have a technical presentation to walk everyone through how you would deploy a DAP on Thundercore. Our tech guy got caught in Taiwan and wasn't able to make it out. So they sent me a deck that the product marketer can figure out. And so it's going to be pretty straightforward. It's just laying up a little bit different between traditional Poop of War consensus and what Thunderbore is doing. With our Consensus protocol, no code is in there. It's all graphics and images.
00:00:57.508 - 00:01:53.212, Speaker A: So it's really something that you would see in like a Blockchain 101 Reaper. So if you guys want to go and do real work, then that could also be value for you. But if you want to hang out and listen to me too, I can also I'm happy to walk through it's. It's we'll probably let's do this fairly quickly. How many people do we have here that are actually here versus the ones who are recording in the back? We have like two, one, two. There you go. So my name is Sam Harrison.
00:01:53.212 - 00:02:32.750, Speaker A: I am the head of product marketing at Thundercore. Thundercore is a smart contract platform, much like their Ethereum or any other 2nd 3rd generation blockchain platform. Some things that set us apart. Number one, we start off with being completely EVM compatible. So anything you build on Ethereum can be ported over the Tundra port very easily. The two other points are the ones that are kind of interesting. Our transaction throughput, we're looking at 1200 transactions per second with a substantive confirmation time, which means that if you are a user using these things, then you'd be able to have very seamless experience.
00:02:32.750 - 00:03:20.064, Speaker A: For example, just two weeks ago, I was up in Seattle at the Trufflecon and I ran something called a garage sale, where people would come and they would buy our T shirt that would give them five die with their trust wallet, send it back to me. And it was great. And they were able to do it so quickly. It was like a real world experience with a PayPal instead of all the latency delays. So the question is, how do we achieve that quick and fast throughput at that level, using our consensus? So our consensus protocol is called Pala. P-A-L-A. It's the completion of Alain Xi's work that she did under Cinderella.
00:03:20.064 - 00:03:42.820, Speaker A: And then this is the full implementation. It's called power. Most of us here probably don't actually need to go through this. Just a really quick overview about proof of work consensus algorithm. First generation blockchain. They are powered by proof of work consensus algorithm. Very groundbreaking.
00:03:42.820 - 00:04:49.978, Speaker A: It's designed in such a way that any node can join the distributed PC network. They can collaborate. But in order to extend that blockchain, the nodes in the network have to compete to solve these hard cryptographic puzzles. The first one to solve the problem gets to extend the blockchain and they earn a prize for their hard work. They get little bitcoin not so subtle, but it's slow. And we know it's slow because this data needs to propagate throughout the entire network, right? And having so many nodes compete to solve a cryptographic puzzle, lose tons of electricity, we've seen this over and over again, so it's bad for the on. So to solve these problems, we created the Pala Consensus algorithm.
00:04:49.978 - 00:05:35.020, Speaker A: In Pala, we take only specific proposers that have the privileges to extend the block themselves. To make sure that the proposers are honest, their block must be voted on by a committee of voters. The primary proposer will rapidly create a new block and then send that new block over a high speed network connection to all the different voters. And these voters respond with no. And if two thirds of the voters vote yes, then the block is notarized and is added to the chain. When we have two blocks onto the chain, then that block becomes finalized, meaning that it's not going to change ever. And it'll be immutable part of the immutable record.
00:05:35.020 - 00:07:05.930, Speaker A: Now, occasionally, of course, the big question is, okay, how do we trust that proposer? If that proposer crashes, if it's not online, if you did something malicious, what happens is we move automatically to the next proposer line where the voters vote messages that it's time to switch. And then when two thirds of those votes are collected, then the next proposal becomes the primary proposal and it discontinues from where the last vote very, very rapid. So we're able to achieve this consistency, which is solving a double spend problem, meaning that only one token is sent to one person at a time. And we're able to achieve a license because if something goes down, then we have somebody automatically to fall back on, to continue and always progress. Unlike proof of work, we are a proof of stake protocol. So the proposers and the voters are selected using a proof of stake election process where anybody can become a voter or proposer by staking in with their Thunder token during the election period. And in return, they receive rewards like you wouldn't know if any other stake, based on the amount that they actually stake in bad behavior is double signing or being offline, not being available, be punished by slashing those funds that they've staked in.
00:07:05.930 - 00:07:39.652, Speaker A: So this is the way to which we were able to do a blockchain built on Kala. It's fast, it's secure, and it's fully decentralized and it's fully funded. So I just wanted to run through really quickly kind of what that was. If you have questions, if you want to build something, our portal is available, our developers portal. It's a lot more robust information developers, Thundercore.com. And then you can follow us in discord, which is where a lot of the technical questions happen. The telegram channel.
00:07:39.652 - 00:08:42.250, Speaker A: There's a lot of conversation about trading, a lot of telegram and introductory and then of course our Reddit actually is not very I don't know why that's not because we don't have a ton of people in our Reddit channel, but Twitter is actually that's kind of us that's you guys any questions? Anything you guys want me to talk about anymore? That was just my quick presentation. How long would be your generic commitment to sorry, what was what's your expected latency for commitment? Less than 6 seconds. For sure. We see finality in under a second. A lot of the times what I was going to have a much longer period, 6 seconds. If the latency is longer than 6 seconds, then that triggers a new proposer to be committed. But most of the time our latency is under.
00:08:42.250 - 00:09:54.252, Speaker A: I should have actual stats about how many milliseconds you'd think it's a product market. Any other questions? What was your twelve word box regularly? Our average is regularly 1200 transactions per second. I've seen a max as high as 1500 and I don't know if that was during a load bearing test or something. That's the highest number that they report. I know everyone talks about pizza being a big challenge because pizza has a 2400 transactions per second throughput but then they have millions and millions and millions upon millions of users. According to DAC radar, the number one used blockchain application in the world is combat and they have 2400 daily activities. So we don't even need to worry about scale, right? People keep on talking about scale, talk about scale.
00:09:54.252 - 00:10:47.428, Speaker A: But the reality is our bigger problem is not scale. We could stick at the level we are right now. We could stick with ethereum with our transaction. We just can't deal with something like CryptoKitties, but CryptoKitties is also a bit of a flash. Anything else? Well, if not then I'm going to cut out. And if you guys have any questions, don't hesitate to swing by the do you have some more advanced, like DMP analysis on the question default tolerance? I know it's not handy. I know that we have a bunch of research that's coming out within the next three weeks.
00:10:47.428 - 00:11:22.416, Speaker A: We have a live paper on Tala. We have several other things that are coming out within the next several weeks. So the way that this works is we went our main up with Live in February using the Thunderella Consensus mechanism, which bifurcated our chain into two things a fast path and slow path. So that when the proposer would fail. Rather than switching to the next proposer in line, it would fall back to the ethereum chain until a new proposer could be elected from the community. Right. The mechanism for switching wasn't defined over the course of the last six months.
00:11:22.416 - 00:12:02.486, Speaker A: We realized that was inelegant and frustrating. So we finalized this proposer switch mechanism and so there's going to be a hard fork in mid October, I think it is. I have to double check the date there. That's going to show that there's going to be the hard fork that upgrades their consensus mechanism to calendar. So all that will be fully, fully activated. So as far as all the details on the Desantium fault tolerance or any of the other metrics, you'll have to wait for the light paper on that part. I know that they're in there.
00:12:02.486 - 00:12:18.730, Speaker A: I've seen them, I've read them, but I don't have that work. Right, gentlemen. Well, then this was a little bit faster than the 25 minutes I was allotted. But that's okay. I have no problem saving time.
