00:01:57.910 - 00:02:52.850, Speaker A: Welcome, everybody. Me to hack money. I am Kartik, one of the co founders of ETH Global and today is day four of our D Five hackathon judging. So for those of you who don't know on the live stream, hack Money is a hackathon organized by E Global. And for the past four weeks we've had over 350 hackers from 40 different countries and 15 different time zones work on projects in the D Five space. We have people from all these amazing countries. We've had over 40 mentors who've put in time and helped out our hackers from anything to technical and product and marketing use cases and of course, a whole set of amazing sponsors from the DFI ecosystem that have made it possible for our hackers to integrate their SDKs and really extend the vision of composability.
00:02:52.850 - 00:04:05.066, Speaker A: So, as I mentioned before, we've had over 350 hackers spend the last four weeks working on projects in the DFI space. And as of Sunday night, I'm proud to announce that we've had 118 D Five projects that were submitted for this hackathon. I can comfortably say that this alone has easily doubled the number of D Five projects in our entire ecosystem. And we're spending this entire week showcasing a lot of these projects and going through our judging in a live manner to have everybody else also see the cool things that have been built by our amazing developers. So I want to quickly walk through the logistics of how the next 2 hours are going to work. We have 13 teams presenting today and each team will have four minutes to demo what they've built and talk about their project and their motivations. After that, they'll have three minutes for additional questions and feedback from our judges and to kind of save any AV related issues, we've also asked everybody to pre record a demo of their hack and we'll be playing those videos instead of doing a lot of things live.
00:04:05.066 - 00:04:58.870, Speaker A: This gives seven minutes to each team and this will keep us properly on schedule. And as a quick overview of how the logistics of the event were set up, the rules and criteria for this were simple. A team could have a maximum of five members and they could also work individually if they chose to. The only condition we added was that their hack must incorporate a DeFi primitive, whether that be stablecoins or any of our protocols from the sponsor side or just in general the DeFi arena. And all code that was submitted must have been written during the course of the hackathon. So everything you will be seeing today was started and finished over a course of four weeks. And the way we're going to go about judging these projects today is going to be filtered down to these five categories.
00:04:58.870 - 00:06:02.030, Speaker A: We're going to be looking at these projects from a technicality and the originality of their project and the idea and sort of how practical it is and in addition, how easy it is to use by anybody else or the audience or design the tools for whether that be a developer or an array consumer. And then a general catch all that we like to call water factor that lets us offset and sort of highlight any projects that may not fit in any of these categories. And just to kind of reiterate that this is not a competition, the hackers are here to learn and they're here to share their excitement and really tell you and show off what they've built over the period of last month. And the judges here are to give us and give them feedback on their projects. Not everybody's trying to become a business, nor is that the intention for this event. We really want to make sure that we kind of keep experimenting and taking a lot of our ideas and inspirations to the next level by telling others what could be possible. So with that, I want to quickly go over the schedule.
00:06:02.030 - 00:06:59.246, Speaker A: We have 13 teams that are going to be presenting today, and these are our teams for the day. And doing the hard work are going to be three of our judges. Jesse Walden, who is an angel investor and an investment partner in recent Horowitz. Victor Boonen, who is at Bison Trails, and Dennis and Bertram who is a co founder of DAP Hero. These three will be our judges for the next 2 hours and doing all the hard work that we're extremely thankful for. So with that, I'd like to actually kick off this judging today and invite the Zapper team. So please welcome our first demodar.
00:06:59.246 - 00:08:09.360, Speaker A: You're muted everyone. I think there was like a video supposed to be played for us because we submitted a link for it. Yeah, just give me 1 second. I am making sure that is being set up awesome. Hi everyone. I'm Nora from Zapper, and together with Sahil, SAB, Dipesh, and Apurv, we've built pool pipes. So the last few months we've actually spent refining liquidity provisioning experiences across DeFi in general.
00:08:09.360 - 00:09:03.406, Speaker A: And today we feel like we're introducing something that will help reduce liquidity fragmentation across DeFi. So, pool pipes to help you rebalance liquidity between different pools in one transaction. So how does it work? Liquidity is first removed from a pool which you're currently part of, and this is done in a way to help you rebalance your required assets for the new pool with the least slippage. And finally, liquidity is added to the new pool. There's available pipes between the same platform, such as uniswap to uniswap or within different underlying platforms. So a really good example to take a look would be a curve to uniswap pool. So what happens here is first liquidity is removed from curve.
00:09:03.406 - 00:09:59.700, Speaker A: It's then rebalanced for the underlying proportions for the pool on uniswap and of course then added to pool on uniswap. Finally, to help you mint those LP tokens, a really specific use case would be transferring liquidity from the Set pool to the SUSD curve pool. Some of the incentives were transferred over recently to this new pool on curve from the synthetics team to encourage liquidity there. So a lot of liquidity providers have been taking advantage of this. So let me show you a quick demo of how this actually works. You would first, of course, connect to your wallet, and under Invest tab, you'll see all the pools which you're currently part of. You can click Rebalance and the ones that you actually want to transfer liquidity from.
00:09:59.700 - 00:10:41.360, Speaker A: Select how much you want to rebalance where you'd like to rebalance this new liquidity into, and finally just click Confirm. You'll see if this is your first time using it. Two notifications come up. Of course. First to approve for the token transfer, and after to actually make the token transfer of ULP tokens. Now, once your transaction has been processed, you'll see something like this. As you see here.
00:10:41.360 - 00:11:27.550, Speaker A: First liquidity is removed from this pool on Uniswap. It's then rebalanced into dai and USDC. And finally, it's then added to the curve pool. And as an end result, you end up receiving these curve pool tokens back to your wallet. That is it for our demo. The way we made these pipes is very modular. So there's a pipe between two underlying platforms, allowing you to then transfer liquidity between any pools within those underlying platforms.
00:11:27.550 - 00:12:12.152, Speaker A: In the future, we're planning to build a Robo pooler, which would help you rebalance this liquidity automatically to optimize for the best deal. And finally, we want to of course, add support for more and more pooling opportunities as they become available. So things like Future Swap, Shell and others are really exciting opportunities for us, and we're happy that they're coming online. So, yeah, that's it for our presentation. And again, we hope to defragment liquidity across DeFi pipes. Thank you. Cool.
00:12:12.152 - 00:12:29.676, Speaker A: I love defragment liquidity. That's a really good meme, and it's a really cool idea. Super useful. Thanks. Yeah, something we're thinking to improve, like I said all the time. Yeah. This is Victor.
00:12:29.676 - 00:13:17.424, Speaker A: I think it's really cool as well. Something I'm curious about is oftentimes the decision to defragment is like profit driven. Depending on what kind of yields and stuff are available in these different pools, how much of that information is able to be made available to folks that are making these choices. Yeah. So we have that general Invest tab that has Explore Investment Opportunities, which basically lists all the pools in one table. So it's uniswap V One, V Two curve and soon balancer pools and you're able to view things like Total liquidity volume, and we're adding ROI to most of them. Got it.
00:13:17.424 - 00:13:56.276, Speaker A: Very cool. And then my other question is, if you're doing dollar equivalents for tokens and rebalancing those, is there the ability to switch out of synthetic USD to another asset, like another ERC 20 as part of this. Yeah, of course. That would basically be called zapping out, but I want to switch to auger or some other token like that within the pool. You're talking about auger pool? Yeah, of course. You could do that as well. Got it.
00:13:56.276 - 00:14:37.400, Speaker A: That's what makes this kind of like a playground for builders. There could be lots of different reasons for you to kind of shift your liquidity. It could be anything from, like a general market shift to shifts in liquidity provisioning incentives, kind of like what synthetics has done from uniswap to curve. Or it could be just general shifts in trading activity within the liquidity pools. So there could be another liquidity pool that becomes really popular. The volume is really high compared to total liquidity provided, so you might be better off providing liquidity there for the time being. Very hopeful.
00:14:37.400 - 00:15:20.090, Speaker A: Yeah. And if I can add on quickly, especially for the ROI, the goal is to the user can come in with a defined goal, can be accumulating ethereum. Ether. And based on that, we can adjust how we rebalance automatically and also present the irrelevant information for him to kind of know when or when not to rebalance. Yeah, cool. That actually answered a question I had about sort of what the wedge might be for automatic rebalancing. But if you're going to ask users what that looks like, I think that's a good idea.
00:15:20.090 - 00:16:35.690, Speaker A: Cool. Awesome. Well, thank you so much for our very first amazing demo. And with that, we'll move on to our next team, which is Team BH Hackers with Nifty. Thank you. On stage, antonio and Leonardo Andrea, I know you guys are on panelists. Would you mind starting your screen share? If everything is I think Antonio and Rodriguez is not connected yet, and they will perform the presentation.
00:16:35.690 - 00:17:09.122, Speaker A: They are the other room. Hello, guys, do you hear me? Yes. Okay, great. I'm going to present the video. Sounds perfect. It is a little bit fast, so we hope you understand it. Okay, should we start? Yes, please.
00:17:09.122 - 00:17:19.314, Speaker A: Go for it. Okay. Hello, hackmani. My name is Antonio Hoffert. I'm going to present you niftify. Our team. BH hackers is composed by Leonardo Carvalho, an electrical engineer.
00:17:19.314 - 00:17:46.190, Speaker A: Andresales, a lawyer, myself, Rodrigo Ferra and Gleson Justice, both developers. What is securitization? It is a highly regulated process that ensures that the value of a security equals the value of a real asset. What is fungibility? It's the concept that ensures that two things have identical value. NFTs, non fungible, tokens, they always different from one another, so they cannot be created by one another without loss of value. They cannot be divided. They are usually used on games, collectibles, unique records, arts. We have a theoretical problem.
00:17:46.190 - 00:18:24.154, Speaker A: Liquidity constraints prevent NFTs to reach its full potential in terms of price and transactability. What is the best way for an owner of a unique CryptoKitty or a unique digital art to sell to monetize his or her assets. The mainstream road is to put the NFT on auction house or traditional crypto exchange and try to sell that NFT. Nevertheless, all these solutions, they create economic inefficiencies. And why? The main intrinsic characteristic of an NFT is its uniqueness differing from what happens with fungible tokens such as Ethereum bitcoin that have been trading for years and have market exposure. NFTs most likely have never been traded, so it has no price formation. This means that any completed transaction probably configured an underpriced sell.
00:18:24.154 - 00:19:10.550, Speaker A: So what is the answer securitization? Well, remember, traditionally a regulator is required to guarantee the equivalence of value between the security and the asset. NFT marketability could benefit from a set of corporate governance principles that could be written in a smart contract. That's how Mystify provides a decentralized collateral mechanism without any special actor, fully guaranteed by code, without the need for compliance or regulators. And it enforces that the value of the share is now is equivalent to the percentage of the asset. Through a simple shareholders agreement it is possible to redeem the NFT afterwards. This Niftify DAP provides easily securitization of NFDS and by creating fungible shares that can be negotiated on the market, it allows the collectible to receive price permission. The owner stakes the NFT on the Niftyfi protocol and generates a set of shares.
00:19:10.550 - 00:19:42.158, Speaker A: The buyer buys those shares and acquire part of the NFD. Whenever the shares are created, the owner can do whatever he wants with them. He can sell it on the P, two P market or put them on a traditional currency exchange. Whoever acquire those shares become ordinary holders of that NFD. A simple shareholders agreement has an exit price and a drag along clause. The exit price is the maximum price that anyone can pay to withdraw the NFT. And whenever anyone pays the exit price, the drag along clause guarantees that everyone sells at the same time.
00:19:42.158 - 00:20:14.878, Speaker A: The exit price can either be paid by Ethereum or by converting shares or even a mixed strategy. Whenever the exit price is paid, all the Ethereum goes to the ad spend and all the ordinary holders can withdraw their correct percentage of Ethereum. Now I'm going to present how rich connects to the defy ecosystem. First we have the ERC 20 tokens. We can connect in other DeFi platforms. In this example we connect in balancer and swap to out ASD a security tax offering using balancer to create a liquidity. Bootstrap provide liquidity to the market.
00:20:14.878 - 00:21:19.792, Speaker A: Thank you. This is the most simple application of liftfi. For this example we create an NFT contract called blockies. First, the original securities is an NFT and give away 10% of her shares after the start of buyer. In this case is the same that the origin owner buy the token paid with shares and Ether at the valuation of the S H price so he receives the NFT. The other ordinary holders can claim they started Ether at the NFPI contract, giving back the shares. That will be cool.
00:21:19.792 - 00:22:54.770, Speaker A: Very, very cool. I have a question for you guys, which is beyond sort of like the financial unlock of fractional ownership of an NFT. Where do you think this could go in terms of real utility? So if you have a whole community of people co owning an NFT, what do you think is interesting about that beyond financial speculation? Well, I think one application could be in terms of decentralized organizations, because we are building governance rules into an NFT securitizing mechanism, and this allows people to share a set of property and sell a part of a token. But I think that the main application is by far to divide an FD, to have a mechanism for price formation, to have more liquidity. But I think other applications could be on this area of corporate governance. That's how I see it. Cool, thanks.
00:22:54.770 - 00:24:41.440, Speaker A: I had a question in securitizing NFTs, what do you see as this allows you to take existing NFTs? Could you imagine using this something in the beginning, in sort of like the creation of NFTs as well, where people sort of like securitize something that they create at the beginning? Yeah, of course it could be done. We didn't think of any kind of creative motor for NFTs, but let's imagine a machine learning algorithm that creates digital art, and you have this unique piece of digital art and you don't know the price of it. Right? So if you sell it as a whole in a one time transaction, probably you didn't get the best price you could. So the best way to put this on the market to have its price evaluated is to tokenize it and securitize it. And then you have this piece of art that can have a maturation time on the markets and have its price formation instead of just giving the NFT in a one time transaction. So, yes, the answer for this question is if you create a new NFT, you could use the Niftyfi protocol to securitize it and sell it in a more efficient way. Fascinating.
00:24:41.440 - 00:24:57.270, Speaker A: I know we're about to run out of time. Never mind. Okay, thank you, guys. This is really cool. Thank you very much. Yeah, very cool. Perfect.
00:24:57.270 - 00:25:31.632, Speaker A: Thank you so much, Niftify. And with that, please welcome NF Wallets to present their demo. Hello, everyone. My name is and I'm going to present you non Fungible Wallet, my contribution to the East Global hackman hackathon. So non Fungible wallet tries to be the best way for you to hold assets, exchange them through DeFi, and most importantly, move a position, a DeFi position from one account to another. So here you can see I've got a few NF wallets already, but if you want to create a new one, just click the new Wallet button. Here, I'm logged in with portis, and this is my portis address.
00:25:31.632 - 00:26:00.536, Speaker A: So I can just click the Min button to create a new wallet. You can see that this is not a usual Ethereum transaction. This is a GSN Meta transaction. So this application is built in with GSN support by default. This means that you don't need to pay for the gas and you have a simple smooth transition to gas less in the transaction a few moments later. So the transaction was successful and you can see I've built a new wallet here. Obviously, if I want, I can disable the jet at any point.
00:26:00.536 - 00:26:23.696, Speaker A: So let's do that for now. Let's have a look at this wallet. You can see that this wallet is already holding a bunch of assets. I've got TTH, I've got a few ERC 20s or ERC 727 seven. I could also hold ERC 721 and I have position both on Ave and compound. Additionally, I also have an average loan that is backed up by part of this deposit. You can see this wallet as an address.
00:26:23.696 - 00:26:52.620, Speaker A: And this is me as owner. Obviously, being an nonfungible wallet, this wallet is an unfungible token. So this is a token ID if you want to track ownership of this wallet. So this wallet is holding assets. Obviously you can send the assets to other Ethereum address, but you can also use uniswap V two to swap assets between them. Or you can access your Ave and compound balance. As I stated previously here, we can see that on Ave I've got a deposit of almost 600 die and I've got one ETH borrow in exchange.
00:26:52.620 - 00:27:21.276, Speaker A: So I've got a balance in this that is pretty big. So let's repay part of this borrow. So I'm going to go to the repay tab and let's say repay half of it. So I'm repaying half my position. Okay. Now this is as usual, port is transaction because I've disabled GSM 12 seconds later. So the transaction just succeeded.
00:27:21.276 - 00:28:04.908, Speaker A: So, as you can see here, my loan is a bit smaller and I've lost a few assets because I had to repay my loan. In addition to having compound, I can also manipulate Bitcoin through the Ptoken function eight. So you can deposit Bitcoin to this non fungible wallet and you can also pay with Bitcoin using a non fungible wallet. So now you can do all your bitcoin transaction through Ethereum using this binding and the non fungible wallet format. So all this is nice, but not really. What's really interesting is that this position that includes assets, deposits on having components and alone, I can transfer it all at once using the non fungible wallet functionality. So let's say I want to send that wallet, that non fungible wallet, to my MetaMask account.
00:28:04.908 - 00:28:35.000, Speaker A: I can put my ENS name here and click the transfer button, obviously ENS exported everywhere a few moments later. So now that the transaction is successful, you see the transfer button is disabled. And this is also true of the send mechanism and the swapping mechanism as well as the DeFi mechanism. This is because I'm no longer the owner of this wallet. So let's switch account to see what it goes. Just disconnected and I can reconnect using ENS login. If you want to learn more about ENS login, check out ERC 25 25.
00:28:35.000 - 00:29:04.850, Speaker A: This just checked out that my Ensna is a MetaMask account so it asked me to log in with MetaMask. Obviously you can use MetaMask importees even if you don't have an ENS login account. Okay. And here we can see that buttons are enabled. Obviously I'm logged in with the owner of this wallet so feel free to try it out. Maybe you can include non fungible wallet in your project to manage bundle of assets or to move position in DeFi through different icons and user. So thank you for paying attention and feel free to contact me on social media if you've got any.
00:29:04.850 - 00:30:04.340, Speaker A: So just so I understand correctly, you have a wallet sort of like an identity contract wallet that holds your positions and sort of represents you. And now rather than sort of like sending each position you have or moving your money specifically with the wallet, you actually just send the whole wallet to someone else? Exactly. And you may have multiple wallets like that. So you may have a wallet to hold the assets you want to own like your NFT and have a different one for a position. Or you can create one to collect specific NFTs like baseball cards and just have a wallet contain an entire collection. And then you can send this collection without sending the rest of your assets. And what's important, and that's not been put out in the video, is that ownership of the wallet abides by ERC 721 rules.
00:30:04.340 - 00:30:43.524, Speaker A: So you can take a position with Deposits and Loan and put this position on openc. That's cool. Any other questions? Not a question but I do think that this is really cool and really special. I would like to know what inspired you to think about it in this way or what inspired you to build it. So there are a few things to say. First, I'm very much involved in smart contract wallet. I think they are amazing and it's an ecosystem that is moving more and more.
00:30:43.524 - 00:31:24.320, Speaker A: We've seen Argent become live during this hackathon and I wanted to take the other direction. Not like one smart contract wallet where you order your asset with social recovery and that kind of features. But see how can we be creative with small disposable transferable accounts. And so it's just a very simple smart contract. There is no recovery mechanism or anything like those. Smart contracts could be owned by a smart contract wallet that has recovery and see how creative we can be. And there was also like a style exercise of saying hey, how many DeFi projects can I include in that? Can I make sure that the UX is simple to like make sure that everything throughout DeFi is compatible with smart contracts wallets.
00:31:24.320 - 00:32:44.200, Speaker A: Interesting. A question that I have would be what is an ideal long term usage of this? Something that comes to mind for me for example is it would be like in the DeFi space it'd be fascinating if somebody like a trader was known for building certain positions and then selling that wallet with all those positions saying like hey, I've constructed this essentially a portfolio of bets. What do you think would be really cool to see? I see non fungible wallets as a building block for other people to be creative. I'm just like the guy proposing the take saying hey, just imagine identities as transferable and my first view was like let's take a bunch of NFTs and be able to transfer them all at once or let's transfer position. But I'm sure using this technology you can envision much more complex use cases. So the idea is not to develop a front end that is the access to all of DeFi because other people are doing that better than I'm doing. The idea is providing this block so that people can be creative and I'm sure that there is a usage for that in the context of other projects.
00:32:44.200 - 00:33:10.210, Speaker A: Amazing. Thank you. Awesome. Well, thank you so much and with that, we'll move on to our next team and that is project TCDP who have tokenized CDPs. So I'll let them kick off with their demo. Hi, do you hear me? Loud and clear. Hi, do you hear me? Yes.
00:33:10.210 - 00:34:30.458, Speaker A: So let's go on. Hey, Ping, we don't have audio here, would you mind confirming that you're sharing audio on Zoom as me? We can see we're not getting audio for the video, we only see a video so I think the audio settings are check off that box again. Yes, perfect. Hi, I'm here to present our project of the hackathon TCDP, a fungible collateralized debt position. In brief, it's a shared and tokenized position. The problem we would like to solve is the over collateralization issue when using DFI lending platform such as MakerDAO, Compound and Ave. Take MakerDAO as example.
00:34:30.458 - 00:35:48.850, Speaker A: The average collateralization ratio is over 300% and it's driven by the fear of liquidation penalty. People have their ETH locked off to borrow Die, but the liquidity of CDP is not so good as the liquidity of ETH itself. Also, maintaining collateralization ratio is a tough issue CDB holders are constantly fear of liquidation the solution is quite simple we create a shared tokenized CDP or in short, TCDP which will automatically rebalance so you don't need to worry about liquidation and it's fungible. It's an ERC 20 token that can be traded directly on decentralized exchanges. Here's how it works for example, if a user enters one ETH to the system it would be deposited to either compound or evade depends on who has a better founding rate then the system draws some die out depends on the value of the ETH. Eventually user will receive 80 die and one TCDP which represents partial ownership of the position. There's an autorebalance mechanism which will automatically leverage or deleverage to maintain the positions ratio between a predefined range.
00:35:48.850 - 00:36:31.810, Speaker A: As you can see, if you consider TCDP as a pool consists of ETH as collateral and Dai as debt, then TCDP is a portion of the CDP which is in fact a bond of asset and debt. And you can trade it on exchanges like KyberSwap or Uniswap. TCDP token is tradable and it brings back the liquidity of CDP and at the same time act like a leverage token. Let's walk through the interface. First there's a dashboard. You can see how much TCDP is minted and which platform it is using currently. Then if you're willing to open a CDP, then enter how much Eid you would like to deposit and you can see how much TCDP and Dai you are going to receive.
00:36:31.810 - 00:37:00.950, Speaker A: Press deposit button to send transaction. Confirm the transaction. After a while you may see that you receive some die in corresponding TCDP. There are two functions that won't be used too often. The first one is to rebalance. It would be used only when the pool's collateralization ratio is 25% away from the target. The second one is flash migration which will swap the whole position from compound to eva if there's a bad infounding rate and vice versa.
00:37:00.950 - 00:37:46.570, Speaker A: We are using liquidity from dYdX for the migration. The last part if you want to settle your TCDP position, there's two options. First, you can repay debt and die, burn your TCDP token and receive the underlying asset ETH proportionally enter the amount of TCDP you like to burn. If this is the first time you need to approve Dai to the pool beforehand, then you may send a transaction. As a result, you will repay Dai, burn TCDP token and get ETH back. If you don't want to or don't have enough Dai to repay debt, there's a second wait for settlement. You can directly sell your TCDP token on exchanges and you're done.
00:37:46.570 - 00:38:50.480, Speaker A: That's simple. That's it. Feel free to browse our GitHub repository and try our DApp TCDP. Super cool. How this solves the kind of like over collateralization challenge that you mentioned upfront? It's still overcollectorized because it's required by the lending platform. But when you are using that kind of platform, you cannot directly trade your whole position like you need to repay debt before you withdraw the underlying and trade it to others. But when using TCDP, you can trade the whole bundle, the bundle with asset and debt together.
00:38:50.480 - 00:39:28.582, Speaker A: Yeah, very cool. Fascinating. Do you have any sense of who the buyer for this type of asset might be? Or what the dynamics of the marketplace would look like? So you may consider TCDP as a leverage token. Like it's east, but 40% off. That would sound quite beautiful. And the second one is for arbitrager to buy your. Precision and repay debt for you, right? That's really cool.
00:39:28.582 - 00:39:48.720, Speaker A: Yan. Awesome. This is super cool. Thanks again, Peng and team. And with that, we'll move on to our next demo. So please welcome Paul and Aria from Uni. Hello.
00:39:48.720 - 00:40:51.250, Speaker A: Okay, hey, my name is Paul, and I'm going to be telling you about our Hack Money hack uni is the easiest way for groups to receive and spend money. Uni is good for early stage businesses, shared interest groups and movements and causes. With that little bit of context, let me show you how it works. Let's hop into a clickable figma demon app and I'm ready to create my first Uni group. Let's go ahead and click Create. Give the group a name. I can quickly see basically what to expect about how the app works.
00:40:51.250 - 00:41:44.018, Speaker A: Click next. And as simply as that, I have a link that I can share in wherever I have an existing group that has a group chat, maybe on Telegram or WhatsApp or Imessage. So I can click here to copy the link. And now imagine you're a user that got that link in group chat and you're being onboarded into the app. You can see what you can do with the app, join a group, manage money together, and get stuff done. And then to create your account, just enter your mobile number, prove you control that number, choose from a randomly selected avatar, or upload your own photo, enter your name, and with that, you've created your user account. And you can see that you have an invite to our Hack Money team, which is the example we're using here.
00:41:44.018 - 00:42:16.240, Speaker A: So let's click join. I see that our Hack Money team is controlling $1,500. We already have some members on our team and there's something to be decided on. The group needs to decide whether to upgrade our notion account so that we can have more lines of text there. I see that some people have already weighed in on this decision, and with just one click, I can approve that. That should go through. Depositing money into our Unigroup is quite simple as well.
00:42:16.240 - 00:43:04.922, Speaker A: You can do that with Apple Pay or a debit card. If you don't have Apple Pay set up already, you can go through that flow quickly and decide to add $10 to the group confirm and adding money to the group is as simple as that. In order to spend some of the group's money, you can select the amount, say what the expenditure is for, and provide an optional link. And there's a randomly assigned emoji for that choice. And like the flow we showed before, the group can decide whether or not to approve that transaction. But since I created it, I already approved it. So now that you've seen the designs, let's check out it in action.
00:43:04.922 - 00:44:02.770, Speaker A: So here we're in iOS simulator. We're running a React native expo app. Behind the scenes, it's using the Gnosis safe and the Tacit SDK so we can enter a mobile number. I'll use a fake one for now. This is where I would prove I control that number. And now when the user goes to upload the photo, if you check out the terminal over here behind the scenes, we're hitting the Gnosisafe Relay Service API and that is setting the signers that will be used for that nosis Safe and the threshold for a transaction to go through. And down in the log statements down here you can see that there is a using create two, there's a Nosisafe address that's generated and if we were to send funds to that, it would actually be deployed on Ethereum.
00:44:02.770 - 00:44:48.270, Speaker A: Hopping back over to our slides, I gave you a bit of info on how that works behind the scenes for both the users to be able to do account recovery that uses the Nosisafe multisig and also for the group that uses Nosafe contracts as well. Creating the account for the users and interacting with the Nosisafe contracts is done with the task at SDK. And while we haven't yet incorporated these yet, we want the app to use ENS and the graph as well. With that, I'll just say thank you. Feel free to check out our website at getuni app. Feel free to reach out if you have any questions and thanks very much for your time. Bye.
00:44:48.270 - 00:45:31.062, Speaker A: So it's kind of like a simplified version of Dow decision making but using Gnosis Safe as sort of like the multi signature device. Yep. We think multi sigs have become really popular in the crypto native community and so it's a more natural place to start. Although adding more Dow like features in the future could be interesting to explore. I like that. Yeah. I'd actually be curious how you think about the design space or optionality of using a Gnosis eight versus a Dow like feature.
00:45:31.062 - 00:46:45.960, Speaker A: So, for example, assigning different weights or having bigger say in different things or how people associate adding money. Yeah, our thinking was that for something that sees itself as a project, the Gnosisafe has all the functionality you need, which is mostly just around receiving holding capital and spending it. The benefits you get from something like Moloch or Aragon would be explicitly handling the state. If someone wants to rage quit so that they would get their share of it, that's more important for serious for profit use cases, but not really required for something that's more like a hack money project, for instance. And then also using tokens to hold different amounts of claims towards that in the exit case is kind of the main other feature there. We think that that design space is super interesting, but there hasn't been one that Dow instance that has really taken off yet, whereas multisigs have. Yeah, actually I really like the constraints that you guys have placed around it just to keep it really simple and I guess try to validate the use case of people trying to collaborate economically on decisions, I think that's a good sharp focus to try to zero in on.
00:46:45.960 - 00:47:17.902, Speaker A: Thanks. Awesome. Well, thank you so much Paul and our team. This has been a great sort of progress to see how union has developed over the past few weeks. And with that, we'll move on to our next demo. That is Project Candy Shop, who have made an efficient first Dex aggregator. Hello.
00:47:17.902 - 00:47:40.120, Speaker A: Hey guys. Hi guys. Hi. Yeah, hello. So I was hoping that I could quickly do two or three slides and then we could do the live demo so that I can walk you through it more easily, if that works. That sounds perfect. Cool.
00:47:40.120 - 00:48:39.562, Speaker A: I hope you can see my screen. Everything is good. So I'm here presenting Candy Shop, which is just a Dex aggregator with a twist. So Candy Shop is like a light proxy on all the existing DEXes. What we really envision is that all the Dex swaps will go via candy shop and if there is an arbitrage opportunity created via swap the contact itself will flash loan from Unisoft V two and do an arbitrage and return 80% profits back to the user and use a 20% to buy lottery tickets with a lottery built in into the proxy. So I'll quickly walk through how it works. So let's say a person wants to exchange 0.1
00:48:39.562 - 00:49:13.330, Speaker A: e for 0.1 die so it hits the Candy Shop interface. Currently on Unison v one, the price for ETH to die is one to 200. So user gives one ETH and has 18.3 die whereas he should have got 20 but he lost some in slippage. Then we borrowed ten die for 0.5 e and now as you can basically see that because of the last transaction, the price in the Unison v one has slipped.
00:49:13.330 - 00:49:46.270, Speaker A: So now when I exchange ten die for ETH on Unison v one I'll get 0.7 Ether, I can repay 0.5 ETH back to Unison v two and I have 0.2 e worth of profits and I give 80% of profits back to the person. So instead of earlier he getting 18.3 die, he now gets 19.2 die along with lottery tickets by which he can possibly win a huge grand prize.
00:49:46.270 - 00:50:57.300, Speaker A: So we have observed the slippage amounts to be a lot lower than the original uniswap and we did some simulations and as you can see, as the trade size increases, the profit size increases and the uniswap slippage is really low. And as you go towards like 40% of the original pool, the each profit turns out to be really huge because it basically creates a huge arbitrage opportunity. So with this I'll be moving on to the demo. Is the voice audible? Yeah, we can hear you, but if you're playing a video, we don't have the audio there. Looks like you forgot to click the checkbox on zoom. Yeah, because I had to speak. So yeah, let me just stop sharing and I'll reshare quickly.
00:50:57.300 - 00:51:13.254, Speaker A: Hope this works. This is the UI to interact with the candy shop. Now I show you how a user can earn profits by swapping on the candy shop. This is the swap tab. For swapping. You can select the input token here. Now for the demo, I'll be using input token as ETH.
00:51:13.254 - 00:51:29.286, Speaker A: Here you can select the output token. And for the demonstration we're using a test token. Now for the swap, let's do a swap of 0.3 E. As you can see, the expected output token is 46. Now the balance of this user is zero and the uniswap provides an exchange rate of one E equals to 153.49 test tokens.
00:51:29.286 - 00:51:51.494, Speaker A: These are the additional parameters you can select. This is the slippage and this is the option to buy candies or not. This is the deadline from which the transaction will revert. Now let's do the swap. Now the transaction got confirmed has the price of the candy is 0.1 die. The user has brought this much amount of candies from the 20% profit the arbitrator has generated and the 80% profit is zero.
00:51:51.494 - 00:52:11.402, Speaker A: Point 29 ETH is sent back to the user in the output token he has selected. As you can see, the candy shop exchange rate is one E equals to 169 test tokens. As you can see, the candy shop provides a better exchange rate than uniswap. After this swap transaction, we got 50 test tokens instead of 46, which was the expected output tokens. Next I'll show you the lottery part. This is the lottery tab. We can see the lottery over here.
00:52:11.402 - 00:52:34.194, Speaker A: The lottery system on the candy shop is similar to pool together. Apart from that, we have multiple winners in the lottery. The price pool is the lending interest and the profits from the arbitrage. As you can see, these are the number of candies owned by this user. And this is the price of the single candy. So you can say that approximately a $1 of profit has been went to the candy lottery system to buy candies. This is the current pool size and this is the price pool that is committed for the interest.
00:52:34.194 - 00:53:07.920, Speaker A: Now an individual can also boost the lottery price pool by depositing into the lottery pool and the lending interest from it is used as a price pool and the principal amount is returned back to the user. Now I'll deposit 100 die to show you a demonstration of how the sponsor can deposit. As you can see, the transaction got confirmed and 100 die has been added to the lottery pool. Now the lottery pool has increased by 100 die in the lottery. We have used Ave and Compound as the lending protocols and we use chain link VRF to select multiple winners. This is the demonstration of the candy shop. Thank you guys.
00:53:07.920 - 00:53:48.794, Speaker A: Cool. We are open to questions. Yeah, great. I have a quick question about sort of efficiency in market pricing how big of a concern is gas here? So if you're making a very small trade, for example, does the efficiency gain get eliminated by the gas cost? Yeah, for sure. Only trades which move the price by a threshold amount are efficient enough to be sent via candy shop and others. They just don't produce enough arbitrage profit to cover the gas cost. Got it.
00:53:48.794 - 00:54:33.898, Speaker A: Okay. Very cool. My question is why do the lottery to basically incentivize people to send as many transaction as possible via candy shop so that we can arbitrage the transaction if the user does not say so. And basically we have like a mechanism where people can come in and sponsor specific lottery pools. So let's say there is ETH and maker lottery pool MakerDAO can come and put up Dai and that dai will buy lottery tickets for people and that will sort of incentivize people to do more trades so that they can get the lottery tickets for. Got it. Okay.
00:54:33.898 - 00:55:24.730, Speaker A: So it's only like if the maker foundation wanted more people or more people provide liquidity for the maker. Yeah. So it's towards making candy shop like most used proxy layer so that we can arbitrage and we basically know what's going to happen before it happens and there are a lot of things that could be played there. Got it. So decentralized market maker in a yeah. The great thing about uniswap and other on chain AMMS is that you can know the future just by seeing an incoming transaction and you can profit off of that and give a lot of profit back to the user. So instead of a random arbitrage bot making profit from your transaction, you actually get the 80% of the arbitrage profit.
00:55:24.730 - 00:55:40.830, Speaker A: Cool. Thank you. Awesome. It's a really cool concept. Thank you so much candy shop. Thank you. And we'll move on to our next demo and that is Team Kitty Fight who have made a Mortal Kombat game for CryptoKitties.
00:55:40.830 - 00:56:57.182, Speaker A: So I'll let them kick off their demolitions. Can you hear me? Loud and clear. Okay, I'm going to quickly talk really quick before I play the demo, I just want to include before I play the video that this was at least a no loss lottery game, that the highest risk is one week lockup and also getting the original capital back. That is the highest risk and I'm just going to proceed play the video now because that wasn't included in the video. Okay. All right. So it looks like you also forgot to check off the audio box.
00:56:57.182 - 00:58:08.690, Speaker A: We can't hear the audio so please make sure that every other participant who's going to go on the demo definitely checks off that box for the next. It's at the very bottom of the screen share. The lender can then burn the fen, withdraw back the principal and the compounded interest. This is what looks like. See the value committed into the CDP. I think you full screen it before. So you just shared the wrong screen.
00:58:08.690 - 00:58:55.840, Speaker A: I think it might be easier if I can just share that on your behalf from my side. So let me just do that and I'll make sure that you can play it from our side and then you get to talk over it and answer questions from the judges. Okay, so I'll just kick that off. Hello. We are the Kittyfi Team and we have built a lending compound and interest system into our already existing Kittyfi Cryptocurrencies, Mortal Kombat and Mogain. You can visit the lending system at kittyfi. IO slash DeFi lending and it's live on the Rinkov test network.
00:58:55.840 - 00:59:28.410, Speaker A: How does it work? Lenders can deposit ethereum through the system and mint NFT CDPs called ethnic. Then the lenders have two options of what to do with the ethnic. Either a lender can list the Ethy for sale on OpenSea and possibly sell it for a future value price. Or the lender can hold on to the Ethy for at least entire week to accumulate interest. Kitty fight. Treasury then uses to collect the funds from all lenders in the games throughout the week. And each game throughout the week must return back to the treasury 10% of at least ten times of the initial amount committed to each game.
00:59:28.410 - 01:00:17.480, Speaker A: Lenders then can then burn Fe Nfcdb during the rest day to redeem the compound and interest and ether principle. Here's a visual of what the process looks like. In step one, the lender locks ether and generates Ethy and throughout the days of the week the funds are used in the games and generates interest and it's returned back to the treasury on the fifth day. I mean, on the 6th process. The lender can then burn the Ethy and withdraw back the principal and the compounded interest. This is what Fe listing on OpenSea looks like. You can see the value committed into the CDP and you can see how much is bid for that CDP which puts into consideration the future value based on the interest that's generated from the CDP.
01:00:17.480 - 01:01:15.470, Speaker A: Demo will go over the locking and generation of a demo of how the game works, a demo of burning Ethi. And we're just going to speak over this as you guys are viewing. Basically, this screen is showing the process of locking ether and it's showing the generation space to lock ether. It's limited and there are seven generations, zero to six. And once you lock your ether, you generate something called Fe which you can then sell on OpenSea. I didn't wish to play through all the rest of this video. I just wanted to present to the rest of it because I know it's very long and I didn't want to take up much time.
01:01:15.470 - 01:01:33.440, Speaker A: Forget we can do whatever you want to do here if you want me to end that. Okay. I'll just share my screen from my side so you can see my accurate questions. Okay, great. Sorry about that, guys. I don't use zoom. No worries.
01:01:33.440 - 01:02:18.480, Speaker A: We've all had our fair share of trying to figure this out ourselves, too. Okay. All right. So I was just going to talk really quick. Once you get to that stage, if you wanted to sell your Etsy on OpenSea, you can just click on the Ethy you generated from our marketplace, which still has your ether that's generated, and that just basically gives you CDP of ether assets that has your ether locked in there. And you can sell it for the future price, because you know that you're going to get future interest based on the amount of interest you're going to get on a weekly basis. Now, the interest are generated from the games on a weekly basis.
01:02:18.480 - 01:03:02.176, Speaker A: Each day generates some amount of interest that compounded and rolls over to the next day and onto the 6th day. And then it's collected and proratatedly shared amongst the collectively pooled ether in the treasury pool. If you wanted to burn your ether, you would approve your Ethy to be burned and basically go through the transaction and then finally press the button to burn the Ethy. I don't want to go through this because it's going to take a long time. The bottom panel shows the periods in which these investments scheme kind of operate. It operates on a six day period. The first starting points represent first day and then the 6th day.
01:03:02.176 - 01:03:44.364, Speaker A: And in between is the rest day where you get to at least where you get to redeem your ether or keep it rolling into the system. There are six funding levels representing six generations. The first is a limited to 500 ether and then it gradually grows as we remove that limit as a group or through the Dow that controls its organization. This just shows how much ether is in the treasury and how much is left that people can actually participate. And once it reach their limits, nobody's able to participate anymore. This is what the game looks like. This is what the game looks like.
01:03:44.364 - 01:04:08.790, Speaker A: People bet. There are groups of people betting on each side. It's basically a formal game versus side and they're betting ether to see who can win the initial jackpot. It works on the principle based on the fact that the initial money advertised is less than the total amount that's contributed in terms of ticket sales and also bets that happen throughout the game. So that's it. And I would just turn over to you guys because I know time is running. All right.
01:04:08.790 - 01:04:41.390, Speaker A: Okay. So my first question is the game. What is happening in the game that looks really fun? What is all that about? Should I share my screen again? Because I know when time runs out, you guys going to come? We'll just give a few extra seconds for just that demo. But we do have to sort of move on. But yeah, please, if you want to share this while you're talking and answering that question. That'll be fine. All right, so what's going on is you have two groups of players, right? Let me unmute my thing.
01:04:41.390 - 01:05:11.192, Speaker A: You have two groups of players, like 100 players, all right? So you have two groups of players betting Ether, right. To win the initial jackpot that's committed to the game. Right. But the game, before it ends, it actually has to be ten X, the initial amount that's committed to the game. Right. So the group that wins the game, there is a ranking on how much you win from the total amount that is accumulated from the losing side. Right.
01:05:11.192 - 01:05:49.030, Speaker A: So the players that win the game, they get their share, and the rest that's the excess profit what do you call it, is diverted back to the lenders that lend to the system initially. And this works on a cumulative basis throughout the week. And this is how profit is generated. Okay. And these are CryptoKitties, or characters that are generated as avatars in our game and used to battle each other, and players in mass support each side to battle each other using Ether. And based on the excess amount, profit is generated and profit goes to the winners and also to the lenders of the system. Basically.
01:05:49.030 - 01:06:07.610, Speaker A: You should have started with this. Yeah. Super cool. Yeah, this is very cool. More like agree start, lead with the game and then the mechanics of it to fall, but the mechanics seem really cool as well. In thought through. Yeah.
01:06:07.610 - 01:06:21.256, Speaker A: Awesome. Well, thank you so much, Ella. This is an amazing demo. Hopefully we can send out a link for others to check this game out. It's already. Kittyfight IO. So with that, we're going to actually move on to our break.
01:06:21.256 - 01:13:35.440, Speaker A: So we'll return in five minutes and we'll resume the remaining six demos that we have for today. So thanks again. And with that, I'd like to call up team, umbra Ben is your ear. So please take it away. Great. Before I share my screen, one quick note. The audio gets a little quiet about halfway through the video, so you might want to turn your volume up a little louder than you think, or at least be ready to do so.
01:13:35.440 - 01:14:09.858, Speaker A: We're Team Umbra. And this is our Hack Money 2020 submission. My co conspirator is Matt Solomon, who built the front end and the JavaScript Library. My name is Ben Di. Francesco and I worked on the architecture and wrote the Smart contracts. We built a protocol for privacy preserving stealth payments on the Ethereum blockchain, inspired by this March 31 tweet from Vitalik. Butyrin at a high level, umbra enables transactions where the receiver's identity is known only to the sender and the receiver.
01:14:09.858 - 01:14:45.506, Speaker A: So how does it work? Users publish an Umbra public key in an ENS text. Record pairs generate a stealth address from a random number, and the receiver's public key pairs encrypt the random number with the receiver's public key and announce it in a smart contract that also holds their payment. Receivers can then scan announcements, find payments to stealth addresses they control, decrypt the random number and use it to generate the address's. Private key receivers then withdraw tokens via Gas station network, avoiding the need to fund stealth addresses with Ether. Gas can be paid for directly with tokens via uniswap. I'll demo the front end for you. Now.
01:14:45.506 - 01:15:04.706, Speaker A: I have two browsers open. On the right is the user who will receive a payment. On the left is the user who will send the payment. Before they can receive their first payment, our receiver has to configure Umbra. This is a one time setup step. The receiving user owns umbrademo ETH. If the user didn't own an ENS name, they'd see instructions on how to register one.
01:15:04.706 - 01:15:32.466, Speaker A: The user sets a password. This is used to encrypt the private key that is generated and store it locally. In the next step, the user is prompted to backup their encrypted key. Final. Finally, in the last step, the user signs a message with their new public private key pair and publishes that message as an ENS text record payment. Senders will use this to derive their public key and generate new stealth addresses. So our receiver is all set up.
01:15:32.466 - 01:16:04.300, Speaker A: Now let's hop over to the sender. The sender will navigate to the Send section and then enter the receiver's ENS name. Umbra validates that the expected ENS record is present for the receiver. Behind the scenes, it generates a new stealth address using the receiver's public key and a randomly chosen number. Now, our UI shows ETH and Dai. But since these are just simple transfers between normal Ethereum accounts, we can support any ERC 20 token out of the box. I'm sending twelve die here.
01:16:04.300 - 01:16:35.874, Speaker A: I approve the transaction in portis and that's it for the sender. It's that simple. Let's hop back to our receiver. Now we're going to navigate to the withdrawal section and enter our password. Umbra will scan the blockchain for payment announcement events encrypted with our public key. When it does, it's going to find the Dai transfer that we just sent and give us the opportunity to withdraw it. Remember, the stealth address which received these funds currently holds no Ether.
01:16:35.874 - 01:17:17.640, Speaker A: We can calculate the private key needed and, using Gas station network, withdraw the tokens to the address of our choice. It's important we choose one that is not tied to our identity. I've got one prepared here. With proper uniswap integration in Gsnv two, we can allow the user to pay for gas with tokens they've received and optionally swap to another token. Upon withdrawal, I confirm the transaction. And when I navigate to the extraction address in my wallet, I can see I've received the Dai withdrawal. That's been a quick demo of Umbra privacy preserving stealth payments on the Ethereum blockchain.
01:17:17.640 - 01:18:10.056, Speaker A: Our immediate short term plan is to finalize the MVP and get it to Mainnet, then help other developers integrate and build. With Umbra down the road, we'd like to explore other ways to make Umbra more usable and more efficient. If you'd like to try out Umbra, visit Robson Umbra cache and check out our GitHub for more information about the protocol. Thanks for a great hack money experience. Awesome. Yeah, really cool. One question I had is when the receiver puts their information into the text record, doesn't that sort of like now everyone knows that they are potentially a recipient here and others could be searching for transactions addressed to them.
01:18:10.056 - 01:18:58.996, Speaker A: Is there any risk of metadata around that leaking? I guess. What are the concerns about metadata leakage? Yeah, so metadata is something to consider with any privacy solution. Like if you're using tornado cache, but you're accessing it with the same IP between the submission and the withdrawal, then you're going to leak metadata. And so concerns like that exist as well. Specifically related to ENS, there is an anonymity set issue where the possible receivers is limited to everyone who has published ENS records. Although actually to get around that, what we did was we made it possible to also send a payment directly to the private key held by an address. So you don't technically have to use ENS, it just greatly improves the user experience because you don't have to export and import a private key by implementing the protocol.
01:18:58.996 - 01:19:58.124, Speaker A: That way, though, we make it so that there's kind of a deniability, plausible deniability, because any ethereum address that has done at least one transaction could be the receiver of any sent transaction. Right, cool. Matt, did you have anything to add to that? No, you pretty much nailed it. In the demo, we show sending it to an ENS domain just because that's the simplest, but you could put in anyone's address or a transaction hash there and it will recover the public key and everything will function the same. And then like Ben was saying, the withdrawal process has been a little bit different since you'll have, know, copy and paste your private key or something in order to do that withdrawal. For a business use case, where do you intend to go with, like, does it intend to be protocol that sort of captures some sort of profit, like charging users a fee? Or is this intended to be sort of like an open source format? It seems like now that the idea is out, anyone could do it. Yeah, it's a good question.
01:19:58.124 - 01:20:37.576, Speaker A: So we definitely look at it as kind of like an open protocol that anybody could implement and use, and we want developers to kind of integrate with it. At the same time, we think that there's an opportunity to capture at least a little bit of value through the protocol. So there is a toll or a fee that's charged with each send that you initiate on the platform. And there's actually two. Reasons for this one is to capture value, but also it's to prevent spam attacks on the system. So every user has to decrypt check if they can decrypt every send that occurs. So if someone just sent a bunch of very low value transactions, then that's a drain on everybody else's resources as they have to kind of process those to make sure one of their send isn't in there.
01:20:37.576 - 01:21:36.684, Speaker A: So right now we have it set by default to zero one ETH just as a kind of spam prevention mechanism, but also something that could potentially generate a little bit of value for the protocol itself to help fund for development and that sort of thing. Maybe to follow up on that then and not to push back on the idea of charging for it because that's totally reasonable. I think it seems like that relies mostly on the fact that Ethereum events aren't super scalable. But if you were to remove that sort of like scalability difficulty, for example, using something like the graph, then it would seem almost that the cost of transactions themselves would be this sort of like impediment to spamming the network. Because if you look at the cost of sending a transaction right now, there's only so many $4 sends that somebody's going to be willing to do just to spam. Yeah, absolutely. So a couple of things to unpack there.
01:21:36.684 - 01:21:52.992, Speaker A: One is that it looks like maybe we reached time. I'll follow up later myself. I think it's really fascinating. Okay, perfect. Sorry about that. Quickly finish that answer if you'd like and then we can move on to our next one. Okay, perfect.
01:21:52.992 - 01:22:28.200, Speaker A: Yeah, I mean, so obviously we can't scale greater than the Ethereum chain itself can and there are limitations on events of the there is a limitation there in that every user has to process every event. That is something where down the road, in a future version of this protocol, we'd like to look into ways of solving that to make it more scalable. But there are definitely some challenges with that and that's like a much bigger kind of research problem to tackle. I'll follow up. Very cool. Ben, Matt and Team, thank you so much. And with that thank you.
01:22:28.200 - 01:22:49.146, Speaker A: Next demo. And that is Project Atlas. I'll let them take it away. Hi guys. I'll just quickly share my screen. Make sure you check off the Share audio box. This is Team Atlas Library system.
01:22:49.146 - 01:23:11.806, Speaker A: Hello everyone. I'm Adhya Vijay Jaykumar, a first year computer science undergraduate from Bangalore, India. I worked on front end, Back End, as well as smart contract development for this project. What I've built. It is the Atlas Library system. A hassle free library system to help users rent books easily and directly support authors. It is built around the concept of ERC 20 tokens.
01:23:11.806 - 01:23:37.340, Speaker A: How it works a deterministic Ethereum address is generated upon sign up. Users can purchase alt that is Atlas Library tokens through a simple payment gateway. Thereafter, users can rent books for any time duration using these same tokens. All right, I shall jump straight into the demo now. This is the welcome screen for the app. The login system is built using Auth zero passport strategy. Users can log in directly using the Google account.
01:23:37.340 - 01:24:03.470, Speaker A: I'm signing up as a first time user. This is the dashboard. And if we head over to the account screen, the deterministic Ethereum address generated is displayed along with few other details. Upon signing up for the very first time, the user gets 0.1 ELT token. We can purchase more tokens using this form over here. This has been designed for the Indian subcontinent, therefore supports purchase in Indian rupees.
01:24:03.470 - 01:24:36.686, Speaker A: Currently, the demo version does not have a payment gateway. But the production version will have a payment gateway integrated. If we go ahead and purchase tokens for RS100, which will yield one Alt token, we get this screen with the success message. And if we click here on the link, it redirects us to the Ether scan page and upon successful confirmation of the transaction, we will be redirected back to the account page. And as you can see here, the token balance has updated to 1.1 Alt. Now, this balance is being fetched directly from the smart contract itself.
01:24:36.686 - 01:25:01.160, Speaker A: If I go ahead and open the network log and refresh this page, we can see the API call that's being made. It says 11,000. And since Alt token has four decimals, we get 1.1 Alt tokens. Now, if we head over to the browse screen, there are a number of books. Let's go ahead and rent one of them. We get some details regarding the book itself as soon as we enter the number of days.
01:25:01.160 - 01:25:28.814, Speaker A: If we do have sufficient balance, the rented option becomes available. However, if we do not have sufficient balance, let's say for 10,000 days, then the rented option becomes unavailable. This is to make the user experience better as well as the form. Here itself is read only so that Ethereum address product ID the number of days. None of those are messed around with. Let us go ahead and enter ten days and rent the book for ten days. We once again get the success message.
01:25:28.814 - 01:25:53.170, Speaker A: So the rented book has appeared over here and it says Active along with a few other details like when it was rented on and for how many days. Click on this. PDF is being rendered. This is just a placeholder that is hosted on FIA network's Skynet portal. As you can see, it says you have access to the book title Educated. This is being previewed using the PDF JS library. This is the Alt admin login.
01:25:53.170 - 01:26:18.974, Speaker A: Now, through this portal, currently you can upload books to the main server itself. I'll just quickly fill up this form and upload a book. I'm trying to upload a book called The Red Clocks. If I submit the form now, it says the book has been successfully uploaded and refresh it. We can see that the Red Clocks book has appeared over here. Now in the dashboard, the status for all the rentals is being obtained directly from a smart contract. If I go ahead and open up the network clock and refresh the page, we can see the API call that's being made.
01:26:18.974 - 01:26:50.394, Speaker A: If I open in the new tab, the boolean is false, which is why this book here says it's expired. The application reads and writes to smart contracts using blockbidil's API. All the ebook PDFs are stored on Cr Skynet portal. Future plans include building an author's dashboard, allowing publishing of scientific research papers, as well as adding a recommendation system. This was my very first blockchain DeFi app, and I had a lot of fun building it. Thank you very much for your time. I just quickly wanted to add another thing.
01:26:50.394 - 01:27:27.990, Speaker A: So the purpose of this application itself is to popularize DeFi applications, and the way this aims to do that is by abstracting away all the complexities of blockchain or anything else, and just providing a simple and clean user experience. This is also not a replacement for the traditional publishing system, but just as an alternative and an additional digital publishing platform that directly empowers authors. This also aims to curb digital piracy by making books more affordable and easily accessible. Cool. I'm sorry, Jess. Go ahead. No, go ahead, Victor.
01:27:27.990 - 01:28:11.826, Speaker A: I think it's very cool. Congratulations. You did a really great job. Something I'd be curious about is, as with DeFi applications, all the times people say, like, hey, we're going to fork it and take any fees out, what recourse does an author have if somebody takes one of their books and essentially takes out the fees and re uploads it? Exactly. Which is why it's kind of using the Pdfgs library to make it read only. And this is once again, the way this aims to kind of do away with the intellectual property theft is by making it really affordable. Right now, it's rent per book, but then if you go for a subscription order that is a lot more affordable, I think people would just be all right with accessing it for the extremely small fees itself.
01:28:11.826 - 01:28:56.020, Speaker A: And apart from that, I think Netflix has successfully done it with their content being provided for just a fixed subscription fee with all the movies available, that has kind of put down the piracy and intellectual property theft with the movies and other things like that. So this same model could work, and it hopes that people will use it out of goodwill. Got it. Very cool. Thank you. Beyond books, are there any other use cases you're excited about for the same sort of architecture? Definitely. I think I mentioned scientific research papers being used for this because that would also make it a lot of sense for just renting it out for three or four days when you were researching on a school project maybe, and kind of helps a lot with students especially.
01:28:56.020 - 01:29:34.846, Speaker A: Do you think there's a specific advantage to building on this stack versus, I don't know, whatever Amazon or whatever local? Definitely correct. I think here the advantage is the fact that there's going to be very authors get almost 90% or 95% of the complete revenue at the same time. Since it's based on blockchain, there's 100% transparency. It's just automated. And in the future for the production version, I'm sure that it'll just work on its own and there'll not be any issues as such. Right, I think that's great. Yeah.
01:29:34.846 - 01:30:05.798, Speaker A: And also I think it's cool your client is only one and anyone can sort of build a curated experience around benefiting the authors directly. Yeah, just a quick shout out to the Anomit and Swaroop over at Blockvigil. They're the ones who encouraged me to participate in this. I'm just starting out as a web developer as well as a blockchain developer, and I had a lot of fun doing this project. Awesome. Well, Aditya, thank you so much for kind of making this your first blockchain hackathon. And this was amazing.
01:30:05.798 - 01:30:25.982, Speaker A: And I hope you keep on building on top of this thing. And as you are working on this thing, feel free to send us updates and we'd love to share this on our end. Perfect. So thanks again. And with that, we'll move on to our next demo, and that is Project Atomic Ninja. So I'll welcome Fabio to take it from here. Hey.
01:30:25.982 - 01:30:51.590, Speaker A: Hello folks. Sharing the video now here. Hello everyone. Hi. We are the team boss up. And for this hackathon, we are developing an application that will make the money Legos Dream actually true. It's basically interface that uses the Google Blockly to make atomic transactions with multiple protocols.
01:30:51.590 - 01:31:08.970, Speaker A: Yeah. So this is the help screen. We included a brief tutorial here. Please read it. I'm going to skip it. So here to the left we have our toolbox with all the blocks we can use to perform a transaction. So I'll build a quick transaction here because we don't have a lot of time.
01:31:08.970 - 01:31:41.990, Speaker A: So basically I'm sending ten ETH. I'm Flash loaning 100 E. And then let's say I want to do another Flash loan here. Then inside this Flash loan, I'll send ten way to Vitalik below here too. Then I'll swap one ETH for Die and then send ten die to Vitalik and maybe borrow an additional 100 die. Ten die. Sorry.
01:31:41.990 - 01:32:25.880, Speaker A: So basically once you have your transaction built here, you can move it freely like this. And then this is the simulation button. So in this, we're performing a call to Rio Node actually to infuria, and it's executing the atomic transaction and returning if it's going to work, if it's signed and sent. And basically once you're happy with your transaction, just press play here. And then this will log into your portis wallet and send the contract. But we're actually blocking that right now because, of course, there's a lot of risking performing this right now. If you have any doubts about the blocks, rover the blocks here and you'll see a tooltip saying what it does.
01:32:25.880 - 01:33:11.938, Speaker A: Yeah, and while it's already very cool right now, there's a few things we are still planning to do. The first one is like a little makeup in the user interface because we could calculate values better. For example, if you need to borrow ten die, we can already set the amount of you need to send first. There's also two challenging stuff. One is like, we would like to be able to put a return of one function into the input of another so we can link transactions better as well. Put some kind of conditional execution. So, for example, say do Dswap if that transaction failed before or something like that.
01:33:11.938 - 01:33:51.428, Speaker A: But that's a pretty challenge. But we are pretty happy with the result we got right now and hope you guys like it. Yeah, and it's currently live on Atomic Ninja, so please try it out too. And it's served with love from my PFS. This is super cool. I'm really into anything sort of like no code around transactions and piping them and building them. So I'm a big fan of the Google Blocks.
01:33:51.428 - 01:34:32.884, Speaker A: I like it more than node red, so it's really fantastic to see someone building on it because that looks great. So I guess you have to predefine all these components yourself. And what do you see as the future for we've been the way we envisioned this. We actually built this on top of Google's Blockly, and we made it in a way that it's really easy to extend. So each block is one JS file. So the way we envision this in the future is companies themselves contributing their blocks to the platform. So basically they open a PR with their blocks.
01:34:32.884 - 01:35:34.874, Speaker A: And then we feel that by having the developer of the platforms creating blocks, this can improve a lot too. The limit is their creativity. I guess something that I would be curious about is this makes it simpler or I guess more visible for people. But at the same time, unless somebody has kind of all the knowledge of how these things actually work, it would be hard for them to understand what they're really building. Is there a way to create either additional documentation or additional simulations that would make it more understandable of exactly what's going to be happening and what the outcome will be for a user that's just coming to this for the first time? Yes. I mean, now we only check if the transaction will be mined so it doesn't revert. Basically, there are ways of providing better feedback.
01:35:34.874 - 01:36:24.960, Speaker A: We already know how to point which block is failing, for example. But the way we try this, we do an ETH call to a node. So it's very hard to check for example, the end result of the transaction. Are there any tokens there? Are there any ETH left in the atomic contract from the user? Those are hard and we're thinking about those. There are a number of ways to improve this and the way we see this is like a tool for maybe the financial hackers there that can't code so they'd be able to perform a flash loan, for example, without having to dive into Solidity and JavaScript and so on. Yeah, but you definitely need some kind of knowledge of the systems themselves before using it, otherwise you cannot make sense of any of it. Thank you.
01:36:24.960 - 01:37:14.800, Speaker A: Yeah, it's a really cool concept and I think it's everything within the ethereum world. I wonder if there's an opportunity to sort of also be a bridge for nontechnical folks to the legacy financial world. Because you can imagine with this kind of interface you can unify a lot of different types of applications not only within the ethereum ecosystem but potentially stuff outside of it. That's a whole different stack. But I think it makes this much more interesting too because you can set up strategies that are sort of holistic in nature. Yeah. What is the future for the project? We'd like to keep developing it.
01:37:14.800 - 01:37:50.568, Speaker A: We might actually need some help in the front end because neither of us are front end developers, so we can move faster. But generally I think we try to keep doing more pieces and improving overall experience. Cool. I love it. Thank you so much. This is a really cool demo and I'm also excited to hear this is live and keeping the Money Lego vision going. So with that, we'll move on to our next demo and that is Team Art DeFi.
01:37:50.568 - 01:38:44.300, Speaker A: I'll let our Team Art DeFi kick off with their video. Hello. Yep, I'm sharing my screen. Welcome to Artify Crypto artwork present one of the interesting use case in the blockchain environment. Crypto artists are able to produce their own crypto arts and publish online and in return they get NFTs for further sales. Crypto art is actually quite different from other NFTs and it has two unique properties. First of all, the creation of the NFTs itself is actually originated from the individual users over the world rather than a centralized party.
01:38:44.300 - 01:39:46.896, Speaker A: Secondly, the income stream are all record on chain rather than off chain for both primary and secondary market. With these properties, Artifact aims to evaluate the artist's credit scores based on this and at the same time establish a lending pool with customized collateral ratio for these individual artists based on their credit score. With that, why don't we move to the demo? So here is the Artified interface. Once you have MetaMask connected, you are able to see the main screen. The main screen on the left hand side you can see the artwork statistics, something about myself like how much income I get from the primary sales and how much royalty I get from the passive income. So we talk about the lending pool. So lending pool information in the middle.
01:39:46.896 - 01:40:35.570, Speaker A: For now I don't have any deposits and norms, but I'm going to make one. So for example, I'm going to make 500 die deposit as a collateral as a start. So the MetaMask information pull up and I get a bit of guess limit so that it can get through. In the meantime, let me show you additional screen. Right. You can see the on chain data that we have collected, including all the artwork that this artist has produced, all the sales that has come through before, et cetera, et cetera, from two or others different platform. You can see the Depressive has come through and now you can see my scoring 309.
01:40:35.570 - 01:41:26.720, Speaker A: What that means is actually lowering my collateralization ratio. So you can see I am able to borrow 82% out of my collateral, which is slightly higher than what Avi has offered. Now I can make a long maximum four one three die for example. So basically that's it going back to the Ming presentation slide. So this diagram summarize what has happened. We have relied on the graph and effectively chain link to collect all this online information from different decentralized crypto art platform. Crypto artists are able to make collateralization and loan together with other depositors.
01:41:26.720 - 01:43:08.644, Speaker A: Adifi has a smart contract and also redirect all the loans and borrows to Avi to enhance their lending pools for the future work. In the future we can extend to other NFTs with similar properties. At the same time we can allow more Y'all to see trendy combination in lending pools and also we can think about more on the privacy of the artist as well. So that's all I have it I have a quick question. How is it like if I were somebody that essentially bought NFTs for myself in order to increase their price, would that allow me to essentially cheat the protocol or borrow against fake value? Technically that's possible. But I guess the problem I guess the crypto art community would make that not happen, but in the sense that because crypto art is very in a sense it's very self organized community, if you publish a crypto art and try to pump up the price, artists would easily be soft notified in the sense that the others would probably know that. Got it.
01:43:08.644 - 01:43:40.428, Speaker A: Thank you. Jesse, you're muted. Sorry. Yeah, I think it's a really cool idea. I guess I'm curious from the artist perspective, what problem are you solving for them? Is it just that they need liquidity to fund more work? What's the core problem solved. And that might be good to address because then can think through the solution versus others. Sure.
01:43:40.428 - 01:44:23.324, Speaker A: So if you imagine the crypto artists, what they are trying to do is really propose all this artwork, most likely they are doing it for life. So now with crypto art, all your finance your income is actually coming from cryptos anyways. So at the same time, you have a platform where they can do all this reverse financing, meaning that soft lending money or depositing their money in a similar platform that are tied with their crypto artwork. So that would come through the whole cycle where they can gain their money from the crypto art and directly finance their usage of that in the same world. Got it. Okay, cool. Thank you.
01:44:23.324 - 01:44:47.200, Speaker A: Yeah, that's great. Awesome. Thank you so much. And with that, we have two more projects to go before we're done for the day. And I'd like to call up Magic Bet, who've made a no loss betting system to show off their demo. Hello? It's me, Andrew. Let's just wait for my other two there's, Brendan.
01:44:47.200 - 01:45:11.576, Speaker A: Okay, I'm just going to start playing the video now. Let me just change the audio source. Right, I'm going to start playing now. Welcome to this video demo for Magic Bet. Magic Bet is a no loss betting platform. The idea is simple. You stake die on the outcome you think is going to win.
01:45:11.576 - 01:45:46.116, Speaker A: If you choose the right outcome, you will win a share of the total accumulated interest, but everyone gets their money back whether or not they bet on the right outcome. Magic right, let's see how it works. At the moment, we've only deployed a factory contract, and this factory contract will itself deploy individual markets for each event. So let's create a market right now. So this has been pre populated with an event. Who's going to win the upcoming election, trump or Biden? I'm not going to explain the details. There isn't really time.
01:45:46.116 - 01:46:10.840, Speaker A: All I will mention is that this transaction is actually going to create three contracts. It's going to create the market contract. It's also going to create an ERC, 20 token contract for each outcome. The idea is, if a user bets, say, ten die on Trump to win the election, they will receive ten Trump ERC, 20s, which must be burnt in order to receive their die back at the end of the event. Excellent. So the market contract has been created. We can start betting.
01:46:10.840 - 01:46:44.660, Speaker A: Let's say I think Trump is going to win the election and I want to bet ten die that he's going to win. So what I'm going to do is I'm going to select Trump, tendai press Enter. I'm now going to switch account and make a bet on Biden from a different address. Right. I've now changed account and I'm going to make a bet on Biden. But before I do that, I want to point out that you can see here interest has already started accumulating on the ten die bet that was just made on Trump. So let's say I think Biden's going to win and I want to bet six die.
01:46:44.660 - 01:47:16.128, Speaker A: Now, I want to show you the Ether scan page of those transactions we just made and something I didn't mention is that we have full uniswap integration and those bets weren't actually made with Dai, they were made with Ether. And that is what is going on here. It is the Ether being converted to Dai by uniswap. And down here is the actual bet itself. We can see that six biden, ERC, 20s, were ministered to the user. And of course, this is the Ether scan transaction of the user that bet on biden. Then six die was sent from the user to the contract and the contract sent the six die straight over to Ave, where it starts accumulating interest.
01:47:16.128 - 01:47:47.390, Speaker A: And of course, it is easy to track using the front end what's going on with each market. So, if we press this, I here, we can see all of the relevant details of this market. And here on the markets tab, we can see the relevant details of all of the deployed markets. So now let's conclude the market so that we can withdraw our winnings. Now, in order to do that, the contract needs to know who won. We have a full, decentralized Oracle solution for this. However, there isn't time to get into that in this video, so we're going to skip to the end.
01:47:47.390 - 01:48:07.490, Speaker A: So here is the resolved Oracle. Apparently, Donald Trump won the election. Now, the contract is in a withdrawal state. This means that the contract has spoken to the Oracle and figured out who won the event. And as you can see, a withdrawal button has appeared. I'm currently in the account that bet ten die on Donald Trump. So we're going to withdraw that.
01:48:07.490 - 01:48:41.860, Speaker A: I'm now going to switch to the account that bet six die on biden and withdraw that. So I've now changed account and I will withdraw the 6th die that was bet on biden. Here is the Ether scan page for the user that bet six die on biden. This is their withdrawal transaction. And now let's remember that according to the Oracle, donald Trump won the election. So what's going on here is that the user is burning their six biden ELC twenty s and they are receiving exactly six die back, which was their bet. They're not receiving anything else.
01:48:41.860 - 01:49:09.610, Speaker A: They bet on losing outcome. Now, here is the transaction for the user that bet on Donald Trump. Now, as before, the user's Trump ELC 20 tokens have been burnt. They received their ten die back and in addition, they received the total accumulated interest of the contract because there was only one person that bet on the winning outcome. In reality, of course, the total interest will be shared among everyone that bet on the right outcome in proportion to how long they bet. And that is the end of the demo. Thank you very much indeed.
01:49:09.610 - 01:49:46.914, Speaker A: Right, that's the end of it. Do you have any questions for the three of us? For example, pool together, does the no loss lottery, what was the thinking about building something with pool together versus building something separate. Yeah, this project was very much inspired by Pool Together. In fact, the original name was Bet Together and we were just really spitballing ways of making saving money fun. So that was it really. It was like Pull Together really is successful because it's a fun way of saving your money. And we thought that this is in a very, very similar vein.
01:49:46.914 - 01:50:09.130, Speaker A: Instead of just putting in a lottery where you can't really do anything, it's not very active. Instead you're like, well, actually, I'm going to take a little bit of a gamble. But it's not much of a gamble because you'll still get your money back. But that was really the inspiration. Do you think maybe this actually gets around gambling laws? Because you don't lose your money, you the correct answer is yes. We sort of thought about this. It's a different kind of legalization sorry, legislation, prize linked savings.
01:50:09.130 - 01:50:52.070, Speaker A: So yeah, gambling licenses are not required for this, which is kind of nice. Fascinating. I would also love to learn how you solve the oracle problem. It uses Realatio, if you've heard of that as a first oracle. So basically anyone can choose who the winner is and then there's a set period of time before someone else can then dispute it. But if there are continued disputes, we're using something called clearis, which is a decentralized court. Basically, they have quite a sophisticated system when there's I think there's something like 500 jurors, who among them will look for among them, they will decide they'll become the final arbiter.
01:50:52.070 - 01:51:21.960, Speaker A: But the idea is that it would never get that far because you actually have to pay 62 E to call that court, which means someone has to submit a bond with a wrong answer of above that amount of value before it would make any sense to call that court. Therefore, it will kind of never happen. And it just relies on no one is willing to lose 62 ETH by posting the wrong answer, if that makes some sense. Fascinating. Cool. Yeah, this sounds fun. Let's go to New Jersey and open up a betting company.
01:51:21.960 - 01:52:05.926, Speaker A: What are the thoughts around sort of like no loss impacting, the way people actually know? Because the skin in the game dynamic kind of changes a bit, right? Yeah. So we did think about this and it's likely that we can't really use this product as a prediction market because people won't really care so much, which is fine because we're not interested in positioning it as a prediction. It may you probably won't be able to get necessarily accurate ODS in the same way something like Auger would give you accurate ODS. But that's fine. That's not what we're going for. As long as people think it's a fun way to save their money, that's fine with us. It doesn't really matter if the ODS represented aren't that accurate, but if they aren't that accurate, then in.
01:52:05.926 - 01:52:24.122, Speaker A: Theory, someone who does take this kind of thing seriously can come along and arbitrage in theory, we'll just have to see. But to answer your question, we don't see that it matters if people don't have skin in the game, because it's not a prediction market. It is a fun way of saving money. Cool. Very cool. Awesome. Thank you so much.
01:52:24.122 - 01:52:48.382, Speaker A: Magic bet. And with that, we are on our last demo for this session. So I want to thank everybody on this call and the live stream for making it through to the end. And with that, I'd like to call up Team Blazor for their last and their amazing demo. Hello, guys. Hi, everyone. OK, so just before we show you the video, really quick introduction.
01:52:48.382 - 01:53:39.860, Speaker A: This is actually a follow on hack from something that we did at East London. Blazar is a fixed rate lending protocol with an automated market maker, which makes it frictionless. So essentially what we're doing is trying to do the same thing as Dharma V One or ETH lend, but without the pain of having to match individual lenders with individual borrowers. And the way that we do that is that we piggyback on the money market. So your Ave or your compounds to do that and then do the Asynchronous matching. So at ETH London, we've done the depositing side and for this hackathon, we've actually hooked up the borrowing side, which in some ways has been much more difficult. So we'll launch the video now and then answer any questions.
01:53:39.860 - 01:54:24.610, Speaker A: All right, so this is how it works. This is on the Blazor site. I can check here on my MetaMask, show you that I have one ETH and zero die. What I'm going to do is I'm going to use my ETH as collateral to borrow Dai as a fixed term and a fixed rate. And I'll show you later how it's connected to Ave. So here with this slider, I can choose how much Dai I want to borrow. And I have an automatic calculation, which is three X the amount in terms of value, dollar value of ETH that I need to put in as collateral.
01:54:24.610 - 01:55:09.442, Speaker A: That doesn't change based on the amount of time, because it's always the same ratio. So let's say I want to borrow 20 die for three months. It automatically sets the collateral I need to put in and I'm going to click on borrow. Here. The normal MetaMask transaction happens, all right? Once that's minted, it goes directly to the dashboard and I can see that I have a loan for 20 die that I need to repay in August of this year, in three months time. And let me quickly show you here what's happened. On MetaMask.
01:55:09.442 - 01:55:55.482, Speaker A: We can see how things have changed. I no longer have one ETH because that's been locked up as collateral. And I now see that I have 20 die. This is on Coven and everything. Now, let me show you what happens under the hood. You can see that this is the transaction that has happened. And you can see that essentially I connected first with the Blazar Smart contract which took my collateral, transferred it to Ave, ave sent back the A ETH in exchange for the collateral and then sent 20 die to the user.
01:55:55.482 - 01:57:00.642, Speaker A: So there we go. And this is the UI that we put together for depositing site that we already built. You define a deposit, the asset and you see the APY for this asset and the maturity date. You see how much interest you're going to be getting up front, plus 4000 future die which you can retrieve on the maturity date. And for the borrowing side which we built for this hack, you define your loan, the asset and you see the Apr and then the repayment date and the total amount that you have to pay back, including of course the interest. So on each one of those when you click on deposit, you can see each of the assets that you've earned interest on and then the FDI that you've got, which you can send by putting the recipient's address to anywhere. And of course you can adjust the date moving forward and earning more interest upfront or moving backwards and paying a difference to be able to do that.
01:57:00.642 - 01:58:07.210, Speaker A: And on the borrowing side, each asset you've borrowed, again, you see exactly how much you borrowed and what's the interest you have to pay on the date. You can see the Apr on the date that you made the loan, they took the loan and then we can adjust the majority date and see the difference that you have to pay again in Dai based on the given Apr on that date. That's it fascinating. I have a question. Is the Apr determined by you guys or is it adjusting based on market conditions? Kuba, do you want to take that one? Yeah, definitely. So it's a pretty complex model because we need to have like a double bottom line with the external conditions that are driven by the third party pools when we use the liquidity and with the expected interest rate that's going to be in the future in our model. And we also try to balance and match as much funds as possible.
01:58:07.210 - 01:59:00.300, Speaker A: So when we see that in our protocol there is more deposits, we obviously are going to use the typical lending pool mechanics and decrease the interest rate to attract more loans. So yeah, there is a pretty complex algorithm to set up the rate. We're happy to show basically if you think of a compound on an Ave, the rate is going to be determined by the utilization rate. Basically in Blazor there's going to be a kind of a utilization rate per maturity date because we want to see how many deposits are going to be due to be paid back on that date versus how many loans have been borrowed. For that date. So we want to match those. And an additional parameter is to actually look at what the variable rate is right now and then the protocol comes up with the fixed rate.
01:59:00.300 - 01:59:29.498, Speaker A: Got it. So what is I remember the project from E Fundon. I thought it was really cool. I still think it's really cool. What do you need to do to make this live? All right, well, actually so really good question. Thank you for asking that and thanks for remembering us. DAP Hero is also basically at East London.
01:59:29.498 - 01:59:57.840, Speaker A: We did the deposits. Now we've done the borrowing side. We've been working on the stable rate mechanism in parallel. It was just too big a job for the hackathon. And that's something that we're working on right now. So we expect that this is going to be live in somewhere between three and six months, depending on how much help we can get. Basically any investors who are interested in this, don't hesitate to send them away.
01:59:57.840 - 02:01:01.330, Speaker A: Do you need anything else besides been doing? I think actually areetti you can talk a little bit about this, but one of the biggest things that we've done during this hackathon is just do a lot of market research. So we've talked to a lot of traders, a lot of crypto workers, to figure out whether they would prefer putting in money, depositing money on a fixed rate or a variable rate, seeing how people would use these future tokens. And we're doing alpha tests right now, so if anybody wants to test this out and give us their feedback and tell us how they use it, then that'll be awesome. Retti, I don't know if you I'll post our website, you guys on the chat so you can send people our way. But yeah, basically I would love to get your feedback as an alpha tester to test our product, the UI, et cetera. And yeah, we need commitments. We got commitments, for example, from the paraphrase of this ward, the trading desk of MakerDAO, individual depositors.
02:01:01.330 - 02:01:20.738, Speaker A: And we need developers. We need at least three developers to be able to launch this in the next four to six months. Awesome. Very cool. Cool. Great. Well, that concludes our judging demos for this session.
02:01:20.738 - 02:02:12.134, Speaker A: I want to thank everybody who watched us on the live stream and stayed with us throughout the whole time and all the teams that put in all this time and all their hard work for the last four weeks to make this possible. So with that, we'd like to congratulate everybody on demoing today and we'll keep an eye out for everybody when we do our final demos on the closing ceremonies on June 2, where all the top projects will be presenting to our final set of judges on the second. And that'll be our finale for ETH Global's hack money. So thanks again to all of our judges and all the teams, and we'll resume with our remaining sessions later today and throughout the rest of this week. Thank you, guys. Bye.
