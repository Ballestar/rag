00:00:00.090 - 00:00:35.094, Speaker A: Way. All right, so I'm operating with the assumption that you guys can see my screen. Frank, can you give me a thumbs up? Because I can see you. Okay, good. All right, so what we're going to talk about today is how you can use Superfluid to build with programmable cash flows and NFTs at the same time. So the beginning of this presentation will just be about what Superfluid is, how you can use it. I'll go through a couple of examples in our docs about how to play around with superfluid, and then I'll quickly walk through some actual live examples using NFTs and then open up for Q A.
00:00:35.094 - 00:01:15.010, Speaker A: I'll try to do it quickly because we don't have a ton of time. But, yeah, if you have any questions, feel free to put them in the chat. So what is superfluid? Superfluid is a protocol for digital native programmable cash flows. It allows you to stream money with no capital lockup, and everything is programmable on chain. And what we like to think about Superfluid as is kind of what the Internet did for information blockchain is doing to value. And one thing that the Internet did to information is it allowed you to stream it in real time. Superfluid is doing the same thing, but for money and for value more broadly.
00:01:15.010 - 00:02:06.706, Speaker A: We believe that payments should work in the same way that services work, right? They've flown real time from the provider to the client, and money should be able to do the same thing. So what is money streaming? Money streaming is the process of creating continuous payments between two accounts. We allow you to create a direct link between one account and another and send value in real time in an on chain way. You can also do things like embed native payment terms into digital services. And the nice thing you get when you put these agreements on chain is you avoid delays. You avoid unpayment risk. Like, I know Fran from our team likes to talk about an example of him having to wait three to six months to get paid doing past jobs.
00:02:06.706 - 00:02:57.154, Speaker A: That's something we can eliminate using things like money streams. So getting more broadly into the Superfluid protocol, or not more broadly, more specifically into the Superfluid protocol. Like I mentioned, everything is on chain. These are agreements that take into consideration two users and allow you to create a link between two potential users or more. So what we do is we use basically time as an extra variable to calculate, once you set up a money stream between two accounts, how much money has one user sent to the other over time. So you can define a flow rate, meaning how many tokens you want to send per second to a user. And then we just use the block timestamp value on chain to calculate that for you in real time so that everything settles.
00:02:57.154 - 00:03:42.740, Speaker A: And there's the proper accounting for each user's balances. And what this does for us is it allows us to create a nice modular layer here which is upgradable and eventually extensible through governance that we have within the protocol. The other thing we can do is create programmable cash flows. So the little subheading under the title of this was creating programmable cash flows. You can create things called super apps, which I'll touch on very briefly later, that can react to streams that are sent into a contract. You can do interesting things with Callbacks there and it's definitely worth experimenting with them along with NFTs. So getting into quickly, I'm taking a quick detour into the prizes for this event.
00:03:42.740 - 00:04:17.866, Speaker A: We have some ideas for how superfluid can be used along with NFTs. We have a couple of articles we've written on this recently. We have an examples repo in our examples section of our repository. And these are the prizes we have for the event. So we have $2,000 for each prize. One for the best financial innovation using Superfluid and NFT, another for the best coordination mechanism using Superfluid and NFTs, one for the use of superfluid in either digital art or gaming. And then another for the most futuristic project built on superfluid.
00:04:17.866 - 00:05:04.558, Speaker A: Because we're not going to sit here and act like we know everything that's going to be created using some of these new primitives, but getting more deep into how you can actually interact with the protocol. There are really three types of contracts that you as a developer would need to interact with when creating money streams or dealing with superfluid. One of them is what we call the host contract, which is kind of like the brain of the protocol itself. Another is agreement contracts. So you have something like the constant flow agreement, which is going to facilitate money streams. You also have the instant distribution agreement which can facilitate mass payouts. And the third type of contract you're going to probably interact with are the super token contracts themselves.
00:05:04.558 - 00:05:51.914, Speaker A: So I'll talk about super tokens in a second. But you should know that if you're not a developer or if you maybe aren't as confident in your developer skills, you can use the Superfluid dashboard to interact with the protocol, right? You can very easily create money streams from this dashboard. You can very easily get your own super tokens through this dashboard. It's very easy to do that. However, if you are a developer, we have other tooling for you, like the Superfluid Developer console that you can access at Console Superfluid Finance. And that's worth playing around with if you're trying to create actual applications on superfluid. So when it comes to dealing with things, we're taking this on a lower level now.
00:05:51.914 - 00:07:19.290, Speaker A: We're going to get more into the developer side, how you as a developer can interact with the protocol. What you need to interact with Superfluid agreements if you want to create superfluid money streams or use that instant payouts feature using the Instant Distribution agreement, you need to have super tokens to do that. So super tokens are really just you can either create a native super token that has these special features that lets you create money streams, or you can wrap an existing ERC 20 token as a super token, right? So for example, if I want to go get some super token USDC or super token die, which is denominated in the little X symbol at the end of the normal ticker symbol, you can go to that contract and call upgrade to get some super tokens. So if I have die, I can go to the super token contract for die X, I can call the upgrade function. And then what's happening there is I'm just going to deposit some tokens into that contract and then it's going to mint me an equivalent number of super tokens. So if I have five die that I want to wrap that I want to upgrade, I deposit those into this contract and I get five super token die in return. The inverse of this process is the downgrade function, which just lets you burn those super tokens and redeem the underlying tokens back.
00:07:19.290 - 00:08:16.506, Speaker A: So it's a pretty simple process if you want to then do things within the agreements themselves. So if I want to create money streams themselves, what you can do is interact with the protocol on the low level in this way. So anytime you make a function, call to the superfluid protocol to either create a money stream or deal with some of those instant payouts. Like I mentioned earlier, what you need to do is first call the superfluid host contract that I mentioned earlier. That host contract will then call the Constant Flow agreement contract for you and open up your money stream. Now, a lot of this can be abstracted away using our new SDKs. You don't have to know how to make this call in low level Solidity, although we have examples in our docs and that you can find in our examples repo for how to actually do this.
00:08:16.506 - 00:09:16.138, Speaker A: I'm not going to get into the Solidity specific examples too much today though, just in the interest of time, it's really much easier to just use one of our SDKs to create these streams. So today in the interest of time, I'm going to kind of skip over some of these super app examples. Normally I would go through what a super app is, how you can do really interesting things in Solidity with programmable cash flows. I will skip this for now though, and I will just point you to the super app section of our docs if you're curious about this. But we're going to move over this and get into our SDK and some other things. But the thing that I mentioned earlier around just very easily opening up money streams using our SDKs, you can find some interactive examples on this inside of our docs. So you see here just a few of the functions you can call using our SDK to either read data about money streams or actually write transactions using money streams.
00:09:16.138 - 00:09:47.974, Speaker A: And what I'll do is I will take a quick pause here, go to our docs and show you, one, where to find them so you can play around with them yourself. And two, just kind of how they work. So we'll do this now, and then I'll quickly walk through a specific NFT example and then we'll do a little Q A. So let me stop my share and just open up a new window here. All right, let's go to our docs. I'll expand this so you guys can read it. All right.
00:09:47.974 - 00:10:23.586, Speaker A: I hope this is a little more readable. I guess I'm not even sharing anymore, am I? Now we're sharing again. You guys see my screen? Frank, can I get a thumbs up if you guys can see it? All right, wonderful. So this is our new interactive section of our docs around money streaming. You can come here at Docs Superfluid Finance and head to the money streaming section. And what you see here are a few examples of using our SDK to interact with the constant flow agreement. So if you want to create a flow, you can learn how to do it by coming to this first section here.
00:10:23.586 - 00:11:06.002, Speaker A: So we have this nice code sandbox up where you can kind of push things to the side if you want to see how the code actually works. And I have a very simple react app up where I am using this logic here to create a flow. So I'm creating a transaction object here using this SF CFAV One create flow function. I'm passing in an address as a sender. I'm passing in a recipient who is the receiver, which I'm just going to enter in this box over here. I'm passing in a flow rate which is the amount of tokens per second that you want to send to the recipient and it's denominated in way. And then I have the super token that I want to use.
00:11:06.002 - 00:11:48.270, Speaker A: And here I have just the address of dix on the covenant testnet so you don't have to really enter that in. If you come to this example, we have the sender address hard coded and it's unlocked. So I do have a signer created with this sender. Don't take all of the tokens from this example, they're all fake test tokens. But you can enter in your own address here and create a flow from this hard coded address to your own address and then see how this works. So if I enter in an address here, I have this preloaded. I don't think I have a stream open to this address already, but I guess we're going to find out.
00:11:48.270 - 00:12:13.400, Speaker A: I can enter a flow rate which is then converted into how much of that token per month is actually being sent. Maybe I'll add one more zero here. So it's roughly $25 per month. Then I can click this button to create a stream. All right, it looks like I already have a stream open to that address, so it's going to revert for me. But what I can do is grab a different address and this should work. So let me grab a different address here in my account.
00:12:13.400 - 00:12:59.954, Speaker A: Copy this. I can paste this in here and click to create a stream. All right, so you can see that that worked. I have a message here that says you just created a money stream. You can view the stream at this link and just some more data around the sender receiver and flow rate for that stream. So if I open up the superfluid dashboard now, zoom in a bit again, we can see here, this is the address that's unlocked for us. Let me refresh and we will be able to see here in just a second that new flow created.
00:12:59.954 - 00:13:44.686, Speaker A: So you can see that that address that I'm sending from is this one here, which is the same one we see up here. And this is the stream we just created. So I just copied and pasted in this address and now we can see that there is a new money stream open here. So, boom, we've just created a money stream. Now if we want to update that stream, we can do the same thing here where we can just pass in that address again, enter a new flow rate and it'll update. And that function looks very similar to the create flow function where the only difference is update flow instead of create flow. And this will revert if the stream doesn't already exist.
00:13:44.686 - 00:14:24.354, Speaker A: So don't try to do this with the stream that already exists, otherwise you'll get an error message. And then finally down here, you can delete the flow. So if I want to delete this stream, let me go in here and copy this address and we'll make sure this gets deleted. All right, looks like we got a little error message there. Let me refresh this code sandbox. Sometimes these get a bit buggy when you can find them to such a small space. But let me paste in this address, we'll click this.
00:14:24.354 - 00:15:05.706, Speaker A: Looks like we're having an issue with that, which I'll have to check after this ends. But the idea here is you can just use these very simple operations to create updated delete flows. So this SF CFAV, one delete flow will delete the flow for you. And yeah, that's how you can manage that flow creation updating and deletion process. So I'd highly suggest going here to play around with this. This is a good just learning exercise for you to get an idea of how this works. And then also just copy paste this code or fork the code yourself for your own projects.
00:15:05.706 - 00:15:53.200, Speaker A: So we'll pause there and we'll run back to our presentation. All right, back into our slides. Right, you guys just saw a quick little run through of using the Core SDK. With the last five or so minutes I have. What I'm going to do is just walk through the logic behind an example that you can create on your own, and I'll make sure that you guys get the links to these examples to play around with on your own. I've got both a remix just for you and a repo that you can check in our Examples section of our repository. So I'll run through the example itself, I'll point you guys to the links to actually interact with it, and then we'll get into a bit of Q and A.
00:15:53.200 - 00:17:02.754, Speaker A: So before I talk about the example, I want to talk about a few high level concepts that are also interesting to consider when it comes to Superfluid and how you might be able to use Superfluid to help. And not only Superfluid, but also NFTs to help with Dow coordination mechanisms. One thing to consider is this idea of networked cash flows. So not only do we enable this whole concept of streaming money and programmable cash flows, but the more of these money streams end up in existence, the more opportunities there will be for them to connect with each other and create this really unique network. So, for example, I get paid in a Superfluid money stream. I take a portion of that money stream and I send it to Ricochet Exchange, which is a protocol for real time investing. And if you think about it, money comes to me from Superfluid, I get the money, I send it to buy wrapped ether and bitcoin and other assets that I like, and I might take another portion of my salary and point it to some kind of crypto donations app.
00:17:02.754 - 00:18:20.178, Speaker A: I might take another portion and put it into a liquidity pool, which do exist. You can stream into LP positions, and you get this sense of what can happen when you have these things just bouncing off of each other, right? And it also can happen within an organization. So the example I'll go through will discuss how you can use the same kind of concept within a Dao when it comes to Dows themselves. One problem that we're seeing in the Dao ecosystem is that Dow treasuries are really big, and capital allocation is something that hasn't really been figured out yet. So there are grants, programs and things, but in terms of the actual operational budgeting, there aren't that many great best practices for that. And right now, when you think about how funds are allocated within a Dow, they're typically done one of two ways, right? You can either do it in a very monolithic way based on grants and proposals, or you can have working groups with their own budgets, and you also have hybrids of one and two, right? And one way to think about this is using NFTs to allocate budgets to these working groups. So maybe you have a few working groups or just a few individual contributors.
00:18:20.178 - 00:19:46.950, Speaker A: And maybe the way to really define a budget is to issue each working group or individual an NFT which could then represent a portion of the cash flow that the Dow is spitting off or a portion of the cash flow that needs to be sent to each individual working group to compensate them for their work. So we have a contract we built called the Budget NFT contract that will store and manage allow a Dao to budget out between their different working groups using NFTs and superfluid streams. So what the Dao need to do is deploy the contract, send a superfluid stream or just some funds more generally to the contract and then whoever owns the contract, maybe the multi SIG for the Dao, they can mint new NFTs to contributors that will manage various aspects of the Dao. So this is interesting because it helps with the management of flows of funds within the organization. And the NFTs can also be traded amongst participants and you can also split them and merge them back together and do interesting things with it. So the way this actually works in practice is you have this diagram of the Dow Treasury, they're streaming into the Budget NFT contract and then you have these NFTs minted. The Dao can open the stream and send super tokens to the main contract.
00:19:46.950 - 00:20:37.142, Speaker A: NFTs will be issued using this function called Issue NFT and then the owner of those sub NFTs. Each individual owner can manage those NFTs themselves so they can split their own NFT off into members beneath them and then they can have access to different sources of funds as well. So again, just a reminder, I'm not going to have time to go too deeply into this because I want to have time for a bit of Q A. But you can find this example in our protocol monoreepo under examples Budget NFT. And to give you one more, just quick idea of how this logical work. Number one, we're going to send a stream to the Budget NFT contract. Number two, we're going to use the Issue NFT function to issue an NFT to group in group one.
00:20:37.142 - 00:21:18.834, Speaker A: What that Issue NFT function will do is also open up a stream to the owner of the NFT and then anytime the NFT changes hands, the stream changes who it's being sent to. So if you transfer the NFT, the new owner of the NFT will then receive that stream. So we do this a couple of times. If you then own one of the sub NFTs, you can split streams and merge them back together. For example, if I have a couple of streams I can merge them together using the merge streams. We used to have three NFTs down here, now we can have two of them combined into one if you want to consolidate groups. And you can also split streams off.
00:21:18.834 - 00:21:59.460, Speaker A: So if you want to split an NFT in two, essentially, and create a duplicate NFT, what that will do is it will send half the stream that was being sent to the original NFT to a new owner of the new NFT. Right. So lots of interesting things you can do here. Again, I'd highly recommend going to the examples repo and seeing the code yourself, but that's just one conceptual example of how you can use NFTs and superfluous streams together for some interesting coordination mechanisms. So we'll do a bit of Q A while. We have time right now, but I just wanted to say before we do that, we really want to help you build. Right.
00:21:59.460 - 00:22:24.300, Speaker A: If those of you are here after joining our Discord or something, or just being in the ETH Global chat, you've probably seen my name pop up a few times. Just trying to help teams form and throw out ideas. So please feel free to reach out to me either on Discord or via email or even Twitter, and I'm happy to help you guys. So we'll pause there and we'll get into some of the questions you guys might have.
00:22:26.510 - 00:22:57.880, Speaker B: All righty, Sam, I'm happy to say there's been quite a bit of conversation going on. We had a few skeptics, and for example, there was Aditya that thought that it was proprietary information, but as I shared with him, our code is all open source. So you can go and figure out how the money is streaming in real time of Nogas, just by checking a repository. I think Eniko was also asking some interesting questions. Eniko, I hope I cleared it up. Did you have any other questions?
00:23:03.370 - 00:23:04.310, Speaker A: Maybe not.
00:23:04.460 - 00:23:48.258, Speaker B: Maybe not. We also had Eryam, who is a bit skeptical, but I sent him a stream, so maybe he's less skeptical now. I have one more, but it reveals some cool ideas. Well, Eneko, it's cool to hear that. And if you need help creating a team, also let us know. Sam's been in contact with a bunch of other hackers, so if you need people to hack with, let us know. Is there a way to real time stream by holding NFTs? Yeah, so we have a few different solidity examples that allow you to build NFTs which carry the cash flows.
00:23:48.258 - 00:24:08.090, Speaker B: So it's possible, but obviously that money has to come from somewhere, right? So you have to build some sort of system. That makes sense. But yeah, Sam just shared one of the examples of kind of streaming NFTs.
00:24:12.990 - 00:24:42.950, Speaker A: Well, thank you guys for joining. I'll obviously stay here for a few more minutes if you guys have any questions, but if you guys have any fran might have helped answer some questions from Skeptics, but if you feel like it's proprietary information or something like that because we're being somewhat high level. The only reason we're being somewhat high level is that when you get to the actual solidity itself, it can be kind of dense. But if you want, I'll give you the whole rundown on how it works. Just hit me up, and we can have a session. No worries.
00:24:44.010 - 00:25:22.994, Speaker B: I'd like to actually know what is the reason that you wanted to include as money streaming? What's the idea behind it? What kind of use case do you have? I'd say money streaming is Crypto's way of doing recurring payments. So in traditional finance, recurring payments are done once a month, every two weeks, kind of depending on which tradition you're from. But that's not how our relationships work. Right. It's not how we consume services, digital services. It's not how, like, when you rent a house, you pay it once a month, but you're using it every day. Right.
00:25:22.994 - 00:26:00.320, Speaker B: Using Web Free, we can create these payment streams which are actually much closer to the way we actually consume services in the real world. So the kinds of use cases that we think superfluid will be used for are literally every single recurring payment that you can think of, from your salary to your rent, to your gym membership, to your support for a growing artist or to your donation to a charity in Zimbabwe. Right. Literally whatever you would generally do on a monthly cadence, you could do every second instead.
00:26:04.530 - 00:26:13.330, Speaker A: Thanks. We had some good comments from Leslie here. I don't want to cut you off if you had something else to say, but I can address Leslie's couple of comments.
00:26:15.110 - 00:26:16.354, Speaker B: Yeah, go for it.
00:26:16.472 - 00:26:54.686, Speaker A: Cool. Leslie? Yeah. First of all, yeah, I totally agree with you on the transforming payments to low wage workers and payday loans. I've worked in roles where I had lots of teammates or just people that I worked with that were in positions where they had cash flow problems due to the fact they got paid every two weeks and not in real time for their services. So I'm hopeful that this kind of technology can help with that use case as well. In terms of sending the money, good question on whether or not you need to fund an account. So when you create a money stream for, like, let's say, $10 per month, I don't have to have all $120 per month up front to open that stream, right.
00:26:54.686 - 00:27:35.360, Speaker A: If I want to send it for the whole year, you just have to have a minimum balance of super tokens in your wallet. So I can opt to send you $10 per month, and as long as I have a greater than zero balance of super tokens in my wallet, the stream will stay open. Right. You just want to let that balance get to zero. So the nice part about that is I can send a stream without having to lock up a bunch of capital in one place, and it's just better for capital efficiency in terms of setting a max. So it depends on what you mean by max. The flow rate that you're going to send is just going to define an amount per second in terms of the tokens you want to send.
00:27:35.360 - 00:27:39.980, Speaker A: That stream will stay open until you close it or until the.
