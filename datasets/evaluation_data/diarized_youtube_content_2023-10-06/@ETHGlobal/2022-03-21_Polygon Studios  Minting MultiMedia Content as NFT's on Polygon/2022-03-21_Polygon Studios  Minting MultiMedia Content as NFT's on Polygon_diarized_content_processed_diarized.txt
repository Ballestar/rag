00:00:09.530 - 00:00:32.790, Speaker A: Awesome. So it is 230. So we'll get this workshop started. Hi everyone, thank you so much for joining. We have Rahat from Polygon Studios doing a workshop on minting multimedia content as NFTs on Polygon. Questions go into the zoom chat and Rahat will answer them all at the end. And with that being said, I'll pass the mic off to Rahat.
00:00:34.810 - 00:00:55.866, Speaker B: Everyone, how are you doing? My name is Rahat. I'm a developer advocate of Polygon. Really excited to be giving you all this workshop today. Share my screen. Awesome. Cool. So, yeah, like I was mentioned, this is all about Minting multimedia content as NFTs on top of the Polygon blockchain.
00:00:55.866 - 00:01:49.834, Speaker B: A little bit about the agenda for today. We're going to do a little bit of an introduction to what Polygon is, an introduction to the ERC 721 standard for Minting NFTs. We're also going to do a little bit of an overview of a smart contract that I wrote that has like a very basic ERC 721 implementation. You'll also be able to go on Polygon scan and actually interact with the deployed contract if you want to. And then finally we're going to go over just like the importance of metadata for NFTs beyond JPEGs. So what do we need to do inside of our metadata to make sure we don't have just sort of like a picture? We can do things like having videos, we can do lot, a lot of cool things, different data points that we can add to our metadata to do awesome stuff. So, yep, first of all, I'm Rahat, I'm a developer advocate over at Polygon.
00:01:49.834 - 00:02:22.586, Speaker B: Previously been a front end engineer and solidity engineer. Also an indie hacker, web Three enthusiast around. Last year I think I actually participated in one of these hackathons. So it's really cool to be able to come here and show you all how to do some really cool stuff. Now, some places you can find me are on Twitter at Rahat codes. The code that I show you today will also be available on my GitHub if you want to go through it. So at any point you can follow me on GitHub as well to get some of that code and yeah, we'll just dive right into it.
00:02:22.586 - 00:03:09.866, Speaker B: Now, first of all, what is Polygon? So Polygon is the leading platform for Ethereum scaling and infrastructure development. What does that mean? We have a whole bunch of different solutions to help you build on top of Ethereum and scale it and make it, I guess, more accessible to different types of folks. We have a lot of things coming out like ZK roll ups, optimistic roll ups, but today what we're really going to be focusing on is Polygon's proof of stake blockchain, which is where we'll be launching our basic ERC 721 NFT contract. Cool. So what are some of the advantages of building on top of Polygon? First off, if you've already been developing on Ethereum, if you already know. Solidity. Great.
00:03:09.866 - 00:04:15.630, Speaker B: You already know everything you need to know to build on top of Polygon. You can leverage the existing Ethereum ecosystem and all of its tooling and with just a couple of bits of configuration, you can launch stuff on Polygon. And I'm going to show you that today through a little bit of small code base where I import an ERC 721 contract, extend it a little bit and use hard hat to deploy that onto the Polygon main net. The other thing is it's cost effective for me to actually deploy this NFT smart contract or going back a little bit when I was first learning about how to deploy smart contracts. I think the very first time I tried to deploy something to main net, the gas costs were something around like one K or something for a very admittedly poorly written smart contract that probably could have gone through a bunch of optimization. But it was my first time saw that price attached to that deployment and I was like, whoa, no, not happening. But Polygon is awesome because cost effective.
00:04:15.630 - 00:05:10.494, Speaker B: When I deployed the demo for this smart contract this morning, it cost me just not even a few Maddox, like eight Maddox or something. It's very different pricing tier and it's a lot more energy efficient, uses less energy than the Ethereum main net because we're already on a proof of stake blockchain. Cool. So I mentioned this a couple of times. ERC 721, what does that mean? What do we do with that? Why are we talking about ERC 721? ERC 721 is essentially a standard for how we can write NFTs. We can import the standard from something like OpenZeppelin. Opens Uplin is great because they house a whole bunch of different battle tested smart contracts that you can import into your own.
00:05:10.494 - 00:05:39.338, Speaker B: You can extend them, customize them for your own needs and basically put them all out onto the Polygon blockchain. So without further ado, this is one of my favorite codes that I love sharing. Let's look at some code. I'm just going to switch over to Sharing Vs code so you can see what I'm talking about. Okay, let's share vs. Code. Cool.
00:05:39.338 - 00:06:12.610, Speaker B: So like I mentioned before, developing on Polygon is exactly like developing on Ethereum. Everything, all of the tooling ports over one to one. What I have here is a very basic smart contract put together with Hard hat. So if I go into my contracts, I have this NFT smart contract. I called it metadata. NFT sol. And the reason I called it that is because this is going to be a smart contract that you can mint pretty much any sort of like contract that you want, any sort of NFT that you would like.
00:06:12.610 - 00:07:07.990, Speaker B: And you can go ahead and basically depending on the metadata that you supply to it, it will mint an NFT for you. So what does that mean? First thing I did up here I've got these two import statements. I'm leveraging again the Open Zuplin smart contracts that already exist, specifically the ERC 721 standard. You'll notice that instead of just importing ERC 721, I actually imported one, its extensions called the ERC 21 Uri storage. Why did I do that? What does that mean? Essentially, after a certain version of Solidity, this set token Uri function doesn't quite work. So because I'm using Solidity above 0.8, I need to make sure I'm using this Uri storage extension in order for me to be able to leverage this functionality over here.
00:07:07.990 - 00:08:10.374, Speaker B: Now, how do I know that these functionalities actually exist and are available from ERC 721? You can take a look at the Open Zeppelin documentation and look up ERC 721 and see the different types of functionality that you can inherit from this smart contract. Now, how do I actually make sure I can leverage those functionality on line eight? You'll see, I declared my contract, which is called the metadata NFT, and I said that it is a ERC 721 Uri storage. Meaning I just want to inherit all of the functionality from that specific contract into mine. Doing some basic stuff. I'm using this counters smart contract which essentially gives token IDs to all of my NFTs inside the constructor. I'm calling ERC 721 and I'm passing it two arguments. First is a title for my NFTs.
00:08:10.374 - 00:08:40.494, Speaker B: In this case, I'm just calling it metadata. NFT. Sorry, I'm not very good at naming things. And then the ticker, which is going to be Mdnft, this is actually what it's going to be called on the blockchain. What you'll be able to look it up as on OpenSea. And I'm only going to write one function here, just the Minting function. The Minting function is going to take a token Uri, which I'll explain what that is in a minute.
00:08:40.494 - 00:09:19.326, Speaker B: But essentially it's just a link to a JSON object. So we're going to take that JSON object, we're going to increment our token IDs to make sure that we have unique token IDs for each of our tokens. We're going to call this Safe Mint function, which is part of the ERC 721 standard. And that takes in two arguments. First is this message sender. That is essentially the address of the person who is trying to mint that NFT. So if I'm trying to mint this NFT, it'll grab my address.
00:09:19.326 - 00:09:57.610, Speaker B: If you try to mint it, it'll grab your address. It's a really easy way of just grabbing the ethereum address of whoever is interacting with your contract. Next, we're going to pass in that new item ID up here, which is basically just grabbing the current token ID. Then finally what we're going to do is set our token Uri. Setting the token Uri is going to be taking that link that we supply to the Mint function and making sure that this specific data is attached to this NFT. And it's just going to return a new item ID. Nothing too fancy.
00:09:57.610 - 00:10:46.826, Speaker B: How did I actually deploy this onto the blockchain? Everything is done through this hard hat config JS. So I have everything masked behind some private environment variables. You should definitely make sure you do this stuff to protect your private keys. I am using the private key from my MetaMask wallet as well as using an RPC provider. You can get any providers that give you like a polygon RPC endpoint. This can be from a provider like Alchemy infura, I think, Quicknode and there's a lot of different choices for different RPCs. It doesn't matter where you get it, as long as you have an endpoint for that.
00:10:46.826 - 00:11:39.130, Speaker B: That essentially takes your code and essentially talks to the blockchain network and says, hey, this person wrote some code and we're going to deploy that onto the polygon blockchain. Down here I have this etherscan object. It's called Etherscan, but this is compatible as well with polygon scan. If you've ever interacted with NFTs or done anything on the Ethereum blockchain, you might have gone through and used Etherscan. The polygon version of that is called polygon scan. So I'm using a polygon scan API key which allows me to actually verify that contract. And that is essentially what I ran this used to run this morning in order to go ahead and deploy this onto the blockchain.
00:11:39.130 - 00:12:22.054, Speaker B: So if you go into the README, you'll see the different scripts that you can run as well as a link to the polygon scan address where this is deployed. So let's go over to that and take a look at the contract itself deployed on the blockchain. So this is polygon scan. Again similar to ether scan. The tooling just kind of like goes one to one. Very easy to switch between Ethereum and polygon. You'll see that I've done a few test gen transactions.
00:12:22.054 - 00:13:37.730, Speaker B: I can go into my contract and take a look at the deployed code here. The cool thing that I want to focus on is just being able to call the different functions that are available to us from this contract. Now, even though I only wrote one function and a couple of lines of code, you'll see that I get a whole bunch of different functions that I can actually call. And that's because I went ahead and used the ERC 721 standard and I'm getting a bunch of baked in code that I don't need to worry about writing on my own. But we're going to focus on this Mint functionality, which is let me just do a quick search for right, I was looking at the read contract, but that is in the write contract column and that is Mint. So what does Mint take? It takes a token Uri, which is a string let's talk about that token Uri real quick and the importance of the metadata, which is going to be what really powers our NFT. So what we're going to do now I'm going to go back into Vs code and I'm going to show you a couple of different JSON files that I have written here.
00:13:37.730 - 00:14:19.040, Speaker B: So you'll see here this JSON file. Nothing too big going on. I have just some information, an image, an animation URL, and some attributes. And these are just some basic things that OpenSea needs in order to read your contract. You can take a look at the OpenSea documentation for the standards of how you should essentially fill out this overall JSON object. But as long as you're filling out what OpenSea needs, you can then add whatever else you want on top of that. So this is completely customizable up to a certain point.
00:14:19.040 - 00:15:27.240, Speaker B: So let's take a look at a couple of the NFTs that I've already gone ahead and minted through this. So this is specifically just a picture of myself inside of the metadata. What I did was I added my portfolio and my Twitter handle and these are like the traits that you would normally see on an NFT. So this is like a fun little, almost like a linktree social network typing NFT that you can build if you had wanted to. And if I go into the details, I can click on the token ID and get transported over to this JSON, which is the thing that I actually uploaded to the internet that I initially wrote in here. How did I get that up here? One very quick and easy way to upload any of your data onto the internet is using something like web Three storage. Literally you can go in here, create an account which is free, click upload files, upload your JSON, upload your images, whatever you want.
00:15:27.240 - 00:16:16.850, Speaker B: My images are all kind of like on this little file here. It gives you what's called a CID. And to actually view the file, you would just add an IPFS DWeb link at the end of it. And then I have an image of myself that exists on the Web Three storage platform as well as the initial link over here. So same kind of thing here. I uploaded this to IPFS through that Web Three storage uploading system and this just resolves to that initial JSON object that I had. So this is a very basic, I guess, NFT.
00:16:16.850 - 00:17:10.630, Speaker B: Kind of like what you might be familiar with, know, having an image, having some traits kind of similar to any know NFT profile picture, but y'all are building on a cool platform where you want to get things know, kind of social. You want to maybe have different types of NFTs. If you're building like a social platform that is all about videos, sharing content. What if I want to make a video NFT? Right? You can do the same thing with this very same smart contract. Everything is dictated kind of by this JSON file. So notice here I have this animation URL and if I look at this other NFT that I minted rather than just an image. This is now a video, right? This is actually like a job announcement that I did where I made a rap about how I joined Polygon.
00:17:10.630 - 00:17:56.470, Speaker B: But how does this work now? I changed some of the properties where I have a producer with a certain name. The wrapper is myself. And again, this is done through this JSON object, right? This is the JSON object that was written inside of my code. I have the image still of just that image of me, just that placeholder image. But the really powerful part of this that lets you do pretty much almost anything you would want is this animation URL. That animation URL links to an MP4. So it's the same type of link that comes from the Web three storage.
00:17:56.470 - 00:18:36.510, Speaker B: And rather than only linking to like a PNG or a JPEG, I'm now also linking to an MP4. Right? And the cool thing about this, this supports a lot of different types of files. It doesn't need to just be an MP4. Can be a GIF. It can be or a GIF, depending on how you pronounce it. It can be a music file, an MP3. If you're doing some type of music sharing platform, you can even link this to an HTML file and render some HTML inside your NFT.
00:18:36.510 - 00:19:34.242, Speaker B: Openc has some things already kind of set up where it takes an HTML file and renders it inside of an iframe. But there's a lot of different things that you can create into NFTs. Like if you're building some type of social media platform, maybe you can do image sharing with your regular NFTs. Maybe it's a video sharing platform, share videos through NFTs. Maybe you want to even do something like take blog posts or whatever, turn them into SVGs. And then instead of an image file here, you can do like an encoded SVG link or something like that. And depending on what you want to do with your NFTs, all you really have to do is just change around the metadata in here, right? And like I said, this is just like some standards that OpenSea has.
00:19:34.242 - 00:20:26.470, Speaker B: And again, if I go to OpenSea, which I had up here, these are all things that I minted specifically from this contract. And the cool thing here is, as long as these keys exist inside of this metadata, OpenSea will work just fine. But you can add additional things on top of that. Maybe you want more information for your specific platform. Maybe besides just an image link in a description there's like links to other work there's. Whatever your social media platform might need, any specific information you would want to have in your JSON, you can have it. And then you just read that specific metadata that's attached to the NFT and do what you want with it, right? The possibilities here are kind of endless.
00:20:26.470 - 00:21:25.122, Speaker B: The amount of power you get from your NFT is really dictated by this metadata and by whatever information you decide to put in here. So that's really kind of like what I want to leave you all with. It looks like on the smart contract side, all I did was write one function, but with that one function, I'm able to mint a video NFT. I'm able to mint a regular image NFT. I can switch this out for SVGs, and I can even switch this out for an HTML page and mint an HTML page if I wanted to. There are so many different things that you can do with NFTs beyond just like that NFT profile picture type collection. And I hope you can kind of take this, maybe implement it into different things that you're building throughout this hackathon.
00:21:25.122 - 00:22:38.554, Speaker B: So definitely want to open it up now to questions, and I saw a few of those coming in chat if I go back to the beginning. Okay, so the first question, will we be able to marry the Lens Protocol on polygon smart contracts? So one of the cool things is Lens Protocol is actually built on polygon. So yes, you can do cool things. Like if you're built like some of the things that I mentioned throughout, just like the little demo that I did was like, you can take anything and mint it as an NFT, right? So if you're building some social platform for sharing images or sharing videos or sharing really anything, you can turn those into NFTs. Maybe for like a fundraising type platform or maybe just for sharing content in different ways and giving ownership to people and the content that they share. So that's just like one way of thinking about how you might use that in your specific projects. Someone asked, what font do I use for Vs code? It's a font called Dank Mono.
00:22:38.554 - 00:23:11.338, Speaker B: D-A-N-K Mono. I got that quite a while back, so I'm not sure what the current status of that is. Someone asked if we can use Remix. So you can definitely use Remix. I was just kind of showcasing one of the tools that you can use with just like using the general ethereum ecosystem. So what I focused on was hard hat. But you can use Hard Hat, you can use Remix, you can use Truffle, any of those.
00:23:11.338 - 00:23:42.820, Speaker B: Anything that works on the ethereum side also works on the polygon side. One on one. It just takes a little bit of configuration updates and that's pretty much it. Cool. Let's see, it's going to go through some banter about looks like webstorm. All these are cool stuff you can use. Really, definitely use the IDE that fits for you and what works out for you.
00:23:42.820 - 00:24:06.700, Speaker B: Anyone know the OpenSea document that talks about the template that I mentioned? So let's see if I can grab real quick OpenSea NFT metadata here. I'm going to drop that. It's in the chat as well. Oh, somebody else already put it thank you.
00:24:08.750 - 00:24:09.546, Speaker A: Cool.
00:24:09.728 - 00:24:33.602, Speaker B: Another question. How does lazy Mint work? Can you edit the metadata after you have Minted using your own contract? You can do that. You can edit the metadata. You would need to add a little bit more functionality. What I did on this is really just like a very basic implementation. This is definitely not the contract that I've written. As is probably not production ready.
00:24:33.602 - 00:25:29.302, Speaker B: It's really just to get you kind of like going and give you a base to get started. But yeah, you can add more functionality for doing things like updating the metadata. I think there's a lot of examples of different NFTs where you can change the base Uri, change wherever that Uri is pointing to. What exactly is the purpose of the Etherscan key? So the Etherscan key was really just for me to verify a contract on polygon scan that allowed me to show you the code through polygon scan. So I'm also going to drop that link in here. So this will actually allow you to because I verified the contract, you can actually go in and interact with it. Mint your own NFT, do whatever you want with it.
00:25:29.302 - 00:26:11.890, Speaker B: It's free. I don't make any money off of it. You just have to pay gas, which is like a fraction of a matic, so doesn't cost all too much any. Gotchas to call out building on polygon versus Ethereum. It'll be my first polygon specific build. The only real gotcha is just like make sure you look at your configuration, make sure you're configured to deploy on polygon mainnet or testnet versus like Ethereum mainnet and testnet. So what I showed is in the configuration that I have, essentially I have everything set up for you.
00:26:11.890 - 00:27:00.418, Speaker B: So I'll also drop that GitHub link as well, just so you have those grab that. But otherwise everything is one to one. Any solidity code that you write for like an Ethereum smart contract is compatible on polygon. Everything really is just about configuration and making sure you're sending it to the right place. Verification of contracts is important to show you haven't released different code and so can be audited. Absolutely. You definitely want to make sure if you're building something that you want to have audited to have that verification up.
00:27:00.418 - 00:28:05.720, Speaker B: And if you're building something open source to allow people to go in and make sure you're not going to be rugging them or anything, it's a good way to add legitimacy to your project. How is it possible to mint an NFT to a user while not charging them anything for gas like OS does with lazy Mint? Gotcha. Okay, so that was the question from before. So you can definitely add in functionality within the Mint function to essentially mint the NFT for the person. So you would do something like rather than sending in the message sender, you would send in the owner of the contract's address and just have to make sure you have funds to cover the mint. You would essentially mint the NFT for them and then use one of the ERC, 721 standard functions as soon as you mint to send it to the message sender rather than having them mint it themselves. So it's really just like you minting for them and covering the gas cost and then sending that over.
00:28:05.720 - 00:28:49.880, Speaker B: The good thing with Polygon is it's very cheap to mint. I believe I minted the two NFTs that I showed you all for, like, a fraction of a penny. So a lot of the times, it's almost like something you don't have to worry about too much. But definitely if you want to go that extra mile for your users, you can essentially mint for them and transfer it right after you mint. Yeah, I think that covers all of the questions that I saw. If I missed your question, you can definitely drop that in there. Again, we've got, like, 1 minute left, but, yeah, I'm really excited to see what everyone is.
00:28:57.050 - 00:29:25.486, Speaker A: I guess that's all the questions that everyone has for now. Thank you so much, Rahat. That was a really interesting workshop. Can't wait to see what everyone builds using Polygon. And that being said, Rahat can also be accessed through the Eastglobal Discord in the sponsor Polygon Studios channel. So if you have any questions for him, definitely feel free to reach out there. And we do have another workshop after this, so I hope to see all of you there.
00:29:25.486 - 00:29:30.510, Speaker A: And once again, Rahad, thank you so much for taking the time to do this workshop for the hackers.
00:29:31.570 - 00:29:33.326, Speaker B: Definitely happy to do it.
00:29:33.508 - 00:29:34.780, Speaker A: All right, have a great.
