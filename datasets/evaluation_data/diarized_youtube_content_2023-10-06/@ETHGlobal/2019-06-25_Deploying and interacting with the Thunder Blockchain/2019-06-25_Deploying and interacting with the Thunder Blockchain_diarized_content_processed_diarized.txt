00:00:00.570 - 00:00:07.070, Speaker A: All right, thanks for coming, guys. So we're thundercore. My name is Ashwin. I'm a core engineer at Thunder.
00:00:07.890 - 00:00:11.246, Speaker B: My name is Julian Turbot. I'm an engineer on the platform team.
00:00:11.348 - 00:00:38.054, Speaker A: Yep. And so we're going to talk to you guys a little bit about building on Thunder and how to eventually show you guys how to deploy an application. So we can just get started here. So, a little bit about us first. We're we're basically a EVM compatible blockchain. Our main focus is high scalability and high throughput. We were founded by two professors or two PhD students, a professor and a PhD student.
00:00:38.054 - 00:01:01.454, Speaker A: Sorry, I apologize. Dr. Lane shee and she is a researcher at Cornell. And she basically wrote the first academic white paper on Bitcoin. And then Chris Wong is our other co founder. He's currently the CEO and he is very experienced player in the gaming space, in the social gaming space. Founded a company called Platum, eventually sold it to Disney for half a billion dollars.
00:01:01.454 - 00:01:29.260, Speaker A: Very familiar with gaming, Elaine's, very familiar with blockchain. And they ended up starting the company together. And here we are. So a little bit about the problems with existing blockchains and what Thunder sort of aims to solve here. A lot of the existing public chains simply just don't provide privacy or permission options for sensitive data guarding. Another thing is that as most of you know, Ethereum is very slow. It can only provide about 15 transactions per second.
00:01:29.260 - 00:02:13.750, Speaker A: It's very difficult to provide very robust user experiences at that low throughput. There's also a relatively high transaction cost as there are more transactions on the actual chain itself. So it's very difficult to scale or build scalable applications on top of this protocol proof of work consensus. Also, as most of you guys probably know, requires significant amount of energy. It's much more efficient just to have proof of stake mechanisms to provide both higher scalability guarantees and waste less energy. We also aim to provide a similar tool set to Ethereum and be compatible with all of the existing tools on Ethereum to allow you guys to build applications at a much faster rate without having to learn new technologies. So our approach to the solution is to provide high throughput.
00:02:13.750 - 00:02:47.566, Speaker A: We integrate directly with ethereum. We're EVM compatible. We aim to provide a very highly scalar and modularized architecture for you guys to build on and use proof of stake. And I can dive more into the consensus algorithm if you guys would like, but one of our co founders will be giving a speech tomorrow to provide more in depth details about that if you guys are interested. So, just a brief overview of our blockchain. Fundamentally, it was built to optimize our transactional throughput at scale implementations. Today already been completed.
00:02:47.566 - 00:03:25.074, Speaker A: Our main net has been launched for both of our public blockchains. And if you guys wanted to build a private permission blockchain, that's also possible. So we provide implementations of both. It's designed completely from the ground up by a team of about 30 engineers. And it's about currently we see transaction speeds on our main net about 100 times of what Ethereum is, so we can achieve about 1000 transactions per second. And we'll show that off to you guys a little bit later in this presentation. So the existing tool set that you guys are used to Truffle, MetaMask, Remix, any of these tools, myether wallet are completely compatible with us.
00:03:25.074 - 00:04:11.086, Speaker A: You can integrate with any of them directly. It's as simple as just changing an RPC endpoint. And we thought that maintaining compatibility at that bandwidth was really essential for providing developers with an easy and flexible platform to build on top of. So as we'll show you guys, it's very simple to build on us, and we would like to keep it that way. So the key benefits here are that we're secure, we're very fast, we're very low cost, meaning that any computationally intensive tasks that you would perform on an Ethereum based network would normally cost you quite a large amount of gas. On our network, our gas fees are very cheap because they're such high throughput. So essentially any of those applications that you build on Ethereum that would cost users a tremendous amount of money are now very cheap and very efficient to build on top of us.
00:04:11.086 - 00:04:44.650, Speaker A: So we would highly encourage you guys to do so. Full EVM compatible, so you guys don't have to learn a new language. Solidity works just fine. And we use a variable committee size. We have a committee election algorithm that we use that I can also go into more detail if you guys would actually like. But currently it's a simple top K voting algorithm. Okay? So as far as what we enable, any sort of microtransactions payments, gaming forms, any sort of market that you would like to build, you can build on our blockchain with very little difficulty.
00:04:44.650 - 00:05:12.638, Speaker A: Porting things, like I said, is very easy and we're highly scalable and we have many improvements in the future. Elaine is one of the top researchers in the space. If you guys have been keeping track of her latest research, she's been coming out with many different improvements, and the team is planning to continue to make improvements to the chain moving forward. So we will continue to support you guys. Cool, thanks. So we're going to show off a small demonstration so you guys would actually know how to interact with the chain.
00:05:12.814 - 00:05:46.606, Speaker B: Yeah. Awesome. So what we're going to be deploying today is the CryptoKitty smart contract. As we mentioned before, what we aim to solve is adding a lot more throughput to your friendly EVM compatible blockchain. So CryptoKitty stood out when it first happened to us as a gaming focused company. Now, because of how many users it brought, it brought a lot of mass adoption, or brought a lot of adoption to blockchain. Bringing people who weren't necessarily as technical into the blockchain space.
00:05:46.606 - 00:06:14.150, Speaker B: And so we hope to leverage that our experience, as well as the general public's interest in gaming, in order to bring a lot of people onto our chain. So this contract right here, it's essentially an ERC 721 contract. You may have heard that before. It's a non fungible token. Every time a kitten, aka. A token, is minted, it's signed to one user. There's only one of that token.
00:06:14.150 - 00:06:56.450, Speaker B: So what I'm going to be doing today is deploying this contract, and I'm going to be deploying it using a service that we edited called Cheshire. Cheshire was developed by Endless Nameless labs. It's a group of people who are developing a lot and building a lot of CryptoKitties solutions. And so what they want to do was build a development environment where you can essentially run your own local chain and simulate CryptoKitties on the main net. So what I did was I tweaked that to point to our testnet, which our Block Explorer right here is pointing to as well. Yeah, that's actually the only difference. We just changed it to point to us.
00:06:56.450 - 00:07:29.390, Speaker B: And what I'm going to do here is I actually updated the script as well to deploy a bunch of cool kitties as opposed to just the first few. So what I'm going to do right now is just you're going to see it's compiling contracts, then it's going to be deploying the CryptoKitties. And now this is the point where might take in my experience, I had it where it was taking ten minutes to deploy one contract. And right now, hopefully, the WiFi isn't too jammed with everyone. I just deployed about four contracts. So these are the private keys. This account.
00:07:29.390 - 00:08:11.446, Speaker B: You're more than welcome to steal these if you can read it. And so now that the contracts have been deployed, what happens is this API puts out all the kitties that are on here and all the users that we have for this development environment. You can also see right here on our Thunderscan contract is right there. It was just deployed a few seconds ago. So we now have the contract on our test map. And then, of course, only the one Genesis Kitty. So I'm going to do because you want more kitties, right? I'm going to run the script I have that just gets these numbers as well as the first or the second hundred of the kitties that exist.
00:08:11.446 - 00:08:38.840, Speaker B: You can see that they're all being passed to this address, which is my main address right now. As I go back to this API, you'll see we got another seven kitties. I think if I refresh, it should be more 89. So now we have a bunch of kitties on here. But I think something that's interesting is that now we have this remix. It's a development environment from Ethereum. And what we can do is take this address and connect to this interface right here.
00:08:38.840 - 00:09:26.022, Speaker B: Make sure I'm pointing to the kitty core contract. And so we'll see here, the first kitty is owned by Zero XCB. The second one is owned by Xerox one FCB, both ones that I own. And so find let's get the owners of these owner the first 10 XCB and over the second one, one Xfcb. So you can see I'm the owner of both of these. What I'm going to do here is I'm just going to transfer one of these. Let's see, so I'm going to do is grab the other address, erxcb, take it to this transfer function.
00:09:26.022 - 00:09:55.674, Speaker B: I may have to reset my MetaMask account, but it should be fine. And token ID two, which is what I'm transferring. Great. Confirm. You can see right there went through and if I go to where is that owner of second one? It's now crxcb. The new one. You'll notice it didn't update in this API.
00:09:55.674 - 00:10:36.376, Speaker B: That's because this is stored in a database, but it is stored right there on this blockchain. You can actually view that transaction as well. So let's see it's the hash. It's going to be annoying refresh the wrong one. I just lost the hash. All right, so let's pretend that I looked that up in our block Explorer and it was there. But yeah, this is how to connect to an ERC 721 contract on our network.
00:10:36.376 - 00:11:27.680, Speaker B: You saw, I just transferred, I deployed contracts in a matter of seconds and I used Remix here to transfer one from one account to another account. Just a very simple demo of being able to deploy. And if you'll notice, if you have any experience developing on Ethereum, you'll notice that I pretty much did nothing different other than changing this RPC right here to use testnetrpcthundercore.com. And so if you're interested in developing on Thunder, if any of you want to get some testnet tokens, you're always welcome to do use our front faucet right here. And this will get you some tokens on our main net. And I believe right, yes, our main net is live. I've just been doing testnet, so I can just deploy.
00:11:27.680 - 00:11:55.480, Speaker B: You don't want to know how many times I've killed and redeployed these kitties, but yeah. Does anyone have any questions or anything? No. Right now, this is just stored on our own blockchain. You could potentially take that data and then go back and if you say resolved a bunch of executed a bunch of transactions quickly on Thunder and then maybe save that data back on Ethereum, totally possible. But that would have to be something done by you.
00:11:55.630 - 00:11:58.196, Speaker C: Yeah, it has to be done by the creator.
00:11:58.388 - 00:11:58.984, Speaker B: Yeah.
00:11:59.102 - 00:12:01.624, Speaker D: So interoperability is possible, but it's less.
00:12:01.662 - 00:12:03.048, Speaker A: Possible, meaning that you would have to.
00:12:03.054 - 00:12:07.516, Speaker D: Do it currently, right now we do have bridges, a current bridge that has been built already.
00:12:07.618 - 00:12:11.352, Speaker A: And we are in the process of building more bridges to make that easier.
00:12:11.496 - 00:12:21.600, Speaker C: I was thinking like from crypto perspective. What matters is what people own. Sure, you can buy cryptocurrency, but you ownership.
00:12:25.380 - 00:12:55.372, Speaker B: Yeah, totally. And if you wanted to say, let's say you wanted to maintain the exact history of everything that had happened on Ethereum, you don't want to ditch that. You want to bring that over to Thunder. What you could do is essentially, since you're going to be interacting, you most likely interact with them through the same library. Or you can you could essentially pull that, essentially run two connections to both blockchains and then just essentially read all the data from each from the first contract, then reinsert that back into the blockchain at the time of the creation. That's one solution in case you want to get the full history.
00:12:55.506 - 00:12:56.190, Speaker C: Yes.
00:12:57.920 - 00:12:58.990, Speaker D: Other questions?
00:13:04.070 - 00:13:12.470, Speaker B: No other questions be questions unrelated to this as well. If anyone has any curiosity about deploying a Thunder.
00:13:14.570 - 00:13:17.080, Speaker D: I've kind of missed everything you guys said.
00:13:20.250 - 00:13:23.030, Speaker C: What are the main differences between Ethereum?
00:13:26.890 - 00:13:28.962, Speaker A: Oh, you're talking about in terms of deployment?
00:13:29.026 - 00:13:29.458, Speaker C: Yeah.
00:13:29.564 - 00:13:47.882, Speaker A: So in terms of deployment, you'll see no difference other than the RPC endpoint changing. In terms of consensus protocols, it's completely different. But yeah, we're our own chain and we run our own consensus algorithm. But in terms of what you'll actually do from a developer standpoint, it's pretty much just an RPC point that you'll change.
00:13:48.036 - 00:14:14.186, Speaker C: In terms of performance, we do about 1200 transactions per second, and our block 1 second test, that under a second frequently. And this is on a main map right now? Yeah.
00:14:14.208 - 00:14:45.300, Speaker D: So I don't remember the exact number. It's pretty high, though. It's about ten to 50 x Ethereum. So if you have gas heavy computation, your smart contract yeah, last time I heard was 50 million a lot more things, and it's a lot cheaper as well. The gas prices are built in target or computation heavy smart contracts that aren't possible.
00:14:46.710 - 00:14:48.338, Speaker C: You guys have your own token, right?
00:14:48.424 - 00:14:49.010, Speaker B: Yes.
00:14:49.160 - 00:14:53.586, Speaker C: It's called Thunder token. Sorry about your token.
00:14:53.778 - 00:15:08.230, Speaker D: So we have our own coin. It's native to the blockchain itself. We don't actually have ERC, 20 tokens. Yeah. So we have our own coin. It's essentially used the same way as Ethereum on the Ethereum network. It's the base token that you would use later operate on the network.
00:15:08.230 - 00:15:11.626, Speaker D: You can also, for example, deploy your C 20 token contracts if you want.
00:15:11.648 - 00:15:22.234, Speaker C: Onto other if one wants to transfer ease to other bridge.
00:15:22.362 - 00:15:27.886, Speaker D: Yes. There's a bridge that already exists that some guy here actually made. Yeah.
00:15:28.068 - 00:15:29.150, Speaker A: For Thunder.
00:15:29.810 - 00:15:47.800, Speaker D: Yeah. I haven't actually worked with it, so I can't explain it in detail, but I know it exists right now, so you guys can use it or someone else. Someone else did it. Yeah. So that already exists. So I think I'm not sure exactly how it works, like I said, but it is possible to do that out for you guys.
00:15:48.250 - 00:15:55.050, Speaker C: If you're hacking on us, that'd be real cool to see. I also built a bridge.
00:15:58.630 - 00:16:01.586, Speaker D: Definitely go for it.
00:16:01.768 - 00:16:16.934, Speaker C: Bridge. Okay. You might have mentioned already, but are you guys already on Mainet or yeah.
00:16:16.972 - 00:16:20.294, Speaker B: This is actually our main net Block Explorer right now. I just switched over to that.
00:16:20.492 - 00:16:26.962, Speaker C: What are the example DApps that are fairly built by Thunder? I have one on my phone right now.
00:16:27.116 - 00:16:29.114, Speaker B: I'm a software engineer on the platform, as I mentioned.
00:16:29.152 - 00:16:42.640, Speaker C: So what I'm supposed to be doing is building apps on top. And I can't obviously cast this here, but I'll just show to you. This is something we started releasing in China and India, and we're waiting to.
00:16:43.010 - 00:16:46.320, Speaker B: Go a little bit more in depth or start promoting more in the US.
00:16:47.490 - 00:17:09.186, Speaker C: I'll just kind of show it here. You can see just a dashboard. Some of the games, for example, Go here is not really trying to promote blockchain to get people on Thunder or to make a blockchain app. We just want to get something that's going to tighten. It's going to get people excited. What's happening here is just playing plus here. But in general, you can get free tokens.
00:17:09.186 - 00:17:27.870, Speaker C: You sign up there, send the receipt, QR code. And so all these games are actually developed by their prior developers. Our goal is really to promote the developers. We just want to have a hub and want to promote developers.
00:17:29.090 - 00:17:52.180, Speaker D: Yeah. So another thing that we have just started or we're starting sort of this weekend, is a developer incentive program. So you guys ended up building any applications. We're going to offer you guys funding to help with customer acquisition costs or any marketing costs that you guys may have or development costs. So we would actually pour you guys into our hub. You would be fully integrated with our wallet services, and you would have support on any of the.
00:17:55.320 - 00:17:59.636, Speaker C: Identity solution or something like that.
00:17:59.738 - 00:18:09.630, Speaker D: Yeah, I think it's a great idea. I don't think we're currently working on that yet, at least for me I'm not, but something in the future maybe would be very interesting.
00:18:11.360 - 00:18:14.030, Speaker C: Third party project.
00:18:14.880 - 00:18:15.630, Speaker D: Absolutely.
00:18:21.040 - 00:18:39.000, Speaker C: Cool. Guys, do you have the last question? Cool. We have some shirts here for those who haven't stopped by our table to pick up shirts. There's some here in different sizes, and we need some more. And then there's a sign up triplet as well. I know we talked to you with them.
00:18:42.970 - 00:19:04.046, Speaker D: Yeah. We also have several prizes available for if you build on us, for example, the best combination app that uses multiple different platforms, or any of them if you decide to port Ox, for example, on our platform, we have a $2,000 price for them. We have a $2,000 gaming price game with the decentralized gaming application built on our platform, as well as a few.
00:19:04.068 - 00:19:10.240, Speaker C: More actually working with other technologies here.
00:19:11.730 - 00:19:15.700, Speaker D: So, yeah, come talk to us if you're interested. We would be more than happy to go.
00:19:20.250 - 00:19:21.960, Speaker C: Cool. Thanks, guys. Thank you.
00:19:32.490 - 00:20:07.380, Speaker D: So for the most part it's pretty easy. I would say stick with Solidity. As far as the compilation version, you're going to have to pass a compilation flag if you want to use anything above 5.0 as far as Solidity compiler so if you can stay with any EVM compatible solidity compiler like 0.4.525 I think is the latest that we really support but you can use the latest ones as well. But some of the outcodes are a little so funky in my opinion. I think the latest one is five six but we would prefer that you guys use four two five or lower.
00:20:07.380 - 00:20:15.870, Speaker D: Nice.
00:20:18.100 - 00:20:19.296, Speaker C: There's a question here.
00:20:19.398 - 00:20:20.050, Speaker D: Yeah.
00:20:20.820 - 00:20:39.860, Speaker C: So are you planning to be commissionless eventually and open doors or not? Because if I ran that it's a blockchain but I don't yeah.
00:20:40.010 - 00:21:13.280, Speaker D: So we're going to be fully open source in the next quarter I think is what we aim for. So we're already fully permissionless as far as proof of state mechanisms go. So we are a proof of state blockchain which means that you have to have the requisite state in order to participate in the network. So what that means is inherently some people think that it's closed source, I think it's still pretty open source. So we aim to have a lot of Validators potentially be part of the chain. As far as actual open source code, we won't be fully open source in the next quarter so you can expect to see all the code. That's what it all runs in the next quarter.
00:21:15.540 - 00:21:16.780, Speaker C: Can I run a node?
00:21:16.860 - 00:21:17.584, Speaker D: Yes.
00:21:17.782 - 00:21:21.476, Speaker C: Will I be able you can run.
00:21:21.498 - 00:21:24.710, Speaker D: A full node, it's a little bit more difficult right now.
00:21:25.560 - 00:21:44.444, Speaker C: We had a press release that went out during consensus on Tuesday, which was May 14, where we announced the fact we had the public release of our main net launch. And part of that we also talked about the fact that we will enable full node open source and we're not talking about months, all you're talking about.
00:21:44.482 - 00:21:48.190, Speaker D: Within a few weeks and committee members.
00:21:49.040 - 00:21:59.004, Speaker C: Eventually how many different speakers are there?
00:21:59.122 - 00:22:21.940, Speaker D: So there's 32. 32 currently that's going to be open, meaning it'll be a more variable number in the future. So right now it's 32 just because it was easy for us to deploy that as an initial release and as we make committing open source we allow external people to overrun validators, we're going to open up that number. How many thousand plus potentially.
00:22:22.920 - 00:22:40.330, Speaker C: Are there any particular use cases that you guys are looking to expand towards gaming but for example, one actual computing and things like block computing to be able to validate some of the actual.
00:22:42.940 - 00:23:01.440, Speaker D: Yeah, I mean any of those are very interesting. Anything that like for example, homo orphic operations are very expensive or any large bitwise operations are very expensive on Ethereum, you can easily run those on us, which is one of the main use cases. Right when you try to think about things which differentiate us from ethereum. I think that plus hydrogen could put in low gas feature.
00:23:04.180 - 00:23:36.144, Speaker C: Essentially like what a room is looking like in a deni. They're creating their own side chain or off chain. And I think that really kind of encompasses what we're looking for, which is really anything that kind of wasn't necessarily previously possible. Enabling that wasn't maybe we pulled the chipotle report. That's where we're really excited to see what happens. Cool.
00:23:36.182 - 00:23:37.070, Speaker D: Thanks, guys. Cool.
