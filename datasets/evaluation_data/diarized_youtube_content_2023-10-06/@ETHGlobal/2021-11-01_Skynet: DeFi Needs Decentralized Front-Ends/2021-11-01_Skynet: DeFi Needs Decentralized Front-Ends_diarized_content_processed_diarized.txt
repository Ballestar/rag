00:00:00.170 - 00:00:30.950, Speaker A: YouTube, so there's some people watching us on YouTube. My name is Andrew. I'm with ETH Global and we're in the middle of our Unicode hackathon. And the workshop we're about to start is Daniel Helm, Skynet. He's going to talk about DeFi needs decentralized front ends. There'll be an opportunity to ask questions around the middle point and maybe a little bit later once the demo starts. And you can also put your questions in the zoom chat and we can try to get to them at various points, and if not, we'll hold till the end.
00:00:30.950 - 00:00:33.800, Speaker A: But with that, I'll let Daniel take it away.
00:00:34.890 - 00:01:20.498, Speaker B: All right, thank you so much, Andrew. And also thanks to ETH Global and the whole Unicode hackathon. We're really excited at Skynet to be a part of it because we think that DeFi needs decentralized front ends, which is the name of my little workshop. Today we're going to be talking about getting started with Skynet and home screen, kind of talking about what Skynet is, what home screen is, what problems they solve for decentralized front ends. But first I am Daniel Helm. I'm the developer Evangelist at Skynet Labs. And let's just hop right into, you know, we're aware that there's this big, complex, evolving DeFi ecosystem and this is a DeFi hackathon.
00:01:20.498 - 00:02:45.746, Speaker B: And there's a lot of exciting stuff happening, right? We have decentralized finance that's just revolutionizing how we interact with digital assets. And we're giving users full control and ownership over all these things and all these protocols. And all you have to do is pull up the protocol's web page and boom, you're trading their tokens, you're providing liquidity, doing all the rest of it. But there's still this big question and problem, right? What if the project gets hacked and the front end gets compromised? What if the project goes broke, introduces a Paywall or Ads? What if the project is required by its local government to remove your favorite token or your favorite feature? These are all issues of centralized front ends and why we believe that DeFi needs decentralized front ends. We think that Skynet is the best positioned, decentralized storage provider to provide a proper decentralized front end experience for users and that we can really fill this gap so that users can have easy access to these websites without having to worry about any additional software, any cryptocurrency, any specialized wallets, anything like that. So underpinning skynet is the saya blockchain network. We're not going to get into it in this talk because I want to focus on some other things.
00:02:45.746 - 00:03:24.010, Speaker B: But check out Saya Tech if you're interested. The main gist of it is that you have a decentralized marketplace for storage between renters and hosts. And Skynet leverages this network so that users are able to interact with portals to upload files that get stored on the SIA network. And then they get back a link that they can share with their friends from any other portal on the skynet network. When they download that file, it will be pulling it from the SIA network. So this decentralized storage has lots of use cases. We see people building fully decentralized web apps.
00:03:24.010 - 00:04:18.814, Speaker B: We see it used for persistent storage, for decentralized and peer to peer applications. So two clients have an exchange going on, but if both clients go offline, maybe you need something to be persisted elsewhere. We see it used for off chain storage, for blockchains think NFTs censorship resistant website hosting, and even people that set up servers to do kind of scraping. And they can use Skynet for backing up data or publishing data to users in a decentralized way. At the end of the day, our goal is that any developer can build a D web app that anyone can use. That's really important, this accessibility, both for the end user but also for developers, that the burden for getting on to the platform is just super simple. All right, so what does it look like to use? Well, let's just use it.
00:04:18.814 - 00:04:52.038, Speaker B: You can look at my screenshot here, but let's go to Sciasky. Net. Let me refresh it because I've been uploading some files this morning and I can click here to upload a file demo time. I shouldn't have probably refreshed it. There we go. All right, so I can then select an image of myself here from my computer. It uploads to Skynet.
00:04:52.038 - 00:05:26.070, Speaker B: I get back a link, and there is my photo sitting on Skynet. I am currently accessing it@sciasky.net, which is the portal that Skynet Labs runs. But I could also replace this with SkyPortal XYZ, which is a community run portal. And my image loads from that portal just as quickly. Okay, if you are familiar with decentralized storage, I hope you are impressed by the speed of both the upload and download there. Okay, so that is accessing files and Skylinks.
00:05:26.070 - 00:06:02.240, Speaker B: Let's get back into the presentation here. All right, so we got back this thing that we call a Skylink. It's kind of like a fingerprint or a hash. It's technically a merkel root that signifies that this is the file that we want and that if that file changes, this Skylink will change. So this is immutable. You can think of it like a constant or something else like that, where it is not going to change. And we have a cryptographic guarantee that the file that we get from the server is the same file that was uploaded by the original creator of the content.
00:06:02.240 - 00:06:50.186, Speaker B: And again, we can use any portal to access this same data. So this is kind of how the decentralized structure of Skynet works in its most basic form. And so the big thing we can do now is we can upload folders of content with the index HTML file. So now we have a website that has been deployed to Skynet. Actually, before I even do this, let me just show what that looks like. So I can go to. Do you want to upload a web app or directory? Kind of preempting my own demo here, but let me go ahead and just open up a build of uniswap and I will just upload the build directory that we can see has an index HTML file.
00:06:50.186 - 00:07:34.030, Speaker B: It's probably too small for you to see, but that file right there is our index HTML file. And so what happens is that this folder can then upload and when I access the Skylink, I'll actually be accessing the index HTML file and all those other files and assets will load off of Skynet. So let me go ahead and upload that and I can click on it. And here I have a Skylink that I can access uniswap on. Okay, so this is what we're getting towards. We're trying to decentralize the front end here, but we have this crazy URL. So what are we going to do about that? Let's take a look at the slideshow.
00:07:34.030 - 00:08:17.446, Speaker B: Okay, so we have this constant immutable URL, but that's not how websites work, right? We want to adjust our CSS, we want to update how we interact with the protocol. We don't have immutable web pages, so how are users supposed to keep up to date? Well, let's look at a little lesson here. We've got our friendly user here who has a link to a wonderful build of a website that comes out every single day. It's daily builds. It's got these immutable Skylinks. Tuesday's build of the app is right here. And we see it has Skylink, JACW, et cetera.
00:08:17.446 - 00:09:09.734, Speaker B: And the user has that Skylink and they're happy. But now Wednesday's build comes out. The developers have created their dark mode update, and our user has no idea how to access Wednesday's build, right? They're going to have to go scour the Internet, keep track on a discord server or something else. They don't have this link and that's not a user friendly way to get users to a web page. So luckily our developers are smart and they are using the Skynet feature called Resolver Skylinks. And they're also using a GitHub action so that every time they have a new build, it points to the latest build. And so what Resolver Skylinks do is they let a user have a single Skylink, and then the developer is the only one with the permission to update this Skylink to a new immutable Skylink.
00:09:09.734 - 00:09:48.358, Speaker B: So this is our mutable, or kind of changeable updatable version of Skylinks. And so on Tuesday, our user uses the Resolver Skylink for Tuesday's build. On Wednesday, our developers push an update to main. The GitHub action builds Wednesday's, builds uploads it to Skynet and then updates the Resolver Skylink. And our users instantly have access to Wednesday's build. And in actuality, this is still not very user friendly. So what we'd probably do is instead of having users access the Resolver Skylink, we would have users access something like dailybuilds.com
00:09:48.358 - 00:11:02.910, Speaker B: or dailybuilds east that actually points to that Resolver Skylink. So our users just have to remember one human readable name and can always access the latest build of our website on decentralized storage. Okay, so that's great. I have this question now that is going to preempt why I'm talking about Home screen and it is, is decentralized hosting good enough? So let's take a look and see in this diagram. So we're going to assume that Thursday's build comes along and it's bad, it's got tons of malware, the developers have gone rogue, and worst of all, dark mode is gone. Our user is not going to be happy because it somehow made it through the GitHub pipeline. The Resolver Skylink still updates to this build and the user only has access to this, right? The user no longer has any sort of reference or knowledge of the previous Skylinks and they're never able to go back to those versions, even though those versions were immutable and even though those things are still living on the decentralized storage platform, still living on Skynet.
00:11:02.910 - 00:12:10.262, Speaker B: So it seems like we need to not only decentralize our front ends, but we also need to make sure that we have upgrades, be something that's kind of like voluntary. We need version history to just be part of the flow for users or else they're still going to be subjected to things like censorship or bad decisions by developers. So maybe we can reset our old adage from DeFi needs decentralized front ends to DeFi needs decentralized front ends on Home screen. So Home Screen is our product that we've made. It's a web app where you are able to log in with a fully decentralized identity and add applications to your home screen that exist in a way where all the assets, all the code are saved to your personalized decentralized cloud. And so that way whenever you download that version, you can always update using that Resolver Skylink I showed. But you always have your own version history of all the files and all the web builds that you've ever used.
00:12:10.262 - 00:12:54.580, Speaker B: And at any point you are free to download and kind of almost soft fork from the front end that the developers have pushed out. Or maybe not the developers have pushed out. Maybe a malicious attacker has pushed out. Okay, so I'm going to show how to build an app for Skynet, get it deployed using Skynet and on Home Screen using the GitHub actions. But let's talk real quickly about the Skynet prize for this hackathon. That's why everyone is here. We have a $4,000, sayacoin, prize pool that we're going to distribute amongst the hackers that deploy their front end on Skynet with home screen support.
00:12:54.580 - 00:14:00.600, Speaker B: So if you do that, you'll get four shares of the prize pool and then we kind of have maybe like stretch goals beyond that. So if you deploy to Skynet with a GitHub action and you set up the GitHub action, you'll get two more shares. If you add a working save to home screen link in your repo, you'll get another share and I'll show what that looks like. And then lastly, if you set up a decentralized domain name using ENS or HNS to point at your app, you'll get one more share. And I think ENS is also putting on a prize where if you use an ENS domain for your application, you are eligible to maybe be one of their top prizes, which has some reward with it as well. Okay, so I am going to check real fast on the questions here before we jump into what I call a little speed run. How does the decentralized Auth work? Is it open for developers to use it? Yes, it is.
00:14:00.600 - 00:14:27.970, Speaker B: The decentralized auth is using something called MySky. We're not going to get too much into it, but I'll show how you kind of like log in and use it. Actually, let's just see what it looks like to use. So I will open an incognito window and go to home screen HNS scisky. Net. This is what we're going to be kind of like building our application to use. And we're going to click authenticate with MySky.
00:14:27.970 - 00:15:16.422, Speaker B: And what this is is this is actually just like an in browser authentication where you're going to have a seed phrase. In theory, I would want to remember that and not share it with anyone. And the mutable layer of Skynet lets you create resolver Skylinks and other types of mutable data where you sign it with that private key. And so that off is just living inside of your browser window and you are connecting actually through an iframe, so the home screen doesn't have access to that private key. It's a whole setup. If you want to learn more, check out docs. Sciasky.
00:15:16.422 - 00:15:52.560, Speaker B: Net and check out MySky and data access controllers. But yeah, it is fully decentralized and open for developers to use. Happy to answer any additional questions on it, maybe at the end. Okay, so let's kind of look at this idea of a speed run. I'm going to kind of really quickly show what it looks like to deploy to Skynet. And for doing this, we're going to need a front end to deploy. And believe it or not, we're going to use uniswap's front end.
00:15:52.560 - 00:16:44.456, Speaker B: Who would have guessed at the Unicode thing here? Oh, I've already forked this because I've been using DX swaps app. Fun. I'm actually going to I should have prepped this. Okay, so, all right, I'm just going to delete a live repo that I probably shouldn't delete. But that's okay. That's what's fun about live demos, right? Okay, let's do delete this repo. I can show folks my password here.
00:16:44.456 - 00:17:47.634, Speaker B: Sorry about that. And one last little bit here. Nothing like doing two factor authentication in the middle of a live demo for your patience. You all right. So let's try that again. We're going to go to the Uniswap interface. They fully open source their front end.
00:17:47.634 - 00:18:54.150, Speaker B: And I'm going to fork this into my personal account here's. And then I am going to clone this so I can say get clone and then clone that locally. While it's doing that, I know that I'm also going to want to enable GitHub actions. I'm going to come up to the actions and say, I understand. All right. And so if you are familiar with using React at all, the first thing you're going to probably do whenever you are using React app is you're going to want to install your dependencies using something like Yarn. And I'm going to type in Yarn to install my dependencies.
00:18:54.150 - 00:19:48.150, Speaker B: Just kidding. I need to be in the Uniswap interface folder first and then I can can you share your screen? Sorry, what was that? Can you share your screen? I think that you are on the terminal. Right? But we see the browser. Do you see my browser and the terminal or just the browser now? Both now it's good. Okay, great. Thanks for checking in. Okay, I need to be this is a rough okay, so sorry.
00:19:48.150 - 00:20:24.402, Speaker B: I need to get clone. What is going on? Okay, I see here. So I need to go to interface. Thank you. All right, so Yarn to install my dependencies, and then after that I would run Yarn Build to build my application. Right. So, because that takes a long time, normally, even when you don't make a lot of mess ups, I'm going to cheat here.
00:20:24.402 - 00:21:08.510, Speaker B: And I already have created my Build folder here that I will show uploading again. And that is actually what we did here. I went to upload a web app or directory and I drag and dropped my build directory. So if we look in Build, I have an index HTML file and a website that is a react website ready to deploy to Skynet. So static deployments on Skynet are fully supported. So that includes Gatsby, anything with like react router. If you're interested in this, I want to again point out Docs sciasky.
00:21:08.510 - 00:21:58.954, Speaker B: Net and when we go to the kind of home screen documentation, we step through every piece that's required for deploying the Skynet. But one of the things that you can take a look at is something called it's inside of our deploy to Skynet action. There it is. Sorry. And it allows us to set customized details for how our web app is going to respond to different requests. This is kind of advanced usage. If you are interested in using Gatsby or advanced routing for react router or vue, this is the place to start.
00:21:58.954 - 00:22:50.106, Speaker B: But also just hit me up in the discord. I'm happy to drop you some links and documentation, but for our speedrun, that is feeling not so speedy. We have installed things, we've built them, and I showed earlier what it looks like to drag and drop that to deploy it. But that's not the best way to deploy things to Skynet, right? Every time you want to update your web app, you're not going to want to drag and drop using your web browser. So let's automate these things using GitHub. So the first thing that we want to do is come back to that documentation and we can create a using this Deploy to Skynet GitHub action. We can come down to the bottom and we will see a fully set up template for how to deploy an app to Skynet.
00:22:50.106 - 00:23:37.930, Speaker B: So it says where to create this file. And I'm going to go ahead and do that. If I go here and say code in our GitHub folder under Workflows, I can create a new file. We can call this anything, but I'm going to call it Deploy to Skynet YAML. And then I will copy paste what we pulled from the documentation and super quickly. If you have not seen GitHub actions before, we are saying this is called Deploy to Skynet. And on every push that we make to the main branch, we're going to run a job that's going to run on Ubuntu.
00:23:37.930 - 00:24:02.718, Speaker B: It's going to check out our code. These are the steps. It's going to check out our code, it's going to set up node. It's going to run yarn just like we did up here. It's going to run Yarn build like we did to create the application. And then it's going to run this action called Deploy to Skynet which is hosted here. And what it is going to do is it's going to look for the upload directory called Build which we showed uploading earlier.
00:24:02.718 - 00:24:33.550, Speaker B: And lastly, it's going to create a resolver Skylink by using our Skynet Registry Seed. And so like I mentioned earlier, we have mutable storage that kind of uses a private key. And so this is a thing that we're going to have to set up in our repo as a secret. So let's go ahead and do that. I'm going to go ahead and save this real fast and I will open up our repo here. Probably need to make it a little bit bigger. Go to Settings and then I can go to Secrets.
00:24:33.550 - 00:25:04.102, Speaker B: New repo secret. I will call it Skynet registry seed. And I am not going to share this with everyone, but I could put something in there's. And now I have added that secret to my repo right here. Great. So that's going to get pulled when this action runs. Okay, so let's see what that looks like.
00:25:04.102 - 00:26:18.320, Speaker B: So now if I click Get status, I have this new file so I can say get add, sorry, get add all get commit GitHub action and then I can say Get push to origin main. And when I do that now we will see that in our GitHub repo under our actions. It triggered a bunch of actions. But the one that we are interested in is Deploy to Skynet, which is happening right here. And so it will go through every single one of those steps. Finally deploying to Skynet, where it will do a few things, one of which is print out the Resolver Skylink that is going to get updated every single time we push out a new build. Okay, I'm going extra slow on my speed run here, so I'm going to keep it moving.
00:26:18.320 - 00:27:02.046, Speaker B: Key points here. Yeah, that Resolver Skylink is going to be where we update the Skylink and our repo is going to take care of that. And that way users or an ENS name will only ever need the one URL, the one Skylink, and we can point our ENS HNS names or traditional domain names to that Skylink. And all of that info is also available in Docs scisky. Net developer documentation. All right, the last thing for kind of getting our prize pool is adding a Home screen button. And so we like to have these in our repos so that way a user can click Add to Home Screen and have access to this thing.
00:27:02.046 - 00:27:35.618, Speaker B: And that connects also to our Resolver Skylink so that our users always know what is like the private key. That there was a private key owned by the creators of the repo that kept signing this thing to push out updates. Okay, so let's take a look at what that is. I think we can come back to our documentation here. And the step is right here. Add the Home screen button on your projects README. And we're also going to configure the manifest file.
00:27:35.618 - 00:28:19.640, Speaker B: So I'll show what that looks like as well. So we can go to README Markdown. And I'll just put it here at the top because we are obviously the most important. I'll paste that there and you'll see there's a point right here where we're going to need to drop in that Skylink. Okay? And so do we have that Skylink yet? No, we don't. Okay, I will go ahead and cheat and act like we have a Resolver Skylink because we have a kind of public build of this that should have a similar Skylink. So I'm just going to go ahead and access that for now.
00:28:19.640 - 00:28:52.146, Speaker B: And this is what it'll look like. You'll have an Add to Skylink button, but let me go ahead and grab the Skylink from that. And so after the build, it will show you what your Resolver Skylink is. This is what this one happens to be. I can click save for that. And there's one other file that you'll have to update called the manifest. And so what the manifest does is it lets Home screen know basic information about your app.
00:28:52.146 - 00:29:54.920, Speaker B: And so this could be things like the name, the description, the icon. But the other thing we want to add for Home Screen is the Skylink. So what this will do is say, I'm installing this version that's released right now, but this is the Resolver Skylink where I'm always going to know that I can find updates to this application. Okay? So I have saved that and now I can also just kind of say manifest and get pushed to origin main. And so that will actually kick off a whole nother round of actions. But let's go ahead and take a look at where those are. Still building.
00:29:54.920 - 00:30:34.046, Speaker B: Still building. Okay, but our README has been updated with our add to home screen button. And so this is a little bit cheating. We're using a different Resolver Skylink than the one that will actually exist for this repo. But if I click on it, we'll see Skylink open or sorry, home screen will open and it'll ask us if we want to save this uniswap build to our home screen. I've actually already installed this, so it's asking me if I want to update and I'll click update. When I do that, it will pin this DAP to our own personalized storage that we have with our MySky identity.
00:30:34.046 - 00:31:17.774, Speaker B: And then after doing that, it will update our kind of application data. And we can also see under uniswap, we have this fully decentralized build that we will always have access to as users. Okay, I am well running over time. So lastly, if you want to get started with a decentralized domain name, you can go to ENS domains and you just update the content URL to your Resolver Skylink. Kind of like that. Again, documentation is in the Skynet Developer Guide, which you can access here. We also have SDKs in lots of languages that you can also read about@scisky.net
00:31:17.774 - 00:31:42.280, Speaker B: Slash Docs. And if you're just interested in using Skynet support, sciasky net is a good place to start. Of course, there's the hackathon Discord, but Ardowned Discord is a great place to find help and learn more from Skynet developers. And lastly, let's get some more questions. And thank you so much for your time. I apologize for going overtime as well.
00:31:46.430 - 00:32:13.250, Speaker A: That was great, Daniel. Thanks, appreciate it, really. Does anyone have any questions? Now's your chance. We have a few minutes. Often people think of their questions about 20 minutes after the talk ends, but as Daniel put his contact information here and discord is a great way to reach the Skynet team. And also there's the like Daniel said, there's the Unicode discord. Also oh, there's a question from Jose.
00:32:13.250 - 00:32:17.170, Speaker A: How do we deploy to Skynet? GitHub actions?
00:32:18.310 - 00:33:07.300, Speaker B: Yeah, so if you want to use the GitHub actions, the place to start is just going to be going to the documentation and kind of reading through here. But really the crux of it will be maybe you can watch a demo that's gone even more smoothly like the last ETH global hackathon. But if you copy paste this info right here into this file in your project, when you push to main, your project will try to build and deploy to Skynet. And so if you're not using a react framework, maybe some of these parameters will need changed. But seriously, just ping me on the discord and I'm happy to walk through whatever that looks like for your application. I think that answers. Good.
00:33:11.190 - 00:33:35.850, Speaker A: Awesome. Anyone else? All right. Okay. Well, don't be shy as the hackathon continues. And Daniel alluded like, you can go to the YouTube, east Global YouTube. This will be uploaded shortly and then his previous talks. Also, they're all there, so if you want to just check it all out, it's on the YouTube.
00:33:35.850 - 00:33:49.870, Speaker A: And with that, I want to thank Daniel from Skynet for doing this cool workshop for everyone. Happy hacking out there. Thank you, Daniel. See everyone in discord.
