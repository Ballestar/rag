00:00:27.570 - 00:01:19.378, Speaker A: Hello and welcome to this year's ETH online hackathon event. I'll be taking you through how to get started with Uma. In this workshop, we'll be running through a few topics. A quick introduction done by myself, a tutorial on how to deploy and work with Uma's Optimistic Oracle, done by a launch engineer on the Uma team, John, and as well as Alex, taking us through how to deploy and interact with the long, short pair contract. Some useful information. For anyone who wants to know more about how to work with Uma, you can visit our website, where you can get through to our doc site, medium article posts, and our discourse for more information. If you are working through something that you want to ask someone from the team, feel free to reach out to us on our discords and on Twitter.
00:01:19.378 - 00:01:42.800, Speaker A: For any team that wants to continue building out their idea, post this event. The Uma team has grants available for any team wanting to continue. And if you've enjoyed working with the Uma Tech stack and want to join the team, we have a few open positions, and you can go ahead and visit our careers page to find out more. Right, that's a very short introduction from my side, and I'll hand it over to the rest of the team.
00:01:46.370 - 00:02:16.758, Speaker B: Hi, I'm John Shutt. I'm a senior engineer at Uma. Today I'm going to describe Uma's Optimistic Oracle and show you how to use it to build new financial products. Let me share my other screen for you. All right, so there are two important things to understand about the Optimistic Oracle, which is right here, this part of Uma stack. The first is that it's extremely flexible. You can ask it pretty much any question that has a publicly verifiable answer and receive the correct answer.
00:02:16.758 - 00:03:03.030, Speaker B: If you're thinking about integrating UMAS Oracle with your project, there's a good chance we already have a price Identifier that'll suit your needs. But it's also very easy to pass new price Identifiers in through Uma's governance process. The second thing to understand is that the Oracle works optimistically. And what I'm about to say might sound familiar if you know about optimistic roll ups, which work in a similar way with the Optimistic Oracle. A user or contract requests a piece of data like a crypto price a proposer submits a response along with a bond and then there's a wait period for anyone else to raise a dispute about what the proposer said. If a dispute is raised, it goes to a vote of all of Uma's token holders to determine who is correct. If the original response was wrong, the disputer gets the proposer's bond, and if the original response was correct, the proposer gets the dispute respond.
00:03:03.030 - 00:03:37.234, Speaker B: In practice, disputes on Uma are raised extremely rarely, since submitting incorrect prices or raising spurious disputes will cost you money. So the game theory basically works to keep people in check. So I'm going to walk you through a demo script here. This is for a really simple optimistic Oracle integration. This tutorial is basically going to spin up a local blockchain. It's going to deploy Uma's contracts, and then it's going to deploy a contract we call the deposit box that receives deposits of WETH and allows withdrawals denominated in USD. And you actually need an Oracle for this.
00:03:37.234 - 00:04:08.902, Speaker B: And we'll use the optimistic Oracle since that's the only way to find out the ethereum USD exchange rate. So let's walk through here. In order to run the demo, first we need to spin up a local blockchain. We're going to use Ganache here in this terminal window. There's some additional prerequisite setup steps, but we're just going to assume that's already done. Not particularly interesting to show right now. And we're going to start deploying some contracts.
00:04:08.902 - 00:04:40.834, Speaker B: So first we have to migrate. And these are just all of Uma's basic contracts. So if you're launching this on a testnet or on mainnet, you're not going to have to do this migration step. All of our contracts are already there. But you see things like the Finder the timer. This is for testing the voting token. The Uma token, voting related contracts, a registry for different collateral types and so on, that are registered, a store for fees, et cetera, et cetera.
00:04:40.834 - 00:05:08.954, Speaker B: This is just Uma's whole stack. This is the Oracle itself getting deployed too. Just give this a minute and then we'll be able to actually run the demo script and take a look at some of the logs, which you can actually preview here, but we'll walk through what it all means. Okay, cool. So let's do it. Let's run the demo. It's pretty straightforward, just a test demo script.
00:05:08.954 - 00:05:38.674, Speaker B: Then we'll talk about the logs and we'll talk about the code. So I'm not going to read through everything that happens here. Initially, we need to deploy a collateral token, do a bunch of setup stuff. But let's pay some special attention to number three and four. The user starts with ten WETH and deposits all of it in the deposit box. Then they make a withdrawal request for $10,000 worth of WETH. The deposit box then requests the ETH USD exchange rate from the optimistic Oracle.
00:05:38.674 - 00:06:02.426, Speaker B: And since this is a local script, we can fast forward past the dispute period and settle the withdrawal request at an ethereum price of 2000 USD. The user withdraws five west. As you can see, 2000 USD. This tutorial was created a little bit ago. So this is intentionally a very simple implementation. It's just to show how the optimistic Oracle works. But the mechanism is powerful and could easily be extended.
00:06:02.426 - 00:06:39.686, Speaker B: So let's take a look at the code. So this is the code for the optimistic deposit box script. You can find the example code in the protocol repo. This is a mono repo and includes a lot of other good stuff, including our smart contracts tests. And bot infrastructure. So this is a great starting point for building your own Optimistic Oracle implementation and understanding how the Optimistic Oracle functions actually work. As you walk through here, you can see real integrations with Optimistic Oracle on this local blockchain, as well as all of the steps.
00:06:39.686 - 00:07:14.278, Speaker B: And this is too much to go through in the video, but I really highly encourage you to check this out again. This is at umaprotocolprotocol and packages core Scripts demo optimistic Deposit Box And I believe there's also a link in here if you look through. And if there's not, there should be, so we'll add it. All right, let's see here. I'd also encourage you to look at the Optimistic Oracle interface itself. There's a lot of good comments in here. We do our best to add lots of comments to our code to make it easy to walk through and understand what's going on.
00:07:14.278 - 00:07:44.074, Speaker B: So in here you can see comments that explain the functions and parameters. Requests, proposals, disputes, and settlement. All of these things are explained in here. So this point is where you would request a price either as an individual user or as a contract. You're requesting a particular price or just a particular piece of data from the Optimistic Oracle. You're setting a bond that you want the proposer to post some other customization details. You can have longer, shorter liveness.
00:07:44.074 - 00:08:07.960, Speaker B: For instance. Let's say that you don't have any bots up and running to respond to these price proposals or dispute them. You want to do this all manually. You might want to set a longer custom liveness for that. Give it like a certain number of additional hours, or give it a day or two just to make sure that you catch anything that goes wrong. Price proposals, disputes, et cetera. All this in here definitely go and check this out.
00:08:07.960 - 00:08:50.406, Speaker B: So another thing that we should talk about is price Identifiers. So as you think about price Identifiers for your project, you probably want to look at Identifiers that have already been approved through our governance. And a really cool one that I want to highlight here that might be relevant to you is Token Price. So token price is a generic Identifier. It allows you to get the exchange rate between any two tokens. And before you can see a lot of other custom price Identifiers, we put in for like, uma, USD, uni to USD, et cetera, vice versa, you no longer have to pass these anymore. Ever since this unit passed this governance proposal, token Price lets you get anything to anything.
00:08:50.406 - 00:09:36.366, Speaker B: So that's really great. Another really good and useful generic Identifier is yes or no query. And yes or no query lets you ask the Oracle any natural language question. Like you could ask did the Philadelphia Eagles win the Super Bowl in 2022 or did Openc average $1 billion in trading volume per month over the past six months? Pretty much anything like that as long as it's some information that anybody could go and look up in case of a dispute and voters could verify what the true answer is, this Identifier works for that. If it's something a little bit harder to calculate, if there's some ambiguity about what the result should be, you probably want to propose a custom price Identifier that's also not that hard. Just reach out to us. We're happy to help you create a new Identifier and help you pass it through governance.
00:09:36.366 - 00:10:10.734, Speaker B: We make the process pretty painless, especially with the Super um and Q crew, our community team, which is really incredible. That can kind of help you guide through the process. One other thing to look at if you're going into production and we won't dive too deep into this right now, is actually setting up bots. And bots could propose prices and dispute prices automatically. So you don't have to worry about price requests coming in when you're asleep or incorrect price proposals going through and not getting disputed. All really awesome. You can spin up a docker container to do this.
00:10:10.734 - 00:10:46.342, Speaker B: You can launch this in the cloud. There's a lot of details in here. Definitely recommend that, but we're not going to dive too much into it, so I hope that's all really helpful. There's a lot here just to circle back on the price Identifiers for a minute to spur a little bit of inspiration. You can see how some of these things are really customized. So X, Sushi, APY, for instance, this is tracking the average yield from xSushi over a certain number of days. You can track dominance of Ripple or BTC or ETH.
00:10:46.342 - 00:11:20.178, Speaker B: I know that there's multiple dominance price Identifiers in this, the price of gold, KPI options. This is a whole other open field. So if you have some particular KPI for a project that you want to incentivize, you can create a custom API and the Oracle can enforce the payout to people that receive those tokens, which is really great for airdrops. It's really great for community incentivization. There's a lot of really cool stuff. So the place to check this out is Docs Umaproject.org, go to token holders, go to price IDs and collateral currencies.
00:11:20.178 - 00:11:37.642, Speaker B: You can also check out our collateral currencies here. Lots already approved. We kind of preemptively approved some stuff too. 85 so far. And similar to price Identifiers, it's very easy to add. So basically what we're trying to do is just give you a toolkit as flexible as possible. We have some contracts you can work with.
00:11:37.642 - 00:11:48.080, Speaker B: We have an oracle. You can ask any question to get a correct answer, and you can create pretty much any product you want. Sky's the limit. Please reach out to us. We'd love to help.
00:11:48.930 - 00:12:18.630, Speaker C: Hi, everyone. My name is Alex. I am a launch engineer at Uma, and today I am going to walk you through the LSP contract. We are going to do a quick demo of deploying a contract. And then we're also going to go through some of the LSP interactions. So a little overview of the LSP contract. It allows anyone to create financial contracts that can't be liquidated and can easily be customized for various payouts.
00:12:18.630 - 00:13:41.022, Speaker C: So developers that are familiar with the EMP contracts might be excited about there's no liquidations, there's no bots, there's no collateral ratios. Not only does this allow for more passive LPs, but it also creates a new suite of products aimed at treasury management and other use cases. But I really want to highlight how flexible the LSP contracts can be. And John is really going to walk and go through the integrating with the optimistic Oracle. But the root of this flexibility comes from how the optimistic Oracle is able to easily provide access to data, regardless of how unique or bespoke that data is. That data can then be read by the LSP contracts and be used by the LSP contracts to compute and determine financial payouts. But the bottom line is, for the optimistic Oracle, the same level of effort is made for settling a price request on something like ETH USD, its spot price from STX versus something very unique and bespoke.
00:13:41.022 - 00:14:32.690, Speaker C: So that's really powerful in itself. While today we're going to do a demo on something relatively simple, there are more complex calculations that can be seen in our implementation file. So before we go into our demo, I just kind of want to jump over and look at some of these unique implementations. A good one, I think, is BDI flip. The calculation actually tracks the market cap of BDI relative to the DeFi pulse index. So we have a little summary here. We have our ancillary data here, which actually is deployed within the deployment script.
00:14:32.690 - 00:15:45.606, Speaker C: And then we have our implementation steps down here. What's great about these implementation steps is that it removes a lot of uncertainty for voters and if there's any disputes, and then also helps to walk through how to calculate the price for proposers. So I encourage anyone that's thinking about building something on uma, just to kind of explore these documents and see what's been created and use this as a really powerful reference. So going back into the slides, our next step, we are going to create an LSD contract. So what we're going to do today is just basically make a contract that does a payout based on whether Openc will launch a token in 2021. So this is something that can easily be used by prediction markets. But what we want to do is how we want to set it up is if there is a token, an Openc token released in 2021, the collateral payout will go to the long token holders.
00:15:45.606 - 00:16:37.260, Speaker C: And if there is not a token released, the payout will go to the short token holders. So kind of the steps, how we're going to do this is first we're going to find a Price Identifier and then we are going to choose a financial product library to use. And then we are going to write out our Plymouth script and launch our contract. So the first step in finding our Price Identifiers is to go over to the Doc site. We have all of our Price Identifiers that are approved are listed in here. I already know which one we're going to use, so I'm going to skip down to the yes or no Query Identifier. So this really is the yes or no question, and it's intended to be used with the Ancillary data.
00:16:37.260 - 00:17:21.370, Speaker C: But if you come into the Doc, it kind of explains. So the price that only can happen in three ways. It's P one if it's no, p two, value if it's yes, and P three if the price cannot be determined. And if you come down to the sensory data spec, this question is pretty much what we're going to use. This asks the Fidelity Mavericks when they finals in 2021. We're just going to change this to did openc release a token in 2021. And then we are going to convert this to bytes and we can pass this along to our deployment script.
00:17:21.370 - 00:18:16.520, Speaker C: So now we have our price Identifier. Next, we want to go over to the Launch LSP Repo and kind of look at the deployment scripts and the different financial product libraries that you can use. So if you haven't been to the Trepo before, this kind of outweighs how to write your deployment script. It goes through all the different financial product libraries that we offer, and it even outlines at the bottom how to create a custom FDL. So there's a lot to work with here today. For our example, we're going to use the Linear FDL contract. And so how we're going to use that with the yes or no query is.
00:18:20.210 - 00:18:28.780, Speaker B: Our channel.
