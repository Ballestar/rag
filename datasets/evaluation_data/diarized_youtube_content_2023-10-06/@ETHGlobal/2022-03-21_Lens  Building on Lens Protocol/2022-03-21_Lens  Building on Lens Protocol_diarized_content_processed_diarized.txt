00:00:13.010 - 00:00:13.270, Speaker A: Great.
00:00:13.340 - 00:00:28.678, Speaker B: So welcome again. Here. I have David Zero, Dot and Josh with me from the lens protocol team. I'll let you guys take the stage and in the meantime, if you have any questions, feel free to pop them in the chat and we can take them as we go or towards the end.
00:00:28.844 - 00:00:29.560, Speaker A: Thanks.
00:00:33.210 - 00:00:33.718, Speaker C: Awesome.
00:00:33.804 - 00:01:26.798, Speaker A: Well GM everyone one and hope everyone had a great weekend and is having a happy Monday. I'm David, I'm the product manager for social products here at Aave, including Lens Protocol, and I'm joined today by Josh, one of our lead backend developers, author of the Lens API, and Zero, one of our lead smart contract developers, the lead developer behind the Lens Contracts. We're going to do a quick session today, kind of recapping, I think a previous presentation we gave on how Lens works and what it does. Peter will then jump in and give us a little bit on the Lens Contracts in particular and how to build with them specifically looking at modules. And then Josh will jump in and talk a little bit about building on Lens using the Lens API from ape companies. So if you have any questions, please drop them in the chat. We're going to do our best to answer them live.
00:01:26.798 - 00:01:59.000, Speaker A: If not, we'll do them at the end of each respective session or section. With that, let's jump into it. So we'll do a quick overview of Lens. I think it goes without saying, web Two social media is pretty broken. Not a day goes by that we're not constantly railing at Meta and Twitter and all of these names that I legally probably shouldn't be saying, but we're going to say anyway. Networks are selling your data as part of the deal where you get free access to Facebook. In return, they're going to monetize your content, turn you into ad sales.
00:01:59.000 - 00:02:32.434, Speaker A: The user data is not portable. I really wish that I could post a singular video to both TikTok and YouTube and Vimeo at the same time. But good UX is definitely the antithesis of web Two and user data is centralized. I love when Facebook gets hacked and all of a sudden my email is full of spam, my mailbox is full of spam, and my identity is probably being sold somewhere on the internet. So we're set out to build Blends Protocol to change all of this and bring Power back. We say in web Two that in web two, the game theory of social is zero sum. Everyone needs to compete against each other.
00:02:32.434 - 00:02:50.710, Speaker A: Absolutely. Because you only get data when they're on your app. That's it. With web Three, we're changing it to make it collaborative sum. We're doing that by building an open, composable and decentralized social graph. Lens is not a social media network. It is a social graph that allows you to build social apps or social experiences.
00:02:50.710 - 00:03:30.366, Speaker A: As a creator, you own the links between you and your community. You own your content, all using NFT technology. You form this fully composable, decentralized social graph. Continuing to kind of go through this overview, we have kind of three key NFTs that underpin the entire system, the first being a profile NFT. If you've ever worked with ENS or Unstoppable, this is going to look very similar, right? It's just an NFT representing a handle. I'm at David and it looks the same. It's got a little bit of metadata where you can say this is my bio, this is my profile picture that will resolve when I go look at this in OpenSea.
00:03:30.366 - 00:04:10.478, Speaker A: But the key thing we have there is we have two kind of additional things. We have this publications array and append only array where you can add publications. These are posts mirrors, which are what we call retweets or comments, which are a reference to another publication plus additional content. Publications refer to all of these posts single post, share or a mirror. That's just a simple reference to the publication comment reference with additional content and that's your publications array. Additionally, you have this thing called a follow module which includes your follow logic to issue follow NFTs. The next key NFT, the follow NFT is the result of the follow process.
00:04:10.478 - 00:04:40.314, Speaker A: My wallet wallets follow profiles. David ETH wants to follow at Josh. I will go ahead. I'm going to call a transaction to try to follow him. It's going to hit his follow module set on a per profile basis and some arbitrary logical get run before deciding whether or not to issue me a follow NFT. For example, it could be you have to pay me five E at one time in order to follow me. Is it possible for a profile to have different follow modules at the same time, or just one? Just one.
00:04:40.314 - 00:05:12.958, Speaker A: But again, arbitrary logic can be included. So you could do some kind of like compound follow module that implemented two different logics. It could be you have to have a certain NFT in your collection representing like a creator pass or you have to pay me five matic to follow. So you could do that kind of compound logic inside a singular module. But only one module can be active on a profile at a given time. This module, at Follow NFT also has a token ID, and that's based on the order of following. So the first follower of At Josh will have ID one, so on and so on.
00:05:12.958 - 00:05:44.494, Speaker A: It also has some built in governance, including delegation. And so this allows the creation of what we call like social dows. Think of social tokens. Remove the RC 20 and we could do a lot more powerful things with them. So I could use snapshot to say I want to pull my audience. To say I want to pull my audience. Should Josh, who does a lot of great tutorials, should you keep making sliding tutorials focusing on Aviv Three or should he do Alchemy's V two and you can say I actually only want my 1st 500 followers to be able to vote on this.
00:05:44.494 - 00:06:12.722, Speaker A: You can do all kinds of different things. That's the follow NFT. So let's go back to the profile NFT and we said it contains its publications array. Let's kind of look into a publication a little bit. A publication is pretty much just a blob of metadata. Lens protocol does not care about where you're actually storing this publication. You're going to reference a content Uri and that can reference are we IPFS ceramic.
00:06:12.722 - 00:06:52.390, Speaker A: It can also reference a centralized address, like something stored on S three or any arbitrary URL. You could also try to address and say this lives somewhere in ethereum state or polygon state. If it's going to be some on chain reference, we don't care where storage is going to be. So that's part of it. In addition, you can set two additional modules, a reference module and another thing called a collect module. We're going to start with collect modules. So collect is the process by which a publication get minted into a standalone NFT whose content will be the same as the original publication.
00:06:52.390 - 00:07:32.210, Speaker A: So the collect module describes this logic. It is the mint function. Again, arbitrary logic that results in a boolean answer. True or false? If true, a collect NFT gets issued. So a sample could be I just took a great recent trip to London and me and Josh took a great photo together and I may want to publish that on my publications and I may say, hey, they're going to be 50 copies of NFT that could be minted and they're going to start at one matic each. I can make it even more complex and I can say start at one matic and then every time it gets minted, add an additional matic. We've had the community build really complex ones that say take the matic that's generated by these sales deposit into Ave and send the a tokens back to the creator.
00:07:32.210 - 00:08:17.598, Speaker A: In addition, all of these collect modules have additional logic that allows a referral fee. So if I do a publication on my feed and then Josh mirrors it again, putting a publication into his feed via the mirror type, and then somebody collects based off of Josh's mirror, i, the creator, can set a certain percentage of the fee to go to Josh the curator. And so we now have curation, incentives, et cetera. Last thing we have is this reference module. When I said mirror and I said comments, how they contain a reference to another piece of content. Comments obviously have additional original content that is decided by a reference module. So I can set this kind of right protection on it.
00:08:17.598 - 00:09:05.870, Speaker A: Think of this in Twitter when you make a publication or a post and you say only my friends can comment or retweet. This is the exact same logic. If I want to comment on Josh's particular post of right before that comment goes through, it's going to have to pass through his reference module, which again, arbitrary logic coming down to a boolean answer. So it could say things like you can only comment on this post if you are a follower of mine or you pay me five matic. You can only comment on this post if you hold a Board Ape or pay one ETH or hold, I don't know, an avagotchi. You could do any kind of arbitrary logic, it could be community based. You can only comment or share this post if you have at least 32 FWB.
00:09:05.870 - 00:09:56.160, Speaker A: So to kind of recap on the extensibility side, there are three key areas to look at. We have three modules a follow module which decides arbitrary logic giving a Boolean answer saying whether or not you mint a follow NFT. The example I give here is you can only follow me if you hold a Board Ape or pay me five E reference module whether or not you are able to comment or mirror, which is our version of retweet on a given piece of content set on a per publication basis. The example here is you can't comment or retweet this if you don't have 32 FWB. And lastly, collect module arbitrary logic deciding whether or not an NFT, a collect NFT gets minted from a publication. So in this case it could be you have to pay me five E in order to get this NFT. And it can be very complex, as much as complex as you want.
00:09:56.160 - 00:10:31.580, Speaker A: I'm going to run through some of the questions in the chat before handing this off to Peter to take us kind of a walkthrough of the contracts and a little bit of publications. Can DAOs own profiles. Does the profile have to be a wallet address? No. In fact, that's something that we're seeing a lot of cool development on is what happens when profile and follow NFTs are held by smart contracts. You could do something where a smart contract holds a profile NFT. You have an admin that can add posters and different people can post on behalf of a Dow, let's say. Or we could have accounts that have parental controls done that way.
00:10:31.580 - 00:11:17.020, Speaker A: Private postings. Can you do kind of encryption mechanisms? There's a ton of great sponsors of this hackathon, such as Lit Protocol that allow you to do kind of encryption using ceramic as a storage solution. So right, my content Uri inside a publication can reference a piece of encrypted content between Lit Protocol and Ceramic. And then an individual trying to read a specific publication will have to have the ability to get the decryption key through that external protocol lens just defines how things are defined on chain. The feed is represented well, the feed is a bit more currently you just have an append only list of publications on a per profile basis. A feed is a more generalized higher level structure and Josh can touch on that when he does the.
00:11:19.310 - 00:11:20.106, Speaker C: See.
00:11:20.288 - 00:11:40.690, Speaker A: Can somebody create a profile without setting up the full protocol? You can on testnet using the API or using the mock create profile proxy contract. I believe that's what it's called. Josh has me in the comments know. So with that I'm going to hand it off to peter. I think Peter should have shareability. Peter, if you want to jump.
00:11:43.270 - 00:12:00.440, Speaker C: Yeah, yeah. So I'm on windows, so I don't have my code here, but I do have GitHub and I'm going to walk you guys through a little bit how that kind of thing works. So let me quickly share this.
00:12:03.870 - 00:12:06.730, Speaker B: I just made you a co host, Peter.
00:12:07.230 - 00:12:09.370, Speaker C: OK. Can you guys see the GitHub?
00:12:10.350 - 00:12:11.420, Speaker A: Yeah, we can.
00:12:11.950 - 00:12:34.686, Speaker C: Okay, cool. So basically I'm going to take a quick rundown. I'm not going to go deep into the contracts because I know we don't have infinite time. But basically the main entry point, if you're building on a lens protocol, you're going to want to get familiar with the lens hub. Okay. Now we use a proxy pattern, but you don't need to care about that. This is the interface that you need to abide by if you're going to build on the contract layer.
00:12:34.686 - 00:13:16.394, Speaker C: And this is also where all the different events and the different functions that you need to care about are located, basically. Now the main functionality obviously is down here. When you see profile owner functionality functions here you've got create profile, this is how you create your profile, et cetera. There's a few additional features that are not included in the documentation yet, like setting a default profile, et cetera. But you don't need to worry too much about this kind of stuff because you're unlimited time. Just make sure that you're at least familiar with how NFTs work the ERC 721 standard, et cetera. Like David mentioned, we have three different kinds of modules.
00:13:16.394 - 00:13:34.310, Speaker C: We have follow modules, collect modules, and reference modules. Right. Oh, you want a link to the GitHub? Sure, let me send a link to the GitHub. Yeah, it's all public and all that. Oh, thanks David. Anyway, so I want to dig a little bit into how modules work. So we know that the lens hub is the entry point.
00:13:34.310 - 00:14:06.430, Speaker C: It's where you create your publications. It's where you do basically everything that you want to do. Now if you go to the core directory and you click on modules, you'll see a whole bunch of modules that we've already created here. Now you can ignore these ish these are the base modules which we use in inheritance to simplify the code. Feel free to inherit from them as well if they include functionality you need. Let's start with collect modules because I think this is the most interesting one for hackathon builders. This is where the logic is when you create a publication and somebody's trying to collect it.
00:14:06.430 - 00:14:50.746, Speaker C: Right. So, for example, if I'm an artist and I want to create a new work of art, and I want people to be able to buy it and receive it as an NFT, including digital rights, et cetera, maybe I can use the fee collect module here. And this will basically allow me to charge a fee of an amount that I've decided for anybody to collect my publication. I can also choose to limit it to only my followers. Originally this was always the well, right now it's not pushed on this branch, but we're changing it so that you're allowed to allow non followers to collect as well. But currently it's only followers. Yeah, basically you're able to charge a fee on a given currency as long as it's whitelisted, et cetera.
00:14:50.746 - 00:15:33.398, Speaker C: The Dow does get a treasury fee if it's enabled. Right now it's not enabled, but the functionality is there. And we also have the process collect with referral function which allows mirrors to be used as basically a content curation platform. Just to give a quick recap of how that would work. There are three different kinds of publications. We have posts which are your standard content, we have comments which are standard content that points to another piece of content like a comment, right, typically. And we have mirrors which are our equivalent of shares which are basically just pointers to another piece of content which are typically used to expand the reach of another content like a retweet right, on Twitter.
00:15:33.398 - 00:16:44.974, Speaker C: So the thing is, if you collect a mirror, for example, if David shared my work of art from previously and somebody tries to collect that, it would be unfair if David didn't get any credit because he's the one that got you to see my work of art. So modules allow a referral function which basically implies that David can get a cut of the fees. Right? Now, me as the creator, I'm able to set these different parameters so I can say yeah, David gets small fee or a large fee or whatever I want, but only when I create that publication. So you can imagine there's a lot of interesting things that could happen here. One thing that I'd really like to see is a collect module that is connected to a Dao in some way, right? A profile owned Dao that allows certain criteria for, for example, governance participants only to collect or people that have contributed in some civil resistant way to the advancement of the protocol. For example, you can include any logic you want, like David mentioned, you can make it to only holders of a specific NFT, only these addresses. You can even make it so the fee is different for different people.
00:16:44.974 - 00:17:21.774, Speaker C: It doesn't matter anything that you want to do, let your creativity flow. So you can always take a look at these modules and get inspired and see all the things that we've got. So these are the basic collect modules that we've got built here. There's a lot of pull requests, there's a lot of new ones that we had a bunch of bounties for and I think we might still have some bounties, so feel free to take a look at that after the hackathon. Next up we got follow modules which like we mentioned earlier, are there to include arbitrary logic the moment somebody tries to follow you. So for example, I can charge a fee on follow, it's very simple. Or I may have to approve you to follow me.
00:17:21.774 - 00:18:27.246, Speaker C: For example. This means that this is actually quite interesting because if you think outside the box, you can imagine again a dow owning the profile. And the only time that it actually approves a follow is when you satisfy a certain condition and that would execute a contract call that approves your address as a follower. So then you can create quite an interesting exclusive dow. And the most interesting thing about this is that the follower NFTs themselves actually have built in governance functionality including snapshotting, so you can create votes and with very little effort you can basically have a self sustaining community, right? Or at least the infrastructure to maintain a world, to have a self sustaining community, which I think is pretty fucking cool. So anyway, now you've got also the base modules like we mentioned earlier, there's some that are unique to follow, for example, some that are unique to collect, I think. And yeah, I just want to show you guys a little bit what a base module looks like and why we do this kind of inheritance pattern.
00:18:27.246 - 00:18:54.060, Speaker C: Because I know that when I started Solidity and when I started Smart Contracts, inheritance was kind of confusing to me and I was trying to figure out why we did it this way. Basically anything that inherits from module base you'll see that you actually have any time based or location based logic possible. Maybe with an oracle. Sure. If you have a trusted oracle that can provide that, sure. You probably have something that only allows you to collect if it's not rainy in Seattle. Anyway.
00:18:54.060 - 00:19:42.298, Speaker C: Yeah, basically anything that inherits from module base will be able to use this modifier only hub which everything is open source, guys inherit from it, have fun. And this would basically allow only the lens hub to call this contract for example, which is important because you don't want your modules to be called by anyone or else you could have a vulnerability. So you can see that we use that modifier all over onlyhub only hub. Let's look at a couple of questions before I look at the last kind of module. I know I'm kind of rambling all over the place, but let's see where we're at. So I was interested in creating a friends mechanism or like two way follower word. Would I need to create a new module? I'm not sure what you mean.
00:19:42.298 - 00:20:06.238, Speaker C: Are you saying that if I follow you, it automatically follows me back or something like that. If you can specify what you mean by your question, then I'll give it an answer. Does this allow us to extend the social graph? Yeah, absolutely. I mean, you can extend it however you want, right? A follow doesn't have to be just one thing. It can be anything that you want it to be. Right. That's the beauty of the modules.
00:20:06.238 - 00:20:26.398, Speaker C: If we're both following each other, we get reward. Yeah, sure, why not? It's very possible to do that. You can check if a user is following another user as simply as checking the bounds of their follow. NFTs. Right. If it's greater than zero, then for sure they're following the appropriate profile. All this stuff is exposed from the view functions that we've got in the Lens hub.
00:20:26.398 - 00:21:19.242, Speaker C: So if you scroll all the way down, you'll be able to see the view function section here. And there's a lot of it. So it's a bit bloated, but basically over here you can see that there's a lot of different ways to access specific information or general information. So I think it's quite practical. If you guys are interested, this is a good place to start. Okay, lastly, like we mentioned before, we've got reference modules, which are the newest kind of module that we came up with, and so there aren't that many of them, but basically reference modules allow for specific logic to be executed when somebody tries to comment or mirror one of your publications. So this could mean that, for example, if you're familiar with Twitter, that prevents you from you can set it so only your followers can comment, for example.
00:21:19.242 - 00:21:38.266, Speaker C: This is something that we can do here as well. And there's a lot of interesting things here as well. I want you guys to go crazy, make some interesting logic. Yeah, multi SIG, like control, for sure. You're working on an in reference module. That's awesome. We're building an application on Lens that requires the minting of profiles who's the right person to contact on the discord.
00:21:38.266 - 00:22:11.766, Speaker C: So if you're talking about the testnet, we have actually deployed a profile creation proxy. So profile creation has to be whitelisted to prevent spam, obviously. But on testnet, we allow anybody to create a profile via the profile creation proxy. And that's totally open source and verified even on polygon scan if you want. Mumbai polygonscan.com. Yeah, that's it for the modules. If you guys have any questions, feel free to ping me on discord I'm zero, capital Z-E-R zero D-O-T and you'll see me on the ETH Global Discord.
00:22:11.766 - 00:22:21.680, Speaker C: Or you can ask your questions here. And while Josh has given his part of the presentation, I'll definitely stick around in the chat and answer anything you got. That's it for me.
00:22:23.570 - 00:23:04.170, Speaker A: Awesome. Thank you, Peter. So know tons of different things you can build on module wise. And as a reminder, we do have certain rewards in the hackathon explicitly for the top of each collect reference and follow modules. We have two for collect right now. So if you want to go down that route, that's a great way to go. Just a reminder that do two modules need to be whitelisted? If you create one you have to that local environment, it will not be able to be integrated into the testnet with that, I'm going to hand it over to Josh to talk about the Lens API.
00:23:04.170 - 00:23:17.680, Speaker A: So, TLDR, we built an API to allow non solidity devs to be able to really easily interact and build front ends on top of lens with that. Josh, you want to take it away from here?
00:23:19.170 - 00:23:49.814, Speaker D: Hey guys, I've got a bit of a cough because I'm actually got COVID, but I'm all good. So, yes, I will start with the docs. So we created an API because a lot of the data is emitted in events, and we wanted a way that you could grab this data really quick and really easily. Let me make sure I keep the zoom chat open. I don't know where I can see the questions for that anymore. So I can't see? Yeah. So on the API docs, you'll see that you've got the API.
00:23:49.814 - 00:24:06.762, Speaker D: It's got no API keys at the moment. It's just beta. So some things are broken, some things may not work perfectly. So if they are not, please raise it in discord. I'm always in discord to fix any issues. The main thing is that we're trying to make this like a web. Two API.
00:24:06.762 - 00:24:42.442, Speaker D: So with modules, with everything like that, it's super complicated with how you have to init them, how you have to construct the data to redeem them and all that kind of stuff. So the API is here to kind of help you do that. It's got authentication. And to kind of log in, you just create a challenge. You then sign the challenge, and then you get an access code back and then you can use it on some of the authenticated endpoints. The main thing here is like publications, for example. So we have our metadat standards, which we ask everyone to conform to.
00:24:42.442 - 00:25:06.354, Speaker D: The server won't index it if it doesn't conform to this standard. So there's stuff in there like content. Content is like your post, like Hello World. You have media. Media is like your attachments. You have the image, which is the NFT itself, so it can display on OpenSea. So this is the metadata that you conform to.
00:25:06.354 - 00:25:41.360, Speaker D: To create a publication, you can go through the normal contract calls, which are like, create publication or I forgot what it's completely called. Or you can use the Type Data approach. Now the Type Data Approach kind of abstracts all the complex stuff away from you. So if you're setting up a publication, all you need to do is pass in the profile ID the content, and then kind of define what collect module that you want. So like here it's as easy to turn on a reference module with a boolean. And then when it returns back.
00:25:43.730 - 00:25:44.094, Speaker A: When.
00:25:44.132 - 00:26:25.580, Speaker D: It returns back, it will be all in your type data for you. So if you look down here, we have a full working example where you create the post request. For example, I'm saying this publication is a time fee. Collect this currency, this amount, this will be pre formatted for you on the server and then you have who it goes to and your referral fee. Again, human readable numbers so you're not having to times it by the power of 18 or x, Y and z. And then you'll get a sign type and then you can sign it and then you can send it like this. So it's super easy to kind of create publications and stuff like that.
00:26:25.580 - 00:27:12.582, Speaker D: All the other stuff like getting publications and stuff like that, again is just as easy to grab publications, you kind of have an endpoint which is called publications. You say hey, I want to grab all the publications for number one profile, ID of type, post, comment and mirror. And then you'll get a response back of all the publications. All the metadata itself is already extracted for you. So you don't have to read any Http requests, you don't need to read anything like that. And the modules, the collect modules is all decoded already for you to kind of know what needs to be supplied to it and stuff like that. We have count tables, like how many times been collected, how many times have been mirrored.
00:27:12.582 - 00:28:06.070, Speaker D: We always include the full profile entity itself, which includes your follow modules, how many followers they've got, who owns it, the picture, the handle, kind of bringing all this information because with GraphQL it's really nice how it's schema based. So you can really bring a lot of context on all of these queries. So the documentation fully shows all of this stuff. You've got interesting calls, like for example, timeline. So timeline allows you to say hey, bring me back all my social graphs, post comments, mirrors collected by post collected comments. So you can build up like a timeline of stuff which is really cool because they can log in, they can follow a few people. And now I see if I'm following David now every time David does a publication or does a comment or anything like that, I can go and get to we have stuff like revenue.
00:28:06.070 - 00:28:35.560, Speaker D: So I think Peter said before where you can set a referral fee for stuff. So like here you can work out how much has my profile actually made. We have like everything on the protocol that exists lives in this API. So you can literally get every single person that is following you with a simple request like this and then you get all the information back. So, yeah, like the API. Is super, super useful. We have full coding examples here.
00:28:35.560 - 00:28:41.510, Speaker D: I need to probably ping the repo. I don't know if I've got the repo.
00:28:42.330 - 00:28:44.022, Speaker A: Repo is already in the chat. Josh, you're good?
00:28:44.076 - 00:29:10.606, Speaker D: Okay, cool. So this kind of here, you can kind of run all the scripts. All the scripts are already there for you. So if you wanted to create a profile, you would just do profile, create profile and it would create you a profile. If you want to follow someone, you can just run follow. It will call the database for you, it will do the type data, it will sign it, and then it will send the transaction for you here. So it's super easy to understand how it all ties together.
00:29:10.606 - 00:29:24.226, Speaker D: So, yeah, definitely check it out. It's super cool to be able to build and bootstrap your clients really easily. So I've not looked at the chat at all. So let's have a look if there's any questions to answer.
00:29:24.248 - 00:29:56.346, Speaker A: A couple of questions. There's some people asking, should they deploy lens to Mumbai or use the existing deployment? If you are not building or adding any additional contracts or you're not adding in new modules, I would say use the deployment. It gives you access to the API and other situation and other things. But if you're building additional contracts on top of it or new modules, I would say you may want to whether work locally or you can deploy yourself to Mumbai if you want a more public environment.
00:29:56.538 - 00:29:57.134, Speaker C: Yes.
00:29:57.252 - 00:30:35.642, Speaker D: And to the question of COVID pictures and stuff like that, there's a few things like if you look at update profile, right? There's a few things that are off chain. So for example, these fields are off chain name, Bio, location, website, Twitter, URL, cover picture. Yeah, so they live only on the server. So that's how you can update those kind of stuff just for a server to server call. But like 99% of the data is all on chain. There's examples here of how you create a post as well. So if you wanted to create a post, you can map it all out.
00:30:35.642 - 00:31:18.730, Speaker D: You see it's really super easy to create a post. And then we've got IPFS up here to upload you some content and it will send it for you and you've got a publication. So super, super easy to kind of get up and running with all of this stuff. Is there any other questions about the API, anything like that? I think all the docs have been shared and as we say, hit discord. We're always on there to help where we can and help debug issues and stuff like that. Seen some really cool projects already being built with the API and how quick they can bootstrap and build is amazing to see. So, yeah, super exciting.
00:31:20.830 - 00:31:21.580, Speaker C: Awesome.
00:31:22.190 - 00:31:23.530, Speaker A: Thank you, Josh.
00:31:23.870 - 00:31:53.138, Speaker D: There's one other quick question. Is there any way I can query random date without need of a profile? ID. Profile ID isn't mandatory. So, like, for example, on publications, for example, let me get rid of that. We have stuff like, I think it's random, I forgot where it is. But like, for example, on Profile, we have this random profile that will bring you random pictures. The request.
00:31:53.138 - 00:32:17.962, Speaker D: You don't need any input for the request. And same for Explore. We have an explore here. Again, you have a sort criterion and limit. And that Explore is saying, hey, bring me back the most popular people on the protocol at the moment, the most popular publications with the top commented and stuff like that. And that top commented could be top commented or I forgot what the other criteria?
00:32:18.026 - 00:32:18.640, Speaker A: Is.
00:32:20.930 - 00:32:28.110, Speaker D: It'S like top collected, I think. So you can grab data like that to kind of bootstrap someone's social graph.
00:32:41.400 - 00:32:41.860, Speaker C: Awesome.
00:32:41.930 - 00:33:10.056, Speaker A: Thank you, Josh. So real quick, I know there's a couple of questions at the end, but we do have a couple of different bounty tracks. Definitely want to highlight. Again, we have the front ends, obviously, for the top several front ends, we have bounty score as well as the best in various categories. On the protocol side, the focus is modules. So collect reference and follow. Best modules in each of those categories are going to get prizing there and then Tooling.
00:33:10.056 - 00:33:41.848, Speaker A: We're looking for people to build tooling such as Explorers, right? Looking for a lens scan, be really cool, build, and I think have a bounty out for the best. Vampire attack on web two. Lastly, I think this is kind of most importantly. I know Stani during the summit said this when they were building Aave, they learned that you're not just building for yourselves, you're building for a community. And I think that's something we've learned. We're building alongside an ecosystem. And so please, if there's things you would like to see in the contracts, either build themselves or please jump in the discord and let us know what we can do better.
00:33:41.848 - 00:34:03.090, Speaker A: Same for the API, we have that repo open. We want to make sure that we're building things as best as possible. That's really what we're hoping to build alongside everyone. We're here for your feedback, we're here for comments, and we want to be building alongside a whole community. Yeah, that's it. Yeah.
00:34:05.860 - 00:34:06.320, Speaker C: Great.
00:34:06.390 - 00:34:16.130, Speaker B: Thanks, David, Josh, and Peter for the great session. And feel free to follow up with more questions on the discord. We'll see you then. And have a good day.
00:34:17.140 - 00:34:19.900, Speaker C: Thanks, everybody. Take care. Bye.
