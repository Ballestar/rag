00:00:09.560 - 00:00:37.590, Speaker A: Great. So thanks everyone, for joining this morning, afternoon, evening, wherever you are in the world. We have Nick Fett from Teller, who's going to walk us through a step by step guide to using Teller. A reminder to everyone who hasn't applied or staked, we are still accepting applications for ETH online. Don't forget to go and apply and stake. And without further ado, Nick, take us away.
00:00:38.360 - 00:00:53.080, Speaker B: Sure. Thanks, Heather. Yeah. So as Heather said, I'm nick everybody. If you guys can hear me okay, post. Somebody give me a thumbs up in the chat. And also, you guys can also use the chat to ask me any questions.
00:00:53.080 - 00:01:27.350, Speaker B: I'll be sure to kind of answer them as we go, but sure. I'm going to start sharing my screen here. And today I'm just going to walk you guys through how to use Teller. So how to actually implement Teller inside of a smart contract. A little bit about Teller first. So I know a lot of you guys are probably here because you saw that we had some bounties that are available. So we'll kind of just go over what Teller is, how you might be able to use it, and then what the bounties are, and then we can get into some of the coding aspects of it and how easy it is.
00:01:27.350 - 00:01:57.188, Speaker B: So, Teller, we're a decentralized oracle on Ethereum, so we let you put real world data on chain. So to tell you what we actually do, before I was actually running Teller, we were doing a derivatives protocol. So we were basically letting you bet on the can you guys hear me?
00:01:57.274 - 00:01:59.960, Speaker C: Yeah, go ahead. Sorry, I muted you on accident.
00:02:02.140 - 00:02:36.032, Speaker B: Thanks. Don't know what you guys heard, but anyway, I think he did it really quick. We let you bring real world data on so if you want to bet on the price of a cryptocurrency, the big problem with this on Ethereum is that Ethereum actually can't read APIs. So you can't go read Coinbase's price. You have to enter it into your smart contract manually. And the problem with entering a price manually is that now you have this centralized point of failure. So if somebody refuses to enter the price or they enter it incorrectly, that's not a good thing.
00:02:36.032 - 00:03:28.272, Speaker B: So Teller, we're different because we use a competition, we call them data miners to actually go and get this data for you. So you can write a derivatives contract or any sort of application that requires outside data, and Teller will go and get that data for you and put it on chain. So you can do this without having to, say, rely on this centralized point of failure. So things that we would expect you guys to build and some great use cases so you can just kind of look what in the ethereum space already uses an oracle. And how can you sort of improve upon some of these designs and especially use Teller to sort of farther decentralize it. So actually make it a little bit more censorship resistant. So things such as stablecoins, if you guys know Maker, they have their own Oracle that they use for their contracts.
00:03:28.272 - 00:04:09.276, Speaker B: Any sort of derivatives products. So you can think like synthetics or you can think even Auger is sort of a derivative based contracts. Then insurance contracts, nexus mutual type things. These are all contracts on Ethereum right now that use Oracles. So there's a lot of different pieces that anytime you need off chain data you can potentially use are obviously what do you guys want to build? What are we looking for? The biggest things. We want to see you guys just giving us feedback. We'd love for you guys to get there and start implementing Teller.
00:04:09.276 - 00:04:51.020, Speaker B: We're live on Mainnet and then we're also live on Rinkbee. So if you want to test out your things on Rinkby, you're good there. The big things try and get creative. We have one for the best original project, another one for most creative, and then last one for the best implementation of Teller into a pre existing project. So there's a bunch of different bounties but feel, know, reach out to us kind of as we go today or just as the hackathon goes on. I know it's a nice long hackathon, so we're very available. Anyway, let's get into the coding.
00:04:51.020 - 00:05:32.228, Speaker B: Going to so what we're going to do here is we're actually going to go through this is up on our GitHub. We have something called sample using Teller. This is a contract that shows you exactly an example of how to use Teller in your smart contracts. And you guys can probably walk through it really easily on your own. But I'm going to walk through it today so you guys can just kind of see me pointing and clicking. I'll post the Sample using Teller repo in the chat as well. But it's pretty simple to find.
00:05:32.228 - 00:05:55.776, Speaker B: Anyway. So we'll make a new project. We'll call it ETH online. CD into it. And then what we're going to do, we'll do a Truffle init, create a nice Truffle project. Okay. And then what we're going to do this will probably take the longest piece, so we'll get it out of the way.
00:05:55.776 - 00:06:41.600, Speaker B: You can do NPM install using teller. So using Teller, what it'll do is it'll go and grab some solidity files and put them into your Node Modules file. So then you can actually access them from your smart contracts. It'll have everything you need to read and test from the Teller contracts. So we're going to come to our files and then we have our nice ETH Online folder. We're going to bring it. And then this is what you should have for everyone who is nice and familiar with these base contracts or base Truffle files.
00:06:41.600 - 00:07:25.788, Speaker B: But what we'll do to kind of just kick things off, we'll just go and we'll copy things directly from sample using Teller. And then I'll kind of walk you guys through what everything is okay. So we're going to come into our we'll save it as ethonline Sol. Okay, thumbs up everyone. We're doing good? Yeah. All right. So we'll just kind of walk you guys through using Teller and how we're actually going to read values in here.
00:07:25.788 - 00:07:50.872, Speaker B: So the first thing that you're going to do at the top after your Pragma statement is you're going to import using Teller. So after you did that NPM install, you have a package in here called using Teller. And from the contracts you're going to import usingteller Sol. So we can go just for fun. We'll go look at it. Nice. Landed on it.
00:07:50.872 - 00:08:35.172, Speaker B: Okay, so using Teller, what it'll have in here? These are all the different functions that you're going to have access to the mock Teller system. So we have like a mock Teller system that's built if you know how Teller actually works. We have a series of proof of work miners that compete at adding values on chain for you, obviously for testing purposes, you don't have to simulate a network of proof of work miners. You're just able to use this mock Teller, this Teller interface, to manually input values and test them. But whenever you do deploy to the real network, the interface will work correctly. So you can still use this one. The big ones that you're going to want to use.
00:08:35.172 - 00:09:04.140, Speaker B: So there's a lot of functions that are native to Teller. So retrieving data if you have an ID and a timestamp. But the big ones that we're going to use today, we're going to look at get current value. So you have a request ID. So this was actually linked in the repo as well. The way that Teller works is each numerical ID is linked to a piece of data. So like, ID one, for instance, is going to be the ETH US dollar price.
00:09:04.140 - 00:09:37.380, Speaker B: ID two is going to be the bitcoin US dollar price. ID 50 is the TRB US dollar price and so forth. So you would need to find out what ID corresponds to the data that you're putting on. If you want a new piece of data, definitely reach out to me. I can show you how to do that as well. But this is going to be the base of the system. You just enter in, get current value, you enter the ID, and then the way that it works is it's going to return back a boolean.
00:09:37.380 - 00:10:22.890, Speaker B: Meaning did it actually go and get what you wanted to get? So you want that to be true, meaning you didn't query some ID that doesn't exist or something like that, the value of it. So what was the value and then also the timestamp for it. So this will be Unix timestamp. So for instance, if it was put on yesterday, it'll correspond to yesterday's timestamp, or if it was put on ten minutes ago. That way you can do some checks. And this is just the base of the using Teller system. You'll probably want to just use get current value, but if you want to use a different function, the other one that we recommend that projects who are trying to be a little bit more robust use is the git data before.
00:10:22.890 - 00:11:14.244, Speaker B: So this goes into how the Teller system works whenever a miner places information on chain. So let's say we have the bitcoin US dollar price and the miners say that the current price is $10,000. Once it's put on chain, then anybody can dispute that value. So you can challenge it and say hey, that's not correct. And then what happens is the value will get taken off chain and it'll get put to a vote as far as whether or not it's correct, you want to wait if you're a project, depending on how long your protocol will allow, you want to wait for these disputes. You want to wait for people to check whether or not the data has been validated. Obviously the miners are incentivized to only put on correct values.
00:11:14.244 - 00:12:07.210, Speaker B: But if somebody is hacking the system, bad values can get put on chain. So you want to make sure that you wait for somebody to put on a dispute right now most of the disputes happen within ten minutes given gas prices. So you would want to put get data before and then in your code say now minus ten minutes or now -1 hour and what this would do is it would make sure that the data that you pull into your smart contract is sufficiently old, if that makes sense. And this is sort of a common practice in Oracles, you'll see. So for instance, Maker does this as well. Whenever Maker updates their smart contract, their Oracle, they have an hour long delay for disputes. So anybody can go and they can say hey, that's not the correct price and you can freeze the Maker system.
00:12:07.210 - 00:13:00.408, Speaker B: In a similar sense, here you will want to wait for disputes or if you're just running a nice simple view function and nobody's probably going to attack your Oracle, you can just use get current value and it'll be easier for you. You won't have to think about it anyway. Now we're going to go back to our ETH Online soul. So that was what we imported and then we'll change the name here from sample using Teller. Call it ETH Online and then you're going to use is using Teller. For those of you that I think most of you guys are going to be pretty familiar how to do some inheritance here. But is using Teller this basically whenever you use is it's just going to basically cut and paste all of those functions underneath your contract so you have access to them.
00:13:00.408 - 00:13:42.360, Speaker B: The thing that you're going to need to do is in the constructor it needs to know the Teller address. So you would have to pass in in your constructor the Teller address and then you would pass it to the using Teller function. So this is how you would pass in a constructor argument to an inherited contract. Obviously, if you're just on testing, you would be passing in the mock Teller address or a pretend Teller. But we'll show you some test files and how that actually looks. Now we can go and look at some of the functions that are available. So we wrote here in the sample using Teller, you have Read Teller Value.
00:13:42.360 - 00:14:13.600, Speaker B: You give it an ID and it goes and runs. That get current value function. And then if it actually retrieved it, it's going to return the value. Same with Git Teller value before, same exact thing. So now we'll write a little function to actually use it. We'll say is data big? We're going to do the base of the base solidity functions here. So bear with me if you guys are pros.
00:14:13.600 - 00:15:07.440, Speaker B: So we're just going to do external returns and we're going to return a boolean. And what we'll do result equals read Teller value of our ID. And then if result is greater than 100, we'll return true. And if it doesn't return, then we'll return false. Okay, so I noticed something already. Since we're calling read Teller value, which is right up here, this one is an external. So I'm going to change that, make it a public so we don't get a compiler.
00:15:07.440 - 00:15:53.360, Speaker B: Okay, so now we're going to come back over and we're going to compile it. We'll see if this works. Everybody doing good so far. We can get into some use cases for Teller. I know somebody asked that we can get into that near the end. Okay, we got a few warnings on an unused variable, but I think having an unused variable is a decent warning that we're okay to live with here. So now what we're going to do, we can come back and look at the sample using Teller repo.
00:15:53.360 - 00:16:23.336, Speaker B: If you guys are actually trying to deploy it and you want to know how you can deploy it, so you can come and you can look at our migrations file. We have some sample migration files here, but for our case, we're obviously not deploying it right now. We can just go and look at how we would actually test this. So I'll cut and paste the sample using Teller test and then I can walk through it here. Okay, so we'll come and we'll make a new test file. Save it. ETH online.
00:16:23.336 - 00:16:59.030, Speaker B: Test JS. All right. And then we're going to replace sample using Teller with ETH online. There we go. Sorry, I'm just clicking around, making sure everything looks good for the capitalizations. But for those of you who aren't aware, so this is just JavaScript testing in Truffle. I like it.
00:16:59.030 - 00:17:26.352, Speaker B: I know people have mixed feelings on it. But this will be kind of the base way that if you're using Truffle, this will probably be how you want to test your functions. But I'll walk you through how it sort of works. So the first thing we're going to do is we're going to import it. Then we're going to import our mock Teller system here. We're just going to call that Teller. And then it sort of exposes a few different things that you can do.
00:17:26.352 - 00:17:56.970, Speaker B: So the base thing is you can run Teller. Oracle submit value. So this Submit value thing, what it does is you can give it a Request ID and you can give it an amount and you can manually just say what the values are. So the value of ID one we can set to 100. The value of ID two we can set to 200 and so forth. That way it just makes it really easy for testing. You don't have to wait for miners or pretend you're on the rink fee network or something like that.
00:17:56.970 - 00:18:35.988, Speaker B: All right, so what we'll do, we'll come down here and we're going to write our new function is Data Big. I think that's what I called it. Then we'll write it. So the first thing we're going to do is we have to submit our values to Teller. We have to tell it what everything is. So we'll submit one, we'll do ID one is going to be 75. And then we'll do ID two is going to be 150.
00:18:35.988 - 00:19:20.710, Speaker B: So we'll double it because if you remember, our threshold was if it's big, if it's over 100. And then we'll assert we'll run this one. And then for is data big? With our Request ID, we'll assert that ID one should be small. So equals equals false data should be small. Yes, very simple testing here. And then we'll assert that ID Two should be true. So data should be big.
00:19:20.710 - 00:20:00.958, Speaker B: Going back to basic numbers. So anyway, now comes the moment of truth. We'll see if this actually runs. Always live testing is fun. Okay, so now what you can do is if you run Truffle test, for those of you that don't know it'll kick off its own little mock Ethereum client and run all these tests pretending that it has its own live Ethereum network that runs locally. All right, first it's compiling them. Deploying them.
00:20:00.958 - 00:20:33.240, Speaker B: Oh, man. Okay, so data should be small. So we had an error. Man, I can't believe we're actually missed that. Okay, so anybody see what I did wrong? Who's going to call me out on it? Data should be small. It says should work if result is greater than 100. I don't know.
00:20:33.240 - 00:21:20.790, Speaker B: I'm going to have to get back to you guys on why exactly this happened. I literally just ran this and it worked. So 408. Oh, somebody's thinking you're thinking, I do this one like that. So what was it? What did I do before? No, I mean, so I've done it before. Like I literally just ran this and then it worked. Anyway, if data is greater than 100 return true? That's correct.
00:21:20.790 - 00:21:40.720, Speaker B: Okay, yeah. We'll give it one more try and if it fails, we can just ask me some questions. But it'll bug me for the rest of the day because I literally have working.
00:21:42.690 - 00:21:47.486, Speaker C: Cursive live coding. Looks like there's some suggestions in the chat. I don't know if you can see.
00:21:47.508 - 00:22:16.220, Speaker B: Yeah, I know. Now everybody's throwing in Async and wait. I think everybody has the right idea for what's going on. At least you guys know the tests are working. That's good. Anyway, this is the base of Teller. I think the problems that we're going about are going to be the issues that you have with anytime you deal with solidity or Truffle testing in general.
00:22:16.220 - 00:23:22.730, Speaker B: But this is going to be yeah, I won't necessarily make you guys sit and wait and debug my tests with me. Yeah, so it's fun. As far as to answer some of your questions, we'd love to actually just work with you guys. A lot of whenever you guys are going to hack this, some of the issues you guys are going to face, it's going to be a lot of just designing it. So whenever you want to use an Oracle in your smart contracts, there's a lot of sort of caveats about whether or not you need a decentralized Oracle. So anytime you're using a decentralized Oracle like Teller, the big downfall is that it's going to be a lot slower than if somebody just enters it into your smart contract. So you have to know that, hey, this is something that I want to do with my smart contracts.
00:23:22.730 - 00:24:06.940, Speaker B: And then also just knowing how to design your system for best practices. So best practices when using an Oracle, making sure that you're doing things that are slow. So a lot of times people, especially you'll see a lot of times in DeFi, what they try and do is they try and build like a high frequency trading exchange on Ethereum or something and a futures exchange that requires super high frequency data. Well, if you're trying to use Teller for high frequency data, you're just going to have a really hard time. If you're trying to use Ethereum in general for high frequency data, you're going to have a really bad time. So just try not to do that. Those are generally just bad practices in general.
00:24:06.940 - 00:24:56.406, Speaker B: So that's usually what we try and push people away from. And we're happy if you have any designs or you have ideas for ways that you might want to use Teller, we're happy to sort of go over those with you. Yeah, so I think those will be some of the pitfalls that you are going to run into. Some people have asked what are some of the things that are using Teller? So lending protocols so that there's a lending protocol that people use. So you can think it's similar to say, Compound, which uses their own Oracle. They use signed prices by Coinbase and some others, and then some others as well. We have somebody who's doing something very similar to like, an Ampleforth.
00:24:56.406 - 00:25:15.700, Speaker B: So if you guys know Ampleforth, they're a stable coin that actually has a fluctuating token supply and they use an Oracle for all of those rebases. So you can use an Oracle for any of those. And I see people are still trying to help me debug it. It's okay.
00:25:19.750 - 00:25:25.510, Speaker C: I have a feeling in five minutes after this is over, you'll jump into discord and have the solution.
00:25:26.010 - 00:25:29.894, Speaker B: Yeah, I will. Or it's just going to work. That's how code works.
00:25:29.932 - 00:25:41.930, Speaker C: Yeah. I think the next question I see in the chat is what's the best way to determine the parameters to use for retrieving the price feed info and then they have a link to prices tellerscan.
00:25:42.750 - 00:26:38.406, Speaker B: Yeah, I can forward that to you guys. As far as what the request ID is, I'm guessing we have a whole spreadsheet available, so I can forward that to you guys in our discord. So right now we have 53 available prices and then you can create new ones. It takes a little bit of time to update, especially just depending on what it is, because the kind of prices that we like to support. For instance, we have like 24 hours averages for the bitcoin price, or we have end of day medians for different prices. The prices tend to be a little bit more robust than just an instantaneous spot price. We want something that will actually be useful in DeFi because a lot of times instantaneous spot prices can sort of be games for various contracts.
00:26:38.406 - 00:26:45.760, Speaker B: So we want to work with you guys on getting something that is actually meaningful and useful for the specific contract you're trying to create.
00:26:47.490 - 00:26:57.220, Speaker C: I'm going to pull over some of the questions from YouTube as well. Fabio asks, what is a reward for a minor submitting data?
00:26:57.990 - 00:27:24.380, Speaker B: Sure. So right now, if a minor for each block. So every time that we have new teller values created, five new values are created and five miners get a submit. So we take the median of those five minor submissions as the official value, and each minor gets, right now, one TRB. So it's like $25 and that happens every five minutes.
00:27:26.750 - 00:27:39.540, Speaker C: The next question from El Hume in YouTube was so the miners compete to submit the answer to Queries, but doesn't that bottleneck the number of client contracts that are able to use Teller at any given time?
00:27:41.510 - 00:28:02.600, Speaker B: So it bottlenecks more so the number of available data points at any given time? If one person puts up the ETH US dollar price, that's it. You don't need to put it up multiple times. Like everybody can read it on chain. You muted me again.
00:28:03.710 - 00:28:05.660, Speaker C: Zoom is my enemy today.
00:28:07.070 - 00:28:34.118, Speaker B: Okay. Yeah. So you would want. What we think ultimately our prediction even a year ago was that Ethereum is going to bottleneck itself. So you're going to have just very expensive limited contracts that are on Ethereum. And we think some of the higher value data pieces will be put on chain and the other ones probably won't. So right now we're putting ETH US dollar price on chain.
00:28:34.118 - 00:28:42.870, Speaker B: A lot bitcoin US dollar price. And if some of the bigger apps are requesting them, you actually don't even need to request them. You can just sort of read from what other people are posting.
00:28:49.610 - 00:29:02.330, Speaker C: Let's see. Okay. Another one is what happens when gas fees get too high? Does the reward automatically offset gas costs? Think the answer is it depends, but I'll let you actually answer it.
00:29:02.400 - 00:29:48.602, Speaker B: Yeah. So the way that it works so if you want to request a specific data piece of data, you would tip it. So the miners choose five data points to mine every block. And which five data points? Those are which ones have the highest tip associated with them. So similar to which transactions get included into an Ethereum block, it's the ones with the highest gas price of paid. So what will actually happen is you would actually need to go and tip those. So whenever gas prices get really high, you would expect that if you want to pay those miners to submit it, you would actually need to tip more to cover those gas costs for the miners or else the network kind of freezes, which we've had happen a few times.
00:29:48.602 - 00:30:36.650, Speaker B: Because if there are no tips and the base reward is less than the cost to submit the solution, then the miner obviously won't really submit it and that can happen. So I think that answers question. I don't know. But yeah, obviously in sometimes the Ethereum network just plugs to the point that it can be hundreds of dollars to submit a value on chain during some of these crazy times. So it actually doesn't make sense to put the value on chain. And we've devised a system where if you really do want that value on chain, you can tip and pay for it, but you want to sort of make way for things and build things that can withstand those delays.
00:30:42.430 - 00:30:49.610, Speaker C: Anybody else with questions in either Zoom or YouTube, feel free to post it.
00:30:49.760 - 00:31:27.002, Speaker B: I know somebody asked on Zoom, do you need working code or just an idea? I think it's a hackathon. So you want at least semi working code would be the way to go about it. Obviously if it's a great idea and you have some broken tests, obviously I'm fine with that. But you want to have sort of a feasible working of it. And then somebody also asked am I eligible for multiple prizes in this hackathon? I'd say if you do multiple projects, probably not the same exact one, but maybe you guys have rules against that well.
00:31:27.056 - 00:31:53.090, Speaker C: So hackers, they can integrate multiple sponsors, and then they're submitting one project. That's typically what happens. So they'll find a set of protocols that work well together. They'll have an Oracle provider, some DeFi integrations, a couple different things, and then they're able to submit to multiple sponsor prizes. Most people don't have time to work on multiple projects.
00:31:53.510 - 00:31:56.740, Speaker B: Yeah, well, I mean, these hackathons are so long now, it's crazy.
00:31:57.110 - 00:32:08.520, Speaker C: Yeah, it's definitely very different. We've been finding that three or four week hackathons give people enough time to add a little bit of depth and flesh out their ideas a little bit.
00:32:09.050 - 00:32:19.500, Speaker B: Definitely. So anyway yeah. Anything else, Trent? Or good to go.
00:32:21.630 - 00:32:45.390, Speaker C: Sam asked how to apply for the hackathon. Very simple. Just go to Ethonline.org. There's the application link there, as well as once you get accepted, you can have access to all the discord channels. Where's the best place for devs to find your docs? Or learn a little bit more about Teller.
00:32:45.550 - 00:33:06.220, Speaker B: Yeah, so just go to Teller. IO. You'll see links right on the front page to all of our GitHub, our documentation. We'll be on the ETH online discord as well. We're also free on our Discord or Telegram, depending on what you guys want to use. So, yeah, definitely just reach out. We're excited to see what you guys build on us.
00:33:09.310 - 00:33:11.130, Speaker A: Awesome. Thanks, Nick.
00:33:11.870 - 00:33:13.180, Speaker B: Yeah, thank you.
00:33:15.870 - 00:33:27.290, Speaker A: Cool. So, yeah, we can wrap it here. Reminder to apply hack on Teller. Have a great day. See you all soon.
00:33:27.440 - 00:33:28.170, Speaker B: Yeah, there.
00:33:28.240 - 00:33:29.950, Speaker C: Bye, buddy. Bye.
