00:00:12.840 - 00:00:30.348, Speaker A: Okay, we are live. Thank you everyone for joining us. I'm going to introduce you here to Kevin from Scaffold ETH. Sorry, he'll be taking over now. If you have any questions, you can leave them in the chat. He will be answering them at the end of the workshop and we can go ahead. Awesome.
00:00:30.348 - 00:00:53.848, Speaker A: Thanks for the introduction. It's great to be here. Guys. Guys, thanks for joining. Coming to hear this talk today, the goal is to teach you guys about Scaffold ETH. When I first came to the Ethereum space, scaffold ETH was a god save for me because it really helped me get up and running quickly. So I'm just going to run through some slides here and then I'm going to do kind of like a real time demo.
00:00:53.848 - 00:01:12.672, Speaker A: We're going to tinker through and do some real hacking, basically. Yeah. First of all, welcome everybody. Awesome that you guys are here. Awesome to be part of a hackathon. I was just at ETH Amsterdam and the energy is just great. So I hope everyone's enjoying it so far again today.
00:01:12.672 - 00:01:38.084, Speaker A: You know, the goal is to teach you guys about Scaffold ETH. Scaffold ETH is an awesome open source project originally created by Austin Griffith. There's tons of content that is actually built into the repository. There's a master branch, obviously, that you can spin up, and we're going to be doing that a little bit later. That gets you up and running with a full stack, basically for Ethereum to get developing. It's got hard hat react. It's got a lot of hooks in there and components installed.
00:01:38.084 - 00:02:19.524, Speaker A: It's also got Ethers JS it uses for interacting with the wallets and stuff like that. It's also got built in integration for MetaMask, and it's also got the ability to do like, wallet connect too, so you can connect other wallets that you might have. And it's also got some built in burner wallets too. So we're going to be showing kind of what that looks like. And there's just tons of starting points like examples where you can start out with like, there's an NFT example, there's an NFT marketplace kind of example. And so you can easily just kind of check out the repository, switch the branch, and then follow that README for that branch to get kind of a working scenario up. And we're also going to do that at the end.
00:02:19.524 - 00:03:06.790, Speaker A: We're going to switch to another repo and show you how easy it is to kind of start up a different branch. And also once you get up and running, we're going to be able to do some tinkering. We're going to show you a little bit about how you can interact with the smart contracts and start deploying it and kind of just do examples. You can pull examples from solidity by example and just literally just paste them into your contract. And the UI will actually change and manipulate as you go along, which really makes it easier because one of the struggles with setting up an Ethereum marketplace is really the amount of time that it takes to spin up everything. So everything is already kind of set up and it uses Yarn Package Manager. So all you got to do is run some Yarn commands which we're going to do and you're up and running.
00:03:06.790 - 00:03:51.360, Speaker A: So basically what you need is you need Node JS installed, you need Yarn installed. Make sure you install the newer version of Yarn. There's like an older version of Yarn that comes with some versions of Linux. Make sure you're using the new version of Yarn Package Manager and then obviously you're going to need Git to check out the repository unless you download it from GitHub directly. And the node when you set it up is going to spin up a hard hat node with all the wallets already built into there as well so it can start deploying your smart contract. It's also going to come with a full rolling React app, as I mentioned with all the hooks and all the components already ready to go and a full blown UI with the burner wallets. So it just gets you up and running fast.
00:03:51.360 - 00:04:27.788, Speaker A: And then obviously everything we're going to be doing today is going to be based around solidity smart contracts. We're not really going to dabble too much into the React stuff. I am going to show you the file structure and kind of how everything's laid out. But really the goal is today to show you how to kind of start tinkering with your smart contracts and not have to worry too much about React. Because React should be something that kind of comes later as you start to build the UX and the design of your app. Right, so I want to give you a quick run through kind of what this looks like from a developer standpoint. So if you're a new developer or maybe you're existing Ethereum developer, you might be used to kind of doing everything by hand and getting your environment set up.
00:04:27.788 - 00:05:26.860, Speaker A: Or maybe you have like a virtual machine that you use. The cool thing about, again Scaffold ETH is everything's kind of handled by Yarn so you can literally just check out the instance and you can do a Yarn install and the Yarn file basically is going to have all the prerequisites that you need and understand what needs to be installed. So it's going to do all that for you. You don't have to worry about version Zine and all that good stuff. Then you just really run a Yarn chain which is going to spin up a hard hat node and it's going to spin up like a blockchain for you to actually start tinkering with. And then you do a Yarn start to build the React app and start the React app and that's going to be running on localhost Port 3000 and then you can do a Yarn deploy, which executes a deploy JS script inside the Scripts folder. This is going to actually deploy your smart contract to that blockchain and then as you start interacting obviously with your smart contract, the blocks are going to be added to your hard hat node.
00:05:26.860 - 00:06:20.508, Speaker A: So it's pretty straightforward. We're going to actually going to go through this and do it. The one thing I will say that's very important is after you get set up and you really want to master Scaffold solidity by example, is a great kind of thing for you to go through each example and paste that in and kind of start tinkering and see what it looks like on the UI as you make these changes. But Speedrun Ethereum.com is a great resource and it's kind of like a validation check for the work that you are doing in Ethereum to see kind of like where you're at. And that's really useful because it's going to do things like set up an NFT example or set up a Dex or set up a marketplace, and it's going to really kind of like, test your Knowledge and kind of help you Kind of. By the time you're done with running through solidity, by example and running through speedrun Ethereum, you're going to be ready to go as a full blown Ethereum developer.
00:06:20.508 - 00:07:09.004, Speaker A: And so all this stuff was kind of created with this whole kind of constant learning in mind. So speedrun ethereum speedrun ethereum that's the place to go. If you guys get stuck and you guys need help, the best route is actually to go to the Telegram chat that we have for Scaffold. You can literally just Google search it, just search Scaffold Telegram developer chat and it should be the first thing comes up on Google. But I will paste the link here in the chat as well. And then there's a bunch of good docs so you can literally just go to Docs, scaffoldeth IO and all the kind of walkthroughs of kind of what I'm going to be doing today are on. There really technicalities like if you're trying to do something very interesting that maybe you're not kind of understanding how the file structure works or something after we're done today, that's a good place for you to kind of reference.
00:07:09.004 - 00:07:31.624, Speaker A: Okay, so that being said, done with the slides. Now we are going to do the fun part. So again, I mentioned Solidity by Example, it's a great resource for if you're trying to learn Solidity, you can literally just go through here and kind of cut and paste or copy and paste into your smart contract. Speedrun Ethereum. This is kind of what it looks like as well. I just want to go through that. It's got challenges basically here.
00:07:31.624 - 00:08:18.760, Speaker A: So there's a simple NFT example and you connect your wallet here and you go through these kind of like it's kind of like a game, right? You go through and do these quests and as you do, you get kind of validation and it kind of shows like, hey, this is my wallet and I'm kind of a vetted Ethereum developer by going through Speedrun Ethereum. And I do want to show you real quick about the branches. So when you do go to Scaffoldeth and you come here, obviously the master branch is kind of going to get you set up with a really basic hello world. And we're going to do that here in a second. But if there's something you're looking for like, I don't know, you want to do NFTs, right? You can literally search and see. There's already some people that have kind of come in here, developers that have built builds for NFTs. So there's like the simple NFT, or you may have heard of Lugies, which is amazing.
00:08:18.760 - 00:08:58.468, Speaker A: You can actually come in here and do the Lugies SVG NFT, which is like an on chain generated graphic of a Lugie that Austin created. So there's all sorts of cool stuff that you can do. And if you already have an idea in mind, you might want to search through there and see if there's something that you're already ready to kind of build off of rather than starting from scratch. So that's very important. So that being said, we're going to get started here. We're going to show kind of what that looks like if you guys are familiar with. So I'm using tmux, which is basically like a multiplexer for a terminal, just so that we can actually see kind of multiple, kind of like Windows at once.
00:08:58.468 - 00:09:14.808, Speaker A: You could just open up multiple terminals if you wanted to, but I just like using this. So I've gone ahead and I've actually checked out Scaffold. We can see here that I already have it here. And so we've checked out the code. I haven't done the ARN install yet. So let's go ahead and spin that up. Do that.
00:09:14.808 - 00:09:44.256, Speaker A: And what this is going to do, like I said before, is it's going to basically read the package JSON file. It's going to determine all the requirements for that repository that you're in. So in this case, I'm just in the master repository and we're just going to build out that and it's going to install the dependencies. It shouldn't take too long, usually takes a little bit over a minute. That being said, so we can go back to the Scaffold branch. We're on the master branch. So you'll see here, here's the steps right here.
00:09:44.256 - 00:10:15.384, Speaker A: So if you guys want the steps and you guys aren't following along with me here, this is where you clone it. Then you do a yarn install and then you do a yarn chain. So let's see if this is done. Should just take a second. It I was going to do this at a time, but I wanted to show you guys kind of what it looks like because there are some errors that pop up here and those can actually be ignored. So you don't have to worry about that. I did go ahead and do it for one of the other repositories.
00:10:15.384 - 00:10:44.034, Speaker A: So we won't have to wait for this on the next session. All right, almost done. Here we go. Okay. Lied to me. Okay, well, it's doing that. Let's take a look at some of the more details.
00:10:44.034 - 00:11:05.206, Speaker A: So again, I'm going to check out the repository. I've already gone into the directory. I'm going to do Yarn install. What I'm going to do then is I'm going to run a yarn chain which is actually going to spin up the blockchain for me. And then I'm going to open up another terminal, which I already have on the side there. And I'm going to do yarn start. Yarn Start is going to spin up the react node.
00:11:05.206 - 00:11:36.006, Speaker A: And then there's Yarn deploy. So you can do yarn deploy like anytime that you make a change. So if you're one of those people that wants to control when the deploy happens, you can do your yarn deploy. There's also another command that's called Yarn Watch. Yarn Watch is really nice because it will just constantly watch for most of the configuration files that you're editing. And then as those configuration files change, it's just going to automatically deploy. So while that's doing that, let me go into there it goes.
00:11:36.006 - 00:12:10.462, Speaker A: Okay, so it's finished. Okay, so I do want to show you guys real quickly what the repository looks like. So let's go up and let's load up Adam. So I'm using Adam for my text editor, which is just going to give me kind of like a UI for the configuration files. And this is what you get. So the most important thing is that there's a package folder here and there's really the two main places that you're probably going to be working in is going to be hard hat and you're going to be working in the react app. Okay, so inside of the hard hat folder, there's a contracts folder and then inside there is your contract.
00:12:10.462 - 00:12:38.762, Speaker A: So this is essentially your starting contract. So what we got here is a very basic contract. It has an event that gets sent. It's got a string so that we can store some data on the blockchain. In this case, it's just a build unstoppable app string. And then you have your constructor, which is anything that you want to be deployed at the time the smart contract is deployed. And then we have a basic function which allows us to update that variable in real time.
00:12:38.762 - 00:13:15.830, Speaker A: So we can see here that we can set a new purpose and we can set that purpose to log it to the log as well, the console log. And then we can also set that purpose using the or send an event that shows that that is emitted as well. So out of the box. So now we got the project installed so it's pretty much ready to go. What we need to do now is spin up the blockchain. So we're going to do a yarn chain and what this is going to do again is going to spin up hard hat it's going of it's got some pre kind of set up wallets and stuff like that to handle the deployer and I'm going to get into that a little bit later. And then I'm going to come over to this window and I'm going to do a yarn start.
00:13:15.830 - 00:13:38.762, Speaker A: So this is going to spin up the React app and it's going to spin it up on Localhost 3000. So it should spin that up in just a second. This is actually not the window that I want to use though. It's okay though, we'll use it on this one. So we'll to the app. It might take a little while for that app to start as well. So what I'm going to do is while that's doing that, I'm going to do the yarn deploy.
00:13:38.762 - 00:14:18.922, Speaker A: So again you can do yarn deploy at any time that you want to deploy your contract. I personally just like to do yarn watch because it's going to constantly check my config files for me and it's going to automatically detect as you can see here, that it saw that the contract needed to be deployed and it's going to compile and deploy it for me. So we're pretty much good now. So at this point let's see if we can come over here and spin up the app. It looks to me like it's still starting so we might have to give it just 1 second. So you can see here on the top it says starting the development server. It does take just a second for React to start.
00:14:18.922 - 00:14:53.202, Speaker A: I don't know why that is that it takes so long but React is a little bit slow to get going. But hopefully once it's going then we'll be good. Okay, so let me go back to the sorry, we're jumping around a little bit but that's kind of how it is when you're an Ethereum developer. Okay, so we have the contract, you know where that is? That's here in this contract folder, right? But then you have the React app folder. So that's where your React app is basically living. And then inside there is your source code. And then you can see here that we have the app JSX file which is going to have basically all the ETH hooks installed.
00:14:53.202 - 00:15:27.694, Speaker A: It's going to have ETH hooks is like a library that was created by Scaffold ETH that has all these kind of cool things like check balance or see the gas price or different things that they've built into ETH hook. So it's already got that installed for you. It's got basically the setup for your Alchemy key. There's like infuria key and all your networks are already as well in here too. Sorry, this is prompting for my MetaMask. We're not going to use that because we'll get to MetaMask in a little bit. Okay, so now the app has started.
00:15:27.694 - 00:15:59.830, Speaker A: So we got the app up and running. You can see here that it's listening on Localhost 3000. And when you first get into the app, you'll notice that you have a burner wallet, which is great because if you don't have MetaMask installed on a browser or something like that, or maybe you don't want to use MetaMask because you're sick of nonstairs or something like that, you don't have to mess with any of that. You pretty much just have a wallet that's ready to go. The only thing is it's empty. So cool thing is, Scaffold ETH has a built in faucet, so we can easily just grab funds from the faucet. And instantly on this kind of wallet that we have here, we have some credits.
00:15:59.830 - 00:16:35.430, Speaker A: We got like $30 in Ether it. If we want to get more, we can grab the address here and then we can go down here to the faucet and we can even send some more. So let's say we want to send $100. So then now we should have 127 Nine, and that's going to just kind of give us some extra money so we can work with the app. So again, when you first come in, this app home directory is where you might want to build your front end. So if you want to write your own custom react code, this is kind of where it's going to be. And these are just some examples of how you might use things like what your balance is.
00:16:35.430 - 00:17:07.950, Speaker A: Or maybe it's just kind of giving you like an idea of where you need to go to edit this. So it's in the home JSX file. So the app JSX file is the Scaffold ETH application, right. But inside of the Views folder, which is here in the Views folder, you have your home JSX. And this is where you can start building your app. You can see all that code that we're looking at right here on this home tab. So it allows you to build your app within Scaffold ETH so that you still have all the functionality of Scaffold ETH, but you're able to build your app in that kind of like little tab.
00:17:07.950 - 00:17:40.650, Speaker A: Then as you start building your app so you can not worry about this right now, and you can just kind of tinker with how react is working. So when you go to this debug contract section, we can see here that we have our contract that's been deployed. We can get its address, and we can see that it doesn't have any funds, and we can see that it has a purpose that we showed you earlier in the yourcontract sol. And we can see that I can change it. So I can come in here and say, all right, Foo, and I can send that. And I got some gas. So it's asking me if I want to use MetaMask.
00:17:40.650 - 00:17:56.906, Speaker A: I don't want to use MetaMask right now. So I guess last time I did the demo, I was messing around with MetaMask. So there's a little log out button here so we can just log out of that. And then I just realized that we weren't using the Burner wallet. So now we're using the Burner wallet. Sorry about that. But the Burner Wallet, again, is empty.
00:17:56.906 - 00:18:15.430, Speaker A: So we need to get some more funds from that. So let's get some funds. And now let's try to update the contract here. Send. Boom. And then you can see when I use the function to update the contract, the variable, the state variable was updated there pretty easily. And then I paid a little bit of gas to do that.
00:18:15.430 - 00:18:52.750, Speaker A: Okay, so if you want to connect MetaMask, you can you could just click the Connect button and you can connect to MetaMask or any of these other methods. You can use a coinbase wallet if you want to do it on production, or you can use Wallet Connect if you use like, Rainbow Wallet or something like that. So it's got that built in, which is great. But right now we're just going to be using Burner Wallets. Okay? So let's go back to where we were. So let's go back to our contract and let's start kind of like tinkering around with the contract. So the first thing I want to do is the first thing that you might want to do is set up some kind of, like, access control for your contract.
00:18:52.750 - 00:19:18.966, Speaker A: So let's say that you want to do right above the string. You want to create an address and you want to make it public. So it's an address is the type of variable we're using. We're going to make it public and we're going to call it Owner. And we're going to grab the address for this particular instance that we're using. So this Burner Wallet, right, so we can grab that. And this is the address for the Burner wallet.
00:19:18.966 - 00:19:53.378, Speaker A: I could also use my MetaMask if I wanted to, but for right now, I just want to show you that this Burner wallet that's built into this instance is good to go. So we can define that this is the owner and this is a new variable and this is the address for that owner. Then we can come down to this set purpose function and we can start to do kind of a hacky access control. I would say this is like the old school way to do it, which I'm going to show you the old school I'm going to show you the new school way. We're going to say require message sender equal to owner. And if not, let's say you are not the owner. Sorry, not the owner.
00:19:53.378 - 00:20:13.130, Speaker A: All right. Boom. So now if I make this change, I hit save. We'll notice here that it automatically detected that change for me and it's automatically going to deploy it. And we can see I did something wrong. Okay, so I did a spelling error. So you're going to get like some kind of output in your console here that shows okay, well, what did I do? I spelled something wrong.
00:20:13.130 - 00:20:44.966, Speaker A: So let's see what I did. I didn't put message sender, I put message send. So then we can save that and go back and we can see now it compiling and deploying. So you see how we're tinkering and we can see here on the top left that it was committed to the blockchain and we got our call, which allowed us to see the contents of that. And we also published the sub graph, which that's a whole nother thing, but we're not going to get into that. But you get the idea. So now we can see here that the contract has automatically been deployed and it's automatically updated my UI here.
00:20:44.966 - 00:21:15.470, Speaker A: So now I have a new variable called owner and it matches my wallet. So now I am the owner of this contract. So if I want to come in here and change this to, yo, what's up, exclamation mark? I can do that because I'm the owner. But if I open up another browser and I go to this, let's say I'm a different user. Now I have a different burner wallet. So here I'm using a different browser. It could be incognito mode, but I'm just in another profile on my Chrome, so I have a different wallet address.
00:21:15.470 - 00:21:54.160, Speaker A: So now if I want to come to debug contracts and say, hey, how are you? Or something like that, I don't know, hit send, I'm going to get an error and it's going to show me here in the console that I'm not the owner. So it's a cool kind of built in way to see the exceptions that we're getting from Solidity in the UI. So it's really awesome for troubleshooting and stuff like that. So that's cool. We wouldn't really want to probably we might want to restrict just the owner to upgrade the purpose. Maybe if it was like kind of a centralized app. But let's do something a little bit more interesting and let's actually go back to the source code here.
00:21:54.160 - 00:22:42.814, Speaker A: Oh, sorry, where is it at? Here we go. Okay, so instead of doing there's a cool thing you can do with Solidity, it's called inheritance. So instead of us actually defining an odor like owner, a hard coded owner, what we can do instead is get rid of this line and get rid of those lines, kind of revert it back to the way it was. And we can import and use Open Zeppelin contracts, so we can import our open Zeppelin contracts. So if you're not familiar with Open Zeppelin, there's a bunch of pre built contracts that are just ready to go to do different things and one of those is Access Control or Ownable that allows you to set an owner using that built in functionality. So you don't need to write any of the code. The only thing you need to do is inherit that.
00:22:42.814 - 00:23:15.480, Speaker A: So we can say it's Ownable, and then instead of over here, we can say, okay, well, only the owner can actually change this function or access this function. So we can save that now. And if we go back watch Terminal, we can see that the app is deploying or complying and deploying that one. There's no errors in my text, so we're good to go. And so now we can see let's just refresh it just to make sure that we got the newest version. Okay, we're good. But there's a problem.
00:23:15.480 - 00:23:50.638, Speaker A: I don't want this address to be the owner. What address is that? It gets a little confusing when you deploy an app with the Ownable because you're not using your browser to deploy, you're using hard hat. So this particular address that we're seeing here is actually the very first wallet that is built into hard hat. So what we want to do is if we want to take control of this contract, we need to transfer the ownership of it. So if I was to come in here, I wanted to change. You can see the function here. It's transfer ownership on the bottom.
00:23:50.638 - 00:24:24.566, Speaker A: But I'm not going to be able to transfer it from the UI because I'm still not the owner. So if I was to try to go here and say, Yo, hey. And I was trying to send that, it's going to tell me, hey, Ownable. The caller is not the owner. So it's blocking me because I'm using open zeppelin ownable. So what we need to do now is we need to go into a special part of Scaffold, and the particular area that we need to go is in the deploy folder. Okay? You might say, oh, I'm going to go to the Scripts folder and then go to this deploy.
00:24:24.566 - 00:24:55.266, Speaker A: And you'll see this stop? This is the old Deprecated deploy file. This threw me for a loop one day I was like trying to update this and then I realized it was the wrong one. So they put this giant stop here. You need to use this deploy folder here. What this is doing is this is the deployment contract. This is exactly what's happening here in the corner when you're actually deploying your app. So we want to come in here and we want to do what's called change, basically like transfer ownership.
00:24:55.266 - 00:25:16.654, Speaker A: Okay? So in order to do that, we can do that by just going in here. Let me grab this code because it's just easier to paste it in and we can put it right here. Let me just make sure. So that's not the right address. So let's go grab the address. So we want to actually transfer to this one. So let's put that in here.
00:25:16.654 - 00:26:00.294, Speaker A: So what this does is it's just an await function and my proper tabbing because that's going to bother me. So what it's going to do is after the deployment of your contract is deployed, it's going to get an instance of your contract as your contract. And then what we're going to just say is, okay, we'll wait and also do a transfer ownership. So here's the contract, variable transfer ownership. And then this is the address that we want to transfer the ownership of the contract to. So once we save this and then we go back, we'll notice that it's not automatically compiling and deploying. Sometimes when you edit certain things in Scaffold and it's not like the contracts or the react file you'll need to restart the deployment.
00:26:00.294 - 00:26:27.922, Speaker A: So I'm going to do that one more time. I'm just going to do a yarn watch. And what should happen now is it's going to redeploy and force that to change and then we can come over here and we'll also need to refresh Scaffold e. And then boom. There we go. So now we've deployed it with hard hat, but then we have our burner wallet that has been transferred as the owner. Now if you're kind of tinkering, you might want to have a more permanent private key that you're using.
00:26:27.922 - 00:27:10.526, Speaker A: So you might use MetaMask for that because you don't want to have to constantly be like updating the deploy script and it can get kind of annoying. So hopefully that makes sense. So after we do that now, we should be able to set the purpose to yo, yo, yo and hit send and boom, we were able to update it because we transferred ownership of that. So again, this is still a kind of like a centralized application and it's not very cool. It's just kind of like, all right, we're doing this. What we might want to do is actually say like, all right, if someone wants to use it, anybody can use my contract. But maybe you need to pay a little e to be able to update that variable.
00:27:10.526 - 00:27:45.982, Speaker A: So what we can do is go back to our sorry, where is it at? We'll go back to your contract here and let's get rid of the only owner. We don't care that only the owner is there. We can still use ownable and we can still transfer the ownership and we can still have that functionality, but let's get rid of that. But let's make this contract payable. Sorry, this function payable. So this function, anyone can set it, but let's do a requirement. Let's do a special requirement that says, all right, if you want to change the subject, that's cool, anyone can do it.
00:27:45.982 - 00:28:21.270, Speaker A: But you need to send in message value. Which message value is the amount that's in the transaction on top of the gas that you're paying to actually run that transaction. So in this case, we're going to say you have to have a value that's attached to this transaction that is 0.1 Ether. And if not, we're going to send an error that says need more money or something like that. If you want to be like good, you would say 0.1 to be exact or something like that.
00:28:21.270 - 00:28:44.382, Speaker A: You can do whatever you want here. It doesn't really matter. And we can save that. And then let's go back to here and we'll see that we are compiling. What did I do? I did something wrong? My fat fingers. What did I do? Oh, I didn't end it. So let's save that.
00:28:44.382 - 00:28:58.498, Speaker A: Now we should be good, see if it's deploying. Compiling and deploying. Cool. So it deployed. All right, so now anybody can come in here. So we can go back. We can go to this one, but that's not pretty cool.
00:28:58.498 - 00:29:21.526, Speaker A: And oh, we will notice that the UI is updated again. So not only does it have the string that we want to update for the new purpose, but it also needs some value, right? So let's go over that other account we had here. And we can see here that we're in another wallet. This is the wallet address. We have the contract address. It doesn't have any funds in it right now. And then we can see who the owner is.
00:29:21.526 - 00:29:53.702, Speaker A: The owner is this tab over here, but I still want to be able to change it. Well, I don't have any money, so let's get some money from the faucet. So now I should have like $30 or something like that, 27 to be exact. Okay, so now I can change it to whatever I want. So, like, hey, this is cool, right? Exclamation mark. And I have to send this money. So if I don't send in enough, let's say I send in now there's this small quirk, and it's not really a quirk, but it's more just to teach the developer how Ethereum works.
00:29:53.702 - 00:30:29.058, Speaker A: And if you don't know already, most of the base transaction that you do is actually in Way. So ten to the 18th. So if you want to just to make it easier for you, you can put the amount in Ether here and you can click this little green button and that will convert that to Way for you. Obviously, you wouldn't want to make your user put in Way, so you would put that into your application as you build it, right? But that's okay. This is just a friendly way for you to tinker and do that. So let's click send and then boom. It says need more money, to be exact.
00:30:29.058 - 00:30:48.694, Speaker A: So now let's go back there. I think we can just add a zero and then try it again. And boom. It was a success. Okay, so now we can see what's interesting is now we can see that we have some value in the contract. So the contract has value. I've paid some gas to change the purpose to, hey, this is cool.
00:30:48.694 - 00:31:30.600, Speaker A: And I've also paid some ether into the contract. And so the owner of this contract now has some money, right? So what do we need to be able to do that? Well, we need a withdraw function to be able to get that money out. Now, we don't want everyone to be able to withdraw money from the contract. This is where we can go back to using the ownable pattern, right? We can make a public withdraw function, and we can make it only the owner can call that function. And then we can do kind of a check. So we'll do like a bool to check, and we'll call it success. Sorry, it's actually bool success, I think.
00:31:30.600 - 00:32:18.130, Speaker A: And then we can do make sure that the message sender call. So this is to check to make sure basically that they're not trying to pull more out of the contract than it's available in the contract because then you would so basically we're going to grab address this, which is this contract's address and we're going to grab the balance for that. So this is basically a check to make sure that the person withdrawing the money is not trying to withdraw anything more than what the balance is on this. So I think that should be good. Let's see if I did this correct. So, again, we have our set purpose, which anyone can do. They have to send money in and then only the owner can withdraw that money.
00:32:18.130 - 00:32:36.362, Speaker A: And I think we should be good with that. Let's see if this actually works. Let's see if it's deploying. Let's make sure I didn't do what did I do? Oh, I said this balancer. See, I'm like I don't know why I'm just not typing good today. Okay, let's try that. But you can see how easy it is to start tinkering and add some stuff.
00:32:36.362 - 00:32:45.322, Speaker A: And it's just deploying for you and you don't have to worry about it. There it goes. It deployed. It's ready to go. So, compiled, deployed. We're good to go. Oh, we got another error.
00:32:45.322 - 00:33:06.642, Speaker A: What did I do? I probably typed something wrong. Message sender call Value Address I'm not sure exactly what I did. I did something wrong here. Okay, but you get the idea. So you can create a function. It did. Let me do it.
00:33:06.642 - 00:33:24.986, Speaker A: Let me try. So now I'm in the owner, but there's no money in there because it kind of resets the contract. So let me go back to that other tab and let me do that again, what I did earlier. We have some money in there. Let's refresh it. Get the new instance of the contract. We have the contract here.
00:33:24.986 - 00:33:33.994, Speaker A: It shouldn't have any money in there. See if it works. Debug contracts. There's no money. We have that. Let's change the function to I don't know. Yo.
00:33:33.994 - 00:34:00.482, Speaker A: Hey, how are you? Question mark and one ether, two way send boom. So we were able to update it. Now if I want to come here and I want to withdraw, let's see if it lets me not the owner. So it blocked me because I'm not the owner, because I'm using ownable. Now I can come back over here to the contract as the owner because I am the owner. Now I should be able to withdraw. And there we go.
00:34:00.482 - 00:34:34.240, Speaker A: I was able to pull the money out of the contract and it went back into my wallet. So we're able to use the contract as a bank, kind of like a vending machine and we're able to kind of like do access control on what parts of the contract or what functions of the contract can be manipulated. So that's a pretty cool run through. That gives you a really good starting point to start tinkering. I hope that was useful. But I want to show you just one idea of how you might check out a new branch. So first let me close down this other one because just so there's no issues with like memory or something like that.
00:34:34.240 - 00:35:09.414, Speaker A: Okay, so I just been down the old version and then I have another kind of repository here where I've already checked out Scaffold ETH and I've already checked out if I do git branch here, we can see that I'm in the dice game. So there's a dice game and I think I already did yarn install. We can just check real quick. Hopefully I did because I don't want to make you guys wait again for that because that was like brutal and I don't have to wait. Okay, cool. So it's all set up. So we can do the same thing.
00:35:09.414 - 00:35:52.342, Speaker A: We can say yarn chain home. Then we come over here, we can do yarn start, then we come over here and now we're going to get a new instance of the app and then we're going to come over here and we're going to do a yarn watch. So it's the same thing, same kind of setup, but we're just using a different base image and let's go ahead and we got to wait for yarn to react to start. That is the one thing that you do have to wait for no matter what. So real quick, I just want to show you guys what we're doing. We're grabbing the dice game. So let's dice game right here.
00:35:52.342 - 00:36:13.950, Speaker A: So here's the dice game. Looks like it was created and it was updated 21 days ago. Cool. So we can see the steps that I just did. I basically cloned it. I went into there, I checked out the dice game and then I did a yarn install, yarn chain, yarn start, yarn deploy, ready to go. And then once we have the app up and running, oh, let's look at the source code real quick.
00:36:13.950 - 00:36:32.600, Speaker A: So let's go to packages. Actually, let's not do it in there. Let's do it through the console. So let's do Adam. Adam. So I'm in the right directory. Let's load that up.
00:36:32.600 - 00:37:05.022, Speaker A: Okay, so here's the dice game contract. As you can see, it's a little more advanced kind of contract, but it does some hashing. It's checking a previous block, and it's got this kind of function where it's sending out some emits of the role and what was rolled. It's basically a dice game, exactly what it is. So you can look at this and be like, oh, cool, okay, I see how he did that. And then we can come in here and then we can look at the app. So let's refresh one more time.
00:37:05.022 - 00:37:31.638, Speaker A: Let's see if the app started yet. Okay, it should be up and running now. So you'll notice with this one, we have a UI that's already been built as well. And so we got to get some funds, and we actually need to get some more funds because this game is expensive to play. It's like Vegas. So let's get like, I don't know, let's get like $10,000. So we just have like we don't have to worry about it and I can roll the dice and boom, there it's going to roll the dice and it's going to tell me that I didn't win.
00:37:31.638 - 00:37:54.686, Speaker A: So now the contract should have some money. It's got $27.24. So every time I roll the dice, it's basically telling me that basically I lost $27.24. I rolled an eleven and the prize is 0.1 e. So I could literally just sit here and different people could play. And as they're playing, we're adding more value to the contract and then whoever win is going to get paid out there.
00:37:54.686 - 00:38:22.390, Speaker A: So I can literally click this. I did this yesterday and it took me like, I don't know, like, ten minutes to win the prize. So I'm not going to force you guys to watch me do that, but you get the idea. It's basically using the contract as a bank. We're rolling the dice, putting some money into the contract, and then if I roll a zero, I would win that money. Right. So it's kind of a cool way for you to see kind of what a game might look like for the contract, acting as a bank.
00:38:22.390 - 00:38:42.762, Speaker A: That was a quick run through. I hope that was useful to you guys. I'm definitely willing to answer questions. I'm stoked to see what you guys build with Scaffold. I'll be in the Telegram channel to help out as well. Austin Griffith, if you guys don't know him, this guy's awesome. He's on there often and there's a whole team of developers.
00:38:42.762 - 00:39:01.638, Speaker A: The Build Guild is there ready to help. So yeah, great. Thank you for that. Is there any questions in the chat there you want to answer? If not, you guys can find the Telegram on Scaffold e GitHub, I believe. Yeah. Okay. I see questions here.
00:39:01.638 - 00:39:23.254, Speaker A: Yeah. So is it working with next JS? I think there is a Next JS build. So if I'm not I for a while I was messing around with Next JS as well. I believe there is. So, yeah, there's Scaffold next JS here. There's also a Scaffold Next JS base example as well, or sorry, NFT example. So, yeah, so if you search here, search Next JS.
00:39:23.254 - 00:39:52.658, Speaker A: There's a special branch for that. So yes, that one we do have. Thank you for telling me on the I wasn't watching the chat while I was doing my demo, but thank you for all the telling me what my syntax errors were. The random value. That's a good question. So I didn't write this contract, but if we look at it, it looks to me like if I can kind of pick it apart and I've kind of looked at this before, but I'm trying to remember. So what they're doing is they're taking the previous block.
00:39:52.658 - 00:40:52.858, Speaker A: And I don't know if it's the best random way, because I think the best random way is to use like an oracle or something that is off chain, giving you like a random number. This is actually doing it based off the previous hash and it's using this Keck 256 function to do that, which is passing the previous hash, which is the previous block number minus one. And then it's grabbing the address and the nonce and hashing those together and then it's basically creating a role based off that hash. So I don't think this is actually the best way to do a random number, but I think for a hackathon it's good enough and it's a good example. And that's probably a deeper question for the community on how you do perfect randomness, but hopefully that answers your question on that. Can it be deployed on Know? I'm not sure if it can be deployed on Fleek. I think Fleek is just like an can either.
00:40:52.858 - 00:41:27.986, Speaker A: So if you want to deploy your app to IPFS, there's a command for that. You can do Yarn IPFS believe you can also use Surge. I don't think that we have Fleek integration yet, but definitely I can do some searching for that and get back to you, Leonard, on that one. Yeah. Gun Vance, you had a question? Yeah. So you mentioned one of the Burner accounts. So it's still part of one of those Ten Hard Hat accounts, right? That's a good question.
00:41:27.986 - 00:41:45.580, Speaker A: I think it is using accounts from Hardhat. Yeah, actually maybe it's not. Actually. It might be just be using accounts that are built somehow into the app. I'm not 100% sure. I don't have an answer for you on that one. I can find out as well.
00:41:45.580 - 00:42:19.954, Speaker A: If any questions that I didn't answer, you can email me, Kevin@kevinjuntscreates.com and I can follow up and get you an answer for that. There is not a discord channel, but the telegram is the way to go because there's about 2000 developers in that channel. It's like the place to go for scaffold chat. And it's, like, super active, literally. There's probably hundreds of posts a day, so it's very interesting. You can kind of see, like, at transparency.
00:42:19.954 - 00:42:38.374, Speaker A: You can also search through the Telegram channel if you guys have questions or problems. Great. Thank you, Kevin. Thank you, everyone, for joining us. We do have a coinbase workshop happening in 15 minutes as well as well as a team formation at 06:00 P.m. Eastern Time. So, yeah.
00:42:38.374 - 00:42:42.620, Speaker A: Thank you very much. We hope to see you soon and thank you, Kevin. I'll see you soon as well. Yeah?
