00:00:12.990 - 00:00:47.550, Speaker A: Everyone, welcome. My name is Ferrico Kunse Kilmer. I'm the co founder and CEO of Evmos, which is an EVM on Cosmos. Today I'm going to talk about what Evmos is and why we think it's the next here for EVM development. I'm going to start a little bit. What is Evmos and what's its architecture? Evmos is a Cosmos SDK based chain. The Cosmos SDK is the framework that Cosmos have for creating application specific blockchain.
00:00:47.550 - 00:02:09.142, Speaker A: In the case of Evmos, we have an EVM module, which is where the car functionality that allows us to run smart contract and allows us to have this EVM module talk to IBC, thus making smart contracts full interoperable with the rest of the IVC ecosystem and the interchange ecosystem. Just going to explain a little bit what the Cosmos SDK is and how it talks to consensus. We have here on the left side, we have Tendermain Core, which is the consensus engine that runs PBFT proof of stake consensus. So how the application communicates with the consensus engine is through an interface called Avci that stands for Application Blockchain Interface. So the application itself handles all the business logic, or in this case, like the EVM logic running supporting smart contracts. You can also see that we have Staking module web Three, which is in this case like the JSON RPC to fully support all the ethereum tooling. We also have like a governance module.
00:02:09.142 - 00:03:27.470, Speaker A: So this is all handled on the Cosmos SDK in all these modules that sit on top of this framework. And then the application itself sends the updates and communicates with the consensus so that the transactions can be verified where the gossip of the different messages and transaction occurs between the different validators and node operators. So, just to quickly summarize, evmos is a Cosmos based chain that has an EVM module that fully supports EVM and smart contract interoperability through IBC. One of the main components besides the EVM is the IVC component. We've now seen a lot of chains sparkling the ecosystem. And you can see here how the different connections between this IVC ecosystem can be handled. Right now, one of the most important application that sits on top of IVC is like the ICS 20, which stands for the fungible token transfers between different chains.
00:03:27.470 - 00:04:58.890, Speaker A: This is different than creating a bridge architecture because it's fully trustless and different chains can communicate with each other by running light clients of all the different chains and thus verifying the mercury proofs against each other. We think that Evmos is going to be the main point of entry for all the developer adoption in the EVM ecosystem. Because if we start thinking about interoperability, there are three major interoperability clusters right now in the blockchain ecosystem, the first of them being the EVM ecosystem with all the EVM chains that are in avalanche. We have Ethereum, of course, and then we have other EVM siloed chains in Polygon, gnosis chain, et cetera. Then we have on the other interoperability cluster, which is Cosmos with the IVC protocol, and then we have polkadot with cross chain message passing. And through Evmos we'll be finally able to connect all these different clusters of interoperability that are right now in the blockchain ecosystem that previously wouldn't be able to connect before they were like EVM bridges. But we are a fully interoperable EVM chain running on Cosmos.
00:04:58.890 - 00:07:25.774, Speaker A: So we can send transactions to other EVM chains, we can send transactions to other Cosmos chains. And through Moonbeam, we can also talk to other chains in the polkadot cluster of interoperability, evmos is not only going to be an EVM application specific blockchain, but it's also meant to be an EVM hub in the Cosmos ecosystem, we define hubs as the chains that other chains can derive security from. And thus we can create a healthy ecosystem of EVM chains where Evmo sits on top and other chains can also talk through IBC by creating like for example, cross chain delegate calls or cross chain contract calls. And at the EVM of Share security model, we allow all the other chains being EVM chains or non EVM chains to derive security directly from Evmos by sending Validator Set updates to the counterparty chains, in this case, like the consumer or child chains that will be able to share the same security that the MMOs core Validator Set provides. Now I'm going to explain a little bit about the token model and why we're different than any other EVM chain you've seen before. So back last year when there was this whole debate during the London hard fork about miners versus developers trying to push for or against the EIP 1559 adoption, there was this major push from the developers to try to increase the user experience because you are basically creating Ether as the base fee token model of the entire Ethereum ecosystem. Whereas previously, before, the user experience for the user was that when there was a sudden increase in the demand for block space, you have to wait for additional confirmations or you had to resend the same transaction with a higher gas price.
00:07:25.774 - 00:08:48.390, Speaker A: So by creating EIP 1559, you have a fee market where you can have a more predictable fee for your transactions and that's improving the user experience for all the users that are using Ethereum. But there was this huge misconception from the miners, like how they saw the developers and the power they had in the Ethereum ecosystem. But developers, core developers in this case, are only one part of the entire community on Ethereum. So you have all the holders, the miners, the developers, but you also have the application developers that deploy their DApps to Ethereum and you also have the DeFi users that are interacting with these applications. So before EIP 1559, there was the fees that went directly to the miners and you had like the block rewards that also went to the miners when EIP 1559 was introduced, the base fee was burned and the tip, which was a priority tip to include your transaction faster, was allocated to the miners. But of course the miners weren't happy when they were some portion of their fees were taken from them and burned. So they went against the developers.
00:08:48.390 - 00:10:03.570, Speaker A: So there was like this huge drama last year of adoption or not adopting ERP 1559. But as I said here, developers are only one part of the ethereum ecosystem. So that's why Evmos decided to create long term sustained growth of their protocol by aligning all the different actors in the ecosystem. Developers validators in this case because Evmos is proof of stake and then we have the decentralized application developers and we also have the stakers and decentralized application users. We are doing this by introducing the first DAP Store. So the DAP Store is a decentralized marketplace for DAP developers and users, where as opposed to EIP 50, 59, that is burning the base fee, we're splitting the base fee between the miners and the developers. That means if your application is successful on Evmos, you will share 50% of the transaction fees for all the transactions that interact with your protocol.
00:10:03.570 - 00:11:39.150, Speaker A: This is a major change because we're finally incentivizing all the developers to align in the long term with a protocol, a layer one. And we're turning the protocol itself to also be a layer one that is focused on consumers that are using the applications as opposed to focusing entirely on developer experience. So we are trying to incentivize the developers and all the users that are in the protocol. So the other side, now I explained the developer side of the Dapstore marketplace and we also have the usage incentives, how traditionally developer incentives and user incentives have been done through different DeFi programs or DeFi incentive program or liquidity programs where different foundations put like millions of dollars for users to provide liquidity on different applications. But the main limitation is these are not sustainable in the long run, are usually like selected applications which are sometimes not transparent in the decision process of which is actually the criteria for these applications to belong in this list of DeFi incentives. And the main problem as well is that it's not community owned. So the community cannot vote on which are the incentives for how long, or which are the applications that are going to be allocated these user incentives.
00:11:39.150 - 00:12:39.650, Speaker A: And the main problem as well that we've seen in the DeFi incentive programs is that the TVL doesn't really reflect the traction of the protocol or the users that you're getting. So TVL doesn't mean that you have more users. That's why instead of creating this unilateral DeFi incentive program, the Evmos token model is allocated a percentage of all the tokens that are going to be minted to allocate them, to user incentives. What does this mean that the community can vote for which are going to be the projects and the smart contracts that are going to be incentivizing. They're going to be incentivized. And what do I mean by incentivized? Here we are taking the same approach that you can find on all the DeFi apps. You can have LP pool incentives or LP incentives like you can find on Osmosis and other AMMS.
00:12:39.650 - 00:13:57.994, Speaker A: We're doing the same for smart contracts. So I'm going to explain now the workflow of how developers can register their contracts for their users to get all these usage incentives. So any developer or user or member of the community can register an incentive proposal via governance. So, for example, I'm going to allocate 5% of all the newly minted Evmos tokens from this 25% that I mentioned before to my contract that is going to be distributed every week for a duration of six months. Once the proposal prepasses and this proposal is approved, every transaction that targets this smart contract will start aggregating the gas spent in these gas pools. So as a user, you'll have like a share of the total amount of gas spent and then you're going to get pro rada the gas that you spend from these 5% of newly minted Evmos. So all of your users are going to get basically like it's a deferred gas rebate that can actually be larger potentially than the amount of gas that you spend.
00:13:57.994 - 00:15:29.050, Speaker A: So you're basically incentivizing your users to spend more transaction fees and interact with your contract. So this is really important, like creating an incentivize two side of the marketplace because developers can propose user incentives to promote the growth of their decentralized applications. But then these incentives as well drive new users and reward them with more Evmos tokens, where these users that receive all these rewards can spend these Evmos tokens on the decentralized applications and different projects and services that Evmos provides. And through the Dapster mechanism, the developers will get 50% of these transaction fees from all the contracts that are incentivized from all these contracts that they are already deploying. So you're getting 50% of the transaction fee for your project and you're also incentivizing your users to use your application. So this is creating a positive reinforcement cycle where new users attract, spend more transaction fees and then you have all the incentives that are promoting more growth. So it's like a positive reinforcement cycle to promote the long term alignment of the users and developers with the ecosystem.
00:15:29.050 - 00:16:33.360, Speaker A: So the Evmos token model is basically trying to align all these incentives with all the different users that we can find in our ecosystem and on the EVM ecosystem. So we have the holders that can stake or LP their tokens. The DeFi users will be provided rewards through these usage incentives. Decentralized application developers will have this Dapster mechanism where they can get, as I mentioned, 50% of the transaction fee. And this can actually go up if voted by governance because it's a fully configurable parameter, whereas core developers grants and community pool treasury that can allocate additional sources of funding to boost the adoption and boost the development of the core protocol. And then for the validators, they will still have 50% of the transaction fees for all the transactions that target the DVM. And they also have like the block rewards from the validation services that they provide.
00:16:33.360 - 00:17:53.110, Speaker A: Now I'm going to talk a little bit about liquid Staking. This is a topic that is very interesting and what's happening right now on Cosmos. So, liquid Staking for context Staking itself, initially in 2019 was introduced by Cosmos as like the first D five use cases, the first DFI use case in the entire Cosmos ecosystem because IVC was not live yet. So when we think about liquid Staking in the context of EVM, we can think about the Lidos architecture, whether you can have a Staking contract that they allocate the ETH directly to the ethereum deposit contract for the beacon chain. So the users, when they deposit their ethereum, they get like Staking ETH in exchange. But the main limitation in Cosmos as well is that the liquid Staking implementation is not a smart contract. So that's restricting all the smart contracts, which are also accounts from actually Staking.
00:17:53.110 - 00:18:58.570, Speaker A: So for evmo staking b two, we're doing something completely new. As I mentioned, b one was just a Cosmos delegated proof of Staking mechanism. But with liquid Staking, we want users on contract that can stake different Evmos tokens. So users can, through Kepler or MetaMask can delegate their tokens to the different validators. But we want also smart contracts to be able to create different DeFi applications that are targeting specifically Staking so that we can have a more secure validator set providing security for all these different chains in the entire interchain ecosystem. I'm going to elaborate a little bit more when I talk about the different use cases that Evmos is introducing that are super novel in this sense of Staking and Sloshing. But yeah, I'm going to continue now with how we're making ERC 20 tokens fully interoperable.
00:18:58.570 - 00:19:59.162, Speaker A: So when we go back into the architecture, we find that the Cosmos Sik has different modules. These modules can talk to each other. But the main restriction with this architecture right now is that in our case, the AVM is completely isolated from talking to these other modules. So what we introduced is like a post transaction execution logic that allows custom logic for how to execute different behavior after an ethereum transaction is processed. In our case, we're allowing ethereum ERC twenty S to be fully interoperable with the entire interchain ecosystem. How are we doing that? By creating some sort of token pair where you are mapping an ERC 20 smart contract with a Cosmos denomination. This is all voted through governance.
00:19:59.162 - 00:21:25.850, Speaker A: So if you have like 100 IVC Voucher atoms, you can vote through governance on what is the canonical representation of the atom in the EVM. So basically here what we are creating is through a governance proposal, the community votes on what's the canonical implementation of an ERC 20. And then after that's approved, you can start converting from Cosmos formatted coins to ERC 20 tokens in the EVM that allows all the ERC 20s that are going to come from all these interchange clusters from the polkadot ecosystem and the EVM to be fully interoperable with the rest of the interchange ecosystem via IVC. This is going to be possible by doing a manual access. So like the user needs to send a transaction to manually convert these tokens. But in the future we're planning on introducing additional mechanisms so that smart contract can also convert this token natively and send IVC tokens, sorry, ERC 20 tokens to the rest of the interchange ecosystem by just sending a transaction to a contract that talks to the IVC module. So I'm going to talk about now a little bit development on core development.
00:21:25.850 - 00:22:49.830, Speaker A: I'm going to dive a little bit deeper on what's the logic for EVM hooks. The EVM hooks is what I just explained, that allows ERC twenty S to be converted to IBC tokens. So we're introducing this so that the EVM module can basically extend the transaction processing logic. So instead of just targeting the EVM on the state machine and the transaction is processed in the EVM, we also want to execute custom logic so that the EVM can execute additional logic with the staking module with the IBC module with the governance module. And thus we can create novel use cases that weren't possible before because of the modularity of the SDK of the Cosmos SDK. So how this works at a high level, we are defining a log signature that is emitted by a smart contract. So you have an event that is emitted once a transaction is processed and then the post transaction logic, this EVM hook for the events are recognizing these logs according to what's the contract that you're targeting in particular and then it executes some custom logic so you can execute native calls on Cosmos.
00:22:49.830 - 00:24:31.714, Speaker A: So I have a small screenshot here of what's the interface for executing push like this EVM logic where you have the ethereum message and you also have the receives on the receive from the transaction. Once the transaction is successful on the EVM, you can execute some custom logic on the Cosmos side to execute these native calls here at the bottom. This is a simple ERC 20 logic that we're using for the ERC 20 module that is executing basically a transfer from converting or transferring a token to another chain or to another recipient on the Cosmos side. So you can actually emit here at the bottom, like a transfer event, and that event is picked up in the Cosmos native module. And then you can execute some custom behavior according to what's the contract that is actually executing this event signature. Now, I'm going to talk a little bit about some example projects that I'm particularly very excited about that can benefit from these EVM hooks and also all the smart contract interoperability that Evmos will provide in the future. So the main use case, and now I'm going back to liquid Staking, and how staking can be actually improved is creating sort of like a validator portfolio.
00:24:31.714 - 00:26:32.686, Speaker A: So right now the user goes to a Block Explorer, looks in the validator set and they usually check, okay, what's the voting power, what's the cumulative share? And then once you delegate your tokens to a validator, usually they tend to stake their tokens with the validators that are higher in the rank because they're providing them more rewards. You can actually with the EVM and creating staking contract you can actually create a DeFi ballad error portfolio where you're talking to a contract and the contract is actually staking those tokens to you and then actually spreading the tokens across the Validator Set, depending on your preferences, and then automatically distributing or redistributing all these rewards to you or to the same Validator Set or to a completely different one. So you can also create different validator indexes. Sort of like maybe you can create like oh, what are the validators that are carbon neutral for example, or that are located across the globe so that you can actually boost the decentralization of the validator set across the different world. Across the world in case there's an outreach. And finally, one really particular interesting use case that we're talking internally in the team that can also be possible with talking smart contracts with the core EVM is quitting Staking collateralized loans. So instead of providing collateral for a lending platform, you can actually when you interact with this lending platform, instead of providing the assets, you can tell them.
00:26:32.686 - 00:28:01.210, Speaker A: Okay, I'm going to give you an approval to slash my already delegated tokens so that in case you liquidate me, you slash my tokens instead of or like you collect my tokens that were already staked. So you can actually migrate those tokens that were already delegated, or you can for example, slash those tokens that are delegated. So this is creating not a serial collateral DeFi platform, but you are creating some sort of allowance for the DeFi application to actually create this additional functionality for lending platforms. And for the EVM you can create an EVM ecosystem index. So for example, you can create like a portfolio of different IBC coins. How do you manage them? So this can be possible, for example, like Somalier, Somalier, it's usually now only targeting the EVM as a coprocessor. But you can also create indexes and different portfolio management strategies to how better allocate your portfolio in the different interchange ecosystem by creating strategies on smart contracts that can eventually talk to every specific chain.
00:28:01.210 - 00:30:03.726, Speaker A: So that's one example of how you can create smart contracts that are targeting the entire IBC cosmos ecosystem. We're also currently talking with the Stargaze team on how to create, for example crosschain NFDS that are possible to be traded between the EVM ecosystem and also cosmo WASM environments which is the WASM framework that we have in Cosmos. And so we can have the same way we have like ERC 20s coming from these different interoperability clusters AVM and pocketed coming to Cosmos. We can also have NFTs from Solana for example or from avalanche or polygon that can come to the Cosmos ecosystem via EVM bridges and then be transferred to the rest of the Cosmos through this IVC cross chain NFT standard that we're trying to implement. And then you also have more complex use case like cross chain delegate calls where you don't need to deploy smart contract twice on different EVM chains but you can deploy it on Avmos. And then if you have another smart contract that is deployed on another EVM chain in the Cosmos ecosystem, you can send an IBC transaction in order to call the smart contract and then execute some behavior once a packet acknowledgement is processed on Evmos for example. So you can create interchange composability through this mechanism right now, so we can forget about the current strategy that a lot of DeFi dubs have at the moment that are deploying in the different EVM chains, which is going to be enabled right now with this crosschain delegate code that we are going to be providing through the entire interoperability.
00:30:03.726 - 00:31:58.710, Speaker A: And the final model is interchange composability. This is a bit different than the example I explained before which is crosschain delegate close like two EVM chains or for example an EVM with a cosmo awesome smart contract environment that can enable interoperability between the smart contracts here. Instead we're allowing non EVM chains or any chain in the Cosmos ecosystem to talk to a smart contract natively and get the logs or the events from the received directly on their application so that they can handle application specific logic that is targeting individual smart contract. So what this is enabling is that you don't need to necessarily build your application specific logic and you can scale faster by just deploying a smart contract on Evmos and having all these other chains talk to these smart contracts and then scaling through by only handling the specific events that are targeting the Evmos chains. And then finally I'm going to talk about all the different resources that we have and how you can connect to the Evmos testnet that is currently live and how you can learn more about Evmos and all the developer documentation that we have and you can learn more about the architecture. So the first thing is you can connect already to the evmos testnet. Here you can find some of the available nodes, public available endpoints that you can find, which is the cosmos gRPC cosmorest, which is handled through gRPC gateway.
00:31:58.710 - 00:33:07.206, Speaker A: And then you have like the term domin RPC, the ethereum JSON RPC so that you can connect, MetaMask and earn your ethereum tooling already. And we also support the Ethereum WebSocket through Blockdemon, which is kindly providing all this infrastructure for the public. We also have the Atmos chain gRPC gateway docs, so you can already query through this nice interface all the different rest endpoints that you can interact with Atmos testnet already. So this is actually targeting here you can see like the base URL is targeting the testnet. And then you can also learn more in our different resources and links that we are providing here. The first of them is our documentation, which you can find on Evmos dev. We have all the documentation of how to connect to the testnet, how to connect to Mainnet, which we are relaunching this Tuesday.
00:33:07.206 - 00:34:45.238, Speaker A: And you can also find documentation how to interact with these rest endpoints, or how to run a validator or a node, or how to set up a local net so that you can interact with your smart contract locally. If you want to learn more about the core development efforts that we're doing, you can go to GitHub and find us on the Tharsis repository on Evmos. We also have a JavaScript library that provides address conversion tools for how to convert PEC 32 to hex available addresses that Kepler is also using to support Ethereum compatible addresses. And you can also find like protobuff transaction declarations and definitions so that you can send transactions on Cosmos using Kepler. Or we also support, for example, all the transactions formatted using EIP 712, which is a Meta transaction format, and Ethereum that allows, for example, MetaMask to sign Cosmos transactions or sending transactions via IVC, so that as a user, you don't need to change your existing wallet to interact with the Cosmos ecosystem, or you don't need to necessarily export your private key. You can already do that natively using this library and connecting MetaMask through EIP 712. And then finally, if you want to know more about the EVM, we have the Ethermin library.
00:34:45.238 - 00:35:15.060, Speaker A: Ethermin was the pre evolution of Evmos, which is long standing library for how to develop an EVM module on Cosmos. Thank you very much. I'm not sure how much time I have left. I think this is yeah, cool. Any questions? Hey, how's it going?
00:35:17.030 - 00:35:37.530, Speaker B: You mentioned that you are managing the different sort of like from Ethereum USDC. USD, whatever. And so might and then if a user wants to withdraw also to go back, then how do you decide which second you will withdraw?
00:35:37.950 - 00:35:39.290, Speaker A: What do you mean? Drop?
00:35:40.130 - 00:35:57.890, Speaker B: If I understand correctly, let's say if I move USDC to and Amory will send USDC to Edmos and Yidmos government decides that USDC is the principal one, then both of us will receive.
00:35:59.350 - 00:36:25.900, Speaker A: That's a good question. So he's asking I'm going to repeat your question so that it gets recorded. He's asking about the ERC 20 module and how the registration process is handled and how, for example, the community votes for one smart contract in particular against others. And how do we decide which one is a canonical one and which one is dropped or not, from community point of view? Right.
00:36:27.470 - 00:36:36.474, Speaker B: When I'm having the USDC, but originally I provided USDC going back to Ethereum, how do you decide which the users will receive?
00:36:36.522 - 00:36:36.782, Speaker C: Yeah.
00:36:36.836 - 00:38:06.970, Speaker A: So for EVM, so you define a smart contract address and you define, for example, which is going to be like the canonical, for example, USDC that is coming from Ethereum to the Evmos chain that is all voted through governance. And the governance community needs to provide verifiable smart contract. They need to provide the repository documentation, they need to provide, for example, the hash of the contract. And they need to be like usually the proposal will have to be proposed by either the developers or some core member users from the community so that we know that it's actually that development team that is creating that proposal. So there needs to be a lot of due diligence from the community in order to actually know what is a verifiable valid contract versus what is just another deployment of the same open source code base. Right. And so from the other side, how do you decide which is going to be the smart contract representation of a Cosmos asset that will be available in the EVM and then can be transferred out to the pocketed or the EVM ecosystems is once you create the proposal, you can automatically register.
00:38:06.970 - 00:38:56.970, Speaker A: We have a factory contract that is going to once the proposal is approved, we're going to deploy a smart contract specifically for that IVC Voucher so that we limit the thread in terms of security of having multiple smart contracts that are not owned by the core team. Or it can be like a fake deployment, for example. So by creating a factory contract of the IVC Voucher, actually it's a core protocol, the owner or the deployer of the smart contract so you can create the approval processes for converting the ERC 20 and changing the supply of the token, like minting and burning.
00:38:58.430 - 00:39:21.810, Speaker B: Let's say that for USD on Edmos, there will be like Usdv, sorry, USDE, right. Like the merge token for representing various USD tokens. Then if I want to send the USDE back to Ethereum, then I will not receive neither of the original tokens. I will receive new USD token on Ethereum.
00:39:22.790 - 00:40:04.910, Speaker A: That is done specifically by whatever breach you're using. So that depends exclusively. We're only handling this from the EVM to the Cosmos representation, but we are not handling how the same representation of the smart contract on the EVM is going to be represented on, say, Ethereum or Polygon, et cetera. That depends. So there are going to be different bridge solutions deploying on Evmos and the user will have to, based on the trade off that they find in terms of security. Speed, et cetera. They can select whatever and also functionality.
00:40:04.910 - 00:40:09.360, Speaker A: They can choose whatever bridge provider they.
00:40:11.890 - 00:40:26.194, Speaker C: So will it be possible to bridge into edmos something that does not have yet official representation, like voted by governance? I have some random EFC 20 tokens. Can I just bridge it right into evmos?
00:40:26.242 - 00:41:47.026, Speaker A: Yes. So the question is, like, can I breach a token that is not voted through governance to Evmos? Yes. So if you are on the EVM ecosystem, on any other EVM chain, and you have like a random ERC 20 token, whatever it is, you can use any breach provided, like nomad connects, et cetera, and you can breach these tokens to evmos. But in order to support that token in the entire interchange ecosystem, in the entire cosmos ecosystem, that token will have to be voted through governance. And the requirements in terms of due diligence that the entire governance community is going to do is first having the contract be verified in the Block Explorer, for example, that the source code is publicly available and that you are not introducing some malicious action in terms of, like, oh, when a token is transferred by a user, you're not, for example, emitting a ghost approval where you can drain all the user funds. The community needs to vote. And that's why we are doing all this due diligence process, but that's only for how to represent the same token as a Cosmos asset and then can be sent back.
00:41:47.026 - 00:41:59.270, Speaker A: So that's why we're doing this mechanism through governance. It's in terms of how to prevent these malicious ERC 20s from being deployed on the rest of the interchange ecosystem.
00:42:01.690 - 00:42:03.186, Speaker C: With those random tokens.
00:42:03.298 - 00:42:06.726, Speaker A: Yes. You can use any breach provider like.
00:42:06.748 - 00:42:12.198, Speaker C: Normally on evmos, but I will be cut from cosmos ecosystem?
00:42:12.294 - 00:42:55.540, Speaker A: Yeah, you can use any breach provider to breach those tokens to Evmos and then create your governance proposal to get that token into the rest of the interchange ecosystem. This, as I mentioned, is just for security measures to prevent malicious ERC 20s that drain users funds, because they're not tokens that are necessarily owned by the protocol but are owned by certain contract owners or deployers. That's why we're trying to mitigate the amount of malicious ERC 20s in the ecosystem. Thank you very much for your time. We'll be here if you have any questions.
00:42:57.270 - 00:42:58.280, Speaker C: Thank. It.
