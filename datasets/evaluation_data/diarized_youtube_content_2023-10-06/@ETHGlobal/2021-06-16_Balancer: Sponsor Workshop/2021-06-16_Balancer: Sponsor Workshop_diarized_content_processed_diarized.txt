00:00:00.250 - 00:00:03.614, Speaker A: As many as you can. Okay, Jeff, over to you.
00:00:03.812 - 00:00:42.594, Speaker B: Okay, thank you. Welcome, everyone. I have some fond memories of being on the other side of this last year and many global banks going back to 2017. These kind of hackathons are really the lifeblood of the industry. So much innovation comes out of them, and I think even more so with these long form ones where there's time to go beyond a quiz of concept and really make something magical. This is an especially exciting time at Balancer. We just released our long awaited version two, and at this point, all the core pieces of the architecture are in place, and we're kind of in the fun exploratory, like, let's realize the full potential for this thing phase.
00:00:42.594 - 00:01:21.762, Speaker B: And I'm certainly excited. So the plan today is spend a good bit of time introducing Balancer V Two, explaining the core features, how it's different from V One and other AMMS. And then I'll use some graphics to show the architecture interfaces. Just skimming over it given the time constraints, but enough to give you a good feel. And then I'll talk about the current state of development and give you some suggestions for interesting hacks and wrap up with a list of resources to help you get started building on Balancer V Two. So talk a bit about what balancer V two is. E Global attracts a full range of participants.
00:01:21.762 - 00:01:52.570, Speaker B: Some people might be very familiar with V One. Other people have never heard of an AMM. So essentially it's an AMM automated market maker with liquidity pools. So you can do two things. You can trade tokens with low slippage on the decks, and you can invest in liquidity pools to earn trading fees and mining. So Balancer V One that launched last year in 2020, is a product. So a very successful one does a job well, had over 2 billion in CBL.
00:01:52.570 - 00:02:34.010, Speaker B: But the architecture is somewhat limited, so you can never have more than eight tokens in a pool. Smart pools have to be implemented as wrappers around the core pools because we couldn't change the core pools. And that means things happen at different levels and don't know about each other, and our tokens are stored in pools. That means trades require token transfers. And then when you add in the smart pools and proxies, and you've got a lot of transferring going on, and that adds up. And in contrast to the V One product, balancer V Two is a platform. It's flexible, user friendly, it's got many features designed to promote use for our partners and aggregators, things like smart wallets.
00:02:34.010 - 00:03:14.010, Speaker B: So the main thing in V Two, you're not limited to existing pool designs. V One addressed this by being customizable with smart pools, you could choose the level of control and trust, but V Two goes beyond that. It's fully extensible. You can inherit, mix in contracts at different levels, meet your needs without duplication and gas efficiency. Was also really important focus. What we learned from V One UX design and gas efficiency, v Two, both of those were completely overhauled. We can do swaps under eighty k of gas in some really favorable circumstances and we made everything simple.
00:03:14.010 - 00:03:42.226, Speaker B: So it might seem that goal like that goal is opposed to the other goals, but it isn't really. To paraphrase Einstein, we made it as simple as it could be, but no simple. It's still complex in some ways. The interface itself is very clean, sparse. The arguments can get a little hairy. That's the price you pay for having something generic and sensitive. So for instance, the vault wraps unwraps natively so UI doesn't have to.
00:03:42.226 - 00:04:11.206, Speaker B: You can join and exit pools with any combination of tokens. So if you want to join a five token pool and you only have three of them in V One, you would have had to pick one or go swap for all the other ones and calculate the amounts. And you'd have dust left over V Two, you got three tokens. You join the three tokens and you're done. And the interface is much cleaner. There's no clutter or unnecessary information. So it's really an AMM launch rapid application development platform for AMMS.
00:04:11.206 - 00:04:44.066, Speaker B: And it's designed to allow people to innovate in the space without worrying about the details. Because balancer has done all the heavy lifting, right? You have the token storage, accounting, security, and the vault and core contracts can't change. And then what can change is everything else. You don't need to fork the protocol as long as you're conformed to the minimal vault interface. You can write your own pool, write your own Asset Manager Flash loan. So we expect a Cambrian explosion of new designs. This guy's a little hidden.
00:04:44.066 - 00:05:14.290, Speaker B: This is my favorite little burge of sale buddy I use to illustrate this. So exciting time. So here's current status. We deployed the contracts in late April as vault core pools. Documentation give people a little time to prepare and get their code ready. Then the Oracle pools came out. Then Public UI launched in May this month we had stable pools and hopefully maybe the first smart pools and asset managers.
00:05:14.290 - 00:05:58.814, Speaker B: And generally we're continuously developing and there'll be a continuous incremental rollout of new features over time from off state notice and cobain testnet. Is everything's fully deploying? Coven that's the contract. Seed pools really UI subgraph everything, so it can really be used to test success. So what does it look like here? So at the center is the vault. Is this blocked by the you can see the full graphic. The top right is blocked by your face. All right, okay.
00:05:58.814 - 00:06:37.450, Speaker B: It's not that important, I guess that just says pool contracts. So at the center of the vault it's one big contract, holds all the tokens. And this, this makes it extremely gas efficient. So you can do swaps between 20 pools and you only transfer token deltas at the end with some mechanisms not even that. And all calls are made right on the vault. So no proxy, you just approve your tokens once and you can do anything in the protocol that's trading, investing and banking as I call it. You essentially have a personal wallet inside the vault and you can use that to avoid token transfers and lower your clients.
00:06:37.450 - 00:07:29.130, Speaker B: And this shady looking character here can do flash lanes and flashlights. So the pools are still, this is pool contracts, so the pools are still deployed contracts. But the difference is they only hold the logic, not the tokens. They're represented in the vault is data structures and their balances you see here are represented in a way that natively allows for capital efficiency. So you have a cash balance, which is the actual balance of tokens that are present in the vault and then the managed balance which are tokens that can be removed from the vault by the asset manager for various things, yield, farming, voting, whatever you write the asset manager to do. But the vault acts as though they're still there. So you still have all the benefits of low slippage and high liquidity with the capital efficiency.
00:07:29.130 - 00:08:12.550, Speaker B: Here's kind of the text advantage of what I described, expanding on it just a little bit. We have pool specializations. When you make a pool, that's another kind of space optimization. So if you know the pool only has two tokens, you can store them differently. You can store all the balances in one slot. So you only do one read and write for all the tokens, that sort of thing, and has a lot of features for Igids and smart wallets, including relayers special permission contracts that can make certain calls according to governance and users and use allowances grants, the vault and so on. And you could do a billion dollar flashback.
00:08:12.550 - 00:09:02.646, Speaker B: So I'm going to get a little hand wavy now in the interest of time, this is just kind of going over the interfaces that are available and features and how you would use these. If you want to do something, write a product uses the vault or it uses the pools or makes a new. So swaps is one of the main functionalities. You can do a batch swap which is like a multi hop. Each individual swap is with one pool where one token balance increases and one decreases. But you could string all those together and do a multi hop as much as you want. And again, because everything's in the vault, everything stays in the vault.
00:09:02.646 - 00:09:34.098, Speaker B: It's all very gas efficient. And there's also an optimized single swap. If you know for sure that there's only one pool, you can just directly swap against that pool and that's even more gas efficient. And we also have this feature called the query batch. So that is like a simulator or a dry run runs the exact same code as the swap. So there's no duplication, literally runs the same code, but it reverts right at the end with the encoded data. So you see exactly what will happen, exactly what the token balances will be.
00:09:34.098 - 00:10:18.142, Speaker B: And this is a great help for users of it. At the pool level. You make the new pool, you register it. So this is basically you're creating that data structure inside the vault and generating an encoded pool ID that you then use on all the API. And then you also say each pool has to say which tokens can be in that pool? And then you can interrogate information about the pool. What's the ID, what are the tokens, what's going on with the tokens, what are their balances? They have asset managers, which asset manager, all that. And then you can do of course, the adding and removing liquidity operations.
00:10:18.142 - 00:10:59.434, Speaker B: These are very generic. They have, for instance, you could join a pool by pulling the pool token. You could join the pool and you want to join it with three tokens, even though it's a five token pool. And you want to pull the tokens from the user balance of the sender and you want to send the BPT to the external receiver account. You can do that. And then the asset manager there's only one call, but again, it's one of these structures where you pass it a bunch of operations and you can deposit, you can withdraw and you can transfer. And then there's other similar vault functions with the user balances.
00:10:59.434 - 00:11:39.290, Speaker B: You can interrogate what's somebody's user balance and then the manager is very similar to the asset manager. You can manage your internal balances, you can deposit, withdraw and transfer. This could be used by aggregators. If you had a custodial solution or some sort of smart wallet that had permission, you could transfer things between users. You can do the Flash loan interface, which is very simple. You're passing it a contract to receive the Flash loan and then protocol fees. The protocol fees are separated into a separate contract outside the vault.
00:11:39.290 - 00:12:31.550, Speaker B: You can here ask what that contract is and ask about the fees. And then there's a permission function. Of course there are permission functions to set them and then there's an emergency stoppage. So that is permission through Governance. That is a safety feature on the vault and all new pool types where for the first three months, if we were to have a critical security incident, we could just halt everything except it would freeze the vault and you couldn't do anything except withdraw. And that period lasts until I think, mid next month, after which it becomes fully permissionless. As I alluded to v two introduces some swap fees or sub protocol fees.
00:12:31.550 - 00:12:58.294, Speaker B: There are two kinds. They're currently zero, but they could be activated by Governance. There's a swap fee and a Flash loan fee. A swap fee is a percentage of the pool fee. So if the pool swap fee were 1% and the protocol swap fee were also 1%. Total will be 1.1 and they could be very low.
00:12:58.294 - 00:14:03.210, Speaker B: And these are also there are hard coded limits on these as part of the threat model, as a safety feature, if governance were to be compromised somehow, it's not possible to set the fees 100% or something. And just to expand a bit on how extensibility and how would you go about making a new pool or using this? So as an example of how we've implemented this, the weighted pool is the main kind of pool we have. So that's a pool with two to eight tokens with fixed weights. It's very similar to V one. It has weighted math, which is similar to the V One price curve. So there's this base weighted pool class which abstracts all the actual functions. So the price curve calculations and all those functions need to interrogate what are the weights.
00:14:03.210 - 00:14:56.006, Speaker B: So at that level, it's virtual and just has the logic. And those are implemented in the weighted pool very simply because they're fixed. It just reads them right from the fixed storage or from the fixed enables. Whereas if you wanted to make a pool, since she's a liquidity bootstrapping pool that has mutable weight storage, then you would just override those, get weight functions and calculate the weights or read them from storage, or go to an oracle or do whatever you want to do. So if you wanted to make a new pool type which had mutable weights, you could simply derive from basically the pool and you would have all the stuff above it, reuse all that for free, and you have a very small implementation. The base layers do all the hard stuff for you, all the invariant price curve, you don't want to have to duplicate that. It's already pre done, pre audited things like tokens decimal, scaling.
00:14:56.006 - 00:16:01.658, Speaker B: If you didn't use this whole mechanism, you would have to do all that yourself, because that's a problem on V One. To some degree, when you have different decimal tokens, there can be issues with minimum balances and decimals. V Two kind of avoids all that. All the I O is with the native token decimals, but the pool is converted to full 18 decimal precision for all the calculations and then it scales it back when it outputs the value. So it handles all that. So that's just a concrete example of that mix in kind of override architecture I described before. So here's where we are in development, or what's currently going on in development, right? I'm working on the liquidity bootstrapping pool, V Two version, which is completely different in this case, it's a specific pool.
00:16:01.658 - 00:16:42.582, Speaker B: In V One it's kind of an instantiation or a particular use case of the general configurable rights pool. In V two, it's its own thing. But there also, I think will be a CRP like thing on V Two I'm working on too. We've got people working on asset managers. Ava is probably the first one. So this is where you can join a pool certain way and have the Ava tokens or the Dai doing yield farming in the back, earning a yield to the pool. In addition to the fees and the mining, you have great capital efficiency.
00:16:42.582 - 00:17:06.360, Speaker B: And maybe others are in the pipeline as well. All kinds of third party tools are being made. There's one that does implements a yield curve, so totally different price curve. There's all kinds of dynamic weight ones of various types. And I'm sure there's some we don't even know about. So quickly go into the prizes. I'm sure you're all interested in that.
00:17:06.360 - 00:17:48.094, Speaker B: Kept it simple, just two, 8001st, 4002nd. There are no categories like V Two itself. It is unconstrained limited by your imagination. However, we do have some ideas of what might be promising areas of research. For instance, asset managers. Layer two is a big push with everyone, including us. We are deploying on Polygon very soon and I believe also Arbitrum and also Xdai.
00:17:48.094 - 00:18:40.610, Speaker B: And it's going to be a big focus this year for everyone. So a unique thing about balancer is we could leverage this with this asset management mechanism. So you could have an asset manager that instead of doing something on level one, like putting it on, like the Avatool works entirely on level one, you could have something use a bridge or put some of his tokens on level two. Also, there's many Arbitrage bot opportunities here. You can do what I call flash swaps, where you have no using internal balances for very cheap gas and you can have no tokens in. You see an Arbitrage opportunity, you just take tokens out. I think that has the potential to make the markets in V Two very efficient.
00:18:40.610 - 00:19:18.282, Speaker B: Another area is the migration. So as part of the UI release, there's a migration. So when we first launched the Oracle pools, we made about 30 seed pools, oracle seed pools that are and these are supposed to be these are the highest liquidity pairs. I think there's over 250,000,000 or so in there now. And those are the targets. So we're encouraging people to kind of concentrate liquidity on those pools. So the migration tool supports just a subset.
00:19:18.282 - 00:20:22.126, Speaker B: So it's only two token pools and it's only two token pools that are similar to one of those seed targets. But what about all the other pools? There's a ton of other V One pools, most of which could be migrated in some form. There are some that can't, but most of them can. So you could extend this. What if you have a two token pool that doesn't have an equivalent? What if you have a five token pool or eight token pool? And also, what if you have liquidity on other AMM platforms that you might get a better API on? API on? If you could migrate to balancer so it could calculate all these things and suggest different migration paths. So it might say take this eight token pool and take this uniswap one and put this one here and divide this eight token pool into these four two token pools on V two. And it could just have a proxy or some sort of thing and do it all for you with one or two clicks.
00:20:22.126 - 00:20:58.826, Speaker B: That would be amazing. The other thing is around asset management, portfolio management. You could make a relayer one of these privileged or permission contracts that actively manages portfolio. So for instance, it could move between pools. Say you're invested in four or five different pools using the internal balances. You could withdraw from one into your internal balance and then join another one from your internal balance. So you're not transferring any tokens, but you're moving things in between your investments within the vault to get a capture, a better APY, more ambitiously.
00:20:58.826 - 00:21:38.294, Speaker B: You could even create a new set of pools that actually change the weights algorithmically. And it could do that as well. But of course sky is the limit. We're happy to be surprised, surprises and doing pretty well on time. It's about exactly 20 minutes. So finally, here are the resources. The main point of contact would be Discord and the best thing would be to go on to the E Global Discord when it's hackathon related, rather than going on the general support because it's going to be pretty spread thin otherwise.
00:21:38.294 - 00:21:57.790, Speaker B: So encourage everyone to go to the sponsor. I believe that's the right sponsor balancer channel on the Global Discord. And then here's a medium article that kind of describes too. Here's the code. Everything is in one big mon repo. It is under active development. Master is the current release branch.
00:21:57.790 - 00:22:38.026, Speaker B: There are also tags because it's diverged quite a bit from what we deployed originally. You can always recover that with the V One tag or the release One tag. And then here are some guides. The Docs Balancer PY is the documentation and here are some handy links to specific parts of that. And then also into the describing the APIs. We have a pool creation package in Python. It's in the Docs how to do it, but it's kind of high level because everyone has a different dev environment and it's pretty hard to make a working script.
00:22:38.026 - 00:23:05.782, Speaker B: So the Python thing is intended to be just run it out of the box, create a pool with a configuration and it's a work in progress. It's out there now. We'll continue to develop it through the hackathon. It should support all the protes fairly soon. It doesn't now, but give that a try because otherwise it's a little onerous to create a port. So that's all I had for the formal presentation. It's 420.
00:23:05.782 - 00:23:40.680, Speaker B: That was exactly on time. So I guess I can go to the chat, see what we have here. Should I stop sharing? No, I still see your slides. There you go. Now you stopped. Okay. Non tradable tokens.
00:23:40.680 - 00:24:15.670, Speaker B: Okay. Well, the first one, the easy one. There plans to deploy Matic and XDI. Yes and yes, in fact, it may even so, the difficulty is deploying on Polygon, it's more than just you can deploy the contracts, but that's not a problem. But it's not very useful if all you do is deploy the contracts. I mean, I deployed v one on Maddox. On Mumbai, actually.
00:24:15.670 - 00:24:54.530, Speaker B: But it's not very useful if you don't have the UI and you don't have the subgraph and you don't have all the other pieces. Also, we have the whole governance piece. Right. So we need to have a multi SIG for the authorizer, for all the so that was a bit of the delay on Polygon was to get the we needed to get the signers on the multi SIG. Hopefully people that and we're still kind of recruiting, we'd like people that are related to Polygon to be signers on the multisig. I think that's all resolved. We have at least a preliminary enough to actually do it.
00:24:54.530 - 00:25:34.060, Speaker B: I believe we're deploying extremely soon, within days, I would imagine. On Polygon you would also need to not only deploy the vault and the architecture, but also actually put pools there, actually put liquidity on there. Otherwise you can't do much with it. Right. But I do think Polygon will be first. They are an important partner. Looking up else here, I'm not sure I understand this pool of non tradable tokens.
00:25:34.060 - 00:26:01.300, Speaker B: I can say. Generally, a pool is an arbitrary contract. You actually don't even need to use anything. You could write it completely a contract from scratch if you wanted to. You don't have to reuse really anything as long as you talk to the vault properly. A pool is an arbitrary contract. There's a whole infrastructure there that you can reuse for convenience.
00:26:01.300 - 00:26:44.580, Speaker B: So things like pool tokenization, we have a balancer pool token. That is the BPT that the core pools all inherit. So that is the BPT contract. The vault doesn't know anything about BPts, so you don't need to use that. You could have a pool that doesn't even do tokenization or does tokenization completely differently and doesn't use BPts at all. It doesn't even need to have tokens, I suppose. So, yeah, there's really no limit to what you can do as long as you meet the minimal vault increase.
00:26:44.580 - 00:27:36.400, Speaker B: Okay. Simple example. I think there is some of the docs have been changing lately. We will be adding I mean, there are some examples. We will be adding more. I think even the Python package has some examples. And also the Repo has things that are in development, so you can look at those.
00:27:36.400 - 00:28:20.286, Speaker B: There's a lot of documentation in the code that tells you, hey, implement this to do this, implement that to do that. But if it's useful to expand upon that, if there's anything else people would like to see I'd be happy to write that. We're always extending the docs. I do a lot of doc writing, so happy to extend the docs as needed. There are lots of people working on custom pools for concentrated liquidity pools. That'd be another kind of example. The two token pool is sort of like that.
00:28:20.286 - 00:29:33.054, Speaker B: I mean, we have a weighted math and stable math. So, yeah, all those all those, you know, all the pools currently use those maths, but it's not constraining. You could make another math library with different math and then use that instead. Right. So the question here is, if there were a token USDC pool, if there would tap into the USDC, like, use it as Potter of an Avalone. Well, yes, that's the Ava Asset Manager, which is not released yet, but that is exactly the sort of thing that the Ava Asset Manager would do. So you would join the pool with USDC and specify that you want to use the Ava Asset Manager, and then with a meal 80% allocation, and then it would take those tokens and farm them out for you.
00:29:33.054 - 00:30:04.300, Speaker B: On Augment, there's a whole elaborate kind of staking. It's related to liquidity mining and staking. This is all getting rolled out. It's TBD. But a lot of this there's so much going on. I didn't list everything, but there's a lot of stuff going on with Ava and staking and mining earnings distributions that we'll have details on when that gets closer to the Is.
00:30:06.910 - 00:30:27.400, Speaker A: All right, I'm so sorry to interrupt, but we are kind of back to back on workshops today. Thank you so much, Jeff, for this really amazing workshop. And thank you to Balancer for sponsoring Hack Money this year. And, yeah, if you guys have any extra questions or would like to talk to Jeff or people from Balancer, make sure you guys check out that Discord Channel.
