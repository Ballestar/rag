00:00:00.570 - 00:00:01.120, Speaker A: It.
00:00:01.650 - 00:00:42.282, Speaker B: We're due for a pretty good session today. I hope everyone's having some good fun building on their project so far. I know it's a long hackathon, but it also yields pretty cool results. We got a lot of cool sponsors here. We're joined by one of them this morning and I think we should be ready to go. I would like to give a shout out to everyone joining us in the room this morning again, and shout out to the Chainstack team here, joined by our friends Eugene and Antonio, who probably give you guys a better introduction of what they do than I can. And I'll give them the floor after this, but we will be taking questions in the zoom chat below, so feel free to post those throughout the performance and we'll get to them right after the session's over.
00:00:42.282 - 00:00:46.860, Speaker B: Antonio and Eugene, the floor is yours. I'd love to hear more about your project. Take it away.
00:00:47.950 - 00:01:24.920, Speaker C: Thanks for the introduction. Luke thank you for your time, guys. Thanks for joining us today. I'm Eugene, I'm co founder and CTO at Chainstack and Antonio is our developer advocate. We're very happy to join this amazing event hackmani from It Global and we're going to talk a little bit about blockchain infrastructure today. And Antonio will show a really cool hands on demo on bridging between different networks on EVM based chains. So let me briefly share my screen and talk a little bit about chainstack, what we do, why we're here.
00:01:24.920 - 00:03:07.702, Speaker C: So our company is working on the blockchain infrastructure, which is pretty foundational layer for every developer on blockchain, and most of you for sure, they use some node APIs, whether it's a node that you run yourself or you use some service like infura Alchemy chainstack, there are many other services that provide this sort of infrastructure today. So we are one of the top vendors in the space and we are happy to share a little bit more on what we do and how we would like to support the ecosystem. So, a little bit of background on why we exist and why people use chainstack today and why they find it valuable. First of all, there is still not a lot of expertise on blockchain infrastructure like how to run nodes, like where to find engineers who can run nodes and who can maintain them, who can upgrade them. So basically, most of the time, if you run a MultiChain DAP or MultiChain project, you need to have a small team or large team, depending on the size and number of chains you support, of protocol focused engineers that could deal with different chains and nodes. And they are all different and they all have different issues and challenges in terms of the operations. It's also quite complex and costly to set up nodes as well, especially from scratch, because they tend to sync for quite a long time.
00:03:07.702 - 00:04:39.670, Speaker C: If you need for your app like archive data for instance is a nightmare for anyone who wants to run a node because you need to run an archive node which would sync, best case scenario, a few weeks, worst case scenario, a few months for different chains and they grow up to 20 plus terabytes of size. So it's literally impossible to run this stuff at home. So it's sometimes super costly in terms of money and time to set up nodes and also maintain them right, and keep them secure so that nobody will break into your server or to your computer that is running the node and do some nasty stuff there. Also, what's important is that the more protocols you want to support, the more challenges you have in terms of maintenance and operations. Because there are always things happening like hard forks on the networks and soft forks and some incidents that trigger nodes to be down for like 8 hours for some chains that we know very well as well. So it takes time to learn all these things and to understand how to operate in this kind of uncertain environment where you don't exactly know what's going to happen to your nodes tomorrow. So these are all the challenges that we think that make it useful to build a platform that we've built a few years ago and still operating and growing today, to basically provide easy to use and reliable and robust API infrastructure for developers of all sizes.
00:04:39.670 - 00:05:38.694, Speaker C: So basically, what managed blockchain services that we build help with basically to reduce the complexity and challenges involved in working with all these chains that are sometimes quite uncertain. And you need to be an expert in each of these chains to run nodes for them. It's really easy to go from testing to production with such service because you basically just plug in the API endpoint and then it just works right. So you don't need to care about like okay, I now need to add more RPS capacity to my nodes, I need to set up load balancing, et cetera. So you just go and just switch to another endpoint if it's more convenient for you. So it's basically no time to start. And to scale your operations with managed blockchain services, you also get all these things that I mentioned on the last slide as challenges.
00:05:38.694 - 00:06:53.854, Speaker C: Like you get scalability out of the box, you get reliability usually close to 100% because all the vendors, including us, they tend to provide amazing service because It's infrastructure and core infrastructure should be super reliable. So everybody's focusing to provide like 100% uptime because when you run infrastructure, you want to be sure that your customers sleep well at night and they have peace of mind. So it's definitely a must for any managed blockchain service provider. And basically you don't need people to run operate nodes, you don't need to have special low level blockchain expertise on the operations side to basically have your apps up and running. So you just focus on the business logic of your app. So, Chainstack is a multi cloud, multi chain platform that allows you to manage all your projects for all your protocols on all the chains that just on the left of the screen, starting from Ethereum through StarkNet that we just launched last week to some of the non EVM chains like Solana and Tezas. And we're adding a new chain every two months, roughly.
00:06:53.854 - 00:07:43.062, Speaker C: So we love chains that get adoption and get traction. So that's how we basically choose the chains to support because we want to support builders that are coming into these ecosystems and grow together with us. What's quite unique about our platform is that we provide variety of options for deployment. So we provide hosting for different nodes and different types of nodes also in different clouds. So we support four hosting providers today in six different regions. We just launched Tokyo by a great demand from our Asia Pacific customers last week also. So we also adding new clouds and regions from time to time whenever we see big demand in certain clouds or regions.
00:07:43.062 - 00:08:43.598, Speaker C: So you also can run shared and dedicated nodes in our platform. So basically you can either scale your projects by API calls or if you're a super heavy user, we have some customers that do like 50 00, 10,000 RPS alone. They usually use dedicated nodes which are just allocated for their use and there is no cap on the number of requests that you're going to use. You just basically start a node like you would start a VM in any cloud, and you can just use the node as your back end for your blockchain app. So, last but not least, I think it's important to mention that the Chainstack is very inclusive platform. We want to support builders of all sizes. So these are some of our customers that you see on the screen and you can see large projects like the graph and layer zero and chain link and a few others, and also smaller projects.
00:08:43.598 - 00:09:31.518, Speaker C: We also love to support builders who are just starting. So we have a very affordable developer plan which starts from $0 basically, so you get $0 for 3 million full node calls on any protocol that you want per month. So we love to support builders who are just starting. We are totally freemium platform, so you can just start using it right away without paying anything. And then as you see the demand for your DAP or for your application, you can just scale with us and it's very elastic pricing that we've got. So you basically just pay for what you get. Basically you pay per calls or you pay per hours the node is running if it's a dedicated node.
00:09:31.518 - 00:10:05.454, Speaker C: So it's very flexible pricing. You don't need to commit to anything, you don't need to prepay for anything out of the box. You can just scale with the platform as much as you want. So it's very transparent pricing as well which is important for any developers in the building as well. What's worth mentioning as well, we support crypto payment on the Platform. So if you want to pay for your plan or for your node in crypto you are welcome to do that. We support like Bitcoin, Ethereum and a couple of stable coins there as well.
00:10:05.454 - 00:10:31.030, Speaker C: So it's pretty easy for anybody to onboard to the Platform with crypto in particular as well. So I think that's all for now. From my side, I would like to give the screen to Antonio who will do a small demo of the Platform as well as kick off his very cool demo of breach on the EDM chain.
00:10:34.490 - 00:11:22.390, Speaker A: Cool. So let me share my screen. Yeah, I guess everybody can see it now. So basically what we're going to do is try to build an EVM bridge. I think it's a pretty cool project to build if you are starting but you are not like super newbie to blockchain development. You can build it very simple but at the same time it's not super complex to build and you can learn a few things. So the first one is to create a couple of ERC 20 tokens and deploy them in multiple chains.
00:11:22.390 - 00:12:24.550, Speaker A: And then you learn how to listen to events using WebSockets which is pretty cool, and then how to send transactions from a backend which is something that normally we do using MetaMask or any other wallet. So we will show how to do it from a backend. Basically, this bridge that we are going to show you is a simplified version. And how it works is the users send Tokens from a front end that we have built to a wallet that belongs to the bridge itself. And then we have a back end process running that is listening to these transactions on the ERC, 20 Token contracts. And when it sees that there is a transfer to the bridge wallet, it means new Tokens on the other side of the bridge. And when we are breaching back we are doing the same backwards.
00:12:24.550 - 00:13:38.094, Speaker A: Instead of minting new tokens, we are destroying those tokens in this side of the breeds and we are just sending the tokens back to the user. So I have a video of it working, but instead of doing that, I think it's best to just jump into the code and try to work through how to so the first thing that we need is actually access to two blockchains and two nodes. And for that, of course, I'm going to use chainstack. And as Eugene mentioned, you can create your account for free and you have access and you can have up to 3 million requests per month. So this is our console once you're logged in and I have created a project here that is VM bridge and I already have one of the blockchain nodes which is Ethereum grobsten and I'm going to create another one for the destination of the bridge which is going to be Harmony. And yeah, it's pretty simple to use. Just select the blockchain and the network.
00:13:38.094 - 00:14:42.486, Speaker A: And as Eugene mentioned, we have share nodes and dedicated nodes. And then for provider you can deploy it in different locations. For share nodes of Harmony we have North Virginia and Frankfurt here, let me give it a name test note and it starts deploying. It takes like 90 seconds to two minutes, something like that. While it's been created, let me show you how you can see some metrics of your nodes. So for example, this one, as you can see here, there are some metrics like calls from our server getting the block number and things like that, the responses. And here you have the graph with the number of requests that you have.
00:14:42.486 - 00:15:19.700, Speaker A: You can filter like that. And here you have your access endpoints for both Https and WebSocket. And if you want to access with user and password, I will delete this note later. So, yeah, going back to our project, let me see if it's created already. It's not. Okay, so let me guide you through the code. So this is what we are going to build.
00:15:19.700 - 00:15:59.002, Speaker A: It's a very basic application. We just have an input here to enter the amount of tokens that you want to send to the other blockchain. And it's from Ethereum Robson to harmony or from harmony to ethereum Robson. And basically the code of this application is divided like in three parts. The first part is the ERC 20 token contracts. So we will have tokens in both sides. One in Ethereum Robstain, one in Harmony testnet.
00:15:59.002 - 00:16:51.310, Speaker A: Then we will have the code for the front end, which is this one. And I created a VGS application because I like you. And then we have a backend process which is the one that keeps listening to the events in both chains and basically create new tokens on the other side or burn them and do a transaction to the original wallet. So let me see if this one is created already. Yeah, as I mentioned, right now we have zero transactions here and we have our endpoints. So, yeah, let's jump into the code. So here are the two ERC, 20 token contracts.
00:16:51.310 - 00:17:53.406, Speaker A: On the left side we have the one for Ethereum which is a standard ERC 20 token. We are just importing here from open seplin and the only thing that we are passing is name symbol and the initial supply. When we deploy this contract, we will actually mint all the tokens and send them to the person that is actually deploying the contract. And then the difference with the one on the other side, which I have called B chain stack toros before destination, is that we have this modifier here that is called Only bridge. And basically this modifier prevents that no one can mint or burn tokens. And the only one that can do it is the bridge. So when we deploy this contract, we are actually setting the address of our breach here in this state variable.
00:17:53.406 - 00:19:20.590, Speaker A: And if someone tries to call the mint or the burn tokens or the burn function, it will go through this modifier. And if it's not the bridge, it will just fail with this error message to deploy this contract. This is hard hat project so it's a standard script to deploy. We just have to use this get contract factory, get contract name and then put the name, the symbol and the supply that we want to be at the beginning. And to deploy the other one we have to pass. The bridge wallet address in the deploy and I'm passing this with environment variables and by the way, I didn't mention at the beginning but all this code is part of an article that we have published in outdoor and I'm sure we will share the GitHub repo underneath the article and all the stuff. So I know I'm going a little bit fast and it's not a very step by step tutorial but it's just to show you how you can create the bridge in a few steps.
00:19:20.590 - 00:20:41.830, Speaker A: So now that we have deployed it, let's see, we have deployed these two contracts. The web application is a standard VGS app and the only thing that we are doing here is we have this button to connect to MetaMask and the only thing that we are doing when we click here is getting this amount from the input and sending a transaction from the user's wallet to the breach. And basically we're doing that with this method here, this send tokens method. And as I'm saying, we're just parsing this amount to and then just doing a transfer and we are hardcoding the wallet address which we are loading from our environment variable as well. And yeah, the only thing that we do is send these tokens from the user to the bridge and in the other page we are doing exactly the same send these tokens to the bridge. That's basically it. The important part of this bridge is having this back end process that is monitoring both token contracts and is basically listening for transfer events.
00:20:41.830 - 00:21:47.920, Speaker A: And for that we are connecting to the contracts via the WebSocket endpoints. And basically this is the piece of code. I call it event watcher. And what it does is it connects to both the ESC 20 token contract in Ethereum and in Harmony and basically it waits for transference. Here is one and here is the other one and when we receive a transfer in the Ethereum side we go and mint new tokens for the same user in Harmony and we send a transaction. When we receive a transfer in the Harmony side, we destroy those tokens, we burn them and we send the same amount from the bridge wallet address back to the user. So I think I can show you how it works.
00:21:47.920 - 00:22:29.500, Speaker A: So this is our back end process. It's running is there in the background. It's connected via WebSockets to pulse contracts using our nodes. And here, let's say let's see how many tokens I have in Harmony. Well, that's very small. So let me show you here. So we have 125,600 destination, ten stack dollars.
00:22:29.500 - 00:23:17.854, Speaker A: So let's send like 300, 400. So we connect to Robstain here and here we have a ton of them. So we are sending 400. And once we sign the transaction, you will see that things start happening here. Okay, so it might take a few moments because it's Ethereum. Let's see what happens. And yeah, just a reminder that all this code is in GitHub.
00:23:17.854 - 00:24:10.678, Speaker A: It's public and we have a step by step tutorial in our blog, which I can go ahead and show you. It's here. And this is full step by step explaining everything. So, yeah, make sure to check it out if you have any questions or you can just send us a message in discord or you can reach me on Twitter if you want. Okay, so things have happened here. Basically, we have received tokens from the Ethereum part of the bridge and we have minted new ones on the other side. And you can see the transaction that it has been generated in the Harmony explorer because we are sending from Ethereum to Harmony.
00:24:10.678 - 00:24:59.470, Speaker A: And as you can see, we have created 400 new ones. So if we switch to Harmony, we should have 400 more tokens. There we go. Now we have 126,000. So, yeah, that worked. So if we want to send tokens back, let's say I want to send 500 back to Ethereum and this should be faster because this is Harmony. So there it goes.
00:24:59.470 - 00:25:55.680, Speaker A: Basically what we're doing in here is like we're actually sending three transactions. So the first one is we are approving that the breach will burn those tokens from the user wallet. The second one is actually burning those tokens and the third one is sending a transfer from the bridge wallet address in Ethereum to the user's wallet address. All that just happened here. And we have the transaction here in Ether scan. So here we have the details is 500 change tax dollars. If we connect here again, we should have 500 more.
00:25:55.680 - 00:26:49.424, Speaker A: Well, yeah, that's a very big number. But those 500 are back here. So, yeah, that's basically it. As I said, all this code is in a GitHub repo that is public and it's linked in the article that we have showed. Here are all the step by step how to set up environment variables, how to create your nodes in chainstack and basically everything you need to know. And also I want to mention that we have a feature request page in ten stack. So if you want us to support any new protocol, you want a new API, whatever the projects want or they need, they can submit here.
00:26:49.424 - 00:27:12.570, Speaker A: And we keep reviewing this every now and then, so we make decisions of the product based on this. So, yeah, submit things to us, and that's basically it. Let me stop sharing. Cool.
00:27:15.100 - 00:27:24.988, Speaker C: Guys, I assume we have some time for questions, so if anyone has anything to ask Antonio or myself, we'll be very happy to cover anything related to.
00:27:25.074 - 00:27:27.310, Speaker A: What we just spoke about.
00:27:37.250 - 00:27:55.954, Speaker B: Right on, everybody. Well, thank you, Eugene. Thank you, Antonio, for such an incredible presentation. It was great working through that with you guys. I highly recommend I personally think of questions a lot after we walk away from conversations. I highly recommend hitting them up in discord. They are very active on discord and can help you at every step of the way.
00:27:55.954 - 00:28:19.980, Speaker B: And like I said, we are very glad to have everybody in the room today and very glad that you were able to join us for the past hour. I guess if there are no further questions and come on, if you want to come off and mute one last question and get it in before we're gone, more than welcome to do that. But if there are no further questions, I would recommend let's transfer to discord, keep the conversations going, and we will see you in our next session. Thanks, guys. Thank.
