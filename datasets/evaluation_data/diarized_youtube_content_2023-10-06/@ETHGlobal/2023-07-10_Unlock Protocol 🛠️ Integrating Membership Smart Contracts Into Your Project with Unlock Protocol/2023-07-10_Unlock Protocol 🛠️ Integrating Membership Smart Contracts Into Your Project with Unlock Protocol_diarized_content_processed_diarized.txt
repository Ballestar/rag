00:00:07.770 - 00:00:38.534, Speaker A: Everyone. Thanks for your patience here. My name is Junior Junis Two and I'm going to tell you about unlock percol. Unlock is a project that has been built about four and a half years ago already. We were here at the last East Waterloo, which was in November 2019. What is unlock? Unlock is a protocol from memberships. We'll talk about this for about half hour through which we'll go first through a bit of theory and then we'll move to a more practical live coding example.
00:00:38.534 - 00:01:17.890, Speaker A: So first start with a quick overview of Unlock, the protocol, then overview of the ecosystem, the tools including subgraphs and existing integration. Then we'll go into live coding example, as I said, to see how you can add unlock to your front end applications. Then we'll give a little bit of an intro about how you can also integrate this into smart contracts via the use of books. And finally we'll have a bunch of pointers to docs, guides, repos and tutorials that we have and that you're more than welcome to use as a basis for your own work. First, quick note about myself. So my name is Julian Jeannistu. I'm the CEO and founder at Unlock.
00:01:17.890 - 00:02:05.518, Speaker A: Before that I was actually a founder at a company called Superfeeder, which was sold to Medium and we were building RSS feed API APIs. I'm a big, big fan of the open web, the idea that this kind of gigantic brain of ours shouldn't be controlled by anyone and that we should all be able to play in the way we want. I worked with the building three C worldwide web consolation for a little bit and I'm also a big open source advocate and I'm currently on the Graph Council. The Graph is also a sponsor here. You should definitely check them out. You can find me online at julian 51 everywhere or on my own blog at uh, wat, which literally means open box in English and invite you to check it out. What is unlock protocol? Unlock protocol is protocol for memberships.
00:02:05.518 - 00:02:33.402, Speaker A: One of my core beliefs is that the web should have primitive for memberships because we have memberships everywhere. Where you think about your Netflix account, it is a membership substack. Subscription is a also, you know, the fact that you follow someone on Twitter even though it might be free, it's a membership. You're a member of that very exclusive club of people that follow that person. Again, memberships are everywhere. They're also everywhere in the physical world. Your gym membership is obviously a membership your driver license if you're in the US.
00:02:33.402 - 00:03:02.726, Speaker A: And I think it's the same in Canada expires, it's kind of a membership to the local DMV, you're a member of the people that can drive on the road. So Unlock is a protocol to do all kinds of membership subscription, the one that are recurring ticketing. So if you go to a conference, the ticket to the conference is a membership for that specific conference. You can do stuff like token, gating and that's actually what we're going to showcase. You can also do certifications. Certifications is also a membership. You're certified driver as I just said.
00:03:02.726 - 00:04:01.242, Speaker A: Or when you get a diploma from a school, you're also a member of the class of year 2021 or something like this as I said, founded about five years ago and we have a team of people that have worked at Google, Facebook, Goodaddy and multiple other names and companies that we've seen talk about memberships. If you've been around for the last two years, you've seen all of these NFTs emerge and so well you can say well would any membership, any NFT could be a membership? The answer is no. And the reason for this is like most NFTs are collectibles, they are not supposed to represent the fact that you're a member of a group. And one of the key missing attributes is the idea that they're perpetual. Once you have a board ape, you have a board ape forever unless you sell it. And that is not a good membership model for the people that are selling these apes to you because they need to provide you services. Imagine that you bought your gym membership by paying once and then you should be able to go your whole life.
00:04:01.242 - 00:04:43.714, Speaker A: The gym will probably close and go out of business. Same for Netflix. So really you need to think of memberships as kind of NFTs that would have some kind of expiration mechanism. Obviously the fact that they have an expiration means that they can be renewed and you can move from something that is one time to something that is recurring, something that happens every month, every week, every year, depending on what is the base duration. Here it goes from the idea that communities and creators will make money through royalties, which is kind of a very strange model, to something that is continuous. Netflix makes money continuously as people keep paying for the service because they keep streaming good shows. Hopefully at unlock we also build the protocol around the membership.
00:04:43.714 - 00:05:30.374, Speaker A: That's assuming that not all membership will be paid and not all memberships will be paid with crypto. So we have natively in the smart contract support for mechanism that would allow to pay with credit cards or for example ERC 20s as well. Like most NFCs are priced in the base currency of the chain. So ETH if it's on main net or Maddox if it's on polygon, we assume that many membership would be priced in stable coins like USDC or Dai et cetera, et cetera. You can also easily verify off chain the validity of a membership, maybe even verify its validity in a form of a QR code and we'll come back to this in a couple of minutes. But you can also do on chain access control by verifying from other smart contract that a given membership is still valid. Obviously if you thought about NFTs, you probably think transferable, not all.
00:05:30.374 - 00:06:04.190, Speaker A: NFTs shouldn't be transferable. There's a concept of sold bound tokens with unlock. You can definitely create a contract for which the NFTs are transferable, non transferable, or anything in between. You can say they're only transferable if certain requirements are met. And also we move away from the idea that NFTs should be immutable to something that is more practical, which is NFT should be able to evolve based on the membership, based on what kind of services are being offered. So the Smart Contract that you deploy when you deploy your membership through unlock are upgradable by you. Obviously we cannot upgrade them, but you can decide to upgrade and add more features as time goes and change how they behave.
00:06:04.190 - 00:06:58.690, Speaker A: So unlock protocol is made of contracts that are updatable. You can change the terms of membership, you can change the price, change the supply, change the duration of each membership, you can change cancellation, term transferability, all of that. As I said, they're also upgradable, not by us, obviously, but by you. You can choose to change once the protocol support new features, you can choose to opt in for these new features and that's perfectly up to you and fine, but they're also programmable and we'll very quickly allude to this, and you're more than welcome to stop by our booth to get more details on this. The Smart Contract has a lot of hooks built in so mechanism to alter how it behaves based on your own logic here, which I think is pretty interesting. And you can build things like discount codes or Airdrops when people buy memberships, change how something works on the Smart contract, change the price on every single purchase, et cetera, et cetera. So, key use cases we grouped here eight.
00:06:58.690 - 00:07:33.370, Speaker A: We'll go through three that are the most common ones, but you're more than welcome to do anything that involves the other one. And if you find more use cases, we're happy to hear about them. First one, I talked about it earlier, it's event ticketing. If you have a ticket to a conference, to a concert, you are a member of that conference, of that concert for the duration of the conference or the concert. Second one, recurring subscription. I mentioned your Netflix account. If you have a substac account that is also kind of a recurring subscription, you pay every month, every week, depending on what the duration is, to keep accessing the content that is obviously possible.
00:07:33.370 - 00:08:15.194, Speaker A: To imagine a world in which you have a video streaming platform, you can create a social network where people pay to access more content on a recurring basis. Podcasts we probably hold and listen to podcasts that have time components and premium feeds in there, so you should definitely check that out. The next one is the idea of time based memberships. So think seasonal or maybe community dows and things like this, so you can think of a dow that has every year a new class and you need to pay to be part of that class or of that group and that's a good example of this. It doesn't have to be automatically recurring. We also talk about certification. Gaming obviously is a big one that you can play with as well.
00:08:15.194 - 00:08:58.438, Speaker A: If you play a game, maybe the fact that you I mean, first the subscription would be a thing in the game, but maybe you're going to earn items that are going to expire after some time, and so these items could soon be NFTs you're a member of the people that have the sword of some kind, et cetera, et cetera. Another use case that we're hearing a lot of in the crypto space right now is their finger on loyalty. So if you think you're a brand, you might want to create perks for your must, loyal customers. Unlock is a great contract to actually do this attendance NFTs you probably have all heard of Poaps at this point. That's another way of building these kind of things. And then obviously, digital collectibles, they're still possible to do. And what's interesting about the time component here is that you can have digital collectibles that are dynamic, that evolve over time.
00:08:58.438 - 00:10:22.594, Speaker A: So imagine a board ape that actually gets old that we funny as you keep it in your wallet getting a bit more into detail. So event ticketing what's interesting here is like as an organizer you get all of the proceeds of the ticket that you've sold it's fully end to end control by the organizer of the conference across multiple mechanisms. You can enable secondary markets or not if you want to by making the NFTs tickets non transferable you can what's interesting is that you can create interoperable experiences that apply to both the offline the in person events but also online. So imagine a scenario where only attendees of a conference can join a discord or a telegram server before or maybe you have discounts at local hotels and restaurants because they can prove that they have a ticket rather than say hey I'm at the conference XYZ, can you give me a discount? Well here you can actually prove it because you can prove that you have the NFT which are pretty cool actually example of this dapcon you probably know of this conference, it's one that happens in Germany every year. They use Unlock every year at this point and we're pretty happy to have them in here subscription so token enabled access to experience services and features it creates it's really important and critical a sustainable revenue for the business. So rather than have the crypto space, we love, like, numbers go high. Well, here you don't actually have to bet on numbers going high.
00:10:22.594 - 00:10:46.282, Speaker A: You can just sell your service to the people that are excited about using it. And we pay for mean, I'm sure we'll have cell phones and we pay for some apps in here because they provide good services. Well, you can build the crypto version of this. Obviously we support, as I said, crypto and credit card on ramps. We also support Apple Pay, Google Pay and a bunch of other similar system. What's interesting here is like the relationship between the app creator and the consumer. The app user is direct.
00:10:46.282 - 00:11:24.642, Speaker A: There is no Apple approval in the middle. If you follow a little bit, you know that uniswap, for example, took them months for Apple to approve this. Well, if you have a membership system that is between you and your customers, you can just offer that. You don't have to wait somebody else's approval. That works for content, blogs and stuff, software features inside of application, music, video, podcast, everything you can think of. Here an example of this. One of our most popular users these days, and you probably don't see it here, but it's because they charge about $300 per membership is something called Alpha Bots DFI robot.
00:11:24.642 - 00:11:52.714, Speaker A: They provide DFI insights and they have a monthly subscription that people pay for. They're at this point generating about $150,000 a year in revenue from that little app and bots that they have on Telegram. So it's actually a pretty cool use case here. Time membership. I'm sorry, time based membership. Told you a little bit earlier, no necessarily need to go much further in here. But a cool example of this is something called Cabin.
00:11:52.714 - 00:12:29.094, Speaker A: You probably know of them. It's an offline group of people that are building cabins or purchasing cabins all around the world and using them as coding spaces. And they use unlock for their yearly membership. Really cool product if you want to check it out at Cabin City. All right, summarizing again the use cases, events, event ticketing, recurring subscription, time based membership, certification, DMV like things, gaming, loyalty, attendance, NFTs and Digital collectibles. Let's move into tooling. So, Unlock set a smart contract.
00:12:29.094 - 00:13:08.806, Speaker A: That's the core. There's a ton of tools that are built on top of it that are completely optional, that you can use. Start with use a scaffolding and then remove once you're done with this. First we have a dashboard which is really the way for creators to deploy the contract without actually necessarily having to do that with code, no code tool, connect your wallet, set a bunch of terms, deploy the contract, and then can manage the contract as well. Change the terms, change the visual aspect of the NFTs, AirDrop NFTs to people that you might want to have an NFT in their wallet. We also have a similar flow, which we call the Checkout, which is a way for people to buy these NFTs. So, as I said, the NFTs can be fairly or.
00:13:08.806 - 00:13:45.870, Speaker A: It's very dynamic. So there's a ton of stuff that you can do. For example, charge, as I said, with ERC 20s, while rather than actually implement the approval mechanism, all of that you can use our Checkout UI to easily do that and support your users without having to necessarily build all of the system where they would be able to check out. You can also do build that yourself, but again use the tool that we provide at Scaffolding. More tools subgraphs I mentioned earlier so aggregating a ton of data listing members. Very useful. Here we have a JavaScript library called Unlock JS that supports deploying the contract, updating them, listing things, purchasing.
00:13:45.870 - 00:14:20.366, Speaker A: That's actually the library that we use in our own dashboard. We have the paywall and we'll go through that in a couple of seconds, which is this Checkout UI that can be embedded on any website. And we have hooks, hooks at the smart contract level so you can change the behavior of the contract. So for example, if you say every time one of the membership is sold, we double the price for the next one. That is something that can be easily done with these hooks. Existing Integration so Unlock contracts are ERC 721. I should clarify this, they're 721 plus we add a ton of feature on the base one so any existing integration that works with 721 will work there.
00:14:20.366 - 00:14:53.930, Speaker A: So if you use Ethers JS, well that should work. We're actually in the third web directory so you can use that as well. Web three JS Wagme that the example that I'm going to show the demo. I'm going to use Wagme here or any other kind of wallet that works with VSSM 21 that works. Custom integrations are available in sub application. We have, for example, a WordPress plugin that's actually pretty cool. We have integration with Magic, so the wallet provider here with Stripe, with the credit card, with Superfluid, with Uniswap and a bunch of other things.
00:14:53.930 - 00:15:16.906, Speaker A: We'll go through there and if you build something cool, let us know. We'd love to feature these integration on our end. Pretty large. I mean the typical ecosystem play. You might have seen a lot of these names already. There is ways to work with unlock in all of these projects and et cetera, et cetera. Maybe the interesting part about the networks, we're actually on nine different chains.
00:15:16.906 - 00:15:39.820, Speaker A: You can only see eight here. The 9th one is called Palm. It's not a very popular one but we have a customer that wants to use this. So we are on mainnet Polygon, Optimism, arbitram Sello, binance Gnosis and I'm sure I forgot one, but you get the logos here. Cool. Let's jump into a quick front end live coding demo. Hopefully the demo gods are with me today.
00:15:39.820 - 00:16:12.946, Speaker A: I'm going to just start by showing you what I built, which is the starting point for this exercise. I built kind of a very dummy blog using actually the one that Next features on their site as a template. So it's a blog in which I write a bunch of stories and my goal here is to token gate some of these stories. So here it's a token gating. Obviously you can see all of the content. And we're going to go through the steps that are required to token gate the content on that block. So kind of build your own decentralized substac if you want.
00:16:12.946 - 00:16:29.354, Speaker A: The first step that we're going to have to do is obviously authenticate the user. We need to know who the user is. So for this, we're going to add a mechanism for users to connect their wallet. And you can use any of the existing tools in the ecosystem. Somebody talked about Connect kit earlier. Rainbowkit actually provides this. We have a version of this.
00:16:29.354 - 00:17:00.370, Speaker A: We're going to just use that. But again, you can use the one that you want for this. Let me switch to my code editor here and get started with that coding session. I also have a very handy README here and this code is Live on GitHub. So I'm going to first maybe share that link with you guys. So if you want to look at this, come on WiFi work, please. It's going to be helpful.
00:17:00.370 - 00:17:22.360, Speaker A: Yes. Cool. And I'm pulling in because in the realme I have the step by step and I'm definitely going to use this here. So the first step is to introduce to install a couple dependencies, which I should be able to do. Yes. Cool. First step is to install a couple of dependencies.
00:17:22.360 - 00:17:40.880, Speaker A: I'm using Yarn in that project. You can obviously use any of the tools of your choice here. And I'm installing four or five different liquidities. First one is unlock protocol contracts. That's the abi the description of the contracts here. Second one is the paywall. That's the little embed UI that we'll add for people to purchase.
00:17:40.880 - 00:18:08.284, Speaker A: We have a networks package that has all of the configuration for unlocking the networks. All of these packages are completely optional. I'm using them here for convenience. You're more than welcome to rebuild whatever they provide. Ethers, a JavaScript framework that allows you to interact with smart contract wagme kind of a front end tooling for react with hooks and VM, which is similar to Wagme. I suspect the WiFi is not going to allow me to run all this. It shouldn't take that much time.
00:18:08.284 - 00:18:47.448, Speaker A: So maybe let's give it another second or two. Otherwise I'll go through the I've got a recording of that demo, but I'd rather try to show it than live. Let's actually go and copy that into the next step. So you'll see that inside of the app TSX file right now. It's the default version you offer me of this if you use Next in the past. I'm just going to add the basic configuration for Wagme, which is basically creating a client. This is nothing about unlock, right? This is not specific to unlock adding Wagme here where this is specific to unlock instantiating a Paywall object.
00:18:47.448 - 00:19:33.912, Speaker A: That is an iframe, to be clear, that will allow you to easily connect the user's wallets as connected and rainbowkit do, but also provide the checkout UI that will come into and then I'm just wrapping my component inside the Wagme config so that's available inside of the rest of the app. At this point, I haven't done much coding. The next step is to add a connect button and I'll just again copy that and we'll describe what that is precisely. But if I go to my components, I'm just going to create a new file called Connect TSX. And then I'll paste this. This connect component is fairly basic. It is using the Paywall object and looks like it's not included here.
00:19:33.912 - 00:20:03.744, Speaker A: So I'm just going to include it here to create a provider, which is the object that is being used by Wagme to connect to the wallet here. So we're also using the use connect from Wagme to again, link the provider to the application. And then we have a pretty basic logic, like if the user is connected sorry. If the user is not connected, we show a connect button that will call that connect function. And if the user is connected, we will show the address of the user. Let's see if my dependencies have been sold. Yes, they have.
00:20:03.744 - 00:20:39.084, Speaker A: Cool. Okay, so I'm going to just restart the app for the sake of making sure that everything is up to date. And now if I go to the blog, we'll see that I have not added a button yet, so nothing has changed. But I'm going to add the button, obviously to my UI. I'm probably going to add that into, say, the where should I say the intro? Let's do that here. So we have this blog and I'm just going to add the connect component here and just save and at that point you'll see that a little connect button appears here. If I click on that one, and again, the WiFi is going to kill me here.
00:20:39.084 - 00:20:59.748, Speaker A: But we're going to load an iframe it's not too bad, we say, hey, I actually previously connected. So it shows this message that I'm already connected, but I'm just going to sign in with Ethereum, the typical authentication method here. Click sign in and at that point we see. Welcome back. This is my address here. And now I'm authenticated inside of the app. That is kind of the first step.
00:20:59.748 - 00:21:14.264, Speaker A: If I click through to see a post, it's still not tokengating. We haven't done this, but at least the app knows who I am. The code size. Yes. All right, I will increase the code size a bit. Hope better. Cool.
00:21:14.264 - 00:21:46.052, Speaker A: Awesome. So user is connected now, next step, let's make sure that we can and I think it's next step, but it's kind of also actually no, we have one quick step to do. We're going to deploy a membership contract. Now I'm going to go ahead and say, okay, this is how much I want to charge for accessing the content on my blog. I created another account for this demo on here. So I'm just going to go to the unlock dashboard again, a tool that you can use to deploy your contract and manage them. I would definitely recommend that you do so.
00:21:46.052 - 00:22:11.748, Speaker A: Eventually if you want to create this, your own experience for this, you should go ahead. Cool loading. All right, I'm going to go ahead and click on Create Lock. I'm going to deploy it on Gertie. And so I'm going to do my blog membership. Let's make it last. One day I'm going to sell an unlimited amount of these memberships.
00:22:11.748 - 00:22:34.824, Speaker A: So it's not like substack where I'm going to charge every month. I'm going to start per day, but I'm going to make it really cheap, actually. Maybe something like that. It's still maybe expensive for one day. But click on looks good. And hopefully, yes, MetaMask is going to pop up and I'm going to just from here deploy the contract. As you can see the function here, MetaMask does a decent job at translating it, but it says Create Upgradable Lock ad version.
00:22:34.824 - 00:22:51.480, Speaker A: We're deploying a membership contract here on the Gurley network. Confirm here. And now we're going to wait for Gurley to mine this. Hopefully it won't take too much time. Did one earlier today. It was like 30 seconds. Fingers crossed.
00:22:51.480 - 00:23:17.344, Speaker A: Once this is done, this is my contract. It's been deployed from a factory unlock. I mean me, as Unlock would have zero control over this. Chris as Unlock would have zero control over this. It's my contract exactly as if I went to OpenZeppelin compile it and pushed it myself, except that it's deployed from a template. So I actually didn't have to do this. Template is audited verified by multiple firms, so I'd actually don't have to do any complicated things.
00:23:17.344 - 00:23:40.184, Speaker A: It has been mined, but it looks like we're taking a couple more seconds to refresh. Yay, done. And I can start managing it. Obviously there is not much to do right now because it's kind of empty, but the one thing that I will be doing is copy its address into my app. We issue a default image for the membership. It's obviously changeable. And here, once this is loaded, I mean, it's going to be an empty list, but that would be where you would see all of the members.
00:23:40.184 - 00:24:32.312, Speaker A: So I'm just going to take the address of the contract here and I'm going to bring it back to the code. Actually, I'll do that afterwards. One of the next thing we're going to do, and that's what we change here, is change the blog posts so that when somebody displays the blog well, if they're connected, we will see whether they actually have a valid membership. For this, I'm going to use I'm just going to copy that. But I'm going to use especially this function from Wagme called Use Contract Read that allows you to query through rugmy a smart contract and check whether something in the contract, I mean check the data of the contract. And so we'll just copy that into the blog post itself. No, and I'm going to do this.
00:24:32.312 - 00:24:50.876, Speaker A: And so let's actually go through the code quickly. That CLoNeT component. Oh, overwrite. Cool. Did I change this? I don't think I did, but let's see afterwards. So I'm going to paste the address of the contract that we just deployed here as the lock address here. And we'll go through that.
00:24:50.876 - 00:25:42.232, Speaker A: So basically the top part isn't changed, it's the default that we got from Next. Then we're actually going to see use the user account hook from Wagme to check the user's address and check if the user is connected. More importantly, once the user is connected, we will check using this use contract grid, the balance of the user. So basically using the argument address, we're going to check whether the user has a vetted membership. And since this is the ESC 721, we can just do a function balance off that function will return zero if I don't have a membership or if that membership is expired or one or more if I have one vetted or non expired membership. Does that make sense? Yes, we're passing the smart contract address, we're passing the Adi, we're passing the chain ID, it's on Gertie here. And we're also, for simplicity's sake, just returning a boolean rather than the number of membership.
00:25:42.232 - 00:26:13.960, Speaker A: Yes, the user should have access or no the user shouldn't have access. We'll come back to this in a second, but we're adding a function here that's called on purchase that will let the user purchase a membership unless they have one. And then we're just moving to the display logic here. If the user is not connected, we'll just show the you're not connected connect with the button that we created earlier. If the user is connected but doesn't have access, we'll just show, hey, you don't have access but you can purchase a membership. And that's when we'll call that unpurchase method that we just discussed. And if the user is connected and it has access, well, we'll just show the content of the body.
00:26:13.960 - 00:26:33.580, Speaker A: Makes sense. Nothing too fancy here. Hopefully just going to save that and move back to the live code. Actually the post is already there, it's self updated. It turns out that I'm connected, we connected earlier, but I don't have access. I'm just going to click on that purchase membership button. At that point we load the checkout UI from unlock.
00:26:33.580 - 00:26:51.412, Speaker A: Loading the UI is fine. Querying the RPC endpoint, shouldn't take too much time. Yay, we're showing this option. What's interesting here is you only see that my blog membership, but I could have had like two or three different types of membership for different prices, different tiers. Like I could have the gold plan or the silver plan. Here I just have one. We show the price.
00:26:51.412 - 00:27:04.992, Speaker A: We show it's unlimited. We show it's for one day. Click on next. I'm already identified because I connected myself earlier, I'm going to be able to change the recipient. It's actually an interesting idea where I can buy the membership. Either for me, you see, this is my wallet address. Or for another wallet.
00:27:04.992 - 00:27:22.844, Speaker A: If I want to offer somebody a membership, I can just go use that flow and then they would get the NFT in their wallet and then they can come read the blog if they wanted to. Click next here. I'm going to choose a payment method by default. Obviously we show the currency that the user has enabled here. So 0.1 ETH. But we're also trying to find other options.
00:27:22.844 - 00:27:55.592, Speaker A: And for example, we support natively, the concept of swap and purchase, which is a mechanism where if I don't have enough ETH, but I do have USDC, in one single transaction, the user will be able to spend the USDC. That would get swapped into ETH into a membership I want it's taking forever to load. I suspect this is the slow Wi Fi. There's actually not going to be a lot of other option because that wallet that I have only has Gerty ETH. Just going to click here. Seeing the confirmation screen and it's loading. Yeah, one key.
00:27:55.592 - 00:28:10.236, Speaker A: That's the name of the membership for me at that address. It's going to be 0.1 ETH. I'm just going to pay with crypto. MetaMask is going to pop up. Please MetaMask. MetaMask when you click this is actually running a simulation and that's why it's taking time.
00:28:10.236 - 00:28:28.144, Speaker A: There's a network call involved here. I'm going to spend 0.1 ETH plus a little bit of gas. As you know. Confirm here. We now have this little way screen and hopefully it won't take too much time, but you will see that right away. When that membership has been bought and the transaction has been confirmed, the content underneath the screen will update.
00:28:28.144 - 00:28:47.140, Speaker A: So hopefully again, shouldn't take too much time. But can hide this. Oh, I use a different account, I guess. I didn't even connect with the ETH Wadalu address that I had. But you'll get the confirmation anyway. Yay. So MetaMask was confirmed.
00:28:47.140 - 00:29:19.160, Speaker A: We pretty use a different ARPC endpoint. Hopefully we'll get that shortly. Yay. Return to sites and workme should update. Please workme update this. Okay, so we use this flag in Wagme that allows you to watch, that allows you to refresh. I guess it's not refreshing here.
00:29:19.160 - 00:29:53.700, Speaker A: Let's refresh the page just to make oh, what is going on here? Timo effect full force. What's going on? Did I mess up my why is window is not defined? Of course window is defined. All right, let's actually hide this for a SEC, baby. All right, I'm confused about this thing. Okay, connect my wallet again. Oh my God. That's when things breach.
00:29:53.700 - 00:30:08.680, Speaker A: That's the one that I used. Connect. Well, yeah, I should be fine. Is this the WiFi. Yeah, it was the WiFi. Okay, sign in with wallet. All right.
00:30:08.680 - 00:30:28.716, Speaker A: Going back to the blog post. What is going on here? I'm confused. I pre made a mistake somewhere in my code here. But let's refresh that page so I am not connected again. Just going to uncomment this. Connect. Yay.
00:30:28.716 - 00:30:54.726, Speaker A: Sign your wallet. Sign again. I do have the membership though. All right, well, maybe there is a little something that is not working as I wanted to. I'm just going to double check this. If it's my code, maybe there's something here and show the address as access. False.
00:30:54.726 - 00:31:21.534, Speaker A: And 61. That's the address that I'm connected with though. Good wallet. That's mainly what I was thinking. But it looks like it's the same one though. If you look here at 61 and then 61 here. So looks like when I created a contract, maybe I didn't know right the wrong one.
00:31:21.534 - 00:31:58.744, Speaker A: Okay, let's do it again. This one? Yeah, it looks like this one doesn't have one. So I guess I didn't buy with that one before. Confirm Google's being blocked normal. I don't know why. Go ahead. Mint.
00:31:58.744 - 00:32:19.592, Speaker A: Mint. Mint. It has minted now. Yay. You see now? So I can close. Now I have access to their content. Don't know what happened the first time, but now I have access to their content.
00:32:19.592 - 00:32:36.364, Speaker A: Cool. Makes sense. All right, one final step. Obviously I go back to the dashboard. You see there's two I guess I'm bought with that other address, which is you're, right? I think it was a different address. I don't know why I did this, but I have two members that were my blog. They're both me.
00:32:36.364 - 00:32:55.488, Speaker A: You can see when they expire, both of them. And I can do a bunch of things. So I'm not connected as the lock manager anymore. I switch account. But if I go back to that account that I had, the ethwoodal one, which is the manager for this, I am a manager again and I can do things like extend refund. So it's like, oh, this person actually didn't want one. I can refund them if I wanted to extend their membership.
00:32:55.488 - 00:33:15.036, Speaker A: I can do a bunch of different things as well. A fun thing to do is, as I said, inside of unlock the transferability is really something that is programmable. And we have the concept of the owner of the NFT. So owner off in the US. 721 cents. We also have the concept of a manager of the NFT. And it could be that the owner owns the manager has the transfer, right.
00:33:15.036 - 00:33:40.788, Speaker A: So you can make it so that my hot wallet is the owner. I can show around and like, look, I have this NFT, the manager, the person that the address that I took transfer right, is my cold wallet. And this is maybe something that I store at home or somewhere else, making it a lot more secure. So if my hot wallet gets compromised. My NFT is not lost. I can just go to my cold wallet, transfer the owner from this previous hut to the new hut, and keep it safe where I'm at. So that's one thing that I can do.
00:33:40.788 - 00:33:58.170, Speaker A: Obviously, you can also transfer the NFT as the manager here. Makes sense. So that's kind of the rough demo. Again, sorry about the little issues. Let's go back to the slideshow. So live coding. We did this kind of worked.
00:33:58.170 - 00:34:14.872, Speaker A: It's loading YouTube here. So forget about that slide. We also have, as I said, ways to do backend and smart contract. I'm not going to go into details, but there's actually a video here. You're more than welcome to check that out. Mention the hooks. The hooks are ways to alter the behavior of the contract when there is a new membership being purchased.
00:34:14.872 - 00:34:39.332, Speaker A: I'm going to try to make speak even faster. We can change the behavior on cancellation, change the determination whether a membership is vetted. So you can say it's vetted only if it's Tuesday. Well, okay, a membership is vetted only if it's Tuesday. You can easily do that on the Smart contract. Quick video that we have. You're more than welcome to show up on our booth for more details, resources okay, quick point.
00:34:39.332 - 00:35:08.304, Speaker A: If you want to add any kind of monetization to your project, just use unlock. That's the way to do this. As a creator, we have a dashboard that you can use to deploy membership, sell verify tickets, all of that. Add credit card processing. If you want to allow for people to pay in Fiat, you can check this checkout URL, which is similar to what we had in that model. And as a developer, you can integrate directly into your smart contract, into your front end, into your back end, and all kinds of application. Quick inspiration unlock live here.
00:35:08.304 - 00:35:36.404, Speaker A: Live Here. Live streaming. You can create hey, something where I live stream and every from time to time, only the members can see their content. Unlock plus lens create kind of token gated posts. Unlock plus Xmtp messaging, so only messaging to subscribers, et cetera, et cetera. Other inspiration you can create NFT lending platforms, subscription tools for people that have multiple subscription. A fun thing to do is like, you can have voting just for people that have a specific NFT with Tully, et cetera, et cetera.
00:35:36.404 - 00:36:03.410, Speaker A: We have prices and the hackathon, so please build on top of this and hopefully you'll earn some of these team members. Myself. Jungian chris in the back. Kelly in the back as well. Michael at the booth right now, and Shelly was hopefully making it from Montreal, where she's based. Scan these YouTube tutorials, so you're more than welcome to scan that QR code. You can look at my face even more if you really want to.
00:36:03.410 - 00:36:37.916, Speaker A: We also have docs and tutorials. So again, take a picture. Scan that as well if you want to. Go to our doc site, where there's a bunch of obviously guides and tutorials and details about this protocol, and then we have full creators. Kind of a lot of no code guides that let you do a bunch of things from Token getting Discord server all the way to A WordPress, et cetera, et cetera. We're available on Discord, so if you don't find us at the booth, feel free to ping us on Discord. We have team members all across the world, so someone will be awake at 03:00 A.m.
00:36:37.916 - 00:36:42.490, Speaker A: To help you if you're stuck. And that's pretty much it. Thanks for your time.
