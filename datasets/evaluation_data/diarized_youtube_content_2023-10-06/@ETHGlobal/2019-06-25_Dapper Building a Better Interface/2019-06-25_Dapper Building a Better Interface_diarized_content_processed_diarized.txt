00:00:00.330 - 00:00:16.030, Speaker A: You. So to start in 2017, we released CryptoKitties. Does anybody here own a CryptoKitty? Raise your hand if you do. Cool. Awesome. If you don't know. CryptoKitties is a game where you can collect and breed digital cats.
00:00:16.030 - 00:01:00.720, Speaker A: Our goal is to make it fun and easy for people to access the blockchain and to learn about the blockchain. And before we released CryptoKitties, we knew there would be some roadblocks to people getting started, especially for people who haven't used crypto before. This is kind of what we thought the steps would be. If you're a brand new user, you don't have any crypto, you don't have a wallet. We thought people would have to download a wallet, get some ETH, learn about the game, start playing. But as more and more people started to play CryptoKitties, we kind of realized it was a little bit more like this. There's actually not just five more like ten or 15 steps or ten or 15 things that you have to learn about before you can actually play the game.
00:01:00.720 - 00:01:37.450, Speaker A: You have to learn about gas. You have to learn about transactions. You have to save your keys and back them up somewhere. You get all these scary messages saying, like, oh, if you lose these keys, you're going to lose all your cats, you're going to lose all your money. Scary for new people. And there's just a lot of roadblocks to getting started and unsurprisingly this kind of dissuades people from playing the game. So most people who were playing CryptoKitties and who continue to play CryptoKitties use browser based wallets.
00:01:37.450 - 00:02:09.538, Speaker A: And we refer to these as client side wallets because the keys are stored entirely in the client in the user's device. And they're really popular, as I'm sure you know, because they're really simple and they're easy to set up. They don't require any back end infrastructure. There's no cost associated with getting started. You just generate a seized phrase, it's free. But there's some pretty significant downsides to these. The key that controls your account is a single point of failure.
00:02:09.538 - 00:02:41.748, Speaker A: And in the same way, the backups for your account are single points of failure. Lose your device or it gets compromised. Everything associated with that key is gone. On top of all that, new users need to acquire ETH before they can get started because they have to pay the gas for their transactions. There's no flexibility around that. And we looked at ways to increase the security of client side wallets. And these are just a couple of the ways you could key split backups.
00:02:41.748 - 00:03:05.632, Speaker A: You could have cold wallets where you keep most of your assets, and hot wallets where you do day to day stuff. But these things are just too complex for normal people to use. And on the other side of the spectrum, there's server side wallets, the Coinbases of the world. A lot of people use these, too. They have familiar user interfaces. So you got that on your side. If you forget your password, you're fine.
00:03:05.632 - 00:03:28.872, Speaker A: You don't have to worry about storing your keys. You don't have to learn a whole bunch of things. You just sign up with an email and password and you're good to go. But as we all know, these have some pretty significant problems too. They're really big targets for attack. Some of these servers store keys worth tens or hundreds of millions of dollars. It's just a matter of time before somebody's going to break in.
00:03:28.872 - 00:04:09.776, Speaker A: And they have, they will continue to do that. And ultimately, and possibly more importantly, if you don't hold the keys, it's not really your crypto. And there are some ways to combat this as well. You can encrypt with a client side key, the key that's held on the server, but then you can't reset your password. Again, we think these compromise ease of use a bit too much and they aren't really feasible for most people to use. And the main problem with all these things is key storage. There's often just one key that holds the key to the kingdom.
00:04:09.776 - 00:04:35.710, Speaker A: If you have the key, you have access to everything. If you don't, you have nothing. And key storage is really hard. It's a problem that we've known about for a long time. It's not new to crypto, it's not going away. So we think the best solution is not to come up with some new way to approach key storage, but it's to design systems where the individual keys aren't as important. You can lose a key.
00:04:35.710 - 00:05:29.692, Speaker A: You can have a key be compromised and not lose access to your assets, not lose access to your wallet. And so shortly after CryptoKitties was released, we set out to come up with a solution that accomplished all these things and in doing so, still maintained a really good user experience. And throughout the design process, we kind of kept in mind these three main design axioms. There should be no single point of failure. There should be no one key that you can lose where you lose access to your whole account. You should be able to have a key be compromised, you should be able to have a backup be compromised, and you should still be able to get back into your account. But even with that being the case, the end user should still always be in control.
00:05:29.692 - 00:06:12.140, Speaker A: So even though they can lose a key, they still have all the keys they need to have access and control over everything in their wallet. And on top of that, it has to be easy to use and has to be fun because otherwise nobody's going to want to use it. And that's why we built Dapper. So Dapper combines some of the best ideas in the space with a flexible smart contract. And the smart contract is going to be open sourced as well. We've used the smart contract in our product, but we hope other people will use it in theirs as well. And we use that to create a wallet that's easy to use for everybody, but also easy to keep yourself secure.
00:06:12.140 - 00:06:43.540, Speaker A: And this is kind of the very, very high level architecture of Dapper. And there's kind of two parts to this. There's the smart contract, which is designed to be really simple, really flexible and composable with other systems. That's the part that we've open sourced already. And the second is the Dapper product. That's the extension, the Backend in the future, more platforms. And we built that on top of the smart contract.
00:06:43.540 - 00:07:29.310, Speaker A: It's designed to work with a particular configuration of the smart contract. But the smart contract wasn't exactly designed for the product. And the product doesn't exhaust all the possibilities of the smart contract, which is why we're open sourcing it so other people can kind of go down different avenues with it. And this is what Dapper looks like if you hadn't had a chance to check it out already. It's a familiar user experience and UI, it looks like products people are familiar with. But behind the scenes, there's a lot of cool technology with a smart contract making it easy to use and easy to keep secure. For the rest of the talk, I'm going to mostly focus on the smart contract itself.
00:07:29.310 - 00:08:01.668, Speaker A: So this is at a high level what the architecture looks like. As you can see, it's pretty simple. We spent something like six months rewriting it to get it pared down as much as we possibly could. So it's easy to understand and easy to reason about. There's two components to it. The first is the recovery component. Recovery allows you to have an offline or online recovery key that can be used to revoke all access to anybody else who has access to your wallet and set a new key.
00:08:01.668 - 00:09:00.680, Speaker A: That is the only key that has access to your wallet going forward. So it revokes access to everything now and gives one device access in the future. And the authorization system is just a way to allow keys or allow other smart contracts to interact with the wallet and access the wallet's assets and so on. So digging in a bit deeper into the authorization system, it's a two of two signature scheme. So you can either have we call these guys child keys because they're kind of like sub keys of the contract. You can have a child key with a cosigner key where you need both signatures to perform some action, or you can have a cosigner contract or you can have no cosigner at all. We think most people are going to want to use these two options, but you can still get some benefits from the contract without having a cosigner.
00:09:00.680 - 00:09:49.240, Speaker A: And the recovery is even simpler. There's one key. Again, it can also be a smart contract and it just revokes access to all the authorized keys that are on there already and sets one new authorized key to be the authorized key going forward. So now I want to talk about some of the different configurations of the smart contract that you can use to implement kind of different security models. The first one, you might have thought of this already, it's kind of the most obvious case. You can do multidevice strong two FA. You just have one of your keys on a primary device, one on a secondary device, and you require both devices consent before you can perform some action.
00:09:49.240 - 00:10:57.444, Speaker A: On top of that, you can actually have this point to another contract. And that contract can further implement arbitrary N of M threshold signature schemes too. And by setting the Cosigner key to point to an on chain validator contract, you can implement arbitrary validation that's enforced trustlessly on chain by that contract. So some examples of this are you could require that certain of these child keys can only access certain DApps. You could have a daily spend limit, you could have a challenge period before large withdrawals, all that kind of stuff. And the same idea can be applied to off chain validation. So in the same way that you can have a contract validate your transactions, you can have an offline service hold one of these Cosigner keys and validate your transactions off chain before signing them.
00:10:57.444 - 00:11:43.868, Speaker A: This is a bit of a trade off in terms of sovereignty, but it results in way more flexibility in what kind of validation you can do. And you obviously save a whole bunch of gas because you don't have to run everything through another smart contract. And this is actually the way that we have leveraged the authorization system for Dapper. We provide fraud prevention and automatic gas management. So if somebody submits a transaction that withdraws all your money from your account, maybe we'll request additional authentication before letting that go through or have a wait period. Or if somebody sends to a known Scam address, we can let them know about that. And we can also intelligently select the best gas price based on network conditions.
00:11:43.868 - 00:12:31.930, Speaker A: Somebody sends a transaction and then all of a sudden the gas price spikes. We can adjust accordingly in real time without any action on the user, on the part of the user. And if you're really paying attention, you might have noticed that there's a bit of a problem with that last scheme I just showed you. Since the Cosigner is held by a third party and you need both the Cosigners and the child keys permission in order to take some action, the Cosigner can just stop signing stuff, right? And then you don't have access to your wallet anymore. And we have a solution for this problem. We actually have several. This is just one.
00:12:31.930 - 00:13:23.236, Speaker A: There's different ways you can do this that have different trade offs between whether the user or the service has more control. Ultimately, this is my personal favorite because it gives more control to the user. But using the recovery system that I talked about a bit earlier, you can have the recovery key point to an escape hatch contract. And the escape hatch can detect when there's malicious behavior. And you can detect that simply by seeing if there has been a long period of time where nothing has happened on the wallet. Because if your Co signer stops signing transactions for you, you're not going to be able to do anything and your wallet is going to have no transactions on it. So as a user, you can send a challenge to this escape hatch contract.
00:13:23.236 - 00:14:05.778, Speaker A: You can say, hey, I think the Cosigner is being malicious, note down the block number and note down the wall's current nonce. And then you wait some period, send another transaction to it. If the nonce is not changed, then that's an indication that there's malicious behavior on the part of the Cosigner. And the escape hatch contract can initiate the recovery, revoke access for the Cosigner and get you back into your wallet. And this is another recovery scheme. This is the one that we currently use for Dapper. So the recovery key can be created on the user's device.
00:14:05.778 - 00:14:50.722, Speaker A: When the wallet is created, it can sign a recovery transaction which will set that new authorized device key to be this backup key. And since this has so much power, it can perform recoveries. So it's quite a high risk key, we immediately destroy it. We hold the recovery transaction so that we can go through the whole process of performing the recovery for the user. And the user holds the backup key in the form of a rescue kit PDF, which is similar to one password if you've used that. So similarly to the authorization system, you need both of these pieces to actually get access to the wallet. And they're held in two separate places.
00:14:50.722 - 00:16:33.820, Speaker A: If one of them is ever compromised, you can go through this whole process, you can go through this whole process again, reset the recovery key, recreate the recovery transaction, recreate the backup key and you're back to a good security posture. And the last thing I want to talk about is this notion of flexible sovereignty. So I kind of made up this definition. But the idea is the ability to have a single wallet or a single address that can accommodate different levels of sovereignty all the way from centralized, where somebody else holds your keys, to fully self sovereign, where you hold all your keys and have that be the case without ever needing to compromise security. So the reason this wouldn't work for a traditional wallet is if you start out, if you get onboarded into an application and a wallet is created for you and some centralized service is holding the keys, then they have the keys at this point, right? And they may give them to you in the future, but you have no guarantee that they got rid of them. If you use a smart contract, you can revoke access to those keys and create a new set of keys for yourself. And then you can be completely certain that even though previously your account may have been centralized and held by some third party, you can know that going forward, you're still okay, and they can never get access to your account again.
00:16:33.820 - 00:17:09.046, Speaker A: And that's all I got, so thank you a lot for your time. I'm going to be around for questions afterward, you can also come grab me. We got a booth around the corner. And before I finish, I'm just going to mention we have some Bounties for integrating Dapper and also for integrating CryptoKitties. Three Bounties. Two of them are $1,500 and one of them is $1,000. And you can come grab me afterwards for more details or help.
00:17:09.046 - 00:17:09.700, Speaker A: Thanks a lot.
