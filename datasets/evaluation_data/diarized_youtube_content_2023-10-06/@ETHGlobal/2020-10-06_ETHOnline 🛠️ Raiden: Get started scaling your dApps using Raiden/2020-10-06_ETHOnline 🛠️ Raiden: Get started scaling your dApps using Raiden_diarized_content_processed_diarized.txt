00:00:03.930 - 00:00:31.400, Speaker A: Hello and welcome everyone, to the Raiden intro workshop titled Introduction to Raiden scaling Your DApps Using Raiden. Joining us today is Jacob, who will be taking us through this session. One quick reminder to everyone to stake their spot for ETH online. If you're having any issues, please do not hesitate to reach out to myself or anyone on the East Global team. And with that, I'll pass it over to Jacob to introduce himself and get the session started.
00:00:34.410 - 00:01:23.094, Speaker B: Yeah. Thank you, Emily. Let me just share my so, does anyone or everyone see my screen? Hopefully? Great. Yeah. So I'm Jacob, I've been working with Raiden for four and a half years now and yeah, I'm here to give a workshop on the current state of Raiden. And we'll be mainly focusing on using Gurley, since that's definitely more suitable for hackathon than Mainet. If there throughout the hackathon the workshop are any questions, please do not hesitate to ask them.
00:01:23.094 - 00:01:55.118, Speaker B: I'll just see if I can find the chat somewhere. Here it is. Yeah, as Emily already said, please throw the questions in the chat or interrupt me if there are any questions along the way. Sure. So let's get started. I'll give a brief introduction to Raiden itself for those who are not familiar yet with it. And then we'll talk a bit about setting up Raiden.
00:01:55.118 - 00:02:24.438, Speaker B: Then there'll be a quick walkthrough of the Raiden API. So, like showing you guys what you can do with Raiden. And then we'll do a quick session with questions and a brainstorm for those of you who are thinking about building on Raiden. If you have any questions, we can talk about that. And also I will do a quick overview of the prices for the hackathon as well. So, yeah, let's get started. So, Raiden is a payment channel network.
00:02:24.438 - 00:03:08.866, Speaker B: Exactly what that means, I'll get into a bit later, but most of you probably heard about state channels or payment channels in one direction or two directions. Raiden is bi directional payment channels in a network and that makes it quite powerful. But how that works, I'll get back to soon. So what we do right now, what is cool about Raiden is that it enables any kind of token, ESC 20 token, to be exchanged between counterparties off chain. So this can take a lot of load off the Ethereum mainnet itself. Raider works with any ERC 20 token. In theory.
00:03:08.866 - 00:04:21.070, Speaker B: At the moment, on Mainnet, only die and wrapped Ether are supported. But on Gurley, if you're running the development version, which is the one I recommend using for the hackathon, you can register your own tokens, use whatever ESC 20 token you want. So this is quite powerful and in the future it's also planned that all ESC 20 tokens will be registered or can be registered on demand on Mainnet. So, as most of you have probably noticed recently, the gas prices have been quite insane on Ethereum, especially due to the DeFi craze and whatnot. So one of the big things that Raiden solves here is that you can do transactions off chain only, ESC. 20 token transfers though. So there is a limit to the logic that you can perform, but we still believe that it can significantly help Ethereum scale and take load off the main net to use Raiden.
00:04:21.070 - 00:05:04.494, Speaker B: And another thing, it's quite fast as well. So you do subsecond or around a second per transfer and you don't have to wait for the blockchain to finalize your transactions. As soon as you receive a payment from your counterparty, you have a valid proof that you can always claim on chain. So we consider transactions more or less finalized as soon as you have this claim. Yeah. So a payment channel in Radiant is always backed by an on chain deposit. So this deposit represents the value that can be transferred in one direction in a payment channel.
00:05:04.494 - 00:06:02.862, Speaker B: So in this specific case, we have Bob who's got two usage running tokens, and Alice has four. And this is how the channel starts out, for instance, so the total amount that can ever be like the maximum amount that can be sent in a transfer would be six in this case. But Bob could send two in this case to Alice and then Alice could send six and they could do that back and forth thousands of times. It's only the final netted balance that will be put on the blockchain. So here we do this with what we call balance proofs. So in this specific case, Alice now sent two tokens to Bob with a balance proof representing that. And that's how you always can take these balance proof to the blockchain where the Radiant Smart contracts can interpret these balance proofs and will then pay out the correct amount in the end.
00:06:02.862 - 00:07:06.146, Speaker B: So the only interactions you have with the Ethereum blockchain when using Radon is for opening channels, depositing to the channels and then closing these channels. One other thing you can do in the middle would be to either top up channels or partially withdraw some of the funds from a channel. So the reason we did that is that people it's quite expensive to close channels and it takes time. So it's nicer that you can always just add funds or remove funds from your channels without closing them. So, so far we only focused on channels between two parties. But what makes Radin really powerful is the fact that you can have payments that go through several nodes. So for instance, in this example here we have Bob that has a channel through or a path through D and I to H, for instance.
00:07:06.146 - 00:08:14.138, Speaker B: So that means that even though Bob is only connected to Alice, Charlie and Doris, he can still make a payment to H if there is a path in the network. Basically, sorry, there was a question, I don't understand the question. The question is, are there plans to do state channels as well. Okay, maybe that's more like if we plan in Raiden to have generalized state channels. And the answer to that would be at the moment, no, we're more focusing on this specific use case. And question two from YouTube, is it the ethereum version of the Lightning network? You can say so it's based on the same fundamental ideas as the Lightning network. And how does this compare to roll up question I will take in the end? It doesn't compare, really.
00:08:14.138 - 00:09:03.850, Speaker B: It's two very different technologies. But let's talk about that in the end. So yeah, what I was saying was that what makes great and powerful are these mediated transfers. You only have to have limited amount of payment channels open. That then allows you to basically transfer to everyone in the network. And I think this is the true power of Raiden, that you can use it to pay everyone who participates in Raiden without having direct channels with them. So the current status of Raiden? In May we launched Alderan, which is more or less a feature complete version of Raiden as we envisioned it from the beginning.
00:09:03.850 - 00:10:13.970, Speaker B: This specific version had what we call monitoring services and pathfinding services that were new items. And the pathfinding services is some nodes that you can request paths through the network from. So that means that if you have a lie client or your node is not always online, you can use these pathfinding services to request a path from one part of the network to another one for doing mediated transfers, and the second one is monitoring services. This works a bit like Watchtowers in Lightning, so you can ask for a specific channel to be monitored. And then this monitoring service will keep an eye out. If your counterparty closes a channel when you're offline or something, then he will react on your behalf. So these two items were things that we definitely needed in order to be able to implement something like a like client of Radon, which we are currently working on, which is a full Raiden implementation in TypeScript, where we cannot expect users to be online all the time.
00:10:13.970 - 00:10:54.994, Speaker B: So we try to circumvent this with pathfinding services and monitoring services. Yeah, that was a brief introduction on Raiden. I don't know if there are any questions to this. If there is, then please interrupt now. Nothing right now. All right, there's a question from you too. What's the current user experience like? Can it just be plugged into MetaMask using custom RPC? At the moment, not, but the like client will do that.
00:10:54.994 - 00:12:03.558, Speaker B: So the like client that we're working on basically uses MetaMask and then you sign the session when you start. And we use derived subkeys so you don't have to sign every single thing you do in the like client, which is pretty nice because Raiden needs to sign quite a lot of messages. So the like client will run in the browser using MetaMask. But the Raiden Python client, which is the one that is currently in the best shape, is a full client that you run locally on your machine that you provide a specific or your desired SRPC endpoint to. But I'll show you that in just a moment. So for setting up Raiden, I shared already in Discord a link to setting up Raiden. But basically we have this wizard.
00:12:03.558 - 00:12:47.574, Speaker B: The Raiden Wizard is a small script we made that allows users to just run the script and that will then on Gurley font this node with some girly f some wizard token that we call it. That's just an ESC 20 token that you can use for the purpose of the hackathon and for this workshop. And it also gets some service tokens, we call it. This is what you need to pay the pathfinding and the monitoring service. So this is a very convenient tool to get up and running with Raiden. And there's also a quick start guide that you can use here that explains how this works. But, yeah, you can find this in Discord.
00:12:47.574 - 00:13:31.154, Speaker B: I posted it just before the workshop started. It takes a couple of minutes, probably five minutes to set it up. So you should start doing that if you want to interact. Later on in the workshop, there was another question, I think. So monitoring there was another question. Monitoring service seem essential. Is there a downside to having your channel monitored as an end user? I don't think there's like the downside would be that you share all your balance proofs.
00:13:31.154 - 00:14:32.410, Speaker B: So that would be all your payments. You share those with the monitoring service. So you could say that you might lose some privacy for some assurances of safety instead. Then there's a question about when I anticipate the sorry, there's a question about when I anticipate the like client will be released and if it will be before end of year. I cannot say that. I think everything that is released on Mainnet in Ethereum is very hard to predict when it's ready to go out and how long time it will take. At least that's something we've learned from experience so far with the Raiden Python client.
00:14:32.410 - 00:15:32.314, Speaker B: All right, let's move on. So for starting, if you rather run Raiden without using the wizard, you can start it like this. You can download Raiden and then you run it like this. I'll share the slides afterwards, so you don't have to worry about not following right now on this, but I would definitely recommend using the Wiz it to get going. All right, then a quick walkthrough of the API first, like an overview of the different API calls or what you can do through the API. You can query a node. You can get the address of a node, for instance, just standard node information.
00:15:32.314 - 00:16:07.910, Speaker B: Then you can query all the channels for a specific node. You can query channels for a specific node for a specific token. So you can see all the dai channels or all the wrapped ether channels, whatever token you're interested in. You can check out all the channels that are open. Then you can check a specific channel. So the status of a specific channel, that will be for a specific token network with a specific partner. You can see all the registered tokens, you can see all the partners you have for a specific token.
00:16:07.910 - 00:17:02.780, Speaker B: Then you can register a token. So registering a token, if you have a token that is not yet on Raiden, then you can register it. And this basically sets up a token network for a new token. You can open channels, you can join a token network. This is just a convenience call that allows you like if you use this, it will open channels with three existing nodes in the network and then it will reserve 40% of the funds that you open or you join with will be reserved for other people that can join you later on. So this is just a convenience for joining the network, but not something you have to do. You can deposit to a channel, you can do payment, this is the big thing.
00:17:02.780 - 00:17:44.370, Speaker B: Then you can do partial withdrawals, which I mentioned earlier. This allows you to pull funds out of the channel, but you don't have to close the channel. So that could be very convenient. If you're a shop or store of some kind and you get more funds into your channel than you're putting out of your channel, then you can withdraw some of it every month or every week in order to pay your bills or whatever. Then you can query all payment events. So you can see all previous payments, you can see the outgoing payments, the incoming payments, the failed payments as well. You can close channels.
00:17:44.370 - 00:18:13.946, Speaker B: And lastly, you can leave a token network. What this will do is it will automatically close all channels that you have open in a token network. So this is the opposite kind of to joining. Now, I'll just go through a couple of examples. So a typical channel object would look something like this. There will be an Identifier of the channel, there'll be a token network Identifier. So this is for every unique token network.
00:18:13.946 - 00:19:24.514, Speaker B: So that you cannot have double spend or you cannot use the same balance proofs in different networks. Then there's the address of the partner, there's the address of the token, there's the balance and the total deposit. The total deposit shows how much you've deposited in total and the balance shows how much you have right now. So based on this, we can calculate that there's probably been 1 million tokens transferred, 10 million tokens transferred in this specific case. Then the state which shows it can be either opened or closed and they will be settled once settlement has passed. Then there's the settlement timeout or settled timeout this is the period of time after you call close in which your counterparty can provide his last received balance proof. And the reveal timeout is for these you have these secrets because we use these hash locked messages.
00:19:24.514 - 00:20:21.420, Speaker B: So this is just the timeout. On revealing a couple of examples on how to use the API. Here is how you can open a channel by just putting on the channels endpoint and providing the partner address, the token address, the total deposit and a settlement timeout which would then give the response of the channel. As we saw before, you can query channels. So that was what I talked about before that returns a list of open channels, querying a specific channel. So this would be in the first case it would be just all the channels for a specific token and in the second one it would be the specific channel of a token address and your partner address. I actually have a couple of examples of this here.
00:20:21.420 - 00:21:21.210, Speaker B: So if we want to see all the channels, in this case I have two channels open slightly, the API is slightly or the return of the object is slightly different than in the slides. Because we recently updated this, I just realized. But this gives you an idea and for an overview of all the payments we can see here I just did a couple of payments. Let's do a payment and check that out. Then let's send 13 and let's say the Identifier be lead. This should then here we did a payment that was quite fast as you could see. And if we then look at the list of payments, we should see here that we had an event payment sent success with the value and the Identifier we specified.
00:21:21.210 - 00:22:03.580, Speaker B: And we can also see this represented in the Raiden web UI. So this is kind of referring to the question about the UX. This is just a sample implementation we've made for the people who rather be able to see and feel what is going on. Here you can see that we recently sent 13 tokens to the second node that I have here. And we can see here that I received 13 tokens. And in this UI you can also do payments. So let's do a payment here twelve.
00:22:03.580 - 00:22:43.958, Speaker B: And see here it's pending going through and also here we receive twelve tokens. So in general payments are quite fast in Raiden and they're very cheap compared to on chain transactions. Yeah, so that was a bit about this. Yeah, doing payments, I just showed that. But basically what you need is the token address that you want to or the token you want to send. And of course the target address. The target address can be someone that you're not directly connected to.
00:22:43.958 - 00:23:53.390, Speaker B: If there is a path as I explained earlier, and the payload would be the amount of tokens and you can then optionally also provide an Identifier that can be convenient if you want to make sure that a specific payment is going through. Yeah, this response we already saw. I also showed you how to check out the payment responses. So I think that is like a brief introduction to I think this is like a brief introduction to the API. Then there's a question what is the partner address? So the partner address, that would be the address of the counterparty in the channel. So for instance, if we look at it in the web UI, I have some channels open here. Actually it's probably better to show you slides if we go back to the overview.
00:23:53.390 - 00:24:37.402, Speaker B: So here A and B. So if I'm looking from the perspective of A, then B would be a partner address and F would be a partner address. So it's just the representation of a channel where B is the partner in this specific channel between A and B. I hope that answers the question. And then of course, as I said, there can also be target addresses. So that would always be the target of a payment, but not necessarily someone who you have a direct channel with. How much gas cost? I'm not sure I understand the question.
00:24:37.402 - 00:25:07.486, Speaker B: So there are different things. The payments itself have no gas cost because Raden is off chain. So Raiden is represented through off chain payment channels. So doing payment back and forth is free. There's no gas cost on that. There's a gas cost, of course on opening channels because that's a blockchain interaction. Depositing is a blockchain interaction.
00:25:07.486 - 00:25:49.060, Speaker B: Closing is a blockchain interaction. So you pay for those actions. So you have to make sure that it kind of makes sense to open a channel. If you open a Raiden channel just to do one payment, it is definitely not financially viable. But if you open a payment channel and do 1 million transactions you're saving a lot of gas. I can post this precise gas prices after the presentation if you're interested in that. But the important takeaway is that Raiden payments in itself are free.
00:25:49.060 - 00:26:42.680, Speaker B: Then there is a question about if rating can be used with Remix. I'm not sure how. So Remix is a solidity IDE as far as I'm concerned. And you're not really interacting with the only thing you do with Raiden is to interact with the smart contracts but you're not programming or specifying any logic for Raiden in Solidity. That has already been done by us. Then there's another question about the just jump into the questions part already. Then there's a question about the like client.
00:26:42.680 - 00:28:16.368, Speaker B: If the like client will provide users with Path without having to run a full node and will the like client users have to stake collateral? So the Pathfinding service that I mentioned earlier is what will make sure that the Light client can find paths. So the Pathfinding service is a service that is running I think right now there are four Pathfinding services running on mainnet and you then make a request to the pathfinding service to give you a path from your node to the desired target. So that could be a path that says Alice, Bob, Charlie. So you don't need to have the full picture of the network at all points in time. That's the purpose of introducing the pathfinding services and the monitoring services, as I mentioned, they are there because if your node is not online and your counterparty closes a channel, you need to be able to react to that and provide the balance proof that you receive from your counterparty. So to answer your question briefly, light clients don't have to run a full node if they are subscribing or using pathfinding service, which is the default behavior. And you don't need to stake collateral to use like, client.
00:28:16.368 - 00:29:48.030, Speaker B: I mean, I'm not sure what you especially mean by staking collateral, but you still need to of course, deposit tokens that can be used in Raiden, but other than that, no. How many channels are there right now? That depends on which token network and which is it, the main net or main net or testnet. The Wis token that I showed before does not have a lot of channels because we just set up that up last week for the purpose of the hackathon. All right, any other questions right now? If not, I would like to you can check out the docs on Docs Raiden network. That's also a good place to start to learn about Raiden in general. We also have a developer portal where you can go and get started, some guides on how to get started. And if there are no more questions right now, I will just mention the prizes that we have for the hackathon and then we can do a quick brainstorm on ideas for hacks if you're interested in that.
00:29:48.030 - 00:30:55.896, Speaker B: But the prices we have is $2,000 in RDN for the best hack that utilize Radiant to scale payments. So this is a very broad price and it's basically up to you how you want to use Radiant to do easy 20 payments. So if you can come up with some creative way to do payments or to offload some of the load on the Ethereum network with Raiden, that would be great. But it could also be just, I don't know, it could be an electric scooter paying every minute of electricity it uses through Raiden, stuff like that. And we have a blog post with a list of ideas it's from a year ago, but there are still a lot of great ideas in that list. And you can find this under the price section. If online, then the second price is $2,000 in RDN for the best hack that combines DFI and Raiden.
00:30:55.896 - 00:32:30.290, Speaker B: So this could, for instance, be something that replicates a DeFi protocol on top of Raiden or some cross chain radian transfers like Xdai Bridge. And this price we think is quite interesting with the current hype around DeFi and it could also be a good chance to combine Raden with some of the other projects that are sponsoring the hackathon, like Urine Compound. And yeah, we have some good ideas on this as well. And feel free to ask in the Discord Channel if you're interested in some of these ideas. We personally think it could be fun to have proxies that convert your Dai into CDI and then you basically earn fees on your deposits in Raiden while they are deposited. So your funds are not just standing still doing nothing while they're deposited in Raiden, but you basically have yield earning deposits while you can still transfer Dai, for instance, in Raiden. So these are some of the ideas that we think could be interesting to explore and we see quite a big potential for stuff like this to help scale some of these DFI solutions as well.
00:32:30.290 - 00:33:37.744, Speaker B: And for both prices, there will be $500 price in RDN for the runner ups. So $5,000 in total and should be some interesting opportunities to hack on Raiden, definitely. So this is mainly it for me. I still have 28 minutes, so if there are any people who are interested in brainstorming some ideas or pitching ideas, I'm here and I will be happy to listen to them and I'll also be happy to play around with Raiden for a bit. If someone wants to do some payments or receive some payments, try it out. I will happily give some help here, but if not, yeah, I'll hang out here for a bit and otherwise thank you all very much for joining and do not hesitate to join the Discord Channel and ask any kind of question you might have. There's a question.
00:33:37.744 - 00:34:26.650, Speaker B: You mentioned that opening a channel would require gas, but will roll ups complement Raiden in such a way to make the process of opening and closing channels significantly less expensive or even near zero? That is a good question and also something we're very interested in looking into if we could put Raiden on some kind of roll up, I don't think it's impossible. And we had another hackathon where one of the hacks was to actually try to do this, so it's definitely an area we could and will look into regarding making it cheaper to open channels. So if this is something that you're interested in hacking, that would be very much appreciated as well.
00:34:31.180 - 00:34:45.900, Speaker C: Thanks Jacob. Yes, you guys are more than welcome to unmute yourself and ask any questions. Pitch your ideas, chat to Jacob. So yeah, feel free to unmute yourselves if you'd like to chat.
00:34:46.480 - 00:35:07.430, Speaker B: Yeah. And Derek, you asked a question. If there are office hours this week, you can at any point in time reach out in Discord and we can set up a small session if you're interested. So there are no planned office hours, but we're willing to plan them at any point in time. You want.
00:35:18.980 - 00:36:12.440, Speaker C: Has anyone got any ideas they maybe want to pitch to Jacob, chat about what you think you'd like to work on? Yeah. Okay. Well, yeah, Jacob's always available in the sponsor Radhem discord channel for any questions you may have. And, yeah, feel free to reach out to him at any point. As he said, you can even organize a small session. He's available. And if there's no more questions or brainstorm or pitch ideas, I'd like to thank Jacob so much for the session.
00:36:12.440 - 00:36:17.240, Speaker C: And, yeah, I'll see you guys in Discord.
00:36:17.740 - 00:36:36.960, Speaker B: Yeah, thank you. Yeah, there's one guy with an idea, but, yeah, please just reach out in Discord and we can discuss it. There might also be easier. And thank you very much, Emily. And thank you all for joining in and hope to hear from you on discord. Great.
00:36:37.030 - 00:36:39.660, Speaker C: Thanks so much, Jacob. Cheers. Cheers.
