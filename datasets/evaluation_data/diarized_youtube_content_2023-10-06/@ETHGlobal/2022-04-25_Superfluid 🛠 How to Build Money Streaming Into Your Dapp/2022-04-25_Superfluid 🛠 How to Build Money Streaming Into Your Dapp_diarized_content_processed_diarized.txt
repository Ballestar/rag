00:00:06.730 - 00:00:07.280, Speaker A: Hello.
00:00:07.650 - 00:00:24.538, Speaker B: There it is. Okay, thanks for coming, guys. Small crowd, but we'll make it worth your while. I hope so. Welcome to the Superfluid Workshop. So Superfluid is a protocol for digital native programmable cash flows. So you can build cash flows on the blockchain.
00:00:24.538 - 00:00:54.842, Speaker B: It's streaming money. So money moving every second. It doesn't require capital lockup, which means you can add capital as you go to your streams. And it's programmable, which means you can build very interesting functionalities into money streaming. So what is asset streaming? So, asset streaming is a way of making continuous payments. So these are payments that happen every second. They're open ended, which means they're perpetual, they don't stop and they're frictionless, which means you don't have to do anything.
00:00:54.842 - 00:01:40.874, Speaker B: Once you open a stream, they connect value transfer and service provision, which means if you're paying for a service, you pay for every second of it. You transfer value for every second of service you use. And this is very interesting because it eliminates unpayment risk, it eliminates delays, and obviously it happens with no intermediaries because it's an open protocol. And this is very interesting because if you can eliminate risk in the provision of services by paying for every second of service, you can effectively make stuff cheaper and eliminate a lot of the risks that come with service provision, employment, but also stuff like cross border teams. So the basic units of Superfluid are super tokens. So they're just tokens, right? They're, ERC 20. They're also, ERC seven.
00:01:40.874 - 00:01:56.018, Speaker B: Seven. This means that you can use them everywhere. You can use ERC 20, they're also plugged into Superfluid. But again, they're usable everywhere and web free. They're just normal tokens. So you can use them from a gnosis safe, you can put them in a uniswap pool. Whatever you want, you can do.
00:01:56.018 - 00:02:37.118, Speaker B: So super tokens come in two flavors. You have the native ones, which means they're issued through Superfluid, and you have wrapped super tokens. So wrapped super tokens are your regular ether, USDC, whatever that is, then wrapped into a super token and at that point you can stream it. There is this wrap unwrap mechanic that you have to deal with. So how do super tokens manage streams? This is through what we call agreements. So agreements are new functionalities that are built into the token, which are perpetual open ended financial relationships between accounts. So normally when you move money, when you use transfer, right, on ERC 20, all you're doing is moving money from A to B.
00:02:37.118 - 00:03:38.514, Speaker B: At one specific point in time, when you open a Superfluid agreement, you are connecting two users balances in a way that will last until you delete that agreement. Right? So for example, streams are a connection between A and B, where you commit to transfer a certain amount of tokens every second, right? This agreement stays on chain, it's readable, it's usable in our applications, and it affects the user's balance. So by being built into the token balance, we can do what we call real time balance. So the real time balance is basically when you have a super token and you're receiving a stream, what you see is effectively your balance tick up in real time as you get paid, right? Because it's built into the token, the settlement is instantaneous. As soon as you see your balance go up, that money is yours. It's available and you can spend it. Now, obviously you don't want to be there clicking the button every second, but what you can do is have incoming and outgoing streams from the same account at the same time.
00:03:38.514 - 00:04:57.750, Speaker B: So, for example, maybe you're working for a company that has subscription payments, right? So their clients are paying subscriptions in streams, and then the company is paying your salary in a stream, right? So the money comes in from the customers and then it goes out to the employees. And this happens in real time. And you're left with the net of those incoming and outgoing streams every second, right? So again, the balance in the middle is immediately available, settled every second, and you can use it as you wish. Now, as an employee, you're then receiving this salary and what you can do is go on and maybe invest it into an application. There's an app built on SUPERFLIP called Ricochet, which allows you to DCA into assets by streaming money to it. So what that would look like is basically what we call network cash flows, right? So you have the customer paying the business, the business paying the employee, the employee paying the DCA protocol, and the DCA protocol probably paying its own employees, right? So all of these connected cash flows come together to basically move money in real time across accounts with no friction, no transactions, and again, settled every second on the blockchain, right? So money is just flowing around freely without gas costs. Now, the interesting side for developers is programmability.
00:04:57.750 - 00:05:49.206, Speaker B: So with Superfluid's programmability, you can build what we call super apps. Super apps are basically applications that react to streams. So you open a stream to a super app and you can execute custom logic. For example, this custom logic could say, I'm receiving funds from users, open streams to another account, right? And you can build this into the contract. And then, for example, if one of those streamers closes their stream, you can react again and add other logic for when streams are closed, right? So you can build these applications that react in real time to money coming in in real time. Some of the applications are built to work with zero balance, so they receive $100 a second and they spend $100 a second. So you can build these applications that basically move money without ever holding money, which is probably unique to Superfluid.
00:05:49.206 - 00:06:24.146, Speaker B: So for the hackathon, we have $8,000 in Bounties. We try to keep these fairly generic so you can kind of build whatever you want. For the top Superfluid project, we have $3,000 for the most futuristic one, 2000, and then we have some prizes for integrations. So we've got $1,000 for two different integrations. And then there's a $10,000 bounty, which we're doing with the Uma project, which is for a specific integration called PCR Tokens. You can find the details on our Twitter. It's a really, really cool system to perpetually incentivize any kind of behavior.
00:06:24.146 - 00:06:41.530, Speaker B: So you can think of it as generalized liquidity mining, where you can incentivize literally anything you want. So it's a really cool product. Have a look at the spec. So I'll pass it to Sam, who's going to actually tell you how to get your first stream.
00:06:44.910 - 00:07:08.994, Speaker A: Hey, guys, how are we doing? Thank you for joining us. I'm Sam. I help lead Devex here at Superfluid. And it's great that you join because we're going to give you some alpha on not just how to get your first stream, but also how to win some superfluid swag, potentially, if you play along. So we'll go through that, and then we'll get a bit more tactical on how to actually use Superfluid as a developer to build some of your projects this weekend. So we'll go through some examples. I'll walk you through some of our docs to show you how to create streams pretty easily.
00:07:08.994 - 00:07:32.938, Speaker A: And we'll go from there. So, getting your first stream. All right, so those of you that are here, you received probably a gigantic swag bag with a bunch of swag from different sponsors in it. Inside of the bag, there is a flyer that is branded with Superfluid specific branding. And we have instructions on how to get your first dream. So there's a link there. It's friends.
00:07:32.938 - 00:07:46.926, Speaker A: Superfluid finance. There's going to be a code that's specific to you. Enter the code. At the link, there will be a form that pops up. Enter the code, enter your ethereum address, and you will be sent a stream of Friends Tokens. Friends. Tokens are testnet.
00:07:46.926 - 00:07:59.638, Speaker A: Tokens. They have zero value. This is not real money. This is fake. And you'll be able to see that in the Superfluid dashboard once that's started. So there will be a modal that pops up which says like, congrats, you've created your first stream. Go to this link.
00:07:59.638 - 00:08:42.750, Speaker A: It'll be App Superfluid Finance, where you will see that you're receiving some smiley face fake tokens on COVID. So why is this cool? It's cool A, because you're going to get your first stream, which is great, but it's also cool because this is a game that you can use to either get swag and or be minted an NFT if you are one of our winners. So you're going to get the stream of Friends Tokens. And what happens is that throughout the weekend, we're going to track to see how many other streams you open. So at this link at app superfluid Finance, that's our dashboard, you'll be able to use that to open streams to other people. So find other people at the event, enter their address in, open up a stream to them. The most streams that are opened will win an NFT.
00:08:42.750 - 00:09:10.614, Speaker A: So we'll look at the top ten and mint NFTs in the top ten. So that's the game free alpha for those of you that came. And yeah, let us know if you have any questions. So beyond the game, we need to talk about hackathon stuff and how to actually build on superfluid. So we'll go through some basics for building on superfluid and then some specific examples from our docs. So in terms of building on Superfluid, there are a few tools that might be useful. One of them is our Visual Dashboard, which is at app Superfluid Finance.
00:09:10.614 - 00:09:48.310, Speaker A: This is for easy creation of streams and managing your own accounts. But there's also our SDK and developer console, right? So our SDK is what you're going to actually tangibly use to open streams. We'll go through how to actually use this in a bit. We also have some solidity libraries to create streams and to work with the Instant Distribution agreement to make that very easy. And I'll go through those in more detail. And I'll also show an example using our Developer Console, which is how you as a developer can do things like write really easy subgraph queries and just track streams for different accounts and super apps you're creating. So now getting a bit more detailed.
00:09:48.310 - 00:10:42.954, Speaker A: What you need to do to work with Super Tokens is if you're going to use something that's like an asset, you're used to using maybe ETH or Matic or like any native asset or an ERC 20 token, you have to use super tokens. So Fran walked through what a super token is and how it works. In order to get super tokens or to allow your users to get super tokens, you can allow them to call the upgrade function on the super token contract, which will just mint you super tokens and basically just hold on to your underlying asset until you want to unwrap. And to unwrap what you're doing is you just call downgrade and it will burn the super tokens and give you back the underlying asset. In terms of opening a flow, that's also pretty simple and straightforward. Using our SDK or our Solidity Helper libraries, it's literally this simple, right? It's one line of code, right? You hit Create flow pass in a receiver, a token and a flow rate. And the flow rate is the number of way you want to send per second.
00:10:42.954 - 00:11:22.978, Speaker A: So for example, with $1,000 per month writer 1000 tokens per month, it's going to look like that, right? It's going to be a big long number because it's in way. So creating a flow is pretty easy, right? Those actual write operations are pretty simple. Updating a flow looks very similar and so does deleting a flow reading, flow state, super simple. Same thing. You can write custom subgraph queries if you want, like, more advanced data, and the Superfluid developer console will help you do that. But to read flowstate using our SDK or even some solidity to read flows, it's like, again, three variables, and we'll return the data that you need there. So we won't go too deeply into super apps.
00:11:22.978 - 00:12:05.086, Speaker A: But I do just want to let you know that these exist. We'll go through how to use Superfluid using our SDK, which is probably the simpler way to do it if you just want to integrate Superfluid quickly this weekend. But if you want to build something really advanced, I'd highly recommend looking through our examples, repo in GitHub for some examples of super apps. So, super apps are really cool in that they allow you to listen for specific operations that happen within Superfluid. So, for example, if I have a contract, I can receive funds and do things when a flow is created, updated, or deleted into my app. So one really interesting example of this is actually something we call the Tradable cash flow. It's an NFT contract, which just will take in streams and send 100% of the value of those streams to the NFT's owner.
00:12:05.086 - 00:12:24.090, Speaker A: So then anytime the flow into the NFT is changed, it will also change to its owner. And anytime you trade the NFT, the flows are sent to the new owner. Right. So it creates a really cool marketplace for Tradable cash flows. Right. That's just one very simple example. We see that forked all the time at Hackathons.
00:12:24.090 - 00:12:44.546, Speaker A: So we'll do next, let me exit out of this. I will go into my browser here, and I think, I don't know how I actually have to do this here. I have to drag this over. Let's get into I could do that in my Settings, I think. Hang on.
00:12:44.648 - 00:12:45.134, Speaker C: Settings.
00:12:45.182 - 00:12:46.142, Speaker B: Displays.
00:12:46.286 - 00:12:47.410, Speaker A: Displays.
00:12:55.500 - 00:12:56.490, Speaker B: Over there.
00:12:58.560 - 00:13:19.850, Speaker A: We'll get it. We'll get it, guys. No option for mirroring. How about the bottom? Right? All right, well, we'll get creative here. Any Mac wizards want to tell me how to not mirror my screen?
00:13:20.460 - 00:13:22.936, Speaker C: No? Probably a shortcut for it.
00:13:22.958 - 00:13:52.310, Speaker A: Right? We have a mac wizard. Help me out, help me out, help me out. So, okay, we show mirroring options. What do we got here? Display filter retina display airplay. Display off. It is much easier on zoom. Guys.
00:13:54.920 - 00:14:01.320, Speaker D: Can just throw that to the other thing, which you want to have that there?
00:14:01.390 - 00:14:06.670, Speaker A: Yeah, this browser there. That guy. There we go.
00:14:09.460 - 00:14:28.960, Speaker D: Sometimes that's wait. And now we should be able to just push it up.
00:14:30.050 - 00:14:31.840, Speaker A: I'll tell you what I can do. Hang on.
00:14:32.370 - 00:14:35.966, Speaker D: There it is. There you go.
00:14:36.068 - 00:14:41.566, Speaker A: Good. No, I don't think that did it.
00:14:41.588 - 00:14:43.070, Speaker B: I was just seeing the presentation.
00:14:44.550 - 00:14:48.260, Speaker D: I pushed to the wrong window, but you just need to swipe it up.
00:14:49.190 - 00:14:52.274, Speaker A: What do you mean? Which window?
00:14:52.322 - 00:14:52.742, Speaker C: This one.
00:14:52.796 - 00:14:54.280, Speaker A: I want to show that one. Yeah.
00:14:58.280 - 00:14:59.028, Speaker D: There you go.
00:14:59.114 - 00:14:59.780, Speaker A: There we go.
00:14:59.850 - 00:15:01.590, Speaker D: And now just make it full screen.
00:15:03.160 - 00:15:04.630, Speaker A: Using what here exactly.
00:15:06.040 - 00:15:10.810, Speaker D: Can you come around to see it? If you go like this.
00:15:17.100 - 00:15:37.936, Speaker A: Will play, guys. All right, here we go. Thank you, sir. All right. So this is our developer console. This is actually the Faucet contract, which is distributing the friends tokens. So if I scroll down here, we can see a bunch of streams from people that have already done it.
00:15:37.936 - 00:16:43.092, Speaker A: So these people already have the jump on you, so you should try to catch up to them. But if we go to our docs and this is where I actually recommend, starting with Superfluid, you can go to this money streaming section and use this section to take examples you can use in your own hackathon projects, right? So these are just little code sandbox examples you can open if you want to. But you can see here they have very simple react code where you can very easily create a stream, right? So I have this create flow operation here where I just pass in the flow rate the recipient and then the token address that I want to use. And we write the transaction using this line and boom, your stream is created. So if I get one of my Ethereum addresses so this is going to get really let's see if we can pull this off here. I'm going to copy this here, paste this in, and then I'm going to enter my flow rate here, which is again just in way per second. And we'll calculate the formula down here for you to figure out how much this is per month.
00:16:43.092 - 00:16:59.864, Speaker A: I'm going to enter in an amount something like this. We'll see how much this is. That's quite a bit. Let me cut that down a little bit. And we'll create a stream. The console will just register what's happening here. So this has taken a second or two to create.
00:16:59.864 - 00:17:29.264, Speaker A: So it's creating right now. Amazing. This was created for me. And what I could do is copy this address in and paste it into our console, right? So this is kind of the workflow you guys could go through as you're developing. You can create some streams and then very easily see them pop up here in the console, right? So we saw this stream was just created, looks like 15 seconds ago. We're using fake die on COVID and we can see that this is coming into my wallet. Same thing with updating.
00:17:29.264 - 00:17:58.476, Speaker A: Updating is also really easy, right? We just change one line. So if I want to update this stream, what I'll do is I will just copy this address here, go down to the update, paste that in, and then you can see here if I scroll down, same exact pattern. What we're doing with the Superfluid SDK is we're initializing our framework, right. Using this simple line up top, we create a signer. This is a private key with fake money. Don't take my private key. You don't have to do this with just an open private key.
00:17:58.476 - 00:19:04.450, Speaker A: You could use MetaMask but this is creating a signer and then same thing here where I am grabbing the token, passing the token in is the super token we're using and instead of create flow, we're just updating flow just like this, very simple and it should work just as well. So let's choose a new flow rate this time something different and we can see the calculation done here for us we'll update this will take a second just to propagate updating our stream. Boom. Stream was just updated so if we go back up here, same thing I can refresh and we should see that it should no longer be 860 whatever that was per day should be something different. Yes, looks a bit different, right? And then finally deleting is also really simple. That's not the right tab. We can just delete a flow by pasting in the address here and we see that again, pattern is exactly the same.
00:19:04.450 - 00:20:17.976, Speaker A: We're just calling Delete flow and once again this should work just as well. While this loads, I do want to let you know that I have an example here using a MetaMask or Web three provider. So if you want to have an easy just like wallet connection using the superfluid SDK and then also do this just using whatever wallets connected to your browser you can do that using this example, right? So I recommend just taking this one it'll connect to whatever chain ID you're connected to and it will work exactly as these ones work up here. So if we go back up, we'll see if we refresh one more time that this stream that we had should be deleted yes, it was deleted and again, this console is a very useful tool where I can do things like see whatever super tokens I hold right? This is very useful in that sense. We can see events, so we see all these different flow updated events emitted every time I update a flow. And we can even do things like pull up this address in the subgraph Explorer. So we have an embedded instance of GraphQL in here, and I could just click Play and get some information on this address.
00:20:17.976 - 00:21:05.976, Speaker A: So again, we use this all the time internally a lot of developers in the superfood ecosystem use this and I highly recommend you use it as well. It's also useful like I use this for all my subgraph queries so I recommend playing around but that's an overview of using the superfluid SDK. Again, fairly simple examples there but that's just to show you how easy it is to get started and to give you some examples to pull from directly when building your apps this weekend. So I recommend coming here to start. There's also other good interactive stuff on using super tokens batching transactions together using the Instant Distribution Agreement to send funds in bulk to large groups of addresses and then other stuff on super apps and solidity you can find in here as well. So start here, DM myself or Fran on Discord or DM us at all in our Discord. If you have any questions, you can't find us.
00:21:05.976 - 00:21:23.520, Speaker A: If you're here and you have a question, just come to our booth, which is just the very first booth, and you walk in on the left and we'll be there to help you there as well. So thanks for bearing with us while we turned around and did it. But yeah, if you have any questions, this is a good time for Q and A as well.
00:21:23.590 - 00:21:53.144, Speaker C: Yes, I have a question. So basically, if I understand it simply by basically creating this super F token and you are distributing the flow and then you stop at one point and then let's say party B has 20% and Party A has 80%, how do you transfer from this super F token back to the normal token then? Because you don't have the 100% anymore, how do you get the die back?
00:21:53.342 - 00:22:45.188, Speaker A: So it's always one, you're not necessarily locking up capital and distributing it that way, right. So what you're doing when you wrap, let's say, an example of die, right? If you want to stream die, all I have to do is just wrap my, ERC, 20 die as super token die. So when I do that, let's say I want to wrap and stream ten die, right? What I do is I wrap the ten die. Those ten die are deposited in that wrapper contract. I minted ten super token die and I can spend that, but I can never spend more than what I have, right? So if I spend five, stop my stream and then unwrap, I now have five tokens left. Right. So the bit with having 80% or 20% of the total value you started with, I don't know if I necessarily understand what you're asking there, because you aren't going to be able to spend any money you don't have or end up with money that you should have that you lost.
00:22:45.188 - 00:22:46.280, Speaker A: Does that make sense?
00:22:46.430 - 00:23:14.124, Speaker C: Yeah, the idea was actually you have a contract and you say you want to pay, I don't know, 2000 die. And you define milestone. And he doesn't deliver everything, he delivers only 60%. And then you have a situation of this 2000 die, he has only thousand, 200, you have 800. And now how do you close that? He gets, again, 1200. I transfer. So basically you paying him partially.
00:23:14.124 - 00:23:24.390, Speaker C: You don't need to transfer everything. So basically you have a contract, it's partly finished and you are in super. Are you able to switch back? This is like the question.
00:23:25.880 - 00:24:03.856, Speaker A: So are you kind of referring to an example that would be corresponding to what you're saying, I think is like vesting. Like if I agree to vest you 100 tokens over the course of a year. You're basically entering into a contract with me where you're expecting me to pay the full 100 tokens. Right? So in this case, what you're doing with superpoot is you don't work off of the total amount you want to send, you work off the number of tokens you want to send per second. Right. So what I would do there is I would pick a flow rate that would add up to that amount, but there's nothing stopping me as the sender from running out of tokens if I mismanage it or from just stopping the stream before all the 100 are sent. Right, and you can also add more.
00:24:03.856 - 00:24:14.852, Speaker A: Right. There are even like auto top up services you can use now that we've built, where you can always make sure that your balance is above zero. But yeah, that's the idea. Does that make sense? If you switch the Meta model, instead.
00:24:14.906 - 00:24:17.688, Speaker B: Of thinking, I want to transfer 2000.
00:24:17.774 - 00:24:19.848, Speaker C: Over a week, it's about I want.
00:24:19.854 - 00:24:21.610, Speaker B: To transfer X amount per second.
00:24:23.420 - 00:24:24.890, Speaker C: That's the only.
00:24:30.290 - 00:24:52.280, Speaker A: And if you want, you could set up a vesting contract where you say, all right, look, I'm going to deposit 1000 tokens into this contract and then the contract is going to stream that 1000 out. That would be a way to implement what you're suggesting. Right. And you'd have proof that, okay, the contract has this money. You as the receiver can cancel the stream, but the contract could be immutable and just keep it going.
00:24:55.290 - 00:24:56.086, Speaker C: Exchange it.
00:24:56.108 - 00:24:58.086, Speaker A: Again to normal 1212.
00:24:58.188 - 00:25:17.818, Speaker C: Imagine in a situation, you are streaming like 20 super tokens per second. And then he got, I don't know, 500 of them and you stop everything. So he has 500 of this super wrap token. Is he able to convert that back to the normal token?
00:25:17.914 - 00:25:24.818, Speaker A: Yes. They can unwrap at any time. Right. You could do it like the second you get a single die, you could unwrap it.
00:25:24.984 - 00:25:26.482, Speaker C: Okay. The other party can do that also.
00:25:26.536 - 00:25:27.730, Speaker A: Yes, 100% perfect.
00:25:27.800 - 00:25:29.698, Speaker C: Okay, that's all, cool.
00:25:29.864 - 00:25:34.180, Speaker A: Good question. Thank you. Anyone else.
00:25:37.670 - 00:25:40.050, Speaker E: About IDA?
00:25:41.610 - 00:26:38.470, Speaker A: Yeah, so the IDA, we didn't talk about it a ton here, but what the IDA lets you do is one to many, like scalable single transfers, right? So money streaming is all about second by second gradual transfers. It's continuous payments. The IDA, what allows you to do is create essentially a pool of people that have units in an index, right? So imagine I create an index where I give ten units of that index, or ten shares to ten different individuals. What I can do once I've done that is execute a single transaction to distribute funds to that entire pool. Right? So in the example of a pool with 100 units and each person having ten units, if I distribute 100 tokens to that group, each person will get ten tokens, right? Because it's divided automatically, which is a good use case for things like airdrops or any kind of repeatable one to many transfer.
00:26:38.540 - 00:26:39.480, Speaker D: You want to make.
00:26:43.370 - 00:27:12.722, Speaker A: People the only times you need to thank you, appreciate it. I'll just go back. So the only time that you will pay gas is when you issue new units to new subscribers. Right. Or you need to change the units after that. It's a single transaction to distribute funds to the entire index. Right.
00:27:12.722 - 00:27:31.500, Speaker A: So think about it. The way I like to explain it sometimes is a bit like imagine if a corporation could just issue shares in their stock to individual people and press a single button to pay a dividend to everybody in that pool. Right. The analogy to a cap table is a decent one.
00:27:31.870 - 00:27:32.780, Speaker E: Thank you.
00:27:33.390 - 00:28:13.010, Speaker A: No problem. Yeah. So emitting events is more of like a general thing where you want to listen for that event, maybe on the front end and do something in exchange. The thing that's a bit analogous to that in a super app is these callbacks. The callbacks will run on chain in response to certain events. Right. So, for example, what you can do in a super app is run arbitrary logic anytime.
00:28:13.010 - 00:28:42.182, Speaker A: For example, a stream is created into the contract, updated into the contract, or deleted within relation to the contract. Right. Those all happen on chain. And what's happening there is the superfluid protocol. When you create a super app, it's registered in the constructor with the protocol at large, right. There's just a line of code you insert there and it does it. The superfood protocol will listen for those certain events and execute those callbacks whenever one of those things happen on chain.
00:28:42.182 - 00:28:53.060, Speaker A: Right. I'd say the cool part about that is that it's all on chain and you don't have to do any magic with subscribing to events and listening to it on a front end. Yes.
00:28:54.950 - 00:28:58.158, Speaker E: Do you need super tokens to do IDAS?
00:28:58.334 - 00:29:43.550, Speaker A: Yes, anything within superfood. You need super tokens for one other thing you can do that's cool about super tokens, you can batch transactions together. So if I want to open up six streams at once and then also transfer super tokens to three different people in the same transaction, what I could do to provide a good UX to my users if I know there's going to be these kinds of group things happening on a regular basis is bundle them all up using a batch call and instead of having to execute like eight different transactions to do all that stuff, I can batch them all together into one and it's a single transaction. And I pay gas one time to do all of that. But you have to have super tokens to do it. But it's an interesting, scalability thing.
00:29:43.620 - 00:29:53.826, Speaker E: And if I want to have the super token of another token, is there a way to know if there is already a super token? Like if I want to the super token of.
00:29:53.848 - 00:29:54.222, Speaker A: Dai.
00:29:54.286 - 00:29:55.460, Speaker E: How do I know it?
00:29:56.150 - 00:30:21.718, Speaker A: Yeah, so one way is to look in our docs. We have a network directory from some of the most used tokens. I think you can search by symbol in the console, if I'm not mistaken. So you can search by symbol in the console. When I pasted in my address to the console, you can just type in a symbol and see if it comes up. You type in the symbol, like the normal ticker symbol, and then x after to see if it exists, right? But to deploy your own wrapper, it's really easy. So we have instructions in our docs.
00:30:21.718 - 00:30:32.030, Speaker A: You'll see, in our docs there's a guide on super tokens. In that guide, we give you step by step how to deploy your own ERC 20 wrapper from like, ether scan or polygon scan as a Block explorer, right?
00:30:32.100 - 00:30:37.380, Speaker E: It doesn't matter if there is already a super token of that token, but maybe, I don't know, the.
00:30:40.790 - 00:31:18.450, Speaker A: If you want, let's say, for example, you decide to mint some, like you start a dow tomorrow, you mint an ERC token as your governance token and you want to stream it, right? What you could do there is go to our docs in that example, go to the Super Token factory contract, which lets you easily create super tokens. You just need the underlying address of the token and you fill in a couple of other parameters and boom, you have your own super token contract created, right? So it's pretty simple. Cool. Any other questions? Go for it.
00:31:19.800 - 00:31:21.510, Speaker C: When you open up a screen.
00:31:23.320 - 00:31:23.636, Speaker A: Is.
00:31:23.658 - 00:31:42.600, Speaker C: There any underlying validator network or something like that? To check that from center line, that someone can either change it in code so the stream in itself, it's not on chain, it's off chain, just like how the process going back.
00:31:45.710 - 00:33:15.142, Speaker A: So that's part of the magic, right? So that's part of the magic, right. So what's happening there? And we could go as far down the rabbit hole as you'd like, but you can think of the super tokens as a kind of new token standard. That's an extension under the ERC 20 standard, right? So with your mental model of an ERC 20 transfer, there's no way this is possible, right? Because you're going to have to hit transfer over and over and over again. But what the super token has on it is a new method called real time balance of which kind of plugs it into the rest of the protocol, right? So what real Time balance of does is it can take into consideration, like, your static balance, like how many tokens you have that aren't moving at all. And it can take into consideration your dynamic balance, which is we call it net flow, is one of the parameters there, which takes into consideration all the flows you're receiving or sending out to get, like, at this moment in time, are you net positive or negative? Right? So if you're sending more tokens than you're receiving, your net flow might be negative 50 tokens, right? That's simplified because it's going to be in way, but imagine negative 50 tokens is your net flow. What we can do is, if you're sending out 50 tokens per month, what we can do is we can also use the block timestamp value to calculate how much time has passed, while that was your net flow rate right. So at any given point in time, if we need to within the protocol, like if you decide to unwrap your tokens right away, we can check your balance by calculating how much time has passed and that net flow rate to figure out what you have at any given point in time.
00:33:15.142 - 00:33:16.280, Speaker A: That's how it works.
00:33:16.890 - 00:33:17.398, Speaker C: Okay.
00:33:17.484 - 00:33:17.734, Speaker A: Nice.
00:33:17.772 - 00:33:18.898, Speaker C: I'm impressed.
00:33:19.074 - 00:33:23.866, Speaker A: Yeah, you should try it out. You should try it. Yeah, it'd be cool if you look.
00:33:23.888 - 00:33:29.736, Speaker C: At MetaMask for long enough, because MetaMask.
00:33:29.768 - 00:33:31.944, Speaker B: Only updates every four or five blocks.
00:33:31.992 - 00:33:33.804, Speaker C: But if you look long enough to.
00:33:33.842 - 00:33:34.670, Speaker B: See the numbers.
00:33:41.120 - 00:33:41.772, Speaker A: Cool.
00:33:41.906 - 00:33:43.390, Speaker C: Can I invest in your talking?
00:33:55.290 - 00:34:09.430, Speaker A: What? Two. Two. All right, I think we're good. Thank you guys for coming. We really appreciate it. You close.
