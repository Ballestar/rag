00:00:06.490 - 00:00:32.898, Speaker A: Welcome back to the Metabolism summit. So just as a quick intro, clearly I'm not Kartik. My name is Jacob. I'm also from the Youth Global team and I'm going to be Mceeing for the rest of this summit today. And, yeah, I mean, I'm going to get out of the way because we have a really exciting talk coming up with Max from the Zora team. And basically we're going to be chatting about how to build with Zora. So obviously a lot of people over the next week or so or a weekend or so are going to be building on top of Zora.
00:00:32.898 - 00:00:46.460, Speaker A: So this is going to be the talk for you. So without further ado, I'll introduce Max from the team. Max, feel free to unmute and share your video and I will get my screen share out of the way in just a second. How are you doing?
00:00:46.990 - 00:00:49.306, Speaker B: I'm good, how's it going? Cool to be here.
00:00:49.328 - 00:00:50.442, Speaker A: Good, yeah.
00:00:50.496 - 00:00:50.762, Speaker B: Awesome.
00:00:50.816 - 00:01:00.400, Speaker A: Well, we're thankful to have you here and like I said, I'll stop sharing my screen now in case you have something to share, but otherwise the floor is yours. And yeah, looking forward to your talk.
00:01:00.770 - 00:01:22.274, Speaker B: Awesome. Okay, well, sweet. First, quick shout out to just the whole Youth Global team. They've set up all this infrastructure for sharing all the videos, getting all the resources and planning a lot of the sort of logistical stuff with the hackathon, so couldn't have done this without them. So, yeah, quick intro. My name is Max. You might know me by Tronki ETH on Twitter.
00:01:22.274 - 00:02:13.510, Speaker B: In this whole digital world we live in, I am relatively new to coding and development in general. Quick context. I graduated two years ago, was working in the renewable energy industry. Long story short, ended up quitting my job about six months ago to just dive full into full stack Web three development I'd never coded before, so had to do the whole thing, learning HTML, CSS, JavaScript React, solidity Graph, all that stuff. Ended up interacting with the Zora team along the way, building some cool projects, and then just started as a community developer advocate, Zora, about three, four weeks ago. So my position is all about building out integrations and making it more easy for people to interact with the various pieces of the Zora sort of toolkit in general. So, yeah, let me start getting into this stuff.
00:02:13.510 - 00:03:27.962, Speaker B: I have a screen over here with some notes just in case you see me peeping over there. All right, here we go. So I just wanted to start off with this, and I know Jacob just gave this talk about hyperstructures essay, but just so to sort of give you an idea of my context on the type of stuff, I'm doing, this line right here. Taking a protocol first building approach, focusing on developer adoption. The work I do in the way I think my time at Zora is, while we are still currently in the central small team that is focused on building out this protocol and hyperstructure in general. I try to remind myself that this is actually like a much longer term thing and that the longer term vision of all of this is the sort of like dow fication of everything you see. So with that being the case, developer adoption and making it as easy for people to add integrations, add custom platforms, create value in the protocol by adding liquidity and just user interaction and attention to it is kind of like, of the utmost importance.
00:03:27.962 - 00:04:10.298, Speaker B: So I try to keep that long view because that's what we're really trying to build there. So just wanted to say that as sort of like a context to all the stuff I'm doing. So, yeah, now I'm going to go through the Twitter thread that I posted yesterday. It's pinned on my account. It's also pinned on the Zora engineering account. But this has just like, every resource you could ever want for getting started with building on the Zora API, the Zora creator contracts, and the protocol. So I'm just going to go through all that and explain sort of like, how to best access each of the resources, what you can do with all of them, how to integrate stuff.
00:04:10.298 - 00:04:48.694, Speaker B: And, yeah, I'll end with a little live demo of getting something running on your own site and then some Q A. So the first thing I want to do is show the Zora starter kit repo, which I just updated a little bit so that the code is a little bit better. It was pretty a little janky before. There's a lot of unused code and stuff. But this is a repo for interacting with Azure API, the creator toolkit, and just the marketplace hyperstructure protocol. It's pretty basic, but it provides that core functionality to each of those pieces. And I would say my favorite, actually.
00:04:48.694 - 00:05:31.586, Speaker B: Let me get this open so you have a better visual. So this is what it is. This is what if you fork this thing locally and open it, this is what you would see. It has this sort of, like, API page which shows like a brief sort of like, what could you do with the ZDK? And let me actually switch this to no, I don't want to do that. What you could do with the ZDK and the indexer, that's what I want to do. What you could do with the ZDK and the indexer, what you could do with the create tools, how to create your own custom create interface, and how to create your own kind of like protocol interaction. So this just does something really basic.
00:05:31.586 - 00:06:30.198, Speaker B: Fetches all the NFTs in the user's wallet, sorts them from highest to lowest balance. That gives you the top ten here you can put in any collection you want. That's just like a very basic implementation of how to get started with the ZDK and integrating with the API, you have this Create interface which so this is kind of like a different version of Create Zora co where you can interact with our contract factories and deploy any contract, whether it's like an addition style where the metadata or like, the image is the same for each of the tokens or a different sort of kind of more. Like the typically used in the Ten K PFP thing, but not reserved for that in any way. Just as a source of reference where you would have different images or metadata for each piece. You can use this deployer over here to let you create contracts like that. And this is all at the Zora starter kit.
00:06:30.198 - 00:07:44.830, Speaker B: And then the final piece is what I personally find the most useful out of this is sort of like a protocol interaction page where with all of the different modules, we have the Ask module which lets you list and buy NFTs for specific price offer module which lets you kind of like make and receive unsolicited bids on NFTs. And then the Auctions module which lets you host sort of on chain auctions. You have all of the different read and write calls that you would want for each of those modules of our marketplace protocol which is really nice because I componentized all of them. I don't know if that's a word for each of these little things you see. So if you open this up Ask module writes this is like you can create an Ask with any token you throw in here. You'd have to own it for it actually to go through to create a new listing. But you can go into the Zorist Article Kit, go into the components, go into the Ask and then you can just grab this, you can just copy paste this in or sorry, what you would want to do is actually just let me go back to this page protocol.
00:07:44.830 - 00:08:49.414, Speaker B: You can just put in the whole Ask component which we're calling Ask Write Disclosure. So you can just put Ask Write Disclosure in and you would get this whole section of functionality. Now obviously you can take out bits and pieces you want, you can change all the styling. The whole Starter Kit is like the really basic TypeScript react Wagme, Rainbow Kit, CSS Tailwind so you can put in your own styling if you need, but you can also use the stuff that's already there. So kind of just like a simple opinionated user interface for getting started with any of this stuff and yeah, just something really helpful you can fork and this is like a very early version of it but it will grow over time as we add new functionality. This will kind of just be like where you can always go to to find the latest Zora functionality with reference implementations and docs to get started with all of it. So I was really excited to do this.
00:08:49.414 - 00:09:28.414, Speaker B: This was like the first thing I made when I started Zora. And, yeah, we'll just keep going on from there. So that is the Zora Starter Kit really helpful for if you're trying to just get started with some basic functionality for the hackathon, start building out an app. It leverages things like this NFT components library. So Zora has a lot of kind of UI focused or react hook packages just for easy data manipulation or some basic functionality that you would want out of. When you're interacting with NFTs, you do a lot of the same thing a lot of time. You want to get the user address, you want to get the owner address, you want to get maybe the current listing status.
00:09:28.414 - 00:09:44.818, Speaker B: You want to show the image, or you want to show the provenance history. And there's things like that. So things like NFT components, which is this package right here. It's in the arzor GitHub. It's also installed. It's like a dependency in the Zora. Starter kit.
00:09:44.818 - 00:10:39.862, Speaker B: So pretty much like all of the Zora packages are dependencies in the Zora Starter Kit. So if you fork the Zora Starter Kit, you'll automatically get access to all of these. But there's one component in here that I've used in every project I've ever made, which is this NFT preview component. It's really cool because the way it's set up is it can automatically respond to whatever media file you're passing in. So if you're passing in like a strict MP4 file or like a video file or like an HTML file, because we do kind of like HTML rendering, it just automatically it has logic in it where it can just pick the Mime type and then render whatever it is. So right now this is actually showing the Feldzine Garden of Delights project that I actually built before I started with Zora, or I did the front end development with their team and just as a little shout out to them. But you can put in anything here, and then you can interact with anything.
00:10:39.862 - 00:11:35.802, Speaker B: But, yeah, this NFT preview component super helpful. So if you're looking for sort of just out of the box NFT rendering, that is a good place to start. The NFT components package is built on top of NFT hooks, which are kind of like more specific granular hooks that can get at different information you want. So when you do the NFT components, and if you insert NFT preview, it's kind of just grabbing all the information that we're indexing about an NFT or all the relevant information for rendering it and rendering some of its history. But you don't necessarily always need that. Maybe you just want to grab the IPFS link or whatever the metadata URL path is. Because you want to put in your own custom rendering component, you can use the NFT hooks package and hooks like the use NFT hook specifically to just grab specific pieces of information that you want.
00:11:35.802 - 00:12:11.302, Speaker B: So this is the repo for that. Again, it's a dependency in the Zora Starter kit. So if you download that, you're already there. Or you can just install this right away and then you can use this to just fetch, like I said, kind of just like more specific information. It's similar ish to the ZDK. I got this question the other day where they're both providing just like abstractions of interacting and grabbing different information about NFTs. I'd say the ZDK has way more and I'll get into that, but way more information and accessibility of other just on chain data and off chain data.
00:12:11.302 - 00:12:31.654, Speaker B: But this is more for getting stuff for using NFTs in a website. So this is really cool. The use NFT hook specifically is really nice. And then other interesting stuff is you can actually put in like a custom backend solution. Like let's say you wanted to use a different API. For whatever reason, you can configure the backend strategy that you're doing. So these are the ones that are provided.
00:12:31.654 - 00:13:08.502, Speaker B: So like ZDK fetch strategy, this is like the old one, but you can throw in like a graph backend. Ether actor is something that one of our devs named Ian built and then you can put in the openc API if you wanted to for some reason. So yeah, that is NFT hooks really useful hook packages for interacting with NFT data. And again, this is all in this big thread that I posted before the hackathon. It's pinned in my account and it's also pinned on the Zor engineering account. So next thing I'll do is we'll deep dive into the ZDK stuff and let me see exactly what I want to show here. So there's this repo which is really nice.
00:13:08.502 - 00:13:39.220, Speaker B: I mean, this is where you can fork. Again. Another dependency of the Zora Starter Kit. So it gives you some basic implementations of how to get it started. You sort of get the API input going and then sort of general things you can ask for. And it describes the settings, but I would actually say a better place to start is this. Where is this? Boom, here we go.
00:13:39.220 - 00:14:10.780, Speaker B: This provides full code references of doing different things. So this is the Docs Zora co there's like a ZDK section and there's a lot of sort of full reference implementations for how to get started doing different things. So you want to get aggregate attributes. This is how you do it. Like getting NFTs for an address. This would be not using the ZDK, that would be sending full GraphQL queries yourself. So I guess that is the difference.
00:14:10.780 - 00:14:47.734, Speaker B: The ZDK abstracts, having to know GraphQL and knowing how to send those fetches and it just does everything for you. So it's really nice. It just passes you back sort of like objects of JSON data and then you just grab whatever bits and pieces you want. So let me show you some stuff you can actually build with the ZDK because this is just like super cool. So this is a NFT Historical Data Explorer, provenance tracker, whatever you want to call it, that Daiwat built. Daiwat is a really cool dev. He works at Anchor and he will be doing a talk on how he built this, actually.
00:14:47.734 - 00:15:15.954, Speaker B: But this is fully using the ZDK to fetch information and then obviously adding a UI to render that information in an interesting way. But stuff like this where, let's see if we can find mine. Yeah, okay. So this is mine really easy, super fast. Like, you just saw how quickly that just rerendered when I put in the new Token ID. So there's stuff like this that you can build and I'll show just actually, we showed the code example already, so that's fine. And I'll show this as well.
00:15:15.954 - 00:16:03.038, Speaker B: So what the ZDK is actually doing is it's abstracting those GraphQL queries I explained. And if you want to sort of test queries first to see what the returns will be before you implement a ZDK strategy, you can use this playground API Zoro Co tool to build out any of these queries that you want. So, like, for price NFT owner, like, there's all of these options for stuff you can do. So this is a good way if like, okay, I want to implement the ZDK. Let me test out some queries, let me see exactly what I'm asking for, and then let me see if I can implement that. With the ZDK, most things you can put just directly there will just be like straight ZDK hooks you can do more complicated queries you will have to implement with GraphQL. But if you have questions there, you can always reach out to us.
00:16:03.038 - 00:16:39.482, Speaker B: So is that everything? I want to talk about the ZDK? Oh, no, there's a couple more things. The ZDK. And just like, the API Indexer is really cool in general because it just unlocks so much ability in terms of you can just now fetch almost any information about anything that you could ever want in terms of anything related to ERC 721. This is a list. This is also in the Twitter thread. Everything I'm showing you, by the way, is in that Twitter thread. So this is kind of me just like giving you a map to where you can start if you're looking for ideas or looking for help building certain things.
00:16:39.482 - 00:16:58.820, Speaker B: So this is a link to all of the hackathon submissions from the last hackathon. If you need sort of inspiration for what to build, boom. Go here. Ton of stuff. This is really good. And then I'll just drop a couple of pieces of you call Alpha, maybe a little bit. Rinkby Testnet Indexing is now live as of like, last night or early this morning.
00:16:58.820 - 00:17:28.538, Speaker B: And it should be picking up all new ERC 721s deployed. So if you are deploying new collections using the Rinkbe drop contracts by either using testnet create Zorg Co or using that starter kit interface I showed you, you should now be able to open up Rinkbee. So actually, let's do a live check networks chain mainnet. Oh, look at that. That's so cool. Okay, so we have Rinkby going. That's awesome.
00:17:28.538 - 00:17:59.318, Speaker B: So that is cool. That's a new thing that the indexer is doing. And another new thing is that V three auction event indexing is also live. So up until now, the only Zor market module that we've been indexing is the V Three Ask module which is for buying and selling at specific prices. But now we got auctions going. So just another couple of things that are new to the API indexer and we'd love help testing and finding problems with. So if you want to do something cool related to those, that'd be great and let us know if you run into any issues.
00:17:59.318 - 00:18:32.126, Speaker B: So that is the ZDK for you. The drops contracts. The Drops contracts are our kind of like full contract factory architecture that currently are powering create Zora Co. Which maybe you've seen before. They also power testnet create Zora Co which is kind of like the Rinkby version of this. So before you deploy stuff on mainnet, you can use testnet Create Zora Co. They also power that thing I showed you before.
00:18:32.126 - 00:19:21.386, Speaker B: And the reason I'm showing you all these things is to show that these contracts can be used by anyone. They're like fully permissionless. You can just send in kind of like contract inputs and you get a fully new NFT contract out of it that you own. So Zora doesn't own the contracts that you're producing out of our contract factory, which is really cool. They're also extremely modular and extensible like just the way they're all set up. I would encourage you to dig into kind of like the solidity on how all this works. But Ian and JeM are actually going to be doing kind of deep dives into all of this and how you can make a lot of custom updates to them because they seem maybe kind of limited if you don't actually understand the full architecture.
00:19:21.386 - 00:19:42.374, Speaker B: But actually the way they're set up, you can make any NFT collection with any attribute, with any type of logic. They're really interesting. So I will leave it at that and I'll let them talk more about that after. Let's go. When did I start? I started at 115. Okay, here we go. I need to speed up a little bit.
00:19:42.374 - 00:20:20.190, Speaker B: So we got the v three protocol. This is where you can find all the solidity for the V Three marketplace modules which are Asks, Offers and Auctions. That is what you can interact with here. Reference implementations here. And this is if you actually want to dig into the contracts, they are right here. And I would also just call out that in this Tweet thread I put a link to the deployment, the list of deployments of everything. So if you're trying to find like oh, what is the ERC 721 transfer helper address on main net? Boom.
00:20:20.190 - 00:20:59.550, Speaker B: There you go. So this is really helpful if you're trying to integrate some of the protocol. All right, next thing is the Finders fee finder app and let me clean up some tabs before this gets too crazy. So this is an app that provides a reference for integrating a finders fee. So if you're not familiar with the finders fee, it's an expansive incentive that is core piece of a hyperstructure that Jacob talked about that incentivizes curation using the marketplace. So let's say you put up an NFT for sale, you list it at a certain price and you say hey, I'll give someone 5% of that final sale if you can match me with a buyer. So that's great.
00:20:59.550 - 00:21:36.714, Speaker B: But actually in order to make that useful, you need interfaces that are servicing that functionality. So the finders be finder is one of them. This is currently indexing every active listing on the V three version 1.1 asks module. It's every active listing that has a finder speed greater than zero. So you can go through everything. Like you can see there's tons of different stuff and then what you can do and this is what's so cool about it is you can create share and if you create share it generates this custom link and that you see down here says curated by, curated by and then that's my address.
00:21:36.714 - 00:22:24.922, Speaker B: So if someone buys I can send this link to someone and then if someone buys this NFT using my link, I automatically receive the finders fee. It gets passed in in the contract call to my address and then I receive that fee. So this is a basic, but I think important thing that can be expanded upon to sort of make more use of the finders fee in general because I think that's sort of an underutilized aspect of the Zoro protocol in current situation because it requires a lot of curation and community outreach and people being bought into using your platform and not others. So it's not actually that easy to set up and drive a lot of liquidity and attention towards it. Open call for requests on this. Let me show the repo. There's a lot of stuff that this could become better.
00:22:24.922 - 00:22:54.910, Speaker B: Currently it's only doing ask modules but like I said, we are now indexing the reserve module. There's the reserve auction Finders ETH module which allows you to do finders fee with reserve auctions. So I'd love to get those added in. It also uses the old indexer. I haven't transferred it over because I made this before I joined Zora, which is bad. So if anyone wants to add anything add in the new indexing strategy like move it over to the new index or adding reserve auctions. I personally think that would be a great hackathon.
00:22:54.910 - 00:23:43.218, Speaker B: Sort of like if you're looking for a topic or something to build, make this way better, make the UI cooler and everything. I would appreciate it. But also I think this is currently one of the better references in terms of how to integrate finders fees and incentivize creation and stuff. So enough of that. That is cool. But I want to show something that one of our residents, community engineer technologist people named Dane built, which is this template Zora Mint house which lets you kind of insert any active addition or collection using the Zora contracts because they all use the same underlying Abi and Mint on them. So this is amazing.
00:23:43.218 - 00:24:26.960, Speaker B: If you're trying to set up your own Minting interface for people, this is a great place to start. You can spin it up really easily as here. There's like a nice whole getting started thing. So this is really cool. And while it's currently set up to only Mint er to interface perfectly with all the Zora additions, you can obviously change the Minting strategy, change the target APIs and stuff like that. But also just like great UI, great interface for building stuff, which is if you're not like a front end designer or like a front end developer, then having all the stuff provided out of the box can be really useful like for myself. So that's that.
00:24:26.960 - 00:24:59.366, Speaker B: Another thing is again, just want to call out all of this stuff is in this thread. So I just am trying to highlight all of these things so that if you need templates references, you're curious on how to do certain things. This thread can I'm adding to it over time as we get new submissions. But this thread can be a place to get everything and I think my talk is my talk done in five minutes. Wow, it is. Okay, I'm just going to get through these last few things then. So this is a marketplace example built fully on the Zora protocol by my friend Javier down in Buenos Aires.
00:24:59.366 - 00:25:37.106, Speaker B: This is a place where unlike the previous example I just showed, dane's thing, which is like a Mint house. This is I would call it like a buy now house or just like a secondary marketplace for buying and selling NFTs for a specific price using the Zora protocol. So you can see this is like super clean UI. It's a really simple repo too. So it's actually very good for navigating if you're kind of new into development. You can just fork this pretty quickly and then get going, change all the UI and now you just have like a custom marketplace, change the NFT collection that you want everything to be indexing and then boom. So another great place if you're trying to build your own interface.
00:25:37.106 - 00:26:27.874, Speaker B: And the last thing I'll just call out are some of these partner dev tools that we got in recently. So we have a ton of really cool partners building stuff and doing presentations that you'll continue to hear more about sporesdao. Just dropped the Spores Kit, which is a repo for integrating spores. It's really interesting. It's like a music remixing on chain music remixing royalty sending just like contracts plus UI, plus interesting ways to actually save that metadata to IPFS and then sustain that so you can always access it. So this is a really cool thing if you're interested in building kind of in that music category. That's one of the core categories of the hackathon.
00:26:27.874 - 00:27:04.366, Speaker B: Similarly, Spin Amp just put out their kind of spin what did they call it? The spin amp SDK. So easy ways to integrating with their API, their indexer hooks for getting playlists and stuff like that. So would also point you there if you're trying to build things related to playlisting or just like indexing music or adding curation and also noom network. They're kind of like the open source version. They're the open source data focus of hi fi labs and they have a ton of stuff related to metadata and indexing as well. That is really cool. All open source.
00:27:04.366 - 00:28:27.486, Speaker B: So if you're interested in getting involved in music metadata, I would hop in there and then I want to call out this because if there's anything that gets built during this hackathon, this is what I want to see built, which is this app called Ethpass. I'm not going to run the live demo right now, but if you open it and go here, it's pretty much just like the best way I've ever seen for it grabs all the NFTs in your wallet and it lets you generate an Apple Wallet or a Google Pass in like 30 seconds. Like, I swear, go to this website, try this demo, you can get a fully functional Apple Wallet, google Wallet pass on your phone super quickly and then ETH Pass has a docs and like an SDK to integrate with to actually build a marketplace on top of that and allows for authenticating in person. So I would love to see a full stack just marketplace built on this because that to me still feels like it's missing. Like, yes, there's people doing ticketing, but why isn't there, like, an open source thing where you just throw in your contract address and boom, now you can just have that, like, a secondary marketplace for buying and selling tickets that then people can download and use in person. Right there with Ethpass and with Zora and the indexer, you can do all of that. So kind of just like a call for that.
00:28:27.486 - 00:28:55.638, Speaker B: And I called for someone to build that because I just want that personally and that I think I'm at 30 minutes. I was going to show a demo for how to fork the starter kit locally, but I don't think I had that. So let me pause for a second. I'm going to stop sharing and mute myself. Jacob, what is good? Do I stop now? Did I just go over. Or what's the deal?
00:28:55.804 - 00:29:20.254, Speaker A: No, you're right on mean, I think we can definitely pause here. If it's a good natural place to pause, we have Ian ready to go. But yeah, that was awesome. It was a quick overview. I shared the link to the Tweet in the global chat as well on ETHGlobal TV, so if you're looking through the Tweet, that's where to find it. Yeah, I think that was an awesome overview. I think you covered as much as I think you possibly could.
00:29:20.254 - 00:29:20.810, Speaker A: Honestly.
00:29:20.890 - 00:29:48.440, Speaker B: Yeah, that was the whole thread and I'll be adding to that thread over time. Also, if you've built stuff with Zora before, I know there's all of you people from the previous hackathon probably on this call, and you've built cool stuff, go to that thread and drop it below, because that's just a place, ideally, where anyone in this hackathon and in the future can just like, okay, I'm trying to start building on Zora. Where do I start? Here's. All the resources go crazy. So please, if you've built cool stuff before, share your knowledge, share your resources in that thread as well.
00:29:49.050 - 00:30:15.374, Speaker A: Awesome, very cool. Okay, well, thank you Max, I appreciate that. Of course, everybody who's watching this, I know that was a lot to cover. It's already recorded, so it's going to be available afterwards as well. And we'll to it right on the prize page for a lot of the partners that Max was mentioning at the end as well. They're also on that prize page, so just prizes and you'll see all those resources there as well. But again, the thread also has all of so amazing.
00:30:15.492 - 00:30:16.254, Speaker B: Okay, cool.
00:30:16.292 - 00:30:17.210, Speaker A: Well, thank you so much, Max.
