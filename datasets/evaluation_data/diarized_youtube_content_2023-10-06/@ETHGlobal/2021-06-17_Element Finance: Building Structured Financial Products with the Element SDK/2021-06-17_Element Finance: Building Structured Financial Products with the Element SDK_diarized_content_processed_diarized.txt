00:00:08.770 - 00:00:32.000, Speaker A: Hey, guys. Welcome to the building. Structured financial products with the element SDK workshop. We have Charles and Paul here from our sponsors Element Finance, and they're going to be running today's workshop for you guys. If you guys have any questions, just throw them in the chat and then they'll try to get to them at the end in A-Q-A. Go ahead, guys.
00:00:34.130 - 00:01:36.360, Speaker B: Thank you. I'm just going to share my screen quickly. Welcome, everyone. All right, so Paul and I are really excited to talk to you all about how you can build structured products with the Element Finance SDK. Our agenda for today will be giving a brief introduction of Element Finance and what we do, we'll start off with an introduction with the Element SDK, as well as talk a bit about the motivation behind it. Then Paul is going to walk you through actually setting it up. We'll talk a bit about the examples we currently have within our SDK, and then we're going to do an actual video walkthrough of a specific example, which is finding the spot price and minting.
00:01:36.360 - 00:02:27.240, Speaker B: And lastly, we're going to have a little breakdown of the various product ideas that we have listed in our prize page for anyone wanting to build on top of Element during the hackathon, as well as give a review of the prizes. We're going to be allocating at the end of the hackathon. And finally, we have a really great teaser. We've been building heads down since our testnet went out, got tons of feedback from our community and we've made a lot of changes. And we're really excited to give you the first teaser there. So, to kick things off, what is Element Finance? Well, Element Finance is bringing high fixed yield income to the DeFi market. It's a fixed yield protocol where users can purchase ETH, BTC, USDC and Dai initially at a discount without having to be locked into a term.
00:02:27.240 - 00:03:04.420, Speaker B: So this allows the exchange of discounted assets in the base asset, whether that's ETH, BTC, USDC at any time. Since Element's core principles are to be an open, self sustaining, community governed protocol, we're having a really big focus on interoperability. So as such, we've built an SDK for developers to use when interacting with and building on top of the Element smart contracts. I'm going to pass it off to Paul to give a brief overview of the protocol architecture and then teach you how to set up the SDK.
00:03:07.000 - 00:04:01.108, Speaker C: Hi, everyone. My name is Paul. I'm working on smart contracts at Element. And so the diagram you see before you is sort of the core of the Element protocol. Basically what happens is that a user deposits into the system and accretes an interest token and a principal token from it. So the primary points of interaction for a standard user will be this user proxy, which is a component which is specifically designed to hold ERC 20 allowances securely and has got specific security protocols in place, so that if you are developing a smart contract or a front end, you can feel comfortable putting an unlimited allowance on this because it's specifically designed for it. The other contract is this Tranche principal contract.
00:04:01.108 - 00:05:17.760, Speaker C: There will be multiple iterations of this, so it's indexed by the expiration time and the underlying asset. So these two things will be the primary places that you'll interact with the contracts. If you're building on top of us building extensions to the protocol, you might also be interested in this Euron asset proxy. This is the part of the system which can be replaced to add another type of yield bearing asset, such as like a compound vault or an ave vault. Basically, all you have to do is implement some internal methods which manage deposits and withdrawals and price lookups and you'll be able to run the entire system on top of that with generally pretty minor, almost no headache. The system as a whole. The way it works is it takes in tokens into the Tranche contract of the user proxy, locks them into URiM, and then waits about three months and then splits up whatever is left in accordance with the yield principal split.
00:05:17.760 - 00:06:22.800, Speaker C: All right, so let's talk a little bit about the SDK. So we've built on top of Hard hat, like many projects have. I think some of you will be really familiar with this, but for those of you who aren't, it's a node based project which allows you to interact with the Ethereum blockchain and smart contracts effectively. So to be able to actually use it, you'll need NPM and node JS. We specifically use TypeScript, so you will also need TypeScript, but it should be automatically installed by NPM install. The steps to be able to finally run your code include loading some contracts from our GitHub generating interfaces and then building actual typechain artifacts and compiled bytecode from the loaded contracts. The SDK, since it interacts with Ethereum, has a few things that it needs to actually be able to know to be able to load data from the blockchain.
00:06:22.800 - 00:07:29.820, Speaker C: The first is you need to be able to connect to some RPC endpoint. For most developers, this is Alchemy or Infura, but you get extra crypto cyberpunk points if you connect your own local full node. Additionally, if you want to be able to actually send transactions to the blockchain, as you might know, you'll need a private key and some Ether. If you're building on our testnet, we are more than happy to provide you with as much Gorely ETH as you wish. Once you have the private key and the RPC input you want to connect to, you can follow the instructions in our README to be able to put these into the environment, and our scripts will be able to handle it from there. Okay, so we've built some examples for you, and these will be able to show you how to use the code in the SDK and provide some really basic standard functionality. You'll be able to use the code in here, tear it apart and build basically anything that is possible on the element protocol.
00:07:29.820 - 00:08:20.936, Speaker C: So the first is the contract addresses example this one simply goes to our deployment repo, pulls down all of our contract addresses and gives them to you in a format you could interact with in TypeScript. The pool ID. Example this locates the balancer pool ID. Balancer v two is a bit unique because you don't just need the address of whatever pool you're interacting with, you also need a special Identifier which is some data packed into the address format. So this script will just get that for you. The spot price is something that I think has some of the best examples in the SDK examples simply because I think it's something you can use a lot in front end development or bot development. Firstly, it shows you how to load all of the data you need from the blockchain about the prices and the pool balances.
00:08:20.936 - 00:08:52.760, Speaker C: And secondly, it shows you how to use our TypeScript methods to actually emulate the bonding curve logic. And that's really important because if your application, your bot, your website is constantly querying the blockchain to figure out how much a trade will be resulting in it'll be really slow. So you really want to be able to use our trade estimators that are in spot price. Next we have swap. Swap. It does what it says on the tin. It swaps tokens on our balancer pools.
00:08:52.760 - 00:09:54.090, Speaker C: There are actually multiple methods for swapping, so if your application needs to swap multiple things at once, you might not want to follow this specific guide. This is for swapping one application or one token at a time. So if you have a multi swap and you can't find exactly how to do that on the balance or SDK, feel free to hit us up in discord because we are more than happy to help. The final is mint. Mint is one of the primary interaction points. This script shows you how to take one unit of an underlying, say one USDC and turn it into a principal and a yield token for a tranche. So next we have a little video recording of me actually using the SDK video recording of course to prevent any demo day gremlins that always seem to pop up.
00:09:54.090 - 00:11:08.560, Speaker C: Okay, so the way we want to run our code is through hard hat, so you can see that we're invoking the TypeScript script MPX hardhat run examples spot price. And above the console you can see the code for spot price, which, as you can see, what it does is roughly it calls this getreserves method to load the reserves from the balancer pool. And then we'll parse them out so that you can see the LP token supply, the reserves, the expiration timestamp and some other data like the spot price. As you might notice, if you're looking at the outputs of our SDK, the PT price plus the YT price is actually much greater than 1.39, which means that there's a 39% ARB. Unfortunately, this is probably only going to happen on the test net because that's a really big ARB. So let's see how you can mint some tokens to capitalize on that.
00:11:08.560 - 00:11:55.888, Speaker C: So if we run this Mint script, what will happen is that you go in and you approve, you approve the user proxy address, which again, this doesn't necessarily have to be every time, but you will need to do it once for each asset. And then as you can see in the console, this is to be expected. It's not actually an error. This is the result of the blockchain call which sets an approve. And as you can see in the events, this is an approve. And if you decode the data, you'll see that it's actually the right amount as well. After you've approved the user proxy, you can call into the Mint with proxy functionality and that'll make the call to the blockchain for you with your specified gas price.
00:11:55.888 - 00:12:38.300, Speaker C: And so you can see that you also get an output which contains all of the information about your transaction on the blockchain. This one has a lot more events that are a lot harder to decode. So if you're looking at this output and you feel a little bit overwhelmed, that's very normal. And we're more than happy to help you decode it or figure out what other data you might need from return from your Mint. And at the end of this process, we now have taken one USDC and we've turned it into a principal token and a yield token, which together are worth approximately 1.39 USDC. So a nice 39% ARB.
00:12:42.180 - 00:13:47.936, Speaker B: Awesome. Thanks Paul. So, I'm sure you're all wondering, what can you build on top of Element during the hack? Money hackathon. So in general, the DeFi ecosystem has been powering this new generation of interest rate markets and we believe Element as the forefront of this new movement. So a really great thing about being our first hackathon is that everyone here can be amongst the first developers to build with Element. There are many possible products and strategies that we can further introduce to improve capital efficiency to all types of users, whether that's casual and new users, people who are interested in just generating passive income, or for the experienced DeFi users who want to maximize all possible ways to generate more APY. So the products built over the course of the hackathon and on top of Element in general may vary from facilitating just a better user experience to things such as one click transactions, bundling up certain actions into one or more complex structure.
00:13:47.936 - 00:14:34.630, Speaker B: Products that use elements primitives. So in our prize page description, we listed a few inspiration ideas and these are one click solutions. So like I mentioned before, bundling up certain actions that the element protocol provides and offering it in a one click solution. I'll get into an example in a bit. The next is yield ladders and perpetual redemptions. So yield ladders basically allow the rolling over of fixed rate interest terms so that a user can continuously be involved in fixed rate interest. After the, let's say, three to six month period ends, they can automatically be rolled over into the next one.
00:14:34.630 - 00:15:35.268, Speaker B: The next one is just asset exposure flexibility. And what that means is you can build products on top of Element that are alternatives to collateralized lending so you never have to put up your asset as collateral in order to borrow and then get exposure to yield. That's one we're really excited about and I'll get into more details about that shortly. But the last one we're interested in seeing is Arbitrage and Yield token compounding bots. And before I move on, I just want to define what yield token compounding is. It's very similar to interest rate leverage, but basically it means that you're continuously selling the principal tokens in order to multiply your yield exposure without having to borrow additional assets. So in terms of the one click solution ideas we have, we believe that element creates this ultimate flexibility for how users can manage and put their principal tokens and yield tokens to work.
00:15:35.268 - 00:17:10.696, Speaker B: So some of the possible one click solutions that we were thinking are bundling up the mint and provide liquidity actions into one atomic transaction, providing a nice UI for it, as well as securing fixed yield and providing liquidity. So those actions are both easy to do in a one click transaction. The more kind of challenging ones would be minting and selling principal tokens continuously, very similar to what I just described earlier with yield token compounding. And then the last one would be a product that just does one cycle of yield token compounding and possibly using a flash loan to reduce the high input requirements of capital on many users that can't afford it in terms of the yield ladders and perpetual redemptions. So for passive DeFi users, a yield ladder that automatically redeems principal tokens and rolls them over into a new term, essentially allowing for automating of compounding, making the overall experience less more worryless for participants and easier for the passive income user who doesn't necessarily want to check a platform every couple of days to just check up on their assets. So these yield ladders could range from monthly rollovers, quarterly rollovers or biannual ones depending on the current available terms within the element platform. As for asset exposure flexibility, so the element protocol, like mentioned before, has a huge amount of flexibility in improving capital efficiency for users.
00:17:10.696 - 00:18:09.808, Speaker B: So a really cool alternative to create during the hackathon would be to use an alternative to a lending protocol where a user maintains exposure to the asset of their choice while taking on a yield position of another asset. So an example that we like to explain is if a user wants to maintain exposure to ETH because they love it so much, but they also want to earn the yield from a stablecoin, they can simply sell ETH for Dai deposit to mint principal tokens of Dai. Sell those principal tokens back for ETH to keep that exposure to ETH. But at the same time, you're keeping that exposure to the yield token of Dai and you're still holding your precious ETH. So it's a really cool process. We're more than happy to talk about in a discord more and provide you with more resources, but we are very excited about this one. And lastly, so users can trade to increase their exposure on Element to variable interest if the fixed rate discounts are too low.
00:18:09.808 - 00:19:02.480, Speaker B: And then arbitrage opportunities present themselves if the discount is smaller than the going rate of the premium of yield tokens in the market. So, two ideas include a product that allows users to select how many layers of yield token compounding they would like to perform all in one bash transaction. The second one is an arbitrage product that would scan for the current discount rate and premium rate of principal and yield tokens. And if the total amount would be greater than one, the arbitrage bot would automatically be executed. So essentially, this means that anyone can mint immediately and sell for a profit. So, now that we've gone over all the potential product ideas that can be built on top of Element, I wanted to give a brief overview of our prizes offering. So, Element is going to be awarding a total of 8000 in USDC prizes.
00:19:02.480 - 00:19:47.908, Speaker B: The best product built using the Element SDK will be awarded 4000 USDC. And then the next prize is a prize pool. So this will be shared across anyone who builds on Element, whether it's the products we mentioned in the earlier slides, or if it's a new novel approach that you and your team have created on your own. So that pool will be split for 4000 USDC as well. So now, to end off the presentation, I wanted to give a very early sneak peek of all the work we've been putting in over the past couple of weeks. The first one is a product split sorry about that. Where it's called element save.
00:19:47.908 - 00:20:34.532, Speaker B: So this is the simplest way to grow your crypto. And it's targeting the more casual and passive income users to grow your crypto assets at a fixed rate with just principal tokens. So basically, the principal tokens are on sale discounted versions of regular popular crypto assets that let you buy and hold for a set period of time and then redeem for the full value at the mature time. And then once that's been matured and you redeem, you can go ahead and choose a new term to continuously work on. So the cool idea we mentioned earlier would be to have an automated way to keep rolling those over. The next sneak peek is the Element platform redesign. So we've cleaned up the platform and combined a few different tabs.
00:20:34.532 - 00:21:27.930, Speaker B: We used to have separate tabs for the principal tokens and Yield tokens, and now we have Earn and Trade along with the portfolio where you can manage all your positions, whether it's Principal Tokens, yield tokens, staking and whatnot. So the Earn page is dedicated to people who want to earn further on their already fixed rate by trading principal tokens and yield tokens for separate ones. So it also provides a custom AMM that ensures liquidity in the market. And additionally, you can actually provide liquidity to earn further APY, as well as earn trading fees. The next tab is the Buy and Sell, so it allows you to buy and sell unrealized yield. It also comes with the liquid markets as well, and liquidity providing possibilities as well as earning the same fees. As I mentioned before.
00:21:27.930 - 00:22:18.692, Speaker B: And the last teaser is a sneak peek of the new website. We've combined all these products I've mentioned into a nice portal. Once the website goes live, you'll be able to scroll down and see the details of each page, explaining the different functionalities and offerings they provide, as well as, of course, our docs and community links. And on a final note, we are very excited to say that the Element Protocol Mainet launch is coming on June 30. This means that you will be initially starting to work on your product on testnet in the first part of the hackathon, but midway through we'll be going on main net, so you'll actually be able to create the first products created on top of the Element Protocol. And that concludes our presentation. Thank you very much for joining.
00:22:18.692 - 00:22:54.860, Speaker B: And I think we can open up for Q A now. Does anyone have any questions? I can't see the YouTube live stream or anything?
00:22:56.990 - 00:22:59.830, Speaker A: There are no questions on the YouTube yet.
00:23:00.000 - 00:23:18.900, Speaker B: All right, well, in that case, we are available on Discord for the coming weeks. If you have any questions or you want to share your product updates and whatnot, we'll have someone dedicated to the channel each day for your questions, and we're really excited to see what everyone wants to build.
00:23:20.950 - 00:23:39.462, Speaker A: All right, since we're not seeing any questions in the chat, we'll wrap it up here. Thank you, Charles and Paul, for running this great workshop. And thank you to Element Finance for sponsoring Hack Money this year. Yeah, we really appreciate it. I hope you guys had a good workshop. Bye.
00:23:39.606 - 00:23:39.960, Speaker B: Thank you.
