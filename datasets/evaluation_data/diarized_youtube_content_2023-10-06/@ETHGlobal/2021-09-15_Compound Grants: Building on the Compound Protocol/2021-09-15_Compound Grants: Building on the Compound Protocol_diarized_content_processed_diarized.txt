00:00:00.170 - 00:00:45.660, Speaker A: Everyone pile in. Welcome, everyone, to the compound workshop. Today we're going to have a half hour workshop. We have Adam here from Compound Grads and the name of the workshop is building on the Compound Protocol. If we can ask everyone to look in the chat and you can put questions in the chat at during the workshop and we'll try to get to them at the end. And again, this will be recorded. So if you miss something or have to leave, it'll be on the ETH global YouTube right after this, right after we finish here and at that I will let Adam begin and take it away.
00:00:46.110 - 00:01:08.414, Speaker B: Great, thank you. Excited to be back at another ETH online. So I'm Adam. And I am the developer relations lead at Compound Labs. I'm here to help you out with your Compound Protocol related development projects. You can find me on Twitter, Adam Bravosa and of course on Discord. Discord's the place to ask me questions related to development.
00:01:08.414 - 00:01:50.618, Speaker B: I'll help you out there, you can at me and I will get back to you as soon as I can. So let's talk a little bit about what I'm going to talk about today, the Bounties first and then I'm going to tell you about the Compound Protocol if you're not familiar. Going to show you some developer resources and also do a little dev workshop. So Compound Grants is an independent organization that funds builders like yourselves in projects that further the advancement of the Compound Protocol. So even after this hackathon, you can apply for a grant@compoundgrants.org to get your project funded. And the Bounties we have are the most innovative use case of supplying to the Protocol, that is a $3,000 bounty.
00:01:50.618 - 00:02:31.790, Speaker B: There's also the most innovative use of borrowing from the Protocol, also $3,000. And the best, most full featured open source interface for the Protocol, $3,000. And if you do include your project having Compound Protocol in it, but you didn't win the bounty, you will win part of the prize pool, which is also 3000. Awesome. So I'll give you a little bit of a primer before I explain what the Protocol is. I work at Compound Labs and we are the authors of the Compound Protocol. And the Protocol is made up of several smart contracts running on Ethereum main net since 2018.
00:02:31.790 - 00:03:19.430, Speaker B: The mission is to create efficient algorithmic money markets. So what gets me excited to work in the DFI space is that we author and continue to steward decentralized, free and open crypto tools for everyone on the Internet that has an internet connection. This includes the banked, the underbanked and also the unbanked. So this is a huge amount of market share globally. And if you think about it, anyone on Earth with a smartphone and an internet connection can use DFI and use Compound. So historically we've seen interest rates for suppliers at 10% and even 15% on APY on USDC as well as the other supported assets. And I love what we're doing because it's different from TradFi.
00:03:19.430 - 00:03:57.858, Speaker B: DFI systems like the Compound Protocol are voluntary and code is law. With DFI you get decentralization and you get transparency, unlike the centralized banking and financial systems. So that's what gets me excited to work in DeFi and also the Ethereum space. So what is the compound protocol? If you're not familiar, is simply put, it's crypto asset money markets. And we refer to it as the Compound Protocol. It runs on Ethereum, it's decentralized. It allows users to earn interest on their cryptocurrencies or permissionlessly, borrow other cryptocurrencies.
00:03:57.858 - 00:04:39.218, Speaker B: So those are the two basic uses of the protocol for everyone. Earn interest on your crypto or borrow other crypto assets. So it can only support crypto assets that are tokenized on Ethereum as ERC 20s, also Ether. So bitcoin is supported through wrap bitcoin. But assets on other chains do not work unless they're tokenized on Ethereum. So it allows suppliers to earn variable interest rate on their assets. And an individual that uses an app like the ones listed on the Compound homepage at Compound Finance, they can use those apps to use the Protocol.
00:04:39.218 - 00:05:20.222, Speaker B: Or developers can use their own code to use every feature of the Protocol. And developers can build their own apps that use the Protocol as interest earning infrastructure. So that's folks like you in this hackathon, you can build new apps that use the Protocol. So use cases we see are crypto wallets. They allow their users to use the Protocol for earning interest instead of having their assets sit idle in their crypto wallets. And also businesses that hold funds for a period of time, they use the Protocol to supply and earn interest instead of letting those assets sit idle. So I'll give you an example of supplying.
00:05:20.222 - 00:05:57.070, Speaker B: Let's say you use one of the many interfaces for Compound or you write your code to supply directly. You can supply an asset like Ether and you get C tokens in return. So you would get c ether if you supplied ether. So when a supplier supplies, they get a fixed amount of C tokens. And you can think of that as a code check for your underlying asset. And as time progresses, more underlying can be redeemed for those C tokens. So you can think of it as time passing drives the interest that's accrued for the C token holder.
00:05:57.070 - 00:06:33.414, Speaker B: Assets are stored in smart contracts that no individual controls. C tokens are redeemable at any time, so users can supply for as little as one block and interest accrues every Ethereum block. So nowadays it's about 13 and a half seconds. And this enables on demand supplying and redeeming from the Protocol. There's no need to wait for a lockup period. You can earn interest by supplying to the Protocol for as little as a minute. The other major use of the Protocol is borrowing.
00:06:33.414 - 00:07:23.030, Speaker B: So the Protocol enables over collateralized borrowing of assets. So an example would be you supply a collateral like WBTC or ETH or one of the many others, and you borrow a smaller value amount of Dai or another asset. So your account is over collateralized. And in order to borrow, a user must supply a collateral asset first, and they can then borrow an asset that's supported by the Protocol. And the borrowed asset will be held in the user's wallet with no strings attached. So borrowers earn interest on their supplied asset, just like a supplier does. However, their borrowed asset also accrues interest as well in the other direction.
00:07:23.030 - 00:08:08.102, Speaker B: So they end up owing more of the asset once they're done with their borrow. So if the account becomes under collateralized, like when the USD value of the collateral goes down, or the borrower accrues too much borrower interest, the users see, tokens of collateral can be clawed back to the Protocol when a liquidator performs a liquidation on the account. So it's bad to get liquidated. Supplying only is safer than borrowing. You can't get liquidated when you supply only, and there's much less risk involved when you supply only. So that's a little background on the two major use cases of the compound Protocol. These are the currently supported assets.
00:08:08.102 - 00:08:35.342, Speaker B: This list keeps growing. We just added four more recently in a Decentralized Governance proposal. So pretty exciting. Most of these can be used as collateral, almost all of them. There's a few exceptions, but all the assets can be supplied to earn interest or borrowed. So the protocol is controlled by decentralized governance. So there's no one person that can control the Protocol.
00:08:35.342 - 00:09:13.434, Speaker B: It is all through decentralization. So you can check out the open source contracts on GitHub or on Etherscan. Governance is enabled by the Comp token, which is a utility token. Users can vote yes or no on proposals using their comp token. So proposals are literal code changes to the Protocol. If you have more than 65,000 comp tokens, you can create a proposal which is a literal code change that will be applied to the Onchain Protocol if it succeeds. So this is the comp token.
00:09:13.434 - 00:09:45.346, Speaker B: It is a utility token. Users can use it to vote on compound proposals. You can vote yourself if you delegate to your own address, or you can delegate to another address, say someone's more familiar with the Protocol, more active. You can delegate your tokens to their address, and your voting weight will be used in the proposal. So you can delegate to yourself or another address. Tokens are currently being distributed to users of the Protocol. If you supply or borrow, you can earn comp token.
00:09:45.346 - 00:10:35.240, Speaker B: There's a four year period where the token is being dripped to users of the Protocol. We're currently about a year and a half in, and you can get an API on comp token if you use the Protocol by supplying or borrowing. And you can then participate in Governance. Once you have comp token, so this is a little diagram that shows the phases of compound governance proposals created. And there is a two day waiting period where folks can review it, check it for bugs, check it for unseen consequences of the code change. And developers that have apps that depend on the protocol can make sure that their apps will still function once the new code chain is enacted. After the review period is done, there's a three day voting period that is minimum of three days.
00:10:35.240 - 00:11:18.040, Speaker B: People with comp tokens can vote yes or no on the proposal. If the proposal succeeds, it is put into the time lock for a minimum of two days. So developers can make sure that their applications are ready for the new code change, enact their code changes to prepare for the code change, and once the proposal is queued and executed, it then becomes part of the onchain protocol code. So here is an interface you can use to participate in governance. This is at App Compound finance. Of course, one of the bounties is to build an open source version of the compound app. It is very much welcomed to create as many interfaces for the compound protocol as possible.
00:11:18.040 - 00:11:51.326, Speaker B: It is made of smart contracts that are on ethereum mainnet, so anyone can create an interface. Here's another cool thing. We have a leaderboard of all the folks with comp tokens delegated to their address. This is something that you can also build. So, developer resources, we have docs, everything is linked from the Docs, compound Finance docs. We have smart contract documentation, API documentation, SDK documentation, developer guides, open source code. We got everything there.
00:11:51.326 - 00:12:21.642, Speaker B: So go and check it out. You can reach us at Compound Finance. Slash, discord. The whole community is hanging out there and you can ask questions. Lots of talented folks there can help you out. We have our guides on the Medium blog and also you can check out our open source code on the GitHub organizations listed there. So take the opportunity now to screenshot this or take a picture with your phone and open the link to the GitHub repository that I'm going to be working out of today.
00:12:21.642 - 00:12:51.534, Speaker B: This has the open source code that I'll be showing in a few moments. And you can use this to go towards your bounty prize. It is a little interface for compound that uses compound JS and it's just a plain JavaScript HTML CSS app. So let's check that out. But before we do, I just want to say one more time, thank you to Compound Grants for sponsoring ETH online. It wouldn't be possible without them. You can go over to compoundgrants.org
00:12:51.534 - 00:13:16.890, Speaker B: to apply for a grant. If your project is relying on the compound protocol and furthering the compound protocol, you are eligible for a grant. Head over there and apply for a grant. So that's the end of my slide deck. Next we're going to go over some code. So this is the repository that I wrote. It is simple app.
00:13:16.890 - 00:13:44.770, Speaker B: Here's a screenshot of it. There are a few features of this interface. You can supply assets to the compound protocol using this little supply function. You can borrow assets from the protocol. You can see how much of an asset you've supplied. You can see how much you can borrow based on the amount of collateral that you have in your account. And you can also enable or disable assets as collateral using these checkboxes.
00:13:44.770 - 00:14:21.754, Speaker B: So I'm going to fire up this app first, going to take a look at the back end code for it. It is a node JS app. So what it does is use exprs and also Hard Hat to have a local host environment. So the first major part is this. This is a Mainet fork using hard hat. So we take a copy of the mainnet blockchain and fork that to our local machine so we can do testing locally. This uses hard hat.
00:14:21.754 - 00:15:03.258, Speaker B: You can check out Hardhat.org for more information on how to use Hard Hat. The next part is the setup of an exprs app that simply serves the assets in the public folder, which is some HTML, CSS and JavaScript that's in the public folder here. And the last thing this file does is it seeds assets in the localhost account. So we have a developer account mnemonic that's set up and when you boot up the Hard Hat fork of Main net, it's seeded with 10,000 ether. That's for development use on your local machine. And this part seeds it with some ERC 20 tokens.
00:15:03.258 - 00:15:47.910, Speaker B: So if you want to use ERC 20s in your local environment, you need to sort of steal them from a whale in your dev environment. So that's basically what this function here does. This only works on localhost. We're impersonating using the Hard Hat impersonate account functionality. And we're impersonating the C token addresses because they of course have plenty of ERC 20 tokens at their address. So we're going to take 50 tokens and send them to our first account in our development mnemonic. So that way we can use those in our interface that is connected to localhost.
00:15:47.910 - 00:16:34.630, Speaker B: So just again, this file does three simple things. It sets up a localhost fork with Hard Hat, an express server that serves some static web pages and doorbell. We also get ERC 20 tokens that are seated in our account. So I'm going to start up this app in my terminal so I could start up with NPM Start that basically runs the index file. And now we have our app running. Before I check it out, I'm going to look at my Hard Hat config. We are pointing to Mainnet using a JSON RPC provider URL.
00:16:34.630 - 00:17:09.830, Speaker B: You can get one of these from infura IO or Alchemy.com for free. And you can fork the main net ethereum blockchain onto your machine using that provider URL. This is my development mnemonic this environment variable is the twelve word mnemonic and I use this for accounts that I use locally for testing. The hardhead fork config is here. You set up your URL, you want to fork set up gas prices. I have them set to zero so I can do things like move tokens from the C token address and also set up the development mnemonic.
00:17:09.830 - 00:17:47.410, Speaker B: This last part here is important. We set the chain ID to one. The main net chain ID is one and MetaMask expects that the local host account is 1337. So when you sign transactions they'll fail. So what we need to do is we need to make sure that we set MetaMask's chain ID to one instead of 1337. Now that my app is running, we see that we forked Mainet using Hard Hat. We set up our exprs server and we minted some well, we moved some ERC, 20 tokens, 50 tokens to our wallet.
00:17:47.410 - 00:18:23.290, Speaker B: So if I open up this app in the browser here's the app, I'm going to open up the development console just so we can see what's going on in there. And if I open up my MetaMask first, I'm going to do that thing. I'm going to make sure that my chain ID sets. I'm going to go to Settings, Networks, localhost and my chain ID is set to one. For some of you it might be 1337. Make sure you set that to one and hit Save. Also we have 10,000 ether thanks to Hard hat.
00:18:23.290 - 00:18:50.886, Speaker B: And another thing that I need to do is make sure that my nons on my account is set to zero. This is something that you don't need to do on testnets or main net. You only need to do this on localhost. Head over to Settings advanced reset account. So the last time I used this account locally, my non Scott incremented in MetaMask. So I'm going to reset it to make sure it's zero so our transactions will work. Now we're ready to go.
00:18:50.886 - 00:19:32.126, Speaker B: So if we look at our MetaMask wallet we have 10,000 Ether, we have 50 USDC and 50 Uni thanks to our little seed function we have in the back end. So like I said, with this app we can do things like supply. So I'm going to supply one Ether and our each supplied will go up once we supply. So I'm going to click that button and MetaMask is going to pop up a transaction. Gas is pretty high right now, $55 to supply one Ether. I'm going to confirm so the console logs the transaction object and also the transaction hash. If you're using this app with a testnet or Mainet, you can check this out on Ether scan to make sure that your transaction goes through as planned.
00:19:32.126 - 00:19:48.694, Speaker B: So this transaction got mined already. When I refresh the page I should see an e supplied amount of one. Great. So I refreshed. I have nine nine nine. This is a JavaScript rounding issue. That's part of the JavaScript language.
00:19:48.694 - 00:20:20.110, Speaker B: Just have to deal with it. So now that we have supplied, we can technically borrow. Our borrow limits are still zero because we don't have any assets marked as collateral. So what I'm going to do is I'm going to use this checkbox to mark my Ether that I've supplied as collateral. So when I click that check, I get a new transaction popping up. This is the Enter markets function. The compound protocol has two functions enter and exit markets for marking your supplied asset as collateral.
00:20:20.110 - 00:20:50.254, Speaker B: So if I enter the market, Ether is now counted as collateral. So the collateral factor for Ether is currently 75%. That means that I can borrow up to 75% of my collateral in a different asset. So once this transaction is mined, it has been mined. If I refresh the page, I should be able to have a borrow limit of 75. Oh, wait, no, that's not right. Of 75.75
00:20:50.254 - 00:21:10.530, Speaker B: ether. That's right. And USDC, it's somewhere in the $2,000 amount right now. Let's try that out. All right, so we got yes, zero point 75 Ether we can borrow. The amount of supplied Ether went up because we supplied to the protocol, waited a few blocks. So interest accrued.
00:21:10.530 - 00:21:44.934, Speaker B: So now that we have some collateral marked, we can borrow an asset. So we currently have 50 uni and we can borrow up to 99.34 uni. We should go below this amount because if you borrow the max amount, you'll instantly get liquidated on main net. So let's borrow 50. It's a lot of gas. And now we borrowed 50 uni.
00:21:44.934 - 00:22:04.062, Speaker B: So our wallet should now say 100 uni. Yes, we have 100 uni. Awesome. So, yes, this app, it allows you to mark collateral, borrow or supply. And you can also see the maximum amount that you can borrow. I forgot this part. We can hit this enable Ethereum button.
00:22:04.062 - 00:22:33.714, Speaker B: If you've never loaded the app before, that will trigger MetaMask to connect your account to the app. Mine was already connected because I was playing with this app yesterday. Let's take a look at the front end code. We got HTML, CSS and JavaScript. I'm only going to go over the JavaScript. This entire app is only 271 lines of code. So you can build a pretty featureful compound protocol interface with pretty small amount of JavaScript.
00:22:33.714 - 00:23:01.230, Speaker B: Pretty awesome. So we have a lot of helper functions, but at the bottom we have the main functions. So I'm going to go over those. First, we've got a window load function. So once the page has loaded, we'll register that enable button. So if the user has MetaMask injected into their browser window, we'll run this main function. If not, they'll see an alert that says please install MetaMask.
00:23:01.230 - 00:23:31.318, Speaker B: And once their wallet is connected, they hit that connect button. The main function will get executed. Here's our supported assets. You can of course add to this if you'd like you'd have to edit the HTML as well. These are our assets in our app. First thing we do is fetch all of those Dom elements like the buttons, the text boxes and stuff like that. We're going to get the prices from the price feed of the protocol so we can see how much liquidity we have when we mark assets as collateral.
00:23:31.318 - 00:24:07.320, Speaker B: Let's take a look at that function. We can use the window ethereum provider that MetaMask injects. We can get prices using the compound Get price which is part of the compound JS SDK. And we get the price of all the assets and we add them to an object so we can use them later. Next thing we do is get the selected account. So whatever account the user has selected in MetaMask will be here and it gets logged to the console. So up here is my ethereum address.
00:24:07.320 - 00:24:39.550, Speaker B: Next we get the account liquidity. This is a comptroller function that's part of the compound protocol. You can check out that function in the docs. Here's how we would get read from the blockchain using compound JS. This is a read function which will work for any ethereum contract. What you do is you pass the address of the contract. You can do an inline abi of the function that you're hitting with your transaction.
00:24:39.550 - 00:25:23.390, Speaker B: You can pass the parameters, which is the user address, see how much liquidity they have and of course the transaction parameters. This is just part of ethers JS. The SDK wraps Ethers JS and we get the amount of liquidity that the account has in USD scaled up by 18 decimal places. So if we divide that by one e 18, we get the dollar value of our liquidity. So that's how we're able to display that in the app. Next we have some setup functions for our Dom elements. We make sure that users can click on buttons and put text in text boxes.
00:25:23.390 - 00:26:07.610, Speaker B: The important part here I'd like to highlight is supplying and borrowing since those are the main functions of the compound protocol. Basically this function, iterates through every asset that we're supporting in our app and it registers the button and the input. And when the user presses the button, we're going to run this supply function. And what the supply function does basically is make sure that the user put a number in the text box and it uses the compound jssdk to do this one line function that supplies the asset to the protocol. You pass the asset name the amount that the user wants to supply. And of course this is optional. Here I put this so MetaMask can make sure that I have the right chain ID when I'm on localhost.
00:26:07.610 - 00:26:46.318, Speaker B: And after the transaction is submitted, we have the transaction hash logged to the console so users can investigate if there's some kind of issue. And of course if there's an error, we alert the user. So they know that something went wrong. So the inverse of supplying is borrowing. With the compound JS SDK, it's easy again to do a one line function for borrowing and of course, for marking assets as collateral. Like when I click that checkbox, there's another one line function for entering or exiting markets. So if we check the box, we're going to enter markets.
00:26:46.318 - 00:27:12.670, Speaker B: If we uncheck the box, we're going to create a transaction to exit the market. So that is basically the code of this app. It's open source on GitHub. You can head over to GitHub and clone it now and you can check it out, work on your projects for the ETH online hackathon, and hopefully go towards those compound grants. Bounties, I'm here to help you out. You can find me in discord. Adam B.
00:27:12.670 - 00:27:54.112, Speaker B: Make sure you add me and I can answer your developer questions there. That's all I've got for my development workshop. Happy to take questions now with the few minutes we have left. Looks like we've got a question here from Toondayod. Can you give a rough estimate of the amount of yield that can be earned on 10,000 USDC supplied only for one block or for the period of at least 13 seconds that you mentioned? Yes. So for one block, you actually wouldn't see interest earned. You'd have a rounding issue with the C tokens.
00:27:54.112 - 00:28:33.012, Speaker B: So usually assets have more decibels than the C tokens. C tokens have eight. So if you only supply for one block, you're going to have a rounding issue where you have a hair less of the asset. But if you supply for more than one block, you'll see like a dust amount of the asset, very small, like we saw in my app here. So we supplied one ether and after I guess it was like two or three blocks, we see this very small amount of ether. So a dollar value of this is like many decimal places of a small amount. So that's a little estimate of how the protocol works.
00:28:33.012 - 00:29:10.656, Speaker B: The APYs that are listed on the website are for, of course, a year of interest. So if you go to compound finance markets, you can see the current interest rates there and you can see how much you'd earn in a single block. Yeah, you're welcome. If anybody else has any questions, you can ask them in the chat. We have another minute left. Why would you need a new open source interface? So this is very important. Part of the decentralization of the protocol is to make it so there's no one central power controlling anything.
00:29:10.656 - 00:29:44.248, Speaker B: So if you have only one app for the protocol, that would not be good, that would be a centralization. And of course, us in the crypto community, we love decentralization. So having many apps that are supported, there's less possibility of downtime, less possibility of issues in the future. So, of course, having more apps is a good thing of course, if you have an app that has something you don't like, you can make a new app. And that would support more people and make more people happy. Yes. All of the assets are variable rates.
00:29:44.248 - 00:30:13.290, Speaker B: It's based on supply and demand of the current protocol. So the rates change at any time. Yes. Cheaper way to use any Ethereum contract at the moment is to make sure that you use L two S for your transactions. Also infura has a service. I think it's called Infura IDX, something like that. It makes sure that your gas price is as low as possible.
00:30:13.290 - 00:30:25.100, Speaker B: I think that's all the time we have for questions. Thanks, everybody, for participating and asking. Of course, I'm available in Discord from now until the end of the hackathon.
00:30:27.440 - 00:30:30.140, Speaker A: That was awesome. Thank you, Adam.
00:30:31.040 - 00:30:31.500, Speaker B: Yeah.
00:30:31.570 - 00:30:49.996, Speaker A: Again, we want everybody to just reach out, continue the conversation or question in Discord. And also, reminder, this will be uploaded soon to the YouTube, so if you missed any of this, you can catch it there. All right, Adam.
00:30:50.028 - 00:30:50.272, Speaker B: Thanks.
00:30:50.326 - 00:30:51.120, Speaker A: That was awesome.
00:30:51.270 - 00:30:52.430, Speaker B: Once again, thank you so much.
