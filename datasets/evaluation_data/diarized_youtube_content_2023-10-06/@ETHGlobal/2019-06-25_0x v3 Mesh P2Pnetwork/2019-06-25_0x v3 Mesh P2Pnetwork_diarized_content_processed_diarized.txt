00:00:01.850 - 00:00:57.650, Speaker A: So this presentation does require some background into what Zero X is and what Ethereum is. If you have questions, please hold until the end of both of the presentations. Zero X is a protocol for decentralized exchange. It uses off chain relay and on chain settle book on chain settlement. So orders are broadcast by these entities called Relayers, and then users find these orders and then they submit them to the Xerox smart contracts for settlement. So this is roughly how the Smart Contract high level architecture looks like. So you have Relayers who are these off chain entities hosting orders, and then orders are propagated to users who go through the primary exchange contract.
00:00:57.650 - 00:01:52.270, Speaker A: The exchange contract sends transfer the dispatch transfers to these proxy contracts which are responsible for actually transferring these different assets, and then the tokens are swapped between users. So, some background on where we're currently at today and what is included in Zero X 2.0. So 2.0 was a fundamental shift in the architecture of our Smart Contracts. It added a mechanism for supporting arbitrary asset types within the protocol. Currently it supports ERC 20 and ERC 721 tokens, and pretty soon there'll be a boat to add support for ERC 1155 tokens. It also included a much more flexible trading functionality, so you can match multiple orders together without requiring any upfront capital.
00:01:52.270 - 00:02:30.436, Speaker A: There are also more efficient ways to cancel orders. So you could cancel an unlimited amount of orders in a single fixed size transaction. And I would say, most importantly, it allowed the protocol to just become much more extensible. You can use custom smart contracts at various points within the trade execution process. You can now create orders from Smart contract wallets such as Multistig. You can add arbitrary pre or post conditions to executing a trade, or you could use Smart Contracts for custom signature validation. So 2.0
00:02:30.436 - 00:03:12.976, Speaker A: was deployed last September, and we received a good amount of feedback since then. A couple of points here people generally don't like that fees given to Relayers are required to be denominated in ZRX. It just seems to be a point of friction for both users and developers. There's a desire to interact with the Smart Contracts in a variety of languages. There are many classes of developers within the Zerox ecosystem, and typically they're not all familiar with TypeScript. Liquidity could be better all around, and people wanted more flexibility around matching and verifying orders. So that functionality was included in 2.0.
00:03:12.976 - 00:04:33.226, Speaker A: But there are a few edge cases that I think are really preventing people from taking. So the high level goals of 3.0 are to improve developer experience, to incentivize liquidity and create better alignment for the key stakeholders, which are primarily market makers, to remove points of friction within the protocol, and to create more flexibility around integrating hubs and Smart contracts. Not all these problems are possible to fully solve at the Smart Contract level, but they can all certainly be improved zerox uses a process called the Zero X Improvement Proposals process similar to EIPS in Ethereum to sort of generate discussion around new features in the protocol. So I encourage you to check out this repo on our GitHub after this presentation if you want to get a full idea of all the features, including 3.0. We don't have time to go over all of them, unfortunately, but these are the ones I'll be covering at a pretty high level. So I'm lumping all these together because they all have to do with developer experience.
00:04:33.226 - 00:05:30.070, Speaker A: But generally we're going to be making a lot more of the functions within our smart contract public. And then once we have that, it makes it much more easy to support any arbitrary languages for interacting with our smart contracts. Most languages have the tooling to generate smart contract wrappers from just a smart contract API. And once you have that, since many more functions will be public, you will basically be able to get most of our developer tools for free in any language that can support that. We also want to add rich revert reasons. So currently if you set a transaction with smart contracts and that fails, you might get a message that just says like invalid signature or something like that. So with rich revert reasons you're actually able to pass in parameters into these reverts.
00:05:30.070 - 00:06:21.310, Speaker A: So now you might see like invalid signature, here's a hash of the order and here's a signature. Ultimately the goal is to be completely language agnostic with the tooling round. This one is pretty straightforward. So as I mentioned, people are generally not happy that you have to pay fees in CRX tokens right now. So this proposal would remove ZRX as a mandatory fee token for relayers and you would be able to charge fees in any asset supported within the protocol. So you could charge fees in CryptoKitties cheese wizards, e dies whatever. Dip 38 creates a mechanism for sourcing liquidity from Kyber network.
00:06:21.310 - 00:07:14.880, Speaker A: So this is already technically possible to do in 2.0, but the issue is that it changes how you actually interact with Zero X orders, changes both the UX and the developer experience. So nobody is really using this today, but in 3.0 it will become possible to interact with these in the exact same way as you would with any other Zero X order. And since liquidity is one of our biggest goals right now, this is a great way for relayers to bootstrap their liquidity. All they would have to do is monitor the Kyber prices on chain and then they could just create orders on behalf of the smart contract and people could interact with the orders as they usually do. So from a DAP developer's perspective, if you are integrating Zero X, you'll basically get Kager integrations for free.
00:07:14.880 - 00:08:05.310, Speaker A: Also want to shout out to the Kager team because they helped us move this integration along and just have been really responsive and supportive. I will say that if this works really well, it's possible to add any other sources of on chain liquidity. Kygar makes sense as a starting point because they actually integrate a lot of those things into their protocol as well. So you'll technically be able to get liquidity from like Uniswap or ETH to Dai just by using Kyber's contracts. So this is sort of how it would work. A relayer would create an order on behalf of this Kyber maker smart contract send the order to the taker. The taker fills the order through the exchange contract.
00:08:05.310 - 00:09:19.110, Speaker A: The exchange contract sends this throughout the rest of the pipeline of contracts and the taker token is sent to this Kyber contract. The Kyber maker contract will sell that token using the actual Kyber network contract and it will receive the token that the taker wishes to purchase and then it will send it back to the taker completing the trade. And this requires no extra steps for the user. VIP 31 describes probably the biggest fundamental change goes for 3.0. It introduces stake based liquidity incentives into the protocol. So there's a lot of information out there and this is a pretty complex topic, I'm just going to address it at a very high level, but generally it adds a small protocol fee to every single trade. This fee scales with the gas price of a transaction and initially it will target just the average gas cost of a single bill.
00:09:19.110 - 00:10:22.456, Speaker A: So you can imagine that basically your gas costs are just going to double when interacting with the protocol. Market makers receive rebates and the amount of the rebates are a function of the liquidity that they provide and the amount of ZRX that they stake. So this incentivizes ZRX holders to either provide liquidity or to delegate to the most effective market makers who are providing the most liquidity. So it might seem like a strange choice to have this fee denominated ether and to have it scale with the gas price of a transaction. So I want to explain that a little bit because I think that's one of the coolest parts of this feature. So we found that a huge percentage of all the trading volume on decentralized exchanges today is actually just arbitrage bots and they were just arbing all these different sources of on chain liquidity. These arbots are extremely sophisticated and it's very common for them to get into these front running wars with each other.
00:10:22.456 - 00:11:32.650, Speaker A: They're just bidding up the gas price of each other's transactions and they're willing to do that as long as it's profitable for them to do so. The issue with this is that trading is a zero sum game. So if an RBOT or if the miner is making a lot of profit, that is actually taking away from the trader's profitability. So this detracts people from actually creating orders in the first place. So by having the rebate scale with the gas price of a transaction, you're essentially redirecting some of the profit from miners back to the market makers, so market makers can then provide more competitive pricing because they have some protection against arbitrage. Theoretically, this could actually reduce bid ask spread or reduce the net bid ask spread so that even though the taker is paying an extra protocol fee, they will be filling an order at a better price than they would have otherwise and can receive a net benefit for that. There's a lot of additional reading, especially on Zip 31.
00:11:32.650 - 00:11:56.960, Speaker A: You could look at our Zips repo which digs into the smart contract architecture of it all. We have a really good blog post that digs into it as well, and a video that goes along with that. And then there's actually a white paper and some good discussion going on at our forum, so please check that out. And with that, I will hand it over to Alex who will talk about Xerox Mesh.
00:12:04.920 - 00:12:50.160, Speaker B: Hi guys. I'm Alex Brown and I'm the technical lead on a new project that we're really excited about called Zero X Mesh. Zerox Mesh is a peer to peer network for sharing orders. So to help explain why this is significant, I'm going to talk a little bit about how sharing orders works on Zerox. Today, most users interact with Zerox through something that's called a relayer. Relayers are responsible for aggregating orders from many different users into an order book, and they allow users to add, remove or update their orders via an API or a Gui or both. Relayers also have the ability to share orders with each other through something called the standard Relayer API.
00:12:50.160 - 00:13:35.960, Speaker B: This is what the current system kind of looks like. We have a lot of different relayers. Some of them are sharing orders with one another via the SRA, some of them are not. And this kind of leads to a disjointed network where not everybody knows about all the orders in the ecosystem. The SRA does a pretty decent job of allowing relayers to share orders with each other, but there are some problems with it. Firstly, each relayer has to implement their own SRA server, and a lot of them are written in different languages, so this leads to a lot of redundant work in the ecosystem. The SRA is a little bit hard to extend support for new token standards.
00:13:35.960 - 00:14:30.940, Speaker B: When we added support for ERC 721, we also updated the SRA spec, but it was a little bit hard because we didn't plan for this when the SRA was originally designed. And after we updated the spec, we had to wait for relayers to update all their implementations to match it. The last thing is that with the SRA, relayers that want to share orders with each other have to know about all the other identities ahead of time. So they have to manually go through and add the SRA endpoints that they want to pull orders from, and they also have to convince other relayers to add their endpoints. The SRA is not going to go away anytime soon, but Xerox Mesh offers a more efficient way for relayers to share orders with one another and enables some exciting new possibilities. Xerox Mesh runs inside of a docker container and relayers interact with it by using a simple WebSocket API. What this means is that all the relayers are sharing the same code base, so there's not any more redundant work throughout the ecosystem.
00:14:30.940 - 00:15:15.050, Speaker B: Xerox Mesh features a flexible messaging system that can be easily updated to support new token standards or new order formats. So that means it'll be a lot easier to update in the future. And since we're managing the code and it runs in a docker container, there'll be a lot less work on the part of relayers. Most importantly, peers in the Xerox Mesh network are discovered dynamically based on shared interest. So there's no longer a requirement for all the participants in the network to know each other ahead of time and manually keep track of endpoints. What this leads to is a much more cohesive network for shared liquidity. So with Xerox Mesh, we expect to see more relayers connected to one another and more application developers taking advantage of the shared liquidity pool.
00:15:15.050 - 00:16:09.050, Speaker B: Another thing that we're really excited about is that Xerox Mesh enables a new type of relayer called a serverless relayer. So Xerox Mesh runs inside of a browser, and what this means is that if you add a UI on top of it and you can host it on something like IPFS and serve it through a DAP browser, then users already have everything that they need to share orders with one another and start trading. This means that you don't need to have a separate database or a separate back end server. We think that there's still definitely a place for traditional hosted relayers, especially for highly liquid and fast moving ERC, 20 markets. So I don't think they're going to go away. But the serverless relayer model enables a new way for niche markets for NFTs for example, or markets that need a little bit more time to mature. It's a great way for them to get started.
00:16:09.050 - 00:16:54.300, Speaker B: So for some technical details, xerox Mesh is written in Go. It compiles to WebAssembly, which allows it to run in the browser. We're using Lib P to P and WebRTC as a networking layer, and this enables two browser peers to communicate with one another directly without using a third party. We have an incentive model that's inspired from Libtorrent's Tit for Tat and encourages people to share more orders. And we also have a DDoS protection mechanism, which involves checking the ETH balances of users. You can find out a lot more about this in our Architecture Doc, which is on the forum. So, just to give you a rough idea of where we're at in the development process, we announced this project in March of this year.
00:16:54.300 - 00:17:24.226, Speaker B: Shortly after that, we released the Architecture Doc, which I mentioned, which is available on our forum. Starting today, we're open sourcing the repo. So you can go ahead and play around with it if you want to. In June, we're going to launch a beta with a handful of early participants in the network. And then finally in September, we expect to be on main net in full production context. So like I mentioned, we're open sourcing the repo. Now there's still a lot of work to do and a lot of features that we need to add, but it is technically runnable.
00:17:24.226 - 00:17:40.600, Speaker B: So if you're feeling adventurous, you can go to Mesh, check out the code that we have so far and give it a try. That's it. At this point, Amir and I will take questions if anybody has questions.
00:17:50.450 - 00:17:57.594, Speaker A: Is there a server that WebRTC connection?
00:17:57.722 - 00:18:47.872, Speaker B: Yes. So WebRTC actually has a requirement for something called a signaling server to exchange offers and answers. So this is something that we're constantly thinking about. In the first version of Xerox Mesh, there will either be centralized server just for that initial signaling portion, but we're also coordinating with the Lib P to P team on generating spec that will allow any peer to serve as a signaler. So as long as two peers are connected to the same peer, they can then signal through that. Any other questions? Yeah, sure. Yeah, of course.
00:18:47.872 - 00:19:26.750, Speaker B: So we're building an incentive model that is inspired by libtorrent BitTorrent. BitTorrent has this model called Tit for Tat, where you share chunks of a file with people that also share files with you. So you pick the four of your peers that shared the most with you, and then you pick one peer randomly. And the random peers are really important because it enables people that just joined the network, it gives them a chance to kind of participate. And if you share something with them, then maybe they'll share something back. So ours is going to be very similar, but it'll be based on sharing orders instead of chunks of files. That's pretty much it.
00:19:26.750 - 00:19:33.950, Speaker B: We talked about value.
00:19:36.720 - 00:20:22.640, Speaker A: I think. No comment on the value, but not specifically about the value, but concern. Oh, those are the stake based liquidity incentives that I was talking about. So you would stake ZRX and provide liquidity to receive rebates. Does the token also have governance value? Yes, I think governance is extremely important long term. There's a very basic governance framework we're using right now, but it feels like it's probably a little bit early to release full blown governance. I think we need a network that's really worth governing in the first place.
00:20:22.640 - 00:21:04.670, Speaker A: And in order to do that, I think liquidity is going to really kick start that cycle. Mentioned that way. Yeah. So that smart contract is actually going through audits this week. Should be almost done by now. And we're basically waiting for the actual 1155 spec to be finalized before we would have a vote to add it to the protocol. But it seems like it's probably not very controversial and as soon as that happens, it can be added pretty quickly.
00:21:04.670 - 00:21:55.810, Speaker A: There aren't that many projects who are using 1155 today, but in my opinion, it's like, by far the best token standard. It's kind of a combination of ERC 20 and ERC 721 and there are some efficiency gains that come with using it as well. But I know of a handful of projects that intend on using it, so I think when those come online, that's probably when we'll see some activity there. But it's hard to say until then. Any other questions? Thank you.
