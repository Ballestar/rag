00:00:00.090 - 00:00:21.760, Speaker A: Flashbacks with us with Robert, Miler and Steph, who will be going over finding and capturing Mev 101. So without further ado, I'll let them take it away. If you have any other questions, please post them in the chat and they will get back to you either during the talk or towards the end. And let's get started.
00:00:23.330 - 00:00:38.540, Speaker B: Thank you so much. Super excited to be here talking to you all, and I hope to see you all on Chain shortly after this presentation. I'm Robert Miller. I'm a product manager at Flashbots. And I'm an mev searcher myself. Steph, want to introduce yourself?
00:00:40.430 - 00:01:08.494, Speaker C: Hey, everyone, I'm Steph. I'm Stefan. I am working on product stuff at Flashbots. And yeah, super excited to be doing a bit of a follow up, actually. Robert and I were on another hackathon presentation panel, was it a month ago or so? And the title of that one was called how to make a Million Dollars a Month as a Facility Developer. So maybe this is the follow up. We'll do a bit more alpha leaking, a bit more discussion.
00:01:08.494 - 00:01:51.760, Speaker C: Highly recommend you guys go check out that video on YouTube as well. Maybe there's a way to link it somewhere, I don't know. Cool. So maybe I'll go through a bit of an agenda. So start by covering the TLDR on Mev, then talk a bit about Flashbots from a very high level. What are the core things that it enables? And then quickly talk about the use cases that people have previously built on Flashbots. Then I think Robert wants to do a walkthrough of how to build a bot, and then we can dive into some of the hackathon ideas for hack money.
00:01:51.760 - 00:01:57.154, Speaker C: Actually, is there a way I can share my screen? Is that a feature that we have.
00:01:57.352 - 00:02:02.850, Speaker B: The bottom green share screen near your mute?
00:02:05.210 - 00:02:08.840, Speaker C: If you want to share your screen on my behalf, yeah.
00:02:11.210 - 00:02:18.300, Speaker B: Net on it. There you go.
00:02:22.270 - 00:03:13.930, Speaker C: Okay, so this is the beautiful little number go up chart that we like to put when we talk about mev. It's a topic that has garnered a lot more attention over the last few months. And you can see the attention is probably correlated very highly with the amount of money that people are making by extracting Mev. So what does Mev stand for? Minor extractable value. Or we're trying to rename it to maximal extractable value. It represents all the value that the party who's in charge of putting transactions into a block is able to extract from the system by reordering inserting or censoring transactions. So practically, we can probably scroll a bit lower down.
00:03:13.930 - 00:04:11.520, Speaker C: What happens is a bunch of DeFi protocols have some implementations that release more or less value by users sending transactions to their system. That value can then be captured by miners or bot operators. The majority of the value so far has been captured by bot operators, but over time, it's expected to move over to miners. So here we can see a bit the type of activity and the distribution between miners and bot operators. The really interesting thing about this is if we scroll back up is that this ecosystem of extraction was already happening for quite a while. So we only started tracking this in January 2020, and throughout 2020 it sort of slowly started picking up. And then right about halfway through during TFI summer, we really saw a lift off in amount of extracted value.
00:04:11.520 - 00:05:01.064, Speaker C: This lift off came with some negative externalities. So what we also observed was gas fees going way higher as well as for a lot of chain congestion. So a lot of reverted transactions landing on chain. So Flashbots came together at that time and we asked the question, is there a better way to do this that doesn't impact the network as much and is incentive compatible. So every single party in this ecosystem comes better off. So I'll jump into our documentation if you want to switch over to Docs flashbots net. So this is the Flashbots documentation, encourage you guys to go read through this.
00:05:01.064 - 00:05:57.896, Speaker C: It highlights the organization and the system, how it works. Maybe you can click into Flashbots core and then look at the overview. So this highlights a bit the way the system works. I think we'll scroll down a bit to where we have some pretty charts to show. At the end of the day, what Flashbots does is it provides a way to communicate transaction directly to the miners by sending them an array of transactions that are included atomically. Those transactions include any arbitrary condition that say whether or not those transactions are valid and the miners will include them so long as it's more profitable for them to do so than not. What does this gain you? Well, as a bot operator, what you get is essentially guaranteed execution.
00:05:57.896 - 00:06:39.640, Speaker C: So your transactions only land on chain if they are profitable for you. And you never pay for reverted transactions. So that's a really interesting property for anyone that's trying to compete for opportunities that are only there for maybe one block and only one person can grab. So these bot operators go from sending these transactions in the regular transaction pool to now sending them on Flashbots and they save money. The other thing that it does is that it's completely private, so no other member in the network is able to snoop on the transactions as they go through. Only the miners can see them and include them in the blocks.
00:06:40.540 - 00:06:41.530, Speaker B: And then.
00:06:43.680 - 00:07:33.820, Speaker C: Maybe those are the main things to touch on. There's three main use cases for who would be interested in using Flashbots. We actually list them right here. So the bot operators, if they want to have risk free execution, just regular Ethereum users, were looking for some level of front running protection and keeping their transactions private. So uniswap traders or liquidators or that kind of stuff. And then finally DApps that are looking for some more advanced user experiences. So the ability to send multiple transactions at once and have them be included atomically, the ability to send transactions from accounts that have no ETH in them.
00:07:33.820 - 00:08:31.020, Speaker C: So gas abstraction and then finally the what's the last one? Yeah, I think those are the main ones. We've been seeing sort of more and more applications use these in novel ways. So for example, Tornado Cache, I think, implemented a relayer that processes withdrawals and is able to essentially keep repeating until it's able to get included at a price that's necessary. So it provides better UX and then missed X and some other abstractions on top of DEXes that allow for limit orders that you don't pay for reverts and are front running protected. So, yeah, there's a bunch of use cases and maybe Robert wants to dive right into some of the interesting work that he's been doing, building open source searchers.
00:08:31.600 - 00:09:32.348, Speaker B: Sure, happy to do so. So I want to both show you an actual searcher that I wrote and was going to operate, as well as talk about the process that I used for finding this opportunity, developing it, testing it, and then eventually executing on it. So first to set up the foundation. What I think you need in order to run a searcher is an understanding of Ethereum. So you're in the right place. You need to understand transactions and smart contracts at a high level, you need to understand DeFi at a high level, and then you need to know some sort of programming language to be able to get data off of the Ethereum blockchain and then send transactions to it. Lastly, I think you also should know about Flashbots, and this is just the starting point from which I think you'll begin to be able to reason about and start executing on mev opportunities.
00:09:32.348 - 00:10:47.752, Speaker B: But keep in mind that it will be a learning opportunity for you and a journey to capturing me. Sorry about that, got a call. So a couple weeks ago on the discovery part of this mev capturing opportunity, I was given a tip in a public discord, the Flashpots discord, by a person named Caleb, that synthetics had a collateral program where you could use Ether instead of the native SNX asset to issue synthetic assets. And this was always supposed to be a trial for them and eventually they would close the trial down and liquidate the loans that had been issued using Ether instead. And in fact, Caleb was letting us know that this trial was going to end and the governance of synthetics had voted for that. And so there was about a month before this trial was going to end and they needed people to liquidate these loans, provide the service to synthetics, and in return for doing so, you got a percentage of the loans. And so immediately I knew there was med here.
00:10:47.752 - 00:11:39.508, Speaker B: It was like this member that is very close in the community telling us that there was an mev opportunity. You provided some service and you could capture some mev from there. And so that's what the discovery process was like for me. In this instance, it was literally looking at the flashpots discord, watching carefully, and a person that was very integrated into the platform knew that something was there and they pointed it out to me. And more broadly, I think that you should do similar things in the DeFi communities that you're looking at. Stay up to date on the different updates that are happening, the changes that are being made, and try to think about where would I be able to capture some value, provide some service and then make some money if I had very granular control of transaction ordering. And if you think with that frame, I think you'll find any of the opportunities.
00:11:39.508 - 00:12:25.576, Speaker B: So that's the first stage in writing a searcher is discovery and finding an opportunity. And when you think you have it, you need to move one step deeper into understanding that opportunity on a deep level. So here you are looking at the actual contract of synthetics where this opportunity was. You can go, you can look at this on chain on your own time. It's pretty public, it has quite a bit of money in it. And I went to the synthetics documentation and I sort of had an idea about what it did. But in order to capture mev from the system, you need to get pretty substantially deep into it and understand it on a deep level.
00:12:25.576 - 00:12:57.650, Speaker B: So I started by just looking at this. I read the high level code, I tried to understand what the features were. You don't need to read line by line, but I identified the things that I thought would be important to me. I was liquidating a loan, so that seems like closed loan would be important. And I started there. So I'm just like searching through in real time here, finding the closed loan function. This looks like an internal one, so that is what we want.
00:12:57.650 - 00:13:43.090, Speaker B: So I'm looking through this, I'm trying to understand it. What's going on? Is the system active? Yes, I know it is. Okay, here I know that the system is pulling some data about a loan. I'm like making a mental note to myself that there's some information that this contract needs to pull and I probably will have to get that information myself in order to understand what I can liquidate and how much mev can be made and what I need to provide. So looking for places where data is collected within the contract and making a note of those either mentally or somewhere, checking to see if the loan is open. So that tells me some loans may not be open. That's like another important piece of information.
00:13:43.090 - 00:14:45.110, Speaker B: Now you can see that there is actually interest on these loans and it looks like it's dynamically created. And so again, this is another piece of data that I'm mentally cataloging that I need to go back through later and find as well as the amount that is repaid, that looks like it's just returned from this line up here. And these things get added up to this variable total accrued interest. I think that's the interest you have to pay on the loan and I'll have to do that. The loan is then closed and the synthetics that you provide is burned. And then this looks all like the collateral that I would get in return for doing so. So I go through again, this step is really about understanding the contract and how it works and then what kind of information I will need to interact with it.
00:14:45.110 - 00:16:07.280, Speaker B: And so just really like in that last minute all of a sudden I have all these different pieces of information that I know I need to get from this. So I probably need to look into whatever this get loan from storage function is. I need to know what loans are open, I need to know the interest amount because that gets looped up into this total accrued interest and that informs how much synthetic USD I need to provide to the system in order to get collateral back. And once I provide that, then I will be able to liquidate this position and I can get this total collateral liquidated position back. Okay, so all that information that I'm going to need to get on my own and some monitoring capabilities that I need to set up and all of this stuff, it is on chain. You're looking at the smart contract right now. You could do all this within a smart contract, but the best searchers will do as much as possible off chain, do all of the calculations they can such that they are consuming less gas in their smart contract and their transactions are more competitive because they have higher gas prices due to the lower gas that they consume.
00:16:07.280 - 00:16:47.944, Speaker B: So first I discovered the opportunity, then I'm trying to understand it and reading the code. And then the next step in this process for me is building some monitoring tools. So I will walk you through some of that. I think you're now looking at my Vs code. If I'm not wrong, this is a library that I intend to clean up and then I'll share with everybody. So you can look and see how I did this myself. You just were pointed out a couple of different pieces of information that you needed in order to liquidate loans.
00:16:47.944 - 00:17:30.904, Speaker B: And I know I need to collect. So I started by making this very messy kind of function here. That is an API key, but that's okay. This messy function here to get some addresses and loan IDs to understand what loans were open. And once I had the addresses and loan IDs, I could then pull some data out of them, and then I could structure them in a way that was easy to interact with. So I went through several iterations of this of creating scripts that would just only pull data out of the chain. I wasn't sending transactions or anything like that.
00:17:30.904 - 00:18:27.870, Speaker B: I didn't even have a test environment up. It was just finding data and pulling it out and understanding what it looked like to get a feel for it. And once I had some basic monitoring capabilities open, I went to what I like to think of as like execution or some form of planning where I'm not running anything in production yet, but I am designing a smart contract, and I have a test environment that's up and running. After reading the contract, I knew that I needed to provide SUSD to the system, and in return, I would get ether. And there was several million dollars that was in this contract, so I knew I would have to flash loan this as well. So I started to design a contract, which you can see here. In short, this contract just took a flash loan from dYdX because that's the most efficient thing to do when there's a lot of money on the line because you don't have any fees to it.
00:18:27.870 - 00:19:08.040, Speaker B: And I will pull you to the place. Yeah, so it takes a flash loan from dYdX. And right about here, I have a couple million dollars from dYdX. And then I'm taking in all of this data that I had monitored and pulled out of the scripts that you had just seen and decomposing it, getting those variables. So a bunch of stuff about loans and how much money I needed at different stages of this. I swapped this for USDC since I start in ethereum, or ether rather, and then I need to end up in SUSD. So I'm starting here, and I swap for USDC.
00:19:08.040 - 00:19:54.628, Speaker B: This is like some console logging just won't happen in production, but it's useful for testing. So I have USDC. I swapped that for SUSD and more console logging. And then I can actually get to the part of this process where I'm liquidating loans. So for all the different loans that I passed in, in this large looking structure here, I can loop through them. And it is actually on this line liquidate unclosed loan that I close positions and I get collateral back. And then just for my purposes, again, I'm like doing all this logging to make sure that the numbers that I pulled out in my monitoring scripts actually match up to what happened on chain.
00:19:54.628 - 00:20:25.890, Speaker B: And I have my console output for this here. This is actually what my contract ran. Whenever I run it, it takes a couple of minutes when you're in testing to do this, so I won't run it live. But you can see here, here's, like the different outputs of these different stages of the smart contract. I'm liquidating a loan here. The first loan. It has this ID, it's from this address and there's these amounts that are coming to it.
00:20:25.890 - 00:21:33.428, Speaker B: I only have three minutes, so I'll try to try to speed this up, but there's this loop for me where I am trying to understand the contract, I'm trying to build monitoring capabilities to get the data that I need and then I'm trying to plan my execution in a testing environment. And by doing that, I learn more at the very end of this process after I've written this contract about the information that I need that would make this easier. And so I'll go back and I'll build more monitoring capability or I will notice that my numbers in this console log are just slightly off what I expect them to be. And so I need to go back to the contract and understand it a little bit better. And so there's that loop between understanding, monitoring, building, testing capability. I also here have like when I open source this repo, you'll be able to see how I actually would execute on these opportunities as well and how the transactions end up getting sent into the Flashpots network and landed on chain. But that just uses Flashpots and our bundle provider.
00:21:33.428 - 00:22:18.964, Speaker B: So those are my steps. I start with some process to discovery, finding things, I go on to understanding the contract, monitoring it, I plan on executing and then I do testing. And I have this loop back to understanding, monitoring, planning, testing, loop back several times until I feel good about it. And then I do some dry runs of what it would look like actually passing something into right here what you're looking at, which is the actual execution part of this without actually sending any bundles in. So that's my high level process and like a walkthrough of how I'm thinking about contracts when I'm reading them and like a little bit of annotating of my code. I have two minutes left, I think, if there are any, maybe.
00:22:19.002 - 00:22:30.024, Speaker C: Robert, do you want to share? If you weren't rug pulled by the synthetics team, how much was the opportunity that you were trying to target here?
00:22:30.222 - 00:23:15.620, Speaker B: Yeah, you can actually see it in my console log. Let's see, I would liquidate these in a couple of different bundles, a couple different batches actually. So this was the first one that would have been 26 ETH profit and $2,600. But I would have in addition liquidated these next six loans for 13 more ETH and 3000 more dollars. So 39 ETH and $5,000, and then two more loans on top of that for one more ETH and 3000 more dollars. So you can do the math. It's like 60 something ETH as well as $13,000 was like my expected profit from this net of what I would pay to the miner.
00:23:15.620 - 00:23:21.370, Speaker B: And unfortunately, this opportunity is no longer available, so I can't take it. And that's why you're seeing it now.
00:23:24.540 - 00:23:33.340, Speaker C: Cool. Yeah. So a couple of hundred thousand dollars. You have the whole research process. Hopefully this helps people think about how to approach.
00:23:36.000 - 00:24:00.164, Speaker A: Thank you. Thank you so much. I think you muted yourself as you were speaking, Steph, but thank you for the presentation. We're kind of running out of time here, but it was a great presentation. Super interesting topic. You guys will be on Discord for the event, so if you have any questions for the Flashbot team, join their Discord channel. I see that there are questions popping in, but we're really out of time.
00:24:00.164 - 00:24:11.910, Speaker A: There's another workshop right after this one, so please bring your question over to the actual sponsor channel. Thank you very much for your time. And Steph, it was great having you.
00:24:13.200 - 00:24:14.730, Speaker B: Thank you very much. I appreciate it.
