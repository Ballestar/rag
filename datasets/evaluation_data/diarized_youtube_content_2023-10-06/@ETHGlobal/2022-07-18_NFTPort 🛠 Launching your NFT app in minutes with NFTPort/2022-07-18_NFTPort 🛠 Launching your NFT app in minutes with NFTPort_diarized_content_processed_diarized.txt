00:00:06.730 - 00:01:01.630, Speaker A: Hi. My name is TAIW. I'm VP product at Nftpart, and I'm here to show you how you can get started and launch your NFT application in hours instead of days or months, using NFT part's simple Rest APIs for NFT data, NFT, Minting, and much more. What does NFT Port do? We say we are striped for NFTs, and what we mean by that is that we create the infrastructure and APIs for developers to build NFT applications. Our goal is to make it as simple as possible and as fast as possible to build an NFT application. And we build all of the complicated infrastructure, like indexers and smart contracts behind that, so that you can focus on your application. Specifically, if you look on our website, you can see some of the categories of APIs that we use.
00:01:01.630 - 00:01:28.818, Speaker A: So, for example, you could turn anything into an NFD. It could be an image, which is quite common, or a video, or a piece of music, audio, some game method. For example, a 3D object. You could turn tickets into NFDS. You could make NFDS out of books, blog posts, anything. And that's just with a single API call. If you want, you can deploy your own contracts where you can mint NFTs and create a collection within that contract.
00:01:28.818 - 00:02:06.402, Speaker A: And you don't have to learn how to write smart contracts. You don't need to understand the details of where to store the files on IPFS. We handle all that for you. And again, you can do all of this through a simple API call to our Rest API. You can also get NFD data from different chains. So if you want to understand, for example, what NFDS a user currently has, so given a wallet, figure out the list of NFDS that they have, we have an API for that. Or you want to understand what are all of the NFDS within a collection and fetch their metadata, their attributes, the assets tied to the NFT.
00:02:06.402 - 00:02:57.586, Speaker A: We also can give you all of that through a simple API call. And we also provide safety and trust APIs so you can integrate NFT search into your application. With our Search API, you can do counterfeit detection, so you can be sure that the NFD that you're showing to your user is actually the real one. To get started, go to nftport XYZ, click Get Free API key, enter your email, click Sign up, then fill in the form and click Sign up. Once you do that, you can go ahead and sign in. You're in the NFT port dashboard. From here on, head over to the API key section.
00:02:57.586 - 00:03:55.602, Speaker A: Get your API key and head over to the documentation. Now that you're in the NFT Word documentation, you can see the main sections. Here we have tutorials for some of the most important things you can do with the API, like getting NFT data from multiple chains. We have several tutorials for minting NFTs yourself, so you can create collections dynamic NFTs use nftport to create NFTs inside Roblox or Unity. And we also have a tutorial for enhanced APIs. Then there is a full API reference for each of the three categories. So it's divided into read APIs where you can get data from different chains about NFTs write APIs where you can upload files, deploy contracts and build NFTs yourself and enhance APIs which contain search recommendation, duplicate detection endpoints.
00:03:55.602 - 00:04:34.938, Speaker A: If you are building something with Unity, you might be interested in the Unity SK section. And we also have descriptions of the authentication, error codes, rate limits, etc. And support links in the sidebar here. So let's jump into it. For example, let's start with data APIs. So let's pick contract and fetch all of the NFDS inside that contract, inside the interactive documentation, I can actually try out the API calls myself on the live API. So first to do that I need my API key and let me go and fetch that from the Dashboard.
00:04:34.938 - 00:05:42.242, Speaker A: So in the Dashboard, let's pick API key copy and then paste it into this box. Now we need to pick a particular contract towards NFTs we want to fetch and let's go and see what we find on the OpenSea front page. Let's do the classic example of board eight yacht club. So you can see this is the right collection and let's copy the contract address that we have here, pasting it into the box. The blockchain that the contract is on is Ether and let's send the API request. Now, you can see in the response here that we get back a list of all tokens within that contract. And right now this doesn't really contain much interesting data, right? We only have the chain contract address and token IDs going from zero to 10,000, which is the maximum number, maximum token ID of board apoth cloud.
00:05:42.242 - 00:06:48.790, Speaker A: But we can include additional data. So if I pick include metadata, then I get much more interesting information. So you can see that for the token ID zero, we can see what attributes this NFT has, we can see the original image in each URL, we can get the metadata file URL, everything that is in the token on chain or in the metadata you can actually fetch from this API response. And what's quite interesting is that you can get the cached file URL. So what typically happens when you try to fetch the asset for an NFT, like the image behind the NFT, you get quite a slow response from IPFS. So if you pick the file URL which comes from IPFS, then you can see it takes quite a while to load, might take 5 seconds, 10 seconds, up to a minute, or a few in the worst cases. Or sometimes it might actually be gone from IPFS, which means you can't even fetch it.
00:06:48.790 - 00:07:47.666, Speaker A: So an alternative is to use the cached file URL. What's happening in the background is that NFT port goes and fetches all of the NFT assets for you. So we pull in the images and we serve them for you so you can quickly get them and serve them to your users. So you can see this is a Google URL and it loaded almost instantly and you can use this in your front end when you want to show something to your users and it will load extremely quickly. That's how the cache team is URL is useful. And you can see in addition to the Token ID zero, we have the next Token ID nine, all of the same information. We have the attributes, we have the image which is the original image URL, we have the cached image URL which we provide so you can get the contract NFDS with a single API call if you only want to retrieve one particular NFD.
00:07:47.666 - 00:09:03.470, Speaker A: For example, if you look at the phi one six two, which is the one that we opened. So again the contract address is the Board Ape address and it's pre filled here as well and the Token ID was 5162, we can fetch the details for that particular NFD and we don't have to pull in all of the data for the whole contract. So if you're only interested in a particular NFD, for example, if you want to build a view in your application that shows the user details of their particular NFT or one particular NFT, then you can use this endpoint to do that. Again, you can see that you can get all the attributes, the image file information, again the cached file URL which you can use to display to your user so that it loads really quickly. And you can also get the contact information from the same API call if that's something that you need. Now, another thing you might want to do is get transactions for an NFT or for contract and you can do both of those with NFT parts APIs. So imagine you want to see the latest transactions that have happened with an NFT similar to what you can see on Marketplaces under Item Activity.
00:09:03.470 - 00:10:01.630, Speaker A: So let's find a different NFT. Here. Goblin town. Again, let's copy the contract address and let's see, let's get the most recent transactions by contract. Again, contract address goes here, the chain is Ether and let's get transfers so transfer type transactions and here we can see the most recent transfer transactions that have happened. So when the NFT was transferred from one wallet to another and you can see that the most recent one was transferred from this wallet address to this address. The Goblin Town contract address that we saw Token ID was 7927, so let's actually go and see that 7927 and this was the NFD that was transferred.
00:10:01.630 - 00:10:52.834, Speaker A: So as of this video being recorded, it happened less than an hour ago. So you can get very fresh transactions that have happened on chain using this endpoint or if you care about one particular NFT and the transactions that have happened with that, then you can get those as well. So on the same contract, the Goblin Town contract, token ID 7927, let's get transfers. And we can see we have the same transaction here. Now, NFDS are all about digital ownership. We might want to fetch NFDS based on the owner rather than the contract or the NFT itself. This wallet that the Goblin Town NFT was transferred to, let's see what other transactions have happened on that account.
00:10:52.834 - 00:11:41.474, Speaker A: So I copied the address of that wallet and let's see what other transactions have happened on that wallet. And here again, we can see this is the Goblin Town one that we saw, but there are others that have happened as well. So on a different contract, they have received something. So you can see the zero x six fe. Again, they were transferred some NFD, and we can go ahead and check it out. So apparently they received the moonbird at some point. Querying the NFTs and NFD data based on a wallet is actually quite important because when you build an experience for a particular user that connects their wallet to your app or your D app, then you will have to fetch personalized information for them.
00:11:41.474 - 00:12:27.266, Speaker A: So NFDS that they own, or NFDS that they have transacted with, like we did. Now, so you can do this under the ownership tab. If you look at the retrieve NFDS created by an account and retrieve NFDS owned by an account, these are two views into that. The difference between those is NFDS owned by an account shows you the list of NFDS that the account currently owns. And NFDS created by an account shows you a list of NFDS that were originally minted to that user. So the first ever owner was this particular wallet address. Let's continue with the same account address that we had from before, and let's see what NFDS they own.
00:12:27.266 - 00:12:54.906, Speaker A: So you can see that in the response here we have a list of all NFTs that this wallet owns. There is one zuki birds. NFT. We can of course, get the cache pile URL for that NFT. So let's check that out. We can also get metadata attributes, all of the details that we previously got from the other endpoint as well. Let's see what else this user has.
00:12:54.906 - 00:14:01.638, Speaker A: When we go through all of the items in that user's wallet, we can get all of the data that we would need to show a wallet page for that user. You could build something that is quite similar to profile page or NFD's own page. For example, if you look at Chris Dixon's page, you could get their wallet address, fetch all of the NFDS that they own, and reproduce the same view by rendering all of the data, all of the cached images, all of the contract names, attributes, everything you can get with a single API call. And that makes it very, very fast to build a personalized experience for the user who connects their wallet to your app. One interesting thing you might want to do is check whether a user owns an NFT in a particular collection. So, for example, we want to check which NFTs Chris Dixon owns inside of board Ape Yacht Club. So again, let's take the Board Ape contract address and see which Board Apes Chris Dixon owns.
00:14:01.638 - 00:14:42.586, Speaker A: Okay, there aren't any. Let's find collection in which he does own something. He owns at least this curio card. And here we can see a list of all of the NFDS that they own in that collection. And based on this, you might want to build some sort of token gating. So if the user has a Board Ape Yacht Club NFT, then you might want to enable some sort of additional permission for that user. You might want to personalize the experience for the user and that is very powerful because the user will immediately feel at home because you can automatically personalize the experience for them based on what is inside their wallet.
00:14:42.586 - 00:15:29.870, Speaker A: Now you're able to fetch NFT data from Blockchains, but how about writing onto Blockchains? How can we create NFTs? We have APIs for that as well. The absolute easiest way to get started is with Easy Minting which is appropriately named. So easy minting with URL. Essentially what you can do here is given a URL which contains an image or some sort of file, you could turn that into an NFD with just one API call. Here I have this freely licensed image which I will now turn into an NFT. Again, in the interactive API call box we can set the relevant parameters. So the URL that I copied, I will paste here the name of the NFT.
00:15:29.870 - 00:16:28.666, Speaker A: Let's call it example bird. We also need to set the Mint you address. So which wallet are we actually going to mint? You can find your wallet address on whatever wallet you're using, or if you want to drop it to someone else, you can get their address. So I'm getting my address and let's mint this NFT to me and the response gives us all the information we need to actually find the NFD on chain. So one thing you might want to check is see what the transaction looks like on chain. So let me copy the polygon scan URL here and here we can see the transaction hash the contract which the NFT belongs to and who the token was transferred to. So we were able to verify that the NFT was actually created on the polygon chain.
00:16:28.666 - 00:17:15.998, Speaker A: It shows up on polygon scan. Easy Minting is very easy, but the downside is it creates your NFT into a shared contract. So you can see that the contract that we created the NFD into was Nftport XYZ VG and the token ID is 5257. So if we look at the contract, we can see that there is a bunch of NFDS which are not related to our project, which have also been minted into the same collection. As a developer, when you actually start getting serious with NFTs, you probably want to have your own collection. You want to deploy your own contract and have your NFTs in that contract as opposed to having them in a shared contract like we did with Easyminting. And we also have it covered there.
00:17:15.998 - 00:18:04.106, Speaker A: If you go to our documentation and go to product contracts, deploy a contract for NFT products, then you can deploy a contract with a single API call and start minting NFTs into that contract programmatically like we did with Easy meeting. But in this case, it is your contract. You own the contract, you control it, and you can customize it much more than you would be able to with Easymeeting. Here's how deploying your own contract for your NFT product can be more powerful than using a shared contract. If you look at the options, you can configure in the API call. Of course, you can set the collection name symbol, the owner address, which will be yourself. You can choose between ERC 71 and 1155 contracts.
00:18:04.106 - 00:18:35.878, Speaker A: These are two different NFD standards. You can choose whether to freeze the metadata so that it cannot be updated later. The contract does not allow it. You can set royalties and you can granularly set the roles for different wallet addresses so that you can have different wallets who are able to do different things in the contract. So let's deploy our own contract, and as before, we can do it from the interactive API call box here. You can set chain. We'll use polygon right now.
00:18:35.878 - 00:19:00.594, Speaker A: You can set the contract name. Let's name this hot dogs. We can set the symbol for the owner address. I will use my own address so that I have the permissions for everything later. Let's keep metadata updatable at first. We can always set this to false in the future so we can freeze the metadata later, but we cannot unfreeze it. So let's keep it true and let's ignore the roles for now.
00:19:00.594 - 00:19:54.870, Speaker A: So let's deploy a simple ERC 71 standard contract that is called Hot Dogs. And in the response you can see we didn't actually yet get back the contract address. This is because it takes from a few seconds up to a few minutes for the transaction to actually be confirmed on the blockchain. What we do get back is a transaction hash and we actually have two options. We can use this transaction hash to fetch the contract address using a different API, which we have called retrieve a deployed contract where we can put in the transaction hash, send API request and bam. We have back the contract. An alternative would be to take this transaction hash and open polygon scan.
00:19:54.870 - 00:20:35.540, Speaker A: And here you can see the contract address that has been created. If you go to your dashboard, you can see the list of contracts that you have deployed. And as before here I can see the name Hot Dogs on the polygon chain ERC 71 contract. Here's the address, here's the transaction hash, here's the transaction URL in the polygon scan external Explorer. Every time you deploy a contract, it will show up on this list. Now that we have our contract, we want to mint NFTs into the contract, and we can do that with NFT part APIs. But first, it's important to understand what an NFT consists of.
00:20:35.540 - 00:21:24.194, Speaker A: Typically an NFT is a record on the blockchain, and the NFT itself is very minimal. It does not contain much data because it's expensive to store data on the blockchain. Instead, the NFT contains a reference, essentially a link to a metadata JSON file which is stored off chain. And the metadata contains a reference to an asset that is stored off chain as well. So for example, if you have a board ape NFT or a moonbird NFD, then the NFT itself, the on chain record, refers to a JSON file which is typically stored on IPFS. And the metadata JSON file refers to an image, typically a PSG or JPEG that is stored also on IPFS. But to mint an NFT, we need to go through these steps in the reverse order.
00:21:24.194 - 00:22:03.710, Speaker A: We need to first upload the asset enjoy PFS. Then we need to create metadata JSON file which refers to this asset. And then finally, once we uploaded the metadata JSON file, we can mint the NFT. And of course NFT part has APIs for all of these things. If you go to documentation under Minting Contracts and Storage in the storage section, you can upload a file to IPFS. Let's do that. And I will use again the interactive API Explorer here to upload an image of the same bird that I had before and the API request.
00:22:03.710 - 00:22:40.342, Speaker A: And it is now stored on IPFS. The file was stored on IPFS and NFT port peels it for you as well. So it is permanently stored, which is very important for NFTs, so that the asset behind the NFT does not get lost. And if we open the IPFS URL, we can see that it actually did work. So it is now stored on IPFS. We can also see on our dashboard that we uploaded this file. The next step is to upload the metadata that refers to this file on IPFS.
00:22:40.342 - 00:23:16.658, Speaker A: For this, we can use the upload metadata to IPFS endpoint. Let's call this bird in custom contract and paste in the IPFS URL that we got from the previous step. Once I upload this metadata, copy the URL and the metadata has been created. So the JSON file now is also uploaded to IBFS. It's stored in IBFS. And I can check on the dashboard that the metadata has been uploaded. And now for the last step, we have the asset, we have the metadata.
00:23:16.658 - 00:24:00.674, Speaker A: Now we need to create the NFD. And this is also very easy. So let's go to Product Minting, Customizable Minting, and in the interactive box here I can make an API call to mint an NFT into that contract which I had previously deployed. So let me find the contract address here. This is the contract address, the metadata Uri here. This is the metadata and I will mint it again to my personal address. So the transaction has been created as before with the contract.
00:24:00.674 - 00:24:44.446, Speaker A: It might take a few seconds for the blockchain to accept the transaction and then it will be visible on the blockchain Explorer. Let's open it and we can see that the mint of hot dogs has been minted to my address. The token ID was randomly chosen. If you want to have a specific token ID, you can also set manually the token ID in the customizable Minting contract. You can see in the request you can set token ID. So NFDS don't just have to be images, they can be anything. You can put any file into an NFD and actually you don't have to put any file into an NFD.
00:24:44.446 - 00:25:22.042, Speaker A: The metadata and the asset are completely optional. In an NFD you could also create an NFD which does not have any metadata or any asset, but that's less useful. So to have some utility, you want to store some data together with the NFTs. That's why typically these two are added. Let's check out the NFD that we just created coming back to the dashboard under NFTs you will see a list of all NFTs that you have minted. And this first one is the NFD that we minted into the common NFT part contract with Easy Minting. The second one here is the hot dogs contract NFT that we minted.
00:25:22.042 - 00:25:59.990, Speaker A: To find the NFD on the marketplace or anywhere really, you need to know a few things. You need to know the contract address and the token ID. So the contract address is this one, the hot dogs contract address. We can put it into OpenSea to see whether they have already indexed it and it seems that they do. The NFD that we minted shows up here. This is the token ID, this is the contract address. And we can see that the image is here, the same image that we uploaded just a few minutes ago to IPFS.
00:25:59.990 - 00:26:44.346, Speaker A: This is the description and the name of the NFT. Everything I've shown you so far we have done through the interactive documentation. And this is really useful if you want to test out a few things before you start implementing them. But once you actually want to integrate something into your application, you can very easily get some example code from the documentation. So for example, if you go to retrieve NFT details, then this is the interactive box that we used. And if you want to, you can get sample code for Python for example, here. And assuming you have put in the API key, like I have in the box, the sample also will contain the correct API key.
00:26:44.346 - 00:27:41.434, Speaker A: So you will be able to just run this code and it should work. You can get sample code for many different languages, including curl. So if you want to just run something quickly from the command line or JavaScript node, Python, go many languages. If you want to understand the full power of any endpoint, then also go through the Request and Response sections of the endpoint descriptions. Under the Request section you can see all the possible inputs you can configure. So for read endpoints, that's typically quite narrow, but for writing, for example, for deploying a collection contract, a different kind of contract that we didn't cover in this video so far, you can set many different things max supply minting, price tokens per mint, whitelisting, public versus private minting, and much more. And also in the documentation under the Response section, you can see what is the response that we will return to you.
00:27:41.434 - 00:28:33.878, Speaker A: You can also see the error model here, which helps you build your error handling logic to make your application more robust. And we also have a list of error codes for you. So if you want to know what are all of the different kinds of errors that you can receive from the NFT part API, this has a list, and this is quite handy for debugging. If you get an error from the NFT part API, you can quickly see here what actually happened, what went wrong. Another way to debug is to look at the API log in the dashboard. So I can see here all the requests that I made and what the response was, and the error message as well, which will help me understand what has gone wrong and fix the issue. So these are the basic things that you can do with NFT port.
00:28:33.878 - 00:29:31.582, Speaker A: I recommend that you also take a look at the Community page on our website. This will give you some inspiration in terms of what other people have been building with Nftport. The APIs that we offer are like building blocks, and we're excited to see what you come up with. So if you go through the Community page, you might start getting ideas for how to integrate NFTs into your own application. Another thing you might want to do is join our Discord Community. If you go to Nftport XYZ contact, you can find the link to join our Discord. Here we have discussions ranging from the specifics of NFT words, APIs and sometimes Debugging together, getting support from the community or from the team, all the way to discussing general trends in NFTs, what people are building, and just connecting with like minded people in the NFT space who are building something if something is going wrong.
00:29:31.582 - 00:30:02.340, Speaker A: You can also reach out to us at info at nftport XYZ or email. That's it. I hope you're now in a good position to release your NFT application and get your ideas built as quickly as possible. We love hearing from builders, so please don't hesitate to get in touch. And if there's something that we can add to the NFT port, APIs, dashboard, documentation, anything at all that we can support you with when you are building your NFT app, please let us know. Thank you.
