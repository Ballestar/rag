00:00:00.570 - 00:00:26.098, Speaker A: All right. Hello, everyone. Welcome to our last workshop of the day. For the first day workshop at NFT Hacks 2022. Here we have Julianne from Unlock with his workshop deploy your first NFT membership contract. Feel free to ask any questions in the Zoom chat and Julianne will be more than welcome to answer them. And with that being said, I'll pass the mic off to Julian.
00:00:26.274 - 00:00:45.820, Speaker B: Thank you, Anna. Thank you very much. And thanks, everyone, for staying up so late. Depending on what part of the world you're in, I'm really excited to tell you about Unlock today. Congrats on joining the hackathon. I think you're going to have an amazing time. We've sponsored a few ones already and honestly, they're very fun, so I'm pretty excited to see what you all build.
00:00:45.820 - 00:01:30.054, Speaker B: Unlock is a protocol for memberships. As you can see on the homepage of our website, Unlockpotocol.com, this is basically a protocol that allows any creator, any brand, any community to deploy a membership contract. And we'll do that in a couple of seconds where creators set the price, the number of members they want to have, the duration of the membership, and then we provide simple APIs that allow them to use that into existing application or even better, create some application that are basically token gated so that only the members that have the NFT in their wallets are able to access some features. So that's obviously a very high level Quick intro. You're more than welcome to join our website. Join our Discord on the website.
00:01:30.054 - 00:02:24.774, Speaker B: So click on the Community button here that open Discord, check out our docs and some integration that already exists that might actually be fun to look at and useful. But let's go ahead and get started here. So I'm going to click on the app button here and I end up on the unlock dashboard. The unlock dashboard is where you, as a creator, not so much as a developer, but we'll see that later. Can deploy your membership contract and then do several things like update it, obviously, or even grant memberships to people that you feel are worthy of the membership. So let's go ahead and do that. You will see that we support actually multiple networks from Ethereum Mainnet, where I did not deploy anything today, given the gas prices to, obviously, Rinkabee as a desk network through Optimism, binance Chain, XDI, Polygon, and even Localhost.
00:02:24.774 - 00:02:47.314, Speaker B: If you run unlock locally, you don't need to run Unlock locally most of the time, but this is also possible. If you wanted to do this, I would definitely recommend using Rinkabee. And there's several Facets on the Internet where you can find wikib to get started and deploy your locks. I already see a question, so maybe try to oh, that's Anna. Yes. Okay, cool. I'm going to keep an eye on this.
00:02:47.314 - 00:03:08.022, Speaker B: You know what on the side here so I'm not distracted. So when you're connected, basically the thing that you can do first is deploy a lock. So I'm going to click on that button. First step is to pick a name. So I'm going to put that NFT hack membership. Just NFT hack. Actually that's good enough.
00:03:08.022 - 00:04:07.738, Speaker B: The duration is basically the lifespan of DNSc. Each membership is a non fungible token that people have in their wallet. They have a non trained expiration date, which means that after the expire, they're not considered vetted anymore by the protocol, and people will not be able to access the benefits that are just for members here, let's pick kind of a short one day on our UI. Obviously we show days, but in practice you can set anything between 1 second to a couple centuries or even millennias, millennia if you want to go that far. The quantity is the amount of members that you want to have on that membership can be, again, from zero. And maybe we'll explain why this is useful later to an unlimited number of members. So if you say you're creating like we'll do a little app that you want to say as many people can be members, you would pretty pick unlimited, which I'm going to do here.
00:04:07.738 - 00:04:40.134, Speaker B: But if you want to do, for example, a membership for a conference or ticket to a concert, then you would obviously pick the amount of people that you can host at the venue. You can then set the price of these memberships. Here. I'm going to pick ETH. It's actually rinkety ETH as their currency. But in practice, we support any ERC 20 on any of the chains that we support. So you could price this in Dai, in USDC, BNB if you wanted to do that, or Uni or any ERC 20 currency that you might be interested in setting up.
00:04:40.134 - 00:05:04.910, Speaker B: The doc section provides a little section on how to do this. And I'm going to price it at 0.1 e on main net. So once I'm ready, I'm just going to click the submit button here and pretty normal flow that you're pretty familiar with or maybe familiar with already. MetaMask, which is a crypto wallet, will pop up, say, hey, you want to spend actually send a transaction, create lock. That's literally what I'm going to do here. And there's a little bit of gas involved in that flow.
00:05:04.910 - 00:05:33.494, Speaker B: I'm just going to confirm this and we'll wait for this to be deployed a couple of seconds. Immediately you'll see that, we update the layout of the page and we show the extended version of what the lock shows here. Let's wait a couple more seconds to make sure that this gets deployed. I'm sure you already familiar with that UI. Yes, that was deployed already. So you have the address of the lock. And the last button actually is the Explorer button.
00:05:33.494 - 00:06:11.390, Speaker B: So we'll actually click here to go see that? You see, this is the address of the smart contract that was deployed. That contract is verified. So you can obviously inspect the whole code which if you're interested in, you can definitely look at but also use the UI on etherscan to kind of read stuff and trigger things. So for example, we can look at who's the beneficiary that's the person who's going to get the money when people pay for the membership. And this is the address that I used to deploy and by default this is the first membership. We can look at the duration. So as I said, I picked a day that is 86,400 seconds precisely.
00:06:11.390 - 00:06:39.020, Speaker B: We can set up things like a free trial length. For now there's none. We can look at transfer fees basically for now it's actually custom per transfer. Obviously we could read that information. Again, all of these things are documented. I don't want to see you want to go through them all here. But that's obviously all in the docs that you can find on our website.
00:06:39.020 - 00:07:18.600, Speaker B: Similarly, you can update the contract and you can do that as the person who deployed it. You're what we call a lock manager and you can actually have all other lock managers that would be able to manage the lock along with you. You can set that up. You can also do a bunch of other things that are similarly documented in our docs. So let's go back to the dashboard and actually see what's in here. So here you're on the integration pane which shows you a couple of things so easily integrate this into application like WordPress, like Discord, like Cloudflare webflow Discourse or Firebase. We actually have a bunch of others.
00:07:18.600 - 00:07:56.146, Speaker B: Each of these if you click on the buttons, goes to Docs or to relevant information about this. And we also have a couple of tutorials that you're more than welcome to look at on how to create an ad free experience on a website. So for example, only members will not see ads in the website, for example, or how to get donation through your membership contract, anything like this. And we also have docs on how to do custom integrations as well. Let's do actually a quick demo here of how things work. Actually before that I'm going to show you the buttons credit card. So we support credit card payments on the locks and it's something that you would be able to try on your own application.
00:07:56.146 - 00:08:28.398, Speaker B: Click that button and follow the instruction connect stripe first and then allow keep Renting. Again, the docs are pretty explicit about this so you should definitely read them if you're interested in this. We have a small demo which presents in the form of a newspaper site that has a payroll and basically say hey, you can't read that article unless you're a member. It's token gated basically. And so if I click on Join us, you'll see that we load this little pop up here. It's a bit bigger than it is in reality because I'm making it big. So that people can see remotely, but I'm going to quickly unlock that.
00:08:28.398 - 00:08:49.542, Speaker B: So I'm going to click that button, connect my crypto wallet, pick MetaMask. I'm already connected to MetaMask. Done, pop up, and I'm going to just pay with my wallet here. So clicking this button this time, Minimask pops up saying, hey, do you want to pay 0.1 east plus a little bit of gas? And then I'm going to just say Confirm here, go ahead. And then boom. Immediately you see that I can close this.
00:08:49.542 - 00:09:15.210, Speaker B: And more importantly, the whole article now is available to be read. So that's kind of a quick demo here that I've done on the member site. And actually let's go inspect the member UI. You will see that I can now list all of the members and I should be one of these. You know, we do this thing called optimistic unlocking. So I'm not sure the transaction actually has gone through. No, it hasn't.
00:09:15.210 - 00:09:44.822, Speaker B: We can actually look here on Minimas if it loads, hopefully it has loaded up. You have the purchase has gone through. So now let's refresh this one. Yes, you can see 30 seconds ago, and then if I come back here as well, this time it's going to be visible as one of the members. We use the graph and this is also documented. You can use the subgraphs as well if you want to load the list of people that have a membership. So you can see here that I have one.
00:09:44.822 - 00:10:11.040, Speaker B: It's the NFT act lock. I have the Token number one, the first one. So somebody's asking crypto Cohen. It is obviously basically through the UI, but based on the blockchain. So if you don't have the NFT, the UI will not render the content. So I don't know if that clarifies the answer. That's a regular website, basically, but it only shows the content if the current visitor has unlocked content.
00:10:11.890 - 00:10:18.414, Speaker A: Sorry, we have a question in the chat. Is the content access filtered in the UI or is it through the blockchain?
00:10:18.542 - 00:10:52.110, Speaker B: Yeah, sorry, I just responded to that one. Basically, it's not the UI, it's a front end application. But we're going to do a demo where we lock on the back end. So you'll see that it's possible, but obviously the information about whether the content should be visible or hidden is coming from the chain. So it's token gating, technically speaking. And you see that the expiration date for that membership that I have is roughly a day because I just bought it. So actually, let's go ahead, of course, and write a quick application.
00:10:52.110 - 00:11:17.700, Speaker B: So actually I did this earlier today. I created a very basic application and start that application first. So it's an exprs JavaScript application. And let's go look at the code together here. Where is it? I don't have it here. Okay, let's actually open a new window here. And so we'll see that it's a pretty basic application.
00:11:17.700 - 00:12:12.134, Speaker B: It's the modules that open. So it's a pretty basic application using Exprs, actually using Next and Express combined together we have a server here that allows people to let's actually go back to the site to allow people to list the price of tokens. And obviously I'm not using real numbers, I'm using a fake API. Actually, let me check this Git status. I'm going to check out to the branch that I should be on get checkout Master. I just checked everything that was working before the demo and obviously forgot to reset it. So anyway, so let's go back here.
00:12:12.134 - 00:12:28.922, Speaker B: Yarn run. Dev. And so let's go back here. This is a basic application. Let's go back to that page. Basic application that lets you again assume this is kind of an application that lets you see the price of tokens. And I'm not using a read API, so just the numbers are not right.
00:12:28.922 - 00:12:56.350, Speaker B: But basically the price of the USDC coin is 591. The price of the unlocked out token is 241. The price of the finance coin is 940. And so you get that API right. And so let's assume we have this application, we have this API and we would want to token date. We want to say, you know what, this is actually not a free API for anyone to use. This is one where we want to allow people to pay to access some premium features.
00:12:56.350 - 00:13:23.718, Speaker B: And I see there's a question by zeroxprof. Can use unlock with other programming language like C Sharp. Yeah, obviously unlock is not language specific. We provide, I mean, it's a smart contract deployed on a blockchain ethereum chain, obviously. And so you can query it from any language using RPC calls. So C Sharp would absolutely work or go rust. Anything that you can use to query the state of the blockchain would work here.
00:13:23.718 - 00:13:48.802, Speaker B: So let's go back to the demo basically. So I want to create now a thing where I want people to have basically only the people that have the membership to the lock that I deployed. I'm going to go back to the lock that I deployed here. Can access the content. So I'm going to copy that basically the way this is going to work. So as you can see, the application is pretty basic. It has server, it has two APIs.
00:13:48.802 - 00:14:28.306, Speaker B: One that lists all the token, another one that actually yells the price for a given token. And then the rest is basically a very simple Next JavaScript, next JS application where when the page loads, we load all of the tokens. And then when a token is selected, we get the price of that token. So again, very basic. So what we're going to do here is add first a couple of libraries. So we're first going to add the unlock, sorry, the unlock library for exprs that allows you to use unlock inside of any Express applications. I mean, yarn Add that you might have seen in the past.
00:14:28.306 - 00:15:20.834, Speaker B: And I'm also going to use yarn, add the cookie parsip because we're going to use the cookie just to make sure that somebody, once they're a member, are identified as a member. The next step is to change how our front end application works so that whenever a token is selected, we're going to try to query the API. But the API is going to yield, let's say not quite an error, but at least an indication that the user is not logged in and in that scenario needs to be logged in. So we'll basically just do this. So we query the API and when we get a redirect, we'll actually perform that redirect. Otherwise we'll set the token value to be what we get from the API. So again, if the user is logged in and has the membership, then Oracle will just set the API to be returning the right.
00:15:20.834 - 00:16:05.866, Speaker B: We'll set the value based on what the API returned. Otherwise we will redirect the user so that they can log in. Another thing that we're going to have to do obviously is add the token gating to the API. So for this, I'm going to just go to the server here and do a couple of things. So first I'm going to load the unlock node JS module here and it actually calls a function configure unlock, which will do. I'm also going to load the cookie parser here, which I think is going to be useful to parse the cookies, obviously. The next thing is obviously to configure the server express application to use the cookie parser.
00:16:05.866 - 00:16:43.350, Speaker B: If anyone has used express in the past, this is pretty very familiar. And then now we're going to enter kind of some of the unlock specific things. So that function above configure unlock basically yields a middleware which we're going to use later called members only. And that's what we're going to use to limit access to our API. And we're just going to call the configure unlocked function here with a bunch of things. The first one is a yield paywall config object which, you know what, I'm going to copy paste. It's going to be easier.
00:16:43.350 - 00:17:07.506, Speaker B: So not going to spend too much time doing this and then I can comment on that. So basically that function is what yields the configuration to be used for the lock. Here I'm going to obviously take the address of the smart contract that we deployed. I'm going to put it here. And this is on network number four, which is ring b here. If I deployed on any other network, it would need to update it. So that's one of the objects.
00:17:07.506 - 00:17:44.018, Speaker B: The two other settings which are important and I'm going to put right now are these two functions here, get user ethereum address. And that's basically a way to get the address of the ethereum user from the request. So here we're going to read it from the cookies. And the other one is to update basically the ethereum address and in that scenario we're going to write it in the cookie. So when the user is logged in, we're going to read from the cookie to get their address. And when the user is not logged in but is trying to log in, we're just going to write their address to the cookie. So pretty simple obviously for an application.
00:17:44.018 - 00:18:24.398, Speaker B: You could also stroll that in a database somewhere, et cetera. And the last part of the unlock configuration is to pass, sorry, is to pass the server object here. So we're just going to pass here the server object and we're actually getting close to being done here. The next step obviously is to token gate, obviously our API. So we say, hey, this one, this is not going to be public for everyone. We're going to call that members only middleware here. And that means basically that now only the members can call that or can get the result from this.
00:18:24.398 - 00:19:17.642, Speaker B: There's one more little thing that we need to provide here is basically a behavior when the user is not logged in or is not authenticated. And so we'll just use the normal kind of express JS syntax here and then what we're going to do here. So unlock the middleware passes in an earl that the user needs to be redirected to and that's kind of what we're going to use here for the sake of this. So I'm just going to paste again what I have here. So basically that says if somebody is not a member we get the earl here. And what we're going to do is overwrite the redirect URL so that we can open it in our front notification and that's pretty much it. So next step is to probably fix some typos.
00:19:17.642 - 00:19:46.594, Speaker B: Yes, definitely have one typo length 55. I have an extra very quickly see what's going on here. That's clear here. I'm passing that JSON but I need to close these things and I think that should be fine now. Cool. So the server is started and now we can see if we go to the application here, that when I refresh. Obviously by default nothing is prompted.
00:19:46.594 - 00:20:21.314, Speaker B: But if I pick, say, this coin this time, well, the application will redirect me to say, hey, you cannot really access this, access this content unless you have the membership. So I'm going to go ahead and purchase it. So I actually did purchase 30 or so. I'm just going to collect my wallet and you'll see that the application will recognize that I already have it. So say you already have a valid membership for this lock. I can just click here to go back and this time now I can pick the coins and obviously now it shows the prices. Again, I don't know if there is let me look at the question.
00:20:21.314 - 00:21:06.318, Speaker B: So is MetaMask package required or is it included in the unlock package? We actually don't have a MetaMask package. MetaMask is included in the web browser here. So we don't consider this unlock works with any wallet. So I did the demo here by using MetaMask, but if you're using any other wallet, like Rainbow or any of these, you can definitely use the Wallet Connect UI to connect to these things. I can get all of the prices, so I hope this makes sense. So you don't import no, we don't import MetaMask in the application at all, and I don't think that is possible. Like, MetaMask is think of MetaMask as a wallet, as a third party application that just allows the users to sign transactions.
00:21:06.318 - 00:21:11.220, Speaker B: You don't want to do that. There's a question by Slavic. Should we go ahead?
00:21:14.390 - 00:21:33.930, Speaker C: Very interesting project, and I have a question. We just start discussing how to use your service for our project on a hackatron. And the question is, can we limit access to the holders of our token, or it has to be your NFT or lock NFT only.
00:21:34.080 - 00:21:54.190, Speaker B: Yeah, for now it's only the locks. So you would need to deploy a lock to do that. But depending on what your token is, one thing that is cool, if it's an ESC 20, is that you press the memberships in your token. So say you create the Slavic token, and you say a membership is five Slavic tokens. People will need to spend five Slavic tokens to access the context.
00:21:57.410 - 00:22:12.002, Speaker C: Maybe our project will be kind of we will let people mint NFT on our application, so maybe we can kind of mint access token together with our kind of art token.
00:22:12.066 - 00:22:30.890, Speaker B: Right. So that's something that I didn't show, but obviously so actually, let's go back to the dashboard. Here. You can actually customize the art. So here I can change how each NFT is going to that's the default image, but I'm just going to pick my face here. I'm going to just save that. And now each of these NFTs are going to look like my face.
00:22:30.890 - 00:22:44.660, Speaker B: So basically, if you go buy this one now, you will get it in your wallet, and it's going to be that visual aspect. So the NFTs are obviously completely custom. The visual aspect of the NFT is completely customizable to what you need.
00:22:45.750 - 00:23:02.150, Speaker C: Okay. It makes things worse because it's kind of too cross connected now, but I got it for now. It's just basically like lock NFT that separate, almost like password for access to this.
00:23:02.300 - 00:23:29.066, Speaker B: Yeah, but these NFDS are I mean, they're they're pretty much like any other NFDS. Like, if you think about this, they're an ESC 71. You fully control it. It's the same as if you deployed your own contract. Basically, the reason why we have yeah, I can show here on the Explorer, but this is an ESC 71 contract. We actually use some libraries that are coming from open Zeppelin, so it's pretty much standard. It's really yours.
00:23:29.066 - 00:23:33.470, Speaker B: This one is mine. Because I deployed it. But if you deploy one unlock cannot do anything with it.
00:23:33.540 - 00:23:47.990, Speaker C: It's really the same as basically, let's say I'm making crypto punks so I can make the crypto punks and people buying CryptoPunks, they have access to my WordPress blog, to my articles like you just showed before, right?
00:23:48.060 - 00:23:48.870, Speaker B: Yes, exactly.
00:23:49.020 - 00:23:51.320, Speaker C: Okay. It's fun.
00:23:51.930 - 00:23:52.598, Speaker B: Makes sense.
00:23:52.684 - 00:23:55.720, Speaker C: Got you. Thank you. Good stuff.
00:23:56.810 - 00:24:24.398, Speaker B: Any other question? I see there's question in the chat here, somebody's asking so we don't import minimize? No, we don't. How can we check if the user has MetaMask if we don't import MetaMask? So basically the way this works is actually somebody's ensuring this. Yes. So you can use window ethereum which is with no import. Exactly. So it's actually injected. I don't know if let me do the demo here again by cookie because I didn't build that UI for the test here.
00:24:24.398 - 00:24:57.610, Speaker B: So I'm just going to clear the data here and then refresh, obviously. So now I'm not logged in anymore. What we do here is in that that's actually what we do. We check for the window ethereum and obviously now something is going on. I guess it's the demo effect full force. But clearly the cookie itself is sorry, we read from readnot ethereum exactly what as Xerox Prof has described it. I'm going to stop trying to do demo.
00:24:57.610 - 00:25:27.534, Speaker B: Something is going on here. Yes, exactly. We take the heavy lifting of checking wallets, et cetera. We also provide a bunch of interesting things. So as I said earlier, the Smart contracts here have a lot of interesting characteristics that are specific to memberships. So for example, most NFTs don't actually have a way to have a free trial. Basically most of them actually don't even have a duration.
00:25:27.534 - 00:26:03.010, Speaker B: So once somebody has the NFT, they're a member forever. One of the benefits of using unlock is the idea that you can create recurring revenues here. Are there any protocols to prevent anyone from minting screenshot of an NFT? No, and that's not really how NFTs work. I think there's definitely questions around what are NFTs that need to be answered for this before. But think of NFTs as just a record. Obviously nobody can prevent anyone from taking screenshots of pictures. What people own is the record, basically.
00:26:03.010 - 00:26:18.680, Speaker B: So their name is on the list of people that have a specific that I hope that answers the question. There's a question by Zurich Prof. Go ahead, Prof. Hello. Hi.
00:26:19.690 - 00:26:34.294, Speaker D: So I plan on using unlock or not for JavaScript. Is there like a particular function from the Smart contract I call to get the Token? Can I know the name? It's a bit confusing.
00:26:34.422 - 00:26:53.006, Speaker B: Yeah. So there's many things you can call, for example, so if you know, for example, the token that you want to check, you can check Token ID number one and you will get the owner. So I'm the owner of Token ID number one, but Token ID number two doesn't have any owner. So you would see that well, I'm.
00:26:53.028 - 00:27:19.640, Speaker D: Sorry, I'm not talking about I mean to go to get the NFT because I don't plan on using JavaScript. I can't import the unlock packages. So my plan is to get my front end to call the smart contract, call the function from can I see the function?
00:27:20.650 - 00:27:28.058, Speaker B: I'm not sure which function the function I showed you is one that allows you to get the owner of an NFT. What are you looking for?
00:27:28.144 - 00:27:33.758, Speaker D: Yeah, is there buy NFT or I.
00:27:33.764 - 00:27:54.340, Speaker B: Don'T like I see, yes. So we have a function called purchase which is oh, it's actually obviously on the right contract side of things because it's changing the states purchase here. And you have here all of the function. Yeah. So the amount that the user is paying oh, go ahead.
00:27:55.030 - 00:28:00.946, Speaker D: Sorry. Okay. The amount is not hard coded.
00:28:01.058 - 00:28:18.806, Speaker B: No, it's not exactly. Because you could actually pay more. So you can decide, for example, to pay a tip. So maybe the membership is $10, but I want to pay twelve. You would actually pass this. You need to post at least the price in the purchase here. You can also purchase for somebody else.
00:28:18.806 - 00:28:51.474, Speaker B: So you would pass the recipient address of the person who's going to get the NFT. So for example, if I want to purchase an NFT for you, then I'm going to be sending the transaction. But I will put your address here so that you would get it, not me. Most of the time I will purchase for myself. Refer is an address that you want to pass for if you want people to get governance tokens as well. And data is an arbitrary set of bytes that you can pass by default. It would probably pass an empty area here to allow anyone to get to allow you to alter the behavior of the lock if you've used the hooks.
00:28:51.474 - 00:28:55.160, Speaker B: So yeah, that's pretty much it.
00:28:56.970 - 00:29:05.180, Speaker D: All of these are they like compose rules? Like something can we pass an argument? Like in a function?
00:29:05.550 - 00:29:23.460, Speaker B: Yes, exactly. It's basically function. So I would definitely point you to the docs here. I'm going to post them here on the chat. You can see all of the details here. And so the purchase function is one that is detailed here. You have all of the information on how to invoke it.
00:29:23.460 - 00:30:03.306, Speaker B: Thank you. Thanks. Of course. Is there a function to make it if someone is a member that returns a boolean? Yes, there is. So there's multiple but I would use the one that's called balance off, which is this one where basically if you pass an address it will return zero if that address has a membership or sorry, one if they have a membership. And if I use another address, this one, the lock doesn't have a membership to itself, so it will return zero in that scenario. It's actually very simple here.
00:30:03.306 - 00:30:35.270, Speaker B: So is there a. Function to validate if someone is a member that returns a Boolean. So it's not quite a Boolean, it's zero if they don't have a membership and one if they do have a valid membership. And so, yes, you can call that from your own contract to verify that somebody is a member. For what you're describing. We actually do have, if I remember correctly, a tutorial which is using unlock in other contracts. Basically here we have an interface here and you can create that's literally using the balance of function that I was just pointing you to.
00:30:35.270 - 00:31:10.290, Speaker B: So basically you create a contract that has a paid only feature. You can also create a modifier in Solidity. I don't know if you know of this, but basically the logic is pretty simple, is you create a contract that has that points to the lock address, obviously, where you would set things. And then on that specific feature, you would require that the sender has a membership because the balance needs to be larger than zero. So, again, pretty basic doc here, but that should provide you the right information, put you on the right track. I hope this helped. The matrix.
00:31:15.770 - 00:31:18.520, Speaker A: Awesome. Any last minute questions?
00:31:22.750 - 00:31:23.500, Speaker B: Cool.
00:31:24.510 - 00:31:48.910, Speaker A: So we are at time now. Thank you so much Julianne. That was a really awesome workshop. I think everyone really learned a lot and some of you had some really awesome questions there. So I just want to thank you, Julianne, for taking the time to present this workshop on behalf of Unlock at NFT Hack 2022. And for the rest of you for tuning into this workshop. This is our last workshop of the evening.
00:31:48.910 - 00:32:04.640, Speaker A: We'll have some more workshops tomorrow and also our kickoff event is tomorrow with a really awesome keynote speaker. So definitely tune in to ETHGlobal TV and we will see you all tomorrow. Have a great rest of your day everyone.
