00:00:06.650 - 00:00:25.720, Speaker A: All right. Good morning. Good afternoon. Good evening. Depending on where you're calling in from, we have John from Uma here doing a workshop on building with the optimistic Oracle. If you have any questions, questions can go in the Zoom chat and John will be more than happy to answer them. And with that being said, I'll pass the mic off to John.
00:00:27.290 - 00:00:56.090, Speaker B: Hey, everybody, thanks for joining us. I'm going to be giving a demo on how you can do an integration with Uma's optimistic Oracle. I'm not sure how much you all have read before joining the call, but the basic idea and premise of Uma is that it is an optimistic Oracle for getting any kind of verifiable data to your smart contracts. So you're able to get a lot of things beyond prices. You can get just questions about the state of the real world. You can get cross chain information. You can do off chain calculations.
00:00:56.090 - 00:01:35.978, Speaker B: And you can build entire protocols on top of Uma, like the across protocol, which you might have used for cross chain bridging, that uses Uma under the hood for verifying that relays are done correctly. So I want to show how easy it is to actually do this. And we're going to do that by answering a yes or no question on Gurley with a testnet version of our Oracle and kind of walk you through the steps. Let me share my screen. All right, so the first place that you can go is just go to Uma XYZ or Umaproject.org and then go to our docs. And this will take you here if you go to Developers Getting Started.
00:01:35.978 - 00:02:04.580, Speaker B: This is going to be our quick, quick start tutorial. And the idea here is that we're going to ask a yes or no question. And this isn't going to be based on a particular data source. It's just going to be about an actual thing that happened in the world. So we'll ask a yes or no question. Did the temperature on the 25 July 2022 in New York City exceed 90 degrees Fahrenheit? You'll answer one for yes with 18 decimal places. So like way and zero for no.
00:02:04.580 - 00:02:51.550, Speaker B: And then after submitting the request, you're going to propose a solution through the Optimistic Oracle's UI, which is a pretty common way to deal with yes or no questions. And this will hopefully get you started with some initial code that you can take a look at and play around with. So I'll exit out of some stuff here and just show the actual flow that you would go to. So you click this link, it's going to take you to an example contract and remix. And in this case, I'm already logged in and Gurley, I've got some Gurley ETH. This is all kind of preparatory stuff that you would need to do for this to work. And then you go in here and the code is in this Getting Started sol contract and it's a very simple contract.
00:02:51.550 - 00:03:31.896, Speaker B: It's under 50 lines, really easy to read and understand. And we're just going to deploy this contract on Gurley. You can see the little updates down here. I'm not sure if everybody's used Remix before, but we just try to make it as easy as possible so you don't have to set up any command line tools to just play around with Uma and see the lifecycle of a request, a proposal, and a settlement of some piece of data. So we do have a deployed contract, I think this one. Yeah. Okay, so this one was actually just deployed.
00:03:31.896 - 00:04:05.764, Speaker B: So I tried to get the settled price in this case or the settled data and it can't be called yet. So what we're actually going to do here is we are going to request the price. Let me exit out of this and reconnect. Sorry for technical difficulties. I went through and did this a couple of times and it might be confusing. Remix going through here. It compiles it, and then we can deploy.
00:04:05.764 - 00:04:39.380, Speaker B: Great, no instances yet. Let's deploy to oh, you know what I did? I deployed to remix. VM. I didn't deploy to Gurley. So you select your injected provider on MetaMask, and now we're going to actually deploy to the Gurley testnet. Confirm that if you want, you can watch Ether scan, see when this is going to go through. Should only take a few seconds and then we'll get an update here once it's done.
00:04:39.380 - 00:05:13.114, Speaker B: And I am going to go through all of this code after the walkthrough and kind of show what's actually happening for each of these steps. But just want to show the UI first. So it's confirmed. There probably take a second more for Remix to pick it up with whatever node they're watching. And now that it's deployed, you can actually interact with it through Remix. So we're going to call this request price function, which is down here. And this is going to request a price from Uma's Oracle.
00:05:13.114 - 00:05:59.912, Speaker B: In this case, we're not actually requesting a price, we're requesting a piece of data. We're asking for an answer for the question about the temperature in Manhattan on July 25. Confirm that. As always, a lot of the demo is just waiting for blocks to finalize. There we go. Cool. So we requested the price.
00:05:59.912 - 00:06:51.092, Speaker B: And where you could actually go to propose a response to the price is in Uma's optimistic Oracle UI. So we can see a new request right here. And core to the way that Uma works is that anybody can propose an answer to any question and anybody can dispute that answer. So it's a fully permissionless system that only relies on one proposer disputer being online and honest. So you're not relying on an off chain node network, reaching consensus and then pushing some piece of data on chain. You're not relying on some validator network. You're just relying on one person knowing the answer and you might know the answer yourself, and you can just go and propose it and you still have uma's, economic guarantees behind it because you post a bond with your proposal and anybody who disputes your proposal can claim a portion of that bond.
00:06:51.092 - 00:07:27.860, Speaker B: So we have people basically watching 24/7 that are pretty competitive to try to propose and dispute faster than others. So in this case, the correct answer is zero or no. It did not rise above that price. You can see all the details here. If you were looking at this in real life, you might want to look at the UMIP, which defines how you answer this particular type of question because there are a lot of different types of questions you can ask the Oracle and each have a different methodology. Let me take a look at the chat. Oh, yeah, I see Em pointed that out that I deployed to the Remix VM.
00:07:27.860 - 00:08:26.940, Speaker B: Okay, so let's submit this proposal. So, same kind of thing, just waiting for that proposal to go through. It's pending. I always watch on ether scan like it's going to speed it up or something. Today. It all right. So that's indexing should be there in a second.
00:08:26.940 - 00:08:54.036, Speaker B: Oh, there we go. So you can see the time remaining. So I guess this actually did get finalized about 25 seconds ago or something. Each proposal has a challenge window where somebody can come in and dispute. And since this is a test contract, the challenge window is set to just 30 seconds. And we can actually see that in the code when you set it here. So when you're requesting the price, you're setting a custom liveness for it.
00:08:54.036 - 00:09:29.516, Speaker B: So you're saying we just want 30 seconds? Because it's a test, it doesn't really matter. And during that window, anybody can dispute it. Typically what you would actually see is something more like 2 hours. Or if you have a really complex question where it's hard to tell whether you should dispute or not, you might want to set that to a longer time period. So there are some complex Dow governance type things where that might apply, but 2 hours is pretty typical. You can make it longer, shorter, depending on your actual use case. So now that we've passed the Challenge window, nobody's disputed this answer can be settled.
00:09:29.516 - 00:10:07.208, Speaker B: The fact that nobody disputed means that nobody actually disagrees with the answer. We don't have to go to an on chain vote about what the answer is. So we can just go in here and settle the request. And you can do this also directly to the Oracle contract. In this case, this contract has a settlement function built in here just for convenience. And while that's going through, I can just kind of show how simple that is. It's really just kind of going to the optimistic Oracle this is the deployed contract here and calling the settle function, and they're settling a particular request.
00:10:07.208 - 00:10:48.440, Speaker B: So this is the requester. It's this contract asking the question, the Identifier yes or no query the time it was asked. Sometimes this is important. For instance, if you were asking what's the price of ETH in general? You can ask that and then just based on the request time, you'll get the current price of ETH and then the ancillary data, which in this case is really important because it's where the question actually exists that you're going to look at. So that went through. We should be all settled and that means that we should be able to now get the settled price and it's zero. So that is a value that you can then use.
00:10:48.440 - 00:11:25.636, Speaker B: If this was a prediction market, for instance, you might use this to settle a bunch of bets about what the temperature is going to be in Manhattan. Or it could be something around like you're running some entity on the electrical grid. And it's important what the temperature is because you need to offset your risk because you're going to have to run really hard or you're going to have to spend more on electricity or something. All kinds of advanced use cases. But what's really key here is that it's super flexible. This is like a weird specific piece of data. It's really not practical to set up a node network for just the temperature in Manhattan to constantly tell you what the temperature in Manhattan is.
00:11:25.636 - 00:11:58.700, Speaker B: But if you just need to ask like once or twice or a couple of times, it's pretty easy to use. Uma, and you can ask any kind of arbitrary question where you can go and find the answer. In this case, if you want to check, you can look at like weather records and you can see that it definitely didn't exceed that temperature. Take a look at the chat. What if there's a bunch of people that want to choose a wrong answer? So that's a really good question. So what happens? There is there is an economic incentive to dispute an incorrect answer and it gets escalated to what we call the DVM. And that's basically the voting system.
00:11:58.700 - 00:12:54.160, Speaker B: It's the data verification mechanism where all of the uma, token holders go and analyze the situation and they post a secret commitment of their vote of what the correct answer is on chain. And there's a 24 hours period where they can do that. And then there's a 24 hours period where they can reveal their votes, which would be great to automate, but we haven't figured out a good way to do that yet while still maintaining the vote secrecy. So you can't just copy whatever the majority answer is, whatever the majority answer is at the end of that. That's taken as the shelling point answer and that shelling point is taken as the truth. There isn't really a good incentive to give an answer that's incorrect because you don't think other people are going to vote that way. And under the current system, you don't get any voting rewards if you don't vote with the majority, with what's ultimately taken as the correct answer, and because of the bonding mechanism for the proposers and the disputers, this kind of voting system to resolve answers is pretty rarely activated.
00:12:54.160 - 00:13:26.324, Speaker B: What incentives are there to answering at all? What if you never receive a response to your proposal? Integration dao engagement as one of its biggest hurdles into an oracle seems risky. Lots of questions. Let me take the first one first. So the incentive for answering so proposers can be given a reward. So in some cases there's an inherent incentive. Like if you're settling an insurance contract, there are people that are getting paid out on that insurance. For smart contract risk, for instance, you might not need to attach a proposal reward for that because you don't need a third party.
00:13:26.324 - 00:13:55.748, Speaker B: Somebody has an economic reason to go in there. For other things, like for Polymarket, for instance, they tack on a $50 reward or 50 USDC reward for each question that they ask. So that's for the proposers, and then the proposer has to post a big bond with it too. That's where the disputer's incentive comes from, because they'll get a cut of that proposer's bond if they dispute successfully. And then for voting, newly minted uma tokens are rewarded to people that vote correctly. And if you vote incorrectly, you don't get anything. If you don't vote at all, you don't get anything.
00:13:55.748 - 00:14:52.036, Speaker B: And we have some new versions of the contracts that are coming out not too long from now that involve more staking and kind of advanced mechanisms for potentially slashing people that got the vote incorrectly. We have pretty high participation. I'm not sure exactly what the numbers are, but it's fairly high in terms of the tokens in circulation because if you don't participate in voting, you're effectively getting inflationary pressure on the tokens that are just sitting in your wallet. So I don't actually recommend people just buy uma to sit on it, it's meant to be used, otherwise it is going to get inflated. But if you do participate and vote, you are getting rewarded for that and that kind of drives that engagement. The next question from Devin Jackson what happens if a question goes unanswered for a long time? Also, is there a point at which a question is considered finished? That is a really good question. If it goes unanswered for a long time, somebody could come in later and answer it.
00:14:52.036 - 00:15:39.140, Speaker B: You could add some kind of expiration aspect to your contract that's asking the question. So if you have something where you do want an expiration date, you could kind of build that in. And then when you do receive an answer, you could just say like, we're throwing it away, it took too long to get that answer. And it really depends on your use case, whether you want to build something like that in or not? How is it protected from people spamming disputes to delay answers? That's a really good question. The disputer also posts the bond and they will lose 100% of that to the proposer if they're just arbitrarily disputing. But I think that this might be more focused around the voting rewards aspect where if you hold a huge number of Uma tokens you might have an incentive to try to spam votes into the system in order to just generate and farm rewards for yourself. We have a final fee that's attached to that too.
00:15:39.140 - 00:16:40.792, Speaker B: So that final fee goes to the Uma store contract. So it's not really meant as like a revenue generator, it's meant as an anti spam mechanism where the cost of that fee should offset most people in terms of their Uma holdings, where it's going to be greater than what they would earn from voting rewards. And there are some people or entities I don't really know that have a larger amount, but they don't spam the system. And if they did try to spam the system, the Dow could vote to basically increase that final fee anyway to stop that from happening. But generally if people have some large amount of Uma like that, they are pretty aligned with the network and aren't trying to spam it, but we would keep an eye on that and change things. I will note also that in the new contracts, I don't know how much I'm spoiling or how much I'm supposed to say. So there is like a better solution to this where it's not really tied to the number of votes that happen and that kind of removes the incentives to spam at all.
00:16:40.792 - 00:17:35.496, Speaker B: But I don't want to spoil that because that's like a little bit away from being released. But if you look at our Open Zeppelin audits, it has been audited, it's not like super secret, it's just not like something we talk about a lot yet because it's not deployed yet. Could you share any use case which can be integrated into the DApps for better understanding? Yes. So we have prediction markets, we have insurance, we have Crosschain bridging with a Cross protocol. We have a really interesting use case around KPI options where it's a token that has a variable payout based on real world events. So for instance, if you wanted to do an AirDrop to some users to incentivize increasing TVL in your protocol, you could AirDrop them a KPI option token that's backed by your token that's going to pay out more or less of your token depending on whether that KPI is hit over some time period. So you can get a lot more targeted than just like spray and pray.
00:17:35.496 - 00:18:27.928, Speaker B: Just spread a bunch of tokens around and hope that people want the same things that you want and don't just dump automatically. So from barath Uma token holders make the final decision on settling disputes how do you become an Uma token holder? It's for sale pretty much everywhere. I would recommend just buying it on chain from like Uniswap or Sushi swap or something because you're going to need it on chain to vote. So if you buy Uma tokens on coinbase, I'm not saying that's a bad idea, but if you keep them on coinbase, you're not going to benefit from the voting rewards, which right now are about like 30, 40%. And I think that'll probably turn into a fixed issuance rate in the future rather than variable based on the number of votes. But that's great if you're voting, not so great if you're not voting. So if you just buy the tokens, hopefully the price goes up anyway, but you're really not utilizing it for what it's meant for.
00:18:27.928 - 00:19:12.964, Speaker B: We want to draw all of those tokens on chain. We want all of those tokens being used for voting and it is in your best interest because otherwise you aren't getting those rewards and other people are. So now there's more Uma tokens that are being created that you don't take a part in because you're not participating in the voting system. So from tally our disputed values readable by smart contracts sorry, I might have missed this. Yes, they are. Also you can bake in callbacks too. So this isn't really shown in the example contract, but if you wanted a callback when a proposal comes in for a particular request, you could bake that into your contract, it'll automatically pull that and you could also do the same thing for disputes or for settlement.
00:19:12.964 - 00:19:48.132, Speaker B: So you can kind of have complex flows where you might have payouts that are triggered once the settlement comes in. And I'll do kind of a quick walkthrough of the actual code here to kind of give a better idea. So this is a really simple contract. It's mostly comments, but we're going to create an interface here or like an instance to look at for the Optimistic Oracle. In this case, it's pulling in the Optimistic Oracle that's on Gurley. So this hard coded address for our V two contract, we're setting an Identifier and this is basically 30 seconds. Really enough to make sure it would have been disputed? No, absolutely not.
00:19:48.132 - 00:20:28.736, Speaker B: Not in real life. This is only for demos. The default is typically 2 hours, but you can go even longer than that. And we do recommend that if you have some kind of complex question or if you have some very large amount of money that is at stake and then in some cases well, most cases, 2 hours is actually fine, especially if you're able to automate the review of proposals and disputes to come in, which is what a cross protocol does. Where that's 30 seconds. Because if it was our normal dispute window, we'd be still waiting for like another hour and 50 minutes. But this Identifier, so this is just like the type of question you're asking in this case.
00:20:28.736 - 00:21:21.364, Speaker B: It's a really simple question, but it's also really interesting because it's natural language. There are humans in the loop in this case. So one advantage of this style of oracle is that you can frame a question in a way that a reasonable human being could read it and they could give an answer and they could give an accurate answer. And you're not going to have those situations where the computer is kind of just stupid in some way, where you do have this automated system, it's maybe bot driven, it's something, but it does something that doesn't actually match the intention of what you're trying to do. So you can actually ask a question in plain language and receive an answer and specify various qualifiers of what types of answers you're looking for based on what your contract is expecting. There's a lot of comments to that effect here. Request price is probably the most complex function in here, but it's still really not that complex at all.
00:21:21.364 - 00:22:14.964, Speaker B: It's really just setting the parameters for a particular request. So here we're setting the request time to be the current block time. It doesn't really matter what the request time is in this case because it's asking about some event in the past from Ivan. What are the types of answers that can be accepted, can be configured by the contract? Can the answer be some complex structure? So the answer is going to be some numerical value, but the contracts can configure. The type of question is really kind of where you would put the complexity. So for instance, across is asking a pretty sophisticated question about whether all of the relays in a particular bundle in a merkel tree are accurate and also comprehensive, that it captured all the deposits that happened on a particular chain at the time that a root bundle is proposed. But the answer is yes or no.
00:22:14.964 - 00:22:48.236, Speaker B: It's one or zero again in this case. But you can have a question like what is the price of ETH? That's not going to be one or zero usually, it's going to be some other number. So it's numerical values. So that's where I would put the complexity on the question side. Or you could also bake that into your contract so you can definitely consume an answer from the oracle and then do some additional processing on it. And that is something that happens with KPI options because in that case the answer is often yes or no. Or it could be some linear value.
00:22:48.236 - 00:23:39.752, Speaker B: But let's say that you're asking did we hit our TVL target or not? And that answer might be yes or no. And then based on that, you might have some kind of calculation of what types of payout function you want to have for that particular contract. Sorry if that's very general and vague. Part of the good problem of uma is it is like a very generalized oracle. So there is a lot that you can do with it, so it's kind of hard to nail down the limitations on what you can do with it. There's a lot that you can kind of cram through there as you can sort of see from your ability to just ask natural language questions and count on this decentralized human incentivized network to resolve it for you real quick. I'll see if there's any more questions that come in, but just kind of running through how this functionally works.
00:23:39.752 - 00:24:17.372, Speaker B: This is the type of token that's getting posted as a bond. So girly WETH in this case. So that's what the proposers and disputers are going to have to post if there are any disputers. The reward in this case it's zero because who cares. It's a testnet thing and then it's going to request the price and it's going to set a custom liveness for it and set it to 30 seconds settlement we already talked about and gets settled. Price is also basically the same kind of deal you're doing. Get request call and you're getting the resolved price from the request, which is really only going to work if it is possible to get a resolved price.
00:24:17.372 - 00:24:44.724, Speaker B: Otherwise you'll get an error message when you call this function. So that was the really quick rundown. I do hope that if you look at this, you can just start tweaking this and deploy other contracts to Gurley and you can go here. It's just testnet oracle. Umaproject.org, so you can test out the full flow with your own actual questions or your own integrations. And this is a really easy starting point.
00:24:44.724 - 00:25:35.390, Speaker B: Literally only takes a couple of minutes to just do the whole flow yourself. Get a feel for it. If you think it would be useful to your project, we'd love to help you out on integrating it. We can provide a lot of hands on assistance, especially for complex integrations because there is so much that you can build with it and we're interested in seeing out of hackathons in particular the more advanced and interesting use cases. And then we can also help you out with integrations for things like covered call options or success tokens or KPI options. Like all of these things that use some of our homegrown products or interesting integrations with across as well. I mean, there's like a whole range of things that you could do, but yeah, we just love to help you walk through it and make sure that you are using the Oracle to whatever way helps your project.
00:25:35.390 - 00:26:27.032, Speaker B: One other thing, just pitching it out there, I don't feel like we have enough people that are using the Oracle for off chain calculation. So keep that in. Like that's something that is really verifiable by this kind of Oracle system and it would save you a ton on gas. It might open up opportunities. I know there were people in the past, I'm not sure where they're at with it now that were doing things like volatility calculations for DeFi, which are just not practical to do on chain, but lots of stuff like that cross chain stuff is also super interesting. Like, the Oracle can see what's going on on Solana, and you don't have to post any messages on Solana at just, you know, anybody could go and verify what's happening on Solana. So if you want to give an AirDrop on Ethereum to somebody that has some Solana NFTs and have identified their Ethereum address elsewhere, you could do that and you could enforce that with the Oracle.
00:26:27.032 - 00:26:55.364, Speaker B: Just, like, random stuff. There's so many things, so please contact me. I'm also at Jdshut on Twitter, pretty active in responding to DMs and just love talking through new integration ideas too, so please share. Oh, sorry. Was the sound okay for other people I saw nava that it was ridiculously quiet. Hopefully it wasn't okay.
00:26:55.562 - 00:27:14.524, Speaker A: All right, well, I guess that's everything. Thank you so much, John. That was super enlightening and really cool workshop that you did. Yeah, I think some people are asking for your oh, you already answered? Great. Cool. Yeah. Well, thank you so much for taking the time to do this for us.
00:27:14.524 - 00:27:43.430, Speaker A: And thank you to the rest of you for tuning into the Uma workshop today. Uma will be available for support over the next month on Discord or anything else that John had mentioned. And with that being said, we also have another workshop on Scaffold East by Austin from the Ethereum Foundation, as well as Jones. If you're interested, please tune into that as well, and I hope everyone has a great rest of your day.
00:27:44.120 - 00:27:46.800, Speaker B: Thanks all. Thanks for having me. Bye.
