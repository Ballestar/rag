00:00:07.290 - 00:01:27.400, Speaker A: So I'm going to be talking about how to integrate the Teller Oracle into your project and it's just going to be a very practical, simple demo of how to integrate the Oracle into your contracts and how to actually get some data on chain. So, first of all, the Teller Oracle is a permissionless flexible Oracle that depends on a network of staked data providers. So anyone can come in and stake some tokens and provide data and then anyone else can come in and dispute that data. So you will see some more context on how that works as we work through the demo. So, let's look at an example of a user contract. So first of all, you would want to install the Teller user library called using Teller and you can just install that with NPM install using Teller. And I already have that installed here.
00:01:27.400 - 00:02:43.220, Speaker A: And so you can see that that will install a contract which contains lots of different data getters. So you can see it has many ways of retrieving data. And the most probably common and most recommended function to use is this get data before. So this function allows you to input a query ID which is the unique Identifier for Teller Oracle data and then a timestamp so it will retrieve the last reported data before that timestamp. So you usually input like block timestamp minus a buffer period so -30 minutes for example. So we'll see that in our example and then in using Teller there's also many other functions, you can look at those in the docs and on GitHub but we're going to be using the get data before function from using Teller. So you just import using Teller like so.
00:02:43.220 - 00:03:41.090, Speaker A: And then in your constructor you'll have to input the Teller Oracle address. And so you can find the addresses that are deployed on different networks in our documents or in your test. You can just deploy your own test Oracle environment called the playground and you can find that on our GitHub or in our docs. So, like I said, all data in the Teller Oracle is organized under a unique Identifier called a query ID. And so you generate that query ID from query data. So that is what all of this stuff we see here is generating. So we have a query type and in this case we're using the numeric API response.
00:03:41.090 - 00:04:58.490, Speaker A: So that's a query type that we have in particular for hackathons. So that will just depend on a single API source which is not recommended for production depending on a single API source. But for hackathons it is fine. So you can easily get up and running with your custom data, your specific data that you want in your hackathon. So this numeric API response, it depends on two arguments a URL and then some arguments from the URL that we will use to extract the specific piece of data from the API response. And that is what is going to be reported on Chain and it will be converted to an integer or a UN 256. So we have this one read value function in this demo contract which will be used to go retrieve our specific data from the Oracle.
00:04:58.490 - 00:06:10.370, Speaker A: So this is how we actually form that query data from the arguments that we set up and then we hash that query data for our query ID. And then finally we will be using that query ID we've generated input that into the get data before function to actually retrieve our data. And then also you can see that we input the other necessary argument a timestamp. And in this demo we're using block timestamp -5 seconds which is definitely not recommended in production. Because the way the Teller Oracle works is that again anyone can stake and provide data and then anyone else can come in and dispute that data. So you want to give a buffer period for people to monitor and decide to actually dispute data so it's best practice to build in a buffer period. It's hard to say exactly what amount of time should be used.
00:06:10.370 - 00:07:04.914, Speaker A: It just depends on how much value is at staked in your protocol and the subjectivity of the data that's being provided. But in this demo, we're just going to use 5 seconds because we are going to try to actually get some data reported on Chain and immediately use it. And then so this get data before function. It will return a value and all data provided. Or reported to the teller. Oracle is in bytes form, so it can really represent any type of data it can represent many pieces of data at once. So our data providers go fetch data, encode it into bytes, and then you can decode it in your contract as needed.
00:07:04.914 - 00:07:43.070, Speaker A: And then this function also returns a timestamp, which is the timestamp at which the data was reported on chain. And then you can see that this function decodes the data, in this case, for this numeric API response. It is a single uint 256 value. So that's what we decode there. We also return the timestamp. And just for demo purposes, we then will show how you can just retrieve the data and save it into your contract. And you can see that we check whether the timestamp is greater than zero.
00:07:43.070 - 00:09:11.470, Speaker A: So if you get a timestamp of zero, that means that no data was retrieved. So you should not act as if data was, in fact, retrieved. So that is our simple example contract and let's see now we can see that it has already been deployed on Chain so now we will try to submit a tip or a reward. So that is the way that data is actually requested with Teller you request data using the unique Identifier, the query ID and you provide an incentive for someone to come in and provide that data so then they will actually get paid. So we are going to submit a tip to Mumbai testnet using a tipping script and see if I remember the parameters. All right, so we are going to enter a tip amount. This will be one test TRB on Mumbai.
00:09:11.470 - 00:10:42.690, Speaker A: And we want to build our query data, which is the type is Numeric API response, which has two arguments, two strings, and then our arguments. In this case, I'll grab from our contract first the URL and then the arguments from the URL. Okay, hopefully this works. So our script is approving a token spend and then it will add the tip to the contract. Okay, so let's see how long it takes for this transaction to show up. So, yeah, what we're looking at here is our auto pay contract. That's where the tips happen.
00:10:42.690 - 00:11:52.974, Speaker A: Okay, so it shows up. And now we should soon see a data report show up in the Oracle contract here because we have some people running data providers watching for tips for this hackathon. Okay, looks like something was reported just a couple seconds ago. And let's see on our data feed. Let looks like some data was provided. That was our query type that we expected, and 51 was the value that we expected as well. So there you can see just the whole flow of integrating the Teller Oracle into your contracts.
00:11:52.974 - 00:13:06.150, Speaker A: And then I hope you can understand how you are actually requesting and incentivizing your data that you want. And we can quickly go see in our deployed contract that we can actually retrieve the value. This is an old one and now we see the new one provided. So, yeah, that is the whole flow of integrating Teller and getting data on chain. Doing what I just did in a real project in this hackathon should be the qualifications needed for hopefully getting like a reward in this hackathon from Teller. Also, I kind of glossed over I already have test TRB in my wallet, but you do not. So if you need any, you can go to Twitter at trbfcet and you can see what you need to input and you can get some test TRB for the hackathon.
00:13:06.150 - 00:13:16.410, Speaker A: And yeah, you can find more info on our web site at teller IO and on our docs docs teller. IO.
