00:00:07.130 - 00:01:41.310, Speaker A: Hi everyone, thank you all for coming. I'm Jess Glover, I am the developer relations engineer at the Aave companies. I have been here for just under a year and I work primarily on Aave and Go. So I guess who here actually has minted girly Go and who is here for a rave ticket? Okay, so today we're going to be looking at what Go is, how it works and looking at looking through some code snippets and then go through the prizes for the hackathon. So if you haven't heard of Go, it is an ave native decentralized over collateralized stablecoin and it was initially proposed to the Aave Dao in July last year and it's launched on the Ethereum girly testnet and is also on the Sepolia testnet. Firstly, to fully understand why Go was built, we should touch on stablecoins briefly, just because they play such an important role in the DeFi ecosystem, they offer a fast, efficient and borderless way to transfer stable value on the blockchain. So you're probably wondering why build Go when there are so many stablecoins out there? So there's been demand from the ecosystem for a decentralized ave native overpateralized stablecoin just because of the reasons I said before, it's a great way to transfer stable value across the blockchain.
00:01:41.310 - 00:02:32.618, Speaker A: So Go contributes to the RWA Dao treasury as well with repaid interest directed to the Dao rather than asset suppliers as it normally would be on the RV protocol. With the RV community's support, go has the potential to become a leading decentralized native code. So what is Go? So as I said before, the kind of lengthy definition we have RA protocol native. So Go fits natively into the existing RV protocol as a new asset. So when the team was building Go, it was clear that there was a lot of functionality already in the existing protocol. So this is things such depositing, collateral and liquidations. Go is decentralized, so it does not have one single point of control.
00:02:32.618 - 00:03:20.330, Speaker A: It will be fully governed by the Aave Dao and this means that they will make all decisions relating to Go. So for example, Go is not an algorithmic stablecoin and the Rvdao will set the interest rates. So again, on this point relating back to how Go fits natively into the RV protocol, it means that Go can actually leverage the existing Aave governance framework and the access controls. So this doesn't only provide transparency, but it provides verifiability. So you can see the governing rules and policies that will be approved and executed on chain. So Go is overclateralized. So this just means that users must supply assets more than the value of Go to be minted.
00:03:20.330 - 00:04:45.200, Speaker A: So in this case, as Go will be pegged to one to one with the US dollar one, go will be backed by more than $1 of collateral and this model has already been proven within the ecosystem and this will work as a stability mechanism. So basically when you're supplying more go, more collateral than the Go that you're minting. This excess collateral acts as sort of a buffer, like a cushion in the event that the price of a stable coin will fall below the target value. Go is also multicolateralized. So in terms of the assets that a user might supply as collateral sorry, as opposed to where with other stablecoins that you might mint a stablecoin using one specific collateral type in a vault, users can actually mint Go based on their entire set of digital assets across the Re protocol. So as we now have this diverse range of assets, this mitigates the sort of concentrating on one type of digital asset just back in Go. So how does Go work? Go is an ERC 20 token designed to maintain a stable rate pegged to the US dollar despite market volatility.
00:04:45.200 - 00:05:40.264, Speaker A: So it follows the same process when you're interacting with the RV protocol, you supply collateral, then you can borrow Go and then repay the Go debt. As Go is over collateralized, the users must, as I said, must apply assets more than the value of Go to be minted. And Go is also designed to accrue interest when it is borrowed. So as I mentioned the Ave Dao before, they make all the decisions relating to Go. So this can include the interest rates, this is the collateral that you can supply and any changes to it as well. So a new concept that has been introduced on building Go is the concept of Facilitators. So a facilitator is essentially they have permission from the Arbe Dao to mint and burn Go.
00:05:40.264 - 00:06:33.020, Speaker A: And each facilitator is assigned a maximum bucket capacity. So how much Go they can mint from. And so in the latest RV governance development update from the RV companies, it's been recommended that the RV Ethereum V Three pool will be the first facilitator launch Go. So you'll be able to mint and burn Go via the RV V Three pool. And this is due to the already extensive risk mitigation features that are already through the RB V Three pool. And so if you are actually hacking and you're not just here for the tickets, how do you integrate with go? So, if you're looking into the smart contracts, you can get started with the Go contracts. There's loads of links online, so I'll link them later on Discord and on Twitter.
00:06:33.020 - 00:07:22.480, Speaker A: And you can make use of the NPM packages available. So there are two or three packages for the Aave protocol and then there's one for Go. You can install it into your repository. And it doesn't matter if you're using Hard Hat or foundry, you'll have access to all the contracts there. If you're building a front end, you can use the Aave utilities, JavaScript, SDK. So this is a really great way to fetch data and transform it. It's really simple to use and you can use it for your front end and then also if you're looking at the data analytics, you can use the subgraph for Aave and Go now to look at some JavaScript examples of how you could use the JavaScript SDK.
00:07:22.480 - 00:08:18.916, Speaker A: So as I mentioned before, you have to supply collateral before you can borrow Mint Go. So here, this code uses the SDK. So in this case, we're making use of the deposit function. In the Re protocol, we need to pass all the parameters. So for example, here we have the user address, the user address, the address of the reserve that we're going to deposit into the protocol, the amount you want to and how much on behalf of which is sort of a unique variable where it's just who you're actually supplying for. And then after you've supplied the collateral, you can then borrow Go. So as you can see, some of the parameters are the same or very similar.
00:08:18.916 - 00:09:05.770, Speaker A: And it's important to note here that the interest rate mode is a variable. So at launch the RA companies is proposing that there'll be a fixed rate. But just given the implementation of the Go reserve, it's a variable debt token here. So just to note that there if you are integrating, okay, and then if you need to repay some of the Go debt. So if you've been using the Re protocol before, you'll know about health factors and that if you repay your Go debt, you will be able to increase your health factor and this helps to mitigate any liquidation risk that you might incur. So again, very similar. You just input the correct parameters and should be good to go.
00:09:05.770 - 00:09:45.742, Speaker A: So if you aren't wanting to use the SDK and you're looking more into the use mark contracts, we're going to just do a really quick live demo of splits. So here we have a repository which again, I'll link online and in the discord channel as well. So a lot of it is already we're just going to set this up really quickly. I've already set this up quickly. And if you want to, you can just follow the get started CT. Yeah. So you can follow this, this get started bit here.
00:09:45.742 - 00:10:11.814, Speaker A: So it just helps to get this sped up. So we're just going to test, we're going to create a test file and just test Minting Go. So here we've initialized the contracts already. So we're going to use Dias collateral. This is the pool contract from the RV protocol, which is kind of the main contract that you would interact with. And then the Go token contract. Again, there's like a setup here.
00:10:11.814 - 00:11:07.490, Speaker A: So you're running the girly for testnet. Sorry, can everyone see that or do you want it bigger? So sorry. So here we're going to test Minting Go. So as I said before, you have to supply collateral. So we're going to supply Dai using the Ave contract. So as you can see here, we need the asset and amount who we're supplying on behalf of and then the referral code, which will just be zero. So we can say that we are supplying to the pool.
00:11:07.490 - 00:12:00.584, Speaker A: We need the address of what we're going to supply. So that is going to be Die. And then sorry, you can see all my favorite ones. We're going to say that we are the user. Sorry, I should have said before. We've already initialized our address, so we're going to be the user here. Okay, so to use RV pool, we will need to approve the Dai funds that will go in.
00:12:00.584 - 00:12:36.040, Speaker A: So Die approved and then approve the pool. Okay. And then we're going to mint Tango. And as I said before about the variable, the variable mode. So this is going to be set to two because of the way that it's implemented in the contract. So we want to borrow Go. So we're just using the same tokens that we initialize above.
00:12:36.040 - 00:13:27.418, Speaker A: So we want ten variable mode two. And then because we are mincing it as the user, and so we want to send ten to our friend Ronnie so we can initialize the Ronnie address and we will just put random address. And then we're going to transfer the ten go to Ronnie. I assume you all know for Rami. That it's Ronnie. Okay, so let's see that and then just test. Okay.
00:13:27.418 - 00:14:31.682, Speaker A: Yay, it worked. I didn't think you would actually clap like it's fine. Okay, so as we have sent ten Go to Ronnie, ronnie says thank you. Buy Ravi tickets. You are going everyone. You're all flakes just to say yes. Pardon, do I have time to test it? TypeScript it's? It's just the JavaScript SDK anyway.
00:14:31.682 - 00:15:21.516, Speaker A: Oh, sorry. Okay, 54321 previous, please. Okay. This also doesn't guarantee tickets, just to tell you, so you might not get one. Okay, so for the actual hackathon, we have $10,000 for the best projects on RV and Go with 1st, 3502nd, 2503rd, 1500. And then the five best Go integrations will receive $500 each. And then also for the best projects that build on RV and Go, you may also get Ravi tickets.
00:15:21.516 - 00:15:53.144, Speaker A: So if you've not been successful now, build on RV and Go and then we can hopefully get you set up. So we have some ideas here. These are all linked in the ETH Global Prizes page. So it's just some ideas of what you can get started on. We really want people to build look into payments, so like create an app or a plugin spy and Pay would go anywhere. We're really interested in what you can come up with. I know a few of you have come over and said about account abstraction, so that's really great.
00:15:53.144 - 00:16:22.144, Speaker A: We're really interested in that. And there's so many different things that routes you can go down on the Aave side. Again, there's so much here. Health Factor Simulator would be really good to see because if you use Aave regularly, you'll definitely know how important. This health factor is governance visualizations. It would be great to see what aspects you can look at from RV, governance and ZK proofs. Definitely looking to utilize ZK proofs.
00:16:22.144 - 00:17:07.424, Speaker A: Sorry, that was not and so, yeah, this is not a ravi ticket. This is a link to all the resources on the ETH Global Prizes page. So we've got all the links for the prizes, the ideas that we have tons of resources for all the docs and I will link everything in discord as well. So thank you all very much for coming. We have a big R A N's team here, so if you want to come to the booth, come can see, come and grab some swag. And we're here to answer any questions. We'll also be here tonight as well, later on if you want to talk through any project.
00:17:07.424 - 00:17:08.930, Speaker A: Thank you very much.
