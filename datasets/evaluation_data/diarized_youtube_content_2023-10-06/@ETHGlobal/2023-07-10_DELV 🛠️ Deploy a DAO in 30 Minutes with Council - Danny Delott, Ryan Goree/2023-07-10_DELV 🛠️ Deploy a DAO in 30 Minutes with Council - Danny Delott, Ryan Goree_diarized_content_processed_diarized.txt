00:00:07.450 - 00:00:26.626, Speaker A: Hey, guys, let's get started. So we're really excited to show you our new framework called council. It's for deploying dows and a complete toolkit on top of that, which we'll get into. If you're not familiar with dows, that's okay. We're going to get into that a little bit. But first, let me just introduce who's talking to you. So I'm Ryan Gorey.
00:00:26.626 - 00:01:02.958, Speaker A: I'm head of engineering at Dell. We're a research and engineering company who builds DeFi protocols and tools. And with me I've got Danny, who is our front end lead, and then I've also got Gio, who does business development and community at Dell. So, yeah, we're going to talk a little bit about what council is, what we built, and why it's important. And then we're actually going to deploy contracts, configure and run the UI and create proposals. This seems like a lot to do in 30 minutes, but we have tools that are going to make this really streamlined and really easy. So we're pretty excited to show it off.
00:01:02.958 - 00:01:14.610, Speaker A: After that, of course, we've got prizes. We hope that you all will build on us, and we'd love to work with you all on that. So to get started, I'm going to hand it off to Danny, and he's going to tell you a little bit about council.
00:01:15.370 - 00:01:27.542, Speaker B: Thanks, Ryan. So, decentralized governance. Just out of curiosity, how many of you have ever participated in a Dao or voted on a proposal or any of the type thing?
00:01:27.596 - 00:01:27.958, Speaker A: Awesome.
00:01:28.044 - 00:02:07.258, Speaker B: So, as you know, this is a big topic and we don't have time to discuss everything about decentralized governance. But I do want to point out sort of two ideas. Maybe plant two seeds in your head on why council is maybe a little bit different than what you're used to. The first one is that first bullet point you see there. It's the flexible definition of voting power. So many of us have probably seen like a one token, one vote type of model. Maybe if you're in a smaller group, you've got a snapshot poll and then a multi SIG that actually executes the proposal for council.
00:02:07.258 - 00:02:37.114, Speaker B: We want to build this kind of for the future. So maybe one token, one vote doesn't make it to be the actual perfect way to structure a dow. So we want to build that into our protocol. So we'll see this in a minute. But the component I want to put into your brain right now is that voting vaults is the way we accomplish this. It's a very flexible way to define voting power on your own terms. That could be NFT ownership.
00:02:37.114 - 00:03:13.142, Speaker B: It could be one token, one vote. If you're a fan of another Dow that does things similar to you, you could even adopt their token as your voting token. It's entirely up to you. So your creativities and imagination is kind of the limit there. And then the other big piece I want to just point out is the trustless execution. So if you're in a small group, maybe you have a Snapshot poll, which is like a sentiment on chain poll, but then you're trusting a multi SIG, like a three of five or a five of seven to actually implement and execute that. And that can be hard to do at scale.
00:03:13.142 - 00:03:57.026, Speaker B: So with Council, you'll be able to vote on proposals, but it's also the execution of those proposals that can happen trustlessly, so anyone can be the one to actually hit the button to execute that proposal. So that's kind of the two big differentiators I wanted to mention. Definitely come by our booth and nerd out with us about governance. We got a lot of really interesting thoughts about it. So the next thing I want to just point out real quick before I hand it back to Ryan to get back into the meat of the workshop here is we've got sort of two main components. We've got the core voting contract, and this is where your proposal is going to be created. This is where you're going to vote.
00:03:57.026 - 00:04:38.306, Speaker B: And then the other piece which I just mentioned is going to be the voting vaults. And simply put, these are just smart contracts that have a single query vote power method on it. And you can define the body of that method however you want. Again, it could be based on your ballots of tokens, it could be based on your NFT ownership, any way you want to structure that. So you would call query, vote power, pass it the address that you want to. How much voting power does this wallet have? Does this contract have? And you get back that number and that's the extent of it. Council has a bunch of other plug and play features that we invite you to read our docs.
00:04:38.306 - 00:05:18.450, Speaker B: And today we're going to go into that last one more specifically, which is the locking vault that kind of represents that one token, one vote concept. So we'll get into that today. And as Ryan mentioned, we do kind of consider the council protocol as sort of a full stack solution for governance. So that's not just the contracts, but a reference UI, a TypeScript SDK if you want to get scripty. And then we have this CLI that you'll see today where we can deploy contracts and even interact with them on the command line. So with that said, I'm going to hand it back to you, Ryan.
00:05:19.190 - 00:05:56.970, Speaker A: Thanks, Danny. So, yeah, let's get into demos. So the Council kit today is just a mono repo, basically. And if you haven't worked in a mono repo before, it's just a single repo that has multiple packages and apps within it. And so you can find that on our Github.org delvecouncilkits and then you can fork that like any other GitHub repo and start using any of those tools that we talked about, the CLI SDK and the UI, which you'll find in the app there. So I've got that cloned down already and what I'm going to do is the first thing I'm going to do is deploy some contracts.
00:05:56.970 - 00:06:34.970, Speaker A: We need a place to deploy that, so we need to spin up a localhost network so that we can just test around. If you want to spin up a node, we can do that with the CLI as well. And then within a monorepo you're going to start with Yarn Workspace for every command that you're going to call. So then at that point you're going to say the name of the package or app that you're going to call a script on. So in this case it's going to be at Council CLI. And then the CLI is meant to be really easy to use. You don't have to know the commands, the options or anything.
00:06:34.970 - 00:07:16.662, Speaker A: You can stop at any point in your commands and what it's going to do is fall back to this prompting interface. So if I just leave it at Council, which is like the entry point of the CLI, we'll see that we're going to get prompted and it's going to help us walk through the rest of this CLI. Yeah, definitely. How's that? Good. Okay, awesome. So now we've got our prompt UI, which is going to kind of walk us through the rest of the command that we want to run. So again, you don't have to know how to use this, just call Council and then walk through multiple choice here.
00:07:16.662 - 00:07:45.470, Speaker A: So I'm going to go ahead and start this local server. I'll accept the default port number. And there we go. Now we've got our node running and a bunch of accounts similar to Hard, Hat and Anvil. All of these accounts are going to be the same as the accounts that will get spit out in those networks as well. So if you have these added to your account or to your wallet, you can start using them right away. So now that we have that running, let's go ahead and start deploying.
00:07:45.470 - 00:08:38.820, Speaker A: So I'm going to say Yarn workspace at Council CLI and I'm going to stop again at the entry command of just Council. So I've got my prompt now and this time I'm going to go down to deploy. So with the CLI you can deploy any of the contracts within the Council protocol if you want to do like a piecemeal deployment or some kind of custom deployment. But then there's also two commands in here that are kind of like template deploys. So we have a default one which we won't go into today, but I encourage you to go and look into that if you're interested. But what we will be deploying is this simple deployment here. And so this is just going to be one core voting contract that Danny mentioned earlier.
00:08:38.820 - 00:09:03.276, Speaker A: One locking vaults so that I can deposit tokens and get voting power. And then also if I don't already have a treasury or a voting token deployed. It's going to deploy those for me as well. So I'm going to choose simple. I'm going to pick the host, the chain I want to deploy to, which is localhost. I'll accept the RPC URL, that's the default one and that's what my server is running on. And then I need a wallet key here.
00:09:03.276 - 00:09:34.442, Speaker A: So I'm going to grab one of the wallet keys that I had over here on these initial counts just to pay for this transaction. Awesome. So like I said, this is a new local network. There's no voting token deployed on this thing. So I'm just going to go ahead and hit blank here where it's asking for my voting token address. I'm just going to hit enter and at that point it's going to ask me for mock voting token name. So it's going to deploy something called a mock ERC 20.
00:09:34.442 - 00:10:15.580, Speaker A: It's just an ERC 20 with some extra methods that you can call to set balances of certain accounts or mint and anybody can call those, so it's really good for testing. So I'm going to accept the default mock voting token and MVT there for the symbol. And there we go. Now we got a mock ERC 20 that's been deployed and we have our address here. So the next thing that's going to get deployed is our core voting contract. And the first thing you have to decide for this is how much voting power is it going to take to meet Quorum for this core voting contract. This doesn't mean so for example, right here, the default, I've got a million, doesn't mean that there needs to be a million votes towards yes to make the proposal pass.
00:10:15.580 - 00:10:55.814, Speaker A: It just means that there has to be a million votes towards the proposal and then if the yeses have it, then the yeses win and the proposal can be executed. So I'm going to leave this as a default, as a million and then I need to choose how much voting power someone has to have to create a proposal. So this is really a mitigation for spam. You don't want a bunch of people just coming in and creating proposals if they're not engaged with your Dow. So setting this kind of minimum proposal power, just voting power makes it so these people have to be kind of engaged, right? They have to have some stake in the game. So I'm going to accept the default there for 25,000. And there we go.
00:10:55.814 - 00:11:20.970, Speaker A: We've deployed our core voting contract, so the next thing that we're about to deploy is our locking vault. This is the one that you put tokens in and it's going to give you voting power back. And the first parameter that you're going to have to choose is a stale block lag. I don't want to go too much into detail on this. It's a kind of complex parameter. Usually you can just accept the default. And the idea here is that it should span the entire length of your proposals.
00:11:20.970 - 00:11:48.018, Speaker A: You don't want this to be shorter than your proposals, but for local testnets probably just do something like 100. Keep it kind of low. There we go. So we got our locking vault deployed and we got the address, but then you'll also see that we deployed a locking vault. Simple proxy. So simple proxy. If you're not familiar with like Upgradable proxies, this is a pretty typical pattern for Upgradable contracts.
00:11:48.018 - 00:12:49.900, Speaker A: Basically we can use the proxy address as kind of a fixed address and we can change out the contract behind it, in this case the locking vault, without having to change what address is approved inside of our core voting contract. So now that that's deployed, the last thing I'm going to deploy here is the treasury. We're probably not going to be using the treasury today, but it's going to deploy it anyway just in case. Okay, so now I've deployed all my contracts and I'm just choosing a name for this deployment. This is arbitrary, it doesn't do anything to your deployment, but it's a name for a file that's going to spit out with all of your information about your deployment and then also a path for whether that's going to go perfect. So I've deployed all my contracts, I get all my addresses here and if I go inside of packages, the council CLI I can see at the path that I chose here deployments. I'll have a new JSON that's going to be all of the addresses and information about my deployment and this is what I can use as a reference moving forward.
00:12:49.900 - 00:13:47.674, Speaker A: So it's going to have my address, the name of the contract that got deployed, a hash and then the deployment arcs. Awesome. So now that we have this deployed, how are we going to interact with it? Let's get the UI deployed and so we can actually look at our deployment. So I've got my reference over here on the right and over here on the left I'm going to jump over to apps and this council UI here is the reference UI that we mentioned earlier. So inside of the council UI, if I go to source and config, this is basically where you're going to tell your UI what address all your contracts are deployed to. And then also there's some metadata that you can add in here that isn't available on chain and that'll help inform your users on their voting for their proposals. We have all of that information in the README.
00:13:47.674 - 00:14:13.796, Speaker A: You can definitely check that out. I won't go into all the fields that you can fill out in there, but we have references here for mainnet go early. And then of course, like I said, it's in the README. So today we're just going to be looking at localhost. So I'm going to copy some addresses over there. I need my core voting address right here. And then I just need my locking vault.
00:14:13.796 - 00:14:48.426, Speaker A: We can ignore the time lock for now. We didn't deploy one of those. And for the locking vault, again, remember, you want the proxy because that's the one that's going to be fixed. And then one more field I do want to talk about in here is this type. So this type tells the UI what to show for these vaults because you're going to have multiple vaults and they're all going to have different functionality, different ways of measuring voting power. So you might have to have different UIs for all of these vaults. And so we out of the box kind of support the vaults that we've already developed.
00:14:48.426 - 00:15:23.206, Speaker A: So if you're interested to see what those are, capital C, council Config has them listed down here. Which vaults have pre built UIs ready to go if you add in anything else. You can add in arbitrary string, but it's incumbent on you to build out the UI for that vault. It will have a fallback UI, by the way. It'll just show you what your voting power is, but you won't be able to actually do anything with it. Okay, so I've got my addresses in there. Once you've got your configs ready to go, you'll come over here to Council Config TS and map those to your chain IDs.
00:15:23.206 - 00:16:03.334, Speaker A: Today we're just going to be messing with localhost, so I've commented out mainnet and Gurley and now we're good to go. So from here I'm going to do yarn workspace again and this time we're going to call something on the council UI and we're just going to say dev to run the dev server. Awesome. So now we have this dev server running on port 3000. And there we go. So the UI is built to be redesigned basically for your brand. We didn't go crazy with the design.
00:16:03.334 - 00:16:30.506, Speaker A: We tried to keep it kind of functional and simple. And the idea here is that we used a UI library that's very themable. We use tailwind for anybody who's familiar with that. It's going to be really easy for you all to rebrand and turn into your own. But we do have a landing page that's kind of a placeholder if you want to build off of this. And then the rest of this is going to be a full blown governance app. So you can see all of the proposals, you can manage your voting power within the voting vaults.
00:16:30.506 - 00:17:10.238, Speaker A: So right now we just have the locking vault. You can see a list of all of the voters that have voting power in this. So if you're just curious to see how much voting power or how much someone's been delegated to, maybe you're looking for someone to delegate to, you can do that here. And then you can also see some details about yourself in your profile, which is also what you'll see if you click on one of the voters in the voters list so you can see some stats about them as well as their voting history, which is kind of fun to go back and see how people have been voting. So there's not a lot going on in this UI right now. So we talked about doing two things or three things. We've already deployed contracts and we've got a UI running on top of it.
00:17:10.238 - 00:17:48.110, Speaker A: That was pretty quick. So now let's go ahead and create a proposal. If you remember to create a proposal, there is a minimum voting power required. So let's go get some voting power real quick. And to do that, we're going to have to have some of those MVT tokens, those voting tokens that we deployed. So getting some of that, we can actually use the CLI to do that as well. So if I say Yarn workspace at council CLI and then I'm just going to stop here at the entry command of council again.
00:17:48.110 - 00:18:29.000, Speaker A: Awesome. So you can see we have this mock token down here. This is really just for testing purposes, but I can say mock token and I can say set balance and then enter in my mock voting token address over here. And then the account that I want to set the balance for, I'm going to set it for that first initial account that got funded with my local testnet just because I already have that one in my wallet. So I'm going to grab it up here. It's the same as the first hard hat wallet that comes out. So if you already have that, it's the same one.
00:18:29.000 - 00:19:13.100, Speaker A: So I'll put that in as the accounts and then for the balance, I'm going to give myself a million because I want to be a whale and I want to be able to meet Quorum on my own. 123456. And then I need a wallet key, of course, to pay for this. So I'll grab one of those RPC URL and there we go. If we go back to the UI, we should see that we have a bunch of voting token balance waiting to be deposited and turned into voting power. So I'm going to go ahead and approve. I'll use default just to approve as much as I can for now.
00:19:13.100 - 00:19:47.270, Speaker A: And then now that I've approved, let's go ahead and deposit that. There we go. You can see my balance went down to zero, but my voting power went up to a million. So I'm getting one for one on my tokens. And at this point I have enough voting power to meet the minimum voting power needed to create a proposal. So we'll go back to the CLI for that. I'm just running the same command again and then this time I'm going to go down to proposal.
00:19:47.270 - 00:20:24.420, Speaker A: So I'll enter there and I want to create. So for the voting contract address, this is the core voting contract that the proposal is going to be created inside of. So I'm going to grab the address of the one I just deployed, and then I need a voting vault. So when I create a proposal, I also get the first vote on that proposal. So this is the vaults that are going to be queried for voting power for that first vote. And then it's also going to be the vaults that it checks to make sure that I have that minimum voting power required. So for this, I'm going to throw in my locking vault proxy there.
00:20:24.420 - 00:20:47.846, Speaker A: All right. And so now I need a target address. This is the contract that's going to get called if this proposal gets executed. So let's pretend that our proposal, we felt like 25,000 was too high of a minimum amount to create a proposal. So let's say we wanted to set that to 10,000. We wanted to lower that. So that was a parameter on core voting.
00:20:47.846 - 00:21:34.958, Speaker A: So let's go ahead and target core voting. And then we need some call data for this. So this is encoded function and arguments for this proposal that's going to get sent to that target contract. Creating this call data can be complex sometimes, but we've got you back with the CLI again here. So if I go back to that entry command again, we can go to encode. And so inside of code, I have every single contract that exists within the protocol. And then inside of these, I have every method so that you can encode any call data for any contract inside of the protocol.
00:21:34.958 - 00:21:57.558, Speaker A: So we said we were going to do something with core voting, so let's go to core voting. And we said we wanted to change the minimum proposal power. So let's go ahead and choose that. What do we want our new proposal power? We said 10,000, so let's put that in two, three, and then decimal precision. I won't go too into detail of what this is. It's pretty common with all tokens. They all have a decimal precision.
00:21:57.558 - 00:22:31.820, Speaker A: The mock voting token has 18. So we'll accept that as a default and then we get the call data that we need. So now I can copy this, paste it over here as my call data for my proposal. And then, like I said, you get the first vote. So what's the initial ballot going to be? I'm going to say yes, this is my proposal. And then to pay for this, I'll choose again one of these private keys. Our PC URL looks good.
00:22:31.820 - 00:22:56.470, Speaker A: Last call block. So this is the block after which you can no longer execute this if it wasn't executed. So if it reaches this block, your proposal is a dud. You got to create a new proposal. So I'm just going to accept the defaults here. We've got a little error. Let me look.
00:22:56.470 - 00:23:48.290, Speaker A: We are? Yeah. But I'm happy to sit with you all after too uninitialized. Okay, so I believe this is a problem with the deployment. So we might have to back up and try this again real quick. I might have hit too many defaults, so let's do this really quickly. So I'm going to do it all real fast again. I'm just going to run Council, start that server.
00:23:48.290 - 00:24:43.350, Speaker A: So we've got four minutes. I think it's best probably, to go into Q A instead of trying to rush through this and then not leaving any Q A time. I'm happy to sit with anybody who runs into this issue and solve it with you. We weren't running into it when we were doing demo, so I'm sure I just did something on the fly that I wasn't supposed to. But that's how you're going to use the CLI to deploy these contracts to get all the information you need to configure the UI. And then you saw in there, in the prompting UI or the prompting interface, that you can create proposals, execute proposals, interact with the mock token, and encode any call data that you need for these proposals. So with that, we've got some awesome prizes that Gio's about to tell you about.
00:24:44.200 - 00:24:45.910, Speaker C: All right, let's hear about some.
00:24:49.520 - 00:24:50.172, Speaker A: Thanks.
00:24:50.306 - 00:25:29.560, Speaker C: Thanks, Ryan. That was fantastic. Okay, so our first boutique is going to be around creating a new body vault. So we just deployed an entire Dao, and it was based on the locking vault, which is basically one token, one vote for this first price. We really want to hear and to see what you think is important for a dow, what you think the voting power in the dow should be attributed to. So the best custom vault voting vault, and the best innovative way of defining voting power will go home with a $3,000 price. Thanks, Brand.
00:25:29.560 - 00:26:07.872, Speaker C: For a second body, we have the best UI integration. You just saw the whole UI that our team worked very hard on creating. But like with all software, there's always room for improvement and there's always new, exciting things to integrate into it. You could use some sort of universal messaging system, push Protocol Xmtp, or you could create some UI for users to be able to easily create proposals in the Web UI instead of using the CLI, so nontechnical users have a better handle of things. And for this one, we also have a $3,000 price. And last but not least, we have the best use of the SDK or CLI. As you saw, the CLI is very complete.
00:26:07.872 - 00:26:35.420, Speaker C: It's very thorough. But if there's any additional functionality you would like to see on it, or if there's any scripts that you could think of that would be very useful to have to add new functionality to the whole suite, then we'd like to see those, too. And there's a $1,500 price for that one. And with that, I'll shoot it back to Danny and Ryan. If you have any questions or you can find us in our booth right outside. I think it's right on the other side of the venue.
