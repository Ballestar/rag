00:00:01.290 - 00:00:23.854, Speaker A: Hey everybody, thanks for joining us again this afternoon. It's a lovely Monday and we're getting started here with Mario from Conjure Finance. I will let him take it away. We're going to be doing Q A afterwards. So if you want to post your questions in the chat, we can get to them. I will give them to him and he'll answer them all after the session. And if you can't, I would recommend linking up in discord in the Conjure channel.
00:00:23.854 - 00:00:29.240, Speaker A: Mario, thank you so much for joining us and the participants today. I'll let you take it from here.
00:00:30.410 - 00:01:30.090, Speaker B: So hello, thanks for having me. My name is Mario, I'm from Concert Finance and I will be with you today for the next 30 minutes. And I will present you what we are doing and how we are participating for you in the hackathon. So let me quickly share my screen. Okay, so in this session I will give you an overview, what Concert Finance is and especially what our Open Oracle framework is. Then I will show you how to create your own Oracle within just a few minutes, where you can use any API and then basically let it be on chain so that everybody can use it. And at the end they will show you all the prices which we have prepared for you, but we will show for the end of this hackathon.
00:01:30.090 - 00:02:26.246, Speaker B: So basically, what is Conscious finance and the open Oracle framework? So concure, let's basically let you create any synthetic asset you want. Basically 100% permissionless. For example, you can take any Oracle source you can find on chain and use them and combine them to make your own synthetic asset. A few different ways you can combine this, I will show you later in this presentation. Then you can take zero interest fee loans on the synthetic assets. So the fees are just in one time are the one time because for example, as a creator you can set a minting fee and the people who mint these assets are then paying these minting fees to you. So basically that's just the only time where you have to pay these fees.
00:02:26.246 - 00:03:12.774, Speaker B: And basically we're also compatible with all Oracle sources out there which are on chain. And actually we have deployments on basically every Ethereum testnet. Of course on Ethereum Mainnet we launched in end of May and also we are deployed on the Polygon network. And our Open Oracle framework, basically the Open Oracle framework lets users set up their own Oracles with just in a few minutes. You can bring any API data on chain. So, basically, any oracle feed? We also support multiple revenue models at the Oracle feed level. Then you can also make multiple feeds per Oracle.
00:03:12.774 - 00:04:19.022, Speaker B: So basically we just one transactions to pull them, update and create up to we tested it with up to 250 feeds that's possible in one transaction. So pretty cool. And then we have an extra repository ready for you to use basically where you can just fork it, clone it and run your own node and start signing your own Oracle data then right away. And also we have a TV contract ready which also lets you use the time weighted average prices for any Oracle which we are providing, or maybe you are also providing in the future for us and for your. So basically a little overview of the open Oracle framework. It's basically a ready to use code because we have already deployed a factory contract. I will show you later in detail how you can roll your own Oracle in just a few minutes.
00:04:19.022 - 00:05:10.586, Speaker B: It's just a simple step program, so don't worry about actual code. It's very easy to set up and you can really use any API out there. So for example, if you want to bring like commodity data on chain, which isn't actually there, you can just grab it and provide the API. So a get request and basically within a few steps you're ready to roll and bring your Oracle on chain. So basically I will just go over the actual steps which are required to basically create your own Oracle, start signing it and actually providing feeds online on chain. And then we will look into detail how this all works. Basically we will dive a bit more into the code and how to run the actual node.
00:05:10.586 - 00:05:53.186, Speaker B: So give you really a step by step experience here. So the first step is you can see we have actually the factory contract which just takes a few arguments. And if you provide this, you can actually, let's say mint a new Oracle contract just for you, just for your team. And I have linked here the polygon version and also the Ethereum version. Of course we also have winkyp versions for testnet available. And basically you just have to go over it and provide a few simple attributes. Since this is an Oracle, it's all about designers.
00:05:53.186 - 00:06:37.574, Speaker B: So for example, in this configuration, we're just doing a one of one configuration. That means we have one signer, the signer threshold is one. So basically every time this signer signs a transaction, the data feed is then provided on chain for the specific asset. That means for example, if you just blow it up and have for example free signers and a threshold of two, that means every time two out of the three people sign or the address is signed, then we have the data on chain. We also let users specify a payout address. The payout address is used. Basically I said before, we support different revenue streams.
00:06:37.574 - 00:07:36.254, Speaker B: If you want to provide Oracles, one thing was basically you can provide a cost per feet, you can provide subscription pass which actually suits as a subscription pass, but not for one feed, but for the whole Oracle. Also you can do donations every time so that you see if people actually like the soon like support it. And the payout address is like the address which can actually get the fees. You can also add this euro address here and this euro address will then do like an equal split over all designers. This example, it would be just one, the subscription pass price is just an argument to have the additional value set. So basically after the contract is minted, you can check the event and afterwards the new Open Oracle framework is basically set up for you and would be ready to go. I will show this later to you.
00:07:36.254 - 00:08:29.374, Speaker B: You can then go to the GitHub repository and check out our Open Oracle framework node code, which is basically a node, let's call it. So basically there are two scripts in it. One script is actually the script which actually generates the on chain data feeds. So basically the list which so your Oracle knows which actual data feeds can be signed. And the other one is basically running a signing mechanism in the background. So for you to become a signer. So we also provide a little Google spreadsheet which actually right as the time being is like the data feeds and where our script, our node script actually grabs the data from, we will take a look afterwards in it.
00:08:29.374 - 00:09:03.702, Speaker B: So basically the script just pulls the data from it. And that's where I said in the introduction. You can use any API, the APIs will also be found there and you can just forget or even make a new database call. But right at the moment it's just a Google spreadsheet where we're just using. So basically it would just look like this. For example, you have like the Oracle addresses here, the feed name, the feed IDs which are just ascending numericals. Then we have the API endpoint.
00:09:03.702 - 00:10:23.540, Speaker B: We'll show you later in detail the update frequency in milliseconds, sorry, this is in seconds the decimals which have to be parsed and the parser code. It's basically if you walk down the JSON object that you can see, for example, you get the raw data with this JSON representation of the API. And if you walk down to get the actual value which has to be parsed, and the description which then works basically for internal processes. So basically this JavaScript file setup feed JS basically sets up one transaction so that the Oracle then knows basically which feeds are actually in and which feeds have to be signed in the future. So it's basically just a one time setup transaction and this transaction can actually be sent by any signer in the Oracle. You can also send this transaction or run this crib once again if you have for example, new data fields updated or if anything has changed, it will just modify the values in there. So as I said, we'll check for the Google sheet and then we'll make direct.
00:10:23.540 - 00:11:45.114, Speaker B: So basically this final script, this of node JS script, which we also provide in our GitHub repository then goes in a loop over all the data feeds we have there for example, you can see it's, okay, we have the API and you have the value which actually has found as a value and these values are cached. And then after all values have been parsed, one transaction to the Oracle is sent by each signer of course to save gas. And yeah, then the feeds are actually signed. So basically that's just a little screenshot where you can see, okay, we have like I think in this case it was like a lot of transactions and it just gas optimized. In this case you can see we can as I said, I think the extreme case we tested is like with 170 or 200 feeds per with one transaction. So you can actually sign a lot of feeds. Yes, and at the end basically, now that the feeds are signed, they are basically on chain.
00:11:45.114 - 00:12:28.460, Speaker B: So basically there are values on chain for each of the data feeds. And then these feeds can actually be used by any contract in this screenshot. I just used one of the feeds we already have on Ethereum. This is actually this drop down symbolizes like our open Oracle framework. And this actually can be used at our contour platform, basically that you can select it as a drop down and make a student out of it, for example. So basically I will stop with the presentation here at this point. And now we go into the details so that you can see after all these slides how it actually works and how it actually looks like.
00:12:28.460 - 00:13:45.970, Speaker B: So at first, the first thing I said is like we have to go into this open Oracle factory contract. I'm here at the polygon network right now and you can see the code of course is all public in our GitHub repository. We'll point to this at the end of the presentation. Also documentation, everything available. So basically here you can see there have been a few open Oracle framework means. And if we just go directly on the contract here, for example, if you go on the right contract, this was like the field or the menu which I was showing before in the presentation where you can actually fill in the signers, sign a fresher payout address and subscription passed in. Yeah, so basically after this is filled and the new Oracle framework is basically minted, you can then switch over to the Oracle framework and you can see here it was just a test, but here you can see you have this submit feed function which was called, I actually was calling it right before the presentation.
00:13:45.970 - 00:14:48.490, Speaker B: But basically what it does is basically you can see that the feeds are actually signed. So basically this contract is basically with the configuration, one signer, one threshold. So whenever the signer actually signs, then the Oracle data feeds get pushed. So when I just go back, because I wanted to show you also how the Google Sheet looks where we have the data and everything available. So, for example, I think I showed you already this here from the presentation. But when we take a deeper look, for example at this euro USD here at this link basically, which is actually the get API. And if I open that I will get like a representation of this here where I have multiple forex data that I base is USD and then a lot of other currencies.
00:14:48.490 - 00:15:29.654, Speaker B: And what I meant with this parser here, basically I will have here the quote and then euro. So basically it means I have to go to the quote and then we have this nested JSON here and after we find the euro, we will find the value. So basically that's what the internal program then passes. So basically the of node basically passes this then. Yeah, let me quickly jump back here. We saw this. So for example, we also made differentials here.
00:15:29.654 - 00:16:46.586, Speaker B: For example, the node we are actually running on Ethereum has just these four data feeds because obviously it costs gas to sign the transaction. Of course we also have like a winky b version which is always up and running because you can also check them out polygon version. And right now for this workshop, I have this little workshop version. If we now just take a quick look, let me just stop here and share the new screen. Yeah, so basically I've just switched over to the code because I said you can just clone our open Oracle node GitHub and get the basic code which you can actually run and it's a ready to use code. The only thing you have to specify is here in this env template, you have to provide the private key of the signer address, the RPC node. I think I don't have the infuria key here, but you can also use Alchemy.
00:16:46.586 - 00:17:42.106, Speaker B: For example, if you want to here at the Oof address, you have to paste in the address of your newly minted open Oracle framework, the Sheet API. And the Sheet ID is basically the one I just showed you. If you actually clone the Google Sheet, these two values will also change, of course. But yeah, you just have to grab them out of the Google Sheet and the Sheet title is basically the lush of the sheet. For example, we had like Ethereum, Polygon Workshop and Rinkkeeper, the first one. So the first transaction I showed you was basically this setup feeds. And the setup feeds just a little script which basically I told you, just generates the new which basically registers basically the basic feeds which are provided by the Oracle.
00:17:42.106 - 00:18:15.194, Speaker B: Then, yeah, so this is just a one time transaction. And after this basically you can get this of node script. This script, if we actually run it live right now, for example, as you can see, it will go over all the data feeds we have in the workshop tab. Of course then it waits. For example, now it's configurated for the Polygon network. It will submit with 0.4 gray as the gas price.
00:18:15.194 - 00:18:52.406, Speaker B: Then you can see, okay, one confirmation message. Okay, we have like 7ft submitted at the timestamp and then we have the transaction haste. So basically this script would run periodically for every hour. If you want shorter time periods adapted in the code, it's no problem. So it's just the one reference object you have to change there. But basically now I will stop it. But if you run it in the background, it's just one time fork the code and then you can just run it and leave it there.
00:18:52.406 - 00:19:55.174, Speaker B: And as long as if you have funds, for example, Ethereum or Matic Token, it will just continue signing this script. Of course, if you want to run it in Ethereum network mainnet has like a few little tweaks built in so that you don't overshoot gas or if there is times with high gas that you don't pay crazy amounts of Ethereum, then no. So let me just simply switch the screen again. All right, so basically I told you our GitHub is public. You can check out our contract, you can check out the code, you can check out the tests, everything. It's contour fi. But we have the special repositories for the Open Oracle framework and also for Concho Finance.
00:19:55.174 - 00:20:53.018, Speaker B: But you will find them under Contour Fi. And also we have the documentation for the Open Oracle framework. It's also linked at the homepage, at the sidebar where you can also have a deep read how the subscription models work, for example donation, subscription, subscription pass, how the fundamental mentors work. And also you can check out our deployment here for Ethereum, Rinky B and Polygon Network. And also of course we have the same documentations for Contour. Our synthetic asset platform can also check out the deployments, little overview over the contracts and also of course we have the contracts linked in our GitHub repository. So just a little swipe over to Contour.
00:20:53.018 - 00:22:07.622, Speaker B: So basically what I just showed you the whole Oracle deployment here. For example, if I'm at Concur Finance and on the Create tab, you can basically let me just unlock the wallet, I'm on Matic network. Okay, yeah. So basically you can just create here any synthetic assets you want to. And we just made a little template here for Open Oracle framework where we provide our four feeds we currently signing and created for the Open Oracle framework. But for example, if you want to integrate your own feed, for example, you have created an Open Oracle framework and have created a few feeds you are always able to plug in via the custom option here for just have to paste in the Oracle framework address. The signature value would always be zero, in this case the call data and for example, like 1840 decimals and then you can use your own values which you actually signed or from any other open Oracle framework out there.
00:22:07.622 - 00:23:13.242, Speaker B: But not only open Oracle framework, but basically for any Oracle framework or Oracle out there. So you can really lose any data, no problem. So if I jump back here into the presentation, so basically the Open Oracle framework in Contour you have unlimited possibilities. So for example, you can create like fully on chain trading bots where you use indicators provided by open Oracle framework or this time weighted average price contract we are also providing to get new data feeds or for example, you bring new commodity prices online, but really many more. And yeah, we are also still discovering all the possibilities there are with this framework stuff. So basically now to our prices. We have 7500 USD worth in total prices and it splits down to 1 second.
00:23:13.242 - 00:24:14.190, Speaker B: Just the pool price is denominated with $5,000. Then we have the most interesting use cases where the first place will get 1000 US dollar, the second place 500, and the third place will go with 200 US dollar for the most interesting Oracle feed actually, which you can provide. We also have a price for 200 US dollar here. And for the best synthetic assets created on our Contour platform, we will give you 600 US dollar in price. So basically I'm now through the presentation and through the workshop and I will now going over to your questions. Let me just check. So maybe open the chat.
00:24:14.190 - 00:24:27.660, Speaker B: So basically are there any questions? Because I don't see them here in the Zoom chat.
00:24:36.730 - 00:24:51.740, Speaker A: Looks like we're pretty good on questions. Kevin says he's still getting his head around what you just presented. I think there will be questions in the future, a lot of but basically.
00:24:52.190 - 00:25:05.680, Speaker B: If there are no questions right now, it's absolutely no problem. We are here for you in our Discord channel. Can also shoot us messages anytime, so please just ask us the question afterwards if you have them.
00:25:06.130 - 00:25:21.060, Speaker A: Yeah, we know the best questions come right after the so, you know, that's why we keep the discord channels open for everyone. Well, thank you Mario for presenting. This was really fun. I'm really glad that we were able to have you today. And thank you to all of our participants for being here today and spending your time with us.
00:25:22.230 - 00:25:23.570, Speaker B: Thanks for having me.
00:25:23.720 - 00:25:34.920, Speaker A: Of course we will be closing the session here. Stay tuned, we have another one coming right up at three. So there will be more things to wrap your head around very shortly. Are.
