00:00:06.650 - 00:00:38.570, Speaker A: So today we're going to explain what Uma is, what optimistic Oracles are. And for the hackers in the crowd, we're going to give some ideas for some projects you could build with optimistic Oracles. I think we have a pretty decent quick hack idea, but also just give some examples of how Uma's in the wild today to help you guys out no matter how far you are in the process. And I'm Nick. I'm an engineer. And this is Sean, product manager. And yeah, let's.
00:00:41.150 - 00:01:40.410, Speaker B: So just starting with the basics. Basically, uma is an optimistic oracle. I think to talk about what an optimistic Oracle is, we need to first talk about the fundamentals. What is an oracle? An Oracle is a system that is built to trustlessly and reliably bring data on chain so it can be used within smart contracts. So if you have a smart contract for like a derivative on the price of, say, gold, you need to know what the dollar value of gold is and you need a way to actually get that data on chain because smart contracts have no notion of off chain data. So in DeFi, what do people think about when they think about Oracles? They typically think about things that we call Price feed Oracles. So an example of a price feud Oracle would be something like chainlink.
00:01:40.410 - 00:02:52.558, Speaker B: What are price feed Oracles good for? Basically, price feed Oracles have a trusted set of actors that push prices frequently and are good for deterministic types of data. So they're used a lot in DeFi for things like securing lending protocols and running like liquidation engines there. And they're very good for times when you need data quickly and you care less about flexibility of the types of data you can get access to, or you care less about a concept of recourse and you also don't need any element of human judgment. So things like crypto prices are probably the best example. What is an optimistic oracle? So Optimistic Oracles are a different take on how you approach this Oracle problem. Optimistic Oracles, we say enforce correctness after a dispute. So what are they good for? They're good for basically bringing any type of data that is generally verifiable on chain.
00:02:52.558 - 00:04:09.334, Speaker B: So you can ask a much broader set of questions of the Oracle. So rather than only being able to get things like crypto prices, you can ask it like very general questions and we'll go into why that is and how the Oracle actually works. But it's good for things like not only can you get access to the price of ETH, but you can get access to basically the answer to any sort of yes or no question that you can ask, like who won the Lakers game last night? Or who won this political election or what happened on this other blockchain network. Those are all things that optimistic Oracles can serve very easily. This is a very complicated diagram, so we'll share slides afterwards. And I would recommend going through it then, but just at a very high level. What does the data request process look like? Basically with price Feed Oracles, the way they work is that this permission set of actors will come to consensus on prices beforehand and push these prices on chain very frequently with our optimistic Oracle.
00:04:09.334 - 00:05:01.662, Speaker B: Basically somebody needs to say, hey, I need this piece of data. So they need to submit a request. Once that happens, anybody so a completely permissionless set of people or not a set, but anybody can come in and say you're asking for the outcome of the sports game last night, or you're asking for the price of ETH. And I can submit a bonded proposal saying I know the answer to that question and it's this. That answer then sits through this liveness period or verification period where anybody else can view that and decide if they agree or disagree with it. If everybody agrees and nobody disputes what the initial proposal is, then this is accepted as truth. And this is where the word optimistic comes from.
00:05:01.662 - 00:05:38.360, Speaker B: So it's kind of similar to optimistic roll up fraud proofs, where there's a verification period where things are verified. If nobody disputes it, then it's accepted as truth. And that's the data point that's used. If somebody disputes it, then it basically gets escalated to a larger court system or dispute arbitration system. Again, there's a lot here, so I would go through the diagram, but that's it at a high level. And Nick's going to go through a couple demos of things you can build.
00:05:40.350 - 00:06:40.202, Speaker A: Cool. So this next section is mostly for builders, developers, and I'm just going to walk through some very simple toy examples of contracts that use the optimistic Oracle. I'm going to explain how they are very simple versions of real apps that are out in the wild right now using the uma, optimistic Oracle. And then we'll walk through some of those real life applications at the end of this. So the GitHub repo, the quickstart repo that we just put together is live at the URL there. We use TypeScript, hard Hat, Ethers, JS typechain, pretty standard stuff in the industry today, but it could be I guess it's just a good place to go if you want to just get started quickly with the latest of the tools that real solidity developers use today. So I'm going to explain a really simple contract first called the deposit box.
00:06:40.202 - 00:07:03.650, Speaker A: I'm going to extend that with what I think could be a potentially useful application in the real world, but maybe not. But it does actually use the optimistic price request very well. And then the third, I'm going to explain how you could build a prediction market very simply. Well, actually we built it. I'm just going to explain how it works. So the user story is there's a deposit box. Let's treat it as a black box.
00:07:03.650 - 00:07:47.630, Speaker A: That's why it's black. A user deposits ten ERC 20s into the box, and the idea is to keep it safe there, safe from their own hands in case they trade it. So call it, let's say 30 days later, the user wants to withdraw money from the deposit box to pay for cookies or coffee, and the user wants to withdraw $10 worth of tokens. Now, recall, when the user first put in tokens, they put in ten tokens. They had no idea what amount of dollars they were put into the box. So 30 days later, the user wants to withdraw $10 worth of ERC 20s. How does the black box know what one dollars worth of tokens is? Well, the deposit box can make a price request to the Uma Oracle.
00:07:47.630 - 00:08:46.562, Speaker A: This is a very contrived example because you could have asked this to a price feed Oracle. As Sean explained earlier, for most tokens, it's pretty easy to understand what $1 worth of that tokens are. But you could ask this to the uma, price Oracle, and you'll ask, hey, what is one dollars worth of tokens today? And the Uma Oracle is going to respond to it. So I'll give a really quick segue on how does the Oracle know how to answer the question. So the actual price request that the deposit box is making to the Oracle is a question, what is $1 worth of tokens today? Voters who are off chain actors need to look at some sort of legal contract or some sort of rules off chain or methodology to understand how to respond to this question. So a real life example that we use to secure contracts that store like the Comp Token comp is the off chain set of rules. Might be.
00:08:46.562 - 00:09:26.210, Speaker A: Look at these three exchanges and take the median of their prices at a current time, and that is the price you should return. So, Uma Oracles are secured by these off chain contracts with rules that voters can easily follow. And the onus is on the writer of the contract to define these rules correctly. And then voters should be completely neutral about how they respond to them. So in this example case, the deposit box has asked the Uma Oracle, what is $1 worth of tokens today? The Uma Oracle says one token is worth $5, so the user will receive $2 back. Let's extend this. That deposit box is not super useful.
00:09:26.210 - 00:10:01.820, Speaker A: You could have used a different Oracle for that. Imagine I deposited ten ETH into a lockbox. This is something I've been thinking about and actually just was talking about today with some coworkers. Say my daughter was one years old, and I wanted to give her ten ETH, but I didn't want her to be able to withdraw it until she was older and not just based on her age. I didn't want her to withdraw it when she was 20. I wanted to sort of incentivize her. So I set a rule that she could withdraw the money if she graduated college.
00:10:01.820 - 00:10:47.420, Speaker A: This is something that is easily verifiable by an off chain set of rules, but it's not necessarily easy to define on chain. There's no sort of bot that's tracking my daughter's life and responding to this automatically. So, say, for the next 20 years, she tries every day to trick me and asks she requests to withdraw ten ETH every single day. I'm going to look at this set of contracts, and I'm going to answer no. If she ever wants to dispute me, she can dispute me, and she can raise this question to the DVM, and then, uma, voters can then answer this question. Hey, the box might ask, uma, has Nick's daughter graduated college yet? Someone might propose, no, she's four years old. She has not graduated college yet.
00:10:47.420 - 00:12:01.778, Speaker A: So the example, UMIP, identifier for this might be a yes or no question. Has my daughter graduated college yet? Uma, voters, remember, are incredibly neutral, and they're going to vote according to the rule set that's described. So this, UMIP, or this methodology might be vote yes if there is proof that her name has appeared on the graduation list for some certified college. This is obviously a very hazy set of rules, but it's just a toy example here, and vote no otherwise, and the contract could take the result of that vote and unlock her assets. Is this a useful product? Maybe not, but I think it would. One thing that actually it could be useful for is if you, in the future, say, you lose communication with your daughter, uma, voters will still continue to vote on this question, has she graduated college yet? According to that set of rules? So maybe it has some use case, but it's just a little bit of an example of a deposit box that could not be used on a different price feed. Oracle okay, so I'll explain the prediction market.
00:12:01.778 - 00:13:21.318, Speaker A: This is a very simple example of how a prediction market today, called Polymarket is built on the, uma, optimistic Oracle, and this is how it's sort of built today. So say users want to bet on the question, who's going to win the Kentucky Derby? So you, as the user, you might put ten USDC on the horse Seahorse to win the Kentucky Derby. You're going to deposit this into a contract written by the prediction market developers, and the prediction market is going to immediately ask the, uma, oracle, did Seahorse win the Kentucky Derby? Say the user originally deposited this ten days before the Kentucky Derby started. So there's actually no answer yet. The contract needs to be written in such a way that the prediction market contract needs to be written in such a way that it will throw out answers where voters answer to the question that the question hasn't resolved yet. There's no way to know if Seahorse won the Kentucky Derby if the Kentucky Derby hasn't started yet, so the Oracle is going to basically just give a standby signal to the contract. And the contract is going to wait around until the Kentucky Derby actually happens and then someone will be able to propose a price.
00:13:21.318 - 00:14:00.806, Speaker A: The proposer wants to do this because they might earn like $50 or just some simple reward for responding to the question. Assuming no one challenges it, the contract can then pay out users. And so that's a very simple example of how Polymarket works today. And imagine they're running this on many, many different markets that are all asking questions to the optimistic Oracle, maybe ten a day. And individual people around the world are responding to this for a little bit of a reward. And very few of these actually get challenged because they're relatively easy to verify. They're pretty hard to verify in a price feed Oracle.
00:14:00.806 - 00:14:28.500, Speaker A: It's not easy to answer questions like presidential elections or whether insurance contracts, smart contracts, got hacked. So today we'll just walk through some of the products out there that actually do use the Oracle, and we can reduce their use case to the questions that they ask. Do you want to give this cool?
00:14:29.430 - 00:15:29.640, Speaker B: Yeah. So these are some examples of protocols that use Uma today. And like Nick said, the questions they ask. So Polymarket is a prediction markets platform. And they ask questions like, did the Trailblazers win their basketball game last night? So you can create prediction markets on Uma based on very arbitrary, flexible types of real world data. The second one, the purple one is Sherlock, which is decentralized insurance protocol. And they ask uma, basically, was this protocol hacked? And should my DeFi insurance contract, should it cover this insurance claim? So another good use case know, enforcing legal contracts where there's some degree of ambiguity and you need some sort of human element to resolve these things.
00:15:29.640 - 00:17:12.742, Speaker B: The third is across, which is a cross chain asset bridge. And across uses Uma's Oracle to ask for information about transactions that have happened on other networks. So if you're trying to bridge USDC from say, optimism to mainnet, and basically across is asking questions about certain USDC deposits and if relayers are basically forwarding funds, yeah, it's pretty complicated, but was this relay correct? So was this transaction correct and were the fees that were taken out of it correct? The fourth one is basically asking for the price of a specific DeFi token. So here it's asking for the price of the Fox token and can be used in things such as structured products or bespoke financial contracts. The last one is asking, what was Boba's TVL in February of 2022? So this is used within these things that we call KPI options, which are essentially trying to tokenize arbitrary KPIs or metrics around certain protocols. So here you can create like a financial contract where the payout is actually determined by Boba's TVL in February of 2022. So this is really a reiteration of that with what we're actually calling the products.
00:17:12.742 - 00:18:12.074, Speaker B: So prediction markets are good use case bribes. Optimistic governance is one thing we didn't talk about, but basically we have a set of contracts where you could ask the Oracle, does this arbitrary transaction follow a set of off chain rules for a Dao? And if it does, it allows it to be executed. And then KPI options we briefly covered. And then synthetic assets is like a pretty simple use case, but basically tokenizing derivatives based off the price of any real world thing. And then the fun stuff. So, prizes we're giving out 10,000 total dollars, $5,000 1st place, 3000 a second, and 2000 a third. We have a link where we give a more in depth explanation around the criteria associated with it.
00:18:12.074 - 00:18:39.380, Speaker B: But to really distill it simply, it's basically the best use case that integrates Uma's optimistic Oracle. We also are hiring extensively. We have a referral program. So right now we're hiring for a product lead, front end engineer, smart contract engineer. So if you're looking for jobs and want to apply, please do. We also have a referral program. So if you have friends that are interested, you can make money off of that.
00:18:39.380 - 00:19:20.000, Speaker B: If you follow that QR code, it links you to our referral program details and yeah, thank you. Here we have some resources. There's actually should be more than that, but we'll publish these slides afterwards. That link to our docs, the Quick Start tutorial that Nick went over. Within the docs are tutorials that go through that Quick Start tutorial and the example contracts. And then we're all here for the next few days enjoying this experience with you guys. Thank you.
00:19:24.370 - 00:20:11.130, Speaker A: Are there any questions? Yes. So the question was not just that anyone can propose an answer to a question. Actually, anyone can propose an answer to a question, but you just have to stake a bond. The bond keeps you honest and disincentivizes you from just spamming answers. So you'd post a bond that's usually much larger than the reward, but anyone can propose an answer. Anyone can also propose a bond and challenge you. And if someone challenges you, the answer goes to a vote to the Uma Oracle, at which point there's no further escalation and the Uma Oracle will just resolve the question.
00:20:11.130 - 00:21:03.720, Speaker A: Yep. So the voters, which are Uma holders, are paid in Uma to respond to votes, and they're paid if they vote with the correct answer. So think about participating. Voters who vote correctly earn a relative, they accrue a share of the network and it's sort of taken out of the it's diluted from the people who don't vote correctly or don't participate. Cool. Thank you.
