00:00:06.650 - 00:01:03.454, Speaker A: Cool. So my name is Luca, I am deverell at Tenderly Company and today we are going to talk about how to improve user experience of your DApps using some of our tools. And since we have a bounty for this hackathon, we are going to talk about couple of tools that can be useful for to build better products in your projects. And obviously if you have any questions, reach out to us in the booth. So the goal of today's session is for you to understand better what tenDELI is if you haven't used it before. We are going to start by introducing the tenderly as a whole and then some of our pieces of products that can be beneficial for you. And finally we are going to switch the gears and close the whole session by introducing the bounty and see how are we going to judge it, what is the pricing pool and so on.
00:01:03.454 - 00:01:51.358, Speaker A: And to achieve that goal, we have five parts of the presentation. We are going to start by introducing the Tenderly, switching to something we call web free gateway which is our node as a service. And then talking about simulations and web free actions and then bounty obviously. Cool. So Tenderly in general is a development platform to help you guys build better products from basically end to end. We support the whole development lifecycle from ideation stage through the development to deployment infrastructure. And in our offering we have three parts like tools that are only for developing, then for observability and then infrastructure which we are going to focus today.
00:01:51.358 - 00:03:03.990, Speaker A: From the development side we have our debugger which is visual debugger to allow you to debug line by line and call by call of your contracts and you can see and work with your teammates to detect what is actually wrong with your transactions. On that note, we have something called simulations that will allow you to simulate those transactions and see how it would react on the chain if you changed and make those tweaks to your code and into transactions like arguments and stuff like that for observability. We won't spend that much time today here but basically analytics alerts and stuff that you're probably used to it on other places as well. And then infrastructure 3.0 as we call it, we have many of the things there, some of them being web reactions that are pretty unique and simulation APIs, forks and node as a service which is web free gateway in our case. Cool. So before we jump to more specific things, this is where yeah it is, I don't know, it is like this part of cable.
00:03:03.990 - 00:03:42.398, Speaker A: Sorry for that. I don't know. We actually changed the whole adapter and it's still blinking. So this is basically a representation where the tenderly lies into your okay, you will lose it's. Fine. So this is the representation of where tenderly lies in your development process. So you have all the EVM networks then we have tenderly on the top traditional ways of developing your smart contract and on top of that obviously your DApps.
00:03:42.398 - 00:04:40.118, Speaker A: So basically you can rely on tenderly to utilize normal tools as you would to build basically all products. Two days ago we released Web Free Gateways and Web Free Gateways is our version of Node as a service offering where it's basically tuned to every single part of our platform starting from alerting, debugger our web reactions and transaction simulations. So you can basically build the full fledged application on top of that. And we compared to other offerings based on benchmark we have eight times faster performance and it is 100% data consistency across the board and it's lower cost. So we have start basically $0. So it's a free tier and for 1st 1000 registered users for life it will be $50 per month. That's it.
00:04:40.118 - 00:05:34.614, Speaker A: And how we reached this goal well of eight times faster accessing the archive data is we have availability across the board. So based where you're sending a request we are going to reach to that node, one being in the US. So if you're developing today, that's where you're going to get the data from and one in Europe. And in a couple of weeks we are going to release two more in us as well and one more in Asia. So wherever you are in the world you will basically have consistent speed across the board for reaching the data and that's basically it. One more additional thing before we switch to simulations. If you just choose to apply this to your project, you're going to get a special merge from us which is vacuum cleaner for your keyboards and stuff.
00:05:34.614 - 00:06:22.710, Speaker A: So it's just a fun, it's nothing special. Cool. So that's basically the node as a service you can interact with it as you would with any other JSON RPC format. So you can choose all the other things but let's talk about simulations. So how many of you have you used tenderly so far? Okay, did you use simulations? Nice. So this is basically one of the most used parts of our product and it allows you to run simulations on either transactions that never happened. So you're just preventing and trying to see what would happen if you push to the network or you want to debug it in the past and see how it would change based on some parameter changes.
00:06:22.710 - 00:07:31.920, Speaker A: Like here you can see for example, you can choose the address, you can choose the contract itself, the network, the input data and you can run the simulation obviously without reaching to the network and spending the real resources. And it's tightly integrated to your product because it can be exposed through API and CLI. So basically you can integrate to your product and build one. For example, demo account for your app and allow users to use your app without actually spending any money. And all of that can be integrated to your project. So some of the ways that we saw using simulations helped our users being one improving UX and one is allowing users to run simulations on their own without spending the money. For example, exchanges so you can run the transaction exchanging from one to another and seeing like having a proof that it will work, how much resources it will check and obviously Gas estimation will be much more accurate with that as well.
00:07:31.920 - 00:08:25.230, Speaker A: So through integrating simulation API and that's more on technical side for you to consider if you're going to tune into this feature for tenderly and obviously this will help your users to be more precise with their actions. Remove the anxiety part. So everybody of potentially everybody sitting here, including myself have anxiety when you send the transaction, what will happen? And with these simulations you are not removing everything but you're just decreasing it a bit. So you're having more confidence in your users and obviously by doing that you're having much better user experience. The other one is also like we have forks that is integrated with a simulation. So one simulation will simulate a transaction. But what if you have let's say ten transactions that are relying on one another.
00:08:25.230 - 00:09:44.120, Speaker A: So for that you can spin up the fork for any network and each transaction will change the state of the fork as it would for the network in general. So you can basically run transactions one on another and get information from there. And for that basically integration testing can be done with that for you to make sure that all the pieces of your app work correctly or you can just test the transaction itself. For that we have like when you spin up the fork you get a traditional RPC URL, put it in your project and you basically interact it as you would with any other network. And obviously this you can see it makes sense. Like you're just testing your network and it produces much better and sustainable products from your end to help you better understand how it would help for your hackathon projects like you can create onboarding experience, for example, for your users like some of our clients and I will say their names in the next slide. Uses our simulations at forks to create an onboarding experience and make sure that every single part of your product is working as should.
00:09:44.120 - 00:10:28.806, Speaker A: There are a couple of things that running simulations will help you prevent from making a mistake or getting more accurate information from the network and so on. And the real cases are here. So these free clients of ours are using simulations APIs and forks in their products. Like for example, Instadep has built a full demo account. So whenever before sending and creating a demo account on Instadap and spending the money, I don't know how much it is right now, but I think it's $90. And if you're unsure if you want to spend those $90. You can spin up the demo account and basically get information from it, interact with the whole infrastructure of that.
00:10:28.806 - 00:11:53.982, Speaker A: Safe, for example, uses for two different reasons. One for their internal engineers and obviously for testing purposes and checking if their solutions to the bugs are actually worth it. So what happens is basically you have an exploit in the system, you can run the fork moments before the exploit and you can push the change of your contract just before that happened and you can see if that exploit would have happened if you had that version of the contract. So you can do that with the forks and simulations and obviously Safe allow their users to test their simulations before executing their node chain yield uses that for testing purposes and Dry runs of transactions. So now that, do you have any questions before we move to the web reactions? Okay, cool. So Web Reactions is something that will be actually good friend of yours in the hackathon today and tomorrow and it is kind of a serverless part of your ecosystem. So you can build a back end for your apps and those are small pieces of code that are going to be executed once some criterion is met like either on chain or off chain.
00:11:53.982 - 00:13:12.122, Speaker A: And you can remove a lot of infrastructural part by using web free gateway sorry, web free actions. And that will help you actually to create much better and robust systems in that way. So here you can define a trigger, we're going to speak about triggers in a second and you can define your custom code and that's it. So you can basically do that and why? Well, obviously it makes your apps more robust, more agile in a sense and it creates a good user experience by for example, notifying them or using certain parts of the app that can be automated. So now that you have just a high level of potentially understanding of what web free actions are, let's dig deeper and see from technical standpoint what goes into building one web reaction. So it has two building blocks, one being action function. So it's a piece of code that could be either in a JavaScript or TypeScript format and you would write as any action, any function and it has some nuances that you need to follow to be classified as an action function.
00:13:12.122 - 00:14:11.434, Speaker A: Like first off, it needs to be exported, it has some name like it's your choice, it's action function type and it should be asynchronous it obviously has your logic and that's basically it. Except for inputs, it always has context and event. So let's bring that up and see what those two are. So event is something that you are going to wait for to happen so that this function is going to be executed. And for context it allows you to access two different things for repri actions. One being secrets. So if you for example want to call certain API when something happens on chain you can do that but you need for example an API key for that and instead of using env you can have secrets inside of tenderly and you can access all of that data through context and other thing is storage.
00:14:11.434 - 00:15:18.338, Speaker A: So sometimes between execution of your function you need to store some bits of information so you are like having that and not repeating something. For example here in this picture below is a piece of storage which stores information of tic TAC toe. So for example you want to have information of the state of board like you can't play the same move twice so for that you have this information which can be either extracted to your front end or basically interacted directly with your smart contract and not implementing with making a mistake. And that brings us to the second building block and the last of web reaction which is the trigger. So trigger in my opinion is one of the most interesting part here. So that's what needs to happen for that piece of code to be executed. So here are four main types block being the simplest one saying okay, when the block is mined on the network of your choice, let's execute this piece of code.
00:15:18.338 - 00:16:12.466, Speaker A: So let's say you can monitor the main net from our end and say every 10th block that goes to the main net let's inform our users on the discord that has happened that's simply use case but you can do it the periodic one if you use cronja, that's it. So basically you can set up some period of time and say every ten minutes, every 10 seconds, every tens, whatever, let's execute this piece of code and that's periodic. The webhook is when a certain webhook is sent, like when the HTP request is sent. Let's execute additional functionality of that which you can do here. And you can see that periodica webhook are not on chain base. So it can be either chain or off chain base transaction. In my opinion, whenever I demo the real use case of web reactions, that's what I use.
00:16:12.466 - 00:17:11.720, Speaker A: And that's basically tuning directly to the emitted events from your contract. So you can say okay, when this event emitted from this address you can go and specify as much information as you want to this trigger setup and when that happens, let's execute some piece of code. So we are constantly monitoring all the network that we support and you can basically do that. And here is just a simple configuration, you don't have to remember this, all of this is in documentation. So we have pretty standardized documentation that will help you build all of the triggers with as much complexity as you need for your projects and basically you have completely freedom to customize this as much as possible. And one thing is the web reactions are completely free. So either in a free tier of account you will get to play a lot with this.
00:17:11.720 - 00:18:08.410, Speaker A: So some of ideas that will help you integrate web reactions that we saw our users are using. So first off you can react on some chain events. So basically when something happened, as I mentioned before, you can execute additional code, inform the users, run additional functionality and so on. Then you can automate the discord notifications that can be tightly directed with something that has happened either on chain or off chain. You can create a Dow that increases Dow participation by notifying constantly users to vote for example that can happen, you can reduce gas spending. So basically you can write a rule that execute pieces of code or send a transaction when the gas is lowest. You can set basically the check how much gas is currently costing and when the trigger is met you can basically run the transaction.
00:18:08.410 - 00:19:06.454, Speaker A: You can build multipurpose bots, Twitter, whatever you like, you can use that and build bots around that. You can even send a transaction from web reaction. I don't recommend it because of the security, don't do that but you can. Then you can create alerting system so it's the most common case. So you can create like a front end and send alerting systems to particular users, group of users or whatever. You can have a completely freedom of accessing your data, sending to the transactions and so on and obviously it's your hackathon assistant so you can automate and automate a lot of things from the back end side by using this. And now that we went through more of a technical side, let's talk about our bounty.
00:19:06.454 - 00:20:02.400, Speaker A: So the goal of the bounty is not to use tenderly a lot you should if you want to participate but it's about making your UX better for your users. We won't judge on how much you use tenderly but how much that piece of tenderly will increment user experience. The total pool is $5,000 and the expectation is basically that we will judge on what is the innovative way approach of applying either web reactions, gateways or simulations. So you can choose to apply all of free, you can choose to apply only one. So it's not to be judged on how much you apply, but how you apply it. And the complexity is something that we just put it there, but obviously it can be as simple as sending a notification. But if it's a crucial part of your application, that's something.
00:20:02.400 - 00:21:01.336, Speaker A: And the prices is separated in this way. And obviously, don't forget the vacuum cleaner. So that's something that needs to be remembered. Scanning this QR code you will get two months free dev account. So no matter if you use standardly or not here you go. It would be a good joke to automatically add me on the discord, like if it scanned, it obviously if you didn't scan it now or you have friends that needs Dev account from your teams, you know where to find us. And we will give you the access to those keys so you don't have to be limited to this slide only.
00:21:01.336 - 00:21:25.750, Speaker A: And the other thing is, you will find us every three days here. So if you need help from us, please reach out and we will help you with that. Also, we have on call team at Belgrade, so if you are working overnight, there is other time zone that will be awake. So, hey, just send a message on our discord and we will be there to help you. Thank you.
