00:00:19.570 - 00:00:48.650, Speaker A: Okay, cool. I'm just going to start this guy. So I don't need a microphone, do I? Do you work? No, that's here. Okay, guys, I'm just going to start that. So hi, guys. My name is Pacha McCorry. Guys.
00:00:48.650 - 00:01:25.592, Speaker A: And today what I'm going to present about is more an introduction to cryptocurrency. Obviously, I've been doing research in this five years bitcoin. I could have come here, presented my research. What I realized is that when you go through the talk, everyone's going to talk about what I talk about. Anyway, what I noticed when I was looking at the Twitter feed, I guess, Josh, 44% of people here are new to Ethereum. What would be really nice is one, give everyone a fresh understanding how this works, and two of you already know how cryptocurrencies work. Maybe I can remove some misconceptions.
00:01:25.592 - 00:01:53.890, Speaker A: So raise your hand if you're deep in this. Okay, cool. You guys are new. Oh, yeah, exactly. They saw me. Okay, good. So I'm going to highlight first is back in 2013, when I started looking at bitcoin, it was $20 in this weird Internet.
00:01:53.890 - 00:02:17.486, Speaker A: So who was in this space? By 2013, it was doing work. What did you guys think? Did you think it was a weird Internet money? Thought it was a scam. There you go, a scab. Everyone thought it was a scab. Dark money for the Silk Road. When I started my PhD, they're like potty. If you look at bitcoin, you're wasting time.
00:02:17.486 - 00:02:42.450, Speaker A: Not going to get a dupe. But I didn't care, to be honest. I just wanted to do bitcoin. So when I got into it, I realized actually it's better and that there's so many cool. I want to look at it from several different perspectives. To begin with, why is cryptocurrencies interesting from a data structure? Okay, let's consider this really naive example. We have Bob.
00:02:42.450 - 00:03:16.580, Speaker A: Bob's a baby, and Bob has a database. Alice comes along and says, bob, I want to audit your database. I want to verify that everything's correct. How can Alice do that? How can Bob actually prove that his database is actually correct? All the records are what they should. What he could do is give Alice the entire database, grant access, and Alice can start looking at the data. That doesn't prove the database is correct. This gives Alice access to the information.
00:03:16.580 - 00:03:55.738, Speaker A: What we could do is, is there a data structure or a protocol that would allow Alice to recompute the entire database herself. Then she can confirm that Bob's database is actually you know, this is actually why the blockchain itself is useful. A blockchain is just a cryptographic dollar log. It doesn't do anything else. That's why people are really excited about this from a synchronization. Okay, so if Bob is updating his database as a naive example, he'll update it every ten minutes. When he does that, he'll create a new block.
00:03:55.738 - 00:04:32.010, Speaker A: Creates a new block. And this now can act as a cryptographic log. This is exactly how Bob computed his database over time. What Bob can do is just send over his blockchain to Alice. Alice can recompute the entire database herself using this blockchain final block. And now he's recreated the exact same database that Bob has. Now, as you can just compare the two databases and confirm yep, that's exactly what Bob's database looks like.
00:04:32.010 - 00:05:29.674, Speaker A: So now I understand exactly why his database is in. That now the big issue comes is that how do we know that Alice is looking at the blockchain and Bob just didn't make it up in this? Maybe Bob just computed this random blockchain and give it to Alice just so Alice would be confident that the database is in. So this is where distributed system global consensus protocols. How can we convince everyone in the world that this is the one true blockchain? The question is, what is a consensus? Basically, there's a set of computers that want to reach agreement about a single decision or a data item. You can imagine five, six computers in some warehouse. And now the classical problem. Did Alice pay Bob five coins or did Alice pay car align five coins? They run this through some consensus protocol.
00:05:29.674 - 00:06:09.900, Speaker A: They should come up with the decision that Alice paid Bob five coins. Pretty straightforward. But traditionally, consensus protocols have a trade off between safety and liveness. This is sort of the fight to get a consensus. Safety tends to mean everyone should agree to a decision and then never forget about it or change their mind. Once we've decided Bob is our Alice's head Bob, we should never change our mind about that decision. Liveness could mean, or pretty much means how many peers have to be online and honest before we can consider the decision final.
00:06:09.900 - 00:06:40.814, Speaker A: Okay, that everyone has reached agreement on the same. Why is it interesting again for the blockchain? If we consider classical consensus protocols for about 30 or 40 years, this is what they look like. They're small scale. They only tend to focus on a fixed set of nodes. Five, six, seven computers. They tend to only handle one third fault. What I mean by that is that only 30% of computers, or 33% of computers, can be malice.
00:06:40.814 - 00:07:17.550, Speaker A: Before we break the contempt. This is because they focus on safety and torque avoided, we should always reach a decision. Once we've made that decision, we never change our mind. And finally, there's no financial incentive. These costco consensus protocols, we set up the computers, they just do it because they've been told to. There's no reason why they're participating. This is why bitcoin and Ethereum and Nakamoto Consensus is super interesting because it basically flipped the table and changed how we consider designing consensus.
00:07:17.550 - 00:07:47.286, Speaker A: What do I mean by this one? Nakamoto Consensus works on a global scale. We're all using bitcoin and Ethereum. Today there's a mechanism to update our databases. So we all agree about the current state of the network. What it can also handle is 99% false. What do I mean by that? This is because Nakamoto Consensus focuses on liveness and fork tolerance. As long as there's one miner making blocks, we will always reach a decision.
00:07:47.286 - 00:08:22.606, Speaker A: We will always get liveness. The blocks will keep getting minted, and we'll keep running the Consensus. And this works because we no longer focus on we can make a decision. We can forget about the decision, make a completely different decision within a short period of time. That's really cool. We can actually tolerate forks and tolerate decisions being forgotten about, but remade within a short period of time. What's really cool is that there's actually a financial incentive to run the Consensus protocol and participate.
00:08:22.606 - 00:08:41.100, Speaker A: So out of you guys who's tried to mine bitcoin or Ethereum before, there you go. There you go. Did you guys ever try to run BPFT? No. There's no financial incentive to we're here. You guys are making money for mining bitcoin and Ethereum and by participating in the Consensus. That's really cool. From a distributed system.
00:08:41.100 - 00:09:16.662, Speaker A: And what are they reaching agreement on? Obviously, the whole point of Nakamoto is that they'll eventually agree upon a single blockchain. Anyone in the world can download the blockchain. They can re execute every transaction. Now, they can recompute the same database as everyone else in the world. There's a replication network, replicate all the data, and everyone can recompute. Okay. Now, because of the way Nakamoto Consensus is designed, it runs in this new security paradigm called trust.
00:09:16.662 - 00:09:45.038, Speaker A: Beverly. Now, we still have the trust miners. We still have the trust of people involved in Nakamoto Consensus. We trust them to include transactions in the blockchain, but they have a financial incentive to do that because they get rewarded. We trust miners to always extend the longest chain, but we trust them to do that. But they have a financial incentive to do that anyway because they make money. Other than that, we don't have to trust the miners at all.
00:09:45.038 - 00:10:26.890, Speaker A: We can validate every new block they create. If they create a block that's invalid, we just reject it. The whole point of Nakamoto Consensus is that we can hold the miners accountable. They act out of order. They try to cheat. We can just ignore them and only follow the honest. What's really cool from a distributor? Now, once we have this global ledger or this public bulletin board, what can we build with that? Assuming everybody in the world can see the same bulletin board, what are the cool applications? Obviously, the first one, peer to peer electronic cash.
00:10:26.890 - 00:11:07.580, Speaker A: It was a solution to the double spending problem. This was me in 2013 when I got really excited about bitcoin. But I remember when I first spoke to the Ethereum developers back in 2014, they told me about Ethereum, and I got super excited by Ethereum. Took this a little bit further. Instead of just financial transactions. Why don't we deploy programs on this global network, and then why don't we execute the programs on the global network? What's really cool now is that conceptually, there's a single program out of reach of any human interference, and everybody can see it, everybody can interact with it. We don't have to trust anyone to run that program.
00:11:07.580 - 00:11:54.630, Speaker A: So given these global censorship resistance programs, what can we build with that? Now, I'm interested in cryptographic protocol for 30 to 40 years. There's lots of research papers about building really cool cryptographic protocols. Auctions without auctioneers, evoting without any tallyAN authority. You can even do masto poker on the blockchain in a fair way, but none of these protocols have ever been built because they all assumed there was either a public bulletin board or an authenticated broadcast channel. This is exactly what Ethereum gives us. Ethereum was one of the first platforms that would actually allow us to build and run cryptographic protocols. And of course, we can also run CryptoKitties if you want a tamagotchi.
00:11:54.630 - 00:12:24.034, Speaker A: You guys have CryptoKitties, then, okay, we've got one crypto. We can breed. We can auction them. That's what we want to do, okay? That's the whole point. We can now build these cool cryptographic protocols thanks to the blockchain and cryptocurrency. Now, my research is in security engineering. I like to try to design secure protocols, and I like to build them.
00:12:24.034 - 00:12:47.290, Speaker A: So why are cryptocurrencies? Interesting. From a security perspective, they are the largest bunk bounties in the world. They're 40 lines of code sorry. And they hold millions of dollars of austa. Positive example with the Dow. I'm pretty sure most people here know what the Dow was. Back in 2015, there was 40 lines of code.
00:12:47.290 - 00:13:04.826, Speaker A: It was basically like a Kickstarter program where people can deposit money. Once it has enough funding, anyone in the world could submit a proposal. It gets enough votes. That proposal got funded. Of course. Historically, it got hacked. Dow hacker found a bug.
00:13:04.826 - 00:13:35.420, Speaker A: They started draining $50 million from the contract. And historically, that was reversed. But the whole point here is that it was some random person in the world who stole $50 million because he exploited a single actually, at the same time, theorem foundation were also draining the contract. The Black Hat hacker was stealing the money, discovered it, they tried to steal the money. It was really fun. Well, that's the point. Contract one bug, you lose $50 million.
00:13:35.420 - 00:14:04.538, Speaker A: Now, as developers, you're probably not going to work on the smart contract. You're going to be building the exchanges, the web wallets, the hardware wallets. This is also a fun place for security. 33% of Bitcoin exchanges have been hacked by 26. When they get hacked, it tends to be large scale. Gox lost 850,000 bitcoin. Silk rule lost 170,000 bitcoin.
00:14:04.538 - 00:14:23.830, Speaker A: That Phoenix. Lost 120,000 bitcoin in 2016. This isn't 2016. They should never have lost this. But that's story but this is really cool. As well, if you're building on the wider ecosystem, you have a responsibility to have an adversarial mindset. Mindset.
00:14:23.830 - 00:15:02.326, Speaker A: If you're not careful, someone could hack in, steal your private key and steal all of your money. So you've got a responsibility to have. So who thinks this all sounds interesting? Raise your hand if you think this is interesting. Everyone. So how does this all tie together? So I've condensed this bit, a little bit since I think most people here have a rough idea. But as everyone's aware, you have a private public key pair. Private key is what you do and your public key is your identity.
00:15:02.326 - 00:15:34.850, Speaker A: I can compute this on my computer and give anyone here my Ethereum account and you can send me money. Now in all these cryptocurrencies, the transaction format looks roughly like this. There's a sender and a signature. I'll visibly sign the transaction. There's a receiver that could be one of yours, account or contract. There's some value associated with this. Maybe I'm setting a coin and there's a transaction fee because we're going to reward the miner for including our transaction.
00:15:34.850 - 00:16:05.370, Speaker A: Now there's a payload bitcoin. The payload allows you to store Ethereum where the bytecode is for your smart contract. When you deploy it or when you want to call a function. At a high level, this is about the transaction. Once you've got a transaction, how do you get it across the network and into the blockchain? I've got my 1999 automation signs. It, broadcasts it. Now this gets sent to appear in the network.
00:16:05.370 - 00:16:51.370, Speaker A: What this peer will do is it will get his local copy of the database that represents the currency of the network. It'll get the transaction and it basically just checks. Does the sender have enough coins to pay for this transaction? Yes, they do keep a copy of it and they pass it on to their peer. And every peer will do the exact same thing. It's across the network. Eventually every single peer in the network has heard about your transaction. Now why are we doing this for? What is the point of sending an unconfirmed transaction across the entire peer? To wanted to reach the peers who are running the consensus, the miners who are solving that proof of work to create blocks.
00:16:51.370 - 00:17:25.260, Speaker A: And they update everyone's. Okay, what is a block? Conceptually, a block is just an ordered list of transactions. I receive a block, I process the transaction exactly in this order. And that's important. As a smart contract developer, if you have a function that depends on the order of transaction, you can enable front running. Basically at a conceptual level, a block is just an order. The miner doesn't really care what they do as long as they pay.
00:17:25.260 - 00:18:05.494, Speaker A: And the block just performs a batch update on the network. Okay, so basically the block gets sent to every computer on the network and they'll update their database according to that block. And the question is where do blocks come from? They come from these financially invested actors, and they're all in competition to create the block. Whoever creates the block gets rewarded for doing this within bound. Okay, now I want to get you guys to be miners. You're all miners, and you're all in competition, and you're all going to try to solve a puzzle. Let me check my time, by the way.
00:18:05.494 - 00:18:20.506, Speaker A: Okay, I have ten minutes. Awesome. Okay, you're all minors, and you're all going to compete to win some money. Who's watched Countdown before Field English TV? You know, countdown. Yes. Okay, there's no generation. What? No.
00:18:20.506 - 00:19:03.990, Speaker A: How do you not know Countdown? No Countdown. Oh, is it? I didn't know that. Okay, so what you guys are going to do is there'll be a big number on the screen and six smaller numbers using any combination, addition, subtraction, multiplication, or division. I want you guys to recreate the big number modulo as the first person to solve it, raise your hand, yell out the answer, whatever you guys want to do. Go. Yep. Any other answers? No.
00:19:03.990 - 00:19:34.820, Speaker A: Any any other answers or what? Yes. Okay, there you go. Exactly. I think I've got the same answer. Awesome. What's really cool here is that we have multiple solutions to the puzzle. Now, not every solution is this is where the difficulty or the quality of the solution.
00:19:34.820 - 00:20:14.000, Speaker A: The less numbers you require, the less operations you require, the better the solution. So maybe you only accept puzzle solutions that will only use two operators. Obviously, my solution is real, but it's not good enough for the proof of work. Another property is that this puzzle took time to solve, although he was really took you guys a bit longer to solve the puzle. But once you've solved the puzzle, anybody can verify the solution. That's sort of the property we want, because now we can make sure it takes ten minutes to create a block. But when I get the block, it's quick for me to verify the puzzle solution.
00:20:14.000 - 00:20:32.880, Speaker A: It's also probabilistic. There could be more than one puzzle solution here. We had about four solutions. Now you're all competing to win the prize 55,000 pounds or 12.5 cent coin. There's only one solution. The not minor gets the food reborn.
00:20:32.880 - 00:20:47.150, Speaker A: Multiple solutions. You're now all in competition for the what's? Really cool. So they send the puzzle out to the network. Every peer gets the block. They check it's valid. They check the proof of work. Yes, it's good enough.
00:20:47.150 - 00:21:15.864, Speaker A: They update their database. Every peer does exactly the same thing. And now we've effectively performed a botch update on the network. We've updated everyone's database. Now, this miner will be rewarded within bond token. Now, one key point is that every single computer has a list of deterministic rules called consensus rules. And every block must conform to these rules.
00:21:15.864 - 00:21:49.108, Speaker A: You create a block that, for example, creates 182,000,000,000 coins out of thin air. Then that will be considered an invalid block, although that actually happened in Bitcoin. That wasn't a consensus. So putting the pieces together, users create, plan and publish transactions. Transactions propagate across a peer to peer network. Miners complete blocks. Only the blocks that end up in the longest and the heaviest will perform the botch up.
00:21:49.108 - 00:22:21.410, Speaker A: I'm really alluded to that. That's pretty much it. Now, if you like this introductory lecture, what I do in London is that I run a cryptocurrency class for the now I initially built the course for 20th students. What I decided to do was to book a lecture theater in the evening and just see who would show up. And our biggest class had 350 people. That was really exciting. They're all new to the space and they're learning about we cover these topics, maybe update the website.
00:22:21.410 - 00:23:03.430, Speaker A: We cover blockchain as a data structure model peer to peer network. How do we break smart contracts? Why these networks? We then talk about nature of money and off chain protocol. Lightning network work. And next week we're going to do for bitcoin and Ethereum are the most traceable currencies in the world. What can we do to make that a little bit better? So that's it really. I don't know if I have time for questions. Okay, I think one question and there's videos as well.
00:23:03.430 - 00:23:35.870, Speaker A: I record all my life really started this course. So I was designing a course. We wanted to do this for years anyway. And literally two weeks before I had the start, I decided to run. I never planned to run this, in fact university probably giving away content. Yeah. So it's only not the other you.
00:23:35.870 - 00:23:40.030, Speaker A: I'll leave you all to it. Thanks for listening.
