00:00:06.010 - 00:00:25.670, Speaker A: Hey, everyone, thanks for joining us today. We have Chris here from Lip Protocol, who's going to be doing a workshop on easily add encryption and private data. With Lip Protocol, questions go into the zoom chat, and Chris will take them as they come in. So feel free to ask questions whenever. And with that being said, I'll hand the mic off to Chris.
00:00:26.330 - 00:01:32.426, Speaker B: Hey, how's it going, everybody? I am so excited to teach you all a little bit about Lit Protocol. It's very near and dear to my heart, as you can imagine. So very excited to get to share some of it with you, especially in the context of this hackathon where I think there's some really cool stuff that you can build with it. So let's get started. What is lit protocol? Lit Protocol utilizes threshold cryptography to decentralize public key cryptography. So what does that actually mean? We all are familiar, hopefully, with public key cryptography and how it works and what you can do with it, right? You can sign things with a private key that's like the basis of all cryptocurrency, and you can also encrypt things to the public key and decrypt them with the private key. And what we do at Lit Protocol is we use threshold encryption to decentralize that process.
00:01:32.426 - 00:02:09.080, Speaker B: And so what that means is that there's a number of nodes in the network. Say you have 30 nodes, and you can set a threshold. You could say 20 of 30. And what those nodes do is a process called distributed key generation, where they generate a public private key pair that nobody knows the private key to. The nodes each only have a share of that private key. And they can do everything that you can do with regular public key cryptography with that private key share. So they can sign with that share, they can decrypt with that share.
00:02:09.080 - 00:03:37.422, Speaker B: The user then can collect, say, 20 out of 30 decryption shares or 20 out of 30 signature shares, and then can create the signature or decrypt the content. And so that's how at Lib Protocol, we decentralize access control it's because there's a network of nodes that are running that are actually they check conditions and then they use their private key share to do an operation for you. Okay, so I've talked a little bit about on chain credentials. That's generally what Lit Protocol uses to check if you should be allowed to decrypt something or receive a signature for something. And what are on chain credentials? Well, it's data that lives on chain generally as some state inside a smart contract. So it could be like, does a user hold an NFT? Are they in a dao? Do they hold some amount of ETH? It could also be like, do they own a specific wallet address? And it could even be any smart contract call. So you can write a smart contract that does all kinds of crazy logic or pulls in all kinds of things from all over the chain and then spits out a true or false.
00:03:37.422 - 00:05:25.734, Speaker B: And you can use that as a condition for whether or not someone should be able to access something. So how does this actually work? The user is over here on the right and on the left of this graph is a blockchain and basically on the right the user requests either a decryption, which is this key icon here, a key, or a signature, which is a signed JavaScript web token, also known as a JWT. And what the user does is they talk to every single node and they ask for a decryption share or a signature share. And with that request they also send a signed wallet message signed by their private key. So what that does is it lets the nodes actually check does this specific user meet this condition? And by checking the user's wallet signature, the nodes can also confirm that the person making the request is who they say they are and that they actually own that ethereum address. And so each node, independently and in parallel will check the condition on chain with an if you know, if the condition is like does the user hold an NFT, then each node will check with an RPC call. Does this ethereum address, is the balance of this ethereum address of this NFT, is it greater than zero? And if the condition is met, then each node creates a decryption or signature share using its private key share.
00:05:25.734 - 00:06:38.620, Speaker B: The user collects all of these above the threshold and is then able to encrypt or sorry, then able to decrypt or receive that JavaScript web token that they can send onto a server. So what can you do with it? There's basically two main things you can do with it, two main paths of usage. One is for locking static content via encryption and another one is authentication for dynamic content via the JWT. And so what that means, just to be clear, is that when you use the SDK, the lit protocol SDK, which by the way is a JavaScript SDK, it should work in the browser, it should work with react, it should work on node JS on the back end, it should work everywhere. So that's how you'll actually interface with the network is with the JavaScript SDK. And it can basically give you two things as output. It can give you an encryption key to decrypt something or it can give you a JWT that's signed by the actual network of nodes itself.
00:06:38.620 - 00:07:41.038, Speaker B: So on the encryption side, on the encryption key side, there is a lot of cool stuff you can do. You can do things like encrypting and locking media files. You could do self contained lockable, HTML NFTs. You can do any kind of DWeb document encryption. So we have a ceramic integration that I'll go over in a little bit and generally, like any private data that is not custody by a third party is something that the encryption is a good candidate for. And then the final thing is what I like to call the Ready Player one idea, which is if any of you guys have seen that movie, it's like a guy locks up a bunch of money and then he dies. And then if anybody solves the puzzle, they can get all the money.
00:07:41.038 - 00:08:05.906, Speaker B: And so that's like one thing you could totally design with this. You could have a smart contract that maybe somebody has to check in. Like it's a dead man switch. Smart contract. Somebody has to check in and if they don't, then the puzzle is unlocked and people can start trying to solve it. And so that's one of the cool things you can do with it. With respect to Lens Protocol, I think there's a lot of cool stuff you could do with the encryption.
00:08:05.906 - 00:09:28.370, Speaker B: You could have private publications where the actual content in the publication is private and only people who meet a certain on chain condition, maybe only everybody in you have to be in a mutual dow with me in order to see my publications, for example, is one thing you could build with that. Just a second, I'm going to pause here because I see some chat questions. I want to make sure that I'm getting them. Oh yeah. Can you encrypt dynamic content like streaming videos? So yes, for dynamic content I think you would probably want to use the JWT, which is the other thing you can get from the protocol, right? So generally in our docs we refer to the encryption use cases as static content and the authentication and JWT cases as dynamic content. And so with respect to streaming videos, we do have a cloudflare integration you can use where you can upload your video to Cloudflare. Cloudflare Stream is the name of their product and Cloudflare Stream will automatically transcode it into a bunch of different formats for you and then automatically serve those formats up.
00:09:28.370 - 00:10:39.190, Speaker B: And you can use our integration that we've built with it to put any lit protocol access control condition on it. So the user has to own an NFT or whatever. Anyway, so we'll go over dynamic content real quick and I'll come back to questions. For dynamic content, this is basically any content that's loaded from a server or content where you have a third party custodying the data. So like Web Two experiences, we have a couple of integrations with Google Drive, Zoom and Shopify that we've built that you could play with or you should build something on your own that's similar. If you wanted to charge for a Web Two API, you have to hold this NFT or you have to be actively paying me on one of the payment streaming services. Whatever the on chain condition is, you could absolutely use it for that.
00:10:39.190 - 00:11:40.602, Speaker B: It's also great for content that receives frequent updates. So if you had a price analysis dashboard. And you were like, oh, people who are members of my club that hold my club NFT can see my real time price analysis, and it's changing all the time. That's a really good use case of the JWT. Okay? And one question we have is how large can the static content be and can you set the unlock to be a timestamp or a block number so the static content can be as large as you want? It is up to you to decide where to store it, right? So we only provide the encryption and decryption. You still need to decide, do you want to store it on ceramic or IPSS or Rweave or wherever? So that part is up to you. And with respect to the unlock being a timestamp or a block number, so that's not something that we support natively.
00:11:40.602 - 00:12:37.440, Speaker B: But remember I said that you can use any smart contract function as your condition. So you could very easily write a smart contract that the function says, if timestamp is greater than this, return true, else return false, and just use that smart contract function as your condition. And by the way, we support all the EVM chains pretty much, and we support most of the testnets as well. So if you wanted to use a contract like this, but you didn't want to have to pay to deploy it on mainnet, you can totally use it on any testnet that you want, and so it could be free. The differences between lit and new cipher, I'll come back to that one at the end, I think, but thanks for asking that question. That's a good one. Okay, so here's some of the things that we've built with lit, just to give you a bit of an example.
00:12:37.440 - 00:13:50.470, Speaker B: So, like, shopify, zoom, Google Drive, cloudflare stream, gathertown and WordPress those are all examples that use the JWT, right? Because they're all pretty much like web two services that use the JWT for authentication to these services. And then down here is the IPFS encrypted files and the unlockable NFT Minter. Both of those are use cases that use the static content, the encryption key use case. And let me actually show you some of these real quick here, just to give you a bit of a demo of how things actually work. This is the IPFS encrypted files and my MetaMask. And what this does is it lets you encrypt a file and basically specify the on chain conditions for who should be allowed to decrypt it. And then the encrypted file gets uploaded to IPFS.
00:13:50.470 - 00:14:37.890, Speaker B: So I'll just pick a random document here, and this is what I really wanted to show you guys is this modal here. So this is a component that we provide. I'll post a link to that in the presentation, and it's also linked in our docs, which I'll go over in a minute. But this is a component that we provide. You can use this within react or within any JavaScript environment, even just like a vanilla JavaScript environment. And this is a component that you can use to let your users decide who should be able to access something. So you could use this with Lens, for example, like the example I gave earlier of protected publications.
00:14:37.890 - 00:15:51.194, Speaker B: You could use this for a user where a user could say, like, only let the people in my dow decrypt my publications, or only let the users that hold so many various weird tokens, whatever this token is, only let users that hold more than one of these on polygon be able to read and decrypt my content. And just to sort of complete this demo for you, we'll say maybe somebody who holds more than 0.1 E can decrypt this. And in the example of this application, the user gets a URL here. And so you could share this with people that you want to share the content with. And then when a user clicks Download, if they meet all the conditions, it'll download perfectly. And if they don't like this one doesn't have any ETH in it, I think.
00:15:51.194 - 00:16:57.422, Speaker B: So this one should fail when I click download. And by the way, right here you can see one requirement of using lit protocol is that the user has a wallet and is able to sign messages with those wallets, with that wallet. So here's an example of that signing process. And so, yeah, you can see right here, it says unable to download because I don't meet either of these conditions, right, because I switched to a wallet that doesn't have this amount of ETH. Okay? So one other thing that we built that was kind of fun was being able to control Tesla with an NFT. And so that code is all open source, if that's interesting. The way that it works, just to give you an idea of the kind of things you can build in the architectures, is that a Tesla owner mints an NFT and then they off with Tesla and get like a token for use to talk to Tesla.
00:16:57.422 - 00:17:46.750, Speaker B: They encrypt that token once with a symmetric key, and then they encrypt it again with lit. And then the symmetric key lives on like a serverless function. Use a cloudflare worker for this. And so when a user shows up and wants to drive the car and they have the NFT, they first decrypt that OAuth token with lit, but it's not fully decrypted. It's still encrypted with a symmetric key that lives on the server. They send that up to the server. The server validates again that they meet the conditions, and then the server decrypts the credentials, then talks to the Tesla API on behalf of the user.
00:17:46.750 - 00:18:29.210, Speaker B: And so what's cool about that is that the credentials only exist in their decrypted form when they're being used for something. They're not just laying around where somebody could just show up and steal the credentials. Okay, features. Yeah, so let's talk about some of the different things you can do with Lid in terms of some of the more advanced features. Obviously, we talked a lot about provisioning an encryption key or a JWT. We also support Boolean logic, which is like and or conditions. So you can combine multiple things like the user has to be in a Dow and own this NFT and have more than two ETH or whatever, and you can use those across EVM chains.
00:18:29.210 - 00:19:36.118, Speaker B: So you could say, know this user has to own a crypto punk on ETH and be in a Dao on Polygon and that's the only way that they can access this content. We also support updatable or permanent conditions by default. When you use the SDK, conditions are marked as permanent, but there's a flag you can set permanent false and then that will let you update them in the future, which will let you do things like, for example, if you want to revoke permissions from someone, you could use an updatable condition to do that. We have multi chain support, as I mentioned, we support almost all the EVM chains and we also support Solana and the Solana testnets. It's free right now. And also, full disclosure, we are building on a decentralized architecture, but right now we are running all of the nodes as we progressively decentralize. So I know this is like a hackathon, so people hopefully won't store anything valuable anyway.
00:19:36.118 - 00:20:40.300, Speaker B: But right now I would avoid storing anything high value in lit until we can decentralize the infrastructure some more, which is we're in the process of doing that right now and we think we'll have a more decentralized network up within the next few months. And like I said earlier, we don't store anything for you. It's up to you to bring your own storage solution. Then you can encrypt your stuff with lit, store it wherever you want, and then nobody can read it without meeting the conditions, even though you sort it in a public place. Like IPFS and ceramic and table land are all public. So this is the access control modal that I showed you guys earlier, and we have some docs on this here with some different ways to utilize it. We have some example code where you can see where it was used.
00:20:40.300 - 00:21:04.900, Speaker B: Definitely check out the docs. Those are available at developer Litprotocol.com. And this is where you can find basically everything you need about how to use lit. Right, okay. The ceramic integration. Yeah, so that's a good one. Some of you guys will definitely want to use this.
00:21:04.900 - 00:22:08.630, Speaker B: If you're using ceramic and you would like to have private data on your hackathon project, you can use lit plus ceramic to do that, which basically means you're using ceramic for controlling write access, and you're using lit for controlling read access. Because the data is encrypted with lit, and only the people that are able to decrypt it are able to actually read that data. And so we have an NPM package that basically just glues lit and Ceramic together. That might save you a little bit of time if you're planning to use these two things together. And we also have an example implementation that utilizes that package as well. So if you're going to use Ceramic and you want to have some private data, this is probably like a good package for you. And, yeah, we have a ton of example code, so hopefully that'll help you get started and get going a little quicker.
00:22:08.630 - 00:23:11.018, Speaker B: Everything from just examples of how to use the SDK up here to some things like here's how to use Cloudflare to protect any URL on the web. So if you want to protect a URL that you don't have access to or a way to gate because you can't control that server, you could put this in front of it. The downside to using something like this is that once the user, an authorized user, has visited the page, then they have the URL and they can just give it to other people. So this is not an ideal way to protect content. What's better if you're going to protect something on a server is to use this example right here. Yeah, this is an example to gate dynamic content on a server. And what's better about this is that if you meet the conditions and you go to the server and you get the page right, you can always take a screenshot, of course, or print a PDF or whatever.
00:23:11.018 - 00:24:26.526, Speaker B: But if you take that URL and send it to somebody else, it won't work for them because every request requires that the user present a JWT from lit, which proves that they meet the conditions, and the user that you share that with won't have that. Like I mentioned earlier, we have a cloudflare integration for streaming token gated videos from Cloudflare. The ceramic integration that I discussed here, we have the Share modal that I just discussed, and I think that's pretty much everything that I wanted to get through with respect to the documentation and things like that. And I'd love to talk a little bit about the differences between lit and New cipher. And then if anybody has any other questions, or if you had a question that you didn't want to write in the chat and you wanted to ask verbally because it was like really long or something, then you can pipe up and ask that in just a SEC. And so the differences between lit and New Cipher so New Cipher uses proxy re encryption and lit doesn't. Lit uses threshold cryptography.
00:24:26.526 - 00:25:34.038, Speaker B: And the main difference is, with proxy reencryption, another person generally has to show up, or not another person, sorry, the original person that owns the content has to show up to grant access to every new person. Right? And so the example that we gave earlier of Ready Player One and building that with lit protocol, you can't build that with new cipher, right? Because you're dead. You can't show back up and grant proxy re encryption access to the person who solved the puzzle. And that's one of the use cases where lit protocol really shines, is in locking content up behind an NFT, right? Because you can put that NFT up for sale, and you can go about your merry way, your life, when somebody buys that NFT from you. You don't have to show back up and give them access to that data by re encrypting it to their public key. Instead, you just live your life. You never have to show back up.
00:25:34.038 - 00:26:27.350, Speaker B: That person is just able to decrypt it by default. And when they sell it to another person, that person is able to decrypt it in perpetuity. It's the same thing for when you think about is a user a member of a Dow? Right? It's like the set of users that's in a Dow is constantly changing. It's like people are coming and going. They're joining and leaving. And so if you had to grant access manually to every new user that joined a Dow and then revoke access from every user that left, it would just be like a huge pain. And so instead, what we do is we just check the blockchain when you want to access it to see if you meet the condition, and then selectively do the operation of decrypting or signing only if you meet that condition.
00:26:27.350 - 00:26:57.262, Speaker B: Okay. Somebody asked, how does lit compare to unlock protocol and Mintgate? Lit is like a developer tool, basically. Like, we provide an SDK unlock, and Mintgate are primarily like consumer tools. So they give you a dashboard, they give you everything. It's all like, point and click. Basically, we're really focused on building out the SDK. Also, lit is actually decentralized.
00:26:57.262 - 00:27:28.006, Speaker B: I mean, it's not because we're running all the nodes, but it will be versus unlock protocol and Mintgate aren't decentralized. They hold onto the content centrally and selectively release it. And what that means is that if you're an engineer at Mintgate or unlock protocol or something like that, you could just go in the database and steal all the locked content. There's nothing stopping you. Right. Versus with lit. It's encrypted.
00:27:28.006 - 00:27:56.550, Speaker B: Right. It's mathematically secured. So it doesn't matter what privileges you have at lit protocol, we here at the company can't see your content and never will. And then, yeah, we've built a bunch of consumer apps. Like, you can see some of them here. And so that's like one area of overlap, I would say, between unlock protocol and Mint gate. But this definitely isn't our main focus versus I think it is theirs.
00:27:56.550 - 00:28:04.934, Speaker B: Cool. I have about a minute and 30 seconds left, I think. Does anybody have any other questions? Comments, anything?
00:28:05.132 - 00:28:16.540, Speaker A: Hey, Chris, you actually got a question in the discord chat, Fernando asks, can you elaborate on cloudflare related topic just sure, yes.
00:28:17.070 - 00:29:00.946, Speaker B: We have a couple of different things for Cloudflare. We have Cloudflare stream integration, which this essentially lets you embed videos and live streams that are token gated. In order to use this, you'll have to have a Cloudflare account and a GitHub account. And this little widget thingy here will let you deploy everything to your Cloudflare account to make this super easy to use. And then you end up with a UI where you can upload your videos, set your conditions. It's all very smooth. The other thing we have for Cloudflare is an example of protecting any URL with a cloudflare worker.
00:29:00.946 - 00:29:19.200, Speaker B: And you don't have to use Cloudflare for this. You could use any serverless worker for this, but Cloudflare is just like a pretty easy one to use. So if you wanted to verify a lit JWT inside of a Cloudflare worker, this would be the example project that you would want to take a look at.
00:29:24.530 - 00:29:50.038, Speaker A: Awesome. So it looks like that's all the questions that we have for now. If you have any more questions, feel free to drop them into the Sponsor Lit Protocol Discord chat, where I'm sure the team will be more than happy to answer. And with that being said, Chris, thank you so much for taking the time to do this awesome workshop. I can't wait to see what everyone makes. And yeah, I hope everyone has a great rest of your day or evening, morning, wherever you are.
00:29:50.204 - 00:29:52.680, Speaker B: Yeah, thanks so much for having me. Appreciate it.
00:29:53.130 - 00:29:53.940, Speaker A: All right, bye, everyone.
