00:00:00.330 - 00:01:00.240, Speaker A: Hello guys. Well, first of all to get a bit of because I don't know how is the audience here is who knows what Abe does more or less or has an approximate idea. Okay, not so many. Okay, basically Abe is a money market where like a decentralized protocol where people can borrow and end deposit different assets. And so if you deposit, you get interest, you get deal from your assets and if you borrow, you need to pay interest for those depositors. Today in the workshop will be about one of the main features we have in the protocol, one of the most new features and innovations and that are the flash loans. Who heard about the flash loans here lately? Last weeks almost more than Iban Abbey because it's quite normal actually.
00:01:00.240 - 00:02:20.342, Speaker A: So the flash loans, as a lot of you know, are based on the atomicity of the ethereum blockchain, of the transactions in the ethereum blockchain that when you execute, when you execute subtransactions inside one function call if everything passes, everything passes. If something fails in the middle, everything gets reverted. This is quite interesting because you can make multiple jumps and go from one platform to the other. In the case of flash loans with funds, with ETH, with I or whatever other currency and then validate at the end if the final state is consistent. And if it's not consistent, you just revert everything and you have really powerful features because of this automicity. The big innovation of the flash loans and what makes it really powerful is actually the combination with money market like ours in Abe because basically you have a big amount, big chunk of funds stored there that are not borrowed by borrowers from the depositors. And one way of using them is like flash loan for one transaction.
00:02:20.342 - 00:03:38.020, Speaker A: So anybody, even if they don't have any capital, they can just flash loan at the beginning of the transaction. They do whatever operations in other ethereum applications that are available and then the only condition is that they need to return the funds at the end of the transaction. So yeah, that is the flash loans and they are really well known as a lot of, you know, last two weeks because there was a quite big attack attack or like not only attack for me it was kind of a genius movement in the principle based on the composability of ethereum. And they did like a strategy and in 14 seconds of a block, basically they got 350k or something like that in dollars. So that made like everything in this world, when there is a big attack and somebody gets a lot of money, it goes mainstream. So, yeah, we introduced the feature, we released the protocol like almost two months ago and this was one of the main features we were releasing, but nobody was using it at the beginning and now it's growing because actually has a lot of potential. So today is mainly to give a quick technical introduction of how is the flash loan in our protocol and how anybody can implement something using them.
00:03:38.020 - 00:04:23.040, Speaker A: Here there are some links that we can share at the end of the presentation. But basically we created a repo. The first one if you want to take a picture or whatever. But I will open now with kind of a template of how to implement flash loans from Abbe. So the idea is that we created like a mock exchange. Emilia will show in some minutes that we created a mock exchange that received funds from flash loan and then you need to return the funds and it returns with a small fee. That is like a mock, but it's just to show how to do it.
00:04:23.040 - 00:05:01.070, Speaker A: And there is more information, but we will go through it. First of all, I will try to show you the code in the protocol itself of how exactly the flash loan works for us. If I know how to. Yeah, basically this contract is our repo and is the lending pool and it's like the entry point contract. Yeah. How is the brian.
00:05:05.010 - 00:05:06.106, Speaker B: There is a weird keyboard.
00:05:06.138 - 00:05:07.360, Speaker C: It's my fault, sorry.
00:05:10.450 - 00:05:11.600, Speaker D: Flex on.
00:05:15.110 - 00:05:15.860, Speaker A: Yeah.
00:05:16.390 - 00:05:17.140, Speaker B: Okay.
00:05:18.150 - 00:05:57.918, Speaker A: Let me go to a particular place. Howard, we are not going to go so so much in detail about the code itself, but it's more about the fuck. Okay, here. Yeah. So basically this is the function in this contract. You have like the deposit function, the borrow function, the function to swap between the different types of interest that you can use to borrow. And another function is this flash loan.
00:05:57.918 - 00:06:45.166, Speaker A: So basically what it receives is that you receive an address of the receiver. That is the smart contract where the flash funds are going to be sent. So it's like the borrower of the flash loan. Then the reserve is the asset that you are borrowing. Flash borrowing, like ETA is Die or whatever the amount and then the parameters is if you want to send any data to that contract that is receiving the funds to do whatever you need. Basically it does multiple validations that the liquidity available is enough to borrow and that kind of stuff. And it calculates a fee.
00:06:45.166 - 00:07:46.680, Speaker A: This is important in our protocol, we took the decision that the flash loans have a fee, but this fee is depositors yield. Like it's a fee that it gets redirected to the depositors. The biggest part of it, the rationale of this is that at the end of the day, these are funds of depositors and somebody's using those funds, even if this is like during one transaction and there is almost no risk, I mean, it's debatable if there is risk or not, but it's practically zero. We still think that the depositors should be rewarded because of this. Because at the end it's usage of capital, right? Really quick usage of capital, but quick usage of capital after the validation. There is this calculation of the fee and this is kind of the key part. The core is the contract that stores the funds and it transfers to the receiver the funds after that.
00:07:46.680 - 00:08:46.860, Speaker A: The only thing that it does is like it checks the liquidity because after this execute operation the fund should be returned by the other contract and it just checks that the liquidity after doing the flash loan return is consistent. Like the funds return are the same that you borrow plus the corresponding fee. So this is the implementation, it's quite simple and some emit of Evans yeah, the update on the state of flash long is basically that putting the data in the state of the different contracts. So basically what we have today maybe here's me.
00:08:53.450 - 00:08:54.200, Speaker D: Okay.
00:08:58.570 - 00:09:52.666, Speaker A: Yeah. In the other website we have for the documentation for developers, we also have this flashroom receiver base and basically this is like an example of the contract that should receive the funds when you make the flash loan. So the yeah, the main function is this execute operation. If you remember in the, in the previous lending pool there was a core execute operation that was after transferring the funds to this contract. So this contract will receive the funds after that. The other flash loan function calls this execute operation and this execute operation is where the developer needs to code the particular logic. So it receives also the reserve, the amount, the fee, the fee that was precalculated before.
00:09:52.666 - 00:11:22.882, Speaker A: And here is where for example, the parameters are quite useful because then you can do whatever you want with your data and at the end it's just to the amount as the fee, the new fee and it transferred back that this is a function inherited from the other base. It just transferred the funds back plus the fee to the lending pool. So that is the model this flash loan function is because this example is designed to be that the other flash loan function in the lending pool is called from here. So you use the same contract to first call the flash loan in lending pool. The lending pool calls this execute operation that returns back to the lending pool and finish and profit or whatever. Another thing that we did and that Emilio will show working is this flash exchange that is just a mock contract. That the only thing is that the logic in the middle of the execute operation will can you see? This is the function that will call simply that it receives the funds.
00:11:22.882 - 00:11:38.300, Speaker A: It transfers from the funds to here and then it returns back with an extra fee. It's basically simulating an exchange with returning some extra funds. So maybe you can show the actually.
00:11:40.510 - 00:11:54.350, Speaker B: Okay, so the idea here is to showcase one of the main use case of possible use case of flash loans, right. One of the use case is Arbitrage. Take this specifically.
00:11:56.450 - 00:11:58.740, Speaker A: For the video for the video for the business.
00:12:07.270 - 00:13:45.446, Speaker C: So specifically it's possible to use the funds that are deposited in the protocol to perform arbitrage between the centralized exchanges, right? Or liquidation in different money market protocols like ours. For example, it's possible to use the flash loans and the funds that are deposited in our protocol to execute liquidations on compound or dYdX for example, right. This contract, very small contract that we wrote kind of simulates this specific use case. So you can, I can show, actually README I'm sorry if we are compressing the information so much, we thought of this like at least a couple of hours workshop, but it's going to be half an hour, so we need to be quick. The idea is that we are giving you here is we developed and deployed this very easy and kind of funny flash exchange. Because the thing is that you can invoke it using flash loans, right? And what this exchange does is if you send to this exchange funds, it will return back the same funds that you sent plus a certain yield for you, right? So there is actually no exchange. We charge the contract with like 0.5
00:13:45.446 - 00:13:55.900, Speaker C: ETH and we will put maybe like ten or 20 die in it. And then you can invoke the exchange in both Robson and Mainet and.
00:13:57.950 - 00:13:58.266, Speaker B: You.
00:13:58.288 - 00:14:16.058, Speaker C: Send an amount to this exchange, it will send back the amount that you sent plus a very small percentage in this case is 18 basis. .9 basis points will be needed to refund the pool for the flash loan. The other nine basis points is your yield.
00:14:16.154 - 00:14:16.800, Speaker B: Okay?
00:14:18.310 - 00:15:18.500, Speaker C: So this exchange can be called in the same way the way that Ernesto explained before, to follow the best tradition with flash loans, this flash exchange is fully exploitable. So there is an exploit that we put in it. And if you find a way to exploit in one single transaction, you can actually keep all the funds because we don't care. So that could be like an interest exercise. You can use flashloan to completely drain this exchange, this very small exchange. One thing that I want to say is that to use the exchange you will need to be whitelisted, otherwise someone else will drain all the funds. So we will provide like I can show you my Telegram ID or you can join our Discord channel and if you build like a test flash loan, we will add you to the exchange to be able to actually execute the function.
00:15:22.950 - 00:15:35.450, Speaker A: The idea was to make life part of the logic that calls this exchange and the funds will be returned there with an extra and then returned back to the lending pool.
00:15:41.790 - 00:15:45.130, Speaker B: And yours, ebo ado.
00:15:52.520 - 00:15:59.604, Speaker C: Okay, so these three are our Telegram handles and also there is our Discord channel.
00:15:59.642 - 00:16:00.036, Speaker B: That right.
00:16:00.058 - 00:16:24.476, Speaker C: Now I don't have the link honestly, but still you can enter the discord channel or contact us on Telegram. We will be available for further explanation of the examples and how to use them. And eventually if you build something to use the flash exchange that we deposited, we will just add you to the whitelist of the contracts. You can actually invoke the function.
00:16:24.658 - 00:16:30.210, Speaker A: Okay, maybe we can about the security, about the decision we took.
00:16:32.260 - 00:16:37.024, Speaker B: Yeah, but about the flash ones will.
00:16:37.062 - 00:16:40.070, Speaker A: Not have the entire but for yeah.
00:16:42.040 - 00:16:45.270, Speaker D: You can find on our website, it's auto.com.
00:16:55.740 - 00:18:15.260, Speaker A: The thing is that maybe it's interesting for you is that when we implemented the flash loans, we kind of predict that this could lead to big problems and big advantage, but potentially big problems and even inside our protocol. So, like I told you that we have this lending pool contract that has all the functions of the protocol. So one of the biggest not bent vulnerabilities but more complex reasoning to know if there were vulnerabilities or not. It was like having with possible rentrancy some functions from the flash loan because some of them are really clear that are a big problem, like the repayment of a loan that is also in this lending pool. But at that point what we decide, for example, and that is quite interesting, is that we put the rentrance reward on everything. And because of the flash loans, mainly because we say okay, this is really difficult to predict how it's going to be the result. For example, you know that this hack on BCX, the first one was a small bug, but also a manipulation of price and the second was with the flash loan.
00:18:15.260 - 00:18:53.820, Speaker A: Like the first one was not with a flash loan of another platform, but the second one was with the flash long because of also some manipulation of price plus a rent transient, that kind of stuff. So the thing is that what it looks that is going to evolve and this is going to affect ethereum development, DeFi and everything is that from now on anybody that wants to build something related with funds they will need to think a lot in flash loans style because it opens another different type of attacks that before they didn't look so powerful.
00:18:54.800 - 00:20:07.444, Speaker B: Let's say that before the reasoning that a certain attack needed too much money to be executed was reasonable, right? Okay, some developers were saying, okay, there is a possible vulnerability here, but the money needed to execute this vulnerability so much that probably will never be executed with flashlon this becomes a much higher risk scenario compared to before. Because right now what you need to perform such an attack is only knowledge. You don't need the money anymore, you just need the knowledge. And this actually makes the whole ecosystem stronger at the end of the day because it forces everybody to think the security more deeply, more thoroughly and not overlooked. Cases maybe before were overlooked and for example, the attacks on Fulcrum were executed only because some design decisions overlooked some possible risks, right? And those risks were exploited using Flashmore. That's it.
00:20:07.482 - 00:21:14.588, Speaker A: And from our experience, for example, like I told before, it's like we released the protocol and it had already the Flash long. The other platform that has available the Flash long had also the Flash loan at that point but people was a bit interested but not so so much at the moment. Just after the BC attack. It was in our discord, our telegram, everything. People just asking, how can I do fly? Sloans because they notice that is so powerful that you only need knowledge and combine the puzle of the different pieces of the fight to get like 350k. Like the first attacker did that nobody knows if it was the same as the second, but yeah, they will bring a lot of headaches for developers. But at the same time, at least in our case, we really believe that this is going to be quite big and that the use cases actually are still to discover because the attack was one and the arbitrage that was more or less the attack is the one more direct.
00:21:14.588 - 00:21:35.760, Speaker A: But there are some others that are also really powerful like for example playing with the bolts in Dai. It's an application that one of our members of the community built a tool for that to make collateral swapping in Dai using the Flash loan and we are developing also some other stuff.
00:21:35.830 - 00:22:47.524, Speaker B: Yeah, the one inch exchange team for you guys, for people who know us, like the cryptomaniacs teams they built actually margin trading platform using Flash loans that allows you to open two x positions, long position or multiple actually configuration on different lending protocols using Flash loans. Like Ernesto was saying, there are people developing collateral swap applications like contracts and applications that allow you to change your collateral on different lending protocols like Maker for example. There is David one of the first guys to develop this I don't remember the collateral swap I don't remember developed a smart contract that allows you using flashloon to move like simply your debt position from ETH collateral to basic attention.
00:22:47.572 - 00:23:59.600, Speaker A: Token collateral and something for example that will come soon from our side most probably is that a lot of platforms like ours that we have over collateralization on the loans but something that people actually that just arrives to this kind of model say is sometimes okay but imagine that in Maker I think it's 150 the over collateralization. So I have the collateral, but I get liquidated with 150. What happens if I already use the funds but I have my collateral but I don't have the medium of exchange the principal to return. I would like to actually swap my collateral and repay the loan with my collateral because I prefer to lose the exposure in the collateral but not lose the bonus that comes with the liquidation. So that for example is going to probably change the rules of the game because playing with this kind of liquidation bonus is not going to be so easy. Because one way of doing is you flash loan from some other place, you repay, you take the collateral, you swap the collateral and you return back to the flash loan. So you didn't lose anything at that point.
00:23:59.600 - 00:24:02.880, Speaker A: You only lose the slippage of exchange.
00:24:04.900 - 00:24:06.016, Speaker B: I think that's it.
00:24:06.118 - 00:24:13.924, Speaker A: Yeah. We are sorry though, but I suppose we can spend the rest of the time, if there is time remaining in questions that maybe there will be.
00:24:13.962 - 00:24:16.310, Speaker B: If some of you guys have questions.
00:24:17.640 - 00:24:36.780, Speaker D: This is going to be a very basic question. But just to review that East London demo that you put together, high level, what are you looking for us to implement within that flash on function? Like you're looking for us to use the flash exchange?
00:24:37.600 - 00:24:54.640, Speaker A: No, this flash exchange is completely like an example that the hackers can use to have just a reference of how it works. You can try in Robston, you can try locally with Ganache. It's a bit more difficult because you will need the protocol to be deployed also.
00:24:54.710 - 00:24:57.004, Speaker D: Okay, but that's just a demonstration.
00:24:57.052 - 00:24:58.720, Speaker A: Yeah, it's just a demonstration how?
00:24:58.790 - 00:25:00.960, Speaker D: From our own contract, we would call.
00:25:01.030 - 00:25:28.168, Speaker B: Your yeah, let's say R1 life example would be of Arbitrage, for example, you need to capture a spread for two different decentralized exchange. Let's say kyber and uniswap. So to capture a spread, you need funds you buy, for example, ETH on Kyber. You go on Uniswap where the price is different. You sell the DTH there and you profit. Right. So this way, this is typical example of a flash loan.
00:25:28.168 - 00:25:58.064, Speaker B: Instead of using your own funds, if you don't have them or you are not exposed on that particular asset, you go on our protocol, take the ETH, sell them on Kyber, buy back on Uniswap, get the profit, get the difference, get the profit. Right? Of course, demoing that in a workshop is complicated because you need the actual opportunity of capturing the spread. Right. So to simplify this, we just built the flash exchange that kind of simulates this operation.
00:25:58.112 - 00:26:23.212, Speaker A: But it's not the city. The most important part for people that wants to experiment with the flash loans is this one, this example. Because if you take this contract and of course the imports and everything, that is basically the addresses to interact with the protocol and you replace in the middle. Do your thing here with your logic, it will just simply work. So that is the thing where in.
00:26:23.266 - 00:26:26.780, Speaker D: Execute operation are we calling that flash loan?
00:26:27.120 - 00:26:29.070, Speaker B: We didn't do that. That is what.
00:26:30.820 - 00:26:34.284, Speaker A: Yeah, it will be like this. Flash loan calls the lending pool.
00:26:34.332 - 00:26:34.704, Speaker B: I see.
00:26:34.742 - 00:26:34.992, Speaker A: Okay.
00:26:35.046 - 00:26:36.000, Speaker D: Flash loan there.
00:26:36.070 - 00:26:36.400, Speaker A: Yeah.
00:26:36.470 - 00:26:38.400, Speaker D: So that's implementing the interface.
00:26:38.900 - 00:26:43.268, Speaker A: And here yeah, the interface is up here.
00:26:43.434 - 00:26:49.424, Speaker B: You would already receive the funds. Okay. In this function, you would already have the funds from the pool.
00:26:49.472 - 00:26:49.828, Speaker C: Right.
00:26:49.914 - 00:27:05.240, Speaker B: Whatever amount you decide at this point you have them and here, imagine with the sample that I said here, you would call Kyber, you would call uniswap sell on one, buy on the other, or the opposite and take the profit and then return back to the funds.
00:27:05.320 - 00:27:28.770, Speaker A: You can have 18,000. Yeah, and of course all the reserves like the famous attack was done with ETH. But the flash loan is not limited to ETH. I mean, you can borrow any of the 16 assets as well. Yeah, whatever.
00:27:29.140 - 00:27:31.648, Speaker B: Can you borrow multiple tokens in one call or would you have to kind.
00:27:31.654 - 00:27:33.650, Speaker A: Of just one not in one call.
00:27:34.500 - 00:27:36.044, Speaker B: And call back in the contract.
00:27:36.172 - 00:28:25.104, Speaker A: That is the consequence of the rentrancy word that for that you will need to flash loan and then interact with the pro called to flash long another one. So that is not allowed because of actually that is, for example, one of the limitations that we will probably remove at some point because we know more or less sure that interacting from one currency with flash loan and with the other in some specific conditions is not problematic or should not be problematic. We still are evaluating that and so that could be interesting to actually flash loan one and flash loan another and combine everything to do some crazy stuff in the middle. Yeah, but right now it needs to be like you can do flash loans with all the currencies if there is liquidity, but it needs to be in separate steps, not in the same transaction. If not, the rental reward will not allow.
00:28:25.222 - 00:28:30.400, Speaker D: Yeah, because in our case it's security first and we're trying to move in like small steps.
00:28:30.820 - 00:28:39.210, Speaker B: Yeah, they are calling it's over. Thanks guys.
