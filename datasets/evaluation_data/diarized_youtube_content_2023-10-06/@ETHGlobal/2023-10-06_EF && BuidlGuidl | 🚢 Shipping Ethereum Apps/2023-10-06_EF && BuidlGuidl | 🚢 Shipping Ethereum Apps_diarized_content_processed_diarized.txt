00:00:17.760 - 00:00:18.310, Speaker A: You.
00:00:20.280 - 00:00:32.550, Speaker B: Hello everyone, and welcome to the ETH Online 2023 EF and Build Guild Workshop shipping Ethereum apps. Joining us today is Austin Griffith, who will be taking us through this session. And with that, I will pass it over to Austin to get the session started.
00:00:33.160 - 00:00:42.310, Speaker A: Awesome. Heck yeah. Thanks for having me. Good on audio, good on mic. Good to just start sharing and go. Awesome. Okay, wait, let me do one of these.
00:00:42.310 - 00:01:00.800, Speaker A: What's up? Yeah. All right, here we go. Today I'm going to be showing off Scaffold E two. It's a great way to build. Let me get the chat going. Yeah, it's a good way to build things on Ethereum. It's a good way to prototype.
00:01:00.800 - 00:01:31.704, Speaker A: It's a good starter kit for a hackathon. If you're thinking about what stack you're still going to build, check out Scaffold ETH and what we have going on here just because it's fine tuned and built for things like hackathons. But it will get you to production, too. You can take your Scaffold ETH kind of prototype and ship it to production quickly. And we're going to try to do that today. So I'm going to start from complete scratch. I'm going to grab if you Google Scaffold ETH, you'll end up here.
00:01:31.704 - 00:01:54.636, Speaker A: I'm going to grab this MPX create ETH, though. You can clone the repo, or you can do this, create ETH. The reason why I'm going to do this, I'm just going to make some owner changer. We're going to make some app where we change the owner or something like that. But the cool thing here is it gives us the option between Hard hat and Foundry. So this time I'm going to try Foundry. Sometimes I do hard hat.
00:01:54.636 - 00:02:21.684, Speaker A: Sometimes I do foundry. It kind of depends on what I'm building, but this gives you the option as the builder to really make that decision yourself. And if we CD into this owner changer directory and we go look at the code whoops. That wasn't what I wanted. There we go. Then you're going to notice kind of two main directories. You'll have your Foundry directory, and then you'll have your NextJS directory.
00:02:21.684 - 00:02:45.456, Speaker A: Your Foundry is, of course, your chain and all your deployment orchestration. And then your next JS is your front end, where you're going to build your app. Really nice integration between someone's drawing on my screen. Whoa. Really nice integration between the Smart Contracts and the front end. And we'll show that in a little bit. Okay, so it finished up.
00:02:45.456 - 00:03:13.976, Speaker A: We can CDN. What it wants us to do is do a yarn chain. So that's going to bring up our Foundry. And I think it's anvil, right? It's going to run anvil and then a yarn deploy we'll do here. And that's going to deploy our kind of template, smart Contracts. Then the other thing I need to do is this yarn start here, and that yarn start is going to fire up our front end and give us this kind of nice interface over here. Okay, so here we go.
00:03:13.976 - 00:03:59.736, Speaker A: We've got our smart contract over on this side in Foundry. And then we've got our front end over here. And this is where really kind of the heart of Scaffold ETH is you're able to tinker and you're able to add things to your smart contract and then have those changes reflected over here in your front end, over in this Debug Contracts tab. So let's just look through this a little bit and just kind of look at what we have for our smart contract. And you'll get kind of an idea of how you can tinker and how you can get started. So if we go to oh, man, there's some chats getting flooded. I don't know what that is.
00:03:59.736 - 00:04:26.688, Speaker A: Okay, so let's tinker around with this. Let's see how this works. We've got a bunch of primitive data types, right? You've got addresses, strings, bools, uns for numbers. We even have a mapping from an address to a UN. That's like a counter per user. We've got events, we've got a constructor, we've got a modifier, really a lot of the real core concepts. And also you can find those at Solidity by example.
00:04:26.688 - 00:04:51.832, Speaker A: If you go to Soliditybyxample.org, there's a ton of examples. Let's say we wanted to just learn mappings today, or we're thinking about using a mapping in our smart contract, but we're not sure if we want to use a mapping or an array of structs. We could kind of just bring that mapping in, and as soon as I paste that over here and hit save, it's ready to go. I can hit yarn deploy. Now watch this. Our whole contract should change over here.
00:04:51.832 - 00:05:24.060, Speaker A: And now there's this new My mapping. So you're able to make small changes to your smart contracts and test your assumptions and try things out and see how they work. If we go over here and then kind of put our address in here, we'll see that the result is zero. But then, I don't know, let's go to the constructor and let's say My map, and let's grab our address here and let's set it equal to 420 or something idk, and then let's deploy it. So now our contract should deploy. We should get a new address here. Yes, we've got a new smart contract.
00:05:24.060 - 00:05:53.708, Speaker A: And now when I ask the My mapping about My address, hey, it worked, right? We can kind of go end to end and really test things. Okay, so I don't really care about that mapping. Let's kind of look into this smart contract a little bit more. It lets us set a greeting. And then there's this premium flag here, which is kind of interesting. There's a premium flag that the Scaffold E developers have added here. And it's just to show you kind of how this code works and what little kind of tweaks we can make.
00:05:53.708 - 00:06:21.764, Speaker A: But it looks like the set greeting function is a payable function. And so if this function is payable, money is going to come in and we're checking the value. If the value is greater than zero, we're setting to premium. Okay. Now we're going to get to tinker with wallets. So as soon as I say hello world here and I try to add some value, it's going to yell at me and say I don't have any money in the faucet. It's not giving me that.
00:06:21.764 - 00:06:53.024, Speaker A: It should give me a warning about not having gas because I've got zero gas in my burner wallet here. I can gas up that burner wallet and now I should have gas. So now if I try to say hello world, sure enough our Greeting gets updated and that premium gets set to true, right? Because there's this extra little thing here looking for value and even the value of the smart contract, let me reload there. Yeah. Is 0.1. Okay. And let's just see that again.
00:06:53.024 - 00:07:24.840, Speaker A: If I say hello world two and I set the value add a little bit 0.1, right? It's going to stay premium. We're going to see money go into the contract, we're going to see the greeting update. Okay, cool. So this is kind of how you get in that loop of tinkering where you're adding things to your smart contract. You're testing your assumptions, you're deploying it and then you're poking at it with this kind of auto updating front end. And this is such a powerful tool in terms of prototyping and figuring out how to build your app.
00:07:24.840 - 00:07:59.764, Speaker A: Let's say we know exactly what we want our app to be at this point. We've tinkered around for a long time and what we've decided is we're going to re implement our own ownership pattern and of course you shouldn't do this. We have open Zeppelin right here. You can import open Zeppelin and use their ownables. You should do that, right? You should not reroll your own unless you are like some huge optimizer or something. If you're just building a product and getting it out the door to save yourself some time, you probably want to just import this. But instead we're going to do it our own.
00:07:59.764 - 00:08:48.084, Speaker A: We're going to build our own. We already have an owner here and I think there's already a modifier here that's making sure that the owner is set right. So really what we need to do is since this is immutable, I'd like to add a new function that lets me update the owner, right? So I'm going to go ahead and create a new function called update owner, right? And it almost figured everything out. You'll notice the one thing it did wrong here is that it didn't add this modifier. We only want the existing owner to be able to update the new owner. Now it's probably going to yell at us for one other thing here because this is immutable, right? If I yarn deploy, it's probably going to get mad and say, that's Immutable. Yeah, that's exactly it.
00:08:48.084 - 00:09:14.312, Speaker A: Okay, so we got to get that Immutable out of there, which is really good for saving gas. But then if you want that variable to change, you need to pull that Immutable out of there. Okay, awesome. Now we have basically a working function. Well, working. We haven't tested it yet, but we have a function in our contract that should let us update the owner if we're the owner, right? So if we want to get in here, we have this new update owner. If we want to set the new owner to Vitalik, this is going to fail.
00:09:14.312 - 00:09:38.560, Speaker A: But let's see what it fails with. Okay. Not the owner. We're not the owner. Because if we look, there is an owner that's getting set in the constructor. So what we need to do is pass in whatever address we want in this constructor. So if we dive into the scripts, this will be a little bit different between Hard Hat and Foundry, but basically you dive into your deploy script and you figure out where it's instantiating your contract.
00:09:38.560 - 00:10:12.192, Speaker A: And it looks like it's using the deployer's private key and getting the address from it and setting the deployer, which is also this faucet address. It's the zero address right of the chain. So instead of setting that address as the owner, let's go ahead and set our address as the owner. So I'm going to get in here and I'm going to do address. Did I put it in quotes? I can't remember if I put it in quotes or not. We'll be able to find out in a second. Oh, yes, I take it out of quotes, I bet.
00:10:12.192 - 00:10:21.484, Speaker A: Let's try that and deploy. Let's see if this works. Please work. Second try. Yes. Okay, now let's go look at our app. Let's go look at our owner.
00:10:21.484 - 00:10:35.432, Speaker A: It's us. Okay, it's working. We're doing what we need to do. We've got our owner set as us. And now if I go over here and I try to update the owner to Vitalik yes, it works. Okay, this is all I wanted to build. This is the point.
00:10:35.432 - 00:11:07.804, Speaker A: Let's just pretend like I've spent hours and days slaving over my solidity here, getting it just right, working like a dog. And then finally I've got it working exactly like I want. I'm ready to ship this thing as an app. Right? We probably don't want to give our users this interface. This interface is great for us, but what we really want is probably some kind of nice looking UI. And there's an example UI here. I'm going to go ahead and redeploy my contract.
00:11:07.804 - 00:11:30.884, Speaker A: So it's nice and clean here, but there's an example UI here. And this just shows you in react code how you can build a pretty front end that talks to your smart contracts. Again, we can set the greeting. Hello world. I can hit send. It's going to send a transaction and pay the gas. Notice we're still using Burner Wallets here, right? We're on our local chain.
00:11:30.884 - 00:12:10.896, Speaker A: Whether it's foundry or hard hat, I'm not using MetaMask. You'll notice there's no dialogues coming up here asking me to switch chains and figure out the nonce and a bunch of issues that you might have with local host editing. With MetaMask, we're using Burner Wallets here, so it's fast, easy, and quick. So it helps you debug and get things to production quicker. So let's make a pretty UI. It's not going to look this pretty, but let's go over to our home screen and let's start working on some kind of React. If you're an application builder and you're putting decentralized apps in people's hands, you're going to spend more time I hate to say this you're going to spend more time on the React than you are on your smart contracts.
00:12:10.896 - 00:12:46.304, Speaker A: And that's a sad reality of building decentralized apps right now. But let's dive in and edit our index page here. All right? And if I hit Save there and we go back over here, we should have like a nice clean canvas, right? We have a nice clean canvas here. So what I want to build let's do a few things here. Let's start with Wagme. Right. So what I want to do is get the address of the logged in user, and I think that's Use account, right? And that should come in.
00:12:46.304 - 00:13:34.800, Speaker A: It came in automatically from Wagme, but if you ever want to just check the docs, we'll go to Wagmesh and we'll look up Use account or something like that, right? You're looking through all the hooks. Look at these awesome hooks you can use all sorts of really cool hooks come out of the box with Wagme, and you can hit those docs and grab that. But basically, I want this right here, right? Use account. I could bring in these other variables of is connected or is not connected or whatever. But we're just going to do Use account, and then we're going to have Address over here, right? And then let's just make sure this is all working right. Let's throw our address in here and make sure it shows up on the page. There we go.
00:13:34.800 - 00:14:02.536, Speaker A: Wow, that's super ugly. But it's there, right? Okay, so since that's super ugly, scaffold ETH comes with a bunch of UI components to make this look a lot prettier out of the box, if I say Address, and that's going to automatically import it from Scaffold ETH. And then I just do Address equals oops, I don't want all this stuff. This is from Scaffold ETH one, and my copilot likes to fill it in. Really, all you need is this right here. Let me show that off again. Address.
00:14:02.536 - 00:14:34.224, Speaker A: And then you plug in the address, right? And if I hit save, look at that awesome component. We get we get a blocky preview. We get the address, we get a copy. If there's an ENS avatar, it's going to overlay it there. This is going to take us to our local Block Explorer, right? But as soon as we point this app at something else, all these addresses will now point to whatever the Block Explorer the app is on. So you can change what network your app is on with a single variable in this Scaffold config right here. Right? Let's just do it real quick.
00:14:34.224 - 00:15:05.100, Speaker A: Let's just say we're going to put it on Gnosis chain. Right? Now our app oh, no, it's not going to work because I need this to be false. Basically, I need Burner Wallets to be in here because I'm using a burner wallet. But now look what happens when I click on this address. Where's it going to go? It's going to go to the Gnosis chain, Block Explorer, right? So that's the value of this address component. Not only is it pretty, it has all these standards and all these nice things where you can make these small changes to your app. And your whole app is going to change because you have these nice components.
00:15:05.100 - 00:15:31.204, Speaker A: Okay, so looking back at our app, we have the address of the user. Okay? Now I want to make like, a card here. I want to make this look a little prettier, so I'm going to go to Daisy UI. UI card, right? Daisy UI is what we're using here for our components. So we have tailwind for our CSS, and then Daisy UI. Here's the tailwind, right? And then we have Daisy UI for components. Right? I'm just looking for a card.
00:15:31.204 - 00:15:47.128, Speaker A: I want to make this look pretty. I'm going to go here, and I'm going to grab this JSX, and I'm just going to paste it in. Just give me this whole thing here. Hit save. Oh, grab this address. I'm not going to want this image anymore. Let's say it's going to say Shoes.
00:15:47.128 - 00:16:13.508, Speaker A: Yeah, perfect. Okay. And we're going to say this is Update, update owner. Oh, yeah, that's looking nice. And then we'll probably do something like have this address in here. Okay, so there's our address. And let's say your address maybe let's put a div with a little bit of padding around it.
00:16:13.508 - 00:16:26.248, Speaker A: Yeah, you just got to think about these things. You got to make your app look nice. Okay. And then we'll stick that there. How's that looking? Your address. Okay, cool. Now I want the owner address.
00:16:26.248 - 00:17:11.764, Speaker A: Okay. So we want to go to the Smart Contract, and we want to ask it for the owner. The way we do that, we could use Wagme's, use Contract Read, but Scaffold ETH has a set of hooks that abstract even more away from you. They take care of network and wallet and chain ID and some of those extra things you can just do use Scaffold Contract Read, and that's going to use some of the other things that you have already around you in Scaffold ETH to kind of fill in most of the details. What you're going to have to give it is let's see. You're going to have to give it a contract name and that's going to be your contract. Notice the type safety here and the TypeScript stuff is giving me exactly the function name and telling me, watch this.
00:17:11.764 - 00:17:29.544, Speaker A: If I hit yeah, look at that. It's auto suggesting the function names that I just wrote in the smart contract. So you add a function to your smart contract and it's going to show up here. And what I want to know is the owner. Right. And there's no ARGs. Sometimes there's an ARGs variation here, but we don't need that.
00:17:29.544 - 00:17:48.112, Speaker A: There's no arguments coming in here. And then we can go here. We could say, okay, so data is coming in and we're going to change the name to owner. So we're going to do a read to your contract and we're going to ask for the owner. And we're going to put that in the state of this variable called owner. And now I can paste that in right here. And there we go.
00:17:48.112 - 00:18:03.636, Speaker A: Our app should show your address and the owner address is the owner. Really? That right. Now that's kind of a bad example. Yeah, it is us. Okay, so let's update the owner, man. Let's update the owner. Let's just set it to vitalik real quick.
00:18:03.636 - 00:18:29.356, Speaker A: I'm going to have to redeploy my contract anyways, but let's just make it so. Yeah, there we go. So now your address, is this the owner address? Is this? Okay, so now what we need is some kind of input that lets us put in a new address, right? And Scaffold ETH has a really handy component for this. It's called address input. Right. If we just bring that in. Let's see.
00:18:29.356 - 00:18:41.776, Speaker A: Did that come in? That didn't come in automatically. I think I did something wrong with how I brought that in. But if I do this oh, whoa. Yo. What am I doing? Let's make sure it didn't come in. Oh, it did come in. Address input.
00:18:41.776 - 00:19:02.744, Speaker A: Okay, so it came in automatically. It's going to have some value, right? Yes. And the value will be some variable new address that we haven't set up yet. And then on change, it will set new address. And watch that. Watch this. Now that I have these two variables, copilot is just going to say, oh, I can tell that you're trying to do that.
00:19:02.744 - 00:19:16.632, Speaker A: That's so nice. Yes. Import react. Okay, so now we have an input variable. Let's even give it a new address. New owner. Right? Here's our new owner.
00:19:16.632 - 00:19:58.588, Speaker A: And then if we type in ATG ETH, we're going to get all that nice stuff like that blocky preview and that ENS address or ENS avatar. Now what I want to do is I need to have this button, right? We need to wire up the button. So when I click Buy now, it sets the new owner. Right? And let's not set it to let's say set owner or update owner is what it's called. Right? I kind of don't want this is weird how this is set up. What if I just do, like, w full? Does this just make a big old button? Maybe I need to do w full here, too. Oh, that's nice.
00:19:58.588 - 00:20:11.368, Speaker A: Okay, cool. And let's do a little bit more padding here. Got a margin maybe? Right? Margin four. That's ugly. Margin, top four. There we go. I don't know these little tweaks.
00:20:11.368 - 00:20:39.144, Speaker A: I've only got ten minutes left. I need to ship this thing. Let's go. Okay, so when you click the button, what do we want it to do? We need it to do a contract write. And so you could use wagme's use Contract write, right. But we're going to use Scaffold ETH because we have some extra magic and wrappers there. So if I do, I don't know what we're going to get out of this, but it's going to be use Scaffold Contract Write.
00:20:39.144 - 00:21:01.044, Speaker A: Okay. And we're going to have the same stuff here, right? We're going to have did this not come in? Let's make sure we import that and then we have what's it going to say. What do we need? What do we need here? We need contract name. Your contract. We need the function name that we want to call. Okay, look at this. It was trying to get me to do transfer ownership.
00:21:01.044 - 00:21:33.530, Speaker A: Right? Pay attention here. If I do that, it's not called transfer ownership, it's called update owner because I made my own junkie function to do it right. And then arg's new address. Right. So we have this cool. I think it's write async that we're going to rename to Update owner that lets us talk to our contract calling the update owner function with this new address that we're tracking. And so then finally we need to do like an on click over here and then everything should be wired up.
00:21:33.530 - 00:21:51.920, Speaker A: On click is going to be equal to and I'm just going to do like an arrow function here and call our update owner. I think we might be wired up. I think we might be set here. Let's see what we have. Okay. And then let's do a yarn deploy. Let's deploy a fresh contract.
00:21:51.920 - 00:22:18.168, Speaker A: Okay. And it's going to start with us as the owner and then it's going to allow us hopefully to set a new owner. And if this works, we are ready to ship this thing to production. Come on, update. What am I waiting for here? I got to hit reload. I don't know why that's not loading faster. Let's try to get oh, no, I can't do it.
00:22:18.168 - 00:22:39.996, Speaker A: I'll have to connect as me to do it. Okay, but it looks like it's working. It's a little slow. I don't know why that was so slow. But basically you're able to use this new UI that you've written to see your address, see the current owner, and then let's see if I reload now and then do ATG ETH. I'm trying to figure out why this thing isn't auto. Oh, there we go.
00:22:39.996 - 00:22:55.524, Speaker A: I don't know. There's something with the hot reload and then subsequent reloads there, that's happening. Okay, we are ready to ship this thing. We got seven minutes left. We got to take an app all the way from zero to production. How do you ship it? Right? Okay. There's going to be two things we need to do.
00:22:55.524 - 00:23:30.604, Speaker A: We need to take our smart contract and we need to put it out on a live network. And then we need to take our app and put that out on a live URL. So to go to a live network, you're not going to be able to use this faucet as your deployer anymore. You can't just deploy to a local chain and it pays for things. We're going to need to do a yarn generate that's going to create a local mnemonic and it's going to hide it in an env file that's already get ignored. And it's going to give us a nice temporary wallet address that we can fund on any network and deploy to. So let's see.
00:23:30.604 - 00:23:43.164, Speaker A: Where do we want to go? I don't know. Should I put this on main net? That would be kind of silly. Let's do maybe a cheaper network. I don't know. Main net would be pretty cool. I don't know. How much time do I have? Five minutes.
00:23:43.164 - 00:24:04.184, Speaker A: Okay, we're going to put this on Main net. That's silly. I should not. But let's see. It can't cost more than 30 USD, right? Let's go. All right, so I'm going to send 30 USD to this nice burner wallet that has been generated here. We're going to wait for that to go through blindly, speeding up as fast as I can.
00:24:04.184 - 00:24:16.700, Speaker A: We got a live demo. We're going to mainnet with it. Why are we going to mainnet with it? I don't know. There we go. Confirmed. All right, yarn deploy network. Network.
00:24:16.700 - 00:24:32.292, Speaker A: Here we go. Here we go. Deploying to mainnet. Hold on to your butts. Here we go. A live demo of a smart contract that I just wrote in 15 seconds and then deployed on Main net. This is a terrible idea.
00:24:32.292 - 00:24:52.468, Speaker A: Don't do this at home. Audit the heck out of your contract. There's a testing suite here. Go get all of your tests and all of your audits done first and all of that. Don't just yellow things to production like Austin. It's a bad decision. But now our app is on Mainnet.
00:24:52.468 - 00:25:13.596, Speaker A: We've got a mainnet app. And if I were to go to debug contracts, it's still pointing to the old contract because we have to go back over to that scaffold ETH config file. You can do a command p and kind of just look for Scaffold ETH. And it's right here. It's this thing we changed earlier. Yeah, we on main net now. And let's go ahead and speed up that hot reload.
00:25:13.596 - 00:25:44.148, Speaker A: And I'm even going to let you have burner wallets on Mainnet, which is also probably a bad idea. Okay, so now notice when I just change this one thing to Mainnet, our entire app switches over to Mainnet Ethereum. And now when I click on this person's address, I get the Ether scan on mainnet ether scan. Right? So we're able to deploy a smart contract. We're able to switch our app to Mainnet. Now we have just a couple of minutes left. I'm going to do a Versaille.
00:25:44.148 - 00:26:11.248, Speaker A: Let's see yarn Versaille. Yolo Prod. We're just going to ship this thing all the way to no. This is called owner update. It's the silliest little app you've ever seen. Yes. Okay, so someone is able to come into your app and technically there's like a greeting and I can say hello world.
00:26:11.248 - 00:26:35.624, Speaker A: Anybody can set this greeting and I can pay real money. I'm about to make a real main net transaction with a burner wallet. This is a bad idea. And I should have sent some money in there actually too, because I wanted some money to be in the contract too and show that we can withdraw from it. But there we go. There's a main net transaction that's saying hello world on our smart contract. And if money were to go in there, only the owner can withdraw it.
00:26:35.624 - 00:27:00.752, Speaker A: If we go back and look at our smart contract here, there's some withdraw function down here and it's only owner, right? So whoever is this owner right here is going to be able to pull this money out of the contract. Okay. Hello world. For real? For real, for real. This time, I'm going to pay 0.1 E and put it in the contract. Okay, nice.
00:27:00.752 - 00:27:33.336, Speaker A: We're just making main net transactions, paying real money on a main net smart contract. Woo wee. Okay, so now our smart contract has money in it, right? And as soon as this app ships, anyone will be able to go to the app. Anyone will be able to interface with the smart contract that we've created and anyone will be able to use this nice simple interface. If they're the owner, they could set a new owner. Let's do it. Let's set the new owner to ATG ETH.
00:27:33.336 - 00:27:49.740, Speaker A: And I'm going to hit this update owner button. I'd be doing this on our live build, but I'm still waiting for the live build to go. So we're just going to have to watch this happen on. Let's go check out the transaction. Oh yeah. Mainet Ethereum. How much am I paying for this? Let's see 17 GWe.
00:27:49.740 - 00:28:09.012, Speaker A: I mean, that's relatively hot. 14 GWe. There we go. So I paid sixty three cents. I paid $0.63 as this guy to update the owner to Austin Griffith. And now if Austin Griffith comes in here, he should be able to withdraw.
00:28:09.012 - 00:28:20.024, Speaker A: He should be the owner, right? Let's test that. This doesn't work as me. If I hit this withdraw button, it's just going to say not the owner. It's going to revert. Okay, our app is up. Here we go. Owner Update.
00:28:20.024 - 00:28:52.196, Speaker A: Check it out. If you go to OwnerUPDATE Versailles app, we've got two minutes left, and my app is live. I'm going to go ahead and connect my MetaMask to this now. And if my MetaMask for some reason is on the wrong network, right, if I'm on whatever this is, it's going to say, hey, switch to Ethereum. Yeah, that's funny. That MetaMask puts that network in there, but wouldn't put any of the other chains in there for the last three years. Okay, there we go.
00:28:52.196 - 00:29:26.832, Speaker A: So we can see that my address is Austin. We can see that the owner address. Now, if I wanted to make Vitalik the owner, right, I could hit this button right here, and I'm quite confident that it's going to throw me a little pop up to make Vitalik the owner. But I'm going to reject that shit because I want to go steal this money out of here, right? I want to rug the condom act. There's a dollar 62. I'm going to pay more money than I am going to get it out. But I want to prove that since we did that work and we set Austin Griffith as the owner with our nice UI that we built just now, I can withdraw this money.
00:29:26.832 - 00:29:43.476, Speaker A: I'm going to spend more money than I will make. But let's go do it. There we go. I'm going to spend ninety two cents to collect a dollar 62 out of a smart contract. But that's it. That's scaffold ETH. You can Google Scaffold ETH and find this nice page.
00:29:43.476 - 00:30:19.516, Speaker A: You can fork it. You can use NPX, Create ETH, and that's going to give you that choice of Hard hat and foundry. You can debug your contracts. You can use Solidity by example to kind of get your contracts right, play around with this, test your assumptions. And then you can deploy your contract to any EVM compatible network. You can deploy your app to Vercel, and it's going to use all the modern stuff like rainbow kit TypeScript, Wagme, VM, all that cool stuff. And you can have an app ready to go live for your users.
00:30:19.516 - 00:30:40.312, Speaker A: Perfect for a hackathon. If you're doing an online hackathon, let's say, for like the next month, let's say. And you need a quick way to prototype and build apps, I think you should try Scaffold, too. It's pretty sweet. Check it out. Thank you all for coming along on this journey. Should I go set the owner? Should I go set the owner to Vitalik now? Let's make Vitalik the owner after all this.
00:30:40.312 - 00:30:50.376, Speaker A: Here we go. And then I'm out. There we go. Make him the owner. All right, done. $0.76. Beth seventy six cents.
00:30:50.376 - 00:30:59.792, Speaker A: I spent my whole life. Thank you so much for having me. Hearts. Hearts, hearts. Thank you to the crew. I didn't know if I saw any questions in here. DMs are open.
00:30:59.792 - 00:31:10.569, Speaker A: Hit me up on Twitter. I'm at Austin Griffith on Twitter and Telegram. Reach out, say what's up? Ask any questions, any closing comments. Rory, how are we? Good.
00:31:10.569 - 00:31:11.012, Speaker B: Good.
00:31:11.146 - 00:31:11.444, Speaker A: Yeah.
00:31:11.482 - 00:31:17.750, Speaker B: I didn't see any questions. If anybody does have questions, maybe we have time for just one. Where can I find a record.
00:31:20.680 - 00:31:38.604, Speaker A: That'S not the one? I think the recording of this right. It should be on my Twitter. If you just go to Austin Griffith ETH, I bet the first link that you'll find is this video. Yes. It's the top thing on. So just click that link and you'll go find a recording. Yeah.
00:31:38.642 - 00:31:54.010, Speaker B: And you can also find it on Youth Global's YouTube channel as well. But, yeah, I think that's probably all the time we have. So, Austin, thank you for the great presentation and workshop. Thank you all, everybody else, for attending. And, yeah, we will see you all tomorrow for.
