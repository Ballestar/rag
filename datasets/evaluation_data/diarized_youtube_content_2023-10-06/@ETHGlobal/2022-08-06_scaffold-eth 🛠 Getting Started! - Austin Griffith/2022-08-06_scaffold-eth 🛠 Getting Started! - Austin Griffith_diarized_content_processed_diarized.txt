00:00:06.410 - 00:00:07.920, Speaker A: All right, let's get started.
00:00:08.530 - 00:00:09.440, Speaker B: All right.
00:00:09.970 - 00:00:29.458, Speaker A: Yeah. Good morning, good afternoon. Good evening, everyone. Depending on where you're calling from, we have the lovely Austin from the Ethereum Foundation here doing a workshop on Scaffold ETH. Getting Started. Questions go into the zoom chat, and Austin will be more than happy to answer them. And with that being said, feel free to take it from here, Austin.
00:00:29.634 - 00:00:52.320, Speaker B: Awesome. I'm watching the zoom. I'll try to do my best to watch for questions. We'll see how it goes. This is an intro to Getting Started to building on Ethereum. I'm just going to dive straight into Scaffold ETH, and then we will basically, I'm going to do, like, a very quick intro to Scaffold ETH, and we're going to dive into Messing Around with Zora. I think that's more fun.
00:00:52.320 - 00:01:08.306, Speaker B: The basic introduction could take a lot of time, but I want to cut that out, and I want to get straight to diving into tinkering with Zora stuff. Okay, so hi. Hi. Hearts. Hearts. I'm Austin. You can reach out.
00:01:08.306 - 00:01:16.174, Speaker B: I'm Austin Griffith on Twitter. Hit me up anytime. This dude. Let's see. Let me pull up that profile. There we go. I'm going to throw it into Chat.
00:01:16.174 - 00:01:23.666, Speaker B: Wait, can I? Where is Chat? Here we go. Boom, boom, boom. That's me on Twitter. Give me a follow. Reach out. DMs open. Hearts.
00:01:23.666 - 00:01:33.946, Speaker B: Hearts. Hearts. Okay, so metabolism hackathon. We're talking about building on Ethereum. Even specifically, we're talking about hyperstructures. Love this. I love this idea.
00:01:33.946 - 00:02:00.210, Speaker B: This idea of smart contract systems that are unstoppable, that are free, that are valuable, that have these expansive fees to them. Permissionless positive. Sun, credibly neutral. This is so cool, and I want to really lean into this, but let's back up real quick and let me give you an introduction to Scaffold ETH. So Scaffold ETH is a DAP building. DAP is such a weird word. A decentralized app building toolkit.
00:02:00.210 - 00:02:35.582, Speaker B: It's really hard to put together a stack and create an app on Ethereum because there's so many moving parts. And so Scaffold ETH wants to get you straight to the part where you're tinkering with your smart contract first and then kind of, like, teach you out of the onion for all the different weird layers that you have to learn. So it does provide you with a lot of stuff out of the box that sometimes feels overwhelming. I get it. But zoom in on learning how to tinker with solidity first, and you'll learn the other things as you go. So I've already cloned this down to my local machine. I've done a CDN, and I did a yarn install.
00:02:35.582 - 00:02:50.434, Speaker B: That process alone takes a few minutes, even on a good connection on a good machine. So I wanted to get that out of the way first. So once we have that, let's see. Let me tinker with this to get this little picturey. Guy Idk. Idk. What do I want there? Okay, whatever.
00:02:50.434 - 00:03:46.094, Speaker B: Okay, so we've got a yarn start which will fire up a react app. Then we have a yarn chain which will fire up your hard hat node. And then we do a yarn deploy, which deploys a template smart contract to a front end that lets you tinker with it. And this is kind of the main dev loop you get in when you get started with Scaffold ETH, you'll come over here and you'll say, I want to build UN 256 public counter, because that's the first thing we always build, right? And then I want some kind of function that lets me increment the counter, right? And it'll be public. And there we go. Yes, just do that, right? Ship it. And what we'll see is this thing auto adapts to that, and it sees our new counter, and it lets us if we grab some funds from the faucet, it lets us increment that counter.
00:03:46.094 - 00:04:18.400, Speaker B: So this is like the heart of Scaffold ETH. You can tinker with your solidity. You can poke at it over here and test your assumptions. And really what a lot of people do is they'll grab solidity by example, and they'll go to primitives and data types, and they'll grab one of these primitives and they'll paste it in over here, and they'll yarn deploy, and they'll see it show up in their app, and they'll understand, okay, this is what an address looks like. Wait, that didn't work. Where did that address go? Is it not public address? Public save it. Deploy it.
00:04:18.400 - 00:04:44.994, Speaker B: That should show up over here. Yeah, there it is. Okay, there it is. Testing our assumptions, trying things out, making sure things work the way we want them to. What you'll do is you'll kind of COVID a lot of concepts. If you're a decent programmer, you can get the syntax of solidity quickly, basically using solidity by example and Scaffold ETH in parallel, grabbing these concepts and working through each one. Okay, what's a mapping? You grab a mapping.
00:04:44.994 - 00:05:10.400, Speaker B: You throw that mapping in here. Now you've got a mapping. Maybe you want to set the My map of some account to let's grab our front end account and set it to 100 for some reason and deploy it right now. You've got this new mapping, and you can check the mapping and who has what values. Let's see what the mapping says for our account. Hey, it's 100 good. Cool.
00:05:10.400 - 00:05:29.894, Speaker B: The speed run of the speed run of the speed run of Scaffold ETH is you can pull down Scaffold ETH. You can edit your smart contracts. You can get a feel for how it works. You can poke at things. I recommend just going through Speedrun ethereum. If you go to speedrunetereum.com, it takes you through exactly the concepts that I want you to cover.
00:05:29.894 - 00:06:23.810, Speaker B: Once you've got the syntax and you've got Scaffold ETH, then you move on to the challenges. The first one is just building an NFT. The second one really shows the power of ethereum and kind of starts to teach you, giving you more context for what works on ethereum and what doesn't and the kinds of things that we're building going back to hyperstructures, right? They need to be unstoppable and free and permissionless and all this other cool stuff. But this one really shows you how basically to build a coordination mechanism for adversarial parties, right? We have a bunch of jerks that want to coordinate financially to stake in on something. This smart contract teaches you about it. The TLDR is you need to align incentives and write your rules correctly to make that work. And you kind of use it like a state machine where it's in a deposit state at first and then someone has to poke it, right? Nothing's automatic.
00:06:23.810 - 00:06:49.406, Speaker B: Someone has to switch it over to the next state, move it to a success state or a failure state. You'll get in and you'll learn all of that stuff. So TLDR, Scaffold ETH, speedrun, ethereum, that's a great way to get started. That could be my whole talk and we're done in nine minutes so we can go tinker with some other stuff. Now I'm going to close that stuff out. I'm not going to worry about it. I'm going to assume that you can pick up Scaffold ETH and get going quickly.
00:06:49.406 - 00:07:30.954, Speaker B: I could make the whole talk about this, but I think it's more interesting if we dive in and tinker with Zora contracts, right? So first of all, I'm going to put on my Scaffold ETH hat. I'm going to be a Scaffold ETH builder first and we're going to get in and we're going to build a smart contract that eventually is going to be kind of it's going to be a fake hyperstructure. Basically. I want to make something that's sort of like a hyperstructure, but I'm going to leave out some details because this would take me far longer than an hour to be able to build something like this. But this is where I want to tinker, I want to set up, let's see, let's crush our counter, let's crush our My map. Let's do something with this contract. Let's do something interesting here.
00:07:30.954 - 00:08:22.554, Speaker B: So what I'm imagining after looking at the Zora contract, it has this asks contract and we'll get to that in a little bit. But there's this finder's fee which is really interesting and my gut feeling is that at a hackathon, everyone's going to hack around that finder's fee and that finder's fee is going to be this really interesting thing. But thinking of a hyperstructure and these incentives that are expansive. I want to build a curation tool that helps me curate the items on Zora that have finder fees and then reward the people that curated correctly, sort of. Right now that system would take a long time to build, but I'm going to build like a janky version of it just to tinker around and kind of show you just what I'm thinking and also how scaffold ETH works. So let's go ahead and clean this out. Okay.
00:08:22.554 - 00:08:58.090, Speaker B: And I've done a bunch of stuff earlier today where I'm going to grab a bunch of copy paste examples just to be able to fit this into an hour. So, yeah, the first thing is let's think of our hyperstructure, our smart contract. What do we want it to do? Well, I think what we're going to do is we're going to make it a let's see, I have one here. We're going to make it a nope, that's not it either. Let's see, where did I have that one saved? I have a contract somewhere that I can copy and paste these things and that will be easier. I think it was called Zora second. That's it.
00:08:58.090 - 00:09:33.860, Speaker B: Okay, let's open that one up too. There we go. Okay, let's look at this smart contract. So packages, hard hat contracts, your contract. So this is my final contract, but I'm going to bring things in kind of one at a time and explain it. So the first thing we're going to do is we're going to make this thing a token. So we're going to inherit the ERC 20 standard, right? And to do that, we'll say this is an Is ERC 20, right? And then we do something down here where we call the ERC 20 constructor and we kind of give it a name.
00:09:33.860 - 00:09:56.330, Speaker B: This is going to be the curator, right? I don't even know if I spelled that right. And we'll give it a symbol of cr. T-O-O-R-I have no idea. I don't know what I'm doing. Okay, now let's see if that compiles right. We're tinkering, we're learning. Did we bring that incorrectly? And do we have a whoa.
00:09:56.330 - 00:10:08.654, Speaker B: Do we have a oh, I don't have contracts. I need that. There we go. I don't know. Did I copy and paste that in? How did that not come in correctly? Idk. All right, we are in. We've got it.
00:10:08.654 - 00:10:45.626, Speaker B: So we are now a token, right? With those three lines, we turned this contract into a token. I'm going to take out some of these things. Let's see. I might need some of that in a little bit. Let's just go ahead and start looking at how we want this curation to work. So what I'm thinking is we'll have some kind of curate function, okay? And that curate function is going to take in some address and token. If you mess around or you look at the Zora stuff, they basically track every item by it's some NFT, right? It's some ERC, 721.
00:10:45.626 - 00:11:18.934, Speaker B: So it's some token address with some token ID. And the combination of that token address and token ID is sort of how they track all these things. I think I want to be like an outside. There's so many good resources that have been shown off today, like the ZDK and all the different Zora tooling. But I'm kind of an outside perspective here. We're going to kind of take an outside perspective and just kind of go at this without knowing what we're doing and kind of see what happens. So I think they track things by an address and a token, but we'll find out.
00:11:18.934 - 00:12:01.822, Speaker B: And then I'm going to have a like so basically my Curate function says, give me some token, address and token ID and tell me whether or not you like it. And if you do curate this I'm going to use an event, right? So I'm going to emit some event that's going to help sort on my front page. So I'm going to use a website that's basically just listening to the events of this contract to curate some objects, some NFTs that are for sale. So there we go. No questions in the chat, of course, because I'm going a million miles an hour in a million different directions. Whoa, look at that. It wants to fill in all that stuff.
00:12:01.822 - 00:12:58.742, Speaker B: No way. Okay, so we have ERC, 20 and it has a Curate function and it mints you one way. It mints you one little token every time you do some kind of curation. And so this isn't civil resistant. There should be about a million requires on this thing or at least making sure there should be some more economics built into this too, right? I could basically curate like crazy and I can get a bunch of these tokens. But what I want to do is I want to have a claim function, okay, and that's after some curation process has happened and this contract has earned some ETH, then I want to have some kind of claim function that allows a user to get in here and burn some amount of tokens, okay? And what we'll do is we'll send them some amount of tokens based on the total supply of ETH that's in the contract. And you can see here they'll be minted some and then they'll burn some.
00:12:58.742 - 00:13:45.330, Speaker B: So it's basically this contract is kind of like when you put reserves into uniswap and you get an LP token. In this case there's going to be some curation contract that's going to be earning funds and we're going to have a curation token that basically represents you curating. Now of course, we would want to track probably if you liked something and then that thing was popular so then your curation would get more points. But we're just in a very raw, unchecked, unsafe way. We're basically just going to mint you some tokens if you say any kind of curation and then let you claim the money from the contract if you were a curator. We need more rules here. We need more game theory to go into this.
00:13:45.330 - 00:14:25.038, Speaker B: Austin YOLOing in an hour is not a good idea, but that's how we're going to do this. So one thing that I noticed, right, as the call was starting is it gives out the fees when the fees go to a contract, or maybe even at all. I only got one transaction to go through before I started all this, but I noticed it comes in WETH. So we're going to go ahead or weath if you call it weath if you're a weather or a weather. I'm going to grab the WETH contract. I've got an interface here that lets me withdraw, which I'm hoping swaps from WETH to ETH. So let me bring that interface in here.
00:14:25.038 - 00:14:46.786, Speaker B: I have no idea if this is going to work. It's totally untested. But I'm going to add a little unwrap function and I'm going to let anyone call it this function unwrap. Oh, wait, we need to instantiate the WETH contract. Right? Okay. Let's just go over everything we just did there. So we brought in a Weth interface.
00:14:46.786 - 00:15:07.562, Speaker B: We instantiate it here when the contract deploys, pointing at this, which let's just triple check that this is main net WETH. It should be like weft nine or something like that. Right. There's the contract. There it is. Okay, so I'm going to assume that works. So when the contract deploys, we'll have a nice little interface to the WETH contract.
00:15:07.562 - 00:15:25.122, Speaker B: And then if someone calls unwrap, it allows our WETH to hopefully get converted to ETH. So then someone can claim it. Idk. If it's going to work, we're going to find out. But this is kind of the process you want to get into with Scaffold ETH. Let's see if this thing even compiles. We're kind of tinkering around.
00:15:25.122 - 00:15:48.534, Speaker B: We're throwing solidity at the wall and we're seeing what sticks. Obviously not great for a long term project, a hyperstructure needs to live forever. And you need to understand that when you deploy it, it's going to get attacked from every angle for the rest of time. This is not that thing. This thing is very attackable, but it just gives you an idea of how to prototype. So this did compile. We do have a working contract.
00:15:48.534 - 00:16:17.014, Speaker B: Let's go ahead and deploy it locally and tinker around with it real quick just to make sure it does what we think it's going to do. Okay, so here is our contract. Holy cow. A lot more things now, right? The fact that we made it into a token brings in a whole bunch of other things. The fact that we can curate. Okay, so let's say we have some token address, which is just the address of the contract. We're just filling stuff in and we're going to curate, right? We're going to call some curate function.
00:16:17.014 - 00:16:34.314, Speaker B: This should mint us one token. Okay, there we go. And then let's do that again. Some token, right? Token three. And let's say false. Basically, we're curating some tokens here. We're saying this NFT I like it.
00:16:34.314 - 00:17:01.134, Speaker B: This NFT I don't like it. And it's minting us some tokens that basically represent our cut of whatever money is in the contract now. There's not any money in there right now. Let's go ahead and just since we're on local host, we can send $100, no problem. And it doesn't cost us anything. Now there's $100 in the contract. What we want to see is when this dude claims his money after curating.
00:17:01.134 - 00:17:24.090, Speaker B: Let's see, where is that claim? Is that claim function public? It's there. Oh, wait, is it not here? Oh, no. Did I forget to deploy? I think I made maybe forgot to hit save. Okay, we may have all right, back it up, back it up. Back it up real quick. Hopefully this compiles and deploys and it has a claim function. There's the claim function.
00:17:24.090 - 00:17:37.514, Speaker B: Okay, we just missed the claim function before. Okay, so real quick, I got to recurate. Let's curate this token. True. Okay. And that gives us one. Okay, so now we basically own 100% of the supply.
00:17:37.514 - 00:18:08.134, Speaker B: You can imagine a lot of other people could be curating also, and then they would own tokens that represent their portion of it. Basically, we own 100% of the supply, but let's put $100 into this contract and then let's claim our one. Right. We have our one token. This would be two if we curated twice. But basically we're redeeming our curation tokens for whatever value has accrued in our contract. And if we claim that, hopefully this money disappears and goes up here.
00:18:08.134 - 00:18:25.646, Speaker B: There we go. It did. It worked. Okay, so our contract sort of does what it needs to do. If you were putting this on main net and you're not me, you should definitely be way more safe, have way more tests. You should have way more required statements here. Definitely not just let anybody unwrap it.
00:18:25.646 - 00:18:49.334, Speaker B: A lot of things that are happening here are not safe, but they're good for a good demonstration and showing off how to use Scaffold ETH to really prototype. So if we were going to put our curator token on mainnet and start thinking about the mainnet contract, I think the next thing let's see. Let me check my notes here. Curator. Got it. Basics of scaffold. E got it.
00:18:49.334 - 00:19:03.094, Speaker B: Build out a contract that issues a token to curate. We got it. Lets them burn when they claim. Got it. Right. Now we should see that the total supply is back to zero now that we've claimed. Okay, let's create some buttons.
00:19:03.094 - 00:19:38.594, Speaker B: Okay, so you're tinkering around here. You're kind of using this nice contract interface, but eventually you're going to need to build your own UI. So I've already grabbed a couple buttons, but let's jump to our app. So what's going to happen is we're going to need a button that lets someone say thumbs up or thumbs down on an NFT. And when it does that, it needs to send a true false curate to our curation contract. So let's get into our front end real quick and tinker with that. Okay, so I've got some here, so I'm going super fast here.
00:19:38.594 - 00:19:51.838, Speaker B: I'm going to go just steal them out of I think I have some. Here we go. Here we go. Mid and busin. I love these buttons. They're fantastic. Okay, so I am not a cool guy, but I'm putting in mid and Bussen.
00:19:51.838 - 00:20:18.194, Speaker B: Like, I know what I'm talking about, but I am an old dude that does not know anything about Gen Z. Cool words. But here we go. This basically creates a button that talks to our contract and calls curate. And it's just going to curate some random address and some random token right now. And it does true for thumbs up and false for thumbs down. And let's see if we have oh, yeah.
00:20:18.194 - 00:20:31.974, Speaker B: Now we've got mid and busing. Very cool. And if I say, OOH, this one's busing. There we go. Then it actually should create yes, the total supply goes up. And if I say no, this is just mid tier. This total supply goes up.
00:20:31.974 - 00:20:46.918, Speaker B: Okay, cool. So now we have buttons that let us vote on tokens and mint our contract. And that's working. Now what is next? So now it's time. Okay. Yep. Now it's time to put on our Zora hat and go start tinkering around with Zora.
00:20:46.918 - 00:20:55.950, Speaker B: We've done enough scaffold, Ethan. For now. Now. It's zora time. Right. Got this from the Zora office when I was there a couple weeks ago for NYC. Love it.
00:20:55.950 - 00:21:05.600, Speaker B: Great. Great hat. Okay, so let's go tinker with this contract. Let's go look at it. Oh, yeah. We bus in, we busting. There we go.
00:21:05.600 - 00:21:24.280, Speaker B: I have a question about scaffold. If you have a scaffold ETH question, there's a scaffold ETH chat. You can hit me up in the DMs. I probably won't be able to answer it right now, but if it's easy, I will. What I want to do is go look at this smart contract. All right, let's imagine I am an adversarial jerk. I don't know.
00:21:24.280 - 00:21:54.318, Speaker B: I am not a person that works at Zora, right? I have my Zora hat on because I'm excited about Zora. But let's think about this thing as a hyperstructure. Let's think about this thing as credibly neutral as permissionless, right? Any MF in the world can go to this right here and look at this smart contract. And look at this. Look how awesome this is. Look at these sweet graphs they have that kind of show you what's going to happen when you call these functions. This is a permissionless API that anyone in the world can get to.
00:21:54.318 - 00:22:16.866, Speaker B: I even have a node running right here that I could be sending all my transactions to. And it's talking peer to peer to a whole network. So cool. Okay, so what I want to do is I want to tinker with this. Let's see. So we have this create ask function, okay? And I think I want to call that and I want to create an ask, then I want to list the Asks somehow. Of course I can grab the zora.
00:22:16.866 - 00:22:42.222, Speaker B: ZDK? I could grab the subgraph, and I can query the subgraph for a list. But what I'm going to do is going to be super raw. I'm just going to listen for events. I'm going to have my front end just listen for events of this Create Ask function. See this Ask created right here? We're going to listen to those. Okay, but before I even do that, let's see. Do we want to list them first or do we want to yes.
00:22:42.222 - 00:23:08.714, Speaker B: Okay, let's bring this contract into Scaffold ETH. I think that's the next step. So how do I import this whole contract into Scaffold ETH so I could work on it just like I have my contract here? Well, it's easy. You've got that Abi and that address, right? Well, if I didn't have so many contracts, I had to scroll through here. Okay, there we go. Okay, so I'm going to grab this Abi and I'm going to go into the external contracts. I'm going to paste this bad boy in here.
00:23:08.714 - 00:23:57.590, Speaker B: So this is the asks abi, right? And it's going to be equal to that. And then we're going to have a new contract called Asks. And that's the abi. And what's the address? Okay, now, I've got it built into scaffold ETH. Now I can go to my app. All right, it's time to go to mainnet, right? I'm going to set my app on main net, and then I'm going to go to that Contract object and I'm going to create a new contract interface that talks to the Asks contract. Okay, there we go.
00:23:57.590 - 00:24:29.570, Speaker B: There we go. I think that's just going to work. But let's see. So now, notice now when I hit Reload, scaffold E is on main net, right? And so when I click an address here, it's going to take me to the main net Ether scan. If this was on Rinkabee and I clicked this address, it would take me to the Rinkabee Ether scan. So Scaffold ETH does this really good job of keeping you on the right network and setting your network up and urging your users to get on the right network. You'll notice that our contract now is not connected because it's not on main net yet.
00:24:29.570 - 00:24:45.254, Speaker B: We'll have to get to that. But look at this. We've got the Asks contract and we can interface with it. And I could create an ask if I want. Very cool. Okay, so I'm not going to use this, though, after all that, getting this in here. Okay.
00:24:45.254 - 00:25:03.734, Speaker B: So I needed to get this in here so I could read the events from it. But I think I'm going to create my ask. Let's get the events going. Let's get the events going. Let's read the events. We've got the Asks contract in. How do we read events from it? So you could ask an API for what are the current asks? You could ask a subgraph.
00:25:03.734 - 00:25:25.506, Speaker B: You can also just ask your own machine. Right? We're going to query the blockchain directly and we're going to say, just give me the events that came out of this contract. We'll use the API just for fun, just to add it in. But technically we're the third party. We're some disinterested third party just messing around with this. So what we need is an event listener. Okay.
00:25:25.506 - 00:26:08.274, Speaker B: So I'm going to bring in the event listener from ETH Hooks, which is just like Wagme. It's an earlier version of what Wagme became. But we're going to bring in the event listener from Ethhooks. And then we're going to use this event listener to connect to the asks contract. And what it says is it has us set a block. Basically, you listen for these events, given some past block, I'm just going to go to the contracts. Normally you would definitely build some kind of an indexing system here and you would figure out how to show just the right amount.
00:26:08.274 - 00:26:32.362, Speaker B: I'm going to basically back up to about here 2 hours ago, and I'm going to say, don't go any farther than that. Just look back 2 hours ago and give me all the asks. Now let's see if this thing complains. I don't want to deploy. Let's see, is the front end no, the front end is not happy about what is block on load? I don't want that. Get out of here, kitty. All right, save that.
00:26:32.362 - 00:26:51.162, Speaker B: Okay, so it's really mad about the format that I put that into that external file, but let's ignore the warnings. Don't tell me what to do. Compiler. Okay, now let's see what we got here. We should have an inspect and we should be able to get some asks here. There we go. OOH, there's an array of asks.
00:26:51.162 - 00:27:17.602, Speaker B: Look at that. Okay, so this is coming out of this contract itself. We're asking the contract itself, not talking to Zora at all. We're asking the contract itself. Give me all the asks that are created on this permissionless platform by all these adversarial parties and tell me what I can buy. Right. What asks can I fill and even can I see here? What the no, I can't.
00:27:17.602 - 00:27:28.074, Speaker B: I'm looking for the finders fee, I think. The finders? Yeah, it's got to be here somewhere. I don't know. I don't want to dig in there, but we've got events now. Okay. So we need to display these events. Right.
00:27:28.074 - 00:27:54.258, Speaker B: So I have this sorry for all the copy pasting of the code. I definitely will commit this somewhere, but there's no way I could get this done in enough time. So I'm kind of speed running this. But basically what we're going to create here is a use effect. Okay. And it's going to fire when we get new ask events. And it's going to look through all of those asks and it's going to okay.
00:27:54.258 - 00:28:31.386, Speaker B: This is where we need the ZDK. So normally what we would do if we were being very disconnected third party, we'd go to the smart contract of each one of these tokens and we'd ask for the metadata and we'd use that to render it. But I'm going to bring in the ZDK just for fun, just to show that that's another thing that we can add here. So we're going to need let's see, where is that ZDK? We're going to need the ZDK, right? Grab this and bring it into our app. Really speed running this stuff. Okay. And we're going to need to install it too, right? Let's go ahead and stop this, dude.
00:28:31.386 - 00:28:58.438, Speaker B: And CD into packages, react and yarn add our ZDK. And while that's going, I need to bring this stuff in. What's that Z doing right there? Don't trust it. Don't trust it. All right, so we bring in the ZDK. We link it up to mainnet. And I don't think I have an API key.
00:28:58.438 - 00:29:37.650, Speaker B: I'm just going to do that for now. We'll bring in an API key if we need one. You can talk to Zora engineering the Twitter account and hit them up and they will hit it. But I think they'll give us enough requests just without a key. We instantiate the ZDK, and then down here at the bottom, we do a ZDK token with the ARGs of the token. And let's see how happy the front end is with this. Now if we do a yarn starty, yarn starty, hopefully we will get what do we got? What do we got? What do we got? There'll be some kind of error message of what I did wrong.
00:29:37.650 - 00:30:05.966, Speaker B: I don't think I got it all right at once. But hopefully we will be able to loop through each of the asks, query the API for it, and then we're going to store an object in the state that gives us basically just a list of all the we may need. That API key we'll see here. I'm getting some. There we go. So we've got asks. Let's see.
00:30:05.966 - 00:30:24.900, Speaker B: Do we have something printing out ask content? Let's do that next. Let's do a console log. You know what? No, I'm just going to trust it. I think we've got the ask content ready. I'm going to assume that that use effect is doing what it needs to do. And I'm going to take that ask content. Oh, I did print it out over here.
00:30:24.900 - 00:30:38.620, Speaker B: It's in there. It's in the console. This is what I want to do, though. I want to list it out. I'm going to steal this list right here. Okay. And I'm going to paste that into my app.
00:30:38.620 - 00:30:58.990, Speaker B: Basically, I want to list out all of these objects. Where do we want to list them out? Maybe right above right here. Right here. Okay. So we're asking for all the ask. Asking for all the ask. We're asking for all of the asks events.
00:30:58.990 - 00:31:15.970, Speaker B: So anytime anybody asks this hyperstructure an Ask, we want to see that. We want to list it here. We want to go get some information for each one. And we want to display that information here. And that's what we're going to do. I'm even going to use the Zora. What is this? The zora embed.
00:31:15.970 - 00:31:41.600, Speaker B: We're trying all sorts of things here. We're bringing in the ZDK to query token information, and we're bringing in the Embed to display it. I think it's going to complain that I need a list here in Ant. Let's see how far we get here. Let's see if we can get a list of tokens. Okay, no list, nothing yet. Let's see.
00:31:41.600 - 00:32:05.122, Speaker B: Let me look at okay, let's think through this. We've got the ZDK, we've got this. We've got asks showing up. Hopefully the use effect is happening. Let's see. Let's go to that use effect and just troubleshoot it real quick. Let's check ask Content here.
00:32:05.122 - 00:32:19.322, Speaker B: Saving content. Let's double check this saving content. Right? Okay. It does save some content. Okay. And this is what the content looks like. It's got the Ask, the markets, the token, but only one of them.
00:32:19.322 - 00:32:48.946, Speaker B: Does it happen more often? I feel like this should happen a few times. Okay, we'll get out of here. Okay, let's see. Ask content now should be in this list, and the list should be rendering if we have some Ask content. Maybe I need to go back farther. Oh, no, there's the items. Oh, wait.
00:32:48.946 - 00:33:06.114, Speaker B: Oh, there they are. I just didn't give them enough time. Come on, you got to be patient. Got to be patient. Okay, let's reload and make sure everything's still happening here. This is another reason why most people build indexers and don't read events raw in their front end is it takes some time. You've got to go out to an RPC.
00:33:06.114 - 00:33:32.850, Speaker B: You got to ask this guy, like, what are all the events for this contract? You got to look through all of them, decide which ones you're going to display. That does not happen on page load. Right? It's a little slower. Okay, so we've got some Asks, though. Now let's set it up so we can vote whether or not any one of these is busing or mid. So we need to grab our buttons and we'll bring them in. Probably some div right here.
00:33:32.850 - 00:34:13.854, Speaker B: Right? Okay. And then instead of doing some autocomplete for our token IDs, we have it. Now it's the Zora item collection address for the token name, and it's the Zora item token ID. Okay, so now we have voting. Right? If we had our contract deployed, we could hit this button and it would vote on this specific orb. Right? I think that's a Zorb or something. Right? So I could say that Zorb is busing and I could click that button and it would send a transaction to our contract which isn't deployed yet.
00:34:13.854 - 00:34:53.270, Speaker B: And it would give us a curation token and it would help the front end read the events and then sort these items so the more busing ones are up top and the more mid ones are at the bottom. Man, I'm way too old to be using this nomenclature, but I'm trying, kids. I'm trying. All right, so we've got our busin and our mid votes. We've got our contract, we've got the ZDK in, we've got the list, we've got the buttons generate account and deploy contract. Okay, it's time. Let's deploy our contract to mainnet.
00:34:53.270 - 00:35:13.886, Speaker B: Oh, man. Oh, you know what? What? I want to okay, we'll post an ask after this. Let's deploy our contract. All right, anybody deploy a contract to mainnet live for their talk yet today? I hope so. I hope so. We're going to do it here. I'm going to do a yarn generate that's going to create a local deploy mnemonic.
00:35:13.886 - 00:35:51.210, Speaker B: Then I'm going to fund that deploy mnemonic with some cash money, maybe what, 60, $70? What's gas at these days? It's not too hot. That would be the worst if I was trying to do a main net demo and like, gas shoots up to like, 400 right now, that would not be good. Okay, so we're going to fund our deployer account. Let's take one last look at our contract Idk. If this is going to work, I'm especially unsure about this unwrap function that anyone can call. I mean, someone could just start calling curate on this thing. Please don't do it at home.
00:35:51.210 - 00:36:12.770, Speaker B: Please don't attack my contract. You could definitely attack it. Give me 20 minutes and then you could do whatever you want. Please. Oh, and by the way, in a world of hyperstructures, you don't please, please. You assume everyone is adversarial and you write the rules correctly so no matter what, they can't mess with things. But we're going wild here and we're doing things that are not the best.
00:36:12.770 - 00:36:27.640, Speaker B: All right, yarn deploy network mainnet. Please work first try. Here we go. Here we go. There it goes. And it actually should show up here when it gets deployed too. Let's see.
00:36:27.640 - 00:37:00.782, Speaker B: Okay, then once we have our contract deployed, we have it in our app, we need to post an ask. That's going to be the next going to use. I could use this interface to post an ask. It's pretty good, but I'm going to just kind of show off a little bit of cool composability from the ecosystem. My buddy Carlos has built or is building this thing called Abi Ninja. And it's really cool because what you can do is I can go to look at this. I'm just going to copy and paste the ether scan link of this contract.
00:37:00.782 - 00:37:16.870, Speaker B: This asks contract right into Abi Ninja, which will be at Abi Ninja one day. And I'm going to hit load contract. And there we go. We have the same kind of contract, but it's a little nicer interface. Right. We can kind of see what's going on. Oh, man, this has taken a long time to deploy.
00:37:16.870 - 00:37:32.442, Speaker B: Oh, man. I might need to speed it up. Let's see. Let's get our ask in, and maybe gas will go down. Gas has, like, shot up a little bit since I, well, like ten GWe or something. Okay, I'm going to assume that gets deployed. Let's create our ask.
00:37:32.442 - 00:38:03.682, Speaker B: We need to get an ask into the pool so it shows up here. Right. We need to be able to see our ask. Oh, you know what? We're missing some display information here. Let's get that a little bit better too, here. We need another div that shows more information, because what I want to do is sell an SVG NFT to really show the permissionlessness of this. And it turns out that Zora doesn't render or respect hardcore SVG NFTs.
00:38:03.682 - 00:38:24.986, Speaker B: So this is going to be something cool. I'm going to put an NFT through the hyperstructure that their front end does not f with at all. It's like, no, I don't want anything to do with that. It won't show up on the Zora side. But I'm using the hyperstructure permissionlessly as me as a guy that wants to sell an NFT as long as the NFT matches the standard. So weird little thing we're going to do here. Let's get some a little bit more display.
00:38:24.986 - 00:38:41.634, Speaker B: I want to see, like, the token name. Where do I have that stuff saved? Here, I think. Let's see something like this. Okay. Where's this extra render come in? Do we have that yet? Oh, we do. Okay. What's this extra render doing? Oh, cool.
00:38:41.634 - 00:39:02.342, Speaker B: It's checking to see if there is an image URL, and if there is, it's rendering it here. What's this going to do? Oh, throws an error. We need balance. Okay. So the balance component is a handy little component that you get out of Scaffold ETH that will display an ETH balance using the current price of ETH. Yeah. So this is that balance component.
00:39:02.342 - 00:39:13.514, Speaker B: Instead of showing zero point 24, it shows you $3,000. Right. And that's just a lot nicer. It's a little easier. Okay. And this is a Lugie that I already sold. But this is what we want to see.
00:39:13.514 - 00:39:24.080, Speaker B: We want to see that the Lugie is here. We want to see did our contract deploy? Our contract is live. There it is. Boop. Live on main net. Please don't, please don't. Please don't attack it.
00:39:24.080 - 00:39:43.746, Speaker B: Okay, we have just 15 minutes left to finish this all up. We need to create an ask, and we need to get it to show up here. Okay, so let's get that ask created back that ask up. No, I don't know. I'm old. Okay, here we go. Let's get a token contract.
00:39:43.746 - 00:39:56.534, Speaker B: So we need the Lugies. All right, so I'm going to my SVG NFT contract. We're waiting for it to load. It takes a little second. It's doing the same thing. It's getting all those events. If you watch this console, it's parsing way too many events.
00:39:56.534 - 00:40:13.346, Speaker B: And then there we go. There are our luggies. And a Lugie is just an SVG NFT. It renders it in the contract itself. Check out SVG NFTs. It's a lot of fun. But this chubby boy right here, this chubby green boy is number 1695.
00:40:13.346 - 00:40:54.990, Speaker B: So I am going to create the Ask with token number 1695 and the token address contract here. And let's see now, there's an approval process that needs to happen here. You need to do two use. I would need to use abi ninja in another window, and I would need to have it go talk to the Lugie contract. Okay, so let's just grab let's see. Can I just go to the Lugie contract on ether scan? Yes, I can grab that and paste it in here. Okay, we would need to use this and we would need to do an is.
00:40:54.990 - 00:41:16.882, Speaker B: No, not Is approved for all. We would need to do a set approve for all. And we would need to approve this dog right here, this ERC, 721 helper. Okay, and then there's a second one you need to do on the modules contract. Let me go find it. Let me go find it. I think Max sent it to me earlier.
00:41:16.882 - 00:41:39.926, Speaker B: Where would that be? There's a second. You have to approve this address with a true on the modules contract. Dang it. Let me just go find it. It's not like we're crushed for time or see. Let's see, where is it? Max, I'm going to our chat. No, you sent no, no, I have it in my notes.
00:41:39.926 - 00:41:58.926, Speaker B: I have it in my notes. It is right here. Here we go. Here's all the addresses we're looking for. The module manager. Right, then take that, throw it into ether scan, then grab that ether scan link and go to this. What do I return? Ether scan.
00:41:58.926 - 00:42:18.630, Speaker B: URL. There we go. Then there is a module approved somewhere here. Yes. Set approval for module. And at that point, you paste in this dog's address. I lost it.
00:42:18.630 - 00:42:41.022, Speaker B: Yeah, there and true and you fire that off. Okay, so you approve the module, you approve the token to go into the module, and then this create ask will work. So of course you wouldn't want to do this all like this. You would want to have a button for your user that just does it. But we're hacking away here, trying to figure stuff out. Okay, price. What are we going to charge? Let's charge zero one.
00:42:41.022 - 00:43:02.934, Speaker B: Take that times ten to the 18. My Ask currency is going to be zeros. Right? Zero address. Oh, man. What if I just start typing zero x? Yes, it does. I love that. All right, so we got zeros in here for our Ask currency, okay? The seller fund.
00:43:02.934 - 00:43:19.798, Speaker B: This would be like to me, right, who's going to get the money? It's just going to be me. I'm going to test out Carlos here. Does this do ENS resolution, Carlos? If I put in ATG ETH. Okay. Didn't work. All right. Finders fee.
00:43:19.798 - 00:43:39.090, Speaker B: This was a tricky one. I actually had to go into the Zora Docs to understand this. This is not intuitive. It needs to be intuitive, you guys even like, right here in this contract when we go look at this right here and it says finders fee. Bps. Where is that? Bps. Yes.
00:43:39.090 - 00:43:53.590, Speaker B: Okay. So I could see it here. It's dividing by 10,000. Okay. So I could see it by looking at the code. But right here, there should be an example here that says, what, like 100 equals 1%? That's what it should say. 100 equals 1% right here.
00:43:53.590 - 00:44:07.462, Speaker B: I need that in those comments. But you can always go look at the Zora docs. The Zora Docs are wonderful. They have tons of stuff. You can get way too much information there. But that was one thing that I had to look up. I couldn't figure that out just by staring at the contract.
00:44:07.462 - 00:44:25.650, Speaker B: But I could have now that I think about it, I could have went and looked at that math, but oh, man, no one wants to f around with that. So let's see. Back to Abi ninja. I'm going to give out a 10%. So I'm going to put this at 1000. So that's 10% finders fee. So I'm going to charge something like $160 for this thing.
00:44:25.650 - 00:44:40.646, Speaker B: I'm going to give a 10% finder speech to whoever fills the ask. Whoever creates the curation mechanism that fills the ask, send it. Yeah. Okay. Yeah. Let's go. Ship it.
00:44:40.646 - 00:44:50.098, Speaker B: All right, $4 main net. Here we go. Gas, you cool down over there? All right. 13 GWe. I like that. Now we should have an ask. There it goes.
00:44:50.098 - 00:45:05.482, Speaker B: This should show up here. Yes, there's our big green boy right there. 1695. Big old green boy not rendering correctly in Zora because Zora doesn't want to f around with SVG NFTs. Or maybe they do. Like, I do not speak for Zora. I only wear the hat.
00:45:05.482 - 00:45:20.382, Speaker B: I don't know exactly their stance on SVG NFTs. I think they're working on it. But what you can do is you can make really heavy SVG NFTs. And that can f with the view. Go look at snakes on chain. If you want to see a heavy NFT, that's SBG. That's rendered in the Smart contract.
00:45:20.382 - 00:45:51.610, Speaker B: Anyways, we got to get this boy purchased. Okay, so what we don't have here is some kind of fill ask button. I need to find that. That's this one. Okay, here's another button in the front end. And the reason why I'm copy pasting all this is if I tried to write this front end live, it would take me hours. You'll find with Scaffold ETH, you spend about 30 minutes writing some solidity, and then you spend like three and a half hours trying to get the right user interface, user experience to interface with that contract.
00:45:51.610 - 00:46:00.558, Speaker B: Okay, let's see here. Right here. Right here. Right here. Whoa. This is going to be ugly, ugly, ugly code. But here is our fill ask button.
00:46:00.558 - 00:46:40.060, Speaker B: Okay, so we're going to build this into our curated front end. We're going to let anyone click this button to buy one of these NFTs and we're going to fill in the ask information, right? The contract address, token, the ask currency, the ask price. The same thing I just did over there. But this will be filling it. Now there's this thing right here. This right here needs to be our token, our contract, right? What we want is for the finders fee to go to read contracts asks address. Boy, I hope I got that right, because we don't have time to not get it right.
00:46:40.060 - 00:47:17.062, Speaker B: And it's going to send in the ask price. So theoretically, this button should sell you this NFT and should send the proceeds, the finders fee to this contract. Okay, so one little thing we need to do here is we need to do a quick side quest. What I could do is do a yarn build and I could put this out as a normal URL that anybody can get to. Let's pretend I did that and let's pretend I deployed this thing. So let's go over now to over here. So this is curator land, right? Okay, so here is our app.
00:47:17.062 - 00:47:42.790, Speaker B: Let's pretend it's deployed somewhere. I'm going to create a wallet, and this wallet is going to be our curator. Okay, this is a burner wallet. Actually, let's make a brain wallet even worse. Yeah, there we go. Curator. This is our curator.
00:47:42.790 - 00:48:06.658, Speaker B: I used a seed. Oh, no, it didn't work. Oh, wait, let's see if I can reproduce it. No. Okay, I'm just going with it. There's our curator. That's going to be our mnemonic.
00:48:06.658 - 00:48:23.930, Speaker B: I'm creating an account with that mnemonic. Don't make brain wallets. Don't deploy things randomly to mainnet. This is all a bad idea. But it shows you how it could work. There is our account. Okay, so our curator needs a little bit of gas to do some curation.
00:48:23.930 - 00:48:47.634, Speaker B: So let's send our curator maybe like $20 of USD. Our app went. Okay. Yarn Surge. What are we going to call this thing? Curator. How many O's do we need? Plenty of o's. All right, send this thing to Surge.
00:48:47.634 - 00:48:59.114, Speaker B: Hot damn. Here we go. All right, so our app is actually live and we could go now. Speed up. Send them. Let's get aggressive. Yeah, go.
00:48:59.114 - 00:49:13.274, Speaker B: Okay, now over here in curatorland. We're not in debug mode anymore. Let's go to curator Surge. Please work. Please work now any of you at home can do this. Please don't do this. Please don't go front.
00:49:13.274 - 00:49:28.082, Speaker B: Run me and jack up my stuff. Give me ten more minutes. Give me eight more minutes. Okay, so debug. Okay, what I'm going to do is I'm going to connect with Wallet Connect. I'm going to connect in this punk wallet built with scaffold ETH. What do I need to do? Copy that.
00:49:28.082 - 00:49:49.434, Speaker B: Paste it here. Now we should be logged into our front end. Oh, what happened there? Wallet Connect. Wallet Connect shakes Fist at Wallet Connect Servers. Let's try it one more time, and then I'll do it differently. If I can't get this to work. I want to connect.
00:49:49.434 - 00:50:04.110, Speaker B: Wallet Connect my wallet. Wallet Connect. Okay, I guess we're not going to do that. Wow, that works every time. I do it before. Oh, it's Https. Here we go.
00:50:04.110 - 00:50:15.694, Speaker B: Of course, Wallet Connect is not going to let us go through. Non https there we go. There we go. Quick solution. Here we go. Now. We're on Https.
00:50:15.694 - 00:50:29.826, Speaker B: Make sure you go to Https at home if you're attacking my system here. Okay, here we go. Here we go. Let's see. Connect. Wallet Connect. Bring in this dude.
00:50:29.826 - 00:50:50.350, Speaker B: There we go. We're connected. Okay, so notice CB. CB one. Yeah, we're connected as this person. We're going to do some curation, right? We're going to say, OOH, this thick green boy right here is busing, and we're going to send that in. Okay, so now we've paid, and we're going to see that this token supply is going to go up.
00:50:50.350 - 00:51:14.802, Speaker B: We have curated this set of NFTs. Maybe it pushes this up to the top. Something happens in which this curator now has a token. Hopefully. Now the total supply is one, a token that basically represents all the money in the contract. Of course, a good hyperstructure has thousands of participants, right? Keeping everything working. But now let's go buy this thing.
00:51:14.802 - 00:51:33.980, Speaker B: Okay, so I'm going to grab another account. I'm going to go to curator search. Sh. Please don't go buy this, please. There's so many ways you can grief me right now. Let's make sure I'm logged in as this dude, and I want to fill the ask. Oh, no.
00:51:33.980 - 00:51:44.426, Speaker B: Wait. What am I missing here? Did I connect? I didn't connect. Connect my wallet. Connect in or connect my wallet. Yes. Go. Hurry.
00:51:44.426 - 00:51:52.154, Speaker B: We have five, six minutes. Fill the ask, please. Yes. Here we go. Buy it. Buy that Lugie. Buy that Lugie.
00:51:52.154 - 00:52:04.594, Speaker B: $173. It's a heck of a deal. It's worth that at twice the price with this thick boy. How could you not? All right, so speed up my transaction. I don't have time to wait. Let's go. Okay, there it goes.
00:52:04.594 - 00:52:17.302, Speaker B: It did. It went. Okay, now let's go check that transaction out. Right? We want to see what actually happened there. If we go view on a block Explorer, we see that. Yeah. Dang it.
00:52:17.302 - 00:52:42.030, Speaker B: Zero one turns into wrapped ether. And zero nine went to me, so I got paid my zero nine and then the zero one finders fee. I guess maybe it detects. I don't know how they do the finders fee, but instead of sending ETH directly to the contract they sent wrapped ETH. Okay, let's go. Can we see internal transactions? I'm looking for where that wrapped ETH went. Right.
00:52:42.030 - 00:53:03.366, Speaker B: Where do we see it? Deposit transfer approve. Well, it's one of these. Hopefully now that this NFT has sold. Right. Let's go back here. The ask has been filled. My account got paid, right? It got paid the money.
00:53:03.366 - 00:53:29.390, Speaker B: And then hopefully this account has some WETH in it. Right? And let's see what happens if we do a well, let's see. We need to get our where's the WETH contract? We need to go check and see if this worked. Did the finders feed land in our fake little hyperstructure here? And if so, let's see. So here is the WETH contract. No, that's not the WETH. That's our contract.
00:53:29.390 - 00:53:51.766, Speaker B: We need to go to let's do an abi ninja. Yeah, let's do an abi ninja of the WETH contract. Okay. Go to WETH. We're trying to check to see if we have any WETH in this contract and we might not, to be honest. Seriously, I can't search for WETH. All right, weft contract address.
00:53:51.766 - 00:54:07.900, Speaker B: Hurry, hurry. Is this the same one? Hopefully that's weft nine. Yeah, it is. Okay, grab this. Paste it into here, load it. Does not like that. Maybe I need to go here.
00:54:07.900 - 00:54:23.518, Speaker B: Hurry. There we go. Okay. Here's Wes. We're looking for balance of we want to know the balance of our fake hyperstructure contract. Please. Please have a balance.
00:54:23.518 - 00:54:42.822, Speaker B: Oh, no. Okay. Dang it, dang it, dang it. Okay, so no WETH went to our contract. I wonder what I did wrong. I was assuming that our yes. We got three minutes left.
00:54:42.822 - 00:55:02.554, Speaker B: I'm assuming that I did something wrong. I have to go look at this transaction. I was sure that that was going to send let's go back to that. Where did it send that? Where did it send that? Point one WETH. Where does that go? It doesn't just go into the contract. Let's look at it one last time. Let's pretend let's do it's pretend time.
00:55:02.554 - 00:55:24.210, Speaker B: It's pretend time. I'm going to send zero one WETH to that and someone could definitely attack this contract. Let's pretend like that ETH landed in our contract like I thought it was supposed to. I have no idea. Maybe there's some claim where you have to go claim your finders fee. It can't be right. This contract should have WEP in it, but it didn't work.
00:55:24.210 - 00:55:55.834, Speaker B: So I'm going to send some fake ETH just to show this last little piece. It'd be 0.1 ETH should be sitting in this contract, right? I don't know what I did wrong. I don't know why I did it wrong. There's probably something I'm not understanding quite correctly about the finders fee. But let's just pretend that this money is in there and let's let our curator over here claim their funds. So here is our contract.
00:55:55.834 - 00:56:21.590, Speaker B: We're waiting for money to be in there. I am so confused about where that WETH went, I guess we could see it here, right? Where the heck did the WETH go? We don't have time. We don't have time. Dang it. Dang it. That's what happens when you raw a prototype onto main net. Let's see, last piece.
00:56:21.590 - 00:56:48.154, Speaker B: There we go. The 1697 is there. Let's pretend like that money came in from a finder's fee. Let's pretend like there's all sorts of curators curating and those Curator rules are correct, and it's helping to curate this website and show that if Green Boy was Busing and this dude was mid, then maybe Green Boy would be at the top of this or something. Basically, we create a site that is its own thing and the site can go up and down. It's not up all the time. It's the smart contract.
00:56:48.154 - 00:57:22.530, Speaker B: That is the hyperstructure we have 1697 in there. Let's let this dude claim their One Token, which should be 1%. If the total supply is still one and no one has briefed me, they should be able to claim their One, and it's basically 100% of the share of this 1697. So if that transaction goes through, this address should be like 20 some dollars, 2030 some dollars. All right, last hat. I know it's two. We got to stop.
00:57:22.530 - 00:57:51.554, Speaker B: It's all over. I want to tell you about the build guild and speedrun Ethereum. If you like playing with this stuff, if you like tinkering around, go to Speedrunetherium.com. Speedrun Ethereum will get you through not just the Syntax of Scaffold ETH, but the Mental model of what you can build and what is powerful, what it worked for and what it doesn't work for. You'll be building your own decks, you'll be building your own signature based multi SIG, but you'll have to learn the basics and the ropes first. But this helps you with the Mental model. The syntax is easy.
00:57:51.554 - 00:58:05.618, Speaker B: It's the Mental model that's hard. Once you get through speedrun. Ethereum, check out the build. Guild. The Build Guild is a curated set of builders, and we're building all sorts of random, cool prototypes like this. Thank you, thank you, thank you. Happy bow tie Friday.
00:58:05.618 - 00:58:14.306, Speaker B: Hearts. Hearts. Hearts. Hearts. I can't believe where did our WEF go? Where did our WEF go? I don't know. No one knows. Hearts.
00:58:14.306 - 00:58:19.158, Speaker B: Hearts. Hearts. Thank you for having me. ETH Global. Thank you, Zora. Thank you, thank you. Thank you.
00:58:19.324 - 00:58:40.560, Speaker A: Thanks so much, Austin, for that really engaging and fun workshop. I know everyone learned a lot and that was really awesome. Thanks for your time doing this. And happy boat type Friday. For the rest of you, there's another workshop happening right now, so feel free to head over or check out some of the other workshops happening today and this weekend, but other than that, have a great day, everyone.
00:58:41.010 - 00:58:41.500, Speaker B: Thank you.
