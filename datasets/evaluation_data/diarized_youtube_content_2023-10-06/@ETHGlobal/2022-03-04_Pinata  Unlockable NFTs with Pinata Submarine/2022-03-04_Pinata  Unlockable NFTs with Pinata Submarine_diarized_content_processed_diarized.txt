00:00:00.490 - 00:01:00.142, Speaker A: And trying to get a sense for what they needed from the NFT space and from the just media space as a whole that didn't exist yet. And it was very clear that they needed unlockable content. These are real quotes from conversations that we had with our customers and from creators out there. And as you can see, there's a very clear pattern of especially new creators to the NFT space, not understanding that when you put media on IPFS and when you're attaching it to an NFT, that's public, it's accessible to anyone. And so people really wanted to have some form of private know marketplaces often have a field for you to have unlockable content. And so what these creators would end up doing is they'd take a public remember, public dropbox link and put it into the unlockable content field. That's really no better than putting a public IPFS link in there.
00:01:00.142 - 00:02:14.438, Speaker A: So we wanted to tackle this problem again from the file side, since that's our focus, and we wanted to use IPFS. We've always been built on top of IPFS. The Content Identifier associated with IPFS media is, to us, the most important part of IPFS, of the whole peer to peer storage protocol, because it verifies a piece of content without any additional work on the part of the creator or the consumer. If I give you a content Identifier and you don't have the file, I can later send you the file, and you can check to see if that file ends up generating the same content Identifier I sent you in advance. So you get that sort of authenticity, that proof of authenticity at scale without any additional work. So while we're thinking about how to solve these problems for customers, how to leverage IPFS within Pinata and have private content, we decided that, what if we just made private IPFS nodes for our customers a reality? And so that's what we rolled out in I'll talk about this in a second. That's what we rolled out in September of last year.
00:02:14.438 - 00:02:58.946, Speaker A: And those private IPFS nodes were exactly how they sound. They're just IPFS. You get the Content Identifier, the content is stored. It's just not exposed to the public network. If you dig into how IPFS works, it's very easy to not expose content to the public network. But we wanted to programmatically allow creators, developers, whoever, to expose that content so they could generate rules on their own and expose that content. Part of this idea of giving access to content based on what creators were doing or what creators had their communities doing, came from these NFT projects.
00:02:58.946 - 00:03:40.274, Speaker A: Board ape Yacht Club is probably the most famous. They built a game. They've built a bunch of other content that they only release to their community. And there's a spinoff project called Jenkins the Valet. We've talked with both Board Ape Yacht Club and Jenkins the Valet to really get further insights into building this submarine feature that we've built both of these projects. They needed to lock media, lock content behind some sort of rules, right? But they didn't want to build that rule set. They didn't want to have to create the logic of storing the content, generating logic for unlocking the content and then serving that content back.
00:03:40.274 - 00:04:21.120, Speaker A: They wanted somebody to build that for them so that they could focus on their core offering. And so that's exactly what we did. When we rolled this out, we focused exclusively on developers and allowing them to come up with whatever their own rule set would be for unlocking this content. We figured it would be NFTs, and for the most part it really is. But what we didn't realize at the time was just how hard this was going to be for non technical creators. We rolled it out into our web app. We added a button in there to upload private content and then to share that private content.
00:04:21.120 - 00:05:12.662, Speaker A: But probably not surprising to most of you and shouldn't have been surprising to us. These creators, these non technical creators wanted to have these advanced rule sets, the same things that developers wanted to do. They wanted to say, like, if somebody owns this particular NFT, they should be able to unlock a piece of content that I've submarined, or if somebody takes this other action, they should be able to unlock it. Well, they couldn't write the code to do that. So over the last few months, we've been thinking about how we could solve that for non technical creators. And we were fortunate enough to sponsor ETH Denver and also participate at ETH Denver as part of the hackathon. We took that opportunity in the hackathon to create a non technical version of Pinata Submarine.
00:05:12.662 - 00:05:59.390, Speaker A: We called it submarine me. It's a great URL for first of all, but it's also a really easy way for non technical creators to do exactly what these developers have been able to do ever since we rolled out Pinata Submarine. I want to just show you a quick demo of this, not because I expect you as builders and hackers to use Submarine Me. You are more than welcome to and we'll talk about how you can do it, but more to highlight what you can build. I like to point out that this app is built entirely with the Pinata Submarine API. So I should be able to come here. I think you guys can still see my screen so somebody can post in the chat if you can't anymore.
00:05:59.390 - 00:06:39.830, Speaker A: But we're going to actually already have this loaded up here. So I'm going to just show you the interface here that we built out. Pinata Submarine allows, or I'm sorry, Submarine Me allows a non technical creator to come in and just click a button and provide some data about their files that they're going to lock. I'll give you the hypothetical scenario here. I own Jenkins of La NFT, so I'm able to actually demonstrate how this will work. But we're going to pretend that the Project Jenkins of La, they have their Roadmap 2.0, they want to only release that to holders of the NFT.
00:06:39.830 - 00:07:11.318, Speaker A: Most of these projects, they release it publicly, of course, and that's exactly what Jenkins valet did. So we're just pretending here, but pretend that they wanted to lock that behind ownership of their NFT collection, NFTs from within their collection. All they would have to do, or all a creator would have to do, is come and click Submary new file. We don't have these other options available yet. We're just kind of feeling out the community to see what other ways people might want to unlock content. But we did build out the NFT ownership. It supports ERC 721.
00:07:11.318 - 00:08:01.990, Speaker A: Right now. We will very soon be supporting ERC 1155 as well, and probably salana. But when they click that, they get to a page where they can provide simple metadata information about the file that's being locked, so that when you get to the screen to unlock it, you know what you're trying to get. So if I go and I'm going to select a thumbnail here for the file and we're going to grab the 3D image of Jenkins the valet, we then have to pick or provide the smart contract address that the NFT collection is under. So if I go to openc, I can quickly find that. If I go find my Jenkins the Valet ticket and scroll down to the details section, I can get the contract address and we'll just go back to the Submarine Me app. Paste that in here.
00:08:01.990 - 00:08:23.710, Speaker A: If this was on Polygon or on Rinkabee, we could select those networks. They're all supported here. But this is on Mainnet. So now I just need to give a name for the content. So this is Jenkins. I could spell, right? Jenkins the valet, Roadmap 2.0, and it's Jenkins.
00:08:23.710 - 00:08:53.960, Speaker A: And then we're going to give a description as well. So this is the Roadmap 2.0 file only for Jenkins holders. And then, of course, I need to actually upload the file that is going to be Submarined. It's going to be protected. Nobody will be able to access it unless they own this particular NFT. So I'm going to grab that file, click upload and continue.
00:08:53.960 - 00:09:43.880, Speaker A: And in just a second here, it should store that file, generate an IPFS CID, which you can see here. I could try to load this up on the public IPFS network. It would not work because it is private, it's not exposed to the broader network. But I could give this IPFS CID to anybody that's hoping to get the content. And when they get that content, they can verify that I gave them the right thing, sort of like a promise for a future delivery. Now, as a creator, all I have to do is click Copy Share link and we'll open this Share link up in another tab. Here and you can see it pulls in all of that metadata that we added and nice and kind of pretty display for anybody that might want to try to unlock this content.
00:09:43.880 - 00:10:31.174, Speaker A: You or the creators, whoever's doing this can share this content on Twitter, telegram, discord, anywhere public without fear of that content being unlocked by mistake. To show you this, I am going to switch to a wallet here, a MetaMask wallet that does not have the NFT. And when I go and I click Connect Wallet, I'll be asked to sign a message. Message includes the contract address, includes a unique Identifier generated by the server. When I sign this, I don't own the NFT. I can't get the file I'm rejected. But then if I switch back to the wallet that does have the NFT and I do the same thing, you'll see that we verify that the NFT is owned, we fetch the content and we serve it back.
00:10:31.174 - 00:11:02.382, Speaker A: So this is the Jenkins, the valet roadmap. Again, I show you all this, not necessarily because you will use this as part of a hackathon or as part of projects going forward, but just as inspiration of what you can build with the Pinata submarine API. Let's see. So let me jump back to the presentation and we're going to try to make this big again. There we go. And I jumped ahead. Oh, actually.
00:11:02.382 - 00:11:29.406, Speaker A: So that is the end. So what I want to do we have a couple of minutes here to talk about Pinata's philosophy on NFTs. If you have questions, put them in the chat. I'm happy to answer those. I'm just going to quickly cover before we wrap up here kind of how we think about what an NFT is. We've written about this. It's not just the token, right? We don't think it's that thing that lives on the blockchain.
00:11:29.406 - 00:12:13.686, Speaker A: We don't think that's the only part of it, at least, that token is actually the second layer, in our opinion. The first layer is a relationship. That relationship is creator to owner, owner to new owner, multiple owners in the case of fractional NFTs. But then you have the Token, of course. And the way we think about this is the token and the blockchain is this automation engine that allows you to exchange transfer ownership without having to build the infrastructure yourself. It's really powerful, and I'm sure I'm preaching to the choir here. The next layer is the metadata, which of course points to the file itself.
00:12:13.686 - 00:12:52.734, Speaker A: It points to a bunch of other information attributes, custom information in there that many projects may not take or may not leverage. And then the file, a file tied to an NFT can be literally anything. We've seen full web apps, we've seen games, we've seen videos, of course, audio files. People are getting very creative with the media that they associate with NFTs. But the last layer is the one that we're not seeing used a lot yet, but people should. The licensing layer should be built in. Whether that's in the metadata, it's like a pointer from the metadata.
00:12:52.734 - 00:13:31.118, Speaker A: The licensing layer is very important, especially as larger companies come into the NFT space. Imagine Netflix coming into the NFT space and saying, you get your Netflix subscription as an NFT. Of course they're not going to just let you do whatever you want with that. They're going to have a licensing layer. Same with Warner Music group or any big company. They're going to have some sort of licensing. If they can put that licensing in as part of the NFT, it's just as transferable, it's just as easy to fetch, and it's just as scalable, honestly, as the transferring mechanism of the tokens themselves.
00:13:31.118 - 00:14:18.734, Speaker A: So this is just a high level overview of how we think about NFTs. I'm going to check the chat here, make sure there's no questions still. But there's also an interesting idea that I want to highlight before we wrap up here. And it's this permanent versus preservation. When we're talking about NFTs, we often hear about, well, is it permanent? And my answer to that is always if you take a step back and you ask, is the Mona Lisa actually permanent? If you think about it, the answer, of course, is that it is not permanent. The reason the Mona Lisa still exists today is because people cared enough to preserve it. Preservation and permanence are two different things.
00:14:18.734 - 00:14:54.922, Speaker A: This is why we love IPFS so much, by the way. IPFS is not a blockchain. It works very well with blockchains. And blockchains do a lot of really good things that need to be permanent. IPFS does not need to be permanent. Instead, IPFS allows for very engaged communities, engaged people, to show how much they care about content by making sure it continues to exist. With IPFS, to make sure something continues to exist is as simple as making sure it's pinned on at least one IPFS storage node so that the rest of the world can continue accessing it.
00:14:54.922 - 00:15:44.374, Speaker A: We saw this in real life with an NFT marketplace that the founder just shut it down, was slowly taking things offline. Artists were very worried that they were going to lose all of their content, but fortunately, the content was on IPFS. So individual artists, individual buyers, they were able to back that content up themselves. And then a group of people came together and reached out to Pinata and asked, well, can you backup everything? And the answer, of course, was, yes, it's public, it's IPFS. All we needed was the CIDs. And because of the power of IPFS, the power of that open data, we were able to duplicate and migrate over a million files and keep those alive. And that's really powerful to me in the way that we think about media and the way that we think about keeping media alive.
00:15:44.374 - 00:16:30.300, Speaker A: That was a community that came together and decided that they wanted to preserve something that they really cared about. I like to end on that idea because there's so much noise if you go on Twitter about permanence and media and NFTs, that sometimes it gets conflated with preservation. So my ask to you as you go out and hack is try not to confuse permanence and preservation. People will preserve things that they care about. And with that, let's see, we've got questions in here. Can we get some more detail about the submarine API? Absolutely. So I was going to I don't know if this is the best place to put it, but I'll drop it in the chat right now.
00:16:30.300 - 00:17:11.830, Speaker A: The submarine API is actually on a different URL or a different URL than our main API. It's going to eventually be merged back down to the regularapi Pinata cloud, but right now it's at the Manage Mypinata Cloud API V one, and the docs are in the chat. So let's see what methods are available. All the methods are listed out there with the API. You can store your content. You just have to say Pin to IPFS is false. That's how you're indicating that it is submarined and not in the public network.
00:17:11.830 - 00:17:59.586, Speaker A: You can list your content. One of the cool things that we did enable with I'll try to scroll down to it since you guys can see here. One of the cool things that we enabled in the submarine side of the API and the IPFS nodes. That's not quite as easy on the public nodes, but in retrospect, we wish we had done this, and we may in the future is you can list the contents of a folder very easily. For those of you that have played around with IPFS in the past, listing the contents of a folder often means going directly to the node itself. The IPFS node running a CLI command on that node, and then waiting, depending on how big the folder is, for all of those CIDs within the folder to generate and come back to you. We made this much easier with Pinata submarine.
00:17:59.586 - 00:18:41.266, Speaker A: So if you do happen to submarine a folder, it's very easy to list all of the files in there. I guess there's also the discord. So I'll try to find a good place in the discord to put these docs. I'll put the regular Pinata docs both in the chat here docs Pinata cloud, and I'll put it in the discord or anywhere else that is useful for everyone. Did I miss? Any questions? Looks like that's it. If anyone has any last minute questions, that's it for me. I'm very excited to see what everyone builds both now and in the future.
00:18:41.266 - 00:19:01.420, Speaker A: We've seen a lot of great projects come from hackathons and early just tinkering that turned into really great things. So I guess with that, thank you guys very much for taking the time to listen to me, for dealing with my dog barking in the background while I try to present for all of that. So I really appreciate it.
00:19:02.270 - 00:19:34.780, Speaker B: It was a killer presentation. Thank you, Justin, for running us through all of that and thanks to everybody who spent some time this afternoon with us. Really, really appreciate that. And I highly recommend linking up with him in Discord, following this to ask the questions that you might not have now, but will pop up later. They are a great resource and reach out to the mentors as well to get a little bit more insight as you're building out your project, but we will be ending the room here. Thanks again, Justin and the rest of the crew. Looking forward to seeing you guys soon.
