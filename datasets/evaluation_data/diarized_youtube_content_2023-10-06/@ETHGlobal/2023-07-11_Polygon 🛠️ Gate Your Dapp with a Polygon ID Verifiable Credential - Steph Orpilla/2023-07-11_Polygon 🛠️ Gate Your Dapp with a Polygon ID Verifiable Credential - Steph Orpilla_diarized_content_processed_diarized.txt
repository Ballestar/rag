00:00:07.530 - 00:00:33.286, Speaker A: But hey, everyone, welcome to the last workshop of the day. So you can get to hacking soon, I promise. This is about gating your DAP with a Polygon ID, verifiable Credential. So we'll be getting into Polygon ID, which is like an ID solution, and we'll talk about Verifiers, yours, all kinds of things. This is polygon ID. I thought I had a oh, there it is. My slides got all mixed up.
00:00:33.286 - 00:01:11.458, Speaker A: This is what I get for messing with them right before I'm going on. But GM, everyone. I'm steph or pilia? I'm a developer relations engineer at Polygon. I'm also Oceans 404 on Twitter if you want to tweet or anything or link up there. But today I'm talking about polygon ID. And Polygon ID is really cool to me because it uses ZK proofs and it lets users prove pieces of their identity with Verifiable credentials so that they can just present proof of a Credential rather than giving up their private data. So that works for things like birthdays, country of origin, and then any customizable use case that you can think of.
00:01:11.458 - 00:01:43.578, Speaker A: But it's all in the sake of preserving privacy for users. And that's really important when we're doing things on chain, right? Because things on the blockchain are permanent and most things aren't encrypted. So it's really great to be able to just use a Credential and ZK proofs to be able to prove something about you without having to actually put that information on chain. Okay, so this is the first example of something. This is just a data type. It's called job held. And you can imagine this as a Credential.
00:01:43.578 - 00:02:07.730, Speaker A: It has some different fields. So it has employed by technical role and start date. So these are some of my examples of job held potential credentials. So I'm currently employed by Polygon Labs. It is a technical role, so that Boolean is true, and I started back in May last year. Previous to that, I worked at Amazon. It was also a technical role and had a start date, and before that, I was at Sony.
00:02:07.730 - 00:02:27.818, Speaker A: So these are three examples of credentials that I could hold in my wallet that would be of the type job Held Credential. This is another type of Credential, pet ownership. This is my dog, Teddy. So has dog could be a Boolean field. This would be true. Has cat for me is false. I'm allergic, but pet count is two.
00:02:27.818 - 00:03:02.790, Speaker A: So, you know, I have at least one dog, and my pet count is two. So it's a little mysterious. But all of these are just claims. And how do we know any of these claims are true? So I could say anything. I could say I went to the moon, I could say that I work for NASA. But how do we know if any of that's true? And we know it's true because it's been issued by a trusted issuer who has given a Verifiable Credential that is actually signed by that issuer. If we trust an issuer we can also trust that they're only giving out trusted verified credentials.
00:03:02.790 - 00:04:06.010, Speaker A: So these can all become trusted issuers or verified credentials by being signed by a trusted issuer. So if I said I was employed by Polygon Labs and Polygon Labs actually issued me this Credential we could think, okay, I trust that the company's only issuing this Credential to people who actually work there. Same for the other two places I was employed by. So this is just an example. Is this issuer trustworthy? Like could Teddy the Dog say that I've been employed by NASA since 1950? Probably not because we don't trust that he's a trusted issuer. And this all gets into the triangle of trust and the reason why Polygon ID or any type of did works and it all comes back to issuer trust. So if the Verifier can trust that the issuer only issues credentials to people who satisfy whatever conditions they have, then they can accept ZK proofs based on the credentials that they've issued.
00:04:06.010 - 00:04:55.478, Speaker A: And so in practice this is what it looks like. So the issuer in the Job Held case would be George, my previous manager at Amazon. Hey George, he's not watching, he's like still way back in web two but good for him. So George could issue me a verifiable credential of job held. He can say that yes, I was employed by Amazon, my role was technical and this was my start date. Then a Verifier website or DAP could come and say hey, has Steph ever had a technical role in a job, yes or no? And I would have something in my wallet that would say true, I have had a technical role before. So I could present this Credential and create a ZK proof based on the Credential that says that I satisfy the requirement of having had a technical role.
00:04:55.478 - 00:05:42.970, Speaker A: So you can think of a Verifier that might want to do this, maybe it's LinkedIn and they want to give me a badge for being a technical developer or maybe it's my next job and they want to know if I've ever coded before. So they're also interested in this. But the power of Polygon ID is that these issued verified credentials can be used unlimited times by different Verifiers and they're all using that same data that only has to be issued once. So you might be thinking like how do we prevent Teddy the Dog from being a trusted issuer? We don't actually have to. So the Verifiers can specify which DIDs are trusted issuers. So you can see in this code allowed issuers is set to all. So for this case anyone could actually issue this type of Credential and the Verifier would accept it.
00:05:42.970 - 00:06:12.686, Speaker A: But you can imagine that down the line maybe a Dow could manage who is a trusted issuer or any other solution to kind of like improve the trust. Maybe there could be even scores of issuers to make sure if someone had issued a bunch of bad Verifiable credentials, they were bumped down in the list. So I don't know if anyone ever watched Harry Potter. I did. I watched all the movies. I read all the books. If I'm on a plane, chances are if I have something mindless too, I'm watching Harry Potter.
00:06:12.686 - 00:06:48.762, Speaker A: But anyway, Harry Potter has one of the most famous issuers of all time, and that's the Sorting Hat. So when someone new comes to Hogwarts, they put on that hat and the issuer says which house they're in. So Harry is famously on the fence between Slytherin and Gryffindor. But then at the end, the issuer, which is the Sorting Hat is like, hey, Harry, which house do you want to be in? And he says Gryffindor. So he's kind of like self selected in. But the issuer which is the Sorting Hat gives him that badge of like, okay, you're in Gryffindor. And so you can think of that house as like, the verified Credential.
00:06:48.762 - 00:07:18.806, Speaker A: And then Griffin, or the issuer is the Sorting Hat, and Harry is the person holding the Credential and he can reuse that verified Credential in lots of different places all over Hogwarts. So maybe he's getting into the common room and he's using a magic door. That's the Verifier, and it unlocks the Gryffindor common room. Or maybe he's trying out for the Quidditch team. So I can't remember what this guy's name is. Is it Lee? Anybody know? There we go. The team captain can say.
00:07:18.806 - 00:08:01.880, Speaker A: Only Gryffindors can be on the team, so he's checking against that Verifiable Credential again for Quidditch team eligibility. So that's just an example of how you can reuse these credentials anywhere. So what does this look like in the Polygon world? It's not quite as fun as the Sorting Hat, unfortunately, but this is what your data looks like. So I have three different Verifiable credentials in my Polygon ID wallet, which is a mobile app. The first is almost like an event ticket proving that I went to Polygon at the Pit, which was an event. The next is an example of proof of personhood. This actually hasn't been implemented yet, so if anyone wants to connect WorldCoin and Polygon ID, that could be a killer hackathon project.
00:08:01.880 - 00:08:40.466, Speaker A: But all of this data is stored in your wallet and it holds the VCs and interacts with Verifiers once you need to prove your identity. So this is what it looks like as that VC is issued. So you scan a QR code and it says, Accept Credential offer. Then the claim is added to your wallet and it's put in your data. And then you have some information about the VC that's held directly in your wallet. And then this is what it looks like when you go to actually verify claims. So Verifiers or DApps will have a QR code on their website as well.
00:08:40.466 - 00:09:15.690, Speaker A: You'll scan the code and it'll ask for a proof request of something specific. So in this case, it was polygon ID membership. Are you part of this Dao? Yes or no? And then it generates a proof for you. So you don't have to code this or anything. It generates a proof that actually shares the answer to this question. So yes or no, and then you can manage this from your wallet forever. So if you don't have the polygon ID mobile wallet app yet, you'll have to get it in order to kind of interact with the demo site and any of the other polygon ID sites.
00:09:15.690 - 00:09:44.294, Speaker A: Right now we just have a mobile wallet. We don't have a desktop wallet yet, but that's another cool hack idea if anyone wants to build, like, a desktop polygon ID wallet. But currently there are two ways to issue claims. So to be the sorting hat, this is the easy way. There's currently only two types of claims that you can do the easy way, which is by using the demo issuer UI. So the first one is an age credential. So that's what I'm going to demo today.
00:09:44.294 - 00:10:07.374, Speaker A: And the second one is a country of residence credential. So some things you could check with an age credential or like, sample use cases. Are are you older than 13? A lot of social media sites like TikTok and Instagram and Be real. The first thing they do when you log into their app is they say add your birthday. You have to be over 13. So that could be a cool use case for a DAP. As well.
00:10:07.374 - 00:10:39.618, Speaker A: If you're creating like, a social DAP. Or maybe you're creating a DAP. That's just for kids, and you say you have to be younger than 18 in order to sign the yearbook or post a message so you're making sure you don't get, like, creepy adults. And then for the KYC country of residence credential, maybe you want something that's specific to Canada. I'm loving all of the stories that Canadians say. I think it's so cute. So maybe you say, sorry, only people in Canada can use this app and you have to prove that your country of residence is Canada.
00:10:39.618 - 00:11:09.794, Speaker A: Or maybe you're creating like, an election app for a specific country. And you say you have to be a resident of this country in order to use the DAP. Or maybe it's something like Countrywide and it's only for EU residents. Anything like that could work for the demo issuer UI because it is able to create these two types of credentials. So I'm just going to really quickly show you the demo issuer UI so it looks like this. Oops. Come on.
00:11:09.794 - 00:11:33.030, Speaker A: Wi Fi. So you sign in with your polygon ID wallet, and then you can create claims just to issue yourself as demos. So like I said, you can either create an age claim or a country of residence claim. I'm just going to give myself an age claim. So it auto fills all of these fields. But the main thing you want to think about is the data that you're putting in the actual claim. So this one is for birthday.
00:11:33.030 - 00:12:03.710, Speaker A: I'm just going to add my birthday. Or actually, no, I'm going to add a slightly different version of my birthday. This birthday is August 24, 1994. So I'm submitting this and then it'll create a QR code. So I'm opening up my Polygon ID mobile wallet app and all I have to do to get this QR code in my wallet is scan the QR code. So it's asking to issue this Credential to me in my wallet. I'm just accepting the Credential and it's added.
00:12:03.710 - 00:12:40.906, Speaker A: So now I have this birthday Credential or this KYC age Credential that I can use all over the Internet. And that's kind of the basis of our Verifier, which is what I'll show you next. Okay, actually, before we get to the Verifier, there's a second way to create or issue credentials, and that's by using our Dockerized issuer node. So this is what you'll need to do if you want to create custom credentials. Like, let's say you wanted to issue people anything. Basically, that's not an age Credential or a country Credential. You'll have to host an issuer node.
00:12:40.906 - 00:13:13.338, Speaker A: It's Dockerized, which is kind of nice. And then you can just kind of host them publicly with Ngrok. And that's how you can kind of demo your app if you want to go this way. So if you want custom issued credentials, scan these two links that will take you to the code for the issuer node and also the docs to the issuer node. And I put all of the slides, by the way, in the discord channel. So if you missed anything or need the links, they'll be in discord. Okay? So going back to the Triangle of Trust, we've learned about two things.
00:13:13.338 - 00:13:45.634, Speaker A: The issuer, which is either that demo issuer UI or the self hosted issuer node. Also, we know the identity holder is you and you hold those credentials in your polygon ID mobile app. So the last thing that we are not quite sure about yet is the Verifier. And this is what receives those ZK proofs and checks against them. So back to the Harry Potter example. We saw the demo Verifier and what it unlocks. In this last example, the demo Verifier is actually a VC gated website.
00:13:45.634 - 00:14:26.482, Speaker A: So it's a Verifiable Credential gated website and it unlocks a secret DAP or app that you can only see if you've proved your birthday. So this is what it looks like. And the request is prove you were born before 2023 in order to view. So I think that's everybody in here, no babies are hacking at ETH Waterloo this year, but maybe they could eventually maybe Vitalik's kid, honestly, if he had a kid. So if you need to prove that you were born before 2023 to view, you would be doing something like this in the code. So this is kind of like a really simple query. And the Credential subject is on line nine.
00:14:26.482 - 00:14:57.386, Speaker A: It's birthday, and you see this funny looking query language on line twelve. It has like a dollar sign Lt, which stands for less than a value, so less than 2023 one. So we're checking for line nine. The birthday field is less than or before January 1, 2023. And so this is the proof request that we'll send from the front end via QR code. And this is what it'll look like on the front end. So a modal will pop up.
00:14:57.386 - 00:15:41.478, Speaker A: It'll say, scan this QR code from your polygon ID wallet app to prove access rights. And if you can scan this and successfully generate a ZK proof, it'll send back a successful authentication response to the website and you'll see the next page. And so this sounds a little difficult, but it's not because I created a template for you all on GitHub. And what this gives you is all of the front end and also the server code for creating this Verifier website. So with the last ten minutes, I'm just going to kind of like walk you through what this template looks like and what it does and the parts that you should modify for your own DApps. Oops. Okay, so this is that GitHub repo.
00:15:41.478 - 00:16:27.858, Speaker A: You can see there's two folders in the repo. There's a front end and a server. So the great things about this are that it's built with React JS, which a lot of people know because it's just like a pretty common JavaScript library. It's already VC gated for you with that polygon ID age Credential we saw before the birthday Credential. It's fully connected so that the DAP that you hide behind the VC Credential is already connected to a demo DAP with examples of how to read from the blockchain and also write to the blockchain. So you should only have to kind of do some Frankenstein and just a slight bit of open heart surgery when you're adding your own smart contract in because it's mostly done where you'll just see examples. It's also already styled with configurable components from Chakra UI.
00:16:27.858 - 00:17:07.494, Speaker A: When I'm hacking, I like, go down this rabbit hole of I'll just create the components myself and then I realize I don't have time. So I just made that decision for you to make it easier. And then it's also just like ready to interact. So it's connected with Rainbow Kit Wallet and it is connected by default to polygon networks, but you could replace those with anything you want. So to get started with the template, you'll just come to this GitHub and you'll say, use this template, and you'll click Create a new repo. It'll have you clone the new forked repo from GitHub down and let me show you what it's got. So I'm running it right now.
00:17:07.494 - 00:17:29.420, Speaker A: It has a server and also a front end. The server is making two different API calls to the Verifier SDKs of polygon ID. So let me just open the code quick. So this is the server. This is the index file. It has just like a general welcome page. It's really not doing anything here.
00:17:29.420 - 00:18:14.800, Speaker A: So the server runs on localhost 80 80. This is just telling you the two available API routes. So the first one is Get Auth QR, and that shows you that QR code that generates the proof that's sent to your wallet, or generates the request for the proof, I should say. And the second one is API verification callback. That's what sends the callback to your front end saying whether or not you successfully authenticated. So you need to be running this server in order to be able to get and post this data to Polygon ID. And then the last thing to mention is that when you're running the server, this is in the instructions in the README as well.
00:18:14.800 - 00:18:43.332, Speaker A: But you'll want to run Ngrok on the server so that you can have a public URL for the server because of that callback to the front end. Otherwise you'll have some issues with cores. And also the Polygon ID app has to know about the public URL of your server. And if it's just on localhost, it's not connected to the Internet. So the Polygon ID app has no way of saying, hey, this is the response from your API call. So that's the server. It's pretty minimal.
00:18:43.332 - 00:19:27.450, Speaker A: It's just built with exprs and also sockets. There's nothing in the server you should need to modify except for one file and that's proofrequest. So inside of proofrequest, we see that Credential subject birthday and the query that I showed you in the slides before. So this is that query of birthday is less than January 1, 2023. If you wanted to, you could change this date, or you could totally change the query from KYC age Credential to a country Credential or a custom Credential, as long as it existed already in some type of schema. So that's the server and then the front end is what's interacting with the server. So I'll just open the README first.
00:19:27.450 - 00:20:11.472, Speaker A: So each of these folders, the front end and the server also has their own README with a few more instructions. But this is just that page that is created for you. You know what, I'll actually just go to where I'm running the front end locally, which is localhost 3000. So this looks almost exactly like that other page that I had, except for this is kind of just a full stack template version. So I'm just going to quickly prove my access rights to this page with my wallet. So, as you saw, I already created that Kych Credential and gave myself a birthday that's definitely before 2023. So I should be able to authenticate with a proof.
00:20:11.472 - 00:20:52.368, Speaker A: And it looks like it's preparing auth. So once it starts running authentication yes, it runs the spinner. It said verified proof and it shows me the secret page or the VC gated page, which is actually a DAP. And like I said, what's cool about this is this DAP is already connected for you to the polygon Zke EVM testnet. So it's got the wallet connect button, all of that's done. So conceptually, all you have to do for all of your applications is write the smart contract with all the business logic and then kind of port it into this DAP. So in the front end code, you would just start changing out just like the front end things.
00:20:52.368 - 00:21:25.836, Speaker A: So I'll show you. So I had a demo smart contract. My DAP that's behind the gate is just a counter app. So all it's doing is I push the button and it's incrementing the counter up one. So I sign it goes up to 19, and that's all tracked on the blockchain in the smart contract. Basically what I wanted to do with the counter DAP was give you an example of reading from the chain. So this value 19 is read from the blockchain and then writing to the chain with the increment counter that's updating a value.
00:21:25.836 - 00:22:04.090, Speaker A: So you have both of those examples when you're doing anything with your smart contract. Low battery. Okay, so all of that DAP is happening, the DAP code is happening in the Vcgated DAP file. So feel free to gut all of this or change it to reference your smart contract. I just had the smart contract address. Here my Zkevm smart contract address. So if you change this out, then you should also be able to go through and update the read function.
00:22:04.090 - 00:22:28.446, Speaker A: And also the increment counter is the write function. So you can see there's already a read contract function. So all you would do is change out the function name to whatever your function was using. And then the other thing you would update is the Abi. I just put mine here. It doesn't necessarily have to be there, it's just where I rooted it. So the Abi will just have all of the available functions from your smart contract.
00:22:28.446 - 00:23:20.086, Speaker A: So I had two called Retrieve and what was the other one? Increments. But all of the polygon ID stuff is created for you. So the only things you would be customizing really are the queries and the type of Credential. So changing the age Credential to either country Credential or your custom Credential that was issued, excuse me, either by the demo issuer node or your self hosted node. Yeah. So again, this is that QR code to the template. Hopefully it's super helpful, but if not, I'll be around all weekend and also in the polygon discord to answer any questions and help.
00:23:20.086 - 00:23:50.430, Speaker A: I love building, so I'd love to help you if you run into anything. No question is too dumb, I promise. And actually, if you use this template, you're automatically in the running for two of our prizes. I just have to plug the prizes really quick. We have $10,000 in prizes this weekend, so 3000 for a public good with account abstraction. So if you wanted to double up on prizes, I saw that Nosisafe has Safe APIs. They're also giving away $2,000 for hacks with account abstraction.
00:23:50.430 - 00:24:22.326, Speaker A: So if you built something with Safe APIs on Polygon, you'd be eligible to win like $5,000. Pretty good. Next one is Best most innovative hacks deployed on polygon, zkevm. Zkevm is what I just showed you. So this counter app was deployed on Zkevm. Zkevm is so similar to Ethereum that all you have to do when you're deploying to it is change the RPC URL. So instead of gore Lee ETH, you point to polygon Zkevm testnet.
00:24:22.326 - 00:24:45.074, Speaker A: That's the only thing that changes, which is pretty awesome. So you don't have to worry about code, you just change the string. So the best hacks on that are also eligible for three K. And then I just added some random ideas that I had. I feel like EIP 6551 is so interesting. The NFTs that can own other NFTs. So, super interested in any hacks like that.
00:24:45.074 - 00:25:19.050, Speaker A: Or maybe you're interested in cross chain hacks. The protocol before me just did a really cool cross chain hacks workshop, so work with that if you want to do a crosschain hack. The next one is directly related to ID, which is what we just talked about. So $2,000 for best use of Polygon ID's verifiable credentials. So VC gate your adapt just like what I showed you, whether it's an H Credential, a Country Credential, or something custom. And you're eligible for two K there. And then the last one is mostly for beginners, but I plug it anyway because everyone can win this prize.
00:25:19.050 - 00:25:52.022, Speaker A: All you have to do is build in public. So we want to see your tweets about what you're building so that my social media team can go like, wow, ETH Waterloo looks so fun. So all you have to do is deploy on Polygon and post a tweet about it linking your smart contract or your GitHub. This is the specific link. So if you open this link, it'll pre generate the Tweet for you. So if you're like, oh, shit, I got to submit my hack tomorrow. All you have to do is click this button and update literally one thing.
00:25:52.022 - 00:26:09.820, Speaker A: This should be the easiest thing you do all weekend. Add your GitHub here, tweet it out, and you'll win a portion of that two K. All right, I think that's everything for me today. Thank you so much for listening. And like I said, I'll be around all weekend. Ask me for help, I'm happy to help. Thank you.
