00:00:07.050 - 00:00:38.470, Speaker A: I guess I'll start off a little bit about Alio. Alio is a ZK layer, one project. Our main goal is making developing ZK apps easy, extracting away a lot of the complicated math and cryptography that's required to understand circuits and things of that nature. So we're going to jump pretty much right into the workshop. Usually I'd give a bunch of slides and kind of talk a little bit about our programming language. So instead I don't have time for that today. So instead I'm going to point you to the docs.
00:00:38.470 - 00:01:15.830, Speaker A: So I would recommend checking out Alio.org. But more importantly, if you're hacking with Alio this week developer Alio.org, this is kind of all of our documentation, the home of everything. This is where you'll be able to answer your own questions. Also recommend checking out our Discord, which you can find links to from the main site Alio.org. If you scroll down, you'll find links to Discord, Twitter, YouTube, et cetera. There's a large community of over 200,000 people building on Alio that you can check out.
00:01:15.830 - 00:01:47.694, Speaker A: Shout out to Eugene, who is very helpful in managing that community. So with that, we're just going to jump right into it. If you want to follow along, you can. You could just watch me and follow along and do this on your own time afterwards. We do have $100 incentive if you successfully deploy an app. So that's like a quick way to earn $100, walk away from the hackathon a winner, even if you don't win any other bounty. So I'm just going to run through this.
00:01:47.694 - 00:02:04.542, Speaker A: It's super easy. The nice thing is, regardless of how complex your app is, deployment doesn't really change. So once you kind of have this down, you won't ever have to learn how to do it again. There's some software you have to install. Git. Of course. Rust.
00:02:04.542 - 00:02:41.278, Speaker A: The whole stack that we use is open source, and it's all built on Rust. Highly recommend. If you're a Rust developer, you go check it out, contribute, et cetera. So then the most important things you have to install here are our Leo programming language, which is a high level language that looks a little bit like TypeScript or Rust, and it compiles ultimately down into ZK circuits. If you're curious about that, you can read the docs or come and find me after this talk and we can talk a little bit more about that. You'll also want to install Snark OS. There's some instructions on how to do that.
00:02:41.278 - 00:03:06.550, Speaker A: If you're on a Windows machine, please go check out this FAQ, and I have some instructions. You need to install LLVM and some other prerequisites in order to get that installation to work. And it can be kind of a pain if you're on Mac. Don't worry about it. Everything will work smoothly, I promise. I would also recommend you install the Leo wallet. It looks a little something like this.
00:03:06.550 - 00:03:31.470, Speaker A: It's a chrome extension. You'll be using it in the tutorial. And it's also the easiest way to interact with your account and records on chain. So let's get into it. I'm going to be using Vs code for everything that I do today. You can use whatever editor you want. We have Leo plugins for most of the major editors out there, including Sublime, IntelliJ, Vs code, et cetera.
00:03:31.470 - 00:03:59.824, Speaker A: All right, so I have the repo cloned here. You'll see a file structure that looks a little something like this. Just going to make this bigger for you guys. This is the private key to my workshop wallet. If you want to steal my tokens, be my guest. We are in Testnet right now. We are looking to launch Mainnet sometime in December.
00:03:59.824 - 00:04:31.652, Speaker A: So definitely look out for that. In the meantime, check out the network, deploy an app. Try to build something where we encourage anybody building stuff who is interested in doing ZK. So first and foremost, I'll introduce Leo. Normally I'd spend quite a bit of time talking about our programming language before getting into this demo, but I don't have time for that today. So I'm just going to jump right into it. This probably looks pretty familiar to you.
00:04:31.652 - 00:05:08.892, Speaker A: Like I said, if you've used TypeScript, if you've used Rust, this is a function type called a transition. One important thing to note about Alio and kind of one of the reasons why we decided to go with a layer. One, instead of building an EVM based layer. Two is we have a different infrastructure setup than most of the EVM. Primarily there's two infrastructure players we have Validators, which validate things like you're probably used to. But we also have another infrastructure layer called Approver. And the main goal of Provers is to execute transactions off chain, roll them up into a proof and submit them to Validators.
00:05:08.892 - 00:05:46.296, Speaker A: What this enables is quite a few useful things. One is that we have fixed gas prices so you're not paying a congestion fee in order to fight for block space. That's not something that exists in our paradigm. So a read always costs what a read costs, and a write always costs what a write costs. Also, because of this, we have privacy by default. So you actually have to explicitly mark a variable as public. And so transition functions primarily, the main point there is anything in a transition function is going to be executed by Approver.
00:05:46.296 - 00:06:25.610, Speaker A: There's also another function type that I can show you. I'm going to jump into the playground here and we're going to show you a token example real quick just to show off a finalized function. So if you're doing public things, finalize functions are executed by Validators and that is the way to handle public state. Typically you'd use a mapping. Mappings work like any other hash, map or similar data structures that you might be used to. The key difference here is that mappings are on chain state. So you can use those to look up anything that you want to be public.
00:06:25.610 - 00:07:13.530, Speaker A: And anything that is not public, you would deal with a record type records, have an owner they're encrypted and they can only be decrypted by whatever private key has encrypted them on chain. Highly recommend checking out the playground if you want to see some more complete examples than what I'll be able to get through today. That's at play. Leo lang.org And you can also find this information on the main website as well by going Alio.org. And if you go to Build, there's links to all of the stuff that I'm mentioning as well as our grants program, which is something that my team runs. If you're interested in building and getting a grant to build, definitely come talk to me and we can talk about your idea.
00:07:13.530 - 00:07:45.408, Speaker A: So with that, back to the workshop. How do we deploy an app on the network? So first we've installed all of our software. We need to create a new wallet. Two ways to do that, there's a CLI that you can use to do that or you can use the Leo Wallet extension like I showed you here. You'll follow a typical seed phrase setup process and you'll have a wallet. And then you can use our faucet to get some tokens. The faucet will prompt you with a QR code.
00:07:45.408 - 00:08:27.330, Speaker A: You scan it, you send a text to our faucet bot and it'll send you some tokens if you don't have a US phone number. Currently we're using Twilio, which is pretty limited as far as what countries that they've implemented. Just come and find me and I'll get you some tokens so you can follow along with the demo. So, jumping back into it, first thing we're going to do is initialize our project so we can do that by running Leo New. And in this case, we have this weird random string here so that our project name is unique. The global package manager requires a unique project ID. So this is just a way for me to increase the likelihood that we have.
00:08:27.330 - 00:09:02.388, Speaker A: So I'm going to go Leo New. I'm just going to paste this in here, have a new project. Cool. You'll see, our directory looks like this and then we can write our program. I've provided a very basic token example here. You can just copy paste this and check it out. Like I said, check out the examples for more complicated code or for more syntax examples and kind of more of the language features.
00:09:02.388 - 00:09:40.144, Speaker A: We're really just focused on how to deploy today. So I'm just going to go ahead and open up that new directory that I just created because I personally prefer working in Vs code. And we have three different types of files here that are important. One is our main file. So this is kind of the Hello World app for Alio. We can build it and it'll output an intermediate representation called Alio. This looks like any assembly language that you've probably seen.
00:09:40.144 - 00:10:26.512, Speaker A: The reason why this exists is because we're not executing on an X 86 execution environment or even an EVM execution environment. We're compiling down into circuits, which is kind of a new execution paradigm. So in order to abstract all of that complicated detail away, we've had to completely build language from scratch. You've probably heard of other projects like Noir or Aztec or Circom is another example of this kind of thing. So let's take our token example, and we're going to paste it into here. I'm going to build it. Looks like we have an error, right? So the last file that I did not talk about is an input file in a ZK circuit.
00:10:26.512 - 00:11:02.930, Speaker A: They're deterministic. And so you actually need to in order to build your circuit, you need to have your input. And with that, the way that we currently provide inputs to programs, at least locally, is with this input file. And so I have an example of this input file here that you can copy, and then we should be able to build our program. Looks like I'm missing a semicolon, or I have an extra one. Cool. So now if we went back to our instructions, we can see that our two functions that we just defined are here.
00:11:02.930 - 00:11:40.540, Speaker A: We have a Mint function, which is fairly straightforward. We take this token record and we return it, which will, if we run it, Leo, run Mint, we'll see that it outputs on chain. This would be encrypted because I'm running everything locally with my own private key. Of course, I can see what's going on here. And so if we wanted to transfer a token to another address, one important thing to note about Alio is that we don't work on the account model. You might have heard of UTXO. We have a model that's more similar to UTXO called the record model.
00:11:40.540 - 00:12:17.480, Speaker A: And so in order to execute a transaction, you need to spend a record, which means you need to input a record to a transaction, which would typically output a record as well. There is also a default record type on the network that I will show you in a few minutes once we get to the deploy example. So we want to run transfer. We want to simulate transferring from the tokens. We just minted this record to another wallet. And so I'm going to take this token record that we just output in the console and paste it in here. We have to remove these suffixes.
00:12:17.480 - 00:12:54.310, Speaker A: That's just kind of an annoyance right now. It's not an important detail. And so with that, we can run a transfer function. And if we look at our transfer function before we run it, you'll see we actually output a tuple of records, right? So we calculate the new balance. We create a record for the recipient and the transfer amount that we're interested in, and we also need to make a new record because we're spending the existing one that the sender is providing where the tokens are. So if we run this, we'll see we have an output. Our program works.
00:12:54.310 - 00:13:40.400, Speaker A: We've transferred ten tokens to this address, and the original sender now only has 90 tokens. So that was this part here, build and test. Just kind of an example to show you how you can run and build and work on programs. So I mentioned the record, right? If we want to submit a deploy transaction, we need to pay for it, and we need to spend a record to do that. One easy way to get a record is to go into your Leo wallet and check out your most recent activity. So this is a transaction that I made a couple weeks ago to put some credits into this wallet. We jump into the output of this transition, and one important thing to note is that this is completely encrypted.
00:13:40.400 - 00:14:26.112, Speaker A: You see the ciphertext here. If you are some other user, you can't see what happened in this transaction. But because I own this record, I can connect my wallet, I can decrypt it, and I can get the record plain text. And this is what I'm going to be using to tell the deploy program. What record am I talking about? Let me make this bigger for you guys. What record am I talking about? How many credits are in this record to be spent and announce as well? So I'm going to create a deploy Sh file just to keep things nice and repeatable. So I'm going to copy this long command, which this is a deploy command here.
00:14:26.112 - 00:14:45.850, Speaker A: Snark. OS is a utility that you'll install following through this workshop. It provides a bunch of CLI utilities to interact with the chain as well. If you want to run a node or approver, you'd use Snark. OS to do that. So we're going to grab that private key that I said you can steal from earlier. I'm going to paste that in here.
00:14:45.850 - 00:15:27.130, Speaker A: I'm going to take my project name, which is going to be my package name on chain, and we're going to run this. And I forgot something. So that record that I mentioned was super important. I forgot that. So let's go and grab that real quick. So we'll run this deployment. I'm fairly confident that it'll go through successfully, and then we could check out our program in an Explorer once we have our transition ID.
00:15:27.130 - 00:16:12.080, Speaker A: Oh, input record must belong to signer. Usually this happens this error message is not super descriptive. Usually this happens when the private key is not the same as the one that we're trying to send. So let's get this private key real quick and just double verify it was wrong. And so now that our private key is correct, you saw here, if you tried to spend a record that wasn't yours, it just doesn't work. You can't decrypt it, so you can't use it. 1 second.
00:16:12.080 - 00:16:36.066, Speaker A: I'm going to leave some time for questions at the end. Yeah, we'll be done in about a minute, once this finishes. Thanks. There's a couple of explorers out there. This is one. It's open source. This very wonderful community contributor named Haruka.
00:16:36.066 - 00:16:47.414, Speaker A: Big shout out to him. Just built this on his own. We tried to give him money. He didn't want any. So yeah, guy's kind of awesome. There's another one out there called Alia. One, two, three, IO.
00:16:47.414 - 00:17:25.842, Speaker A: It's a little newer. It's a little fancier like, it has kind of a prettier UI. They both have some differences in features. So if we go back to our deployment, you'll see it was successful. We can take this transaction ID and check it out on the Explorer, and we'll see our program here was successfully deployed, and actually, we can jump into our program and see our source code on chain. So we just privately deployed an app that implements a very basic private token with private minting and private transfers, all in 17 minutes or so. And so that's it for the workshop.
00:17:25.842 - 00:17:36.210, Speaker A: Super quick, super fast. Please come to me with any questions. I'm going to take some questions that we have time for, and then I'll be available afterwards for one on one. Bye.
