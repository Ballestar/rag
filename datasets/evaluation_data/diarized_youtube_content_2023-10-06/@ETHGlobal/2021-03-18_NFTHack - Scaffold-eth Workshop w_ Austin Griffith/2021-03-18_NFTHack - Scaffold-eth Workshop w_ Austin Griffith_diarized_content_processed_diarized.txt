00:00:00.330 - 00:00:40.090, Speaker A: Yeah. So we are having are we good with the streaming and everything? Andrew yes, we're good. Amazing. So welcome to the Scalaf Eat Workshop as we're letting everybody join. If you do have any question, please post them in the chat either on Zoom or YouTube as we go. And just a quick reminder, if you've heard all these talk, I've reminded you a million times, but go make your stake. Place your stakes for the hack so that you can participate.
00:00:40.090 - 00:00:45.962, Speaker A: And yeah, I will let you take this over.
00:00:46.016 - 00:01:05.458, Speaker B: Austin all right. What's up, everybody? Hi, I'm Austin Griffith. I'll probably just start sharing my screen here and just dive right into yo right there. Yeah. So I am Austin Griffith. You can find me@austingriffith.com or at Austin Griffith on Twitter, but that's me.
00:01:05.458 - 00:01:37.926, Speaker B: So, let's see. I'm going to bring can I bring everybody back over here? Oh, yeah. There we go. There's everybody. Okay, so I want to show off Scaffold ETH. So if we dive right into Scaffold ETH real quick, it's a freestanding DAP that has hard hat for compiling contracts and has a react front end that is ready to go for you and kind of wires everything together so you can just come in. You have to yarn start and install and start a back end and you have to yarn chain and that will fire up your local blockchain.
00:01:37.926 - 00:02:17.814, Speaker B: But then you yarn deploy and it's going to package up a template smart contract for you and it's going to deploy it to your local chain and then it's going to inject that into your front end. So you get a nice reload over here of your new contract. And let's do it one more time to make sure we see that. What we're going to see is we should see this contract update and we should get a new contract. And this is really good for being able to iterate and kind of learn as you go. So Scaffold ETH does have this full the quick start that I just went through is here. But then as you get into it and we'll dive into it more, but then you get into learning solidity and it's talking about passing stuff into your solidity and making changes.
00:02:17.814 - 00:02:35.742, Speaker B: So I just want to just wait. Let's add some exclamation points here. I just want to show that it changes. So looking at here's our contract. Here we go. We're going to deploy with some exclamation points in our purpose, just showing that we changed some solidity. And now this form over here, this Scaffolding, should auto adapt to it.
00:02:35.742 - 00:03:12.754, Speaker B: And eventually you carve this out and you build a real UI. But this is kind of like a stand in UI for you while you kind of iterate and look at your contract. So let's look at this real quick up close. So we have this smart contract that has a purpose, and we are console logging that purpose, console log in your solidity. Let's see it happen. We set the purpose, and then we console log it, right? So we have this one storage variable. So if I put in Hello, World over here and I hit send, there is a console log that fires over here in your yarn chain terminal.
00:03:12.754 - 00:03:32.480, Speaker B: I lost it, though. That is a great way to debug your solidity. First of all, it shows you how new we are to the space. That console log is awesome. But once you get in here and you need to really figure out what's going on with your contract, that console log is going to be really handy. So let's see. You want to be able to poke at your contract, right? I was able to set hello, world.
00:03:32.480 - 00:04:04.886, Speaker B: Let's just do the exclamation point again, okay. So we can talk to our contract. Let's talk about accounts first. So when you get into Scaffold ETH, if you go to Localhost 3000, you'll notice in the top right, there's an account that's generated for you, and you can grab funds from the faucet. And now we have some funds, right? And so let's maybe even have these two accounts here, and let's copy this address. And so hackathon projects. When you need to sit down and build something over a weekend, you're going to need to have an address input.
00:04:04.886 - 00:04:30.990, Speaker B: Wouldn't it be nice if that address input was kind of, like, prepared for you and had things like ENS resolution, had things like the blocky preview, had a QR code scanner. It will work this time, Catherine. Sorry. And then you could send, like, a dollar. Instead of having to send whatever the ETH value is, I can just say I want to send $1 and hit go. And we should see a dollar go from this account to that account, I think. Did it go? Oh, I sent it to Austin Griffith.
00:04:30.990 - 00:04:54.502, Speaker B: E. There we go. Okay, so now with wallets, you can connect and you can bring in your MetaMask if you want. And it's going to also have a nice network warning for people that are on the wrong network. Just a bunch of handy components that you're going to find that if you sit down and try to build a hackathon project, you just need all these components already. So I've kind of prepared them in Scaffold ETH so you can pull them off the shelf. Okay, cool.
00:04:54.502 - 00:05:35.718, Speaker B: So we've kind of got this. I don't want to log in as me. I do have the dollar, though. It worked. I'm going to log back out and to stick with that burner wallet that I got on page load. And let's just dive into just a little bit more Scaffold ETH before we start building something. So if you wanted to, say, add a una public counter here and set it equal to five and you hit save and deploy, this thing is going to notice that you added a new thing to your contract, and it's going to show up over here, right? So while we're waiting for that, I'm even going to add a function decrement that does what that does a counter minus minus, right? Counter equals counter minus one.
00:05:35.718 - 00:05:47.114, Speaker B: We're going to redeploy that. There's our counter. It's set to five. But now we have a decrement function. We've added two. We're kind of playing around with the EVM, kind of figuring out how Solidity works. We want to just kind of like test our assumptions here.
00:05:47.114 - 00:05:59.022, Speaker B: And here goes. Now we have a decrement function to call. And if I decrement that counter all the way to zero, what happens if I go one more? 255. Right. It rolls over. We get underflow. Yeah.
00:05:59.022 - 00:06:31.986, Speaker B: Word. So you need to learn about those things, right? And you need to figure those out. And so my theory is have a full standing DAP, pull all of this down and then kind of just go through this. If you're looking to learn, know, learn the primary data types by copy and pasting them in, throw in. Let's go see if primitives and data types, right? So you've got your UN, you've got a bool, but then you've got addresses, right? And you could totally just okay, let's create an address. Let's make it public. Let's call it owner.
00:06:31.986 - 00:07:09.250, Speaker B: And let's set it equal to and I'm just going to go right back here. Just copy and paste this right in here and hit save. And we'll deploy that, right? So we're just kind of iterating tight. Iteration, loops, small changes, testing our assumptions. We're seeing what's going to happen when we add this new owner here. Hopefully we'll see that we are the owner, right? We're keeping some arbitrary owner cool. And then maybe let's build just real quick, just to do some good solidity intro, let's require that the message sender, which is a global variable, that is the person that's accessing the function, is equal, equal to the owner.
00:07:09.250 - 00:07:34.474, Speaker B: And if not, we'll say not the owner. And so now hopefully only we can set the purpose. It's more of like a decentralized attestation for one account, right? Something along those lines. But now let's see what happens. So we're going to need our account, but we're also going to need some kind of bad guy account to make sure they can't set it right. We want to test it. So let's give the bad guy some funds.
00:07:34.474 - 00:07:55.150, Speaker B: So this should work, right? This work. This does not. Right? And we reload that in. There we go. We get an error, not the owner, right? So we can kind of build out our Solidity. We can copy and paste things from Solidity by example. We can kind of go through this curriculum.
00:07:55.150 - 00:08:04.054, Speaker B: But eventually you kind of get it. You get the feel for it. You've got solidity. You can write code. Solidity is not that hard. Writing solidity is pretty easy. Writing secure solidity is very hard.
00:08:04.054 - 00:08:31.214, Speaker B: But just putting some solidity down here and having this storage and execution is pretty easy. So let's clean this out. So by the way, I was using that owner. If you are ready for inheritance, you can kind of do that, right? And you can do is ownable. So this is just bringing in the Opeline Zeppelin stuff. Instead of using my ownership pattern, let's use Open Zeppelin's ownership pattern and see what that looks like. Oh, what did I do something about? Yes, I can't do that.
00:08:31.214 - 00:08:57.126, Speaker B: I'm going to have to say I'm going to use a function modifier only owner and you would know that by going and looking at the code or looking at what pops up over here in our preview. Okay, it's about NFT time. We are ten minutes in. Let's do some NFTs here. I think I need to maybe set this to public. Is it complaining about that? It is. Okay, well, we're getting through it.
00:08:57.126 - 00:09:28.386, Speaker B: Okay, so now that I've inherited that ownable contract from Openzeppen, we should see some new stuff show up in this interface, right? Yeah, sure enough. There's transfer ownership, there's owner and the owner is not us anymore because it's actually this guy down here. That's faucet address. The first address of the Hard Hat chain is the deployer here and is the owner. So what we'd have to do is maybe dive into our deploy script and do something like await your contract transfer. I'm just going to copy and paste it. Oh yeah.
00:09:28.386 - 00:09:40.406, Speaker B: To who we go into. Let's go to this guy. Okay, there we go. There we go. Let's do another yarn deploy. Now we should be the owner. So now you can kind of orchestrate stuff in your deployment if you want.
00:09:40.406 - 00:10:00.542, Speaker B: Let's get on to the NFT. So with Scaffold ETH, this helps you get set up. But now there's also tons of other branches that other people have worked on and committed back to the repo. And I'm going to look at a couple of those today. Let's see, I'm going to kill off that and kill off that. I think we're good over here with Scaffold ETH. Now let's move over here.
00:10:00.542 - 00:10:19.374, Speaker B: So we are in the branch. Let's see, we are in the simple NFT branch here. Simple NFT example. And let's see. Here we go. Oh, I may be way behind on questions. There's only like three things in the chat.
00:10:19.374 - 00:10:36.390, Speaker B: I think maybe I'm behind, but I'll jump back to that in a second. Let's get some NFT stuff going. So let's follow this exactly right? We cloned it down, we Cd'd in, we did a git checkout. Now let's yarn install. That's going to take time. We already did it. Yarn start.
00:10:36.390 - 00:11:17.182, Speaker B: Okay, so we're going to fire up that Dev server and then we'll do a yarn chain which is going to fire up our local blockchain. And then we'll do a yarn deploy and that will deploy our contracts, whatever they are to our local chain. Now here's our contract. So in this branch, the your contract is a your collectible. And we've brought in 721 encounters from Open Zeppelin and we've just basically copied their procedures here pretty exactly. Really there's a counter that will increment. So we have our base Uri.
00:11:17.182 - 00:12:00.322, Speaker B: So we're just throwing stuff in IPFS and we'll get to that in a second. But there's just a simple mint item and that comes right from the Open Zeppelin docs. We increment some tokens so each token has its own ID, and then we mint those to someone. This is a really cool, maybe like, tangent to dive in while we're waiting for this web server to come up is the difference in solidity between an ERC 20 and an ERC 721 really helps me understand fungibility and non fungibility. So when you think of the structure of an ERC 20 or a fungible asset, it's just balances of people. And there's a transfer function that moves balance from Alice to Bob, right. And if you want to check somebody's balance, they have 20.
00:12:00.322 - 00:12:31.242, Speaker B: Right. But it's fungible in terms of Alice can send five to Bob and then send five to Bob again, and then Bob could send those ten and you wouldn't know which ones are which. It's just a balance. Right. It's just a mapping of some user has some balance and that changes with the transfer. How that's different? With a 721 is each token has its own unique ID, and there's an owner of that ID and they're sent one at a time. So instead of thinking of a balance array mapping for a number, you think of more like this.
00:12:31.242 - 00:12:46.830, Speaker B: NFT is its own thing and someone owns it and someone can transfer it around. So kind of fungible versus non fungible. Oh, man. Come on. Dev server. We're waiting for this react dev server to come up. Okay, but while we're waiting, we've got our collectible.
00:12:46.830 - 00:13:19.930, Speaker B: We've looked through this stuff. What's next? What it wants to do is have us check out the Mint JS. So along with your deploy is a Mint JS. And in here, it's going to craft up IPFS objects. So I've prepared some of my own artwork. And what we're going to do is we're going to craft up this piece of art and we're going to put it into IPFS. And then we're going to take the little fingerprint, the hash, and we're going to put that into the contract and we're going to mint that on the contract.
00:13:19.930 - 00:13:37.970, Speaker B: And if we look at our mint function, it takes in this token Uri. So that's going to be our IPFS hash. Okay, I think our front end is finally up. Let's go look at Localhost 3000. It's going to look familiar if you have done anything with Scaffold ETH. Here we go. We can even go grab some funds from the faucet.
00:13:37.970 - 00:13:59.066, Speaker B: We are scaffold ething here. Okay, so IPFS upload. You've got a nice little toolbox here. If you want to upload something to IPFS, you can hit send. You can grab that and go back to IPFS download. You can grab it back. So nice little IPFS kind of debugging, but in our mint function, we've kind of taken care of that stuff for you.
00:13:59.066 - 00:14:25.022, Speaker B: You set up your manifest here and it will mint them on chain. Here we go. So you as the artist, basically, you're going to deploy an NFT contract and then you're going to mint each piece of work, and then it can be bought and sold here. So let's just follow the instructions. Where are we at? What are we at? Okay, so we edited. We need to edit this. And I think the one thing you want to do is just change this front end address.
00:14:25.022 - 00:14:45.640, Speaker B: But it's already set to my burner wallet, so we're good there. But if I do a yarn mint now, what's going to happen is it's going to oh, wait, we got to deploy the contract first, right? Where are the instructions? I feel like we need a yarn deploy before a yarn mint. Yes, yarn deploy. Okay, let's do that first. Sorry. Come on, come on. Here we go.
00:14:45.640 - 00:15:07.754, Speaker B: Okay, so now we're going to deploy our collectible and we could go debug the contract. We could see that it's nine fe four, right? Yes. Okay, cool. Now we're ready to mint our collectible. So we've deployed that contract at that cost. It's already pretty expensive. But now each one of these, we're going to spend some more gas and we're going to mint.
00:15:07.754 - 00:15:51.430, Speaker B: Right. So if I do a yarn mint, hopefully what happens here is it starts taking those IPFS hashes and minting them. Yep, there they go. And minting them on our NFT contract. So each one of these is a transaction, and you've minted NFT so you can pull this thing off the shelf, run through these steps, and you sort of have a local DAP that can mint NFTs and you can kind of build all the fun stuff into it. It's sort of like how you extend it is the interesting part of ethereum. Like ethereum's superpowers the fact that any old developer can grab a lot of this stuff off the shelf, change like one little piece of code, and it changes like a whole it invents a new financial mechanism.
00:15:51.430 - 00:16:11.060, Speaker B: Right. So there's a lot of room to just kind of take this and kind of iterate and make changes. Let me do the whole burner wallet thing real quick. Again, let's pull up a new account that points to Localhost 3000. Let's copy their account and then let's send them this bison buffalo guy. There we go. Transfer.
00:16:11.060 - 00:16:41.910, Speaker B: Send them a zebra transfer. Right, cool. So we're also sending around NFTs and we're seeing them move from account to account. I think the way it has you finish this one off is we edit the art, you send around. Okay, so deploying, right? So when you're ready, you can set your hard hat network to some other network and you'll do a Yarn generate and create a deployment account. And you'll fund that deployment account. And then you do yarn deploy.
00:16:41.910 - 00:17:02.814, Speaker B: And then it goes out to whatever network you want to go to. And then you can get into your front end over here, this app JSX. And you can change that to point to whatever public network you have and deploy that as a static website. And you've basically deployed an NFT minting platform thing. Right? Okay. So yep, down there you get the deploy. We mint.
00:17:02.814 - 00:17:37.114, Speaker B: Yeah, you can follow the instructions. There's some fun side quests, but that is the simple NFT branch. But the thing with this is it takes quite a lot of time or quite a lot of money to mint these. So as the artist, it's probably like $500 to throw that contract out there and then probably like $40 apiece to mint those NFTs. What I'd really like to do is I'd like to take that simple NFT branch and I'd like to fork it and I'd like to make a few changes to it. Right. And that's going to move us to the buyer mints NFT branch.
00:17:37.114 - 00:17:54.466, Speaker B: So let me try yarn install and yarn start. Hopefully that gets going a little quicker this time. We'll bring up the chain and let's follow the instructions right, right here in the README, there's some nice instructions on how this is going to work. And let's see. We get into simple NFT. Yeah. Okay.
00:17:54.466 - 00:18:29.210, Speaker B: So we have to do an upload this time. So this one's going to be different. Instead of deploying the contract and then firing off the mint contract to mint all your collectibles, we're going to first upload all of our collectibles and we're going to take all those hashes, basically all the fingerprints, a fingerprint of each piece of work, and we're going to put that into the constructor when we deploy our contract. So we're going to kind of set up it's kind of like counterfactual NFTs. We're going to set up our NFT contract so a certain list can be minted within that contract. But we're not going to pay for it upfront. We're going to have the buyer pay for it when they do the minting.
00:18:29.210 - 00:18:49.906, Speaker B: Oh, man. Are we going to have to wait for another development server to start up? That might take a little bit. Okay, let's go look at getting this art uploaded. So we've got the chain. Yarn upload is our next thing. Okay, so let's look at this code real quick. This one's set up so any artist can really just pick it up and edit this artwork JSON file.
00:18:49.906 - 00:19:24.802, Speaker B: I've kind of abstracted it out to you have this nice artwork JSON file now. And you get in here and you set what's the name? What's the description? What's? The external URL. What are the images? Is it going to have attributes? Let's just go on a little side quest to OpenSea real quick while we're waiting for this front end to come up. And if I go to I think I've uploaded a couple of these already. Let's go look at these. I want to show these attributes off and how OpenSea parses those. Come on.
00:19:24.802 - 00:19:47.720, Speaker B: OpenSea load. Okay, we'll wait for that to load. All right, let's talk more NFT topics. So once you've got this figured out where the buyer pays and I'll talk about some other methods. There we go. We're back. We're back.
00:19:47.720 - 00:20:16.302, Speaker B: Okay, I'll talk about some other methods in a little bit, but once you have this, we can get into actually, it's just coming up. Let's just no, it's going to take a bit. Okay, so once you have buyer pays, let's talk about some other fun mechanisms that we can build in there. So a bonding curve is a good example. Let's see if you go to Scaffold ETH and I think I have a cool market. I think it's called backlog market. Yeah, cool.
00:20:16.302 - 00:20:29.942, Speaker B: This is going to be a weird little bonding curve right here. Maybe I could paste this to Chat too. I think I'm going to here it is. I'm going to paste this to OOH. Maybe I'm not. Yeah, I am. Yeah, I am.
00:20:29.942 - 00:20:45.126, Speaker B: YouTube chat. Here we go pasting it. Here we go. Boom. Okay, backlog market. So this has a numerator and a denominator, and it's basically this multiplier. So we keep a price function and then we keep a numerator and denominator.
00:20:45.126 - 00:21:26.982, Speaker B: And then you buy these NFTs out of this gallery and the price gets more expensive. So we don't have to do any fancy calculus or anything with the bancor method here. If you want to make a bonding curve with NFTs, it's just you're buying these things one at a time, like in a discrete way. So you can easily put in this sort of numerator denominator kind of curve, and as they buy one one at a time, you just kind of multiply or subtract by that curve. So what do we got? So we have next price and we have previous price. And when someone goes to buy it's basically going to make sure that they're paying whatever the next price is, right? So that contract is out there. Let's see.
00:21:26.982 - 00:21:55.700, Speaker B: Okay. It's not liking that I don't have assets. I think what I need to do is the yarn deploy or yarn upload next. So following these instructions, next thing to do is a yarn upload. So it's going to take this manifest that I've set up this artwork, JSON, and now it's going to upload them all to IPFS and it's going to generate for us some assets. And while we're here, can we get the collectibles to load? Come on. Oh, no.
00:21:55.700 - 00:22:18.774, Speaker B: I think I spelled it right. I wonder if it's only cached for a while. Did I spell it, right? I did. I don't know what's up. Maybe opensea's testnet stuff. Let's try one more time. Okay, so we've uploaded our assets to IPFS.
00:22:18.774 - 00:23:03.430, Speaker B: Now we're going to mint a contract with our assets, fingerprints in them. So this takes in a bytes 32 array, and when you do the deployment, it's going to take all of our uploaded IPFS assets and pass those into our collectible. So when we do deploy, there's going to be just one payment that we have to make. We have to pay for that one contract to go, and it's going to be $500 or so right now with gas prices. But you just deploy that one contract, and then we've set in the contract that only certain pieces can get minted. So we've sort of set up our contract so it will only mint certain one lull certain ones that we tell it to. So now let's go check that out.
00:23:03.430 - 00:23:24.302, Speaker B: Okay, here we go. So here is our counterfactual gallery. Right. When we see all of these pieces of work, they're actually not on chain yet, but they're allowed to go on chain. Right. Let's go here, and let's grab some funds from the faucet, and I think it's going to give us a lot more. It did not.
00:23:24.302 - 00:23:43.902, Speaker B: We need more than that. Here we go. Here's a good way to get a ton of funds. You copy your address, you go to the bank, you go here and maybe do, like, $10,000, right? Okay, so now we have $10,000. It's going to cost us a little more to mint this, though. But now let's mint this bison right here. And what we do is we pay the gas.
00:23:43.902 - 00:24:02.780, Speaker B: So we, as the buyer, pay the gas for the artwork, and the seller basically gets whatever is left other than the gas fees. Right. So we can put in a price function. We can kind of iterate from there. And that's what I kind of want to show off. Let's see. Let's do the burner wallet thing one more time.
00:24:02.780 - 00:24:20.410, Speaker B: I think we're about out of time, too, but let me just set this up. So let's copy this person's address. If I go to collectibles, there's the buffalo that I minted. We should still be able to transfer it and see it show up over there. Awesome. And if they try to go over here, they probably don't have enough gas to buy that. Yep.
00:24:20.410 - 00:25:03.002, Speaker B: Okay, cool. So counterfactually minted NFTs, where the buyer pays for the gas, is really just a small change. This original contract, I've added a for sale and a token to Uri to token ID that's kind of separate. But I've taken that original contract from the simple NFTs, and I've added just a small bit. I've just added an extra thing of storage, and I kind of, like, looped through that and set those things and set them up to be for sale. And that's kind of the point I want to kind of hammer home with this is you can pick something up that's freestanding, that's already ready to go, and you can make small changes to it and really turn it into all sorts of different ideas pretty easily. Let me see what else we have.
00:25:03.002 - 00:25:17.714, Speaker B: I think I have another tab. We don't have really time to dive into it. Oh, this is the Punk Wallet. I love the way this thing looks. Let's see. Punk. The send button doesn't work right now, but look how cool this look at that.
00:25:17.714 - 00:25:32.994, Speaker B: Isn't that cool? Or if I log out of here and get a yeah, there we go. Or I do a burner wallet. Punk Wallet. Okay, cool. All right. Anyways, I'm off on a tangent. Okay, so cool little tweaks you can make to this contract.
00:25:32.994 - 00:25:52.730, Speaker B: We've talked about bonding curves already. We talked about a pricing function, but if you get online and look up open Zeppelin's contracts, you can really get in here and find out what other cool things you can do. Right. Let's go Tokens. Let's go to 720. By the way, 1155 is there. I think we've talked about it a little bit, but have 1155 on your radar.
00:25:52.730 - 00:26:16.226, Speaker B: If we get into 721, we can kind of see the basic stuff, but then let's go look at, like, oh, what is this? Burnable extension. Right? What if you want to make physical assets, like some socks and set them up so they're burnable and people can buy them on that curve? And if they burn them, then you send them the physical merchandise. Right. Cool. Fun thing you can do with physical. Oh, speaking of physical, look at this. This is physical art.
00:26:16.226 - 00:26:37.206, Speaker B: So it was like at an E Two conference. Vitalik was speaking, and I was, like, in the back printing these, and they were all loud. Oh, man. Embarrassing. But I printed my artwork out, and then on the back is a QR code. And if you scan the QR code, then you have that NFT in a nice little Burner Wallet, and you can send them around at the AF Festival. It was like my NFT heroes.
00:26:37.206 - 00:26:55.650, Speaker B: Like Matt Condon and Simon DLR. It's like sitting in the front row sending my artwork around with Burner Wallets. It was wonderful. Okay, so let's see. Loot boxes. How about the VRF stuff? You can get a random number for Chainlink. You can get a random number with Commit Reveal, and you can reveal an NFT later, which is kind of exciting.
00:26:55.650 - 00:27:18.774, Speaker B: Let's see interoperability. All right, here we go. So permissionlessly, right? Oh, man. Who knows what's going to be on the front page of Nifty Inc. I'm going to pull up a Burner Wallet and I'm going to go to Nifty Inc. And look, this is exactly the same. I've got the same account kind of in the bottom right? This feels like a scaffold ETH app, but this is nifty inc.
00:27:18.774 - 00:27:48.654, Speaker B: But I wanted to show you. This because it's an NFT platform we built that upgrades to Ethereum. But what I really want to talk about is the composability and the fact that permissionlessly anybody can take these and turn them into game assets, right? And they're NFTs available for anyone. So you can come in here and you could draw say we were like, I don't know, maybe we were making a chess game, right? And I could draw the pawn. What a terrible pawn this is. But I'm doing it. All right, pawn.
00:27:48.654 - 00:28:21.066, Speaker B: So what one of eight, right? So we'll do eight. I don't know if this is going to work, but what you could do now, now that I've minted this, is I could set up a script that sends these things to a bunch of people, and then I can go to Collab Land and I can say, actually, I think it's a telegram. Collab land bot. But I'll give them a shout out there. What I can say is, hey, I want to only have people that own this token in the chat. So let's see if I go to this is taking too long to mint. Let's see if I go here and sometimes the relay is down.
00:28:21.066 - 00:29:03.834, Speaker B: I try to pay people's gas, but it doesn't really work all the time. But if I go here let's see if we can see someone has owned look at these nice glasses of wine. Only one person owns that, but they could be owned by a bunch of people, and only those people could get into this chat, right? And that's just a really tiny example of utility that you can give to these. But that would be the challenge I would put out there for hackathon participants is to find some really fun utility for these NFTs. And they can be anything, right? It could be an ID card that proves that I'm something something, right? Or it doesn't have to be like a painting or a collectible, right? Like an NFT can be so many other things. And I'm excited to see what everybody creates. Let's see.
00:29:03.834 - 00:29:28.402, Speaker B: Oh, branches of scaffold ETH. I have it in my notes. If you go to Scaffold ETH and you're looking for something, go right here and type it in. Maybe bonding curve, right? Maybe you're looking for commit reveal. Maybe you're looking for NFTs. Maybe you're looking for like, a uniswap. Or maybe you're looking for Aave, right? There's tons of branches in there, and they can get you started right away.
00:29:28.402 - 00:29:40.200, Speaker B: So clone down Scaffold ETH, pull that stuff off the shelf and build something awesome. I think that's about it. We can do questions. Do we have time for questions? Questions?
00:29:40.970 - 00:29:53.050, Speaker A: You do have a few questions? I mean, you can definitely extend this a little bit. We don't have another workshop right away, so if you do have time, I want to respect your time, too, but we can take a look.
00:29:53.120 - 00:30:09.066, Speaker B: Yeah, no, I'm good. I'm kind of looking through. Let's see is it possible to add, ERC, 20 combinations? I think I'm looking at something else here. I see, ERC, 1155. Definitely check out 1155. Like go to the open. Zeppelin.
00:30:09.066 - 00:30:19.890, Speaker B: Contracts. I don't see any other questions though. I think we're pretty good. You see some oh chat. I see some more. Oh my gosh.
00:30:21.350 - 00:30:34.070, Speaker A: Yeah. If you jig in the chat there is like a few questions about security check. I think that might have been answered in the chat in YouTube. But I mean, there's not that many questions, there's just something about contract in the URL.
00:30:34.970 - 00:31:20.246, Speaker B: What, security checks so NFTs can't be stolen? Well, let's just dive into that. Real you're if you're running an NFT platform idk if you want to be custodial. Right, I think that might have been the problem with the recent hack is that people didn't own their own keys and own their own NFTs. But I just read the headline, I don't know much about it, but yes, you need to do a lot of auditing on these things before you go to mainnet. It's important that you don't lose people's stuff. Something about yeah, he was saying if I put in the contract address here I could look it up I think is what they were saying for the OpenSea stuff. Yeah, I could have done that.
00:31:20.246 - 00:31:28.710, Speaker B: I think if I would have gone to OpenSea and put in the Rinkabee contract, that would have worked. Word. Thanks y'all.
00:31:29.450 - 00:31:34.460, Speaker A: Thank you. Yeah. Is there any other question or we're good.
00:31:34.910 - 00:31:53.120, Speaker C: Last question, if you could touch on Scalability, if we need kind of a platform that requires a little bit more user interaction than just minting some artwork or something, actual voting and voting on content, voting on comments and stuff like that. Do you have any viable options at this point or are gas prices just too high?
00:31:53.570 - 00:32:08.814, Speaker B: That's a great question. Yeah. So right now I go to a side chain like Matic or XDI but I think that we do have some really cool L. Two solutions in the two month horizon. Right. Build your stuff to be EVM compatible. There are some gotchas with roll ups.
00:32:08.814 - 00:32:49.534, Speaker B: Like you don't have native ETH and you have to kind of have everything be a token instead of the ETH you have to use a different compiler. There's not like traditional blocks, it's just like transactions and transactions are happening in real time. So timing is a little bit different in that specific roll up. There's probably lots of other little gotchas, but I think that the key is sticking with EVM compatibility and kind of I can take my exact stack and I can deploy it to XDI and let people play around with it for cheap and easy. But there's a lot less security there. Right, so then that's with Nifty Inc. We have like, okay, we let the artist and we let everybody mint stuff very cheap over on XDI.
00:32:49.534 - 00:33:14.998, Speaker B: And then they can buy and sell that NFT. But it doesn't have to upgrade to Ethereum unless it gains a bunch of value. Right. There are plenty of nifty inks that have been upgraded to OpenSea, and I can now sell them on Mainnet, but there's a lot of them that don't deserve to go to Mainnet. And it's great, though, because as the artist, I can get in there and doodle whatever I want and hit Go. And it's an NFT.
00:33:15.174 - 00:33:26.494, Speaker C: Very cool. And is that as simple as kind of changing something, whether you use hard hat or Truffle, just changing something in your config to deploy to those? Or is there more considerations to make? Do you have resources for those that you recommend?
00:33:26.692 - 00:33:51.958, Speaker B: Yes, that's exactly it. You basically change the RPC address that you're deploying to and everything works exactly the same. So for Matic or XDI, just Google those and you can go pick up a small amount, slide into my DMs, I'll send you a penny of XDI, not too many people. And that's with one penny, you can deploy like, 100 contracts, too. So it goes a long ways on those side chains because it is cheap. But obviously there's the security trade off. Right.
00:33:51.958 - 00:34:02.506, Speaker B: It's a POA network, a DPOs, whatever you want to call it. It's not as secure as Ethereum. And so, yeah, there's always those concerns. Cool, thanks.
00:34:02.528 - 00:34:05.260, Speaker C: Yeah, we'll slide in. Thanks for the presentation. This is awesome.
00:34:06.350 - 00:34:34.146, Speaker A: Yeah. Thank you so much, Austin, and for the questions, too. Don't want to take too much of your time. I mean, if you want to take one more question quick in the chat, otherwise I will refer people to. So the way to get in touch with Austin is going to be for the next few minutes. If you go to hack support in the discord channel, austin will be, like, checking out your questions. If there's anything else that you want.
00:34:34.168 - 00:34:38.466, Speaker B: To cover, I am headed there now.
00:34:38.648 - 00:34:39.426, Speaker A: Awesome.
00:34:39.608 - 00:34:41.480, Speaker B: And feel free to ask questions.
00:34:43.210 - 00:34:45.480, Speaker A: Great. You want to take the last question?
00:34:46.090 - 00:34:51.850, Speaker B: Sure, whatever. Yeah, I think if anybody has a question, yeah, jump in. If not, we can just head to the chat.
00:34:53.150 - 00:35:01.062, Speaker A: There was something I was saying, like, who runs the IPFS gateway that NFTs on OpenSeas use? What happened if the entity folds?
00:35:01.206 - 00:35:19.570, Speaker B: Oh, that's a great question. Yeah. Probably infuria is running. There are there are old projects I think I saw Denison talk about. There were some of his assets that he uploaded to IPFS and some of them that he put in the cloud. And the ones that he put in IPFS, he hadn't pinned. He didn't have servers up and kind of went away and came back.
00:35:19.570 - 00:35:48.758, Speaker B: Those are gone. Right? Like, you need to keep those things pinned. You probably want to run your own IPFS pinner also probably keep things in the cloud as a backup. But, yeah, it's a peer to peer network of storage, and there isn't a layer of incentivization, as far as I know yet, so you kind of have to run your own. But when that incentivization layer comes in, it would be pretty dope if you could say, hey, this site of mine, I'll pay you guys to all keep a copy of it, right. And I think that's coming awesome.
00:35:48.924 - 00:36:00.254, Speaker A: Thank you so much, Austin. I don't want to take more of your time. I'll see you on Discord on the hack support channel. Thanks again so much to you and everyone who's been here today.
00:36:00.452 - 00:36:09.820, Speaker B: Thanks for having me. I enjoyed it. Oh, there's that punk again. It's like when you're building something, you get excited about it. I love it. All right, I'm diving into the chat. Thank you so much for having.
