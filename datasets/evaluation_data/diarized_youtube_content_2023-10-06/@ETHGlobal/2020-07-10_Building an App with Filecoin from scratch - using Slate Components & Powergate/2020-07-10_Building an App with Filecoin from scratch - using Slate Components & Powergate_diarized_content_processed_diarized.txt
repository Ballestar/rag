00:00:09.530 - 00:00:10.640, Speaker A: Okay, we're good.
00:00:11.970 - 00:00:46.646, Speaker B: Howdy. Happy Friday, everybody, and welcome to the last session of week one for Hackath. It's been quite a packed week. I know a bunch of you have attended many of the sessions, including Andrew, so kudos to all of you who've stuck it out through this first week of official hacking. We are very excited to have Cake with us. He works in application design at Filecoin, and he's going to be walking us through his sample app. And if I left anything out, he'll.
00:00:46.678 - 00:00:48.826, Speaker A: Be sure to cover it. Absolutely.
00:00:48.928 - 00:00:50.220, Speaker B: So go ahead.
00:00:50.830 - 00:01:28.614, Speaker C: Thank you, Trent. I'll take over from here. So I'm going to share my screen real quick. All right, so my name is Cake. I guess my name is JeM, but I go by Cake at Protocol Labs, and I'm working on this project called Slate. And Slate is basically a piece of software that's open source, that works on top of the filecoin network through technology called Powergate, which is provided by Textile. And Textile is an infrastructure company that provides almost a ton of really cool stuff.
00:01:28.614 - 00:01:59.422, Speaker C: And so I'm excited to go into Slate and tell you guys more and also kind of how to build your own if you really want to. So kind of touched on this a little bit earlier, but Slate's Internet research platform, it's in pre brand phrase, so we're playing around. So my friend made this graphic this morning for me. Think of it as like an ice cube. And we're kind of looking to kind of add a lot of really meaningful features. Like, I think people need image uploads in their products. I think people need a way to organize their ideas, connect ideas.
00:01:59.422 - 00:02:33.610, Speaker C: And so we use Textile Buckets to do this. We use Textile Powergate IPFS and the Filecoin Network. And as services become more reliable, we start experimenting and seeing how it could come together into a finalized product. And one thing that's really nice about working on Slate today is we're going to be doing it all open source. So we're not hiding any process from anyone. We're trying to allow contributions from the entire Internet. So if you have friends who want to work on something like this, if you just want to take the code and run with it and do your own thing, you're totally open to.
00:02:33.610 - 00:03:24.634, Speaker C: And I think it's going to be a lot of fun for people just to kind of be able to use software where it can be used by many people and it's not hidden from you how it works. And so the reason why we're making this now is I think there's a lot of really cool opportunities that come with a project of the scale of Filecoin. It's so massive and so big, and there's so many things that will happen in the future that are really meaningful that getting ahead of it now. Building some cool features and products will allow us to really kind of move forward on the imagination of what this network could be. And on the internet today, we have a ton of really cool research progs that are used in Silos. So from arena to get outline to roam. These products are really great for gathering your thoughts and ideas and Dropbox and Box are really great serving users too.
00:03:24.634 - 00:04:30.370, Speaker C: And so I think it's a time to kind of look at the intersections and see, wow, what kind of product can we build? What kind of new experiences can we build? And like I said earlier, just opportunity to be open source from the beginning. So less gatekeeping sharing everything we learn as we go along the way, sharing all our mistakes because making mistakes is hard learning process right now, if you go to Slate Host system or just Slate Host on the Internet, there is a react component system that you can use today. And I'm going to demonstrate later how you can use that in your own website. And if you plug in Powergate, if you plug in the component system, you're going to have something really cool that you can use and play around with. Just a quick note again, slate source code is MIT licensed and we do all our discussion publicly. And one really cool thing about Slate is we're kind of like building with everyone who wants to be part of it right now. So within the last week and a half, we've had seven open source contributors.
00:04:30.370 - 00:04:59.898, Speaker C: We're slowly building a team of various front end engineers, backend engineers, and Textile has been a tremendous help. I can't stress it enough, they have helped so much with building this thing. It wouldn't be possible without Aaron's work on the JS library. It's made life so easy. You should check it out if you haven't seen it yet. And it's a totally joy to work with Textile. So let's take a quick tour of I guess what we have on the I guess what we've exported already.
00:04:59.898 - 00:05:28.420, Speaker C: So here's the design system. It's really easy to use. Just do NPM, install, save Slate react system and then the next code block is basically just using a primary button and you can use that component today if you want to. We have a 3d globe. Globes are cool. So people have been adding globes to a lot of cool websites these days. So we have our own and we're going to expand on it too and make it really easy to show peer to peer connections around the world when it makes sense.
00:05:28.420 - 00:06:04.462, Speaker C: Here's an example of you got a react component and it has a few input fields and a button. And if you plug it into the response from using the JS Powergate client, you can use the component immediately. So it's very plug and play. And I really want a lot of these types of experiences that people can just plug and play so they can build apps really easily. Here's an example of running Slate locally. So Slate is also a working product that you can try out today. And Slate will work in the web.
00:06:04.462 - 00:06:34.934, Speaker C: So here's an example of the web UI. You can basically send filecoin back and forth. You have a list of files that are proposing deals and we're going to add other really cool features. I haven't had a chance to prototype all of them for this talk, but in the future there's a lot of really cool things to come. Here's an example of an image that's not mine that you can preview in the app. This is actually the Electron wrapper, so shout to Colin who made this happen super quickly. It was really awesome work.
00:06:34.934 - 00:07:31.050, Speaker C: And basically this kind of preview can expand a whole bunch of different things. We can have video playback, we can have games, et cetera, because you can store almost anything on IPFS. Here's an example of creating a new Wallet address here's account management. So we'll expand on this a little bit more later. Here are default settings when you make storage deals so you don't have to reconfigure each time you make a storage deal. And yeah, here's another example of doing file management and uploading a file. And right now we don't have retrieval deals on the product, but we will at later time as we have hosted devnets that we can try out and have multiple clients and multiple machines making retrieval deals between each other and then introducing some older features that we took out basically like analytics, graphs of performance, et cetera.
00:07:31.050 - 00:07:57.620, Speaker C: And so here are some older shots from a couple of months ago that we were playing with that will probably make a resurgence back to the product. And so if you want to contribute, all you have to do is go to https GitHub.com filecoin project slash Slate. If you join us in Slack and DM me, I'll bring you into the group. If you want to make contributions, you're more than willing. There's a lot of issues. There's also issues labeled for the public.
00:07:57.620 - 00:08:12.060, Speaker C: So let's build a website from scratch. So what I'm going to do is I'm going to stop sharing my screen here and I'm going to share.
00:08:13.870 - 00:08:14.186, Speaker A: I'm.
00:08:14.208 - 00:08:15.450, Speaker C: Going to share my desktop.
00:08:16.270 - 00:08:16.730, Speaker A: Cool.
00:08:16.800 - 00:08:47.794, Speaker C: So we're done with this keynote. Right here is the actual client. So you can see here I have a photo randomly. I want to store a file on the network. I click here, add a file, I'm going to take this photo of a bear. I'm going to hit open source the file locally and then I can start making a storage deal, use initial address, make storage deal. And right now I've actually broken it.
00:08:47.794 - 00:09:24.378, Speaker C: So it's not actually changing its status, but it would actually update the status to looking for a minor trying to make a deal. You can preview the image here. You can click on Wallet, create a new address here's an example. Hi everyone. Create the address, and you can see that there's a new address here. And here are your files. And so what I'm going to walk through actually, is how to build something like this pretty quickly using our design system and powergate.
00:09:24.378 - 00:10:04.606, Speaker C: So I'm going to close this, and right here I have a browser screen with a Hello World kind of example. And if I go over to actually real quick, this is basically the source code for Slate. I'm not going to go into too many details because it's available on GitHub. You can look through all of it yourself whenever you feel like. But there are examples of other experiences on the filecoin network, other scenes that we haven't implemented fully yet, but we have plans for. And so I recommend checking that out. But if you are, the Zoom bar.
00:10:04.628 - 00:10:05.680, Speaker A: Is in my way.
00:10:09.650 - 00:10:51.338, Speaker C: Okay, if you are starting a new project, let's say this is all you have. And so I am using Next JS. I'm using a styling library called Emotion. And you can see right here, I have beta 13 of the Powergate client and the Slate react system. And what I'm going to show today, I kind of skipped some of the installation steps, such as, like, NPM install. But I'm show you guys how you could get to where the Slate client is today with just using a few components. And for starters, I think looking at this right here to get acquainted, let's just play with some styles so we can see what happens when we change some code.
00:10:51.424 - 00:10:59.150, Speaker A: So if I change this to background color red and change this to Hello.
00:10:59.220 - 00:11:17.474, Speaker C: World, if we go over here, updates immediately. And so the next obvious question is, well, if we use a component from the system, will it render? So we have this code here, button primary. And so what we can do take.
00:11:17.512 - 00:11:31.030, Speaker A: This, we can say system, button primary, hello world, system primary.
00:11:32.190 - 00:11:36.026, Speaker C: And of course, we can't use this code unless we import the system.
00:11:36.128 - 00:11:41.820, Speaker A: So as system from Slate react system.
00:11:42.510 - 00:11:47.680, Speaker C: And sorry, I'm going to pause for a second because Zoom is blocking my okay.
00:11:55.750 - 00:11:56.306, Speaker A: Cool.
00:11:56.408 - 00:12:10.418, Speaker C: So I hit save, and the button shows immediately. So cool. Using the system is fairly simple. Components are there. Let's do something more meaningful. So if I were to delete this.
00:12:10.504 - 00:12:12.006, Speaker A: And delete this, and let's say I.
00:12:12.028 - 00:12:15.574, Speaker C: Want to create the experience for adding or getting a token, what I would.
00:12:15.612 - 00:12:24.700, Speaker B: Do is I go to there's just a few questions. Specifically, is there a starter project people can follow along with?
00:12:25.470 - 00:12:40.266, Speaker C: Yeah, so there is a starter project you guys can all follow along with. Oh, wow. I'm sorry. The font's so small, I didn't even see that. Let me see if I can blow it up. So is this better, the size? Timo, can you see it more clearly?
00:12:40.458 - 00:12:41.200, Speaker B: Yes.
00:12:41.730 - 00:12:42.238, Speaker A: Great.
00:12:42.324 - 00:12:48.580, Speaker B: Okay, I'll do that. One question, just a little bit up there. Scroll up the chat a little bit.
00:12:49.750 - 00:12:50.500, Speaker A: Sure.
00:12:55.430 - 00:12:58.854, Speaker B: Oh, Timo's asking about your console, I think.
00:12:58.972 - 00:13:05.800, Speaker C: Yeah, I'll increase the size on everything. So if you go to example, that's a starter project that you can begin with.
00:13:06.250 - 00:13:07.320, Speaker A: Let's see.
00:13:13.790 - 00:13:55.810, Speaker C: Why were there green check marks on the files you were choosing with the file uploader? I don't remember the green. Oh, that's because my folder is in Dropbox. And so that means the file is synced on Dropbox. See, is there any background syncing functionality that knows when files already upload to IPS file? Not yet. That's something we plan on adding later. Is that coming from the JS client? Yes. I think I understand the question correctly.
00:13:55.810 - 00:14:26.000, Speaker C: You're asking if it comes from the code that's running the web version of Slate? I think it is, yes. And then is this based on Powergate? Yeah, absolutely. You Dropbox. I agree. Sorry about that. And then, yeah, we don't have syncing working yet, but I am confident that with enough effort, we'll get there.
00:14:26.770 - 00:14:27.520, Speaker A: Cool.
00:14:28.470 - 00:15:01.194, Speaker C: So what I think most people be comfortable doing is going to a documentation site like this and looking at the let's say you want to get started with Powergate. So you click on generate powergate token. You see this example component probably looks a little weird. You see this code? What you can do is you can literally copy and paste this code and let's put it here just so we can see it. We don't have to use all of it. So we can take this right here, this create token component. We can say system create token, use it here.
00:15:01.194 - 00:15:14.362, Speaker C: This code won't work because you need state. So let's drop some state in here, token. Let's say its default value is null and then we need a handler for it handle create token.
00:15:14.426 - 00:15:17.646, Speaker A: So we'll do this, we'll make it.
00:15:17.668 - 00:15:36.070, Speaker C: An arrow function to keep the closure of the parent. And we'll just do this right here. So one thing to note is that requires Powergate to be running locally. I do have Powergate running locally. In the bottom left, it's this window right here. I'll highlight some text in it. But this is powergate.
00:15:36.070 - 00:15:45.914, Speaker C: This is my DevNet. And this is the example code you're seeing here. And this is actually Slate running up here.
00:15:46.032 - 00:15:48.634, Speaker A: And it's pulling for updates, but yeah.
00:15:48.672 - 00:16:08.340, Speaker C: So let's see if this code works. So what I'm going to do is I'm going to instead of returning the value, I'm going to do this set state. We can do this set state because we have arrow function that's keeping the correct context for this. And we'll do token and copy and paste this here.
00:16:08.870 - 00:16:11.522, Speaker B: You can increase the font size on this as well.
00:16:11.656 - 00:16:21.400, Speaker A: Yeah, absolutely. And then we'll do that and this will break because you need to do this. Cool.
00:16:22.330 - 00:16:25.400, Speaker C: And this was supposed to happen here.
00:16:26.570 - 00:16:32.620, Speaker A: This can go cray pal. This can go here.
00:16:33.390 - 00:16:54.702, Speaker C: And we can delete this and everything should just work. And obviously we'll have to extend this and change where powergate is later on. But just to prove that it works, we'll go back to our code here. You can see the components rendering. There are some issues with the type.
00:16:54.756 - 00:16:55.902, Speaker A: Of this, but if you hit create.
00:16:55.956 - 00:17:22.778, Speaker C: Token, it's generating a real powergate token. So from here on, this point on, we can actually start using the rest of powergate. That requires a token, which is really cool. That didn't take too much time. You need to know some concepts such as react and maybe state and how to bind a function. But other than that, probably took us maybe a few minutes. And let me increase the size of.
00:17:22.784 - 00:17:24.300, Speaker A: This so you guys can see it.
00:17:25.230 - 00:17:28.330, Speaker C: Is this better? Timo, can you see it clearly?
00:17:31.070 - 00:17:32.870, Speaker B: Yeah, that looks a lot better.
00:17:33.040 - 00:17:33.614, Speaker A: Awesome.
00:17:33.732 - 00:17:34.960, Speaker C: Sorry about that.
00:17:36.770 - 00:17:37.614, Speaker A: Cool.
00:17:37.812 - 00:18:12.380, Speaker C: So now that we have this working example, let's get a list of the filecoin wallet balances, because that's something that you'll get when you have a powergate token. So we can go to this example here and so we can see that this is what we're expecting. We're expecting two addresses, names, types, balances, and the code. Looks pretty simple. Let's find out if it actually is simple. So we know that this is the peers list component here. If we remember what we did in the previous example, we can just copy and paste that.
00:18:12.380 - 00:18:14.620, Speaker C: And I'm going to add this here.
00:18:15.630 - 00:18:18.074, Speaker A: Actually, that's not good.
00:18:18.112 - 00:18:26.480, Speaker C: That's actually a bug. So I'm going to cheat, unfortunately. And I'm going to look at.
00:18:28.210 - 00:18:32.640, Speaker A: My system file. That's the real component name. I'm sorry, guys.
00:18:34.370 - 00:18:42.242, Speaker C: Okay, so system filecoin balances list. And I'm going to go here.
00:18:42.296 - 00:18:43.460, Speaker A: I'm going to take this.
00:18:45.110 - 00:18:51.174, Speaker C: So we know right from here that we need an info object. And so I'll just add info as.
00:18:51.212 - 00:18:53.480, Speaker A: Null here for now.
00:18:55.210 - 00:19:34.782, Speaker C: And I need to make this call eventually. So what I'll do is I'll add a call here after you create a token to get the info. And then this is not very performant or smart, but I'll do this state info. I'll just set info here and I won't render this component until I have this state info. And this is using a ternary operator.
00:19:34.846 - 00:19:39.750, Speaker A: So we can just add a null here for the case where it doesn't exist.
00:19:41.050 - 00:20:02.090, Speaker C: And if I go back to my browser screen, I can find it. Powering token off. Token can't be empty. I missed a step, actually. So I need to after I get a token.
00:20:05.410 - 00:20:13.230, Speaker A: What is the doc here? It's set token.
00:20:28.250 - 00:20:29.320, Speaker C: Try it again.
00:20:33.690 - 00:20:53.822, Speaker A: Find obviously cool.
00:20:53.876 - 00:20:56.880, Speaker C: So generate a token. I'm so sorry.
00:20:59.890 - 00:21:07.270, Speaker A: Umfo.
00:21:52.250 - 00:22:13.406, Speaker C: Sorry about that. So I missed an S on my variable name. But once you create a token, here's an example plugging in lender component that will render the list of addresses. And this is kind of cool. Like now that you have a powergate off token. And now that you can query for your info, you'll have a list of addresses. We can keep going with this.
00:22:13.406 - 00:22:31.976, Speaker C: So basically we can try out another thing, which is actually, before I continue, let me check questions. I had a drive on it earlier where I didn't make any mistakes.
00:22:32.008 - 00:22:33.260, Speaker A: This is really sad.
00:22:33.680 - 00:22:57.780, Speaker C: Okay, so we'll create a platform address. This is kind of fun. Hopefully this won't go really smoothly. So this one's fairly simple. Once you have a token, you can create an address. So we'll plug this component in and we'll make sure it's part of the system. And it should render even if I don't.
00:22:57.780 - 00:23:38.508, Speaker C: So the components rendered here and I'm actually going to make a change to my code. What I'm going to do is I'm not going to have powergate live here in this function closure. I'm going to add a class member. I'm going to say it's null. And then instead of const power gate, instead of it only being disclosure, I'm going to do this PG equals createpow. And then I'm going to do this PG here and this PG here. And now I can use PG freely.
00:23:38.508 - 00:23:46.116, Speaker C: I don't lose that in the closure here. And what I might actually do is something else. I'll add a handle refresh ahead of time.
00:23:46.218 - 00:23:46.870, Speaker A: So.
00:23:49.160 - 00:23:56.824, Speaker C: I'll take this code out. It's not part of this. I'll go here and I'm going to.
00:23:56.862 - 00:23:58.330, Speaker A: Actually add a little button.
00:24:00.940 - 00:24:01.690, Speaker C: System.
00:24:02.540 - 00:24:03.870, Speaker A: What was it?
00:24:05.520 - 00:24:14.456, Speaker C: I'll go to my buttons. I'll see what options I have. I have button primary, primary full. I have button secondary. Let's do button secondary.
00:24:14.488 - 00:24:33.810, Speaker A: It looks fun. Or button secondary, full refresh. And then I'm going to add an on click handle refresh, save. Cool.
00:24:34.500 - 00:24:38.308, Speaker C: And so let's go back to create file coin address.
00:24:38.394 - 00:24:40.000, Speaker A: What I'm going to do is I'm.
00:24:40.000 - 00:24:46.010, Speaker C: Going to add that function handle create address async function.
00:24:46.940 - 00:24:56.910, Speaker A: And I'm going to go back to my docs. I'm going to look at this and I'm going to add take this code right here.
00:24:58.800 - 00:25:16.290, Speaker C: This becomes this PG name type, make, default are responses from using the component from the function callback. And it should just work. Famous last words. We'll see what happens.
00:25:18.440 - 00:25:21.110, Speaker A: So I go back here, or maybe.
00:25:22.200 - 00:25:26.230, Speaker C: You have one more power gate. Oh, thank you so much.
00:25:27.240 - 00:25:28.036, Speaker A: Let me see.
00:25:28.138 - 00:25:31.528, Speaker C: Oh, you're right. You are right. Thank you.
00:25:31.614 - 00:25:36.760, Speaker A: Appreciate you. Cool. Here I am.
00:25:36.830 - 00:25:40.040, Speaker C: Let's see if everything plays out. Generate a token.
00:25:40.460 - 00:25:40.968, Speaker A: Cool.
00:25:41.054 - 00:25:42.132, Speaker C: Hit refresh.
00:25:42.276 - 00:25:42.980, Speaker A: Cool.
00:25:43.150 - 00:26:12.070, Speaker C: Let's create a new address. Thank you so much. Make it BLS, make it default, create address, hit refresh. Boom, we have their address. So with a few minutes of scrambling and a few mistakes here and there, we're able to just kind of I mean, we have basically a way to create addresses and we have a way to look at them. And if I refresh again, it's filled with free textile money. So that's kind of cool.
00:26:12.070 - 00:26:37.436, Speaker C: Obviously, once you have all this money, you kind of want to send around between addresses. So let's add another component. We'll go to send an address filecoin. Here's another example. And just like the one before, we can just kind of take this component here and I'm going to actually put.
00:26:37.458 - 00:26:40.248, Speaker A: This behind this as well. Info.
00:26:40.424 - 00:26:58.980, Speaker C: If there is no info, don't show this one. And then info system, send address filecoin. Sorry, I'm not used to this size.
00:26:59.050 - 00:27:02.310, Speaker A: It's really big. Okay, cool.
00:27:03.560 - 00:27:27.070, Speaker C: And what I'll do here is I'll do handle send. I'll go back to the docs. I'll read the signature here. It says source, target, amount, cool. Powergate, cool. We have all those things. I'll change this to this PG and.
00:27:28.320 - 00:27:30.668, Speaker A: We can console log the response too if we want.
00:27:30.754 - 00:27:31.870, Speaker C: It's not that important.
00:27:33.520 - 00:27:36.432, Speaker A: Cool. And this one should just work as well.
00:27:36.486 - 00:27:50.180, Speaker C: So we'll come back here. I'm going to generate a new powergate token. I'm going to hit refresh. Awesome. We have everything on Bi BLS. Create token.
00:27:51.960 - 00:27:53.296, Speaker A: Hit refresh.
00:27:53.488 - 00:28:15.372, Speaker C: Let's make another one. What's up everyone? Create an address refresh. We have three hit refresh again. Now we have money. Let's send some money. So I'm going to send from WhatsApp, everyone to this address here. And I'm going to say let's just.
00:28:15.426 - 00:28:21.470, Speaker A: Give up half our money or see if it's possible or something like that.
00:28:23.360 - 00:28:25.132, Speaker C: No response from the call.
00:28:25.186 - 00:28:27.464, Speaker A: But if we hit refresh here, boom.
00:28:27.592 - 00:28:56.632, Speaker C: We sent some file coin. So just a few copy impastas and we have a way to send money between each other really easily. So that's kind of cool. The next thing to do is what you all kind of hopefully been waiting for is make a storage deal. So let's do that. So here's the component. Here is the name of it.
00:28:56.632 - 00:29:21.440, Speaker C: Create filecoin storage deal. Here is where it's declared. So we'll just grab this and we'll go here. Of course we need system. This isn't really the cleanest way to do it. We can also delete there's many ways to do this. So if you're new to react.
00:29:23.780 - 00:29:24.156, Speaker A: I'm.
00:29:24.188 - 00:29:52.244, Speaker C: Cheating by declaring it this way. But you can always do for reference, import some specific component from slate react system. But I'm just trying to be quick, so I just want to save some time. So we have this component here, create Filecoin Storage deal, handle submit it's not really great names.
00:29:52.292 - 00:30:00.910, Speaker A: Let's do handle create Storage Deal and then we'll do handle create Storage Deal.
00:30:04.480 - 00:30:06.224, Speaker C: And I can't remember what the code.
00:30:06.262 - 00:30:07.296, Speaker A: Says, so I need to go back.
00:30:07.318 - 00:30:20.870, Speaker C: And look at it and says I get some data and I admit it's a little hacky, but I get the UN eight array and then.
00:30:24.520 - 00:30:25.376, Speaker A: Yeah, it's.
00:30:25.408 - 00:30:26.992, Speaker C: Pretty much it looks pretty straightforward.
00:30:27.056 - 00:30:35.610, Speaker A: So we'll take this, we'll copy and paste it here. Cool.
00:30:37.660 - 00:30:40.008, Speaker C: And if I go back to let.
00:30:40.014 - 00:30:41.530, Speaker A: Me double check this code.
00:30:43.740 - 00:30:45.710, Speaker C: Sorry, I just got to trust this works.
00:30:46.160 - 00:30:59.310, Speaker A: And then wait. The promised. So what we'll do from here?
00:30:59.700 - 00:31:14.948, Speaker C: We're back at square one again. We'll generate a new powergate token. Awesome refresh. Boom. We have all this stuff. You guys don't need to see this again. You probably don't want to send money back and forth right now.
00:31:14.948 - 00:31:19.844, Speaker C: You probably want to see the storage deal. Let's click add a file. I like this photo a lot.
00:31:19.882 - 00:31:21.752, Speaker A: It's really pretty cool.
00:31:21.886 - 00:31:56.850, Speaker C: Photo four, file size, make storage deal. And yeah, here is a console log of the deal in progress, CID status. And we're making storage deals. So I didn't think I was going to blaze through this so fast. I think it's because I was maybe a little bit nervous. But yeah, this is pretty much an example of how you can take powergate. Take this component library and you're sending file coin, you're creating addresses, you're seeing the status of things.
00:31:56.850 - 00:32:23.130, Speaker C: You're making storage deals. And then very soon we'll have peerless user accounts, more examples. So everything that we do in slate, we're doing out in the open. So you'll get access to the same components. You can hack them, you can mod them, you can fork them, you can say you can do better. I think most of you can probably do better. That's pretty much it.
00:32:26.700 - 00:32:27.164, Speaker A: I guess.
00:32:27.202 - 00:32:59.092, Speaker C: Like, I ended a little bit early, but I love to open the door up for any questions or if you guys want me to run through something again. A lot of the work here on the components, like these icons, colors, this globe is really fun to play with, spin around. We'll definitely have this code is also open source. So if you want to take the globe and do something with it, you can. But it'll be really cool to see miners or peers from around the world in this globe. I'm not responsible for actually a lot of this work. Like a lot of this work was done by the community.
00:32:59.092 - 00:33:18.540, Speaker C: So I brought in mentees, strangers from the Internet. Everyone contributed code all around. And so our Slack group right now has about 40 people. We have 52 stars on the repo, but really enjoy working with anyone who really wants to help build this new thing that I think is actually incredibly meaningful.
00:33:21.040 - 00:33:22.510, Speaker B: There are a few questions.
00:33:22.880 - 00:33:53.956, Speaker C: Yeah, for sure. So there is not a list of deals yet. I know that in this current example, there is a list of deals in the Slate client, but not in this one. I haven't done a generic component everyone can use yet, but that's next on my list. We're definitely going to add those components in so everyone can see that Aaron just made Christmas happen today. So he has all the deal transaction history that I'm going to plug in. And so we'll have components for that too.
00:33:53.956 - 00:34:37.300, Speaker C: So it'll be very easy to stitch together something that has deal history that you can look back at and maybe make a registry at some point so you can retrieve whatever you would like. Oh yeah, Juan, that's a great idea. Thanks for bringing that up. Let me check if there are any other questions before I dive in. Yeah, so I'm going to actually show you guys how to add something to this page really quick if you guys like. So it is running locally on my machine. So if I go to localhost system, you can see the local version and shout to my friend Ryan who made this kind of like slate cube for cold storage if you get the joke or kind of funny, hopefully.
00:34:37.300 - 00:35:10.880, Speaker C: But yeah, let's say I wanted to add a component here for looking at storage deals. And so I'll walk through how to add a page and go from there. These are all Experience pages, so they have their own URLs. So this is Experiences peers list, and what's really cool about the framework I'm using, it's pretty light, but can everyone see my IDE in my terminal?
00:35:12.980 - 00:35:15.056, Speaker A: Just want to make sure that you.
00:35:15.078 - 00:35:16.988, Speaker C: Guys can see it, especially this file.
00:35:17.004 - 00:35:19.250, Speaker A: System probably see we can increase the size of this.
00:35:23.880 - 00:35:28.436, Speaker C: I'll just do it in terminal so you can can you guys see this?
00:35:28.618 - 00:35:35.300, Speaker A: This one cool. So it's really big. I'll expand it out here.
00:35:35.450 - 00:36:12.820, Speaker C: So I'm in Slate, I just cloned it and I'll do an LS and I'll have a look at the directory here and I see this folder called Pages. So I'll go in there, do an LS, and Pages has some of the bootstrapping that's involved. For NextJS, I'll go into a folder called Experiences. I'll do CD experiences and I'll do an LS. And you can see that every single name here make storage, deal, peers, list, send, address, filecoin, create address, filecoin, wallet, balances, generate powergate token. They all map one to one here. So whatever the file name is, the URL in the browser represent that one to one.
00:36:12.820 - 00:36:22.760, Speaker C: So we can make a new one here and just say playground JS. So here's playground JS.
00:36:24.940 - 00:36:25.656, Speaker A: If you're new.
00:36:25.678 - 00:36:28.376, Speaker C: To Unix, I don't know how many beginners are watching, but you can also.
00:36:28.398 - 00:36:30.890, Speaker A: Just do like touchdog JS. And so.
00:36:32.940 - 00:36:34.956, Speaker C: You can just create a file that way too.
00:36:34.978 - 00:36:36.140, Speaker A: It's way faster.
00:36:36.720 - 00:36:43.052, Speaker C: So we can do is just copy and paste this and I can go.
00:36:43.106 - 00:36:46.830, Speaker A: Here, let's just delete all this stuff because it's a new example.
00:36:48.100 - 00:36:49.250, Speaker C: Hello world.
00:36:50.980 - 00:36:52.604, Speaker A: Change this to playground.
00:36:52.732 - 00:37:17.060, Speaker C: You don't have description. The URL is just for string matching to show as active playground. We can get rid of this const here. We can delete this as well. One really cool thing about react, I'm not sure if you guys know, but in NextJS is you can actually express this entire component.
00:37:17.220 - 00:37:37.730, Speaker A: I don't know why my computer is being so slow. I'm going to close this tab, move this over here. I can also express this as export default. Delete all these things.
00:37:41.620 - 00:37:59.350, Speaker C: And. It won't appear on the left sidebar yet until I do something manual. So I need to go here to system and you go system page. I'll just add a component for that link. This is kind of embarrassing. I should probably make this automated, but.
00:38:00.120 - 00:38:09.716, Speaker A: It'S a work in progress. Let's add a playground. I'll do pack FS playground. If I go back to the browser.
00:38:09.828 - 00:38:11.400, Speaker C: And I hit refresh.
00:38:13.340 - 00:38:16.140, Speaker A: There it is. Hello, world.
00:38:16.290 - 00:38:27.580, Speaker C: So if you guys yeah, sorry about that. Other file or other grid screen. Well, I kind of closed escrow.
00:38:31.840 - 00:38:34.384, Speaker A: Peer info component to look at peer information.
00:38:34.582 - 00:38:37.376, Speaker C: Like the component that would render if you clicked on a peer net.
00:38:37.398 - 00:38:38.224, Speaker A: Peer list.
00:38:38.342 - 00:38:53.530, Speaker C: Yeah, that's a great idea. Change the configs or launch multiple FFS. Oh, yeah. So we can do an example of settings. That one's actually a pretty interesting one. So we can go to.
00:38:56.780 - 00:38:57.208, Speaker A: Let me.
00:38:57.214 - 00:38:58.568, Speaker C: Just show you this table component I.
00:38:58.574 - 00:38:59.704, Speaker A: Have here real quick.
00:38:59.822 - 00:39:25.324, Speaker C: So we have a generic table component. Thank you, Jason, for working on this. And it has copy and pastable widgets already in here. So you can copy and paste different columns if you add the option. Here are all accepted react properties. Here's an example of it being used. So when it comes to just rendering data, we can do a number of things really easily.
00:39:25.324 - 00:39:40.196, Speaker C: We also can add to it because it's open source. So you can add any other types that you want. And if we go to the peer list right here, I'll address Juan's first because I'd like to show I don't want to mispronounce your name.
00:39:40.298 - 00:39:45.412, Speaker A: Is it karate or it's karate.
00:39:45.476 - 00:39:48.072, Speaker C: Like karate chop. Oh, sick. Awesome.
00:39:48.206 - 00:39:48.600, Speaker A: Cool.
00:39:48.670 - 00:40:04.344, Speaker C: Nice to meet you. We can add like a way to I can show you how that type affects this table. So if I go to the peers list component here and I go let's.
00:40:04.392 - 00:40:14.880, Speaker A: See, 1 second components, modules, peer list.
00:40:15.750 - 00:40:31.960, Speaker C: And we have the key. We can specify specific width, but I want it to be clickable. So what I can do going back to the tables page, I can see what type would make it clickable. And.
00:40:36.190 - 00:40:39.210, Speaker A: Type I want is actually missing from here.
00:40:39.360 - 00:40:41.642, Speaker C: But I'll just try let's say file link.
00:40:41.696 - 00:40:48.400, Speaker A: Let's say the type is file link and see what happens. Hit save.
00:40:49.970 - 00:41:21.446, Speaker C: I go back to the peers list and this is actually a clickable link now. So what we could do is we can actually add a place for it to go if we had based on its ID. So that's an example of getting a peers list done really quickly. And I don't know if I really want to get into the weeds right now, but I want to show you how karate I want to show you how we do settings page right now. So I'm going to open slate in.
00:41:21.468 - 00:41:23.926, Speaker A: The browser just a little bit faster.
00:41:23.958 - 00:41:25.420, Speaker C: Than running it in the.
00:41:28.190 - 00:41:31.580, Speaker A: Hopefully it does not break.
00:41:40.510 - 00:41:41.980, Speaker C: Hope this is working.
00:42:02.410 - 00:42:19.994, Speaker A: It's not?
00:42:20.032 - 00:43:13.238, Speaker C: Great. Well, maybe I'll show you just in the code itself. So if I go to My, I have everything organized by a folder called Scenes, and I have a page called Edit Account and Edit Account sorry, not Edit Account settings. And so you can see here I have an abstraction called Actions where I organize all the things that will communicate with a server. And I have a mapping of every single setting that Powergate provides back to the exact same structure it was provided. And so this is an example of I myself like a flat hierarchy when it comes to state in an application. So I converted everything to a flat hierarchy.
00:43:13.238 - 00:43:33.586, Speaker C: But when I'm saving it, it's important to bring that back to that exact same hierarchy that existed in Powergate. And so here I'm doing it client side. You can see how everything here is mapping back. And then if I go to Actions and this code is available for you on Slate repo, I'm actually going to.
00:43:33.608 - 00:43:41.966, Speaker A: Post this in the chat for you. So https.com filecoin project slate.
00:43:42.078 - 00:44:07.146, Speaker C: You can check that out. You can follow this navigation when you go look at it. But if you look at Actions here, I do some generic header config, server path config. I make a call, a fetch call to Settings here. And then I include that data you just saw in that one file. And if I look at my server.
00:44:07.178 - 00:44:07.950, Speaker A: JS.
00:44:10.610 - 00:44:57.110, Speaker C: You can see that all it takes here is just one Powergate call to configure settings. And so I had a really awesome conversation with Textile. They are super easy to work with, so if you ask them anything, they make life so easy. But all I do is I pass in the config I set in the client before I made the API request, and then I'm there. So I imagine when they add more settings, it'll be just as easy as getting as long as you have the right shape of data, it will just work. And one reference that I really love using is this is really well written. This is a perfect example how to get started with Powergate.
00:44:57.110 - 00:45:28.870, Speaker C: I highly recommend just going through each of these and trying them out. When someone wants to help me out with Slate, I also recommend they go just check it out. This is really well written, but if you go to SRC and you go to FFS and you go to this file right here, this is like a really great example of how you should comment your code. Everything is well explained. And you can see the shape of everything too. So I rarely have to bug Aaron. I think for random questions, it's just kind of like very yeah, it's a gRPC call.
00:45:28.870 - 00:46:06.540, Speaker C: You can just go in here and you can see even what types are available for creating a new so there's supposed to be three types of file coin addresses, but we're only using two. And for here, just to see this type, it's obvious to me that there's only two supported right now. So I really like moving in lockstep. With this library. I can see pretty much everything I need to see. Thanks for the question. Me too.
00:46:06.540 - 00:46:12.510, Speaker C: Maybe I'll try to get everything. Yeah, definitely. Filecoin Legos.
00:46:13.090 - 00:46:13.562, Speaker A: Yeah.
00:46:13.636 - 00:46:38.060, Speaker C: Sorry. Thank you, Aaron, for clarifying. One thing I go through daily is I have situations like this on Mac. It's kind of a lot easier to manage these, but I end up doing this a lot. So I remove these manually. I know there's a command for it, but I just kind of like the feeling of deleting these. Sometimes they just keep I think this one's because it's running.
00:46:38.060 - 00:47:04.846, Speaker C: This is like the only tedious part of working on Slate. And then these should crash. I have a command in Slate that makes life a lot easier. So I do NPM run dev and I do reset data. One of my mentees add this shout out to Daniel, hope you are around. But this allows me to make local net. And then I'll run this command again from scratch.
00:47:05.038 - 00:47:06.450, Speaker A: Close the server.
00:47:08.790 - 00:47:39.420, Speaker C: I'll make the local net and this doesn't take too long. And I'll do NPM run reset data team. I'm sorry this is so small. Blow it up.
00:47:49.100 - 00:47:52.600, Speaker A: Awesome. Okay, so this should work.
00:47:52.670 - 00:47:53.544, Speaker C: And it works again.
00:47:53.582 - 00:47:56.460, Speaker A: I think if I just hit the browser.
00:48:02.160 - 00:48:19.170, Speaker C: Awesome. We're at a blank slate of the followfund client and then edit account here. I didn't really show this off, but I can turn myself into this. Arthur, I see your question. I'll answer it really soon.
00:48:20.820 - 00:48:34.390, Speaker A: Oh, boy. This should work. At least changing this should work.
00:48:37.900 - 00:49:24.324, Speaker C: Here's an example of the settings. The front end for it, so you can see configurations and so having a component per each. We'll have tooltips too, so you can explain everything. But yeah, running. And then we have some forward backwards navigation too, so you can go back and forth between scenes really easily. Yeah, Juan, I'd love to do that. So, Arthur, I started working on Slate actually before a major update that the guys at Forcel did where they have API routes that are part of the framework and not like you don't need to write your own server for them.
00:49:24.324 - 00:50:11.620, Speaker C: So I actually run a custom express server and I take the bindings for basically rendering a react page from the Next framework. And so I have an Express server and then I call that function that renders a react page manually instead of just using Next JS out the box. So there's like custom configuration there. But as of today, that will no longer be an issue. You can just use Next with no customizations and you should be able to just create API endpoints for yourself. And you can add express middleware such as cores, authentication, whatever you need without doing an Express server. If you're curious about web development in general, I have an example code base here that I use to kind of like mentor.
00:50:11.620 - 00:50:43.136, Speaker C: It's an extension of my older work with this one. So I kind of explain how you would set up Postgres and Express Server and build a front end and how that whole thing comes together full stack, which I think is actually really useful because when you're building applications, using powergate or any other libraries. What you're actually really trying to do is build an application, and you're using the power of a library. But the library is not the focus. So what would a public version look.
00:50:43.158 - 00:50:45.520, Speaker A: Like accessing the server's power gate?
00:50:47.140 - 00:50:56.870, Speaker C: Arthur, to clarify your question, are you talking about if you're running a local Power Gate and a local DevNet, what would that version look like? Is that what you're asking?
00:51:00.880 - 00:51:14.492, Speaker D: I think you mean like a hosted textile is running these hosted Power Gate instances. So maybe the question is about creating a UI in an app that would connect to those hosted Power Gate instances.
00:51:14.556 - 00:51:42.436, Speaker C: Oh, that's a great question. Thank you, Juan, that really helps. I think it's as easy as changing the host here to be even. I don't think you have to sweat too much. Basically, once there is a host that exists for a hosted Power, you just swap the value here. And so in both examples, the one I just did in Slate, that's pretty much what I would do. And I'd probably move those values to configuration file.
00:51:42.436 - 00:51:48.670, Speaker C: I have them here as constants. But I hope that answers your question, Arthur. Course too.
00:51:49.120 - 00:52:03.256, Speaker D: Would the Powergate token be per user or per application? Like, would the developers ship the app without a token hard coded in? Or would a user, when they start running it, would generate an account and a token?
00:52:03.448 - 00:52:47.550, Speaker C: So that's a great question. A lot of it's in consideration right now, like the ideal experience in one way, slate will be a web app with user accounts and so we can manage that Powergate token for you in a centralized way. Unfortunately, when you're doing it locally, offline or whatever, you'll have to have some options to manage that token yourself. And we're going to play with the whole gambit of possibilities and make sure that there's a good experience for each of the flavors that you want. So it's my way of answering, I think like anything goes right now, but it's definitely all those cases, I think between Aaron, Andrew and I, we've been talking about them briefly today. I think we'll go into more of this. Arthur, I hope that answers your question as well.
00:52:47.550 - 00:53:25.560, Speaker C: Yeah, I'm going to want to ask the great question earlier about how to add a new route to this app. And so I have a file for that and it's called Navigation Data and all the routes here are basically just JavaScript objects. And so I haven't dry run this. I'm just going to try to remember one which was the peer list page. And I haven't tested it in a while, but I think its ID was like four or something like that. And then I I'm think just going to call it like, Anything Goes. And I'm going to give it a custom page title like, Good Luck, Jim.
00:53:25.560 - 00:53:29.996, Speaker C: And I don't know what this decorator value is for, but I hope it.
00:53:30.018 - 00:53:31.836, Speaker A: Is what I think it is.
00:53:31.938 - 00:53:34.844, Speaker C: Sorry, my IDE has become really big.
00:53:34.882 - 00:53:38.328, Speaker A: So it's really hard to find myself.
00:53:38.434 - 00:53:44.060, Speaker C: But this is where this file I referenced earlier, that's the wrong file.
00:53:44.140 - 00:53:50.850, Speaker A: Sorry, index no, wrong file. This one.
00:53:54.120 - 00:54:15.396, Speaker C: Here are my scenes. So edit account. If I look at navigation data, this decorator represents which of the scenes to render. So I'm just going to go and pull out peers right now. And I'm going to put this here and ignore true means. You don't want it to peer on the sidebar. We want to appear on the sidebar.
00:54:15.428 - 00:54:20.268, Speaker A: So we're going to remove this value right here. And I think this should just work.
00:54:20.434 - 00:54:30.910, Speaker C: And so we'll have a look at the app. There we go. Anything goes. Boom. And then we have the old peers page one. Yeah, I see your hand. Yeah, it's really cool.
00:54:31.600 - 00:54:36.560, Speaker D: Could you just walk through adding a file? Just the whole thing of creating a new page?
00:54:36.630 - 00:54:37.056, Speaker C: Absolutely.
00:54:37.158 - 00:54:41.120, Speaker D: Add a file. And so just so that it's like end to end, people.
00:54:41.190 - 00:55:02.344, Speaker C: Absolutely. Yeah. So this was like an existing page, right? And that kind of seems easy because it's already there. And I'm just stitching things together, remembering things. I'm going to go into the Scenes page here, and I see these scenes. And these scenes are actually as simple as really basic react components. There's nothing special about them.
00:55:02.344 - 00:55:30.208, Speaker C: There's no configuration on them that makes any different. They're just react components. And so I'm going to make one called Scene World Peace because that's what I hoping for in the world today. So we're going to hope for some World Peace export default class. Scene world Peace extends react component. And I'm going to render and sorry, I can't see my code right now because the zoom is blocking it.
00:55:30.214 - 00:55:30.836, Speaker A: So I'm just going to do this.
00:55:30.858 - 00:56:00.076, Speaker C: Real quick and then return. And I'm not even doing anything fancy here. I'm just going to say Div, hello, world or World Peace, please. And then I'm going to do import as star as react from React. That's all I have here. And so I have the Scene World piece. I'm going to go back to the pages and I'm going to be like, I'll just do World piece here.
00:56:00.076 - 00:56:10.640, Speaker C: I'll do scene world piece. Add that here. I'll go up to the top. I'll do import Scene world piece from Scenes.
00:56:14.980 - 00:56:15.730, Speaker A: Cool.
00:56:17.140 - 00:56:19.600, Speaker C: And one last thing to do is.
00:56:19.670 - 00:56:26.820, Speaker A: Instead of peers, let's just do World Peace and then World peace.
00:56:28.840 - 00:56:51.420, Speaker C: And this should world peace. So that's in under a few minutes, I think that's probably like 30 seconds, 4 seconds. You can add a new page to this really easily, and it has access to all the global state provided by Powergate, has all the access to when we add Textile Hubs I mean, features for buckets.
00:56:52.080 - 00:56:57.276, Speaker A: It'll work as well. Yeah.
00:56:57.378 - 00:57:11.360, Speaker C: I'm hoping that everyone will be able to take this code, and if it's bad, they'll tell me, because that's really useful too. There is no library, actually. So Joshua, it's a great question. I decide to not go with Redux.
00:57:11.520 - 00:57:12.580, Speaker A: MobX.
00:57:14.600 - 00:57:58.156, Speaker C: You name it. I actually did a lot of JavaScript consulting before this project, and I decided that a singleton object is good enough for State, believe it or not. And the browser is more advanced than it was five or six years ago, so we don't need anything fancy. And I've worked in early stage products before where I've realized people just want to be able to read the component and know what it does and know where things are being passed down the chain instead of, like, imagining, oh, you're going to indirectly do this thing. And I also wanted to make it really easy for if someone wanted to add TypeScript or if you really want to flow. Flow is great. Nothing against flow.
00:57:58.156 - 00:58:30.140, Speaker C: It's just like if you want to do those things and you wanted to add types, you didn't have to go through and type Redux, for example. You don't have to go and type all these complicated libraries. You can just stick to simple stuff. So before we added Electron, we were only at like, 15 dependencies. I'm going to probably spend some time this weekend cutting down dependencies, making sure that this is really easy to take. Use how you please, and I hope to learn from everyone else. I mean, honestly, a lot of people are just really brilliant, and I think it's all about providing people an opportunity to share their knowledge around JS.
00:58:30.140 - 00:58:38.430, Speaker C: I think some libraries don't teach a lot of really important principles, so you use them over time and you forget things can be really simple.
00:58:39.140 - 00:58:46.050, Speaker A: So yeah. Hope that answers the question. Cool.
00:58:47.780 - 00:58:57.270, Speaker C: Well, thank you. This has been a huge privilege. Thank you guys so much. Sorry about the hiccups earlier, but thank you for your time.
00:59:02.040 - 00:59:02.790, Speaker A: Awesome.
00:59:03.260 - 00:59:05.530, Speaker B: Any final questions before we wrap up?
00:59:06.620 - 00:59:08.452, Speaker D: This is awesome. Thank you, Jenny.
00:59:08.596 - 00:59:15.210, Speaker C: Thank you. Thanks, Textile. Textile made me look so good.
00:59:18.720 - 00:59:49.588, Speaker B: All right, there's no more admiration for the work. Cake is done. We can wrap up there and officially cap off week one of Hacka Fest. It's been a ton of amazing events, and you all are the last folks to see the tail end of it. We'll be sending out an email tomorrow to everybody who's in the hackathon with the list of week two events. Actually, Andrew and I were just before this talking about how we're going to get them in the calendar. And there's quite a few again, but it's all great content.
00:59:49.588 - 01:00:26.048, Speaker B: So we're excited to get that scheduled, get everybody invited, and have a bunch more great sessions as people continue to build. And with that, I think we can wrap. I'll do one more plug for Showcase Channel. Go check it out. We've got a couple of things where hackers are going to make content, and we're going to make this awesome compilation summarizing people's progress over the hackathon and just really feature the hacker perspective about why this stuff is important. So go to the Showcase Channel in Hackafest and think that's it. We can call it there.
01:00:26.048 - 01:00:29.680, Speaker B: Thank you, everybody. Thank you, cake. Thank you, Textile.
01:00:30.660 - 01:00:32.080, Speaker C: Thank you, Textile.
01:00:32.740 - 01:00:36.560, Speaker B: We'll see everybody Monday.
01:00:38.340 - 01:00:38.830, Speaker A: See it.
