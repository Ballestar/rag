00:00:00.650 - 00:00:38.666, Speaker A: Hi. So this is Aidan, CEO of ChainSafe Systems. I'm Afri. I'm working for Parity Technologies. We are doing a short Ethereum 101 session, like getting started running your own node, connecting to Web Three provider. And yeah, it's basically a very basic introduction to everyone for the 2040 2% that are new to Ethereum here. So, first of all, I'm working for Parity, so I'm kind of biased.
00:00:38.666 - 00:01:18.422, Speaker A: But I would encourage people to run their own node, not directly to rely on structure providers because it's a nice experience and it gives you better feeling for how Ethereum or how decentralized networks actually work. So for Ethereum, there are different implementations. There's like the official reference implementation that's gas the Go Ethereum client. We at Parity. We developed the Rust Ethereum client. Parity ethereum. It comes with additional features like multi chain support or enterprise features like private transactions, different pluggable.
00:01:18.422 - 00:02:36.550, Speaker A: Consensus can dive into that later. And there are many more clients available, like Pantheron Trinity, a lot of different implementations of Ethereum protocol. So if you want to develop a decentralized application on Ethereum, in most cases you will just start with emulating a blockchain environment in a so called developer mode by running the different clients clients you like most preset configured for a developer specifically that comes without networking and some kind of instant block sealing mechanism that basically watches your actions. And whenever you broadcast a transaction, it seals a block just for you. But at some point you want to step up the game and want to deploy your applications, maybe on a public testnet, which is more close to zero main net conditions. Do you want to talk about testnets?
00:02:38.090 - 00:03:20.766, Speaker B: Yeah. So kind of in going into the testnets, oh, we're missing Morton. Okay, so we'll just talk about Robston. So Robson is currently active proof of work testnet that might be interacting with already. So the reason this is a problem is because proof of work testnets aren't incentivized to have actors acting in a way that's healthy for the network. So it's very susceptible to hacks spam attacks. So anyone can basically bring down the network.
00:03:20.766 - 00:04:24.230, Speaker B: Okay, sorry, so anyone can really bring down the network and yeah, I mean, for regular developers, most of testing is involving smart contracts and really just deploying some kind of smart contract and just seeing how that works. So the actual main net conditions of the Consensus mechanism. So having a proof of work testnet isn't really necessary. Where that does become necessary is coordinating hard forks. So, for example, during the Constantinople tests that were happening a month ago previously, that was kind of done on Robson because it's the only kind of net like testnet. But again, when you're just testing your smart contracts, this becomes kind of a bit cumbersome to developers because they're kind of reliant on this non incentivized proof of work that doesn't really provide you the ability and stability that's necessary to test smart contracts. Regularly.
00:04:24.230 - 00:05:25.420, Speaker B: And because of the spam attacks, literally COVID was proposed. So Coven is led by was first implemented in Parity Ethereum and led by a group of people. You can read more about it, you just search COVID proposal. But basically it is a Proof of Authority testnet. And this is a completely different paradigm because it's reliant on a set of validators to as Afri was talking about in the develop from talking about Developer mode, dev mode. It's basically sealing the blocks with these kind of trusted validators. So it's a bit different from a consensus perspective than the main net, but it really provides the stability and the usability that is necessary to actually test smart contracts as opposed to testing consensus hard forks and just different EIPS and stuff that would be necessary in the proof of work world.
00:05:25.420 - 00:06:23.360, Speaker B: So the really kind of cool thing about COVID is that it supports Pwasm. So right now you can deploy Rust Smart contracts to the COVID testnet. There's a really cool tutorial on deploying an ERC 20 in Rust that I highly recommend. It's fulfilling to do that. And yeah, so because of these features that aren't available other clients, this testnet is siloed off and only usable within the Parity Ethereum. So, whereas Robsden is cross client, COVID only works within Ethereum context. So this also stops us from being test certain things and it also just stops us from having a reliable and consistent testnet in case of clients not able to actually run the network itself.
00:06:23.360 - 00:07:03.226, Speaker B: So in response to mean in response to COVID, rinkp was proposed by Peter from the GEF team and basically it's as well. Okay, so going backwards, COVID runs Authority Round as its proof of Authority consensus mechanism, whereas Rinkp runs Leak. So they're very similar. There's a couple different nuances that are different. If you're interested, please come up after ask some questions. But it's small things really. Really what makes them super unique is the feature sets of the clients themselves.
00:07:03.226 - 00:07:53.180, Speaker B: So Pwasm and so these testnets could never really come together because Pwasm support would need to pantheon Geth and a whole bunch of clients. So in response to that, Afri and I just started talking a lot and because he is very open with and very transparent about what he does, I learned about a cross client testing problem up until then. Never really thought about it, never considered it. And then I see a comment that he made, GitHub. It had been an open problem for a year. That there was no cross client proof of Authority testnet. Doesn't sound very sexy, but it's a real problem.
00:07:53.180 - 00:08:46.662, Speaker B: And so what we did was at ETH Berlin in September, we worked on implementing Aura into Geth, which now done the opposite. So at the time we had issues with writing Rust. Our team writes go. So we attempted to go, we attempted to write it into GEF Aura and it didn't really go too well. So we reset it and have now, with the help of the community, been able to implement it now in five different clients. And it is live now. It's been live since January 31, where we pushed a red button, started the testnet at Girlicon Berlin.
00:08:46.662 - 00:09:23.000, Speaker B: And so that was super exciting. Thank you to the DoD for hosting that. But yeah, why does this matter? Why is a cross client proof of authority testnet matter? And it mainly comes back to Usability and developer friendliness. If you do not have a consistent testnet up and running that is always available, we'll encounter issues. So, for example, when we were working on this project at East Berlin, rinkby went down for a short period of time. So this is something we don't really consider often. But what happens when that happens? Right, we're screwed, basically.
00:09:23.000 - 00:09:38.940, Speaker B: So a cross client testnet ensures that there's stability within that network because of this kind of multi client paradigm where they're making sure that the network is always running.
00:09:42.510 - 00:10:28.250, Speaker A: So, yes, similar to the developer presets, most clients support presets pre configurations for public testnets. For gurley, for instance. It's like gas gurley or parity girly. The Parity pull request is not merged yet. So it's like Soon TM, but we are getting there. So now that you want to develop on the testnets, you probably want to send transactions, deploy contracts or just connect whatever you are developing to your local node. You in most cases want to enable Rpcrps.
00:10:28.250 - 00:11:14.890, Speaker A: In most cases you use HTP, probably. But there are also some clients implement WebSockets or IPC APIs. So you can just go forever, whatever you want. Default RTTP or RPC port is 85 45 as you change it. So if you want to get started with Gurley testnet, for instance, I mean, we are biased because we launched it, but we would recommend you to use Gurley. We have different block explorers, we have BlockScout, we have ether scan, we have a status dashboard, we have different faucets, we even have a bridge. So you can bridge your old legacy testnet coins to little Girlies if you don't need it anymore.
00:11:14.890 - 00:11:17.820, Speaker A: Yes.
00:11:20.910 - 00:11:51.106, Speaker B: We'Re not trying to say that proof of work testnets don't matter. They really do matter. And we need to incentivize people to mine them and actually be a part of that network. And that's why we created a bridge that allows you to bridge up to 100 ETH. So if you want to go and mine so with proof of authority testnets, there's a pre allocation. So you do not get testnet ETH for validating a block. So the only real way for us is to use the faucet or to bridge from any other testnet.
00:11:51.106 - 00:12:03.260, Speaker B: So we highly recommend that you go out there, you get involved in the testnet, then bridge that over to Gurley. Burn that Ropson. Anyway.
00:12:05.870 - 00:12:34.370, Speaker A: Yeah, bridge. We came up with a bridge idea in Prague. Pretty nice. So if you're lazy and don't want to run your own local node. You can just connect to public C endpoints or public APIs blocksgout. Prismatic Labs and some other people are running public RPC endpoints. Infrur has just announced this week Gurley support so you can use for Gurley.
00:12:34.370 - 00:13:06.080, Speaker A: We've written a tutorial how to spun up your own nodes with TerraForm and yeah, we have more resources now we are getting into Active, just walking through like connecting MetaMask to a local girly node, vetting an account, sending a transaction, trusting girly testnet ether. So MetaMask is a browser extension that allows you to manage accounts? Basically.
00:13:19.730 - 00:13:20.480, Speaker B: Yeah.
00:13:39.730 - 00:13:52.580, Speaker A: Are you running a local node right now? No. Okay, so you use the public. Okay, so show it. Yes.
00:13:53.750 - 00:15:28.860, Speaker B: So yeah, if you open up MetaMask and so you can see already here that I'm connected to a custom RPC and you can see here localhost. So if you're running it locally so yeah, you would very conveniently just hit up the custom RP. You very conveniently will do that and connect to one of these endpoints just like that. You will be maybe it's not HDS or maybe it's just down here. Yeah, it's better to run your own node for sure. Yeah, it seems like it's not working. Testing.
00:15:28.860 - 00:16:22.188, Speaker B: I'm going to definitely try it just h. I mean I tried Https before so it's having issues but whatever, I don't really want to deal with it. Yeah. So I already am connected to a custom RPC, the open endpoint here. And yeah, very quickly I can go to just any of I could go to the bridge, but I'm just going to go to a faucet because it's a little bit more convenient. And just like this. Sorry, I'm going to use the other one because it's not social.
00:16:22.354 - 00:17:26.960, Speaker A: So we have two faucets. One is like throttled so you can just enter your address and get like a small amount of ease which guesses enough to cover transaction fees. This one. And we also have an authenticated faucet where you can authenticate yourself, the social media account to get a bigger chunk of ease of testnet that's to prevent spam, obviously. And it's pretty straightforward, you just fill in the captcha and their address and you get like very small amount of testnet which you can use to send transactions, contracts, interact with smart contracts, bootstrap your decentralized applications. Yeah.
00:17:30.100 - 00:17:57.370, Speaker B: A faucet works. It's pretty simple to anyone who hasn't interacted with one before. If you have any questions, please come up to us. We'd love to help you get started. And then it's as easy as sending ETH. Going to send some to myself and it really is that. Yeah, if anyone needs some ETH, I might know a guy.
00:17:57.370 - 00:18:35.160, Speaker B: So it's as simple as that. Send some ether to the one account from the one account to the other. There are no transactions but it'll come up eventually and it really is that simple. Again, please if you have any questions, please come up to us. We'd love to help you. Kind of getting started with deploying contracts. Just any questions in general regarding testnets? We'd like to talk about this stuff, unfortunately for us.
00:18:35.160 - 00:18:37.320, Speaker B: Yeah.
00:18:40.790 - 00:19:05.210, Speaker A: No, I guess that's what we showed already. Show the cat picture. Okay, thanks. Question? Oh, yeah, sure. Easiest is if you go to the GitHub.com Girly testnet. This links all resources.
00:19:05.210 - 00:20:23.328, Speaker A: Best resource, probably. Yeah. Oh, yeah. There's a GitHub audit. That's a mess. Yeah. But to be honest, from a core developer perspective, robson will most likely be retired at some point, maybe this year, because it's not sustainable anymore.
00:20:23.328 - 00:20:56.640, Speaker A: It's like a huge blockchain. The blockchain of Robston is bigger than Ethereum classic. I don't know what the plans for COVID is, even though I work for Parity, but I know from Peter that also ringpea is, like, growing to size where you actually just want to reset it. And having Girly Now is also, for guest team, a good chance to just say, okay, we can now duplicate Rinky, so it's not like we adding one more testnet, but we offer a solution that might replace existing testnets to some degree.
00:21:00.180 - 00:21:41.736, Speaker B: Just even the robustness of testing that has come from Gurley with things like Nethermind and Pantheon has been incredible to see. We're able to test things now within a proof of authority testnet paradigm that otherwise we could not have done. So it's super exciting from kind of the more boring kind of side of things, I guess. Not a sexy side where test cases are more robust now, but just as well. ENS just supported Gurley with all of their with everything. Ethersjs just supported Gurley, like, a couple of days ago. So the community has a mite or wallet block.
00:21:41.736 - 00:22:04.320, Speaker B: Scout people have really moved towards it, and we're hoping that this is a way to not have to worry about having 14 different test. Nets, thank you very much. Thank.
