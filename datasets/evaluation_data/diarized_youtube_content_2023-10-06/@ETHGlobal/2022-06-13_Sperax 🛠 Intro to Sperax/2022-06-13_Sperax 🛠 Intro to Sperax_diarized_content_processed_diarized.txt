00:00:00.410 - 00:00:01.600, Speaker A: Thank you.
00:00:06.050 - 00:00:35.110, Speaker B: Hello everyone. We are excited for you to join and participate in the sparex hackathon at Ethnyc 2022. My name is Ray. I'm CTO at Sparax. What is sparax? We are a global technology firm building modern day money with blockchain technology. Our mission is to build auction enables society that is equal inclusive. We launched in 2020 and the sparex team consists of engineers, mathematicians, economists, marketing specialists and designers.
00:00:35.110 - 00:01:30.570, Speaker B: We are looking to bridge the gap for both experienced and novice crypto users by offering a capital efficient and scalable stablecoin which generates organic yield automatically. Well, how do we generate that yield? Well, first of all, we are decentralized and USDS holders that you and I, who hold USDS tokens can earn up to 11% target yield. Now, how does that yield get generated, you ask? Well, we have different strategies that we use can use Curve and other ones like Ave as well. The vehicle for getting that yield is through our Stablecoin, which is the largest stablecoin on arbitrary. We are 100% collateralized using USDC and USDT. We'll add more stable coins as collateral, like Dai for example. And we also have a governance token called Spa, which will be used for governance activities.
00:01:30.570 - 00:02:23.690, Speaker B: Now, we have two prizes and two competitions going. The first one is for 2500, and it is to generate the highest yield strategy. So your objective, should you choose to accept it, is to build a strategy contract that leverages the strategy template that we offer you and it will provide the GitHub address for it and that automates the yield generation. Now, the criteria for winning needs to be the most innovative strategy. There is no risk to the principal that you put in and it generates 20% or greater in terms of return. The second prize is 2500 as well, and it is to generate the most innovative utility for USDS. You'll want to leverage third party protocols, build an integration solution and generate utility for USDS, which is a stable coin.
00:02:23.690 - 00:03:01.670, Speaker B: The criteria for winning is to create the most innovative utility used for USDS and has the highest utility rate or projected utility rate. Now, if you want to read more about our USDS smart contracts, you can find it through this GitHub link. We'll also have it in other locations and you can read through it and then use the actual address on Arbitrum for the strategy smart contract. We also offer the GitHub link within which you can build sample contracts. And we have a great video walkthrough by one of our top engineers, David.
00:03:04.970 - 00:03:45.258, Speaker A: Hi everyone. This is David. I'm here to introduce our hackson project for Easton YC. The objective of this project is to build a smart contract that can deposit stablecoins into existing strategy protocols such as Curve, Ave, et cetera, et cetera. This smart contract should be able to accumulate interest or rewards produced by these protocols over time. Here is a diagram of the basic smart contract architecture. The Blue strategy contract is a to be built objective.
00:03:45.258 - 00:04:38.866, Speaker A: It interacts with strategy protocols, curve or Ave, et cetera. To deposit or withdraw stablecoins. We also have a vault contract and this contract will be prepared by Sprax. No need for the participants to write or even modify this contract. So the vault contract acts kind of like the owner of all the stablecoins that we are dealing with. At first it holds all the stablecoins and through a function called allocate it allocates all the stable coins to the strategy and then strategy can deposit these stable coins into the strategy protocols on behalf of the vault. Over time the strategy contract going to accumulate some interest or rewards generated by curve or other et cetera.
00:04:38.866 - 00:05:39.930, Speaker A: And the vault at that time will be able to retrieve this interest or reward via function call. Also at any time the vault is also able to retrieve the stablecoin that was deposited into the protocols via function call. That is the strategy will have to withdraw from the protocols after receive the withdrawal function call from vault. So that's a basic idea of the project. The strategy has to be able to interact with the protocols and the vault itself to support all these functionalities that we mentioned here. So we have actually prepared an example or a template of the objective strategy contract. I'm going to briefly go through this contract here to help you have a better understanding of what is required.
00:05:39.930 - 00:07:30.800, Speaker A: The first thing you notice is this contract is initializable abstract strategy contract. In this abstract contract we predefined all the events, state variables, modifier and some functionalities that we think it's necessary for what is required we can see the implementation or the example in the template smart contract. But here what is important is first this contract also has this iStrategy interface, iStrategy interface pretty much similar to the abstract strategy. It's also kind of the skeleton what is required but Istrate interface is a little bit more generalized and the vault actually interacts with the strategy using this interface. But the takeaway is that pretty much just similar with iStrategy being slightly more generalized and this is also an initializable contract which means we are expecting upgradable proxy contract and yes, it's an honorable contract as there are some owner actions going back to the example. So here the first thing is the initializer which is a constructor of the upgradable proxies. So besides the second parameters, the vault address which is going to be the vault you're going to interact with, all the other inputs here are directly related to which strategy pull across you choose to interact with.
00:07:30.800 - 00:08:36.414, Speaker A: In case for example, let's say we want to interact with curves three pool, then the platform address will be the address of the pool. That is all the stable coins or collaterals is going to be sent to that platform, to that pool. So this is the destination or the storage location of all the collaterals. This reward token address in case of curve is going to be CRB token because if you have the liquidity or position in the pool, you can claim some CRB tokens from curve. And this might not be the case for some other strategy protocols which you have to deal with it. In this strategy contract the last two arrays are the asset or collaterals or stable coins that this strategy contract supports. It depends on how you design the protocols.
00:08:36.414 - 00:09:26.402, Speaker A: For example, if we are talking about curves three pool, this actually can be an array of three collaterals. That is like you can deposit any of these three collaterals into the pool. Also it does not have to be three. For example, it can only be one. It depends on how you design the protocols, how you design this strategy contract. The P token is the LP token or the receive token which usually the protocol will send back to you after you have deposited something into the pool. In most cases the Ptoken should be the same for all the assets here, assuming they are all going to the same platform address.
00:09:26.402 - 00:10:19.410, Speaker A: But there are some corner cases so we make it as array as well. So it will be a one to one relationship between the Ptoken and the asset we choose. And to go is those two array have to be the same, be of the same. Your support collateral is a view function to return. Like if this strategy supports the cloud role you are asking me to support. By support I mean if this strategy can handle that collateral. If the strategy is prepared to send the collaterals to the pool and retrieve the collaterals from the pool and this is actively used in the about contract, we also prepared kind of like approve function so you can throw all the necessary approve actions into this function.
00:10:19.410 - 00:11:20.070, Speaker A: Call here. This is a deposit function where you have to define how you deposit the collaterals or stablecoins into the protocol pools. We also have withdrawal functions which those two are pretty much similar. There's some slight difference on who's triggering the withdrawal but they all talk to the internal withdrawal function. The first one can only be triggered by the vault which means the vault calls vault withdrawal and it will trigger this withdrawal function to withdraw to then trigger action to withdraw collaterals from the protocols to strategy and strategy send them to the vault. We also have a withdrawal to vault. I don't want to get too complicated here, but it's pretty much a similar thing, just that this action can be triggered by the owner instead of the vault.
00:11:20.070 - 00:12:43.600, Speaker A: We have this two function called collect interest and collect reward token which is going to be triggered by this part where the vault called Harvest to retrieve the interest and reward from the strategy that is the Vault going to call those two functions. And what those two function should do is it collect all the interest and reward and send it to the boundary. And the reason we are separating the earning to interest and reward is kind of for example for Curve, the interest is like the fee you get by holding the LP token because once you hold the LP token, as long as there are some user actions on the curve for itself, you earn a little bit of fees. So that's what we are referring to for the reward token. In case of curve it's going to be the CRB token which you have to actively claim and store. So we separate those two kind of sources of the income and it's not going to be it's generalized to the curves case but maybe it's not the case for the protocol you choose. So feel free to modify this part.
00:12:43.600 - 00:13:40.082, Speaker A: And here we have some U functions. The first one is to check the balance, that is to check how much collaterals that was helded by the strategy contract and not necessarily holding in the strategy contract but those who has been deposited into the protocol we count it as part of balance as well. So basically how much balance is available for me to withdraw if I call a withdrawal from the bot. We also have the view function to check how much interest or reward that has been committed or is claimable at this moment. And here is internal withdrawal function. You have to define this abstract set token. You can feel free to change this.
00:13:40.082 - 00:14:36.500, Speaker A: This is just to as you can see there are some approved actions where we need to allow the platform or the pool to spend our asset or Ptoken. But feel free to modify this part. Get pool coin index. This is just to as we mentioned, you don't have to support only one cloud but you can support multiple ones. Depends on which protocol you choose to interact with. And this is just to for example, if you choose three then every asset or every catalog should have its own index, zero to two. And this is it about the template and we have list out all the to do actions here and we are expecting some flexibility in your design.
00:14:36.500 - 00:15:45.874, Speaker A: That's it. And I can briefly go through the vault as well, but it pretty much has been demonstrated in this graph like allocate harvest withdrawal, that's all the major three actions that is required. One thing is there's indeed some configuration that needs to be happened before you can do all the actions. That is you have to register the strategy contract you have deployed in the vault itself by calling Astrategy but we have prepared a script to do that and feel free to play around with it. So we have a script called Astrategy to the vault which as you can see here, we register the strategy in the month contract. Also like clouds, we also have also prepared a deployment contract to help you deploy the strategy contract. And this is pretty much it about whatever we have prepared.
00:15:45.874 - 00:15:46.500, Speaker A: Thank you.
