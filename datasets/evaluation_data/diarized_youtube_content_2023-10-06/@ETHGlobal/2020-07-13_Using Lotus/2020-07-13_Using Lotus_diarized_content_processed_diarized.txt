00:00:09.760 - 00:01:08.490, Speaker A: All right, we're good. Great. Welcome all hackaths hackers in this session and anybody watching along on YouTube to another session focused on Lotus today, or rather this afternoon. For this session, we have AYUSH a filecoin engineer and why the technical lead for filecoin? They are going to be walking us through a workshop specifically focused on how to use Lotus in your own personal project. So we're very excited to have them. And it's building off of some of the other sessions we had today, which was Pooja earlier, talking about developing a filecoin, and then we had Vasa just a few hours ago talking on other ways to build with Lotus. So if you missed any of those sessions and you want to look at them in context with this one, which you're in right now, definitely go check them out in the ETH Global YouTube channel.
00:01:08.490 - 00:01:56.900, Speaker A: And we'll keep going with the awesome content logistics. I'm sure most of you have heard this or already done your check ins, but go to your Cohort channel. We're running the first week, or rather the first check in for week two, which is something that we're going to be doing throughout the entire event. For the next few weeks, we do just a simple text based check in. So you go to your hacker dashboard and write a few small details about what you're working on, any issues you're having, any specific sponsors that you plan to integrate, things like that. It's helpful for us to help you resolve any issues, and it's helpful for the rest of the hackafest community. As they're building things, they can see your progress and you can help other people.
00:01:56.900 - 00:02:30.610, Speaker A: So make sure to do your check ins within the next few hours. We hope to have all of them done within 24 hours and then we can kind of start building and helping people with different resources. Karate says, I don't see a check in channel. I would hit me up on Slack and we'll figure out which one you're supposed to be in because there are different ones. I think that's it for logistics. I'll let AYUSH start and share a screen.
00:02:31.700 - 00:03:00.964, Speaker B: Well, yeah. Thank you very much, Trent. Thank you, everyone who's participating in hackafes and attending this workshop in particular. Very excited to be doing this today, is very much intended to be kind of like an interactive follow along process. So definitely try to keep up with what we're doing. Feel free to ask questions on chat or just unmute, especially if you're running into trouble following those steps.
00:03:01.092 - 00:03:25.430, Speaker A: Sorry, I forgot to mention we try to do this every session, but if you are blocked or you have an issue or a quick question, don't be afraid to unmute. This is meant to be an interactive workshop where you can learn and be able to follow along. So if you do get stuck, just jump in quick and we're more than happy to help you catch up.
00:03:26.040 - 00:03:53.500, Speaker B: Cool. All right. Sorry, I can be heard well, right, by the way, excellent. Yeah. So we've got this very quick intro deck and after that Y will be taking it away and kind of just doing a live demo of how to get set up with Lotus. I'm assuming familiarity with Filecoin by this point by the people that are attending. So today's focus is definitely on Lotus, which is the reference implementation of Filecoin.
00:03:53.500 - 00:04:32.696, Speaker B: The website for docs, as well as just most of your resources will be lotu sh Lotush, as we like to say. So if you haven't already, please go there. Let me also quickly drop a link to this gist that you may already have. It was sent out in the kind of prep materials, but that's the rough outline of what we'll be trying to follow along today. So keep an eye on that as well. Very quickly. What is Lotus? What is a Lotus node? What does a lotus node do? Kind of like these are the six big points.
00:04:32.696 - 00:05:19.696, Speaker B: Lotus is what will help you find everyone else on the Filecoin network and connect to them based on those connections, figure out where the blockchain is at and then sync the chain as required. And then it provides a bunch of tools to interact with the blockchain itself. This is kind of your standard ethereum things to send messages, query chain height, all of that fun stuff. Lotus provides an internal wallet for key management, so you have an easy way to manage your keys, sign messages and so on in there. And then obviously specific to Filecoin, lotus provides interfaces to actually store and retrieve files from the network itself. Kind of a subset of Lotus is the Miner itself, which can be run as a separate process. The miner talks to a lotus node.
00:05:19.696 - 00:05:57.392, Speaker B: It is submit block set, it mines, but it is not a core part of a Lotus Node itself. So if you just spin up your Lotus node, there's no mining related stuff that's going to start automatically, which is good for people that aren't miners. So today this is kind of what we have in the gist as well. Basically, WY is going to be sharing his screen. How do you install Lotus if you haven't already? How do you get it up and running? We'll be using the nerpinet chain, which is a hack FS network that we have. And then we'll essentially just be playing around with Lotus so that people can get a feel of what it's like to work with Lotus. So we'll use the CLI, maybe we'll use the API.
00:05:57.392 - 00:06:28.252, Speaker B: If there are specific things that people would like demoed, we're more than happy to do it. If not, we have some kind of key features to highlight. Last thing I'll say is this is intended to be very interactive and flexible. So, like I said, feel free to ask questions. Feel free to direct this yourselves. I'll try to keep an eye on questions coming in on the chat, but as Trent said, feel free to unmute and ask questions as well because that's kind of what we want to do today. But that's about all I have to say.
00:06:28.252 - 00:06:31.772, Speaker B: Why? If you want to take it away cool.
00:06:31.826 - 00:06:33.208, Speaker C: Give me that screen share.
00:06:33.394 - 00:06:35.728, Speaker B: Yeah, I guess I have to stop doing that first.
00:06:35.894 - 00:06:38.064, Speaker C: Yeah, I can't steal it from you.
00:06:38.182 - 00:06:39.072, Speaker B: There you go.
00:06:39.206 - 00:07:20.990, Speaker C: All right, so I am just going to be sharing a terminal here for a bit. Can you all see this? Good, great. Cool. So Lotus is in itself a CLI program. The entire interface is really just through the CLI where you have separate things that are gui's on top of it and other things that build on top of this. But for the purpose of this workshop, we're just going to be hanging out in the terminal for a bit, looking at some cool text. So first thing, once you have Lotus cloned so I did a Git clone GitHub.com.
00:07:20.990 - 00:08:07.356, Speaker C: I ran this already because I have slow internet and I don't want to bother doing that live. So you run that, it'll clone down Lotus and then you're going to CD into it and you can just run make Lotus. And this is just going to go through. And the build process is actually a little more complicated than a normal Go project because we're binding in a bunch of Rust code. Lotus is mostly Go, except for all of the proofs and crypto stuff is in Rust. So our BLS signatures, our Snark verification, our Snark proving all of that's in Rust. So it has to do a bit of downloading some Rust stuff and then binding that in the go and so on.
00:08:07.356 - 00:08:20.690, Speaker C: So from here I'm going to open up a tmux. Don't have tmux. Are you kidding me? Sorry, new laptop. This is embarrassing here. That's fine myself.
00:08:21.220 - 00:08:29.300, Speaker B: Quick interruption to say that folks following along should check out the Ntwk Nerpa branch.
00:08:29.800 - 00:08:31.270, Speaker C: Oh. Nerpa. Right?
00:08:31.880 - 00:08:33.830, Speaker B: Yeah. Oh, yeah, you want to do that as well?
00:08:34.200 - 00:08:36.096, Speaker C: Should I get over to Nerpa?
00:08:36.288 - 00:08:42.920, Speaker B: That'd be a good idea. That'll just make sure that you automatically connect to the Nerpo network, which is the hackerfest network.
00:08:45.100 - 00:09:27.850, Speaker C: Aliases on this computer. All right, so I'm going to have to unmake Lotus again. Yeah. So with Lotus, we tend to bake in the genesis block and the bootstrap network configuration into the code. So when you check out a branch and you build the code for that branch, it's going to have the network to connect to pre configured. So now we have Lotus and we have a binary. You can just run Lotus or equivalently Lotus Help to see the sets of commands we have, the way we design applications here, we try to make sure that you can explore the full set of capabilities from the command line.
00:09:27.850 - 00:10:22.310, Speaker C: So, for example, Lotus State Help gives you all the lotus State commands. And so from here you can see Lotustate Power Help and you can go through and explore like, what are the set of things I can do with Lotus node. And we have a lot in here because we use this tool to debug and diagnose the network in general. So all of our debugging and all of our figure out what's wrong with the network work tends to result in features being added to the CLI interface to help with that. So the first thing you'll want to do is run Lotus daemon. This is just like any blockchain network going to kick off the daemon and start syncing the chain. Actually, I need to get in the tmux first, so have the daemon running while it's running.
00:10:22.310 - 00:10:46.108, Speaker C: You can't do anything else in that terminal. So you're going to have to open up a new terminal to do other things. But we can check a few things. We can check Lotus sync status. And this is going to tell you that we have one of our sync workers doing a header sync. The height that it's syncing at is 23,685. So that's how many blocks there are on this network.
00:10:46.108 - 00:11:37.500, Speaker C: And we're syncing the header chain from the tip that it's discovered all the way back to Genesis. Once we've synced the header chain all the way back, you can see that this number of height is going down. Well, maybe. Seems like the networks may be a little slow or my internet is kind of slow, actually. Once we make it back to Genesis, then we're going to sync the messages and validate the chain. The reason for syncing the header first is so that you verify that the chain actually links properly so that people can't doss you by creating fake chains that you then try to sync and download massive amounts of data and resources to verify. So a few things to check here while you're syncing your chain head is not going to update.
00:11:37.500 - 00:12:29.520, Speaker C: So when I run Lotus chain list, which is a command you can use to list the chain, you're just going to see the Genesis block. So this is block zero, created on July 6. That's CID it was mined by, which is just meaning that it was created by the Genesis system itself. So nothing here is really going to change for a while because, well, syncing the network, at least on this code, is probably going to take about half an hour to 35 minutes. I don't really feel like sitting around waiting for that to happen in front of everybody. So I have another node. Maui is paranoid about typing my password on live zoom calls here.
00:12:29.520 - 00:13:01.256, Speaker C: So I have another node and I think it's synced. Let's make sure. Yes. So this node is synced. So when you run Lotus chain list on a synced node, you're going to see a lot more information. You can see each line which gets wrapped on my screen is going to show you the chain height of a block, its creation date, and then the set of blocks, the CIDs and miners of each block in that tip set. So it'll show us, I think, about 30 by default.
00:13:01.256 - 00:13:49.212, Speaker C: And then we can check a few other things Lotus Sync status is going to tell us. So sync status kind of gives you an idea of more the inner workings of what Lotus is doing. So the Lotus Synchron has three workers that are just open to any tasks. So as blocks come in, it'll schedule one of those workers to work on syncing this block. This is more diagnostics information, but it can be useful if you're wondering why isn't things syncing? So we can see these are all complete, so onto some fun stuff. So the Lotus State Command is where a lot of the interesting, like, what's going on in the network stuff is happening. So one thing we can do is just run Lotus State power and see that this network has 16.7
00:13:49.212 - 00:14:13.000, Speaker C: terabytes of power on it. So it's not a huge amount. This is a small DevNet. So fairly normal. We can do Lotus State list miners. There looks like there's about 1520 miners in here. So this is like the set of miners that you have that could be creating blocks here and are just generally on the network.
00:14:13.000 - 00:15:07.108, Speaker C: You can check the power of any individual miner, like how much storage they're providing to the network. For example, if you're building an application that wants to select a minor for making a storage deal with, well, you could list all the miners and then go through and see which one has the most power. It's potentially a useful heuristic probably not the only one you want to use. What else do we have? So you have Lotus wallet. So the Lotus Wallet Command is basically your in node key management set of commands. So I can list my existing addresses. I have this BLS address here.
00:15:07.108 - 00:16:02.032, Speaker C: The very long addresses that start with T three are a BLS address. I can create a new BLS address. And so now when I list them, two of them, I can also create a SEC PK, SEC p two five six, K, one address, which are much shorter. So the reason we have each of these BLS addresses, or BLS keys, when you sign messages with them, their signatures can be aggregated. So the actual cost to the chain of using a BLS address is much less because we just aggregate all the signatures. And you save like, 90 bytes per message of signature data. And actually, a simple BLS message to just send funds from one account to another can be as small as 20 bytes, which is really cool if you think about how Bitcoin has like, a block size limit of like, 1 MB.
00:16:02.032 - 00:16:22.168, Speaker C: If you fill 1 MB with 20 byte transactions, that's a whole lot of transactions, like 500,000 or no, 50,000, I think. Is that that math? Something like that? I don't even know. No, it's more than that. I can't really bad at math. I used to do the math.
00:16:22.264 - 00:16:24.220, Speaker B: Yeah, I think 500,000 was right.
00:16:24.370 - 00:16:53.460, Speaker C: Was it? Okay, cool. Yeah. So Lotus Wallet balance allows you to check what the balance of your default account is. You can also check the balance of anything on the network here. Like, I can pick this new thing or that's my same address. This new address I made here has zero. This SEC P address I made has zero.
00:16:53.460 - 00:17:25.888, Speaker C: So just some other simple commands. Lotus Send lets you just, as it says, just send funds from one account to another. So let's say I want to send this account by filecoin. Great. Sent that. And it's going to tell us, the CID, the hash of the message that it sent off. So now most Lotus commands, instead of waiting for something, for a message to land on chain, it's just going to tell you what the hash of the message is, so you can wait on it yourself.
00:17:25.888 - 00:17:47.364, Speaker C: So what we can do is we can do Lotus State wait message and give it that. This is going to scan the chain to see if it's already made it on chain, and then if it hasn't found it on chain, it's going to wait for new blocks to arrive. How long is this going to wait? By default, it's going to be like four minutes, isn't it?
00:17:47.482 - 00:17:49.350, Speaker B: Yeah, four to five minutes, I think.
00:17:49.900 - 00:18:06.430, Speaker C: I don't really feel like waiting that long on a live workshop call, but that's how you do that. It also exists as an API call. Most of these commands map nearly one to one with API calls. So you just call wait message in your app and wait for the callback to fire.
00:18:06.960 - 00:18:35.670, Speaker B: Yeah. I'll quickly add that there's a whole bunch of for those who prefer visualizations of things, there's a whole bunch of community run dashboards that you can look up things like your message, CID or your address on, and it'll just provide that information. There aren't any for Nerpinet, which is the hack FS network, but the kind of bigger, stabler testnet, the big one with 25 bytes of data supports all of those. So when you kind of graduate onto that network, you'll be able to visualize it as well.
00:18:39.560 - 00:18:55.480, Speaker C: Just ten more money. Okay. Yeah. It's not going through yet because it's going to wait for, like, four or five confirmations. Cool. So that's some basic commands. You create a wallet, send some money, check your balances.
00:18:55.480 - 00:19:35.396, Speaker C: But Filecoin is really about storing data. So let's make a file to store. So I'm just going to type in this file, and I'm going to copy and paste it a few times just to make it above 120 bytes. There's a minimum file size in Filecoin right now. We don't necessarily pad it out for you. So if you try to store a file under 128 bytes, it's going to tell you actually that's too small. Like that's basically smaller than the hash that you're using to talk about the file.
00:19:35.396 - 00:19:51.340, Speaker C: So you might as well just put your data in a message and throw it on chain or something. So we have our file, make sure it's there. Do you have a minor ID? That's good. I think we have a minor running.
00:19:51.490 - 00:19:53.150, Speaker B: Yeah, give me 1 second.
00:19:57.920 - 00:20:57.190, Speaker C: So BLOTUS client subcommand is what you're going to use for interacting with the markets, both retrieval and storage markets. And so the flow of making a deal in filecoin and storing data in filecoin is first you need to import the data. So Lotus client import will let you take the path of a file and it's going to take it, do some processing on it and give you back its hash. Now this is almost identical to an IPFS ad. So if you're familiar with IPFS, this is basically IPFS ad your file, which is kind of cool because filecoin stores IPFS data and our default native format is just IPFS data packed into a car file. So we grab this and then now we are going to first I should probably query the minor. So AYUSH, did you find a minor address?
00:20:59.000 - 00:21:09.192, Speaker B: Yes, I sent it to you on Slack, but at least worked last night and Travis says it's still running cool.
00:21:09.246 - 00:22:05.204, Speaker C: So here's our minor 23. So this very short address here, every account on filecoin gets what's called an ID address. ID addresses are assigned a number and that's basically the order of account creation globally on filecoin. So the cool thing about blockchains is you have a total global ordering of everything that has happened on the chain. Obviously you have to wait for some number of confirmations before you can be sure there won't be a reorg, but you do get a total global ordering. And so what we're doing is every account has a normal address, like your long hash address or something along those lines, but it also gets assigned to the short ID address. And so with your accounts, instead of using passing around like your giant long ethereum hex address or whatever, you can just say, oh yeah, I'm 1047, right, or something along those lines.
00:22:05.204 - 00:22:46.628, Speaker C: And that's much easier to remember, much easier to pass around and share. But it also takes up much less space on chain. So instead of being 30 bytes on chain for an address, it's five, six, even when you have millions of addresses. So really space efficient here and also memetically easier to remember. So we have query the ask, which is the storage information. Like basically what this miner is willing to accept for payment of a storage deal for this minor t. So they're saying their price per gigabyte is this.
00:22:46.628 - 00:23:27.190, Speaker C: Their max piece size is 512 megabytes. That's because they're a 512 meg minor miners are able to set both minimum and maximum piece sizes so they can say they don't accept files smaller than X or bigger than Y. And there's a few other parameters that they can advertise. But really a minor gets to decide themselves if they accept your file or not. So there's nothing obliging a minor to actually accept your deal, even if you pay them like infinite amounts of money. So with that, we're going to make a deal. So the deal command has a few extra flags around here.
00:23:27.190 - 00:24:17.590, Speaker C: Most of these you don't usually care about, but for example, you can manually specify some hashes of things. So instead of transferring the data over the network, you can for example, mail a minor a hard drive with your data because moving terabytes of data is hard to say the least. So Lotus client deal, we're going to grab our data CID from here and put that there. And then the minor is T zero, 1023. The price is this price that we got from here. And then the duration, let's say that we want to store for 1000 blocks. I think I have enough money for this.
00:24:17.590 - 00:25:11.444, Speaker C: Yeah. So there is our deal and this is the CID of the deal. Now Lotus client list deals is going to give me oh wow, nice scrapping there. So Lotus client list deals is going to show me this is going to make it ugly if I move it out here. So the dealcid, the deal ID is zero, provider is 1023. This is currently in deal client funding, which means that deal is waiting for us as the client to put money on chain in order for the deal to actually be funded. So the miner actually hasn't accepted the deal yet.
00:25:11.444 - 00:25:41.644, Speaker C: The miner is waiting for us to commit money to the chain so that the miner knows we have the funds to actually pay them. So this means this is not on chain yet. Obviously hasn't been slashed yet. If it's not on chain yet, the piece CID is another hash. I'll explain in a second. This is 2 data and that's the price and duration actually. Sorry, it's not duration actually.
00:25:41.644 - 00:25:44.770, Speaker C: That's like ending blockhead, I believe.
00:25:45.700 - 00:25:49.584, Speaker D: So you're proposing it at the miners ask, is that what we're doing there?
00:25:49.702 - 00:26:29.870, Speaker C: Exactly. I'm just proposing it right at what the miner is asking for. Okay, so you could try to set a lower price, but I think the default logic says reject. Miners are definitely able to write their own logic for accepting things. So like if they have a sector that's just about to be sealed and it has a little bit of space left over, they might accept data at a lower price just to fill out that deal. So they can have a nice perfectly packed sector or depending on the size of the file, like if you want to store one whole sector size of data, they might give you a bit of a discount just because that's logistically easier for them. So there's a number of different things that could happen here.
00:26:32.960 - 00:26:55.510, Speaker B: Just very quickly. In case anyone was wondering the obvious, jeremy. When Jeremy made the deal, the price was 0.0 with many zeros followed by five because that was in filecoin kind of the higher level unit. What's being displayed under Storage price? There is an ATO fill, which is just ten to the 18 file cost. That's all. Hence the difference.
00:26:56.520 - 00:27:06.760, Speaker C: We have some UI work here to do around. We use the same amount of denomination as Ethereum. So if you're familiar with Ethereum's, what did they call their tiniest unit?
00:27:07.980 - 00:27:09.290, Speaker B: Way, I think.
00:27:10.880 - 00:27:34.240, Speaker C: So this number down here is effectively in Way. We're using metric si units. So we just call it auto fill because that's ten to the negative 18. And yeah, ideally we would have like a little units attached to that. I think we should make a note I use to print things in. Nicer.
00:27:35.380 - 00:27:37.090, Speaker B: We have an issue open for it.
00:27:37.720 - 00:27:47.110, Speaker D: We have a workshop scheduled for the whole mining process of stealing, setting up, starting up at all. Is there going to be a workshop planned for that?
00:27:47.960 - 00:27:50.630, Speaker C: Not that I know of, but we could do one.
00:27:51.320 - 00:27:52.070, Speaker D: Yeah.
00:27:52.700 - 00:28:03.336, Speaker C: I can also switch to showing some minor commands. Not setting up a minor necessarily, but the machine this is running on is a mining machine.
00:28:03.448 - 00:28:06.110, Speaker D: Oh, that's awesome. What's your specs, man?
00:28:09.440 - 00:28:12.240, Speaker C: It's a thread ripper with a bunch of ram.
00:28:13.940 - 00:28:17.696, Speaker D: You got the NVMe for the swap and all that?
00:28:17.878 - 00:28:42.104, Speaker C: Yeah, that's awesome. It's got all the things. But back to our deal. So it says Storage deal validating. So now the Miner storage deal validating means the Miner has received our data and now they are validating. That deal is correct. Actually.
00:28:42.104 - 00:29:26.630, Speaker C: I wouldn't expect to see it stay very long in this. Also, each step right now has a confirmation, I think of like five to ten blocks. So between each of these phases it's like two to three minutes. Just because things are being waited for to land on chain. A lot of this is because I haven't actually made deals with this client before. So once you already have money locked up in the market, that first step of waiting for client funding would have gone through immediately because I would have already had funds in the market. And likely this Miner is just waiting to see a bunch of these things.
00:29:31.650 - 00:29:48.710, Speaker B: Another good point. Maybe just ask for questions. If people are confused about anything or want elaboration on anything, feel free to post in the chat or just unmuted.
00:29:49.210 - 00:30:20.290, Speaker C: Well, cool. So while we wait for that, I can go through some other interesting commands. Here a fun one. Like one of my favorite commands on Lotus is more of a diagnostics command. So. Lotus State compute State. What it does is it allows you to compute the state route for any given tip set, which on its own seems pretty boring and it is kind of boring on its own.
00:30:20.290 - 00:31:16.420, Speaker C: But what you can do is you can specify any tip set at any height. So if I want to go back to tipSet 2000 and compute the state for that, you just type in at 2000 there and it's going to give you the state like, wow, well that's cool, but what the hell do I do with state root? Great question. The fun thing here is that you can show the execution trace in this super not ergonomic format here, which okay, so this is slightly more interesting. There's a bunch of numbers and a bunch of addresses. What's really going on? What's really going on is this is every message that is being sent and every invocation trace that's happening on chain. A much more interesting way of viewing this is we have an HTML format here. Yeah, some HTML format there that is I'm going to share that because I think it's pretty cool.
00:31:23.140 - 00:31:23.890, Speaker B: It.
00:31:41.970 - 00:32:23.782, Speaker C: Okay. So this is, I think actually really interesting sort of stuff to look at because it kind of helps you understand what's going on in the block. This block itself actually contains no messages, but there's still a bunch of stuff that happens every block. So even if there's no messages, you're still going to award the block reward in filecoin. The block reward is awarded by the miner in their block. They include a transaction that calls award block reward on the reward actor. So there is a specific actor like smart contract in filecoin that holds all of the funds that will ever be paid out to miners.
00:32:23.782 - 00:33:04.200, Speaker C: And every time you mine a block, you get to call redeem that goes through. So we call reward actor reward block reward with some parameters saying this miner is claiming a block reward that's going to go call adlocked funds and it's going to lock up this amount of money, which right now on this network, the block reward is 1.8 file coin per win. This is just a weird kind of random number just because the crypto economic stuff is not yet finalized on this network. So 1.8 file coin is not the actual block reward. That would be absurdly low.
00:33:04.200 - 00:33:45.402, Speaker C: So we can see that this upper level method is calling down to adlock funds, is calling into update pledge total and then it goes back and then it sends well, actually this might be kind of a bug. We shouldn't call this if there's no file coin to burn, but it burns any account fees. So if there are fees that happen potentially in each block and if there are fees, we burn them. I think we missed a check for if there are zero fees. Don't bother sending a message AYUSH you want to write that one down as a will do. Cool. So we can see that there are several award block rewards.
00:33:45.402 - 00:34:20.494, Speaker C: This tip. Set contains one, two, looks like three blocks. So I'd expect to see three different block reward rewards. This one for minor 1002, this one for minor 1000 and then we have a Cron tick. So who's familiar with Cron in a Linux system? So Cron in a Linux system is like it's a daemon that you can tell to do something at some certain time of the day. So you can say like run this command at 05:00 p.m. Every night and it'll just do that.
00:34:20.494 - 00:35:10.174, Speaker C: And so in Filecoin we have a Cron actor which allows things to be scheduled to happen at certain points in time. Right now we have this closed so that only system actors can register events. But in the future this will be open up to user programmable contracts to be able to register stuff to happen in the future. Which is a really nice feature because being able to say I want this to happen in a week and just run this code in a week on chain, have an autonomous computer being running that for you. It's really cool. So the built in chronics kind of do a few things to maintain network KPIs. We track how much block rewards given out every round so that we can adjust to pledge collateral and so on.
00:35:10.174 - 00:35:48.694, Speaker C: And then there's a few other things that happen. But the main point of this is, if you're ever curious to see, like, I sent a transaction on a file coin and it didn't work. For some reason, you can pull out the tips that that transaction ran in, pull out the trace, and look and see in depth every single step that happened to try and figure out why that command failed. So for example, if you're running a minor and some minor operation failed, you're like why did this happen? Well, you can dive in and go see what happened with Lotus State compute state, I'm going to stop sharing browser.
00:35:48.822 - 00:35:57.358, Speaker D: What's the tip set like? I read about it and you just gave me a trace of a specific tip set of a certain block height. What does that actually mean, if you don't mind me asking?
00:35:57.524 - 00:36:26.150, Speaker C: Yeah, of course. That's a great question. So most blockchains, you have one block for every epoch, right? So bitcoin you have one block it mines on top of its parent, which mined on top of its parent, so on and so forth. In filecoin at every round there are a number of blocks that get created and all of them are included. So they're all like valid blocks at that height. So we target this to be about five. So we try to have around on average five blocks per round.
00:36:26.150 - 00:36:52.590, Speaker C: And this is a result of expected consensus, which is our proof of stake ish algorithm that we're using for storage based consensus. And so a tip set refers to the set of blocks that occurred at a certain round that were mined into the chain. So a tipSet at height 2000 is the set of blocks that were mined at high 2000 and were included in the main chain.
00:36:54.870 - 00:37:33.926, Speaker B: Yeah. The concept of a tipSet also has one interesting consequence for how messages are included and executed, which is in, say, something like bitcoin, if a message is included in a block, it's executed in that same block because you can just do that. And the result of that execution happens kind of immediately because you have multiple blocks in a tip set, it's possible that multiple blocks at the same level will include the same message. So you can't actually execute the blocks right away. So instead what happens is messages are broken into two stages, inclusion and execution. So messages get included in blocks at a certain tip set and maybe they're included in three out of five blocks in that tip set. They'll actually get executed in blocks that are built on top of that tip set.
00:37:33.926 - 00:37:42.320, Speaker B: So child blocks of that tip set and only get executed once because at that stage you can deduplicate based on if you have multiple copies of the same message.
00:37:42.930 - 00:38:36.290, Speaker C: Yeah. So the actual concept of a state route in filecoin is always referencing the parent state route. So for a given block, you know that block's parent state route. And that's because when you create that block, you're selecting the set of parents that you're mining that block on top of, and then you serialize all the messages in that block in order deduplicate any messages that are duplicates and then run through that execution. And this allows us actually to have a fairly high level of throughput, because if miners properly coordinate and properly include different sets of messages, if every block in a tip set includes a completely different set of messages, you can have five x the number of messages that get executed on a given epoch.
00:38:40.390 - 00:38:54.758, Speaker D: So, yeah, you said there was multiple you have multiple parent blocks, then the math they're performing is going to be on each of the ones where their message is in each of those parent blocks. Is that what you said? I don't want to take a lot of time in this detail, but I just want to get the general idea.
00:38:54.924 - 00:38:58.278, Speaker C: Yeah. So every block includes some messages, right?
00:38:58.364 - 00:38:58.710, Speaker B: Right.
00:38:58.780 - 00:39:19.150, Speaker C: And so when you're mining your block, you pick a set of parents that you're mining on top of which are blocks from the previous round. Those blocks have to be all at the same height and so you include those and then when you're computing the state route to base your block off of, it's going to be the result of computing all the messages in the parents that you chose.
00:39:24.650 - 00:39:33.690, Speaker D: I'm just repeating that in my head, it makes sense. And so I was imagining the math that was required to take the messages computed from each of the multiple parent blocks and then creating a combined.
00:39:35.390 - 00:39:35.706, Speaker C: I.
00:39:35.728 - 00:39:38.602, Speaker D: Guess block of the result root state.
00:39:38.656 - 00:39:41.440, Speaker C: Yeah. The parent state. Root. Yes.
00:39:43.090 - 00:39:57.890, Speaker B: Do you also know we're not talking to miners right now? Because you all then asked the question miners immediately do, which is, does every block in a tipSet earn reward? And the answer is yes. Every block in a tipSet earns the same reward. It's not split out across the miners. Just in case you were wondering.
00:40:00.950 - 00:40:19.994, Speaker D: But if we do our job right, the coin value, it should get cheaper and cheaper, right? If Filecoin spreads to the entire world right, it should get cheaper and cheaper. That's our goal. Right. Anyway, we're not looking for coin appreciation. Never mind, we're going to get it. This is good. Like a taste great.
00:40:19.994 - 00:40:21.820, Speaker D: Less spelling argument probably.
00:40:23.790 - 00:40:54.738, Speaker C: Yeah, something like that. Oh yeah. Our deal is now ceiling. So we made a deal with the minor, it was accepted and now it says storage deal sealing. So what this means is that that miner has taken our deal. They've packed it into a sector and now they are sealing the sector, which is the process of proving it so that the network can guarantee that my data that is in that sector is guaranteed to stick around over time for the time that we agreed to. So the Miner now is like working computing that proof.
00:40:54.738 - 00:41:29.486, Speaker C: They'll post it to the chain once it's done. And then at that point, really, from this point onwards, I can know that my data is pretty safe. But once the sector is actually sealed, the Miner will be severely punished if they drop that data. Severely punished as in they lose all the pledge collateral and all the deals for that sector. So this is basically I have certainty that my data is there and I can walk away and be fine. And eventually this will change to storage deal. I don't think it says complete, says Active.
00:41:29.486 - 00:41:45.878, Speaker C: I'm pretty sure active. Yeah. Storage deal active. So that just means that my data is being actively stored by this Miner. Yeah. So AYUSH, what else is interesting to go over? We stored files. That's filecoin, right?
00:41:45.964 - 00:41:54.770, Speaker B: Filecoin. I think it's worth talking about multisigs real quick and maybe payment channels just because they're nifty tools. Pick one, I don't know which one's more exciting.
00:41:54.930 - 00:42:49.190, Speaker C: Yeah, let's talk about multisigs. For people who are not familiar, a multisig wallet is an account that requires multiple different people to approve transactions in order to send. So you can have some number of people that are allowed as signers and then some number of required signers. Various different systems implement this different ways. Bitcoin implements multi sigs as a threshold signature with your message, you include multiple different signatures. There's even trickier systems that use like BLS aggregate threshold signatures which just require one signature for your whole setup. Or there's the more Ethereum style where you have a contract where you send the signatures to the actor or smart contract in Ethereum to propose and approve transactions.
00:42:49.190 - 00:43:32.034, Speaker C: So Filecoin's multi SIG operates similar to how ethereum multi sigs work. Where you have your account, one person proposes a transaction that shows up on chain and then approvers can then send their approvals to the chain. So for example, you could have a multi SIG that has three signers and say two are. So like if that's me AYUSH and Trent, then I could say I propose this transaction and either AYUSH or Trent could look at that and say, all right, I approve that. Once they approve it, the transaction goes through and then the spend happens. Whatever it is that you want it to do happens. So this allows you to do better custody of funds.
00:43:32.034 - 00:44:17.720, Speaker C: So we have this command that allows you to control those somewhat easily where we can create a multi SIG. Basically you can pass how many signers are required. A default is zero is really bad. We should probably change that because that just won't work the value. So this is how much is the initial funds that you're going to give to this multisig. And then you can specify a sender, which is like, what account of mine am I using to create this? But that's not necessarily an account that will be a signer. So let's grab some addresses from my wallet here and then we'll do Lotus Msega, create required equals two.
00:44:17.720 - 00:45:00.660, Speaker C: And then we'll pass on these three addresses from my wallet. And oh, this is one of those fun commands that actually waits for the multisig to be created before returning. So this has sent a message to the chain. It's going to basically create this multi SIG. It's going to get the output of creating it and then it's going to tell me the address that was created instead of giving me the transaction hash that was sent.
00:45:03.530 - 00:45:10.086, Speaker D: Yeah, that creates an address on chain that requires transactions signed by both those private keys then.
00:45:10.268 - 00:45:24.460, Speaker C: So this creates a multi SIG on chain that requires signatures from two out of these three addresses. So any two of these addresses can spend money from this account on their own.
00:45:25.710 - 00:45:28.326, Speaker D: So it's N of M. Yeah, it's.
00:45:28.358 - 00:45:40.362, Speaker C: N of M. So it's two of three in this case, where the three is implied by the number of addresses I put down confirmations.
00:45:40.506 - 00:45:42.180, Speaker D: Could you have done two of two?
00:45:42.710 - 00:45:49.198, Speaker C: Yeah, you can do two of two. You can do one of one, one of ten. It's fairly arbitrary.
00:45:49.294 - 00:45:50.900, Speaker B: So maybe let's change that.
00:45:53.690 - 00:45:57.590, Speaker C: Yeah. Blockchain confirmations are exciting.
00:45:58.250 - 00:46:04.680, Speaker B: We did get some requests for payment channels. So if you want to switch to that. Okay, last ten minutes.
00:46:05.150 - 00:46:30.702, Speaker C: Yeah, let me kill that. So just like everything in Lotus, we have a nice command for interacting with whatever feature of filecoin we want. So Lotus page for payment channel allows you to get which gets or creates a payment channel to a certain person from a certain let me, let me go back.
00:46:30.756 - 00:46:31.810, Speaker B: What is a payment channel?
00:46:31.880 - 00:47:32.270, Speaker C: What is a payment channel? Yeah, so a payment channel is effectively a way for you to pay people in a way that they can trust that they receive the money without hitting chain. So at a high level, what you do is, for example, if I want to pay AYUSH a bunch of different times, say we have a certain agreement where I'm going to pay him money for every time he does a thing, but I don't want to pay transaction fees for each of those thousand things. So I'll lock up 100 file coin to AYUSH in a payment channel. AYUSH can see on chain that that money is locked up. So I can only send it to him, I can't double spend it to anybody else. And then what I can do is I can create vouchers that are signed by me and sent to him that say I owe you one file coin and then I could make another one that says I owe you two file coin or I ou three file coin. And I can just keep sending him a new voucher every time I want to send him more funds.
00:47:32.270 - 00:48:18.130, Speaker C: And as long as he holds that, he can cash it in on chain at any time. But he doesn't have to. He can wait until he's certain that he's not going to receive any more and then cash it out so that he doesn't waste transaction fees and space on chain by cashing this out every single time. So this allows you to do nice off chain payments while you can still trust that the funds are going to be there. Because you could just send somebody, you could create a transaction, sign it and send it to somebody and they'd be like, oh good, I could spend this transaction on chain. But the problem there is that it doesn't prevent me from sending that money to somebody else. And so the nice thing around a payment channel here is that you can guarantee that the money can't be double spent.
00:48:18.130 - 00:48:59.150, Speaker C: So the commands for it are pretty straightforward. We have the payment channel get, which allows you to specify a from address, a to address and amount. So let's just go ahead and create one of these real quick. Which of my accounts has money in it? That one? No, it's this one. And then we'll make it to this and we'll put or file coin in it. Why did that return empty IOUs?
00:49:00.530 - 00:49:01.940, Speaker B: I do not know.
00:49:03.830 - 00:49:10.626, Speaker C: I haven't used this command in like three weeks. So maybe something's funky, we should investigate it.
00:49:10.728 - 00:49:12.180, Speaker B: Yeah, it sounds like it.
00:49:18.090 - 00:49:54.930, Speaker C: Okay, so, well, lowest payment channel list lets you list the payment channels you have registered here. So since I'm a minor, this is like my minor node. These payment channels are going to be payment channels that are made to me? Likely. Let's see. Get actor. Yeah. So this is just a payment channel that's to me from somebody else and it has a little bit of filecoin in it likely this is somebody who has stored data with my Miner and is trying to retrieve it.
00:49:54.930 - 00:50:46.194, Speaker C: So when you retrieve data, you use payment channels to pay for data retrieval, so that you can pay somebody a little bit of money, they can send you a little bit of file and you can go back and forth sending them little bits of money in exchange for little bits of file as a way to avoid the problem of sending you all the money up front and then not giving you the file. Or vice versa. And so we use payment channels to make a more fair retrieval market. So all these channels are likely just people retrieving from my minor. God. We should add another command that lets you just inspect. We don't have an inspect payment channel command, but yeah, payment channels are at least in the CLI, the more lesser used things, so we haven't been paying as much attention to them.
00:50:46.194 - 00:50:53.426, Speaker C: So this is kind of good UI feedback that we're just walking through this and being a little oh no, there's not that much to show here.
00:50:53.528 - 00:51:05.540, Speaker B: Yeah. Does the concept of him channels make sense to people, though? Because it is a little subtle, but I feel like for me personally, when I first got it, I was like, this is really cool. So if you have any questions, now is a good time to ask.
00:51:06.190 - 00:52:03.510, Speaker C: So they are designed to use in any way that a developer can think of. It's not just to be used internally for retrieval deals or anything? Yeah, the payment channels can be used for anything. There's actually a number of different things that we have set up. So one of the cool things we have available, the payment channel has a lot of functionality built in. So one example, you can create a hash lock payment channel where I can send you a voucher that you can cash in only if you know a secret. And so with that functionality, what you can do is I can send you money, I can send you, say, a voucher for ten file coin that's locked on some secret. And then you can send me, for example, a similar payment channel of Ethereum for say, 20 Ether that's locked on the same secret.
00:52:03.510 - 00:52:49.980, Speaker C: And since you can make that since it's a hash of a secret, you're saying if you know a value that hashes to this, you can spend this, you can create that payment channel to me with the same secret. And then if I want to spend the money that I got from you, I have to reveal the secret on chain which reveals it to you. So we can have a trustless way to exchange tokens between any two networks. So I could send you ten filecoin locked like this. You can send me 20 Ether locked like that, and then we can reveal the secret and both cash out, which is a really cool thing. We also have the ability to have the payment channel when you try to cash it in. Call some other actor on chain to check something.
00:52:49.980 - 00:53:38.120, Speaker C: And the one notable use case we have for this right now is you can create a payment channel that is the Voucher that is valid if a particular miner's sector is proven. And then from there you can say, okay, AYUSH, I'm going to give you ten filecoin once this sector is proven, and then I'm going to give you everything you need to generate the Snark for it to prove it. So basically I can pay AYUSH to compute a Snark proof for me and submit it to the chain in a trustless way that he knows he's going to get paid if he does that work, which I think is really cool. It allows us to build off chain markets for various mining operations and things and obviously a whole host of other potential things that are there. Very cool.
00:53:39.370 - 00:53:53.430, Speaker B: Yeah. We're at the five minute mark, so probably good to just take last minute questions. But also I have an update from Travis that I believe your deal has sealed. Jeremy, if you want to travis is the infra person, by the way, but.
00:53:53.440 - 00:53:56.430, Speaker C: I keep referring to running that storage deal active.
00:53:58.530 - 00:54:21.462, Speaker A: We can go over a little bit. That's all right. I'm not sure if we had an hour or an hour and a half set for this. Maybe I scheduled it a little short, but if people still have questions or there are additional features you the guys like to go into, that's totally fine. If you have a hard stop, that's also fine as well. But I think it's important for people who aren't able to attend to view it afterwards. It's super helpful for them.
00:54:21.462 - 00:54:22.854, Speaker A: So carry on if you can.
00:54:22.892 - 00:54:25.526, Speaker D: You have to retrieve the file. Jim says you have to retrieve the.
00:54:25.548 - 00:54:27.590, Speaker C: File to retrieve the file.
00:54:29.290 - 00:54:31.434, Speaker D: Otherwise it's not a complete test.
00:54:31.632 - 00:54:36.602, Speaker B: That's totally fair because retrieve will always work 100% of the time and there's no problems at all.
00:54:36.736 - 00:55:08.690, Speaker C: All right, so I'm going to delete this file. I just deleted the file. It's sealed into a sector I should be able to trust. That filecoin has my data. Oh, and the other thing, when you import it, when we do the client import it imports it into your local block store, just like an IPVs ad. So I think if we look here, we can see that the file is still here. So we have to do oh, did that command not land in this?
00:55:08.760 - 00:55:16.390, Speaker B: That's not in nerpanet yet. You can just retrieve it from a different node, though, if you have like you can retrieve it from the one that you have syncing.
00:55:18.810 - 00:55:30.400, Speaker C: Do I still have a node syncing? No, I killed that. Well, let me show you what it would look like it's going to pull it locally and it's not going to be actually impressive, but we'll do it real quick.
00:55:30.770 - 00:55:46.714, Speaker B: We might have commented at the local retrieval, so we'll find out. Well, so we did comment at the local retrieval, so it is actually comment.
00:55:46.762 - 00:56:41.914, Speaker C: At the all right, so now what's happening? Is it's contacting the other miner? The other miner is going to have to unseal the data? I believe so. Right now, the way that the proof of replication works is that the time to seal the sector and the time to unseal it are about the same future. Proofs of replication will not have this trait. But this was the most secure PO we could come up with in the time. We have other constructions that are better than this, but this is provably secure where the others are questionably secure. And we don't want to have to delay Mainet anymore, but to wait on a new proof that may or may not be right yet. So right now, unsealing a Sector takes as long as sealing a Sector.
00:56:41.914 - 00:56:45.550, Speaker C: So we're waiting for the sector to be unsealed.
00:56:46.050 - 00:56:47.700, Speaker D: That's going to be a long time.
00:56:48.470 - 00:57:35.890, Speaker C: Yeah. So these are 512 meg sectors. And I think Travis was saying yeah, I think Travis was saying this is about eight minutes right now. But in the latest Lotus code we have, miners by default will just keep an extra unsealed copy around if you ask them to, so you can tell a minor, hey, I'm going to pay you a little bit extra. Please keep a copy of this file unsealed around, or at least keep it readily available so that you can retrieve it to me. So if you want to be able to retrieve your files quickly, you can pay a little bit extra so that they can keep an extra copy. If not, you have to wait glacier style for the data to be taken out of the archives, which is the default in this particular version.
00:57:35.890 - 00:58:16.170, Speaker C: Is my perception of this correct, that there's not yet kind of like a market around retrievals there's no way to browse, like, retrieval prices and choose who you want to retrieve from. It's just kind of happening black box right now, right? Yeah, right now it's happening kind of black box. There's not a good market for it yet. The retrieval client that's built into Lotus is the worst possible retrieval client, basically. Only you either have to tell it exactly what minor to retrieve from or it just retrieves from. Oh, well, that's angry.
00:58:19.490 - 00:58:26.066, Speaker B: That's a similar failure to one that we have an open issue for. So it looks like we have some work to do.
00:58:26.248 - 00:59:13.280, Speaker C: Yeah. Anyways, as I was saying, the retrieval client built into Lotus is the worst possible one, as evidenced by this error here. The protocol itself is very flexible and just supports paying arbitrary people for arbitrary data. It's really just a protocol for paying people for giving you data. And so with that, there's a lot of more interesting things that can be built. We can build aggregator, services that track, like, BitTorrent tracker type setups where people keep track of who has what data and how much the pricing information is. You can have clients broadcasting data they're looking for and have people compete to offer that client a low price.
00:59:13.280 - 00:59:34.790, Speaker C: Any number of these things can be built. It's just not in the Lotus client at this point. So better retrieval clients are in progress by various different groups in the community too. Yeah, the Lotus implementation is not a good showing.
00:59:35.690 - 00:59:57.870, Speaker B: Yeah. I think the general philosophy of things are designed to be actively built, improved on and innovated upon, applies to large chunks of filecoin. This is a particularly good example of it, and we're really hoping that a lot of that kind of layer one type improvements will happen potentially from folks on this call or participating in Hack FS.
01:00:00.370 - 01:00:25.290, Speaker C: Cool. Anybody else have any more questions? Just kind of open the floor for anybody who's curious to just ask away. Anything you're curious about, just let me know. Y'all are so quiet. Yeah, so quiet.
01:00:25.470 - 01:00:27.800, Speaker A: That means you covered all their questions.
01:00:30.570 - 01:00:33.080, Speaker B: We have answered every possible question.
01:00:33.690 - 01:00:35.480, Speaker A: There are no unknowns left.
01:00:36.250 - 01:00:58.100, Speaker B: Yeah. Now, seriously, definitely ask questions here. I think you also have good black channels and other venues. I'm sure once you're up and running with Lotus, you'll run into all kinds of problems or just things that you're not certain about. Definitely bring them to us because we want to get those questions answered. Those improvements made just improve the overall experience.
01:00:59.190 - 01:01:15.190, Speaker C: Definitely. If there's anything you run into, any troubles, feel free to just ping us in. Slack the Phil Lotus Channel or Phil help. We watch a lot of the different channels. Feel free to also tag us in discussions if you want our input.
01:01:18.410 - 01:01:31.260, Speaker B: We had a question from someone named Juan Bennett in the chat that says, I think many applications people are making will be best built with payment channels. How can we get demos of all the different ways of using them?
01:01:35.090 - 01:01:49.460, Speaker C: Good question. We can put together some different use cases and examples and maybe build like, a showcase sort of idea. Juan, did you want to say anything about this?
01:01:52.310 - 01:02:08.200, Speaker B: Yeah, I think it's pretty important to show. I mean, you started demoing it, but then you stopped halfway through. I think it's pretty important to give people a view into how those actually work because I think most of the applications people are writing are going to require them, or at least a lot of them will.
01:02:09.470 - 01:02:18.650, Speaker C: Yeah, I think putting together a little tutorial, like text tutorial and adding a bit more UX support around this will be helpful.
01:02:22.370 - 01:02:26.960, Speaker B: I think people are going to need them, like, this week. So can we get an ETA on when we could get that?
01:02:29.010 - 01:02:54.246, Speaker C: Yeah, we'll work on that. Like to learn more about how payment channels are written to the main docs. Yes. So we'll work on some docs, hopefully today or tomorrow, obviously as time. Yeah.
01:02:54.348 - 01:02:54.662, Speaker B: Okay.
01:02:54.716 - 01:02:58.998, Speaker C: So there's lots of payment channel excitement. Great. AYUSH we have our work cut out for us.
01:02:59.084 - 01:03:15.020, Speaker B: Yeah, sounds good. No, payment channels are definitely exciting, so I'm glad to see the response. And as Jeremy already said, they've kind of gone underused or under interacted with so far, so we'll put some time into them.
01:03:16.930 - 01:03:17.680, Speaker C: Yeah.
01:03:20.930 - 01:03:38.870, Speaker A: Awesome. If there are no final questions, comments, clarifications, we can probably wrap up there. And it seems like we're good. Thanks so much, both of you, for demoing all this. Very useful resource.
01:03:39.290 - 01:03:44.600, Speaker B: Yeah, thanks for attending, everyone. Have fun, stay safe. These are crazy times. Feel free to ask questions.
01:03:46.890 - 01:03:55.010, Speaker A: And we'll see everybody in the Slack. Be sure to bring your questions or clarifications there. Happy hacking week two. Bye.
