00:00:13.550 - 00:00:32.250, Speaker A: Hey everyone, thank you so much for joining. We have Dietrich from Protocol Labs who's going to give us a walkthrough. He's got a talk titled Deploying Web three IPFS Architectures Topologies and Menageries. So I'll let you take it away. Thanks, Dietrich.
00:00:33.710 - 00:01:33.680, Speaker B: Thank you, Heather, for the intro. Thanks everybody for joining today. Let me find the right screen to share and can you see my screen? Great, thanks. So, yeah, I'm going to, in the next 30 minutes, do a quick run through of how IPFS is being used, a little bit of how it works, an introduction to the stack, some relevant tools that will help you, and then a quick walk through the types of deployment decisions, options and approaches that exist today. Feel free to drop any questions, ideally in the discord sponsor chat room, because I can't see them when I'm talking, so I will come back and answer them in a bit. That said, we've got a short period of time here, so let's make the most of it and get going. So, Web Three today, even Web Two, sometimes it actually feels a little bit like this.
00:01:33.680 - 00:02:20.140, Speaker B: This talk will do nothing to disabuse you of that notion. Well, a little bit. We'll talk about some tools, some strategies, some ways that you can deploy your IPFS nodes, support your Web Three applications, so hopefully it won't feel like this as much. A couple of unique characteristics of IPFS a lot of people are using it, even both inside and outside of blockchain. Applications don't actually have to delve too deep into it often, so when they do, some things can feel a little bit like a mystery. But these are some of the really key pieces, I think, that makes IPFS unique and different than working with Http. It addresses things by the contents of those things, as opposed to where they sit on which computer in the world.
00:02:20.140 - 00:03:26.754, Speaker B: Next major points is IPFS comes with built in cryptographic Verifiability, because the address of something is the hash of that contents. You know that what you receive is actually what you asked for. Its transport agnostic peer to peer networking built in from the ground up means that regular types of transports that you are used to in the applications you build today work. But also other types of transports such as either Tor or Bluetooth Le are a possibility where maybe they're a little less easy to integrate into your application stack in traditional application models. And then finally, whereas HTP, the trust model is the nexus of HTP, DNS and SSL, with IPFS you can have trust models that are highly contextual to the applications, the type of relationships with the nodes or people that you're interacting with and threat models that might be wildly different and need special requirements. Not a one size fits all trust model that HTP brings today. People are using IPFS for a bunch of different things, but at its core, the design of the protocol was really around addressing some of these core problems that we have on the web today.
00:03:26.754 - 00:04:32.374, Speaker B: Merging network needs that might not be well serviced by needing transoceanic requests or DNS inefficiencies in the network where a whole bunch of people might be requesting the same data over and over from the same server, putting it under undue load. A security model that really makes a bunch of assumptions about applications that may have worked that way in the late ninety s and even into the 2000s, but different models that we have today. A major problem around links breaking. So 404 is a number that is known globally in households to people technical and not, which is something that really speaks to a problem in the way that we ship and build a web today. A web that doesn't really work natively or naturally in offline use cases. The dependency on DNS there means in the naming system, means everything really downstream from that has a hard time. And some of the groups that we work with, people trying to do work in largely offline scenarios, really say that the DNS ends up and the dependency that HP has on DNS in our application stack really ends up being the major bottlenecking problem for them.
00:04:32.374 - 00:05:05.118, Speaker B: Just being able to get basic stuff working in places like refugee camps for example, with one group they're working with, and then finally censorship. And this is something that internet shutdowns and censorship generally has been on the rise over the last few years. It's been a major problem. Places like Turkey, where they've been Wikipedia for some time, and right now where there's internet shutdowns and large amounts of censorship happening in Myanmar and a number of other places around the world. Decentralized naming. One of the problems in the regular web too, is that we do have dependencies on centralized naming services. With IPFS you have different options.
00:05:05.118 - 00:06:05.390, Speaker B: Some of these are unstoppable domains or ENS or ways that we're doing this in our DAP stacks today, but there are other things built in as well, and really new ways I think, that we're going to see coming down the pipe innovation in this space. We're seeing IPFS used for delivering COVID news in some places where access to information is being restricted. Critical health information being available is really important for public health. We're working with a couple of groups that you see here to be able to make sure that that information is available. Wikipedia, we have published Wikipedia localizations for a few different languages, and definitely, like I said earlier, the situation in Myanmar is really dire and access to this information is really key and critical to people on the ground there. We worked with folks that are in the region to be able to make sure that these localizations are correct and that they're available and they work on IPFS, which means people running browsers like Brave that have IPFS built in can still access this information. E commerce, physical and digital goods.
00:06:05.390 - 00:06:44.254, Speaker B: NFTs. Everyone's heard a lot about it over the last few months, especially even though they've been around for years. This drive in demand for NFTs has really spiked an increase in IPFS. So we're really doing our best to be able to support those new both artists, but also all kinds of different businesses that are coming into this space and using IPS and supporting them with best practices and ensuring that that data stays up and available for them. Identity is another place where IPFS is being used a lot. Ceramic from the folks at Three Box and a number of other people. Fission, which is a group based out of Vancouver that's doing some really interesting work around IPFS and Identity and integrating, making really smooth bridges and workflows with the regular web.
00:06:44.254 - 00:07:39.854, Speaker B: Then Ion, which is a project with Microsoft, then Decentralized Identity Foundation and a number of other folks there that are using IPFS to be able to store the identity transactions anchored off the bitcoin blockchain and they are now in production. That network so you can use it today and then DeFi. So over last summer, really coming into the fall, really seeing so many of these blockchain based DeFi applications using Ipfast, four storage, be able to publish frictionless and serverless front ends, which is really fascinating. Use case and something I think we're going to see a lot more of as well. Some of the users that we're seeing, there's really a lot of groups in our ecosystem and tracking them all used to be something we thought we could do. Now it's becoming harder and harder as it's like imagine tracking people using IPFS but http not even close to that level of problem yet, but definitely more than enough where I'm hearing about new projects all the time that I had never heard of before for some of these users. We published on our docs website a series of case studies.
00:07:39.854 - 00:08:30.418, Speaker B: If you want to dig a little bit deeper into the business cases and the basic architectures of how these organizations have used Ipves to be able to meet their needs. Everything from music to insurance to basic hosting services. These stories are in depth and worth reading if you're building a business or a larger complex application on IPFS, IPFS powers Filecoin and is used in it. If you're using Filecoin, you're using IPFS. A lot of the same technologies and a lot of the same types of metaphors that we use in the design of our APIs and the developer ergonomics in these systems and the workflows for moving data between IPFS and backing it up to filecoin. Pulling it out of Filecoin to be able to serve it for applications today getting easier and easier now that that network has finally launched as of last fall, which is really exciting. We're seeing a lot of innovation there.
00:08:30.418 - 00:09:08.666, Speaker B: Filecoin Ignite happened last fall around that launch time and over 100 projects involved in there were building on top of IPFS. The showcase of these applications is really fascinating to be able to see the diversity of use cases and different things that people are doing with this technology. Stack netflix was experimenting with using IPFS to be able to move containers around their global network. Audius maybe you've heard of it, is a music based application that empowers both artists and also the people that are playing and sharing music as well. Really interesting approach. Ethereum Two also using Lib PDP, which is part of the IPFS stack, and I'll talk about that a little bit later. And also browsers.
00:09:08.666 - 00:09:53.494, Speaker B: So I actually come from browser world. I worked on firefox and related projects at Mozilla for over a decade. And part of what I do at Protocol Labs is build these relationships with browser vendors, people working on the Web today, both working to get IPFS. And related technologies supported in the browsers, but also some of the broader paper cuts we have in the web platform in taking decentralized application stacks and integrating them. So what are the types of problems that we have and that we hit when we're trying to build decentralized applications using the regular web security model, where some of the interoperability challenges, where browser compatibility isn't even equal, where one browser implements something different than the other and it makes it so. The implementation of decentralized applications is harder working with groups to fix those. So Opera launched android support last year for the IPFS protocol.
00:09:53.494 - 00:10:35.882, Speaker B: It uses a remote IPFS gateway. They launched that same functionality in Opera Touch for iOS earlier this year. And now you can actually go and download Opera Developer, which is basically their beta desktop application, and test that technology there as well. We hope to see that launch in the release version of Opera really soon. Agalia is a consulting organization that's focused on the health of the web. Today they are committers to WebKit, to Chromium and to Gecko, the rendering engine that powers firefox. So we were working with them to identify some of the paper cuts that we have, some of the things we'd love to be able to see fixed in the web, some additional JavaScript APIs that would make it easier to do things like streaming between client server and fixing those issues.
00:10:35.882 - 00:11:25.174, Speaker B: So that not only we benefit in what we're trying to do with the Web and IPFS, but anybody who's trying to build these types of applications, benefits, and even some of the security model fixes and other things that we fixed with them. Basically just any web developer will benefit from the work that we've been doing there, trying to make the web as a whole better in our quest to also make it decentralized. And one of our really important partnerships this year was with Brave. We worked with them for nearly a year on this project, which was to ship a full IPFS node inside a desktop browser. So Brave was the first browser to do this. You can download Brave today, go into Settings and enable IPFS, or just even open an IPFS address and it will prompt you if you want to enable this functionality. It also supports the protocol to gateway functionality as well if you don't want to run a full node.
00:11:25.174 - 00:12:14.246, Speaker B: But now you could do things like open Brave two computers on the same local subnet and be able to load data from each other, which is really powerful. And we're excited to see browsers taking this step and integrating real decentralized functionality that puts so much power into the hands of users and allows the decentralized application vision that we all have and share, especially in events like scaling ethereum, allow that to really come to fruition. So, very exciting moment for IPFS and I think for the web as a whole. Hopefully we will see more of that. So, rushing through a couple of different IPFS concepts, I talked a little bit earlier about how it was a peer to peer approach to building the web. HTP today is a request response protocol. You request something from a website which ultimately boils down to one or more computers that run by that company or that individual or project that return a response.
00:12:14.246 - 00:12:47.960, Speaker B: IPFS builds on top of a peer to peer architecture. So that means you ask for an address and anyone holding that content on the network can reply with that data that you asked for. What this means practically is some interesting things. One, if nodes are cut off of the network, the rest of the network is still operational. If you shut your laptop, your node goes down. But if other people are also hosting that data on the network, it can still be served. If a given government tries to shut down a portion of the network, you can still access that data if it's being served by other people.
00:12:47.960 - 00:13:55.260, Speaker B: Even if somebody actually forgets to renew their SSL certificate or even many of the foot guns of the regular web that actually cause websites to go down or data to not be available, even if you rename a file on the regular web, that file effectively disappears. That problem no longer exists when you're serving your data with IPFS. The way that we address data with IPFS is whereas the regular web addresses are comprised of a location place on the network where the data lives, with IPFS we actually construct a hash, a unique identifier for content, and that unique Identifier is the address that you actually use. And for example, I think one of the best illustrations that we use to describe. While this is different from regular web, if you change the updates of cat jpg or cat PNG on your regular website, that any user that requests that file will get the new updated content. Whereas with IPFS, if you change that file, that basically the name of that file changes as well. If you change the contents so that you know, if you request an address, you will always get nothing but that data in return.
00:13:55.260 - 00:14:30.482, Speaker B: One of the ways that we also distribute content across the network and create more efficiency in how data is transferred is that we don't work in IPFS in whole files. Primarily we chunk the data up. The protocol will chunk it up according to a default algorithm, but also it's pluggable. You can put your own chunking algorithms into the protocol or your application, and then each chunk itself is actually what's transferred at the network layer. So on the regular web, you make a request to a server and it responds. This is location based addressing IP Fest. We address by the contents.
00:14:30.482 - 00:15:11.650, Speaker B: You can make a request for an address and the publisher can respond, but also anybody else who has that data can also reply with it. And you can get different parts from different people, which gives you new types of efficiencies. If you're running a server, you also have to make sure that server is up and available and on the regular web. But also as load grows, you need to add more servers. This is a barrier to innovation. It makes it hard for small companies or projects to be able to start because they need to have a massive allocation up front for hardware or at least assets reserve to be able to pay for it. The overall complexity ends up centralized in your application infrastructure, as opposed to being distributed across the infrastructure itself that you're running with Web 2.0,
00:15:11.650 - 00:16:05.102, Speaker B: pretty much all of the decision making in these types of application infrastructures exists on the server, on the publisher side of things, and that's really different than how a distributed application works. IPFS, this kind of complexity and load is distributed across all of the participating nodes, not only the publisher. And this means also that if the publisher goes away that that data can still be accessed. Which is interesting when we talk about what that means for user control of the Internet or application stack. This really diffuses and divides up the control, moves a lot of what was traditionally centralized behind the publisher into the user. The stack that IP Fest has built in sits on a couple of different pieces. Libby to P multiformats filecoin is built on a lot of these different technologies, the different roles that these technologies have from linking data together with IPLD lipidp for the transport.
00:16:05.102 - 00:16:50.034, Speaker B: Each one of these you can use independently of IPFS itself. The IPFS node itself does a number of things from the chunking and communication that I talked about verifying CIDs and the return data. This is configurable to your application, and also we configure it differently depending on if it's running on a mobile phone or laptop, for example. These nodes enable a bunch of different things, different capabilities, such as communication key management and syncing. You can install IPFS in a number of different ways. You can run daemon, you can run IPFS desktop, which I'll show in a second. The Go IPFS CLI is our main node and kind of the workhorse of the public network, and you can install it through a number of different packages, managers as well.
00:16:50.034 - 00:17:33.002, Speaker B: In the Ipfest ecosystem, there's a number of tools and services. IPS desktop is really the probably easiest way in the door. You can download this for a bunch of different applications or a bunch of different operating systems, linux and Mac OS and Windows. And this allows you to run IPFS pretty easily on a regular computer. It has a nice user interface that allows you to see the files that you're working with and how much bandwidth you're using and things like that. IPFS CLI, if you are a developer or a systems engineer, has a number of different commands that allow you to manage the system, to be able to learn more about it, see what it's doing, and all the things that you need to do to be able to run and deploy IPFS. Like I said, very few browsers at this point run IPFS natively.
00:17:33.002 - 00:18:20.510, Speaker B: So we have an Http gateway that we run, and there's also a number of other Http gateways that other companies run, like Quantflare. And these gateways allow the access to IPFS network using the tools and protocols that we are most broadly deployed today, such as HTP. We run one that really gets a lot of traffic and it's always fascinating to see. IPFS gateway, Uris and URLs in the wild. IPS Companion is a browser extension that does a couple of nice things like you can configure it to automatically use your local node to be able to serve content if it detects that it's available on IPFS and it's available for all major browsers. JS IPFS is a implementation of IPFS and JavaScript that has a lot of functionality, allows you to be able to use it inside browser tabs or Electron or node. JS server side applications.
00:18:20.510 - 00:19:09.482, Speaker B: There's a number of different toolkits and frameworks that you can use IPFS, Textile, Three, Box, Orbitdb. These are different abstractions on top of IPFS that might provide some of the metaphors that you are used to working with today. If you're used to working with object oriented database or distributed logs or even some of the identity primitives that you'd be used to in a regular web two application framework, I talked a little bit about name resolution. IPNs is a method for name resolution built into IPFS, and on top of that are built in number of other different services as well. We have DNS link to connect and integrate with regular DNS. Unstoppable domains and ENS are ways that people use to be able to encode a name resolution into a blockchain record. And now let's talk for the last ten minutes about deployment.
00:19:09.482 - 00:20:25.878, Speaker B: It's kind of the thing that we're going to be talking about over the course of this hackathon. And one of the number one questions that we get is where is my IPFS node? I run IPFS on my desktop, but if I shut my computer off, where does my node live? As an application developer, is there a service that runs my node elsewhere? Is the network? Does it take care of it? There are a number of different ways and topologies that you can use IPFS to be able to make sure that your data stays available. And one of the things that the secrets of this technology that a lot of people don't know is that IPFS is actually powered by a cabal of benevolent wizards who host all your data infinitely zero cost because magic. Okay, that's not actually the case, I'm sorry to say. You actually need to run a node if you are an application developer, if you are a business, if you want your IPFS data to stay up and alive, you need to think about it the way that you think about deploying web. Two technologies from the standpoint of actually making sure either running a node yourself or paying somebody else to run a node on your behalf to keep your data alive on the network. Like I showed a few slides ago, even if your node goes down, if other people are hosting it, they can also serve it.
00:20:25.878 - 00:21:01.474, Speaker B: However, that is not a guarantee of the availability of your data on the network. Now, the IPS does have a bunch of commands for you to kind of get an idea how many other people are hosting my data on the network. That also is not a guarantee though, unless you have made a relationship with those people who are hosting it. So it's definitely part of your responsibility to make sure that your node stays available. Also part of the maybe benevolent elves, sometimes not benevolent elves. A lot of IPFS infrastructure runs on names that you would find familiar. Bare Metal servers run a couple of these different services.
00:21:01.474 - 00:21:41.360, Speaker B: Also people hosting on different virtualized solutions. And I'll talk about in a few some of the bigger services that do IPFS actually run on top of some of these familiar names. So pinning services are services you can engage to host your IPFS data. Turnum infera and Pinata are a few of these where you can create an account and upload your data to their servers and they will keep it alive for you. Fleek is a service for hosting and publishing IBPS websites. It allows you to hook into the types of regular web development workflows and CI and integration flows that you're used to today. It makes it very easy to be able to deploy your services with not nearly as many changes as trying to roll your own.
00:21:41.360 - 00:22:17.478, Speaker B: Pinata is one of the pinning services that I mentioned briefly before, and they run most of their infrastructure right now on DigitalOcean. They also use Amazon web services, but they've built a solution that allows them to be cloud agnostic so they can kind of move it between services, which is nice. They did do some DIY stuff where they built their own cluster solution on top of IPFS to be able to sync data between the nodes that they're running. Textile is one of the frameworks I noted before. They run a bunch of backend services. They run on Azure and Kubernetes. They use MongoDB so IPFS.
00:22:17.478 - 00:23:14.410, Speaker B: While the protocol itself provides a number of different characteristics that technologies today don't have built in with HTP, a lot of times the backend infrastructure is built on things that you might be familiar with if you're on DevOps or building cloud based solutions. And a lot of these companies, I found, use a variety of different types of these services. So Fleek has shared an architecture diagram with us and they use a bunch of different they do basic region management like you have to do with regular services to be able to ensure the availability of data. So really for a sophisticated IPFS application, you need to think about the availability across regions. You might get some of that from the protocol for free, but also there's free and then there's guarantees. And as a business, you want to be able to guarantee the availability and uptime of your service. As adoption grows, I think more and more of that organic part of network health is going to come from participation, organic participation in the network.
00:23:14.410 - 00:23:56.138, Speaker B: But these businesses, especially as they're providing services to other businesses, do everything they can to be able to make sure that your service as application developer is really good. Filecoin actually also has a pinning service API that a lot of these groups are starting to look at. It just recently shipped in IPFS, and this is a way for you to be able to have your IPFS node backed by Filecoin storage. You can store data long term in Filecoin and it gets pulled up into IPFS. To be able to serve this API is pretty new. Fleek has a product called Space and Space Daemon that actually provides some of these same types of services and use these technologies. Textile also has Powergate, which is very similar.
00:23:56.138 - 00:25:18.978, Speaker B: It's an all in one IPFS and Filecoin where it abstracts away some of the complexity of running those multi node topologies for you, which is really nice. And I think we're going to see a lot more of these types of collapsed services, not just for IPFS and Filecoin, but for full end end DAP application services more and more. So that's a quick run through of who's using IPFS, what they're using it for, the basics of how IPFS works, some of the toolkits services and other application and developer helpers that you can use today. Quick speed run through the types of network topologies that some of the service providers have some of the advanced services that you might need as a business that's shipping a more sophisticated or complex application on top of IPFS and filecoin, and thank you for listening. If you want to learn more, I'll be hanging out in the Protocol Lab, Sponsor Channel and Discord for the duration of the hackathon. We'll have a couple of other folks hopping in to be able to answer your questions and help you build your applications. You can also learn a lot more about the primitives of some of these systems at Proto School, where there's a set of structured curriculum available for you to learn and walk through with quizzes and even some coding examples inside there to be able to test your knowledge and be able to get a solid base of understanding of how these systems work.
00:25:18.978 - 00:25:32.860, Speaker B: You can follow us on Ipfest at twitter and pound Ipfest on freenode. And I would love to be able to meet you and talk to you about the things you're building over the next couple of weeks during this hackathon. Thanks.
00:25:34.110 - 00:25:43.670, Speaker A: Awesome. Thank you, Dietrich. Thanks, everyone, for joining. If you want to chat with Dietrich, head to the Discord Channel where you can ask away. Cheers.
