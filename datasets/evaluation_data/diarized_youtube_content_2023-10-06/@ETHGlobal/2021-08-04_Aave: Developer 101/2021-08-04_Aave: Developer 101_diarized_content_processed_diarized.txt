00:00:00.410 - 00:00:07.040, Speaker A: Right here. I'll give you a moment to intro what you're going to talk about, but I'm really excited to see how this goes.
00:00:08.370 - 00:01:59.970, Speaker B: Hi, I'm Shivani, I'm a developer at Aave and we'll be going through some basics of Aave development which will be helpful for anyone who's looking to integrate their contracts or want to interact via their apps. Here we go. So Aave is a liquidity protocol that allows depositors to put their digital assets to use and earn some interest on it based on the market conditions. And borrowers to get instant digital loans, borrowers don't have to wait for them to be matched or anything, they just can have either enough credit delegated to them or have some collateral deposited in the liquidity pools and they can get instantaneous loans. So apart from these two, the other main actors in Aave protocol are the price feed Oracles. We use chainlink Oracles with Aave Fallback Oracles to provide the up to date market prices. Then we have collateral liquidators since health of Aave pool depends on the health of underlying debt positions or the health factor of the protocol.
00:01:59.970 - 00:03:17.210, Speaker B: So liquidators help by closing the bad debt positions and in doing so, they can earn liquidation bonus and so it's a win win situation. And then lastly, our integration integrated applications, the applications built on top of Aave or that are using it flashground or in some way. As of last I checked, the total value locked in our protocol is about 15.4 billion. And it's as we speak, probably this total value in the Ave system comes from Aaven market, ave V Two market which was launched earlier this year. AMM market which allows people to put their liquidity provider tokens from uniswap or balancer as assets. Then Ave market on polygon chain and then the safety module.
00:03:17.210 - 00:04:15.190, Speaker B: We'll talk about this shortly. So the main protocol features are the A tokens, these are interest accruing tokens. They are one to one with the underlying asset. Then we have borrow. In Aave protocol there is option to take both stable versus variable borrow rate and someone who wants to switch between rates. You can do that anytime without having to clear the old debt position and get a new debt position to share their credit limit with other users. And we'll talk about this.
00:04:15.190 - 00:05:02.720, Speaker B: Flash loans are the instantaneous loans which you can get without any collateral, with just a little caveat that you have to pay them back in the same transaction. But in that transaction you can do anything with this one. And lastly we have governance. Our way governance. V Two is what allows this protocol to be decentralized. The entire protocol upgrades or the upgrades, even the protocol itself or adding of new assets, all is done via a way governance. So what's new in V two? Batch flash loans.
00:05:02.720 - 00:06:01.972, Speaker B: Flash loans were provided in previous version of Ave Two. But now you can take batch loans which that is like multiple assets in the single flash loan transaction or single call. Then there is tokenized deposition. These are non transferable tokens. Credit delegations is now native to the Protocol and our governance v two Avid token has governance delegation capabilities for both proposaling and voting in the Protocol. And obviously we have optimized gas usage. The lending tool in the Ave protocol is only for interacting with ERC 20.
00:06:01.972 - 00:07:19.508, Speaker B: You can only deposit ERC 20s or borrow ERC 20s there, but if you want to use native ETH or native Matic in case of polygon then you can use our bet gateway support. All a tokens are also EIP 2612 compatible. That is they have a permit function. So this enables gasless transaction feature or meta transaction feature. So how does this deposit or lending in our liquidity pool works? Protocol tokenizes all the deposits with a tokens. So if you deposit like 100 die, then you receive 100 a die and the user who's holding these a tokens earn interest every second depending on the risk parameters and borrowing demand. There is also if you transfer these a tokens then the person your underlying collateral also gets transferred.
00:07:19.508 - 00:09:08.690, Speaker B: So that's a little thing to be careful of. Don't transferring a tokens would be transferring collaterals and anytime you can withdraw your collateral by just burning these A tokens so programmatically this is how it looks you just need the address of the asset, the amount for which amount that you are depositing, you can deposit on behalf of someone or for yourself. The message sender or whoever the on behalf of is will be the one who will receive a tokens and will be the one who can withdraw the collateral. Before depositing you'll have to allow Lending Pool for the amount that you are trying to deposit and then you can deposit this referral code is for third party integrations. When you deposit emit function is sorry, deposit event is emitted with this referral code which third party can use for their promotional or whatever integration they use for but if it is you're not using for anything, you can just leave it zero. So withdrawal is pretty straightforward, you don't need any approvals for it, you just need to mention which underlying asset you're withdrawing and the holder of atokens can withdraw Lending Pool. When you call Lending Pool withdraw, lending Pool will just withdraw it from the message senders account.
00:09:08.690 - 00:10:10.272, Speaker B: Pull eight tokens from message senders account and they will receive the and anyone who's mentioned in this two can receive a contract, can withdraw it to someone else if they want to. In case you want to withdraw the max, you can just specify minus one or that is UN max or you can specify whatever amount you want borrow. So if you have deposited assets, you can borrow any supported asset and select between variable or stable borrow rate. Borrow position can be backed by single or multiple assets. When you deposit an away by default. If that asset can be used as collateral, it will be enabled. But if you want to disable, you can separately disable assets.
00:10:10.272 - 00:11:34.908, Speaker B: So when you take a loan, it is automatically backed by all the assets for which borrow is enabled. Then you can pay whenever you want using the same asset you borrowed or you can also pay with your collateral to cover the debt position. So this is instant loan as we said. So when you borrow at Awe, there is health factor which is basically a proportion of your collateral versus the value of the borrowed asset. Anytime your health factor is less than one, anyone can liquidate your position which means they can basically claim your collateral on discounted rate to clear off the bad debt until the health factor of that account comes back to equal to one or more than one. The suggested health factor for volatile assets would be about two or more than two. This is how borrow looks on the code side you need the asset, this is the address of the asset you're borrowing.
00:11:34.908 - 00:12:50.276, Speaker B: That's the underlying asset. The amount interest rate mode can be one for stable or two for variable stable that would have just stable interest rate and variable is changing based on market utilization rate referral code can again be left as zero or just. This will be an event that will be emitted and this on behalf is interesting. So this on behalf could be someone who has credited their credit line, shared their credit line either with the person who's sending this transaction or could be borrowing on behalf of yourself. Then you should have enough collateral deposited or otherwise the creditor should have enough credit delegated to you. We'll talk about the credit delegation in more detail very shortly. So swapping as I said, you don't need to clear your debt positions.
00:12:50.276 - 00:13:41.736, Speaker B: You can just swap your interest rate mode. One two whatever repayment repayment happens directly in the lending pool itself. You need to have the borrowed asset or the asset you're repaying. You can pay on behalf of someone else too. So anyone can clear the debt position. So even if it is like a creditor has delegated their credit line to someone else, they can still irrespective of borrowers repaying it on time or not. They can do it themselves too if the health factor is low.
00:13:41.736 - 00:14:20.976, Speaker B: Or they could have some offline arrangement. Yeah, so while repayment you need to approve lending pool for the amount you're repaying and again you have to specify the interest rate node. So if you're clearing the stable debt, it has to be run else too. So finally credit delegation. This is pretty cool. I like it. So credit delegation allows approved third party entities or contracts to power assets using your collateral and repayment mechanism can be enforced on chain or off chain.
00:14:20.976 - 00:15:56.310, Speaker B: So it could be something how I think DeFi saver was doing. You can have a vault that opens a depth position and then have some other contract with which it enforces some agreement with the borrowers. But they can have huge pool of assets with bunch of other users delegated some credit limit based on totally external way. So this way borrowers who are taking loans from Aave protocol does not need to have assets deposited in the away protocol. How this works, a creditor can either delegate the stable debt or a variable debt. So you have to get the address of the stable debt token or variable debt token whichever you are approving for and you get the address of the borrower specify the amount that you want to delegate. So that would be the max amount that a borrower can get from liquidity pool and just on that token approved delegation amount and borrower address.
00:15:56.310 - 00:17:23.420, Speaker B: Once the credit has been delegated that borrower can just simply go directly from the liquidity pool borrow and here the on behalf of address would be same as who in this previous slide approved this token or who approved these limits as a salary pay can be done by anyone. So in this case there could be an off chain agreement or a separate on chain contract with which this creditor enforces repayment. But they can manage the large repayments and whatever in single the vault if it is like a contract with contract that is doing this. So the wall can do the repayments and manage the assets in our way protocol while enforcing repayments from an external contract with its actual borrowers. So that's pretty cool. Next is flash loan. So these are special loans, they are uncollateralized, they must be paid at the end of the same transaction.
00:17:23.420 - 00:18:23.744, Speaker B: If you don't repay then the entire transaction just rewards it's like nothing happened. Can be used by arbitrary code. So once you get those borrowed funds, you can run whatever and you can do whatever with those funds, no obligations, just only thing is you have to repay at the end of the transaction. So there is a flash loan guide, I'll share more links at the end of presentation but here so some use cases of flash loans are migrating liquidity between protocols. So you don't have to hold those funds, you can just decentralize exchange arbitrage. That's pretty interesting one when I would suggest simple one. The basic one where you have two DEXes with price differences.
00:18:23.744 - 00:19:56.240, Speaker B: And to make actual profit out of it, you can just flash loan enough entire liquidity of the pool in the transaction, sell it on the other decks and then finally repay the debt and the profit is all yours. Liquidations without capital as we said, when health factor in Aave protocol falls below one you can liquidate or even like in MakerDAO collateralized debt positions if ethereum value falls actually no, not there. No anyway yeah. So in liquidations when health factors fall below one you need to repay the debts while clearing that debt position before you can get the disarmeded collateral. So you can do that thing with flash loans without needing that upfront capital to repay the debt or clear that bad debt positions, then swap a tokens or repay debt using your collateral. So this is how internally Avidjs Library does. If you don't have enough of the borrowed asset to clear your debt position, you can use your eight tokens flash loaned to flash loan and then sold on decks and to repay your debt and free your collateral.
00:19:56.240 - 00:21:04.580, Speaker B: So those are cool things and many more. This is how it looks like for flash loans the user would deploy their own contract with a function which will be the one you're calling this flash loan. On lending pool you specify the receiver address which will be the address of this contract or whichever contract is the flash loan receiver base. So basically right now over here it would be this contract and then the assets that you want to borrow. Since V two allows batch flash loans you can specify multiple assets amounts. This is corresponding to the assets. So asset zero, asset amount zero, that would be the amount borrowed for that asset modes.
00:21:04.580 - 00:22:12.292, Speaker B: For each asset you have to specify mode. So in V two flash loans you have the option to have no debt position at the end of the flash loan. That's basically how most flash loans work. But in case you want to open a debt position at the end of the flat loan call you can specify mode as one and instead of the amount being repaid, if you have enough collateral a debt position would be opened for this receiver address. It could be stable or variable. You have to specify on behalf of that's this address, which actually that will be the address on behalf of whom the depth position will be open. These are the params that will be passed to the execute operation, execute function operation.
00:22:12.292 - 00:23:22.464, Speaker B: This is we'll talk in a bit. These are the arbitrary params you need for the execution of your flash loan code so you can pass that. And this referral code is same as what we had in deposit and borrows. So now this is where the power actually gets used. So this execute operation is the method which is going to be called by lending pool. Once you call the flash loan, the call goes to the lending pool, it does its check, the receiver address is right, assets and amount lens are valid, modes are correct and all those things and then it sends those requested amount and call this execute operation. So by the time the controller or execution returns to this function or comes to this function, you already have the requested assets here you can do arbitrary logic whatever.
00:23:22.464 - 00:24:34.404, Speaker B: If let's say you want to use flash loans for liquidation, you can do the liquidation call here, do the swap of the collateral to get back the borrowed asset and all you have to do is just at the end approve lending pool for the amount you owe. This amount you owe is the amount you borrowed plus the premium. So currently I think it's 9% fee on flash notes. So yeah, it would be premium plus the asset and that's it. You have to make sure your contract has enough funds and lending pool itself will itself withdraw those funds or pull those funds from your contract. If there aren't enough funds or you have not given enough approval, the entire flash loan would fail. So, this is like important governance.
00:24:34.404 - 00:26:02.500, Speaker B: So now coming to what makes this whole protocol decentralized, so Aave and Stakeaway token holders have power to vote in the protocol and propose in the governance. This governance allows protocol updates, new asset listings, changing of risk parameters, upgrade to the governance contracts itself, voting and proposing. Both of these powers can be delegated and you can choose to delegate one of the power or both. This is how it works a proposer with enough proposition power, submits the proposal to the governance contract. It goes into the short time lock or long time lock. These short time lock proposals are for upgrades to the protocol or adding new assets or ecosystem reserve related stuff. And if you want to update governance module itself, then it goes through a long time lock after the lock expires and vote on the proposals are submitted through the governance contract based on the governance strategy, it's queued and then executed.
00:26:02.500 - 00:27:37.910, Speaker B: So, to summarize, we have in governance and off chain process where you submission ave request to community and then AIPS ave improvement proposals, then you create an onchain proposal. For this you need enough power and you also need to have enough proposition power throughout the voting. Voting happens through certain the voting period is specified during the proposal. So through through the voting period hack wow. Yeah, proposal voting happens through the through the period like based on whether it's short time lock or long time lock, then it's queued and finally executed. So, here's a roku precedent set by the curve Dow where they wanted to add curve token to our protocol V two and they went ahead and added this nice Arc on ave governance forms. The links were shared here and I'll share all these links later.
00:27:37.910 - 00:28:59.710, Speaker B: So they submitted the Arc on Governance forum for communities recommendation and start the discussion around risk analysis and reviewing the stuff. Then they went on Twitter asking people to delegate proposal power for the account held by Curvedao. Yeah, then they submitted this is how the governance delegation can happen. You can delegate so there is governance power associated with ave token as well as takedave token. So, you can do this could be Aave token or you can do the same for stake ave, insert the address of the person, the user, the whom contract, whom you want to delegate the voting or proposing power and then delegate. So over here, this is delegating both the power, but you can do something like delegate by type. I'll share a link to our guides where all these code snippets are also available.
00:28:59.710 - 00:29:27.350, Speaker B: Then submitting vote. That's done on avegar. And it's two contract. You need to know the ID of the proposal you want to vote for. And anyone who has voting powers can vote. Like there's no minimum threshold when it comes to vote. Support would be false or true based on support.
00:29:27.350 - 00:30:37.352, Speaker B: Okay, so next is taking this is really cool. So Ave markets are covered in case of hacks by safety modules. This is obviously subject to the governance, whether they agree or how do they see this situation as anyone can deposit away or Aave ETH balancer pool tokens into our safety module. And the good thing is, by depositing in the safety modules, one can earn rewards in terms of Ale and these takers will be slashed in case of the disaster. Like up to 30% of the of the reserve can be used for covering these unforeseeable circumstances. But that happens really. And there's also like incentive to earn rewards.
00:30:37.352 - 00:31:49.060, Speaker B: So it balances out how staking work. You can use your Ave token address amount to stake approve lending pool for the amount you want to stake and then on stake token contract you just call stake and amount to stake. You will receive rewards in the form of staked away, which you can claim after a certain period to release your staked away. There's a cooldown so it's not instantaneous that you can withdraw. You have to initiate a cooldown period for your staked away tokens and at the end of that cooldown period you can redeem. If you forget to do it at the end of the cooldown period, then you'll have to start the cooldown period again. Finally we have avenger Sam.
00:31:49.060 - 00:32:44.288, Speaker B: That includes Curve, which allows Adai deposits into the curve liquidity pool DeFi saver. One of the first apps was using Flash loan for the automations and pretty cool full combo. They got pretty nice flash loan weave. So Flash loans could be used by non developers too. Yon Finance, they have a link vaults Avekochi. So this is pretty cool. They have NFTs, but underlying these NFTs there are a bunch of a tokens which are earning interest.
00:32:44.288 - 00:33:52.300, Speaker B: So totally unrelated project to Aave, but we know them through hackathons and pretty cool. There are a lot more integrations that I can't really talk about, but we are very glad to have them as part of our Avengers family here. All the contracts are open source and you can find them on GitHub and you can also import from the NPM package. Protocol v two is deployed on Coven testnet and also on Mumbai testnet. We do use different ERC 20 tokens for Cohen for Easy Mint, so refer the docs on how to get those. We also have client library ave protocol JS for easy data formatting and integration. You can find more about it in Docs.
00:33:52.300 - 00:34:14.150, Speaker B: Drop into our Discord Dev Channel. If you have any questions, here's the documentation links. And I'll also probably share links in Discord channel. Now we can have questions.
00:34:17.880 - 00:34:38.520, Speaker A: Thank you for that. That was an incredible presentation. If anyone has any questions, feel free to come off mute. I know a few of you have put some questions in the chat already, which I'm not sure if we've gotten to, but I guess start from the top. First question asks what sort of collateral is to be submitted by borrowers?
00:34:39.840 - 00:35:05.540, Speaker B: Sorry. So there are 27 26 collaterals that are allowed on our main market, but each market has different reserve tools that are allowed and these are ERC, 20 tokens.
00:35:08.680 - 00:35:24.410, Speaker A: That makes sense. If anyone wants to come off mute, feel free to raise your hand and I'll bring you up. Got one already. Hey for it.
00:35:26.380 - 00:35:32.750, Speaker C: I was wondering if we can create custom lending pools for Staking, for example.
00:35:35.920 - 00:35:39.420, Speaker B: Lending pools or staking.
00:35:39.920 - 00:35:54.070, Speaker C: Yeah, let's say if I want a set of people to be able to stake on a specific pool that would be maybe owned by ordap or something like that.
00:35:55.560 - 00:36:26.348, Speaker B: Right. So you're saying you have a separate pool in which people add money to and that use that to take on maybe Aave protocol or somewhere else. Yeah, that seems interesting. And you can have a separate mechanism how you distribute the rewards to your users and have a mech. Okay.
00:36:26.514 - 00:36:43.140, Speaker C: And can I also stake on behalf of someone? So you were talking about it was another feature where we could do on behalf of but I was wondering for Staking, if we also have this kind of parameter.
00:36:44.280 - 00:37:14.270, Speaker B: No, so Staking is just use wait, you can take on behalf of but then only there that like so there's a thing like all the rewards that will be earned will be claimed by only that user. Okay.
00:37:16.800 - 00:37:18.670, Speaker C: I will do some more research.
00:37:19.780 - 00:37:20.432, Speaker A: Thank you.
00:37:20.486 - 00:37:22.720, Speaker C: It was a great presentation.
00:37:28.580 - 00:37:42.532, Speaker D: Yeah. I have a question. So when you deposit, you get the A tokens back and when you gain interest, the A tokens in your wallet stay the same.
00:37:42.586 - 00:37:42.852, Speaker A: Right.
00:37:42.906 - 00:37:52.136, Speaker D: So is there a function to check the profit of your underlying so when.
00:37:52.158 - 00:38:27.744, Speaker B: You deposit your A token balance starts increasing. Like every second. You don't have to do any transaction, but your A token balance will start increasing. That's because underlying like every time someone deposits or pools liquidity index changes, the pool's income changes. And that's how we are calculating the user's balance. So there's no distribution function that's something like throws people off. But yeah, you'll get your updated balance.
00:38:27.744 - 00:38:51.210, Speaker B: If you want to just get the base scaled balance, you can get the scale balance of the user too, but balance off will give you the updated balance, which includes ingress plus principal. Does that answer?
00:38:53.840 - 00:39:04.450, Speaker D: Yeah, I think so yeah, I've never noticed that. I have plenty of a tokens in my wallet, but I've never noticed them going up, I guess.
00:39:08.060 - 00:39:26.700, Speaker A: Yeah, I think we have two questions in the chat. Feel free to post your questions in the chat if you're more comfortable doing so and we will get to them in the order that they they appear.
00:39:28.560 - 00:39:30.300, Speaker B: Where do I see a chat?
00:39:34.020 - 00:40:02.330, Speaker A: We have a few people joining us right now. If you're just joining us right now, we are taking questions. So the first question, I'm new to DeFi and I have a question here. I can swap one token with another or borrow staking my token. In both conditions I need initial capital then what advantage user gets on borrowing rather than swapping. Can you give an example condition where borrowing seems very suitable than swapping, I guess?
00:40:03.600 - 00:40:45.412, Speaker B: Well, in case of borrowing, you don't really have to swap. You deposit your tokens which are available to withdraw. Plus since these are like collateralized loans, when you deposit, you'll be earning interest on those deposited assets. Plus there something I actually forgot to talk in the presentation. There's also liquidity mining incentives that are running right now. So you'll be earning Aave or Matic in case you're doing it on polygon. So yeah, you'll be earning liquidity mining incentive on both your borrowed assets as well as deposited assets.
00:40:45.412 - 00:41:26.550, Speaker B: Plus you'll be earning interest on your deposited assets. So your interest on borrow is kind of reduced and whenever you want to just finally repay, you can get your collateral back, even if your collateral, just like, let's say if it was a volatile asset went up in price, you can get it back. So you didn't really swap them. And that's where it ends up being sometimes profitable to get collateralized debt positions rather than swapping them. Does that answer the question?
00:41:30.940 - 00:41:45.740, Speaker A: I think so. I appreciate the explanation. There one more question from the chat. I'm curious about the credit delegation function. How in a smart contract can you enforce the delegate to repay the delegator?
00:41:48.720 - 00:41:52.030, Speaker B: Wait, can you say again? I'm sorry?
00:41:54.000 - 00:42:00.880, Speaker A: In a smart contract, how can you enforce that the person being delegated to can repay the one delegating to them?
00:42:01.030 - 00:43:03.620, Speaker B: All right, so in this market you can have some totally different mechanism on how you could have one to Lebanon collateralization ratio instead of how we have over collateralized loans on a way protocol V two. Or you could have some sort of NFT which is held as a collateral and if the delegate didn't pay, that NFT, which could be very valuable, can be captured by the delegator. So those could be the mechanisms you have externally for repayment arrangements, whereas the delegator can be using this credit delegation feature from the protocol. So basically delegate can get and that gets NFT back loans too. So that would be like on top of the main protocol.
00:43:07.640 - 00:43:27.996, Speaker A: That makes sense. One more from the chat how can I use Ave for a smart contract that gets into agreement with another smart contract might be phrasing that wrong. If the person who is asking that wants to hop on real quick hop off mute to ask the question, go for it.
00:43:28.098 - 00:43:55.590, Speaker B: Smart contract are there for a smart contract that I don't know what that means that get into agreement with another smart contract? I'm not sure what you're talking about maybe you can message me on discord and we can discuss what you mean by that and details of it.
00:43:56.040 - 00:44:21.820, Speaker A: Yeah, it's a good option to mention that. If we don't get to any of your questions today, feel free to post them in discord and continue the conversation there. It's an excellent place to continually communicate with Ave during the hackathon. One more from the chat. Are the matic rewards mapped to the address holding the a tokens? And is there a function to calculate the accrued matic?
00:44:22.960 - 00:45:03.000, Speaker B: Yes so Matic rewards are for A token holders or also for the borrower so yes they will be mapped to the A token holders once you transfer your A tokens your previous rewards won't get transferred but new rewards would start accruing for the new address holder regarding is there a function to calculate? We have this guide and also aware JS can be used for the calculations and formatting so I'll share the links and you can check the developer talks.
00:45:06.720 - 00:45:18.224, Speaker A: Awesome. Does anyone have any further questions? Feel free to come off mute real quick and ask or throw them in a chat and I will ask for.
00:45:18.262 - 00:45:23.090, Speaker D: You how long are the matic rewards going to last?
00:45:25.780 - 00:45:59.310, Speaker B: That's something I don't know yeah so right now you can see there is some date emission end date and based on that but I don't know if they would decide to increase the reward this liquidity incentive that's not in my control.
00:46:12.150 - 00:46:39.160, Speaker A: If anyone's got any last questions I think we'll wrap up here thank Giovanni for an incredible presentation and again feel free to connect in Discord an excellent place to continue the conversation ask any questions that might come up after the presentation that you might have while building with Aavetech. I think at this point we will be closing the stream thank you to everyone who attended and again thank you Shivani for.
