00:00:09.290 - 00:00:24.394, Speaker A: Yeah. Thanks for coming, guys. I know this is a last presentation. You know what they say, save the best for last. So this is my talk. Don't reinvent the GEF wheel. I know there was very technical, technical speech before me, so this will be the complete opposite.
00:00:24.394 - 00:00:45.500, Speaker A: It's very be untechnical. So I hope you guys enjoy it. So, yes, I am library ethereum virtual machine. I'm a couple of things. I'm a mempool inspector. I'm a sandwich connoisseur. And I'm kind of here mainly because I kind of wanted a free ticket to mev day, which is why I'm on stage right now.
00:00:45.500 - 00:01:02.506, Speaker A: Yeah. So I don't really claim to know everything. I know some of the giants. I'm standing on the shoulders of the giants. The GEF creators are here. I know the forge creators are here. I use those tools.
00:01:02.506 - 00:01:21.638, Speaker A: I'm a humble searcher. I don't claim to know anything. So if you see anything wrong, you can honk at me if you want. Or if you guys are in Amsterdam these days, you can do the bicycles. I got rang by a lot of the bicycles. You can also do that if you guys are up for that. Yeah, I guess.
00:01:21.638 - 00:01:58.740, Speaker A: Before we start, I would like to talk about something pretty serious. Let's talk some numbers here, I guess. How many euros worth of mev has been extracted? Does anyone have an idea? Like, since the inception of Flashbots, does anyone have any idea? €800 million? Yeah? Anyone else? No? Okay, well, it's a little bit off. It's actually €550,000,000 total extracted mev. And you can get that from Explore. Flashbots. Net.
00:01:58.740 - 00:02:18.620, Speaker A: And I know there's a couple of Americans out there. The mic look like a funny symbol, the Euro symbol. So I'll kind of convert it to empirical units for you, which is roughly about 0.6 of an Andre. Well, that's a current market. Current. Today's exchange rate might differ.
00:02:18.620 - 00:03:40.586, Speaker A: I'm also very confident that approximately 100% of the mev extracted are being extracted by people who are not in this room right now. I mean, why else would you guys listen to my talk if you guys could extract it? Right? I think that's because this is like the average perception. This is the perception of the average mev searcher. I know this is like a huge brain dump, so I'm going to let you guys read that for a couple of seconds while I take a sip of water and unironically it. Kind of fits into the previous slides, the previous presentation, which was incredible, by the way, I did not understand any of the Greek symbols. Can everyone read the text on it? We good? Okay, just making sure. The previous slide basically gave you a glimpse into what people think is the average mev searcher.
00:03:40.586 - 00:04:24.140, Speaker A: But this is in reality, a lot of mev searchers like to make things that just works enough. And this is my favorite example. It's a manual calculator. It checks both of your numbers and checks the operator, and it pre computes the result and it prints it for you. I also like to highlight the number of lines. That's 20,000 lines right there for a calculator, like a very simple calculator. This is actually not really far from reality, as my favorite Twitter friend here togat PvP, actually has his first Mev bot, which is about actually, originally about 16K lines, was printing money in one file, I might add.
00:04:24.140 - 00:05:10.260, Speaker A: So this is actually there's a very stark contrast between reality and perception. Just want to point it out there. So a lot of you might be asking, why are you here today? Why are you showing me all these slides? Well, I've been getting a lot of DMs on the Bluebird app asking me to share my mev knowledge. And if I share it correctly, if I share it and they're able to profit, they'll share half the profits to me, which is incredibly generous. So today I'm going to teach everyone how to get a real job, which is doing mev. If you can't describe your jobs in three words, I'm sorry to say, but you have a bullshit job, my friend. I do mev.
00:05:10.260 - 00:05:37.896, Speaker A: That's the correct and real job. In the words of Gavin Wood, give me GEF or give me def. GEF is the standard choice for mev extraction. GEF loves mev. Even the official flashboard client, Mev GEF, is fought from the Go ethereum. And if you look at the Mev GEF client, you would see that I made a PR. I pushed the request.
00:05:37.896 - 00:06:08.640, Speaker A: So I'm actually a contributor to Mev GEF. In fact, I even wanted to be the community manager for Flashports, but I got rejected. So if anyone out there is hiring for community managers, I'm just saying I'm on the market. So, yeah, these are the three features from GEF that I've found really helpful. State overrides tracer and GraphQL. And we'll kind of go through them bit by bit. They've helped me tremendously in my journey of mee searching.
00:06:08.640 - 00:06:38.876, Speaker A: Went from zero to hero. Managed to land from zero bundles to a couple bundles. Yeah, it's very, very useful, and we'll get to it. So state overwrites. What is it? Why do I care? Why does it matter? In fact, something really interesting was I met a guest developer the other day who wrote I think he wrote the State Override features, and he was shocked to hear that I was actually using it because he said, nobody uses that. Why do you use that? So here, I'm just letting it get a little cena. I think his name was Cena.
00:06:38.876 - 00:07:50.024, Speaker A: I have a slide just on State Overrides just for you. So I guess the most common problem that occurs for searches is, like, how do you test your new contracts in production? Because I think it's a lot easier on L two S because you don't need a factor in gas deployment costs. So if you've made your smart contract and your bot logic, how do you test your new smart contract? Because it's really hard to replicate the production environment when an ARB opportunity comes. How do you actually test it? How do you actually do the whole integration test between your bot logic, the smart contract, and the bunt and the transaction, the mempool? How do you combine those and how do you test that in real time? That's actually really hot. And we're all really familiar with Vitalik's law, which is the closer you are to deploying a contract, the higher the gas fees shoot up. So state overrides help you avoid that. So an EF call, which is an RPC method in GEF, it allows you to execute a new message.
00:07:50.024 - 00:08:38.020, Speaker A: It's basically used as a view only method. But in some situations, like the univ three quota, it's like a little hack where you can call mutable functions, but you call it a view only method to kind of extract out a value. So that's essentially eve call, it does a call, a view only call. But you can do it on mutable functions, it's just that it's not recommended. So for example, if I did an if call to this transfer function which returns success, I can kind of simulate that on main net to see if it will return a successful transfer. That's assuming that you're following the ERC 20 standard because if you're USDT, you don't really return anything. So this wouldn't work if you're trying to simulate it for USDT.
00:08:38.020 - 00:09:29.076, Speaker A: So this is how you would sort of use it, use the RPC function. You do an e call, you supply like some kind of contract payload, some kind of data that you encoded abi encoded data from know, the usual. But what people don't realize is that with E call you can actually add there is actually a couple you can actually add a third object. The second object is a block number, which is by default latest. But on the third parameter you can have this object called known as a state overwrite set, where you can overwrite certain features in you can overwrite certain state. So for example, you can overwrite the balance of a contract or an account, you can overwrite the nons of an account, you can overwrite the code of an account. You can overwrite the state.
00:09:29.076 - 00:10:24.472, Speaker A: When I say state, I mean like the storage values, like the key mapping, the raw storage values. Like when you read from I think it's levels DB or something, when you read from levels DB, like what's the raw value in there? And you can specify a state difference, which is a very subtle difference. It's basically to override the individual slots, whereas the state would overwrite all slots. So just keep that in mind. So this would be an example on how we would use it. We supply the original payload and then we give the latest block and we add in our state override method right here. And if you can see here, what we're specifying here is essentially on the address 42 we would like to deploy a new contract bytecode deployed bytecode that we would like the code to be that and we would like the state difference at slot zero to be our EF account address.
00:10:24.472 - 00:11:25.340, Speaker A: And the reason why we do that is because maybe your contract has some kind of ownership checking which on a lot of contracts would be the owner object will be on slot zero. So here we're saying that on address 42 we have a new contract which could be the contract you're testing or the contract you haven't deployed. And for the state differences we would like these state differences to be applied so you can overwrite the state as you do e call. And this is incredibly useful because when you're testing your contracts as or your new contracts alongside with your bot logic or your new bot logic with your contracts, you're doing this in a very mutable manner and you can kind of see what values it return. I'm assuming your functions return values by the way, if it doesn't return values and it doesn't revert, it might be slightly different but in this case it does. You can basically, I would say hot deploy it for every call you make. So it's a lot cheaper to kind of test new contracts.
00:11:25.340 - 00:12:23.460, Speaker A: The second thing I would like to talk about is the JavaScript tracer which I found really handy, very handy, especially when we're dealing with poisonous tokens. Does anyone here remember salmonella? Yes? Okay, great. Well, I didn't get wrecked but a lot of other people got wrecked. So how salmonella worked in a nutshell is that they tried to change the production environment so they would like to override the transfer function so that it would slightly differ in the production environment, in the test environment. And so one way you could do that is by checking the mine of the block. So for example, if the mine of the block was hard hat's testnet coinbase or mainnet coinbase account, then you would transfer it. So in the searches simulation it would be successful and it would fire off the bundle.
00:12:23.460 - 00:13:39.948, Speaker A: But if it were to be mined on the mainnet, this slight logic statement wouldn't be valid and so the transfer function would actually not be executed. So that's kind of poisonous token in a nutshell where they try and kind of create this delta between a production environment and your testing environment. So try and find little nuances there. So test and prod guys, test and prod. So I hope this isn't too small but what you can do is you can actually use a RPC method, also known as debug trace call, and apply a custom JavaScript tracer. As you can see here, I'm basically checking the opcodes of each of the opcodes and I'm basically seeing, hey, if the opcode is coinbase difficulty number of origin. It looks a bit suspicious because why does an ERC 20 transfer function need to read from block coinbase from the coinbase? Why does it need to use the coinbase opcode? Why does it need the difficulty opcode? Why does it need the block number of code? Why does it need a TX origin of code? It's just a little bit suspicious and so we can kind of return, we can kind of do a really quick trace over and then kind of pop it out and tell us, hey, these are the suspicious opcodes.
00:13:39.948 - 00:14:35.184, Speaker A: And from that we can kind of infer that this could be a poisonous token or it could not be a poisonous token. But yeah, you do debug trace call. The parameters are all the same from to some kind of encoded function data, which is usually your custom arbitrage function. And yeah, you just supply this JavaScript tracer. I would love to show you guys a lot more a deeper dive into the tracer, but unfortunately the documentation is huge and it's very confusing and I've been trying to put less code on slides, but unfortunately I didn't really think too much in advance. So the third section I would like to talk about is GraphQL. I'm not sure if anybody in here knows that GEF actually has an inbuilt GraphQL.
00:14:35.184 - 00:15:10.364, Speaker A: Does anybody know about that? Yes, a couple of people. That's great. Yeah, since EIP 1767, which has been out, I think since 2020, GEF has actually GraphQL built in. You guys can check it out right there. And you actually have to run GEF with a few additional parameters http and GraphQL to make sure the GraphQL library actually runs. Yeah, but using GraphQL is actually really simple. This is entirely in JavaScript.
00:15:10.364 - 00:16:19.430, Speaker A: I apologize, by the way, I know a lot of rust spans out here, but it is what it is. And so you can kind of specify, for example, in this request, I'm actually trying to get out the reserve values from univ two pairs from Sushi WEF and uniwef. So I'm trying to extract out the reserve values from the latest block. It might not seem like much, but using this method you can actually extract out a lot of the reserves in one call, which is very handy, very handy, especially if you're calculating arbitrage opportunities or backbone running opportunities between like 50K pairs or something. As they previously mentioned, you want to be able to continuously update it. The GraphQL interface is actually a lot more powerful than this one, but I find myself coming back to extracting out the storage slots using this method. So, yeah, there is an inbuilt GraphQL interface for you guys to play around with.
00:16:19.430 - 00:17:01.322, Speaker A: A little bit of parting advice if I have, is that programming socks plus ten intelligence to anyone who uses them is very comfortable speaking from experience. It's very underrated, but just want to bring that to light. You even can buy the C programming book together? Yeah, that's it. That's my slides. It's all the five minute mark. I think I rushed to it a little bit. Any questions? No.
00:17:01.322 - 00:17:24.400, Speaker A: Okay, great. Breaking close.
